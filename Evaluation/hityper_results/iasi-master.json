{
    "iasi-master/grid_search.py": {},
    "iasi-master/pipeline.py": {},
    "iasi-master/run.py": {},
    "iasi-master/analysis/aggregation.py": {
        "AggregateClusterStatistics.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "grid_params": [
                    "int",
                    "float"
                ]
            }
        },
        "AggregateClusterStatistics.grid_params": {
            "name": "grid_params",
            "location": 28,
            "return": [
                "str",
                "dict[, ]",
                "bytes",
                "float",
                "tuple[typing.Union[str,str]]"
            ],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "AggregateClusterStatistics.clustering_task": {
            "name": "clustering_task",
            "location": 32,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AggregateClusterStatistics.requires": {
            "name": "requires",
            "location": 43,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "AggregateClusterStatistics.output": {
            "name": "output",
            "location": 54,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AggregateClusterStatistics.run": {
            "name": "run",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AggregateClusterStatistics.run.weighted_by_n_cluster": {
            "name": "weighted_by_n_cluster",
            "location": 62,
            "return": [],
            "arguments": {
                "x": []
            }
        }
    },
    "iasi-master/analysis/data.py": {
        "GeographicArea.__init__": {
            "name": "__init__",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "lat": [
                    "tuple[int]"
                ],
                "lon": [
                    "tuple[int]"
                ],
                "level": [
                    "int"
                ]
            }
        },
        "GeographicArea.import_dataset": {
            "name": "import_dataset",
            "location": 46,
            "return": [],
            "arguments": {
                "self": [],
                "file_pattern": []
            }
        },
        "GeographicArea.filter_location": {
            "name": "filter_location",
            "location": 73,
            "return": [],
            "arguments": {
                "self": [],
                "df": []
            }
        },
        "GeographicArea.filter_flags": {
            "name": "filter_flags",
            "location": 77,
            "return": [],
            "arguments": {
                "self": [],
                "df": []
            }
        },
        "GeographicArea.scatter": {
            "name": "scatter",
            "location": 86,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GeographicArea._get_extend": {
            "name": "_get_extend",
            "location": 93,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "GeographicArea.cluster_subsample": {
            "name": "cluster_subsample",
            "location": 96,
            "return": [],
            "arguments": {
                "self": [],
                "df": [],
                "n_samples": []
            }
        },
        "GeographicArea.filter_cluster_centroid": {
            "name": "filter_cluster_centroid",
            "location": 104,
            "return": [],
            "arguments": {
                "self": [],
                "df": []
            }
        },
        "GeographicArea._rectangle": {
            "name": "_rectangle",
            "location": 115,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GeographicArea._set_ticks": {
            "name": "_set_ticks",
            "location": 123,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ax": [],
                "steps": [
                    "int"
                ]
            }
        },
        "GeographicArea.compare_plot": {
            "name": "compare_plot",
            "location": 143,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "X": [],
                "y": [],
                "include_noise": [
                    "bool"
                ],
                "n_samples": [
                    "None"
                ],
                "subarea": [],
                "filename": [
                    "None"
                ]
            }
        },
        "GeographicArea.geo_scatter": {
            "name": "geo_scatter",
            "location": 197,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ax": [],
                "df": [],
                "alpha": [
                    "float"
                ],
                "s": [
                    "int"
                ]
            }
        },
        "GeographicArea.water_scatter": {
            "name": "water_scatter",
            "location": 204,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ax": [],
                "df": [],
                "alpha": [
                    "int"
                ],
                "s": [
                    "int"
                ]
            }
        },
        "GeographicArea.subarea_plot": {
            "name": "subarea_plot",
            "location": 210,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "X": [],
                "y": [],
                "subarea": [],
                "include_noise": [
                    "bool"
                ],
                "filename": [
                    "None"
                ]
            }
        }
    },
    "iasi-master/analysis/scaler.py": {
        "SpatialWaterVapourScaler.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "delD": [
                    "int"
                ],
                "H2O": [
                    "float"
                ],
                "km": [
                    "int"
                ]
            }
        },
        "SpatialWaterVapourScaler.fit": {
            "name": "fit",
            "location": 19,
            "return": [
                "SpatialWaterVapourScaler"
            ],
            "arguments": {
                "self": [],
                "X": [
                    "bool",
                    "float",
                    "typing.Iterable[typing.Iterable[float]]",
                    "str",
                    "bytes"
                ],
                "y": [
                    "None",
                    "bool",
                    "float",
                    "typing.Iterable[typing.Iterable[float]]",
                    "str",
                    "bytes"
                ]
            }
        },
        "SpatialWaterVapourScaler.transform": {
            "name": "transform",
            "location": 22,
            "return": [],
            "arguments": {
                "self": [],
                "X": [],
                "y": [
                    "None",
                    "bool",
                    "float",
                    "typing.Iterable[typing.Iterable[float]]",
                    "str",
                    "bytes"
                ]
            }
        }
    },
    "iasi-master/analysis/search.py": {
        "GridSearch.__init__": {
            "name": "__init__",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "grid_params": [
                    "None",
                    "int",
                    "float"
                ]
            }
        },
        "GridSearch.grid_params": {
            "name": "grid_params",
            "location": 45,
            "return": [
                "str",
                "dict[, ]",
                "bytes",
                "float",
                "tuple[typing.Union[str,str]]"
            ],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "GridSearch.default_parameters": {
            "name": "default_parameters",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "typing.Type",
                    "dict[str, typing.Any]",
                    "None",
                    "list[dict[, ]]",
                    "dict[, ]",
                    "typing.Callable[, ]"
                ]
            }
        },
        "GridSearch.create_pipeline": {
            "name": "create_pipeline",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GridSearch.output_extension": {
            "name": "output_extension",
            "location": 55,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "GridSearch.statistics": {
            "name": "statistics",
            "location": 58,
            "return": [
                "tuple[int]"
            ],
            "arguments": {
                "self": [],
                "y": []
            }
        },
        "GridSearch.load_data": {
            "name": "load_data",
            "location": 68,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GridSearch.run": {
            "name": "run",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GridSearchDBSCAN.default_parameters": {
            "name": "default_parameters",
            "location": 118,
            "return": [
                "dict[typing.Text, typing.Union[list[int],list[float]]]"
            ],
            "arguments": {
                "cls": [
                    "typing.Type",
                    "dict[str, typing.Any]",
                    "None",
                    "list[dict[, ]]",
                    "dict[, ]",
                    "typing.Callable[, ]"
                ]
            }
        },
        "GridSearchDBSCAN.output_directory": {
            "name": "output_directory",
            "location": 127,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "GridSearchDBSCAN.create_pipeline": {
            "name": "create_pipeline",
            "location": 130,
            "return": [
                "Pipeline"
            ],
            "arguments": {
                "self": []
            }
        },
        "GridSearchHDBSCAN.default_parameters": {
            "name": "default_parameters",
            "location": 140,
            "return": [
                "dict[typing.Text, typing.Union[list[int],list[float]]]"
            ],
            "arguments": {
                "cls": [
                    "typing.Type",
                    "dict[str, typing.Any]",
                    "None",
                    "list[dict[, ]]",
                    "dict[, ]",
                    "typing.Callable[, ]"
                ]
            }
        },
        "GridSearchHDBSCAN.output_directory": {
            "name": "output_directory",
            "location": 148,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "GridSearchHDBSCAN.create_pipeline": {
            "name": "create_pipeline",
            "location": 151,
            "return": [
                "Pipeline"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "iasi-master/analysis/sink.py": {
        "Sink.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pipeline": [
                    "int",
                    "float"
                ],
                "area": [
                    "int",
                    "float"
                ]
            }
        },
        "Sink.save": {
            "name": "save",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Sink.satistics": {
            "name": "satistics",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "X": [],
                "y": [],
                "params": [
                    "str",
                    "int",
                    "float"
                ]
            }
        },
        "NetCDFSink.__init__": {
            "name": "__init__",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pipeline": [
                    "str",
                    "int",
                    "list[]"
                ],
                "area": [
                    "str",
                    "int",
                    "list[]"
                ],
                "H2O_bins": [
                    "int"
                ],
                "delD_bins": [
                    "int"
                ]
            }
        },
        "NetCDFSink.create_dataset": {
            "name": "create_dataset",
            "location": 45,
            "return": [
                "Dataset"
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "str"
                ]
            }
        },
        "NetCDFSink.save": {
            "name": "save",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "df": [],
                "filename": [
                    "typing.Text"
                ]
            }
        }
    },
    "iasi-master/analysis/__init__.py": {},
    "iasi-master/iasi/aposteriori.py": {
        "AposterioriProcessing.requires": {
            "name": "requires",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AposterioriProcessing.run": {
            "name": "run",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AposterioriProcessing.process_event": {
            "name": "process_event",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "str",
                    "bool",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "AposterioriProcessing.reconstruct": {
            "name": "reconstruct",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dataset": [
                    "int",
                    "str",
                    "typing.Iterable[C]"
                ]
            }
        },
        "SvdAposteriori.output_directory": {
            "name": "output_directory",
            "location": 129,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SvdAposteriori.output_extention": {
            "name": "output_extention",
            "location": 132,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "SvdAposteriori.reconstruct": {
            "name": "reconstruct",
            "location": 135,
            "return": [],
            "arguments": {
                "self": [],
                "dataset": []
            }
        },
        "EigenAposteriori.output_directory": {
            "name": "output_directory",
            "location": 160,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "EigenAposteriori.output_extention": {
            "name": "output_extention",
            "location": 163,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "EigenAposteriori.reconstruct": {
            "name": "reconstruct",
            "location": 166,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": [],
                "dataset": [
                    "list[int]"
                ]
            }
        },
        "DirectAposteriori.output_directory": {
            "name": "output_directory",
            "location": 189,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DirectAposteriori.output_extention": {
            "name": "output_extention",
            "location": 192,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "DirectAposteriori.reconstruct": {
            "name": "reconstruct",
            "location": 195,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "dataset": [
                    "str"
                ]
            }
        }
    },
    "iasi-master/iasi/composition.py": {
        "Composition.factory": {
            "name": "factory",
            "location": 21,
            "return": [
                "SingularValueComposition",
                "EigenComposition"
            ],
            "arguments": {
                "group": [
                    "int",
                    "dict[, ]",
                    "dict[str, object]",
                    "str",
                    "typing.Callable[, ]"
                ]
            }
        },
        "Composition.__init__": {
            "name": "__init__",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "group": [
                    "int",
                    "float"
                ]
            }
        },
        "Composition.reconstruct": {
            "name": "reconstruct",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "nol": [
                    "int",
                    "str",
                    "typing.Iterable[C]"
                ],
                "target": [
                    "None",
                    "int",
                    "str",
                    "typing.Iterable[C]"
                ]
            }
        },
        "Composition._export_reconstruction": {
            "name": "_export_reconstruction",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "target": [
                    "str",
                    "list[str]"
                ],
                "array": [
                    "str"
                ],
                "quadrant": [
                    "int",
                    "str"
                ]
            }
        },
        "SingularValueComposition.__init__": {
            "name": "__init__",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "group": [
                    "bytes"
                ]
            }
        },
        "SingularValueComposition.reconstruct": {
            "name": "reconstruct",
            "location": 60,
            "return": [],
            "arguments": {
                "self": [],
                "nol": [
                    "str"
                ],
                "target": [
                    "None",
                    "str",
                    "list[str]"
                ]
            }
        },
        "EigenComposition.__init__": {
            "name": "__init__",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "group": [
                    "list[str]",
                    "str"
                ]
            }
        },
        "EigenComposition.reconstruct": {
            "name": "reconstruct",
            "location": 98,
            "return": [],
            "arguments": {
                "self": [],
                "nol": [
                    "str"
                ],
                "target": [
                    "None",
                    "str",
                    "list[str]"
                ]
            }
        }
    },
    "iasi-master/iasi/compression.py": {
        "CompressDataset.requires": {
            "name": "requires",
            "location": 28,
            "return": [
                "MoveVariables"
            ],
            "arguments": {
                "self": []
            }
        },
        "CompressDataset.output_directory": {
            "name": "output_directory",
            "location": 31,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "CompressDataset.run": {
            "name": "run",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DecompressDataset.requires": {
            "name": "requires",
            "location": 75,
            "return": [
                "CompressDataset",
                "ReadFile"
            ],
            "arguments": {
                "self": []
            }
        },
        "DecompressDataset.output_directory": {
            "name": "output_directory",
            "location": 80,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "DecompressDataset.run": {
            "name": "run",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SelectSingleVariable.requires": {
            "name": "requires",
            "location": 118,
            "return": [
                "MoveVariables",
                "CompressDataset",
                "DecompressDataset"
            ],
            "arguments": {
                "self": []
            }
        },
        "SelectSingleVariable.output_directory": {
            "name": "output_directory",
            "location": 139,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SelectSingleVariable.run": {
            "name": "run",
            "location": 149,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CompressDateRange.requires": {
            "name": "requires",
            "location": 176,
            "return": [
                "typing.Generator[CompressDataset]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "iasi-master/iasi/decomposition.py": {
        "Decomposition.factory": {
            "name": "factory",
            "location": 20,
            "return": [
                "EigenDecomposition",
                "SingularValueDecomposition"
            ],
            "arguments": {
                "cls": [
                    "typing.Iterable[dict[str, typing.Any]]",
                    "str"
                ],
                "group": [
                    "float",
                    "int",
                    "None",
                    "typing.Type",
                    "str"
                ],
                "variable": [
                    "str"
                ],
                "threshold": [
                    "None",
                    "float",
                    "int",
                    "typing.Type",
                    "str"
                ]
            }
        },
        "Decomposition.__init__": {
            "name": "__init__",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "group": [
                    "list[]",
                    "str",
                    "set[str]"
                ],
                "variable": [
                    "typing.Type",
                    "list[str]"
                ],
                "threshold": [
                    "None",
                    "typing.Type",
                    "dict[str, typing.Union[str,typing.Any]]",
                    "dict[, ]"
                ]
            }
        },
        "Decomposition.default_threshold": {
            "name": "default_threshold",
            "location": 39,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "gas": [
                    "str",
                    "int",
                    "dict[str, str]",
                    "dict[, ]"
                ],
                "var": [
                    "str",
                    "int",
                    "dict[str, str]",
                    "dict[, ]"
                ]
            }
        },
        "Decomposition.decompose": {
            "name": "decompose",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "output": [
                    "bytes",
                    "typing.Iterable[str]"
                ],
                "levels": [
                    "bytes",
                    "typing.Iterable[str]"
                ]
            }
        },
        "Decomposition.target_rank": {
            "name": "target_rank",
            "location": 54,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "eigenvalues": []
            }
        },
        "Decomposition.matrix_ok": {
            "name": "matrix_ok",
            "location": 61,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "str",
                    "None"
                ],
                "path": [
                    "str",
                    "None"
                ],
                "matrix": [
                    "int",
                    "str",
                    "bytes",
                    "None"
                ]
            }
        },
        "Decomposition.target_path": {
            "name": "target_path",
            "location": 81,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "Decomposition.create_target_group": {
            "name": "create_target_group",
            "location": 84,
            "return": [
                "int",
                "bytes",
                "dict[, ]"
            ],
            "arguments": {
                "self": [],
                "output": [
                    "list[str]",
                    "str"
                ]
            }
        },
        "SingularValueDecomposition.decompose": {
            "name": "decompose",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "output": [
                    "str",
                    "int",
                    "bytes"
                ],
                "levels": [
                    "bool",
                    "bytes",
                    "str",
                    "typing.AnyStr"
                ]
            }
        },
        "EigenDecomposition.decompose": {
            "name": "decompose",
            "location": 155,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "output": [
                    "str",
                    "bool"
                ],
                "levels": [
                    "bool",
                    "bytes",
                    "str",
                    "typing.AnyStr"
                ]
            }
        }
    },
    "iasi-master/iasi/evaluation.py": {
        "EvaluationTask.requires": {
            "name": "requires",
            "location": 28,
            "return": [
                "dict[typing.Text, typing.Union[dict[, ],dict[str, typing.Union[int,None]],MoveVariables]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "EvaluationCompressionSize.output_directory": {
            "name": "output_directory",
            "location": 66,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "EvaluationCompressionSize.output_extension": {
            "name": "output_extension",
            "location": 69,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "EvaluationCompressionSize.size_in_kb": {
            "name": "size_in_kb",
            "location": 72,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "file": [
                    "str"
                ]
            }
        },
        "EvaluationCompressionSize.run": {
            "name": "run",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EvaluationErrorEstimation.output_directory": {
            "name": "output_directory",
            "location": 96,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "EvaluationErrorEstimation.output_extension": {
            "name": "output_extension",
            "location": 99,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "EvaluationErrorEstimation.requires": {
            "name": "requires",
            "location": 102,
            "return": [
                "list[VariableErrorEstimation]"
            ],
            "arguments": {
                "self": []
            }
        },
        "EvaluationErrorEstimation.run": {
            "name": "run",
            "location": 118,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "VariableErrorEstimation.output_extension": {
            "name": "output_extension",
            "location": 134,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "VariableErrorEstimation.requires": {
            "name": "requires",
            "location": 137,
            "return": [
                "dict[typing.Text, typing.Union[list[DecompressDataset],MoveVariables]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "VariableErrorEstimation.run": {
            "name": "run",
            "location": 152,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "VariableErrorEstimation.output_directory": {
            "name": "output_directory",
            "location": 195,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ErrorEstimation.factory": {
            "name": "factory",
            "location": 205,
            "return": [
                "WaterVapour",
                "GreenhouseGas",
                "NitridAcid",
                "AtmosphericTemperature"
            ],
            "arguments": {
                "gas": [
                    "str"
                ],
                "nol": [
                    "str"
                ],
                "alt": [
                    "str"
                ],
                "avk": [
                    "str",
                    "int",
                    "None"
                ],
                "alt_trop": [
                    "None",
                    "str"
                ]
            }
        },
        "ErrorEstimation.__init__": {
            "name": "__init__",
            "location": 216,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "gas": [
                    "typing.Callable[, ]",
                    "int",
                    "dict[str, typing.Any]",
                    "None"
                ],
                "nol": [
                    "typing.Callable[, ]",
                    "int",
                    "dict[str, typing.Any]",
                    "None"
                ],
                "alt": [
                    "typing.Callable[, ]",
                    "int",
                    "dict[str, typing.Any]",
                    "None"
                ],
                "alt_trop": [
                    "typing.Callable[, ]",
                    "int",
                    "dict[str, typing.Any]",
                    "None"
                ],
                "type_two": [
                    "bool"
                ]
            }
        },
        "ErrorEstimation.matrix_ok": {
            "name": "matrix_ok",
            "location": 224,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "str",
                    "None"
                ],
                "path": [
                    "str",
                    "None"
                ],
                "matrix": [
                    "int",
                    "str",
                    "bytes",
                    "None"
                ]
            }
        },
        "ErrorEstimation.report_for": {
            "name": "report_for",
            "location": 244,
            "return": [],
            "arguments": {
                "self": [],
                "variable": [
                    "bool",
                    "str"
                ],
                "original": [
                    "typing.Type",
                    "tuple[str]",
                    "dict[str, typing.Any]"
                ],
                "reconstructed": [
                    "bool",
                    "Warning"
                ],
                "rc_error": [
                    "str",
                    "int",
                    "list[str]"
                ]
            }
        },
        "ErrorEstimation.averaging_kernel": {
            "name": "averaging_kernel",
            "location": 330,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "int"
                ],
                "original": [
                    "int"
                ],
                "reconstructed": [
                    "int"
                ],
                "covariance": [
                    "int"
                ],
                "type2": [
                    "bool"
                ],
                "avk": [
                    "None",
                    "int"
                ]
            }
        },
        "ErrorEstimation.noise_matrix": {
            "name": "noise_matrix",
            "location": 333,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "int"
                ],
                "original": [
                    "int"
                ],
                "reconstructed": [
                    "int"
                ],
                "covariance": [
                    "int"
                ],
                "type2": [
                    "bool"
                ],
                "avk": [
                    "None",
                    "int"
                ]
            }
        },
        "ErrorEstimation.cross_averaging_kernel": {
            "name": "cross_averaging_kernel",
            "location": 336,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "int"
                ],
                "original": [
                    "int"
                ],
                "reconstructed": [
                    "int"
                ],
                "covariance": [
                    "int"
                ],
                "type2": [
                    "bool"
                ],
                "avk": [
                    "None",
                    "int"
                ]
            }
        },
        "ErrorEstimation.smoothing_error": {
            "name": "smoothing_error",
            "location": 339,
            "return": [],
            "arguments": {
                "self": [],
                "actual_matrix": [
                    "int"
                ],
                "to_compare": [
                    "int"
                ],
                "assumed_covariance": [
                    "int"
                ]
            }
        },
        "ErrorEstimation.assumed_covariance_temperature": {
            "name": "assumed_covariance_temperature",
            "location": 343,
            "return": [],
            "arguments": {
                "self": [],
                "event": [
                    "list[]",
                    "dict[, ]"
                ]
            }
        },
        "ErrorEstimation.construct_covariance_matrix": {
            "name": "construct_covariance_matrix",
            "location": 349,
            "return": [],
            "arguments": {
                "self": [],
                "event": [
                    "dict[str, typing.Any]"
                ],
                "amp": [
                    "dict[, ]",
                    "int",
                    "dict[str, typing.Any]",
                    "bytes"
                ],
                "sig": [
                    "dict[, ]",
                    "int",
                    "dict[str, typing.Any]",
                    "bytes"
                ]
            }
        },
        "ErrorEstimation.sigma": {
            "name": "sigma",
            "location": 365,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "int"
                ],
                "f_sigma": [
                    "float"
                ]
            }
        },
        "ErrorEstimation.amplitude": {
            "name": "amplitude",
            "location": 391,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "str"
                ]
            }
        },
        "ErrorEstimation.amplitude_temperature": {
            "name": "amplitude_temperature",
            "location": 394,
            "return": [],
            "arguments": {
                "self": [],
                "event": [
                    "dict[str, typing.Any]"
                ]
            }
        },
        "WaterVapour.__init__": {
            "name": "__init__",
            "location": 431,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "gas": [
                    "str",
                    "bool",
                    "None"
                ],
                "nol": [
                    "str",
                    "bool",
                    "None"
                ],
                "alt": [
                    "str",
                    "bool",
                    "None"
                ],
                "avk": [
                    "typing.Callable[, ]"
                ],
                "alt_trop": [
                    "str",
                    "bool",
                    "None"
                ],
                "type_two": [
                    "bool"
                ]
            }
        },
        "WaterVapour.averaging_kernel": {
            "name": "averaging_kernel",
            "location": 437,
            "return": [],
            "arguments": {
                "self": [],
                "event": [
                    "bool",
                    "dict[, ]",
                    "float"
                ],
                "original": [
                    "dict[, ]",
                    "typing.Callable[, ]",
                    "str",
                    "None"
                ],
                "reconstructed": [
                    "bool",
                    "dict[str, tuple[typing.Union[int,int]]]",
                    "typing.Type",
                    "typing.Callable[..., collections.abc.Awaitable[]]"
                ],
                "covariance": [],
                "type2": [
                    "bool"
                ],
                "avk": [
                    "None",
                    "dict[, ]",
                    "int",
                    "list[str]"
                ]
            }
        },
        "WaterVapour.noise_matrix": {
            "name": "noise_matrix",
            "location": 465,
            "return": [],
            "arguments": {
                "self": [],
                "event": [
                    "int"
                ],
                "original": [
                    "int",
                    "tuple[typing.Union[int,int]]",
                    "str",
                    "float"
                ],
                "reconstruced": [
                    "None",
                    "tuple[typing.Union[int,int]]",
                    "tuple[]"
                ],
                "covariance": [],
                "type2": [
                    "bool"
                ],
                "avk": [
                    "None",
                    "float",
                    "int"
                ]
            }
        },
        "WaterVapour.cross_averaging_kernel": {
            "name": "cross_averaging_kernel",
            "location": 489,
            "return": [],
            "arguments": {
                "self": [],
                "event": [
                    "float",
                    "list[numpy.ndarray]",
                    "int",
                    "str"
                ],
                "original": [
                    "str",
                    "int"
                ],
                "reconstructed": [
                    "bool",
                    "None",
                    "str",
                    "typing.Callable[D, typing.Any]"
                ],
                "covariance": [],
                "type2": [
                    "bool"
                ],
                "avk": [
                    "None",
                    "float",
                    "int"
                ]
            }
        },
        "WaterVapour.assumed_covariance": {
            "name": "assumed_covariance",
            "location": 514,
            "return": [],
            "arguments": {
                "self": [],
                "event": []
            }
        },
        "WaterVapour.amplitude": {
            "name": "amplitude",
            "location": 526,
            "return": [],
            "arguments": {
                "self": [],
                "event": [
                    "dict[str, typing.Any]",
                    "dict[, ]"
                ]
            }
        },
        "GreenhouseGas.averaging_kernel": {
            "name": "averaging_kernel",
            "location": 559,
            "return": [],
            "arguments": {
                "self": [],
                "event": [
                    "float",
                    "list[numpy.ndarray]",
                    "dict[str, typing.Any]",
                    "int"
                ],
                "original": [
                    "str",
                    "bytes",
                    "float",
                    "list[str]"
                ],
                "reconstructed": [
                    "typing.Callable[, ]",
                    "None",
                    "float",
                    "str",
                    "tuple[]",
                    "dict[str, typing.Any]",
                    "bool"
                ],
                "covariance": [
                    "dict[, ]",
                    "int",
                    "list[str]"
                ],
                "type2": [
                    "bool"
                ],
                "avk": [
                    "None",
                    "int"
                ]
            }
        },
        "GreenhouseGas.cross_averaging_kernel": {
            "name": "cross_averaging_kernel",
            "location": 567,
            "return": [],
            "arguments": {
                "self": [],
                "event": [
                    "float",
                    "list[numpy.ndarray]",
                    "int",
                    "str"
                ],
                "original": [
                    "bool",
                    "float",
                    "typing.Sequence[int]",
                    "list[dict[str, typing.Any]]"
                ],
                "reconstructed": [
                    "float",
                    "None",
                    "str"
                ],
                "covariance": [
                    "int"
                ],
                "type2": [
                    "bool"
                ],
                "avk": [
                    "None",
                    "int"
                ]
            }
        },
        "GreenhouseGas.noise_matrix": {
            "name": "noise_matrix",
            "location": 575,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "int"
                ],
                "original": [
                    "int"
                ],
                "reconstructed": [
                    "str",
                    "bool"
                ],
                "covariance": [
                    "int"
                ],
                "type2": [
                    "bool"
                ],
                "avk": [
                    "None",
                    "int"
                ]
            }
        },
        "GreenhouseGas.assumed_covariance": {
            "name": "assumed_covariance",
            "location": 581,
            "return": [],
            "arguments": {
                "self": [],
                "event": []
            }
        },
        "GreenhouseGas.amplitude": {
            "name": "amplitude",
            "location": 591,
            "return": [],
            "arguments": {
                "self": [],
                "event": [
                    "dict[str, typing.Any]"
                ]
            }
        },
        "NitridAcid.averaging_kernel": {
            "name": "averaging_kernel",
            "location": 613,
            "return": [],
            "arguments": {
                "self": [],
                "event": [
                    "float",
                    "list[numpy.ndarray]",
                    "dict[str, typing.Any]",
                    "int"
                ],
                "original": [
                    "str",
                    "bytes",
                    "float",
                    "list[str]"
                ],
                "reconstructed": [
                    "typing.Callable[, ]",
                    "None",
                    "float",
                    "str",
                    "tuple[]",
                    "dict[str, typing.Any]",
                    "bool"
                ],
                "covariance": [
                    "dict[, ]",
                    "int",
                    "list[str]"
                ],
                "type2": [
                    "bool"
                ],
                "avk": [
                    "None",
                    "int"
                ]
            }
        },
        "NitridAcid.cross_averaging_kernel": {
            "name": "cross_averaging_kernel",
            "location": 621,
            "return": [],
            "arguments": {
                "self": [],
                "event": [
                    "float",
                    "list[numpy.ndarray]",
                    "int",
                    "str"
                ],
                "original": [
                    "bool",
                    "float",
                    "typing.Sequence[int]",
                    "list[dict[str, typing.Any]]"
                ],
                "reconstructed": [
                    "float",
                    "None",
                    "str"
                ],
                "covariance": [
                    "int"
                ],
                "type2": [
                    "bool"
                ],
                "avk": [
                    "None",
                    "int"
                ]
            }
        },
        "NitridAcid.noise_matrix": {
            "name": "noise_matrix",
            "location": 628,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "int"
                ],
                "original": [
                    "int"
                ],
                "reconstructed": [
                    "str",
                    "bool"
                ],
                "covariance": [
                    "int"
                ],
                "type2": [
                    "bool"
                ],
                "avk": [
                    "None",
                    "int"
                ]
            }
        },
        "NitridAcid.assumed_covariance": {
            "name": "assumed_covariance",
            "location": 634,
            "return": [],
            "arguments": {
                "self": [],
                "event": [
                    "list[]"
                ]
            }
        },
        "NitridAcid.amplitude": {
            "name": "amplitude",
            "location": 639,
            "return": [],
            "arguments": {
                "self": [],
                "event": [
                    "dict[str, typing.Any]"
                ]
            }
        },
        "AtmosphericTemperature.averaging_kernel": {
            "name": "averaging_kernel",
            "location": 679,
            "return": [],
            "arguments": {
                "self": [],
                "event": [
                    "float",
                    "list[numpy.ndarray]",
                    "int",
                    "str"
                ],
                "original": [
                    "str",
                    "bytes",
                    "float",
                    "list[str]"
                ],
                "reconstructed": [
                    "typing.Callable[, ]",
                    "None",
                    "float",
                    "str",
                    "tuple[]",
                    "dict[str, typing.Any]",
                    "bool"
                ],
                "covariance": [
                    "dict[, ]",
                    "int",
                    "list[str]"
                ],
                "type2": [
                    "bool"
                ],
                "avk": [
                    "None",
                    "int"
                ]
            }
        },
        "AtmosphericTemperature.noise_matrix": {
            "name": "noise_matrix",
            "location": 686,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "int"
                ],
                "original": [
                    "int"
                ],
                "reconstructed": [
                    "str",
                    "bool"
                ],
                "covariance": [
                    "int"
                ],
                "type2": [
                    "bool"
                ],
                "avk": [
                    "None",
                    "int"
                ]
            }
        }
    },
    "iasi-master/iasi/file.py": {
        "filename_by": {
            "name": "filename_by",
            "location": 16,
            "return": [
                "str",
                "dict[str, set[typing.Any]]",
                "dict[str, list[str]]"
            ],
            "arguments": {
                "path": [
                    "str"
                ]
            }
        },
        "ReadFile.output": {
            "name": "output",
            "location": 26,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FileTask.output": {
            "name": "output",
            "location": 42,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FileTask.output_directory": {
            "name": "output_directory",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FileTask.output_extension": {
            "name": "output_extension",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FileTask.callback_start": {
            "name": "callback_start",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FileTask.callback_execution_time": {
            "name": "callback_execution_time",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "execution_time": [
                    "str",
                    "int",
                    "float"
                ]
            }
        },
        "FileTask.callback_success": {
            "name": "callback_success",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FileTask.callback_failure": {
            "name": "callback_failure",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "error": [
                    "Exception"
                ]
            }
        },
        "FileTask._remove_log_hander": {
            "name": "_remove_log_hander",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CopyNetcdfFile.run": {
            "name": "run",
            "location": 155,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CopyNetcdfFile.copy_dimensions": {
            "name": "copy_dimensions",
            "location": 164,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "input": [
                    "bool",
                    "list[list[int]]",
                    "str"
                ],
                "output": [
                    "str",
                    "int"
                ],
                "recursive": [
                    "bool"
                ]
            }
        },
        "CopyNetcdfFile.copy_variable": {
            "name": "copy_variable",
            "location": 178,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "target": [
                    "bool",
                    "str",
                    "dict[str, typing.Any]",
                    "None"
                ],
                "var": [],
                "path": [
                    "None",
                    "str",
                    "bytes"
                ],
                "compressed": [
                    "bool"
                ]
            }
        },
        "CopyNetcdfFile.copy_variables": {
            "name": "copy_variables",
            "location": 188,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "input": [
                    "typing.Iterable[str]",
                    "None"
                ],
                "output": [
                    "dict[, ]",
                    "bool",
                    "dict[str, typing.Any]",
                    "typing.Mapping",
                    "bytes"
                ],
                "exclusion_pattern": [
                    "None",
                    "str"
                ]
            }
        },
        "MoveVariables.output_directory": {
            "name": "output_directory",
            "location": 208,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "iasi-master/iasi/metrics.py": {
        "Covariance.__init__": {
            "name": "__init__",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "nol": [
                    "int",
                    "float"
                ],
                "alt": [
                    "int",
                    "float"
                ]
            }
        },
        "Covariance.gaussian": {
            "name": "gaussian",
            "location": 17,
            "return": [],
            "arguments": {
                "self": [],
                "x": [
                    "float"
                ],
                "mu": [
                    "float"
                ],
                "sig": [
                    "float"
                ]
            }
        },
        "Covariance.traf": {
            "name": "traf",
            "location": 26,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Covariance.assumed_covariance": {
            "name": "assumed_covariance",
            "location": 36,
            "return": [],
            "arguments": {
                "self": [],
                "species": [
                    "int"
                ],
                "w1": [
                    "float"
                ],
                "w2": [
                    "float"
                ],
                "correlation_length": [
                    "int"
                ]
            }
        },
        "Covariance.apriori_covariance": {
            "name": "apriori_covariance",
            "location": 65,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Covariance.type1_of": {
            "name": "type1_of",
            "location": 77,
            "return": [],
            "arguments": {
                "self": [],
                "matrix": [
                    "int",
                    "str"
                ]
            }
        },
        "Covariance.c_by_type1": {
            "name": "c_by_type1",
            "location": 85,
            "return": [],
            "arguments": {
                "self": [],
                "A_": [
                    "tuple[float]"
                ]
            }
        },
        "Covariance.c_by_avk": {
            "name": "c_by_avk",
            "location": 89,
            "return": [],
            "arguments": {
                "self": [],
                "avk": [
                    "str",
                    "typing.Type",
                    "typing.Iterable[str]"
                ]
            }
        },
        "Covariance.type2_of": {
            "name": "type2_of",
            "location": 93,
            "return": [],
            "arguments": {
                "self": [],
                "matrix": [
                    "typing.Callable[, ]",
                    "None"
                ]
            }
        },
        "Covariance.smoothing_error": {
            "name": "smoothing_error",
            "location": 102,
            "return": [],
            "arguments": {
                "self": [],
                "actual_matrix": [
                    "float"
                ],
                "to_compare": [
                    "float"
                ]
            }
        }
    },
    "iasi-master/iasi/quadrant.py": {
        "Quadrant.for_assembly": {
            "name": "for_assembly",
            "location": 32,
            "return": [
                "AssembleTwoQuadrants",
                "AssembleFourQuadrants"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "list[str]",
                    "dict[str, typing.Any]"
                ],
                "gas": [
                    "str",
                    "int",
                    "typing.Callable[typing.Any, bool]"
                ],
                "var_name": [
                    "str",
                    "list[tuple[typing.Union[str,typing.Any]]]",
                    "typing.Hashable",
                    "None"
                ],
                "var": [
                    "str",
                    "list[]"
                ]
            }
        },
        "Quadrant.for_disassembly": {
            "name": "for_disassembly",
            "location": 50,
            "return": [
                "DisassembleTwoQuadrants",
                "DisassembleFourQuadrants"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "list[str]",
                    "dict[str, typing.Any]"
                ],
                "gas": [
                    "str",
                    "int",
                    "typing.Callable[typing.Any, bool]"
                ],
                "var_name": [
                    "str",
                    "list[tuple[typing.Union[str,typing.Any]]]",
                    "typing.Hashable",
                    "None"
                ],
                "var": [
                    "str",
                    "list[]"
                ]
            }
        },
        "Quadrant.__init__": {
            "name": "__init__",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "events": [
                    "str",
                    "dict[str, typing.Any]"
                ],
                "grid_levels": [
                    "int"
                ]
            }
        },
        "Quadrant.transform": {
            "name": "transform",
            "location": 75,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "array": [
                    "str"
                ],
                "levels": [
                    "int",
                    "None",
                    "float",
                    "str"
                ]
            }
        },
        "Quadrant.transformed_shape": {
            "name": "transformed_shape",
            "location": 78,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Quadrant.assign_disassembly": {
            "name": "assign_disassembly",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "of": [
                    "tuple[typing.Union[int,int]]"
                ],
                "to": [],
                "l": [
                    "int",
                    "tuple[typing.Union[int,int]]"
                ]
            }
        },
        "Quadrant.upper_and_lower_dimension": {
            "name": "upper_and_lower_dimension",
            "location": 84,
            "return": [
                "tuple[typing.Text]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Quadrant.create_variable": {
            "name": "create_variable",
            "location": 87,
            "return": [],
            "arguments": {
                "self": [],
                "dataset": [],
                "path": [
                    "str",
                    "int"
                ]
            }
        },
        "AssembleTwoQuadrants.transform": {
            "name": "transform",
            "location": 93,
            "return": [],
            "arguments": {
                "self": [],
                "array": [],
                "levels": [
                    "int"
                ]
            }
        },
        "AssembleTwoQuadrants.transformed_shape": {
            "name": "transformed_shape",
            "location": 99,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "AssembleTwoQuadrants.upper_and_lower_dimension": {
            "name": "upper_and_lower_dimension",
            "location": 102,
            "return": [
                "tuple[typing.Text]"
            ],
            "arguments": {
                "self": []
            }
        },
        "DisassembleTwoQuadrants.transform": {
            "name": "transform",
            "location": 108,
            "return": [],
            "arguments": {
                "self": [],
                "array": [],
                "l": [
                    "int",
                    "float"
                ]
            }
        },
        "DisassembleTwoQuadrants.transformed_shape": {
            "name": "transformed_shape",
            "location": 111,
            "return": [
                "tuple[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "DisassembleTwoQuadrants.assign_disassembly": {
            "name": "assign_disassembly",
            "location": 114,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "of": [
                    "str"
                ],
                "to": [],
                "l": [
                    "str",
                    "int"
                ]
            }
        },
        "DisassembleTwoQuadrants.create_variable": {
            "name": "create_variable",
            "location": 118,
            "return": [],
            "arguments": {
                "self": [],
                "dataset": [],
                "path": [
                    "str",
                    "int"
                ]
            }
        },
        "AssembleFourQuadrants.transform": {
            "name": "transform",
            "location": 124,
            "return": [],
            "arguments": {
                "self": [],
                "array": [],
                "levels": [
                    "int"
                ]
            }
        },
        "AssembleFourQuadrants.transformed_shape": {
            "name": "transformed_shape",
            "location": 130,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "AssembleFourQuadrants.upper_and_lower_dimension": {
            "name": "upper_and_lower_dimension",
            "location": 133,
            "return": [
                "tuple[typing.Text]"
            ],
            "arguments": {
                "self": []
            }
        },
        "DisassembleFourQuadrants.transform": {
            "name": "transform",
            "location": 139,
            "return": [],
            "arguments": {
                "self": [],
                "a": [],
                "l": [
                    "int",
                    "float"
                ]
            }
        },
        "DisassembleFourQuadrants.transformed_shape": {
            "name": "transformed_shape",
            "location": 146,
            "return": [
                "tuple[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "DisassembleFourQuadrants.assign_disassembly": {
            "name": "assign_disassembly",
            "location": 149,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "reconstructed": [],
                "result": [
                    "int",
                    "float"
                ],
                "l": [
                    "int",
                    "float"
                ]
            }
        },
        "DisassembleFourQuadrants.create_variable": {
            "name": "create_variable",
            "location": 155,
            "return": [],
            "arguments": {
                "self": [],
                "dataset": [],
                "path": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "iasi-master/iasi/util.py": {
        "dimensions_of": {
            "name": "dimensions_of",
            "location": 15,
            "return": [
                "dict[, ]"
            ],
            "arguments": {
                "variable": [
                    "dict[str, typing.Any]",
                    "list[str]"
                ]
            }
        },
        "child_groups_of": {
            "name": "child_groups_of",
            "location": 19,
            "return": [
                "typing.Generator[typing.Union[typing.Type,dict[, ]]]",
                "typing.Generator[]"
            ],
            "arguments": {
                "group": [
                    "typing.Type",
                    "dict[, ]"
                ]
            }
        },
        "child_variables_of": {
            "name": "child_variables_of",
            "location": 26,
            "return": [
                "typing.Generator[tuple[]]"
            ],
            "arguments": {
                "group": [
                    "int",
                    "dict[str, typing.Any]",
                    "str"
                ]
            }
        },
        "root_group_of": {
            "name": "root_group_of",
            "location": 32,
            "return": [
                "str",
                "BaseException",
                "None",
                "list[dict[, ]]"
            ],
            "arguments": {
                "group": [
                    "str",
                    "BaseException",
                    "None",
                    "list[dict[, ]]"
                ]
            }
        },
        "CustomTask.__init__": {
            "name": "__init__",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CustomTask.callback_start": {
            "name": "callback_start",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "iasi-master/iasi/__init__.py": {},
    "iasi-master/notebooks/assumed_covariance.py": {
        "default_color": {
            "name": "default_color",
            "location": 24,
            "return": [],
            "arguments": {
                "i": [
                    "int",
                    "str"
                ]
            }
        },
        "project_alt_to_index": {
            "name": "project_alt_to_index",
            "location": 28,
            "return": [
                "int"
            ],
            "arguments": {
                "alt_ref": [
                    "str",
                    "int"
                ]
            }
        },
        "plot_covariance": {
            "name": "plot_covariance",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "s_cov": [
                    "int",
                    "str",
                    "dict[str, numpy.ndarray]"
                ]
            }
        },
        "plot_amplitude": {
            "name": "plot_amplitude",
            "location": 50,
            "return": [],
            "arguments": {}
        },
        "plot_correlation_lenght": {
            "name": "plot_correlation_lenght",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {
                "sig": [
                    "bool"
                ],
                "alt_strat": [
                    "int"
                ],
                "text_pos": [
                    "float"
                ]
            }
        }
    },
    "iasi-master/notebooks/cluster.py": {
        "GeographicArea.__init__": {
            "name": "__init__",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "lat": [
                    "int",
                    "float"
                ],
                "lon": [
                    "int",
                    "float"
                ]
            }
        },
        "GeographicArea.import_dataset": {
            "name": "import_dataset",
            "location": 37,
            "return": [],
            "arguments": {
                "self": [],
                "file_pattern": [
                    "str"
                ]
            }
        },
        "GeographicArea.get_extend": {
            "name": "get_extend",
            "location": 50,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "GeographicArea.filter": {
            "name": "filter",
            "location": 53,
            "return": [
                "str",
                "float"
            ],
            "arguments": {
                "self": [],
                "df": [
                    "str",
                    "list[float]",
                    "None",
                    "float"
                ]
            }
        },
        "GeographicArea.scatter": {
            "name": "scatter",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SpatialWaterVapourScaler.__init__": {
            "name": "__init__",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "delD": [
                    "int"
                ],
                "H2O": [
                    "float"
                ],
                "km": [
                    "int"
                ]
            }
        },
        "SpatialWaterVapourScaler.fit": {
            "name": "fit",
            "location": 76,
            "return": [
                "SpatialWaterVapourScaler"
            ],
            "arguments": {
                "self": [],
                "X": [
                    "bool",
                    "float",
                    "typing.Iterable[typing.Iterable[float]]",
                    "str",
                    "bytes"
                ],
                "y": [
                    "None",
                    "bool",
                    "float",
                    "typing.Iterable[typing.Iterable[float]]",
                    "str",
                    "bytes"
                ]
            }
        },
        "SpatialWaterVapourScaler.transform": {
            "name": "transform",
            "location": 79,
            "return": [],
            "arguments": {
                "self": [],
                "X": [
                    "list[]"
                ],
                "y": [
                    "None",
                    "bool",
                    "float",
                    "typing.Iterable[typing.Iterable[float]]",
                    "str",
                    "bytes"
                ]
            }
        },
        "SaveClusterGroups.__init__": {
            "name": "__init__",
            "location": 124,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "H2O_bins": [
                    "int"
                ],
                "delD_bins": [
                    "int"
                ]
            }
        },
        "SaveClusterGroups.create_dataset": {
            "name": "create_dataset",
            "location": 128,
            "return": [
                "Dataset"
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "str"
                ]
            }
        },
        "SaveClusterGroups.save": {
            "name": "save",
            "location": 138,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "df": [
                    "str"
                ],
                "filename": [
                    "typing.Text"
                ]
            }
        }
    },
    "iasi-master/notebooks/compression.py": {
        "filter_by": {
            "name": "filter_by",
            "location": 27,
            "return": [],
            "arguments": {
                "df": [
                    "str",
                    "dict[, ]",
                    "list[numpy.ndarray]",
                    "set[str]"
                ],
                "gas": [
                    "str",
                    "dict[, ]",
                    "list[numpy.ndarray]",
                    "set[str]"
                ],
                "variable": [
                    "str",
                    "dict[, ]",
                    "list[numpy.ndarray]",
                    "set[str]"
                ],
                "threshold": [
                    "None",
                    "float",
                    "bool",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "plot_size_for": {
            "name": "plot_size_for",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "gas": [
                    "typing.Type",
                    "Exception",
                    "dict[, ]"
                ],
                "variable": [
                    "typing.Type",
                    "Exception",
                    "dict[, ]"
                ]
            }
        },
        "plot_total_size_for": {
            "name": "plot_total_size_for",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "gas": [
                    "str",
                    "float",
                    "list[str]",
                    "int"
                ]
            }
        }
    },
    "iasi-master/notebooks/error_estimation.py": {
        "altitude_by": {
            "name": "altitude_by",
            "location": 26,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "level_of_interest": [
                    "int",
                    "str",
                    "dict[str, typing.Any]",
                    "None",
                    "typing.Callable[, ]"
                ]
            }
        },
        "import_data": {
            "name": "import_data",
            "location": 40,
            "return": [],
            "arguments": {
                "path_pattern": [
                    "str",
                    "bool"
                ],
                "gas": [
                    "str"
                ],
                "var": [
                    "None",
                    "int",
                    "str",
                    "float",
                    "dict[str, D]",
                    "tuple[typing.Union[float,float]]"
                ],
                "threshold": [
                    "None",
                    "int",
                    "str",
                    "float",
                    "dict[str, D]",
                    "tuple[typing.Union[float,float]]"
                ],
                "loi": [
                    "None",
                    "int",
                    "str",
                    "float",
                    "dict[str, D]",
                    "tuple[typing.Union[float,float]]"
                ],
                "type": [
                    "None",
                    "int",
                    "str",
                    "float",
                    "dict[str, D]",
                    "tuple[typing.Union[float,float]]"
                ],
                "inlcude_coordinates": [
                    "bool"
                ],
                "rank": [
                    "None",
                    "str",
                    "list[str]",
                    "list[list[float]]"
                ]
            }
        },
        "import_size": {
            "name": "import_size",
            "location": 95,
            "return": [],
            "arguments": {
                "path_pattern": [
                    "str",
                    "list[str]",
                    "typing.IO"
                ]
            }
        },
        "plot_error_map": {
            "name": "plot_error_map",
            "location": 114,
            "return": [
                "None"
            ],
            "arguments": {
                "df": [],
                "gas": [
                    "None",
                    "list[datetime.time]",
                    "int",
                    "dict[str, typing.Any]",
                    "typing.Callable[, ]"
                ],
                "var": [
                    "None",
                    "list[datetime.time]",
                    "int",
                    "dict[str, typing.Any]",
                    "typing.Callable[, ]"
                ],
                "season": [
                    "None",
                    "list[datetime.time]",
                    "int",
                    "dict[str, typing.Any]",
                    "typing.Callable[, ]"
                ]
            }
        },
        "plot_season_map": {
            "name": "plot_season_map",
            "location": 132,
            "return": [
                "None"
            ],
            "arguments": {
                "summer": [],
                "winter": []
            }
        },
        "plot_size_season": {
            "name": "plot_size_season",
            "location": 170,
            "return": [
                "None"
            ],
            "arguments": {
                "df": [],
                "gas": [
                    "int",
                    "str",
                    "list[int]"
                ],
                "var": [
                    "int",
                    "str",
                    "list[int]"
                ]
            }
        },
        "plot_levels": {
            "name": "plot_levels",
            "location": 208,
            "return": [
                "None"
            ],
            "arguments": {
                "df": [
                    "tuple[typing.Union[int,int]]",
                    "list[int]",
                    "str"
                ],
                "gas": [
                    "list[str]",
                    "str"
                ],
                "var": [
                    "list[str]",
                    "str"
                ],
                "type": [
                    "list[str]",
                    "str"
                ],
                "season": [
                    "None",
                    "bool",
                    "str",
                    "float",
                    "tuple[typing.Union[float,float]]"
                ]
            }
        },
        "plot_types": {
            "name": "plot_types",
            "location": 236,
            "return": [
                "None"
            ],
            "arguments": {
                "df": [],
                "gas": [
                    "int",
                    "list[str]",
                    "dict[str, typing.Any]",
                    "str"
                ],
                "var": [
                    "int",
                    "list[str]",
                    "dict[str, typing.Any]",
                    "str"
                ],
                "level_of_interest": [
                    "int",
                    "list[str]",
                    "dict[str, typing.Any]",
                    "str"
                ]
            }
        },
        "import_eigenvalues": {
            "name": "import_eigenvalues",
            "location": 355,
            "return": [],
            "arguments": {
                "pattern": [
                    "typing.Callable[, ]",
                    "bool",
                    "float",
                    "typing.Type"
                ],
                "var": [
                    "list[]",
                    "float"
                ]
            }
        },
        "plot_rank_map": {
            "name": "plot_rank_map",
            "location": 370,
            "return": [
                "None"
            ],
            "arguments": {
                "summer": [
                    "str"
                ],
                "winter": [
                    "str"
                ]
            }
        },
        "get_outlier": {
            "name": "get_outlier",
            "location": 438,
            "return": [
                "str"
            ],
            "arguments": {
                "df": [
                    "str"
                ]
            }
        }
    },
    "iasi-master/notebooks/map_k.py": {
        "import_dataset": {
            "name": "import_dataset",
            "location": 26,
            "return": [],
            "arguments": {
                "file_pattern": []
            }
        },
        "plot_season_map": {
            "name": "plot_season_map",
            "location": 61,
            "return": [],
            "arguments": {
                "summer": [],
                "winter": [],
                "var": []
            }
        },
        "plot_eigenvalues_of": {
            "name": "plot_eigenvalues_of",
            "location": 109,
            "return": [],
            "arguments": {
                "variable": [],
                "df": []
            }
        }
    },
    "iasi-master/notebooks/water_vapour.py": {
        "create_image_grid": {
            "name": "create_image_grid",
            "location": 29,
            "return": [
                "ImageGrid"
            ],
            "arguments": {
                "grid_spec": [
                    "int",
                    "list[float]"
                ],
                "nrows_ncols": [
                    "tuple[int]"
                ]
            }
        },
        "plot_image_grid": {
            "name": "plot_image_grid",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "matrix": [
                    "list[float]",
                    "bytes",
                    "str"
                ],
                "title": [
                    "int",
                    "float",
                    "str"
                ],
                "position": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "iasi-master/script/slice.py": {
        "copy_dimensions": {
            "name": "copy_dimensions",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "input": [
                    "dict[, ]",
                    "str",
                    "dict[str, int]"
                ],
                "output": [
                    "str",
                    "set[str]",
                    "list[int]",
                    "list[str]",
                    "bytes",
                    "list[dict[, ]]",
                    "None"
                ]
            }
        },
        "copy_variables": {
            "name": "copy_variables",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "input": [
                    "dict[str, typing.Any]",
                    "dict[, ]",
                    "bool",
                    "None"
                ],
                "output": [
                    "str",
                    "Exception"
                ],
                "slice": []
            }
        }
    },
    "iasi-master/test/analysis_test.py": {
        "TestData.test_import": {
            "name": "test_import",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestScaler.test_latitude_scaling": {
            "name": "test_latitude_scaling",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGridSearch.test_hdbscan": {
            "name": "test_hdbscan",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGridSearch.test_dbscan": {
            "name": "test_dbscan",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGridSearch.test_aggregation": {
            "name": "test_aggregation",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "iasi-master/test/integration_test.py": {
        "IntegrationTest.setUpClass": {
            "name": "setUpClass",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "typing.Callable[, ]",
                    "dict[str, typing.Any]"
                ]
            }
        }
    },
    "iasi-master/test/test_aposteriori_processing.py": {
        "TestAposterioriProcessing.test_uncompressed_retrieval": {
            "name": "test_uncompressed_retrieval",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAposterioriProcessing.verify_results": {
            "name": "verify_results",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "df": [
                    "dict[str, typing.Any]",
                    "dict[, ]"
                ]
            }
        }
    },
    "iasi-master/test/test_composition.py": {
        "TestComposition.setUpClass": {
            "name": "setUpClass",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "typing.Callable[, ]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "TestComposition.tearDownClass": {
            "name": "tearDownClass",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "str"
                ]
            }
        },
        "TestComposition.masks_equal": {
            "name": "masks_equal",
            "location": 44,
            "return": [],
            "arguments": {
                "self": [],
                "a": [
                    "int"
                ],
                "b": [
                    "int"
                ]
            }
        },
        "TestComposition.test_eigen_composition_combined": {
            "name": "test_eigen_composition_combined",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestComposition.test_eigen_composition_single": {
            "name": "test_eigen_composition_single",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestComposition.verify_eigen_composition": {
            "name": "verify_eigen_composition",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "attribute": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ],
                "shape": [
                    "int"
                ]
            }
        },
        "TestComposition.test_svd_one_quadrant": {
            "name": "test_svd_one_quadrant",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestComposition.test_svd_two_quadrants": {
            "name": "test_svd_two_quadrants",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestComposition.test_svd_four_quadrants": {
            "name": "test_svd_four_quadrants",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestComposition.verify_singular_value_composition": {
            "name": "verify_singular_value_composition",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "attribute": [
                    "int",
                    "str",
                    "tuple[typing.Union[int,int]]",
                    "tuple[typing.Union[str,int]]"
                ],
                "shape": [
                    "int"
                ]
            }
        }
    },
    "iasi-master/test/test_compression.py": {
        "TestCompression.test_dataset_compression": {
            "name": "test_dataset_compression",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCompression.test_dataset_decompression": {
            "name": "test_dataset_decompression",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDateInterval.test_date_range": {
            "name": "test_date_range",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "iasi-master/test/test_errors.py": {
        "TestErrors.test_svd_converges": {
            "name": "test_svd_converges",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestErrors.test_complex_eigenvectors": {
            "name": "test_complex_eigenvectors",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "iasi-master/test/test_evaluation.py": {
        "TestEvaluation.test_compression_size": {
            "name": "test_compression_size",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEvaluation.filter_by": {
            "name": "filter_by",
            "location": 28,
            "return": [
                "str"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "typing.Iterable[str]",
                    "typing.Callable[, ]",
                    "str"
                ],
                "df": [
                    "str"
                ],
                "var": [
                    "int",
                    "str",
                    "typing.Callable[, ]",
                    "typing.Type",
                    "None"
                ],
                "level_of_interest": [
                    "int",
                    "str",
                    "typing.Callable[, ]",
                    "typing.Type",
                    "None"
                ],
                "type": [
                    "int"
                ],
                "rc_error": [
                    "bool"
                ],
                "threshold": [
                    "None",
                    "str",
                    "bool",
                    "typing.Callable[T, bool]",
                    "list[str]",
                    "list[int]"
                ]
            }
        },
        "TestEvaluation.setUpClass": {
            "name": "setUpClass",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "typing.Type"
                ]
            }
        },
        "TestEvaluation.test_water_vapour": {
            "name": "test_water_vapour",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEvaluation.test_greenhouse_gases_report_exists": {
            "name": "test_greenhouse_gases_report_exists",
            "location": 111,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEvaluation.test_nitrid_acid_report_exists": {
            "name": "test_nitrid_acid_report_exists",
            "location": 114,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEvaluation.test_atmospheric_temperature_report_exists": {
            "name": "test_atmospheric_temperature_report_exists",
            "location": 117,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestErrorEstimation.test_correlation_lenght_is_consistent": {
            "name": "test_correlation_lenght_is_consistent",
            "location": 123,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestErrorEstimation.test_invalid_altitude": {
            "name": "test_invalid_altitude",
            "location": 140,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "iasi-master/test/test_file.py": {
        "TestCopyNetcdf.test_select_single_variable": {
            "name": "test_select_single_variable",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "iasi-master/test/test_precision.py": {
        "TestCompareDecompressionResult.setUpClass": {
            "name": "setUpClass",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "typing.Callable[, ]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "TestCompareDecompressionResult.tearDownClass": {
            "name": "tearDownClass",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "str"
                ]
            }
        },
        "TestCompareDecompressionResult.variable_names": {
            "name": "variable_names",
            "location": 46,
            "return": [
                "set[]"
            ],
            "arguments": {
                "self": [],
                "variables": [
                    "dict[, ]",
                    "typing.Iterator"
                ]
            }
        },
        "TestCompareDecompressionResult.group_paths": {
            "name": "group_paths",
            "location": 49,
            "return": [
                "set[]"
            ],
            "arguments": {
                "self": [],
                "groups": [
                    "str",
                    "dict[str, typing.Any]",
                    "int"
                ]
            }
        },
        "TestCompareDecompressionResult.test_all_variables_exist": {
            "name": "test_all_variables_exist",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCompareDecompressionResult.test_all_variable_values_are_close": {
            "name": "test_all_variable_values_are_close",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "iasi-master/test/test_quadrant.py": {
        "TestQuadrants.setUpClass": {
            "name": "setUpClass",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "typing.Callable[, ]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "TestQuadrants.tearDownClass": {
            "name": "tearDownClass",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "str"
                ]
            }
        },
        "TestQuadrants.test_child_groups": {
            "name": "test_child_groups",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQuadrants.test_variables_of_group": {
            "name": "test_variables_of_group",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQuadrants.test_single_quadrant_assembly": {
            "name": "test_single_quadrant_assembly",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQuadrants.test_two_quadrants_assembly": {
            "name": "test_two_quadrants_assembly",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQuadrants.test_four_quadrants_assembly": {
            "name": "test_four_quadrants_assembly",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQuadrants.test_single_quadrant_disassembly": {
            "name": "test_single_quadrant_disassembly",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQuadrants.test_two_quadrant_disassembly": {
            "name": "test_two_quadrant_disassembly",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQuadrants.test_four_quadrant_disassembly": {
            "name": "test_four_quadrant_disassembly",
            "location": 107,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "iasi-master/test/test_thresholds.py": {
        "TestThreshold.test_default_values": {
            "name": "test_default_values",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    }
}
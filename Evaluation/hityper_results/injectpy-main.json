{
    "injectpy-main/setup.py": {},
    "injectpy-main/inject1/di.py": {
        "_get_dependencies": {
            "name": "_get_dependencies",
            "location": 11,
            "return": [
                "set[]"
            ],
            "arguments": {
                "provider": []
            }
        },
        "Provider.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [],
                "callable": []
            }
        },
        "Provider.dependencies": {
            "name": "dependencies",
            "location": 21,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Provider.provide": {
            "name": "provide",
            "location": 24,
            "return": [],
            "arguments": {
                "self": [],
                "dependencies": []
            }
        },
        "InstanceProvider.__init__": {
            "name": "__init__",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [],
                "instance": []
            }
        },
        "InstanceProvider.dependencies": {
            "name": "dependencies",
            "location": 32,
            "return": [
                "set[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "InstanceProvider.provide": {
            "name": "provide",
            "location": 35,
            "return": [],
            "arguments": {
                "self": [],
                "dependencies": [
                    "dict[, ]"
                ]
            }
        },
        "SpecReader.__init__": {
            "name": "__init__",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "spec": []
            }
        },
        "SpecReader.bind": {
            "name": "bind",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "SpecReader._get_providers": {
            "name": "_get_providers",
            "location": 54,
            "return": [
                "list[Provider]"
            ],
            "arguments": {
                "self": [],
                "spec": []
            }
        },
        "ServiceLocator.__init__": {
            "name": "__init__",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "graph": []
            }
        },
        "ServiceLocator.__getattr__": {
            "name": "__getattr__",
            "location": 65,
            "return": [],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "ObjectGraph.__init__": {
            "name": "__init__",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "providers": [],
                "parent": [
                    "None"
                ]
            }
        },
        "ObjectGraph.provide": {
            "name": "provide",
            "location": 79,
            "return": [],
            "arguments": {
                "self": [],
                "provider_name": []
            }
        },
        "ObjectGraph.locator": {
            "name": "locator",
            "location": 98,
            "return": [
                "ServiceLocator"
            ],
            "arguments": {
                "self": []
            }
        },
        "ObjectGraph.create": {
            "name": "create",
            "location": 102,
            "return": [],
            "arguments": {
                "cls": [],
                "specs": [],
                "parent": [
                    "None"
                ]
            }
        },
        "ObjectGraph._provider_not_found": {
            "name": "_provider_not_found",
            "location": 110,
            "return": [],
            "arguments": {
                "self": [],
                "provider_name": []
            }
        }
    },
    "injectpy-main/inject1/__init__.py": {},
    "injectpy-main/inject1/tests/test_di.py": {
        "Foo.__init__": {
            "name": "__init__",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "bar": [
                    "int",
                    "float"
                ]
            }
        },
        "ExplicitSpecs.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "bar": [
                    "int",
                    "float"
                ]
            }
        },
        "ExplicitSpecs.provide_bar": {
            "name": "provide_bar",
            "location": 13,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ExplicitSpecs.provide_foo": {
            "name": "provide_foo",
            "location": 16,
            "return": [
                "Foo"
            ],
            "arguments": {
                "self": [],
                "bar": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ]
            }
        },
        "BoundToInstanceFooSpecs.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "foo": [
                    "int",
                    "float"
                ]
            }
        },
        "BoundToInstanceFooSpecs.configure": {
            "name": "configure",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "bind": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ]
            }
        },
        "BoundToClassFooSpecs.__init__": {
            "name": "__init__",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "bar": [
                    "int",
                    "float"
                ]
            }
        },
        "BoundToClassFooSpecs.provide_bar": {
            "name": "provide_bar",
            "location": 30,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BoundToClassFooSpecs.configure": {
            "name": "configure",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "bind": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ]
            }
        },
        "ParentDependentFooSpecs.configure": {
            "name": "configure",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "bind": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ]
            }
        },
        "BarSpecs.__init__": {
            "name": "__init__",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "bar": [
                    "int",
                    "float"
                ]
            }
        },
        "BarSpecs.configure": {
            "name": "configure",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "bind": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ]
            }
        },
        "DependencyInjectionTestSuite.test_provide_object_with_dependency": {
            "name": "test_provide_object_with_dependency",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DependencyInjectionTestSuite.test_bind_to_instance": {
            "name": "test_bind_to_instance",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DependencyInjectionTestSuite.test_bind_to_class": {
            "name": "test_bind_to_class",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DependencyInjectionTestSuite.test_dependency_on_object_from_parent_object_graph": {
            "name": "test_dependency_on_object_from_parent_object_graph",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "injectpy-main/inject1/tests/__init__.py": {},
    "injectpy-main/injectpy/di.py": {
        "_component_not_mapped": {
            "name": "_component_not_mapped",
            "location": 64,
            "return": [
                "ComponentNotMappedError"
            ],
            "arguments": {
                "name": [
                    "str",
                    "bool",
                    "dict[, ]"
                ]
            }
        },
        "_dependencies_required": {
            "name": "_dependencies_required",
            "location": 67,
            "return": [
                "DependenciesRequiredError"
            ],
            "arguments": {
                "name": [
                    "str",
                    "bool",
                    "dict[, ]"
                ]
            }
        },
        "_build_mapping": {
            "name": "_build_mapping",
            "location": 142,
            "return": [
                "Mapping"
            ],
            "arguments": {
                "f": [
                    "str",
                    "bool",
                    "set[str]"
                ],
                "name": [
                    "None",
                    "str"
                ]
            }
        },
        "component": {
            "name": "component",
            "location": 149,
            "return": [],
            "arguments": {
                "scope": [
                    "int",
                    "str",
                    "typing.Iterable[C]"
                ]
            }
        },
        "component_scoped": {
            "name": "component_scoped",
            "location": 157,
            "return": [],
            "arguments": {
                "scope": [
                    "int",
                    "None",
                    "str",
                    "float",
                    "tuple[str]"
                ]
            }
        },
        "ObjectGraph.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "scope": [
                    "int",
                    "float"
                ]
            }
        },
        "ObjectGraph.provide": {
            "name": "provide",
            "location": 20,
            "return": [],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "dict[, ]"
                ]
            }
        },
        "Mapping.__init__": {
            "name": "__init__",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "factory": [
                    "str",
                    "None",
                    "bool"
                ]
            }
        },
        "Mapping._provider": {
            "name": "_provider",
            "location": 51,
            "return": [
                "SingletonProvider"
            ],
            "arguments": {
                "self": []
            }
        },
        "Mapping.get_dependencies": {
            "name": "get_dependencies",
            "location": 57,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SingletonProvider.__init__": {
            "name": "__init__",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "provider": [
                    "int",
                    "float"
                ]
            }
        },
        "SingletonProvider.__call__": {
            "name": "__call__",
            "location": 75,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Registry.__init__": {
            "name": "__init__",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Registry.contains": {
            "name": "contains",
            "location": 91,
            "return": [],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "int",
                    "typing.Hashable"
                ]
            }
        },
        "Registry.get": {
            "name": "get",
            "location": 94,
            "return": [],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "int",
                    "None"
                ]
            }
        },
        "Registry.add": {
            "name": "add",
            "location": 97,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mapping": [
                    "typing.Mapping",
                    "tuple[typing.Union[list[str],typing.Any,None,typing.Any,None]]"
                ]
            }
        },
        "Scope.__init__": {
            "name": "__init__",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parent": [
                    "None",
                    "str",
                    "bool",
                    "list[str]",
                    "tuple[typing.Type]"
                ]
            }
        },
        "Scope.add_mapping": {
            "name": "add_mapping",
            "location": 110,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mapping": [
                    "typing.Mapping"
                ]
            }
        },
        "Scope.add_provider": {
            "name": "add_provider",
            "location": 113,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "f": [
                    "typing.Sequence[str]",
                    "list[str]",
                    "typing.Callable[..., None]"
                ]
            }
        },
        "Scope.contains": {
            "name": "contains",
            "location": 116,
            "return": [],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "int",
                    "typing.Hashable"
                ]
            }
        },
        "Scope._mapping": {
            "name": "_mapping",
            "location": 119,
            "return": [
                "dict[str, str]",
                "typing.Type",
                "dict[int, typing.Union[typing.Any,typing.Any,typing.Any,typing.Any]]",
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "int"
                ]
            }
        },
        "Scope.provide": {
            "name": "provide",
            "location": 128,
            "return": [],
            "arguments": {
                "self": [],
                "key": [
                    "str"
                ]
            }
        },
        "Scope.provider": {
            "name": "provider",
            "location": 139,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "component.decorator": {
            "name": "decorator",
            "location": 151,
            "return": [
                "None"
            ],
            "arguments": {
                "f": []
            }
        }
    },
    "injectpy-main/injectpy/lookup.py": {
        "ILookup.contains": {
            "name": "contains",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "float",
                    "int"
                ]
            }
        },
        "ILookup.get": {
            "name": "get",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "typing.Iterable[str]"
                ]
            }
        },
        "ILookup.only_if": {
            "name": "only_if",
            "location": 18,
            "return": [],
            "arguments": {
                "self": [],
                "predicate": [
                    "int",
                    "list[]",
                    "str"
                ]
            }
        },
        "ILookup.or_else": {
            "name": "or_else",
            "location": 21,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Lookup.fallback": {
            "name": "fallback",
            "location": 26,
            "return": [
                "FallbackLookup"
            ],
            "arguments": {}
        },
        "Lookup.only_if": {
            "name": "only_if",
            "location": 30,
            "return": [
                "ConditionalLookup"
            ],
            "arguments": {
                "lookup": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ],
                "predicate": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ]
            }
        },
        "DictLookup.__init__": {
            "name": "__init__",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "source": [
                    "str",
                    "None",
                    "bool"
                ]
            }
        },
        "DictLookup.contains": {
            "name": "contains",
            "location": 37,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "int"
                ]
            }
        },
        "DictLookup.get": {
            "name": "get",
            "location": 40,
            "return": [],
            "arguments": {
                "self": [],
                "key": [
                    "str"
                ]
            }
        },
        "ConditionalLookup.__init__": {
            "name": "__init__",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "delegate": [
                    "int",
                    "float"
                ],
                "predicate": [
                    "int",
                    "float"
                ]
            }
        },
        "ConditionalLookup.contains": {
            "name": "contains",
            "location": 48,
            "return": [],
            "arguments": {
                "self": [],
                "key": [
                    "dict[str, str]",
                    "str",
                    "list[]",
                    "typing.Iterator",
                    "dict[, ]",
                    "None"
                ]
            }
        },
        "ConditionalLookup.get": {
            "name": "get",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "FallbackLookup.__init__": {
            "name": "__init__",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FallbackLookup.contains": {
            "name": "contains",
            "location": 59,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str"
                ]
            }
        },
        "FallbackLookup.get": {
            "name": "get",
            "location": 62,
            "return": [
                "dict[, ]",
                "dict[str, str]",
                "list[]",
                "tuple[tuple[typing.Union[str,typing.Any]]]",
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "dict[str, typing.Any]",
                    "tuple[str]"
                ]
            }
        }
    },
    "injectpy-main/injectpy/__init__.py": {},
    "injectpy-main/injectpy/tests/tests.py": {
        "ProviderTest.test_provide_known_object": {
            "name": "test_provide_known_object",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ProviderTest.test_component_can_be_added_via_component_scoped": {
            "name": "test_component_can_be_added_via_component_scoped",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ProviderTest.test_component_can_be_added_via_scope_provider": {
            "name": "test_component_can_be_added_via_scope_provider",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ProviderTest.test_provide_unknown_object_should_fail": {
            "name": "test_provide_unknown_object_should_fail",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ProviderTest.test_provide_object_from_parent_scope": {
            "name": "test_provide_object_from_parent_scope",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ProviderTest.test_parent_does_not_provide_object_from_child_scope": {
            "name": "test_parent_does_not_provide_object_from_child_scope",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ProviderTest.test_object_not_marked_as_singleton_is_initialized_twice": {
            "name": "test_object_not_marked_as_singleton_is_initialized_twice",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ProviderTest.test_object_marked_as_singleton_is_not_initialized_twice": {
            "name": "test_object_marked_as_singleton_is_not_initialized_twice",
            "location": 102,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ProviderTest.test_lookup_by_class": {
            "name": "test_lookup_by_class",
            "location": 119,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ProviderTest.test_imperative_dependency_declaration": {
            "name": "test_imperative_dependency_declaration",
            "location": 133,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ProviderTest.test_object_with_dependencies_cannot_be_provided": {
            "name": "test_object_with_dependencies_cannot_be_provided",
            "location": 145,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ObjectGraphTest.test_provide_object_with_declared_dependencies": {
            "name": "test_provide_object_with_declared_dependencies",
            "location": 161,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AnnotationTest.test_scope_bindings_should_preserve_declared_type_hints": {
            "name": "test_scope_bindings_should_preserve_declared_type_hints",
            "location": 187,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ProviderTest.test_provide_known_object.foo": {
            "name": "foo",
            "location": 15,
            "return": [],
            "arguments": {}
        },
        "ProviderTest.test_component_can_be_added_via_component_scoped.foo": {
            "name": "foo",
            "location": 30,
            "return": [
                "Foo"
            ],
            "arguments": {}
        },
        "ProviderTest.test_component_can_be_added_via_scope_provider.foo": {
            "name": "foo",
            "location": 43,
            "return": [
                "Foo"
            ],
            "arguments": {}
        },
        "ProviderTest.test_provide_object_from_parent_scope.foo": {
            "name": "foo",
            "location": 66,
            "return": [],
            "arguments": {}
        },
        "ProviderTest.test_parent_does_not_provide_object_from_child_scope.foo": {
            "name": "foo",
            "location": 82,
            "return": [],
            "arguments": {}
        },
        "ProviderTest.test_object_not_marked_as_singleton_is_initialized_twice.foo": {
            "name": "foo",
            "location": 94,
            "return": [
                "Foo"
            ],
            "arguments": {}
        },
        "ProviderTest.test_object_marked_as_singleton_is_not_initialized_twice.foo": {
            "name": "foo",
            "location": 110,
            "return": [
                "Foo"
            ],
            "arguments": {}
        },
        "ProviderTest.test_lookup_by_class.foo": {
            "name": "foo",
            "location": 127,
            "return": [],
            "arguments": {}
        },
        "ProviderTest.test_object_with_dependencies_cannot_be_provided.foo": {
            "name": "foo",
            "location": 153,
            "return": [
                "Foo"
            ],
            "arguments": {
                "bar": []
            }
        },
        "ObjectGraphTest.test_provide_object_with_declared_dependencies.foo": {
            "name": "foo",
            "location": 176,
            "return": [
                "Foo"
            ],
            "arguments": {
                "bar": []
            }
        },
        "AnnotationTest.test_scope_bindings_should_preserve_declared_type_hints.foo": {
            "name": "foo",
            "location": 193,
            "return": [
                "Foo"
            ],
            "arguments": {}
        },
        "ObjectGraphTest.test_provide_object_with_declared_dependencies.Foo.__init__": {
            "name": "__init__",
            "location": 167,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "bar": []
            }
        }
    },
    "injectpy-main/injectpy/tests/__init__.py": {}
}
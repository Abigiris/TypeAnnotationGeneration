{
    "instawow-main/noxfile.py": {
        "mirror_repo": {
            "name": "mirror_repo",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "session": []
            }
        },
        "install_coverage_hook": {
            "name": "install_coverage_hook",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "session": []
            }
        },
        "format_": {
            "name": "format_",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "session": []
            }
        },
        "test": {
            "name": "test",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "session": [],
                "constraints": [
                    "typing.Callable[, ]",
                    "list[]",
                    "dict[str, dict[str, typing.Any]]",
                    "str"
                ]
            }
        },
        "type_check": {
            "name": "type_check",
            "location": 110,
            "return": [
                "None"
            ],
            "arguments": {
                "session": []
            }
        },
        "bundle_frontend": {
            "name": "bundle_frontend",
            "location": 118,
            "return": [
                "None"
            ],
            "arguments": {
                "session": []
            }
        },
        "build_dists": {
            "name": "build_dists",
            "location": 127,
            "return": [
                "None"
            ],
            "arguments": {
                "session": []
            }
        },
        "publish_dists": {
            "name": "publish_dists",
            "location": 139,
            "return": [
                "None"
            ],
            "arguments": {
                "session": []
            }
        },
        "freeze_cli": {
            "name": "freeze_cli",
            "location": 147,
            "return": [
                "None"
            ],
            "arguments": {
                "session": []
            }
        }
    },
    "instawow-main/gui-webview/src/instawow_gui/app.py": {
        "InstawowApp.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "InstawowApp.startup": {
            "name": "startup",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "InstawowApp.startup.dispatch_js_keyboard_event": {
            "name": "dispatch_js_keyboard_event",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "_": []
            }
        },
        "InstawowApp.startup.configure_webview2": {
            "name": "configure_webview2",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "sender": [],
                "event_args": []
            }
        }
    },
    "instawow-main/gui-webview/src/instawow_gui/json_rpc_server.py": {
        "_structure_excs": {
            "name": "_structure_excs",
            "location": 81,
            "return": [
                "list[dict[typing.Text, typing.Union[list[],str]]]"
            ],
            "arguments": {
                "excs": []
            }
        },
        "_reraise_validation_error": {
            "name": "_reraise_validation_error",
            "location": 91,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "error_class": [],
                "values": [
                    "None"
                ]
            }
        },
        "_read_config": {
            "name": "_read_config",
            "location": 103,
            "return": [],
            "arguments": {
                "profile": []
            }
        },
        "_register_method": {
            "name": "_register_method",
            "location": 111,
            "return": [],
            "arguments": {
                "method": []
            }
        },
        "_init_json_rpc_web_client": {
            "name": "_init_json_rpc_web_client",
            "location": 616,
            "return": [
                "tuple[set[]]"
            ],
            "arguments": {}
        },
        "_register_method.inner": {
            "name": "inner",
            "location": 112,
            "return": [],
            "arguments": {
                "param_class": []
            }
        },
        "BaseParams.bind": {
            "name": "bind",
            "location": 131,
            "return": [
                "JsonRpcMethod"
            ],
            "arguments": {
                "cls": [],
                "method": [],
                "managers": [],
                "app_window": []
            }
        },
        "_ManagerWorkQueue.__init__": {
            "name": "__init__",
            "location": 649,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "_ManagerWorkQueue.unload": {
            "name": "unload",
            "location": 671,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "profile": []
            }
        },
        "_ManagerWorkQueue.unload_all": {
            "name": "unload_all",
            "location": 677,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "_ManagerWorkQueue.cancel_github_auth_polling": {
            "name": "cancel_github_auth_polling",
            "location": 763,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "create_app.json_serialize": {
            "name": "json_serialize",
            "location": 795,
            "return": [],
            "arguments": {
                "value": []
            }
        },
        "ResolveParams._resolve.extract_source": {
            "name": "extract_source",
            "location": 335,
            "return": [],
            "arguments": {
                "defn": []
            }
        },
        "_ManagerWorkQueue.initiate_github_auth_flow.on_task_complete": {
            "name": "on_task_complete",
            "location": 745,
            "return": [
                "None"
            ],
            "arguments": {
                "future": []
            }
        }
    },
    "instawow-main/gui-webview/src/instawow_gui/__init__.py": {},
    "instawow-main/gui-webview/src/instawow_gui/frontend/__init__.py": {},
    "instawow-main/gui-webview/src/instawow_gui/resources/__init__.py": {},
    "instawow-main/gui-webview/src/instawow_gui_wrapper/__init__.py": {},
    "instawow-main/gui-webview/src/instawow_gui_wrapper/__main__.py": {
        "_patch_std_streams": {
            "name": "_patch_std_streams",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "_apply_patches": {
            "name": "_apply_patches",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "main": {
            "name": "main",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "instawow-main/src/instawow/cataloguer.py": {
        "Catalogue.from_base_catalogue": {
            "name": "from_base_catalogue",
            "location": 70,
            "return": [],
            "arguments": {
                "cls": [
                    "int",
                    "None"
                ],
                "unstructured_base_catalogue": [
                    "int",
                    "float",
                    "str",
                    "list[]",
                    "dict[, ]",
                    "None"
                ],
                "start_date": [
                    "int",
                    "str"
                ]
            }
        },
        "Catalogue.keyed_entries": {
            "name": "keyed_entries",
            "location": 113,
            "return": [
                "dict[tuple[], ]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "instawow-main/src/instawow/cli.py": {
        "_init_cli_web_client": {
            "name": "_init_cli_web_client",
            "location": 91,
            "return": [],
            "arguments": {
                "progress_bar": [],
                "tickers": []
            }
        },
        "_cancel_tickers": {
            "name": "_cancel_tickers",
            "location": 141,
            "return": [
                "typing.Generator[set[]]"
            ],
            "arguments": {
                "progress_bar": []
            }
        },
        "_override_asyncio_loop_policy": {
            "name": "_override_asyncio_loop_policy",
            "location": 151,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "_apply_patches": {
            "name": "_apply_patches",
            "location": 160,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "_with_manager": {
            "name": "_with_manager",
            "location": 202,
            "return": [],
            "arguments": {
                "fn": []
            }
        },
        "_register_plugin_commands": {
            "name": "_register_plugin_commands",
            "location": 228,
            "return": [],
            "arguments": {
                "group": []
            }
        },
        "cli": {
            "name": "cli",
            "location": 255,
            "return": [
                "None"
            ],
            "arguments": {
                "ctx": []
            }
        },
        "parse_into_defn": {
            "name": "parse_into_defn",
            "location": 281,
            "return": [
                "None"
            ],
            "arguments": {
                "manager": [],
                "value": []
            }
        },
        "parse_into_defn_with_strategy": {
            "name": "parse_into_defn_with_strategy",
            "location": 300,
            "return": [],
            "arguments": {
                "manager": [],
                "value": []
            }
        },
        "parse_into_defn_with_version": {
            "name": "parse_into_defn_with_version",
            "location": 307,
            "return": [],
            "arguments": {
                "manager": [],
                "value": []
            }
        },
        "_combine_addons": {
            "name": "_combine_addons",
            "location": 314,
            "return": [
                "None"
            ],
            "arguments": {
                "fn": [],
                "ctx": [],
                "_": [],
                "value": []
            }
        },
        "install": {
            "name": "install",
            "location": 354,
            "return": [
                "None"
            ],
            "arguments": {
                "mw": [],
                "addons": [],
                "replace": []
            }
        },
        "update": {
            "name": "update",
            "location": 368,
            "return": [
                "None"
            ],
            "arguments": {
                "mw": [],
                "addons": []
            }
        },
        "remove": {
            "name": "remove",
            "location": 408,
            "return": [
                "None"
            ],
            "arguments": {
                "mw": [],
                "addons": [],
                "keep_folders": []
            }
        },
        "rollback": {
            "name": "rollback",
            "location": 427,
            "return": [
                "None"
            ],
            "arguments": {
                "mw": [],
                "addon": [],
                "version": [],
                "undo": []
            }
        },
        "reconcile": {
            "name": "reconcile",
            "location": 487,
            "return": [
                "None"
            ],
            "arguments": {
                "mw": [],
                "auto": [],
                "rereconcile": [],
                "list_unreconciled": []
            }
        },
        "_concat_search_terms": {
            "name": "_concat_search_terms",
            "location": 637,
            "return": [
                "str"
            ],
            "arguments": {
                "_": [],
                "__": [],
                "value": []
            }
        },
        "_parse_iso_date_into_datetime": {
            "name": "_parse_iso_date_into_datetime",
            "location": 641,
            "return": [],
            "arguments": {
                "_": [],
                "__": [],
                "value": []
            }
        },
        "search": {
            "name": "search",
            "location": 668,
            "return": [
                "None"
            ],
            "arguments": {
                "ctx": [],
                "search_terms": [],
                "limit": [],
                "sources": [],
                "start_date": []
            }
        },
        "list_installed": {
            "name": "list_installed",
            "location": 718,
            "return": [
                "None"
            ],
            "arguments": {
                "mw": [],
                "addons": [],
                "output_format": []
            }
        },
        "info": {
            "name": "info",
            "location": 801,
            "return": [
                "None"
            ],
            "arguments": {
                "ctx": [],
                "addon": []
            }
        },
        "reveal": {
            "name": "reveal",
            "location": 809,
            "return": [
                "None"
            ],
            "arguments": {
                "mw": [],
                "addon": []
            }
        },
        "view_changelog": {
            "name": "view_changelog",
            "location": 829,
            "return": [
                "None"
            ],
            "arguments": {
                "mw": [],
                "addon": [],
                "convert": []
            }
        },
        "_show_active_config": {
            "name": "_show_active_config",
            "location": 911,
            "return": [
                "None"
            ],
            "arguments": {
                "ctx": [],
                "__": [],
                "value": []
            }
        },
        "configure": {
            "name": "configure",
            "location": 955,
            "return": [],
            "arguments": {
                "ctx": [],
                "config_options": []
            }
        },
        "_weakauras_group": {
            "name": "_weakauras_group",
            "location": 1036,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "build_weakauras_companion": {
            "name": "build_weakauras_companion",
            "location": 1042,
            "return": [
                "None"
            ],
            "arguments": {
                "mw": []
            }
        },
        "list_installed_wago_auras": {
            "name": "list_installed_wago_auras",
            "location": 1051,
            "return": [
                "None"
            ],
            "arguments": {
                "mw": []
            }
        },
        "generate_catalogue": {
            "name": "generate_catalogue",
            "location": 1073,
            "return": [
                "None"
            ],
            "arguments": {
                "start_date": []
            }
        },
        "gui": {
            "name": "gui",
            "location": 1096,
            "return": [
                "None"
            ],
            "arguments": {
                "ctx": []
            }
        },
        "Report.__init__": {
            "name": "__init__",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "results": [],
                "filter_fn": [
                    "typing.Callable[, ]"
                ]
            }
        },
        "Report.exit_code": {
            "name": "exit_code",
            "location": 51,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Report._result_type_to_symbol": {
            "name": "_result_type_to_symbol",
            "location": 58,
            "return": [],
            "arguments": {
                "cls": [],
                "result": []
            }
        },
        "Report.__str__": {
            "name": "__str__",
            "location": 66,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Report.generate": {
            "name": "generate",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Report.generate_and_exit": {
            "name": "generate_and_exit",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "_CtxObjWrapper.__init__": {
            "name": "__init__",
            "location": 165,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ctx": []
            }
        },
        "_CtxObjWrapper.manager": {
            "name": "manager",
            "location": 169,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_CtxObjWrapper.run_with_progress": {
            "name": "run_with_progress",
            "location": 182,
            "return": [],
            "arguments": {
                "self": [],
                "awaitable": []
            }
        },
        "_with_manager.wrapper": {
            "name": "wrapper",
            "location": 203,
            "return": [],
            "arguments": {
                "ctx": [],
                "__": [],
                "value": []
            }
        },
        "StrEnumParam.__init__": {
            "name": "__init__",
            "location": 210,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "choice_enum": [],
                "excludes": [
                    "frozenset"
                ],
                "case_sensitive": [
                    "bool"
                ]
            }
        },
        "StrEnumParam.convert": {
            "name": "convert",
            "location": 222,
            "return": [],
            "arguments": {
                "self": [],
                "value": [],
                "param": [],
                "ctx": []
            }
        },
        "update.filter_results": {
            "name": "filter_results",
            "location": 372,
            "return": [
                "bool"
            ],
            "arguments": {
                "result": []
            }
        },
        "reconcile.construct_choice": {
            "name": "construct_choice",
            "location": 498,
            "return": [
                "PkgChoice"
            ],
            "arguments": {
                "pkg": [],
                "highlight_version": [],
                "disabled": []
            }
        },
        "reconcile.gather_selections": {
            "name": "gather_selections",
            "location": 510,
            "return": [
                "typing.Generator[]",
                "typing.Generator[None]"
            ],
            "arguments": {
                "groups": [],
                "selector": []
            }
        },
        "reconcile.prompt_unreconciled": {
            "name": "prompt_unreconciled",
            "location": 582,
            "return": [
                "None"
            ],
            "arguments": {
                "addons": [],
                "pkgs": []
            }
        },
        "reconcile.pick_first": {
            "name": "pick_first",
            "location": 595,
            "return": [],
            "arguments": {
                "addons": [],
                "pkgs": []
            }
        },
        "reconcile.match_all": {
            "name": "match_all",
            "location": 598,
            "return": [
                "typing.Generator[list[]]"
            ],
            "arguments": {
                "selector": []
            }
        },
        "list_installed.format_deps": {
            "name": "format_deps",
            "location": 724,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "pkg": []
            }
        },
        "list_installed.row_mappings_to_pkgs": {
            "name": "row_mappings_to_pkgs",
            "location": 735,
            "return": [],
            "arguments": {}
        },
        "view_changelog.make_converter": {
            "name": "make_converter",
            "location": 836,
            "return": [],
            "arguments": {}
        },
        "reconcile.prompt_reconciled": {
            "name": "prompt_reconciled",
            "location": 529,
            "return": [
                "None"
            ],
            "arguments": {
                "installed_pkg": [],
                "pkgs": []
            }
        },
        "reconcile.prompt_unreconciled.combine_names": {
            "name": "combine_names",
            "location": 583,
            "return": [],
            "arguments": {}
        },
        "view_changelog.make_converter.noop_convert": {
            "name": "noop_convert",
            "location": 842,
            "return": [],
            "arguments": {
                "source": [],
                "changelog": []
            }
        },
        "view_changelog.make_converter.real_convert": {
            "name": "real_convert",
            "location": 848,
            "return": [],
            "arguments": {
                "source": [],
                "changelog": []
            }
        }
    },
    "instawow-main/src/instawow/common.py": {
        "infer_flavour_from_path": {
            "name": "infer_flavour_from_path",
            "location": 64,
            "return": [],
            "arguments": {
                "path": []
            }
        },
        "_FlavourKeyedEnum.__getitem__": {
            "name": "__getitem__",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "__key": []
            }
        },
        "Flavour.from_flavour_keyed_enum": {
            "name": "from_flavour_keyed_enum",
            "location": 38,
            "return": [],
            "arguments": {
                "cls": [],
                "enum": []
            }
        },
        "Flavour.to_flavour_keyed_enum": {
            "name": "to_flavour_keyed_enum",
            "location": 41,
            "return": [],
            "arguments": {
                "self": [],
                "enum": []
            }
        },
        "FlavourVersion.from_version_string": {
            "name": "from_version_string",
            "location": 51,
            "return": [],
            "arguments": {
                "cls": [],
                "version_string": []
            }
        },
        "FlavourVersion.from_version_number": {
            "name": "from_version_number",
            "location": 57,
            "return": [],
            "arguments": {
                "cls": [],
                "version_number": []
            }
        },
        "FlavourVersion.is_within_version": {
            "name": "is_within_version",
            "location": 60,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "version_number": []
            }
        }
    },
    "instawow-main/src/instawow/config.py": {
        "_convert_secret_string": {
            "name": "_convert_secret_string",
            "location": 32,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "value": [
                    "str",
                    "set[str]"
                ]
            }
        },
        "_expand_path": {
            "name": "_expand_path",
            "location": 36,
            "return": [
                "Path"
            ],
            "arguments": {
                "value": [
                    "str",
                    "bool"
                ]
            }
        },
        "_is_writable_dir": {
            "name": "_is_writable_dir",
            "location": 40,
            "return": [],
            "arguments": {
                "value": []
            }
        },
        "_ensure_dirs": {
            "name": "_ensure_dirs",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "dirs": []
            }
        },
        "_enrich_validator_exc": {
            "name": "_enrich_validator_exc",
            "location": 49,
            "return": [],
            "arguments": {
                "validator": [
                    "int",
                    "str",
                    "typing.Iterable[C]"
                ]
            }
        },
        "_validate_path_is_writable_dir": {
            "name": "_validate_path_is_writable_dir",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "model": [
                    "typing.Sequence[str]",
                    "str",
                    "None",
                    "dict[str, typing.Any]",
                    "typing.Mapping"
                ],
                "attr": [
                    "typing.Sequence[str]",
                    "str",
                    "None",
                    "dict[str, typing.Any]",
                    "typing.Mapping"
                ],
                "value": [
                    "str",
                    "typing.Container",
                    "bytes",
                    "None",
                    "bool"
                ]
            }
        },
        "_make_validate_min_length": {
            "name": "_make_validate_min_length",
            "location": 67,
            "return": [],
            "arguments": {
                "min_length": [
                    "int",
                    "str",
                    "typing.Iterable[C]"
                ]
            }
        },
        "_encode_config_for_display": {
            "name": "_encode_config_for_display",
            "location": 76,
            "return": [],
            "arguments": {
                "config": [
                    "str",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "_write_config": {
            "name": "_write_config",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "config": [
                    "str",
                    "None",
                    "dict[str, typing.Any]"
                ],
                "config_path": [
                    "str",
                    "dict[, ]",
                    "int",
                    "bytes",
                    "None"
                ],
                "fields_to_include": [
                    "str"
                ]
            }
        },
        "_read_config": {
            "name": "_read_config",
            "location": 108,
            "return": [
                "dict[, ]"
            ],
            "arguments": {
                "config_path": [],
                "missing_ok": [
                    "bool"
                ]
            }
        },
        "_compute_var": {
            "name": "_compute_var",
            "location": 118,
            "return": [
                "bool",
                "typing.Callable[, ]",
                "str",
                "list[]",
                "bytes",
                "int",
                "dict[str, typing.Union[typing.Any,typing.Any]]",
                "None",
                "set[str]",
                "tuple[typing.Union[typing.Type,typing.Type]]"
            ],
            "arguments": {
                "field": [
                    "str",
                    "dict[str, typing.Any]"
                ],
                "default": [
                    "bool",
                    "typing.Callable[, ]",
                    "str",
                    "list[]"
                ]
            }
        },
        "_read_env_vars": {
            "name": "_read_env_vars",
            "location": 131,
            "return": [
                "dict[, ]"
            ],
            "arguments": {
                "config_cls": [
                    "str",
                    "dict[str, typing.Any]",
                    "typing.Type"
                ]
            }
        },
        "make_config_converter": {
            "name": "make_config_converter",
            "location": 140,
            "return": [
                "GenConverter"
            ],
            "arguments": {}
        },
        "_patch_loguru_enqueue": {
            "name": "_patch_loguru_enqueue",
            "location": 296,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "_intercept_logging_module_calls": {
            "name": "_intercept_logging_module_calls",
            "location": 323,
            "return": [
                "None"
            ],
            "arguments": {
                "log_level": [
                    "int",
                    "dict[, ]",
                    "str",
                    "None"
                ]
            }
        },
        "setup_logging": {
            "name": "setup_logging",
            "location": 348,
            "return": [
                "None"
            ],
            "arguments": {
                "logging_dir": [],
                "debug": [
                    "str"
                ]
            }
        },
        "_enrich_validator_exc.wrapper": {
            "name": "wrapper",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "model": [],
                "attr": [],
                "value": []
            }
        },
        "_make_validate_min_length._validate_min_length": {
            "name": "_validate_min_length",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "model": [],
                "attr": [],
                "value": []
            }
        },
        "GlobalConfig.from_env": {
            "name": "from_env",
            "location": 177,
            "return": [],
            "arguments": {
                "cls": [
                    "bool",
                    "None",
                    "str"
                ]
            }
        },
        "GlobalConfig.read": {
            "name": "read",
            "location": 181,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "GlobalConfig.list_profiles": {
            "name": "list_profiles",
            "location": 186,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "GlobalConfig.ensure_dirs": {
            "name": "ensure_dirs",
            "location": 191,
            "return": [
                "GlobalConfig"
            ],
            "arguments": {
                "self": []
            }
        },
        "GlobalConfig.write": {
            "name": "write",
            "location": 201,
            "return": [
                "GlobalConfig"
            ],
            "arguments": {
                "self": []
            }
        },
        "GlobalConfig.cache_dir": {
            "name": "cache_dir",
            "location": 207,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GlobalConfig.config_file": {
            "name": "config_file",
            "location": 211,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Config.make_dummy_config": {
            "name": "make_dummy_config",
            "location": 231,
            "return": [],
            "arguments": {
                "cls": [
                    "dict[, ]"
                ]
            }
        },
        "Config.from_env": {
            "name": "from_env",
            "location": 235,
            "return": [],
            "arguments": {
                "cls": [
                    "bool",
                    "None",
                    "str"
                ]
            }
        },
        "Config.read": {
            "name": "read",
            "location": 239,
            "return": [],
            "arguments": {
                "cls": [],
                "global_config": [
                    "typing.Type"
                ],
                "profile": [
                    "dict[, ]",
                    "None",
                    "str"
                ]
            }
        },
        "Config.encode_for_display": {
            "name": "encode_for_display",
            "location": 245,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Config.ensure_dirs": {
            "name": "ensure_dirs",
            "location": 248,
            "return": [
                "Config"
            ],
            "arguments": {
                "self": []
            }
        },
        "Config.write": {
            "name": "write",
            "location": 258,
            "return": [
                "Config"
            ],
            "arguments": {
                "self": []
            }
        },
        "Config.delete": {
            "name": "delete",
            "location": 263,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Config.profile_dir": {
            "name": "profile_dir",
            "location": 267,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Config.logging_dir": {
            "name": "logging_dir",
            "location": 271,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Config.plugin_dir": {
            "name": "plugin_dir",
            "location": 275,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Config.config_file": {
            "name": "config_file",
            "location": 279,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Config.db_uri": {
            "name": "db_uri",
            "location": 283,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "_intercept_logging_module_calls.InterceptHandler.emit": {
            "name": "emit",
            "location": 329,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "record": []
            }
        }
    },
    "instawow-main/src/instawow/db.py": {
        "_get_database_state": {
            "name": "_get_database_state",
            "location": 122,
            "return": [
                "_DatabaseState"
            ],
            "arguments": {
                "engine": [],
                "revision": [
                    "typing.Callable[, ]",
                    "int",
                    "str"
                ]
            }
        },
        "_set_sqlite_pragma": {
            "name": "_set_sqlite_pragma",
            "location": 141,
            "return": [
                "None"
            ],
            "arguments": {
                "dbapi_connection": [],
                "connection_record": [
                    "int",
                    "str"
                ]
            }
        },
        "prepare_database": {
            "name": "prepare_database",
            "location": 147,
            "return": [
                "str",
                "float",
                "int"
            ],
            "arguments": {
                "uri": [
                    "list[str]"
                ],
                "revision": [
                    "typing.Any",
                    "int"
                ]
            }
        },
        "faux_transact": {
            "name": "faux_transact",
            "location": 178,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "connection": []
            }
        },
        "TZDateTime.process_bind_param": {
            "name": "process_bind_param",
            "location": 29,
            "return": [
                "None",
                "list[]",
                "list[str]",
                "float",
                "int",
                "str",
                "typing.Type"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "None",
                    "float",
                    "typing.Any"
                ],
                "dialect": [
                    "int",
                    "tuple[typing.Union[str,int]]",
                    "complex",
                    "list[]"
                ]
            }
        },
        "TZDateTime.process_result_value": {
            "name": "process_result_value",
            "location": 36,
            "return": [
                "None",
                "str"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "None"
                ],
                "dialect": [
                    "str",
                    "tuple[typing.Union[typing.Any,typing.Any]]",
                    "None",
                    "typing.Callable[, ]",
                    "dict[, ]"
                ]
            }
        },
        "TZDateTime.python_type": {
            "name": "python_type",
            "location": 42,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "instawow-main/src/instawow/github_auth.py": {},
    "instawow-main/src/instawow/manager.py": {
        "_open_pkg_archive": {
            "name": "_open_pkg_archive",
            "location": 98,
            "return": [],
            "arguments": {
                "path": []
            }
        },
        "_load_certifi_certs": {
            "name": "_load_certifi_certs",
            "location": 191,
            "return": [],
            "arguments": {}
        },
        "init_web_client": {
            "name": "init_web_client",
            "location": 203,
            "return": [],
            "arguments": {}
        },
        "_with_lock": {
            "name": "_with_lock",
            "location": 259,
            "return": [],
            "arguments": {
                "lock_name": [],
                "manager_bound": []
            }
        },
        "contextualise": {
            "name": "contextualise",
            "location": 284,
            "return": [],
            "arguments": {}
        },
        "_ResponseWrapper.__init__": {
            "name": "__init__",
            "location": 112,
            "return": [],
            "arguments": {
                "self": [],
                "response": [],
                "response_body": []
            }
        },
        "_ResponseWrapper.raise_for_status": {
            "name": "raise_for_status",
            "location": 127,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_ResponseWrapper.status": {
            "name": "status",
            "location": 132,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_CacheFauxClientSession.__init__": {
            "name": "__init__",
            "location": 137,
            "return": [],
            "arguments": {
                "self": [],
                "cache_dir": []
            }
        },
        "_CacheFauxClientSession.wrapped": {
            "name": "wrapped",
            "location": 141,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_CacheFauxClientSession.get": {
            "name": "get",
            "location": 180,
            "return": [],
            "arguments": {
                "self": [],
                "url": [],
                "ttl": [],
                "label": []
            }
        },
        "_with_lock.outer": {
            "name": "outer",
            "location": 263,
            "return": [],
            "arguments": {
                "coro_fn": []
            }
        },
        "Manager.__init__": {
            "name": "__init__",
            "location": 314,
            "return": [],
            "arguments": {
                "self": [],
                "config": [],
                "database": []
            }
        },
        "Manager.from_config": {
            "name": "from_config",
            "location": 339,
            "return": [],
            "arguments": {
                "cls": [],
                "config": []
            }
        },
        "Manager.locks": {
            "name": "locks",
            "location": 345,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Manager.pair_uri": {
            "name": "pair_uri",
            "location": 349,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "Manager.check_pkg_exists": {
            "name": "check_pkg_exists",
            "location": 365,
            "return": [],
            "arguments": {
                "self": [],
                "defn": []
            }
        },
        "Manager.get_pkg": {
            "name": "get_pkg",
            "location": 381,
            "return": [],
            "arguments": {
                "self": [],
                "defn": [],
                "partial_match": []
            }
        },
        "Manager.install_pkg": {
            "name": "install_pkg",
            "location": 408,
            "return": [],
            "arguments": {
                "self": [],
                "pkg": [],
                "archive": [],
                "replace": []
            }
        },
        "Manager.update_pkg": {
            "name": "update_pkg",
            "location": 439,
            "return": [],
            "arguments": {
                "self": [],
                "old_pkg": [],
                "new_pkg": [],
                "archive": []
            }
        },
        "Manager.remove_pkg": {
            "name": "remove_pkg",
            "location": 474,
            "return": [],
            "arguments": {
                "self": [],
                "pkg": [],
                "keep_folders": []
            }
        },
        "is_outdated.parse_version": {
            "name": "parse_version",
            "location": 883,
            "return": [],
            "arguments": {
                "version": []
            }
        },
        "_open_pkg_archive.extract": {
            "name": "extract",
            "location": 103,
            "return": [],
            "arguments": {
                "parent": []
            }
        },
        "_CacheFauxClientSession.request.prepare_request_kwargs": {
            "name": "prepare_request_kwargs",
            "location": 153,
            "return": [],
            "arguments": {}
        },
        "Manager.pair_uri.from_urn": {
            "name": "from_urn",
            "location": 352,
            "return": [],
            "arguments": {}
        },
        "Manager.find_equivalent_pkg_defns.get_catalogue_defns": {
            "name": "get_catalogue_defns",
            "location": 529,
            "return": [],
            "arguments": {
                "pkg": []
            }
        },
        "Manager.find_equivalent_pkg_defns.extract_addon_toc_defns": {
            "name": "extract_addon_toc_defns",
            "location": 536,
            "return": [],
            "arguments": {
                "pkg": []
            }
        },
        "Manager.search.make_filter": {
            "name": "make_filter",
            "location": 639,
            "return": [],
            "arguments": {}
        },
        "Manager.pin.pin": {
            "name": "pin",
            "location": 848,
            "return": [],
            "arguments": {
                "defn": [],
                "pkg": []
            }
        },
        "Manager.search.make_filter.filter_game_flavour": {
            "name": "filter_game_flavour",
            "location": 640,
            "return": [],
            "arguments": {
                "entry": []
            }
        },
        "Manager.search.make_filter.filter_sources": {
            "name": "filter_sources",
            "location": 647,
            "return": [],
            "arguments": {
                "entry": []
            }
        },
        "Manager.search.make_filter.filter_age": {
            "name": "filter_age",
            "location": 655,
            "return": [],
            "arguments": {
                "entry": []
            }
        }
    },
    "instawow-main/src/instawow/matchers.py": {
        "_get_unreconciled_folders": {
            "name": "_get_unreconciled_folders",
            "location": 97,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "manager": [
                    "str"
                ]
            }
        },
        "get_unreconciled_folders": {
            "name": "get_unreconciled_folders",
            "location": 110,
            "return": [
                "set[]"
            ],
            "arguments": {
                "manager": [
                    "str"
                ]
            }
        },
        "AddonFolder.__init__": {
            "name": "__init__",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "dict[str, typing.Any]",
                    "list[str]",
                    "dict[, ]"
                ],
                "toc_reader": [
                    "int",
                    "str",
                    "typing.Sequence[]",
                    "None"
                ]
            }
        },
        "AddonFolder.__repr__": {
            "name": "__repr__",
            "location": 57,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "AddonFolder.__hash__": {
            "name": "__hash__",
            "location": 60,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "AddonFolder.__eq__": {
            "name": "__eq__",
            "location": 63,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "str",
                    "int",
                    "None"
                ]
            }
        },
        "AddonFolder.__lt__": {
            "name": "__lt__",
            "location": 68,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "AddonFolder.from_addon_path": {
            "name": "from_addon_path",
            "location": 76,
            "return": [],
            "arguments": {
                "cls": [
                    "str",
                    "None",
                    "bool"
                ],
                "flavour": [
                    "bool",
                    "str"
                ],
                "path": [
                    "str",
                    "list[str]",
                    "None",
                    "typing.BinaryIO"
                ]
            }
        },
        "AddonFolder.defns_from_toc": {
            "name": "defns_from_toc",
            "location": 85,
            "return": [
                "set[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "AddonFolder.version": {
            "name": "version",
            "location": 93,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "match_folder_name_subsets.sort_key": {
            "name": "sort_key",
            "location": 155,
            "return": [
                "tuple[int]"
            ],
            "arguments": {
                "folders": [],
                "defn": []
            }
        },
        "match_addon_names_with_folder_names.normalise": {
            "name": "normalise",
            "location": 167,
            "return": [],
            "arguments": {
                "value": []
            }
        }
    },
    "instawow-main/src/instawow/models.py": {
        "Pkg.from_row_mapping": {
            "name": "from_row_mapping",
            "location": 63,
            "return": [],
            "arguments": {
                "cls": [
                    "int"
                ],
                "connection": [
                    "int"
                ],
                "row_mapping": [
                    "str"
                ]
            }
        },
        "Pkg.insert": {
            "name": "insert",
            "location": 95,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "connection": []
            }
        },
        "Pkg.delete": {
            "name": "delete",
            "location": 113,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "connection": [
                    "str",
                    "dict[str, str]",
                    "int"
                ]
            }
        }
    },
    "instawow-main/src/instawow/plugins.py": {
        "load_plugins": {
            "name": "load_plugins",
            "location": 45,
            "return": [],
            "arguments": {}
        },
        "InstawowPlugin.instawow_add_commands": {
            "name": "instawow_add_commands",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "InstawowPlugin.instawow_add_resolvers": {
            "name": "instawow_add_resolvers",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "_InstawowPluginHookRelay.instawow_add_commands": {
            "name": "instawow_add_commands",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "_InstawowPluginHookRelay.instawow_add_resolvers": {
            "name": "instawow_add_resolvers",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "instawow-main/src/instawow/prompts.py": {
        "checkbox": {
            "name": "checkbox",
            "location": 90,
            "return": [
                "Question"
            ],
            "arguments": {
                "message": [],
                "choices": []
            }
        },
        "select": {
            "name": "select",
            "location": 169,
            "return": [
                "Question"
            ],
            "arguments": {
                "message": [],
                "choices": [],
                "initial_choice": [
                    "None"
                ]
            }
        },
        "ask": {
            "name": "ask",
            "location": 247,
            "return": [],
            "arguments": {
                "question": []
            }
        },
        "_format_mb": {
            "name": "_format_mb",
            "location": 251,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "value": []
            }
        },
        "make_progress_bar": {
            "name": "make_progress_bar",
            "location": 265,
            "return": [
                "ProgressBar"
            ],
            "arguments": {}
        },
        "AttrFieldValidator.__init__": {
            "name": "__init__",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "attribute": [],
                "converter": []
            }
        },
        "AttrFieldValidator.validate": {
            "name": "validate",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "document": []
            }
        },
        "PkgChoice.__init__": {
            "name": "__init__",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "checkbox.get_prompt_tokens": {
            "name": "get_prompt_tokens",
            "location": 91,
            "return": [
                "list[tuple[typing.Text]]"
            ],
            "arguments": {}
        },
        "checkbox.abort": {
            "name": "abort",
            "location": 111,
            "return": [
                "None"
            ],
            "arguments": {
                "event": []
            }
        },
        "checkbox.toggle": {
            "name": "toggle",
            "location": 115,
            "return": [
                "None"
            ],
            "arguments": {
                "event": []
            }
        },
        "checkbox.invert": {
            "name": "invert",
            "location": 123,
            "return": [
                "None"
            ],
            "arguments": {
                "event": []
            }
        },
        "checkbox.move_cursor_down": {
            "name": "move_cursor_down",
            "location": 135,
            "return": [
                "None"
            ],
            "arguments": {
                "event": []
            }
        },
        "checkbox.move_cursor_up": {
            "name": "move_cursor_up",
            "location": 142,
            "return": [
                "None"
            ],
            "arguments": {
                "event": []
            }
        },
        "checkbox.set_answer": {
            "name": "set_answer",
            "location": 148,
            "return": [
                "None"
            ],
            "arguments": {
                "event": []
            }
        },
        "checkbox.open_url": {
            "name": "open_url",
            "location": 153,
            "return": [
                "None"
            ],
            "arguments": {
                "event": []
            }
        },
        "checkbox.default": {
            "name": "default",
            "location": 161,
            "return": [
                "None"
            ],
            "arguments": {
                "event": []
            }
        },
        "select.get_prompt_tokens": {
            "name": "get_prompt_tokens",
            "location": 175,
            "return": [
                "list[tuple[typing.Text]]"
            ],
            "arguments": {}
        },
        "select.abort": {
            "name": "abort",
            "location": 201,
            "return": [
                "None"
            ],
            "arguments": {
                "event": []
            }
        },
        "select.move_cursor_down": {
            "name": "move_cursor_down",
            "location": 206,
            "return": [
                "None"
            ],
            "arguments": {
                "event": []
            }
        },
        "select.move_cursor_up": {
            "name": "move_cursor_up",
            "location": 213,
            "return": [
                "None"
            ],
            "arguments": {
                "event": []
            }
        },
        "select.set_answer": {
            "name": "set_answer",
            "location": 219,
            "return": [
                "None"
            ],
            "arguments": {
                "event": []
            }
        },
        "select.open_url": {
            "name": "open_url",
            "location": 224,
            "return": [
                "None"
            ],
            "arguments": {
                "event": []
            }
        },
        "select.default": {
            "name": "default",
            "location": 239,
            "return": [
                "None"
            ],
            "arguments": {
                "event": []
            }
        },
        "_DownloadProgress.format": {
            "name": "format",
            "location": 258,
            "return": [],
            "arguments": {
                "self": [],
                "progress_bar": [],
                "progress": [],
                "width": []
            }
        },
        "select.skip_question": {
            "name": "skip_question",
            "location": 234,
            "return": [
                "None"
            ],
            "arguments": {
                "event": []
            }
        }
    },
    "instawow-main/src/instawow/resolvers.py": {
        "_format_data_changelog": {
            "name": "_format_data_changelog",
            "location": 60,
            "return": [],
            "arguments": {
                "changelog": []
            }
        },
        "Defn.from_pkg": {
            "name": "from_pkg",
            "location": 47,
            "return": [],
            "arguments": {
                "cls": [],
                "pkg": []
            }
        },
        "Defn.with_version": {
            "name": "with_version",
            "location": 50,
            "return": [],
            "arguments": {
                "self": [],
                "version": []
            }
        },
        "Defn.to_urn": {
            "name": "to_urn",
            "location": 53,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Resolver.__init__": {
            "name": "__init__",
            "location": 67,
            "return": [],
            "arguments": {
                "self": [],
                "manager": []
            }
        },
        "Resolver.get_alias_from_url": {
            "name": "get_alias_from_url",
            "location": 71,
            "return": [],
            "arguments": {
                "cls": [],
                "url": []
            }
        },
        "Resolver.catalogue": {
            "name": "catalogue",
            "location": 90,
            "return": [],
            "arguments": {
                "cls": [],
                "web_client": []
            }
        },
        "BaseResolver.__init__": {
            "name": "__init__",
            "location": 100,
            "return": [],
            "arguments": {
                "self": [],
                "manager": []
            }
        },
        "BaseResolver.__init_subclass__": {
            "name": "__init_subclass__",
            "location": 103,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "BaseResolver.get_alias_from_url": {
            "name": "get_alias_from_url",
            "location": 114,
            "return": [],
            "arguments": {
                "cls": [],
                "url": []
            }
        },
        "CfCoreResolver.get_alias_from_url": {
            "name": "get_alias_from_url",
            "location": 381,
            "return": [],
            "arguments": {
                "cls": [],
                "url": []
            }
        },
        "CfCoreResolver._get_access_token": {
            "name": "_get_access_token",
            "location": 390,
            "return": [],
            "arguments": {
                "cls": [],
                "global_config": []
            }
        },
        "WowiResolver._timestamp_to_datetime": {
            "name": "_timestamp_to_datetime",
            "location": 680,
            "return": [],
            "arguments": {
                "cls": [],
                "timestamp": []
            }
        },
        "WowiResolver.get_alias_from_url": {
            "name": "get_alias_from_url",
            "location": 684,
            "return": [],
            "arguments": {
                "cls": [],
                "url": []
            }
        },
        "TukuiResolver.get_alias_from_url": {
            "name": "get_alias_from_url",
            "location": 850,
            "return": [],
            "arguments": {
                "cls": [],
                "url": []
            }
        },
        "GithubResolver.get_alias_from_url": {
            "name": "get_alias_from_url",
            "location": 1041,
            "return": [],
            "arguments": {
                "cls": [],
                "url": []
            }
        },
        "GithubResolver._make_auth_headers": {
            "name": "_make_auth_headers",
            "location": 1047,
            "return": [],
            "arguments": {
                "access_token": []
            }
        },
        "CfCoreResolver.catalogue.excise_flavours": {
            "name": "excise_flavours",
            "location": 552,
            "return": [],
            "arguments": {
                "files": []
            }
        },
        "CfCoreResolver.catalogue.excise_folders": {
            "name": "excise_folders",
            "location": 563,
            "return": [],
            "arguments": {
                "files": []
            }
        },
        "CfCoreResolver.resolve_one.make_filter": {
            "name": "make_filter",
            "location": 465,
            "return": [],
            "arguments": {}
        },
        "CfCoreResolver.resolve_one.make_filter.is_not_libless": {
            "name": "is_not_libless",
            "location": 466,
            "return": [],
            "arguments": {
                "f": []
            }
        },
        "CfCoreResolver.resolve_one.make_filter.supports_flavour": {
            "name": "supports_flavour",
            "location": 477,
            "return": [],
            "arguments": {
                "f": []
            }
        },
        "CfCoreResolver.resolve_one.make_filter.is_stable_release": {
            "name": "is_stable_release",
            "location": 486,
            "return": [],
            "arguments": {
                "f": []
            }
        }
    },
    "instawow-main/src/instawow/results.py": {
        "ManagerResult.message": {
            "name": "message",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PkgInstalled.__init__": {
            "name": "__init__",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pkg": [
                    "str",
                    "int"
                ]
            }
        },
        "PkgInstalled.message": {
            "name": "message",
            "location": 28,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "PkgUpdated.__init__": {
            "name": "__init__",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "old_pkg": [
                    "int",
                    "dict[str, tuple[typing.Union[str,str]]]",
                    "str",
                    "None"
                ],
                "new_pkg": [
                    "str",
                    "typing.Type",
                    "tuple[typing.Union[int,int]]",
                    "float"
                ]
            }
        },
        "PkgUpdated.message": {
            "name": "message",
            "location": 39,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "PkgRemoved.__init__": {
            "name": "__init__",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "old_pkg": [
                    "int",
                    "str"
                ]
            }
        },
        "PkgRemoved.message": {
            "name": "message",
            "location": 49,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "ManagerError.message": {
            "name": "message",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PkgAlreadyInstalled.message": {
            "name": "message",
            "location": 63,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "PkgConflictsWithInstalled.__init__": {
            "name": "__init__",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "conflicting_pkgs": [
                    "int",
                    "float"
                ]
            }
        },
        "PkgConflictsWithInstalled.message": {
            "name": "message",
            "location": 73,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "PkgConflictsWithUnreconciled.__init__": {
            "name": "__init__",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "folders": [
                    "int",
                    "float"
                ]
            }
        },
        "PkgConflictsWithUnreconciled.message": {
            "name": "message",
            "location": 87,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "PkgNonexistent.message": {
            "name": "message",
            "location": 94,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "PkgFileUnavailable.__init__": {
            "name": "__init__",
            "location": 99,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "custom_message": [
                    "None",
                    "str",
                    "int",
                    "float"
                ]
            }
        },
        "PkgFileUnavailable.message": {
            "name": "message",
            "location": 104,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "PkgNotInstalled.message": {
            "name": "message",
            "location": 110,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "PkgSourceInvalid.message": {
            "name": "message",
            "location": 116,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "PkgUpToDate.__init__": {
            "name": "__init__",
            "location": 121,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "is_pinned": [
                    "bool",
                    "typing.Any",
                    "None",
                    "list[str]",
                    "typing.Callable[str, bool]",
                    "float",
                    "tuple[typing.Union[float,float]]"
                ]
            }
        },
        "PkgUpToDate.message": {
            "name": "message",
            "location": 126,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "PkgStrategyUnsupported.__init__": {
            "name": "__init__",
            "location": 131,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "strategy": [
                    "int",
                    "float"
                ]
            }
        },
        "PkgStrategyUnsupported.message": {
            "name": "message",
            "location": 136,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "InternalError.message": {
            "name": "message",
            "location": 144,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "instawow-main/src/instawow/utils.py": {
        "fill": {
            "name": "fill",
            "location": 73,
            "return": [],
            "arguments": {
                "it": [],
                "fill": [],
                "number": []
            }
        },
        "bucketise": {
            "name": "bucketise",
            "location": 78,
            "return": [],
            "arguments": {
                "iterable": [],
                "key": []
            }
        },
        "chain_dict": {
            "name": "chain_dict",
            "location": 86,
            "return": [],
            "arguments": {
                "keys": [],
                "default": []
            }
        },
        "uniq": {
            "name": "uniq",
            "location": 93,
            "return": [],
            "arguments": {
                "it": []
            }
        },
        "all_eq": {
            "name": "all_eq",
            "location": 98,
            "return": [],
            "arguments": {
                "it": []
            }
        },
        "merge_intersecting_sets": {
            "name": "merge_intersecting_sets",
            "location": 104,
            "return": [],
            "arguments": {
                "it": []
            }
        },
        "run_in_thread": {
            "name": "run_in_thread",
            "location": 152,
            "return": [],
            "arguments": {
                "fn": []
            }
        },
        "tabulate": {
            "name": "tabulate",
            "location": 161,
            "return": [],
            "arguments": {
                "rows": []
            }
        },
        "move": {
            "name": "move",
            "location": 187,
            "return": [],
            "arguments": {
                "src": [],
                "dest": []
            }
        },
        "trash": {
            "name": "trash",
            "location": 194,
            "return": [],
            "arguments": {
                "paths": []
            }
        },
        "shasum": {
            "name": "shasum",
            "location": 206,
            "return": [],
            "arguments": {}
        },
        "is_not_stale": {
            "name": "is_not_stale",
            "location": 213,
            "return": [],
            "arguments": {
                "path": [],
                "ttl": []
            }
        },
        "find_addon_zip_tocs": {
            "name": "find_addon_zip_tocs",
            "location": 220,
            "return": [],
            "arguments": {
                "names": []
            }
        },
        "make_zip_member_filter": {
            "name": "make_zip_member_filter",
            "location": 229,
            "return": [],
            "arguments": {
                "base_dirs": []
            }
        },
        "file_uri_to_path": {
            "name": "file_uri_to_path",
            "location": 239,
            "return": [],
            "arguments": {
                "file_uri": []
            }
        },
        "extract_byte_range_offset": {
            "name": "extract_byte_range_offset",
            "location": 252,
            "return": [],
            "arguments": {
                "content_range": []
            }
        },
        "normalise_names": {
            "name": "normalise_names",
            "location": 256,
            "return": [],
            "arguments": {
                "replace_delim": []
            }
        },
        "reveal_folder": {
            "name": "reveal_folder",
            "location": 267,
            "return": [],
            "arguments": {
                "path": []
            }
        },
        "TocReader.__init__": {
            "name": "__init__",
            "location": 33,
            "return": [],
            "arguments": {
                "self": [],
                "contents": []
            }
        },
        "TocReader.__getitem__": {
            "name": "__getitem__",
            "location": 42,
            "return": [],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "TocReader.from_addon_path": {
            "name": "from_addon_path",
            "location": 49,
            "return": [],
            "arguments": {
                "cls": [],
                "path": [],
                "suffix": []
            }
        },
        "cached_property.__init__": {
            "name": "__init__",
            "location": 54,
            "return": [],
            "arguments": {
                "self": [],
                "f": []
            }
        },
        "cached_property.__get__": {
            "name": "__get__",
            "location": 65,
            "return": [],
            "arguments": {
                "self": [],
                "o": [],
                "t": []
            }
        },
        "run_in_thread.wrapper": {
            "name": "wrapper",
            "location": 154,
            "return": [],
            "arguments": {}
        },
        "tabulate.apply_max_col_width": {
            "name": "apply_max_col_width",
            "location": 165,
            "return": [],
            "arguments": {
                "value": []
            }
        },
        "tabulate.calc_resultant_col_widths": {
            "name": "calc_resultant_col_widths",
            "location": 168,
            "return": [],
            "arguments": {
                "rows": []
            }
        },
        "make_zip_member_filter.is_subpath": {
            "name": "is_subpath",
            "location": 232,
            "return": [],
            "arguments": {
                "name": []
            }
        },
        "normalise_names.normalise": {
            "name": "normalise",
            "location": 261,
            "return": [],
            "arguments": {
                "value": []
            }
        }
    },
    "instawow-main/src/instawow/wa_updater.py": {
        "_merge_auras": {
            "name": "_merge_auras",
            "location": 96,
            "return": [
                "dict[, ]"
            ],
            "arguments": {
                "auras": [
                    "typing.Callable[, ]",
                    "set[str]"
                ]
            }
        },
        "WeakAura.from_lua_table": {
            "name": "from_lua_table",
            "location": 43,
            "return": [
                "str",
                "tuple[typing.Union[typing.Literal,typing.Literal,typing.Literal]]",
                "typing.Type"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "dict[str, list[str]]",
                    "dict[, ]",
                    "int",
                    "None"
                ],
                "lua_table": [
                    "dict[, ]"
                ]
            }
        },
        "Plateroo.from_lua_table": {
            "name": "from_lua_table",
            "location": 56,
            "return": [],
            "arguments": {
                "cls": [
                    "str",
                    "bool",
                    "typing.Iterable[tuple[typing.Union[typing.Hashable,typing.Any]]]"
                ],
                "lua_table": [
                    "str"
                ]
            }
        },
        "WeakAuras.from_lua_table": {
            "name": "from_lua_table",
            "location": 68,
            "return": [],
            "arguments": {
                "cls": [
                    "str",
                    "tuple[typing.Union[str,str]]"
                ],
                "lua_table": [
                    "str"
                ]
            }
        },
        "Plateroos.from_lua_table": {
            "name": "from_lua_table",
            "location": 82,
            "return": [],
            "arguments": {
                "cls": [
                    "str",
                    "list[str]",
                    "bool"
                ],
                "lua_table": [
                    "str"
                ]
            }
        },
        "WaCompanionBuilder.__init__": {
            "name": "__init__",
            "location": 134,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "manager": [
                    "str",
                    "typing.BinaryIO"
                ]
            }
        },
        "WaCompanionBuilder._get_access_token": {
            "name": "_get_access_token",
            "location": 142,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "WaCompanionBuilder.extract_auras": {
            "name": "extract_auras",
            "location": 146,
            "return": [],
            "arguments": {
                "model": [],
                "source": [
                    "bool",
                    "list[str]",
                    "typing.OrderedDict",
                    "str"
                ]
            }
        },
        "WaCompanionBuilder.extract_installed_auras": {
            "name": "extract_installed_auras",
            "location": 153,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "WaCompanionBuilder._checksum": {
            "name": "_checksum",
            "location": 219,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "WaCompanionBuilder._generate_addon": {
            "name": "_generate_addon",
            "location": 224,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "auras": [
                    "int",
                    "str",
                    "typing.Iterable['Context']"
                ]
            }
        },
        "WaCompanionBuilder.get_version": {
            "name": "get_version",
            "location": 347,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "WaCompanionBuilder._generate_addon.write_tpl": {
            "name": "write_tpl",
            "location": 242,
            "return": [
                "None"
            ],
            "arguments": {
                "filename": [],
                "ctx": []
            }
        }
    },
    "instawow-main/src/instawow/_custom_slpp.py": {
        "loads": {
            "name": "loads",
            "location": 271,
            "return": [],
            "arguments": {
                "s": []
            }
        },
        "_SLPP.__init__": {
            "name": "__init__",
            "location": 54,
            "return": [],
            "arguments": {
                "self": [],
                "text": []
            }
        },
        "_SLPP._next": {
            "name": "_next",
            "location": 58,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_SLPP._next_eq": {
            "name": "_next_eq",
            "location": 61,
            "return": [],
            "arguments": {
                "self": [],
                "includes": []
            }
        },
        "_SLPP._next_not_eq": {
            "name": "_next_not_eq",
            "location": 70,
            "return": [],
            "arguments": {
                "self": [],
                "excludes": []
            }
        },
        "_SLPP._decode_table": {
            "name": "_decode_table",
            "location": 79,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_SLPP._decode_string": {
            "name": "_decode_string",
            "location": 144,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_SLPP._decode_bare_word": {
            "name": "_decode_bare_word",
            "location": 178,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_SLPP._decode_number": {
            "name": "_decode_number",
            "location": 197,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_SLPP.decode": {
            "name": "decode",
            "location": 257,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_SLPP._decode_number.get_digits": {
            "name": "get_digits",
            "location": 198,
            "return": [],
            "arguments": {}
        }
    },
    "instawow-main/src/instawow/_deferred_types.py": {},
    "instawow-main/src/instawow/_import_wrapper.py": {
        "__getattr__": {
            "name": "__getattr__",
            "location": 7,
            "return": [
                "str",
                "dict[str, list[str]]",
                "dict[, ]"
            ],
            "arguments": {
                "name": [
                    "str"
                ]
            }
        }
    },
    "instawow-main/src/instawow/_version.py": {},
    "instawow-main/src/instawow/__init__.py": {},
    "instawow-main/src/instawow/__main__.py": {},
    "instawow-main/src/instawow/migrations/env.py": {
        "run_offline": {
            "name": "run_offline",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "run_online": {
            "name": "run_online",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "main": {
            "name": "main",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "instawow-main/src/instawow/migrations/__init__.py": {},
    "instawow-main/src/instawow/migrations/versions/2bfcfe824fe0_remove_pkgoptions_strategy_constraint.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "instawow-main/src/instawow/migrations/versions/3b37d2faccd2_add_missing_unique_constraint.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "instawow-main/src/instawow/migrations/versions/43aa3610e92a_populate_version_table_from_installed_pkgs.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "instawow-main/src/instawow/migrations/versions/58a8306c3a5b_make_basenames.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "instawow-main/src/instawow/migrations/versions/7204944522b1_add_dependency_table.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "instawow-main/src/instawow/migrations/versions/75f69831f74f_replace_curse_strategies.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "instawow-main/src/instawow/migrations/versions/764fa963cc71_add_changelog_column.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "instawow-main/src/instawow/migrations/versions/8f6ba74cfa82_rename_origin_column.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "instawow-main/src/instawow/migrations/versions/9b8df9661cdb_add_pkg_version_log_fk.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "instawow-main/src/instawow/migrations/versions/d3f542de5ff4_add_version_log_table.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "instawow-main/src/instawow/migrations/versions/e13430219249_add_cascade.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "instawow-main/src/instawow/migrations/versions/e4921edb1154_replace_uq_with_pk_constraint.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "instawow-main/src/instawow/migrations/versions/e4ae835a34be_change_pkg_options_strategy_checks.py": {
        "_migrate": {
            "name": "_migrate",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "new_type": [
                    "str",
                    "None",
                    "dict[str, typing.Any]",
                    "bool"
                ],
                "old_val": [
                    "bool"
                ],
                "new_val": [
                    "bool"
                ]
            }
        }
    },
    "instawow-main/src/instawow/migrations/versions/f3f9957de30c_drop_file_id.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "instawow-main/src/instawow/migrations/versions/__init__.py": {},
    "instawow-main/src/instawow/wa_templates/__init__.py": {},
    "instawow-main/tests/conftest.py": {
        "pytest_addoption": {
            "name": "pytest_addoption",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "parser": []
            }
        },
        "should_mock": {
            "name": "should_mock",
            "location": 30,
            "return": [],
            "arguments": {
                "fn": [
                    "bool",
                    "str",
                    "dict[str, typing.BinaryIO]",
                    "float"
                ]
            }
        },
        "load_fixture": {
            "name": "load_fixture",
            "location": 48,
            "return": [],
            "arguments": {
                "filename": [
                    "str",
                    "typing.Callable[pathlib.Path, int]",
                    "None",
                    "bytes",
                    "tuple[typing.Union[int,int]]"
                ]
            }
        },
        "load_json_fixture": {
            "name": "load_json_fixture",
            "location": 53,
            "return": [],
            "arguments": {
                "filename": [
                    "str",
                    "list[str]"
                ]
            }
        },
        "make_addon_zip": {
            "name": "make_addon_zip",
            "location": 58,
            "return": [],
            "arguments": {}
        },
        "iw_global_config_values": {
            "name": "iw_global_config_values",
            "location": 68,
            "return": [
                "dict[typing.Text, _AccessTokens]"
            ],
            "arguments": {
                "tmp_path": []
            }
        },
        "iw_config_values": {
            "name": "iw_config_values",
            "location": 77,
            "return": [
                "dict[typing.Text, typing.Text]"
            ],
            "arguments": {
                "request": [
                    "str"
                ],
                "tmp_path": []
            }
        },
        "iw_config": {
            "name": "iw_config",
            "location": 84,
            "return": [],
            "arguments": {
                "iw_config_values": [
                    "str",
                    "None"
                ],
                "iw_global_config_values": [
                    "str",
                    "dict[str, list[]]"
                ]
            }
        },
        "iw_manager": {
            "name": "iw_manager",
            "location": 96,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "iw_config": [
                    "dict[, ]",
                    "typing.Mapping",
                    "dict[str, typing.Any]"
                ],
                "iw_web_client": [
                    "str",
                    "typing.Callable[, ]"
                ]
            }
        },
        "iw_mock_aiohttp_requests": {
            "name": "iw_mock_aiohttp_requests",
            "location": 105,
            "return": [
                "None"
            ],
            "arguments": {
                "aresponses": []
            }
        },
        "iw_mock_aiohttp_raidfademore_requests": {
            "name": "iw_mock_aiohttp_raidfademore_requests",
            "location": 345,
            "return": [
                "None"
            ],
            "arguments": {
                "aresponses": [
                    "list[str]"
                ]
            }
        },
        "should_mock.wrapper": {
            "name": "wrapper",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "request": []
            }
        }
    },
    "instawow-main/tests/test_available_sources.py": {
        "test_get_alias_from_url": {
            "name": "test_get_alias_from_url",
            "location": 230,
            "return": [
                "None"
            ],
            "arguments": {
                "resolver": [
                    "str",
                    "typing.Type"
                ],
                "url": [
                    "str",
                    "typing.Type"
                ],
                "extracted_alias": [
                    "str",
                    "typing.Type"
                ]
            }
        }
    },
    "instawow-main/tests/test_cli.py": {
        "feed_pt": {
            "name": "feed_pt",
            "location": 24,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {}
        },
        "run": {
            "name": "run",
            "location": 30,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "monkeypatch": [],
                "event_loop": [],
                "iw_config": []
            }
        },
        "install_molinari_and_run": {
            "name": "install_molinari_and_run",
            "location": 44,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "run": []
            }
        },
        "pretend_install_molinari_and_run": {
            "name": "pretend_install_molinari_and_run",
            "location": 52,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "iw_config": [],
                "run": []
            }
        },
        "test_valid_pkg_lifecycle": {
            "name": "test_valid_pkg_lifecycle",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "run": [],
                "alias": []
            }
        },
        "test_nonexistent_pkg_lifecycle": {
            "name": "test_nonexistent_pkg_lifecycle",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {
                "run": [],
                "alias": []
            }
        },
        "test_invalid_source_lifecycle": {
            "name": "test_invalid_source_lifecycle",
            "location": 99,
            "return": [
                "None"
            ],
            "arguments": {
                "run": [],
                "alias": []
            }
        },
        "test_reconciled_folder_conflict_on_install": {
            "name": "test_reconciled_folder_conflict_on_install",
            "location": 108,
            "return": [
                "None"
            ],
            "arguments": {
                "run": []
            }
        },
        "test_unreconciled_folder_conflict_on_install": {
            "name": "test_unreconciled_folder_conflict_on_install",
            "location": 119,
            "return": [
                "None"
            ],
            "arguments": {
                "iw_config": [],
                "run": []
            }
        },
        "test_keep_folders_on_remove": {
            "name": "test_keep_folders_on_remove",
            "location": 133,
            "return": [
                "None"
            ],
            "arguments": {
                "iw_config": [],
                "install_molinari_and_run": []
            }
        },
        "test_version_strategy_lifecycle": {
            "name": "test_version_strategy_lifecycle",
            "location": 144,
            "return": [
                "None"
            ],
            "arguments": {
                "run": []
            }
        },
        "test_install_options": {
            "name": "test_install_options",
            "location": 169,
            "return": [
                "None"
            ],
            "arguments": {
                "run": []
            }
        },
        "test_install_option_order_is_respected": {
            "name": "test_install_option_order_is_respected",
            "location": 191,
            "return": [
                "None"
            ],
            "arguments": {
                "run": []
            }
        },
        "test_install_argument_is_not_required": {
            "name": "test_install_argument_is_not_required",
            "location": 213,
            "return": [
                "None"
            ],
            "arguments": {
                "run": []
            }
        },
        "test_install_invalid_defn": {
            "name": "test_install_invalid_defn",
            "location": 229,
            "return": [
                "None"
            ],
            "arguments": {
                "run": []
            }
        },
        "test_configure__show_active_profile": {
            "name": "test_configure__show_active_profile",
            "location": 237,
            "return": [
                "None"
            ],
            "arguments": {
                "iw_config": [],
                "run": []
            }
        },
        "test_configure__create_new_profile": {
            "name": "test_configure__create_new_profile",
            "location": 245,
            "return": [
                "None"
            ],
            "arguments": {
                "feed_pt": [],
                "iw_config": [],
                "run": [],
                "command": []
            }
        },
        "test_configure__update_existing_profile_with_opts": {
            "name": "test_configure__update_existing_profile_with_opts",
            "location": 262,
            "return": [
                "None"
            ],
            "arguments": {
                "feed_pt": [],
                "iw_config": [],
                "run": []
            }
        },
        "test_rollback__pkg_not_installed": {
            "name": "test_rollback__pkg_not_installed",
            "location": 276,
            "return": [
                "None"
            ],
            "arguments": {
                "run": [],
                "options": []
            }
        },
        "test_rollback__unsupported": {
            "name": "test_rollback__unsupported",
            "location": 287,
            "return": [
                "None"
            ],
            "arguments": {
                "run": [],
                "options": []
            }
        },
        "test_rollback__single_version": {
            "name": "test_rollback__single_version",
            "location": 298,
            "return": [
                "None"
            ],
            "arguments": {
                "run": []
            }
        },
        "test_rollback__multiple_versions": {
            "name": "test_rollback__multiple_versions",
            "location": 307,
            "return": [
                "None"
            ],
            "arguments": {
                "feed_pt": [],
                "run": []
            }
        },
        "test_rollback__multiple_versions_promptless": {
            "name": "test_rollback__multiple_versions_promptless",
            "location": 323,
            "return": [
                "None"
            ],
            "arguments": {
                "run": []
            }
        },
        "test_rollback__rollback_multiple_versions": {
            "name": "test_rollback__rollback_multiple_versions",
            "location": 338,
            "return": [
                "None"
            ],
            "arguments": {
                "feed_pt": [],
                "run": [],
                "options": []
            }
        },
        "test_rollback__cannot_use_version_with_undo": {
            "name": "test_rollback__cannot_use_version_with_undo",
            "location": 355,
            "return": [
                "None"
            ],
            "arguments": {
                "run": []
            }
        },
        "test_reconcile__list_unreconciled": {
            "name": "test_reconcile__list_unreconciled",
            "location": 363,
            "return": [
                "None"
            ],
            "arguments": {
                "pretend_install_molinari_and_run": []
            }
        },
        "test_reconcile_leftovers": {
            "name": "test_reconcile_leftovers",
            "location": 375,
            "return": [
                "None"
            ],
            "arguments": {
                "feed_pt": [],
                "pretend_install_molinari_and_run": []
            }
        },
        "test_reconcile__auto_reconcile": {
            "name": "test_reconcile__auto_reconcile",
            "location": 389,
            "return": [
                "None"
            ],
            "arguments": {
                "pretend_install_molinari_and_run": []
            }
        },
        "test_reconcile__abort_interactive_reconciliation": {
            "name": "test_reconcile__abort_interactive_reconciliation",
            "location": 400,
            "return": [
                "None"
            ],
            "arguments": {
                "feed_pt": [],
                "pretend_install_molinari_and_run": []
            }
        },
        "test_reconcile__complete_interactive_reconciliation": {
            "name": "test_reconcile__complete_interactive_reconciliation",
            "location": 408,
            "return": [
                "None"
            ],
            "arguments": {
                "feed_pt": [],
                "pretend_install_molinari_and_run": []
            }
        },
        "test_reconcile__reconciliation_complete": {
            "name": "test_reconcile__reconciliation_complete",
            "location": 423,
            "return": [
                "None"
            ],
            "arguments": {
                "run": []
            }
        },
        "test_reconcile__rereconcile": {
            "name": "test_reconcile__rereconcile",
            "location": 429,
            "return": [
                "None"
            ],
            "arguments": {
                "feed_pt": [],
                "install_molinari_and_run": []
            }
        },
        "test_reconcile__cannot_use_auto_with_installed": {
            "name": "test_reconcile__cannot_use_auto_with_installed",
            "location": 444,
            "return": [
                "None"
            ],
            "arguments": {
                "run": []
            }
        },
        "test_search__no_results": {
            "name": "test_search__no_results",
            "location": 452,
            "return": [
                "None"
            ],
            "arguments": {
                "run": []
            }
        },
        "test_search__exit_without_selecting": {
            "name": "test_search__exit_without_selecting",
            "location": 458,
            "return": [
                "None"
            ],
            "arguments": {
                "feed_pt": [],
                "run": []
            }
        },
        "test_search__exit_after_selection": {
            "name": "test_search__exit_after_selection",
            "location": 466,
            "return": [
                "None"
            ],
            "arguments": {
                "feed_pt": [],
                "run": []
            }
        },
        "test_search__install_one": {
            "name": "test_search__install_one",
            "location": 474,
            "return": [
                "None"
            ],
            "arguments": {
                "feed_pt": [],
                "run": []
            }
        },
        "test_search__install_multiple_conflicting": {
            "name": "test_search__install_multiple_conflicting",
            "location": 487,
            "return": [
                "None"
            ],
            "arguments": {
                "feed_pt": [],
                "run": []
            }
        },
        "test_changelog_output": {
            "name": "test_changelog_output",
            "location": 503,
            "return": [
                "None"
            ],
            "arguments": {
                "install_molinari_and_run": []
            }
        },
        "test_changelog_output_no_convert": {
            "name": "test_changelog_output_no_convert",
            "location": 514,
            "return": [
                "None"
            ],
            "arguments": {
                "install_molinari_and_run": []
            }
        },
        "test_argless_changelog_output": {
            "name": "test_argless_changelog_output",
            "location": 522,
            "return": [
                "None"
            ],
            "arguments": {
                "install_molinari_and_run": []
            }
        },
        "test_argless_changelog_output_no_convert": {
            "name": "test_argless_changelog_output_no_convert",
            "location": 533,
            "return": [
                "None"
            ],
            "arguments": {
                "install_molinari_and_run": []
            }
        },
        "test_exit_codes_with_substr_match": {
            "name": "test_exit_codes_with_substr_match",
            "location": 550,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": [],
                "install_molinari_and_run": [],
                "command": [],
                "exit_code": []
            }
        },
        "test_can_list_with_substr_match": {
            "name": "test_can_list_with_substr_match",
            "location": 560,
            "return": [
                "None"
            ],
            "arguments": {
                "install_molinari_and_run": []
            }
        },
        "test_json_export": {
            "name": "test_json_export",
            "location": 570,
            "return": [
                "None"
            ],
            "arguments": {
                "install_molinari_and_run": []
            }
        },
        "test_show_version": {
            "name": "test_show_version",
            "location": 577,
            "return": [
                "None"
            ],
            "arguments": {
                "run": []
            }
        },
        "test_plugin_hook_command_can_be_invoked": {
            "name": "test_plugin_hook_command_can_be_invoked",
            "location": 583,
            "return": [
                "None"
            ],
            "arguments": {
                "run": []
            }
        }
    },
    "instawow-main/tests/test_config.py": {
        "test_env_vars_have_prio": {
            "name": "test_env_vars_have_prio",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": [],
                "iw_global_config_values": [
                    "str"
                ],
                "iw_config_values": [
                    "str"
                ]
            }
        },
        "test_config_dir_is_populated": {
            "name": "test_config_dir_is_populated",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "iw_global_config_values": [
                    "str",
                    "list[str]"
                ],
                "iw_config_values": [
                    "str"
                ]
            }
        },
        "test_read_profile_from_nonexistent_config_dir_raises": {
            "name": "test_read_profile_from_nonexistent_config_dir_raises",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "iw_global_config_values": [
                    "str"
                ]
            }
        },
        "test_init_with_nonexistent_addon_dir_raises": {
            "name": "test_init_with_nonexistent_addon_dir_raises",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "iw_global_config_values": [
                    "str",
                    "dict[, ]"
                ],
                "iw_config_values": [
                    "str",
                    "typing.Mapping"
                ]
            }
        },
        "test_default_config_dir_is_platform_appropriate": {
            "name": "test_default_config_dir_is_platform_appropriate",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": []
            }
        },
        "test_default_config_dir_is_unplatform_appropriate": {
            "name": "test_default_config_dir_is_unplatform_appropriate",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": []
            }
        },
        "test_can_infer_flavour_from_path": {
            "name": "test_can_infer_flavour_from_path",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_can_list_profiles": {
            "name": "test_can_list_profiles",
            "location": 102,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": [],
                "iw_global_config_values": [
                    "str"
                ],
                "iw_config_values": [
                    "str"
                ]
            }
        },
        "test_can_delete_profile": {
            "name": "test_can_delete_profile",
            "location": 117,
            "return": [
                "None"
            ],
            "arguments": {
                "iw_global_config_values": [
                    "str",
                    "dict[, ]"
                ],
                "iw_config_values": [
                    "str"
                ]
            }
        }
    },
    "instawow-main/tests/test_github_oauth_flow.py": {},
    "instawow-main/tests/test_github_zip_parsing.py": {
        "package_json_less_addon": {
            "name": "package_json_less_addon",
            "location": 57,
            "return": [
                "dict[typing.Text, ]"
            ],
            "arguments": {
                "request": [
                    "dict[, ]"
                ]
            }
        }
    },
    "instawow-main/tests/test_json_rpc_api.py": {},
    "instawow-main/tests/test_manager.py": {},
    "instawow-main/tests/test_matchers.py": {
        "write_addons": {
            "name": "write_addons",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "iw_manager": [
                    "typing.Callable[, ]",
                    "bool",
                    "list[str]"
                ]
            }
        },
        "molinari": {
            "name": "molinari",
            "location": 30,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "iw_manager": [
                    "bool",
                    "str",
                    "dict[, ]"
                ]
            }
        },
        "test_reconcile_addon_folder_is_comparable_to_str": {
            "name": "test_reconcile_addon_folder_is_comparable_to_str",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "molinari": [
                    "int"
                ]
            }
        },
        "test_reconcile_addon_folder_can_extract_defns_from_toc": {
            "name": "test_reconcile_addon_folder_can_extract_defns_from_toc",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "molinari": [
                    "int"
                ]
            }
        }
    },
    "instawow-main/tests/test_slpp.py": {
        "test_numbers": {
            "name": "test_numbers",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_bool": {
            "name": "test_bool",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_bool_keys_are_not_nums": {
            "name": "test_bool_keys_are_not_nums",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_nil": {
            "name": "test_nil",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_simple_table": {
            "name": "test_simple_table",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_string_with_and_without_escape": {
            "name": "test_string_with_and_without_escape",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_table_keys": {
            "name": "test_table_keys",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_table_palooza": {
            "name": "test_table_palooza",
            "location": 102,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_table_key_overrides": {
            "name": "test_table_key_overrides",
            "location": 127,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "instawow-main/tests/test_utils.py": {
        "fake_addon": {
            "name": "fake_addon",
            "location": 23,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {}
        },
        "test_find_addon_zip_tocs_can_find_explicit_dirs": {
            "name": "test_find_addon_zip_tocs_can_find_explicit_dirs",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_find_addon_zip_tocs_can_find_implicit_dirs": {
            "name": "test_find_addon_zip_tocs_can_find_implicit_dirs",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_find_addon_zip_tocs_discards_tocless_paths": {
            "name": "test_find_addon_zip_tocs_discards_tocless_paths",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_find_addon_zip_tocs_discards_mismatched_tocs": {
            "name": "test_find_addon_zip_tocs_discards_mismatched_tocs",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_find_addon_zip_tocs_accepts_multitoc": {
            "name": "test_find_addon_zip_tocs_accepts_multitoc",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_find_addon_zip_tocs_toc_is_case_insensitive": {
            "name": "test_find_addon_zip_tocs_toc_is_case_insensitive",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "ext": [
                    "typing.Callable[, ]",
                    "str"
                ]
            }
        },
        "test_make_zip_member_filter_discards_names_with_prefix_not_in_dirs": {
            "name": "test_make_zip_member_filter_discards_names_with_prefix_not_in_dirs",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_loading_toc_from_addon_path": {
            "name": "test_loading_toc_from_addon_path",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "fake_addon": []
            }
        },
        "test_parsing_toc_entries": {
            "name": "test_parsing_toc_entries",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "fake_addon": []
            }
        },
        "test_toc_entry_indexing": {
            "name": "test_toc_entry_indexing",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "fake_addon": []
            }
        },
        "test_toc_entry_multiindexing": {
            "name": "test_toc_entry_multiindexing",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "fake_addon": []
            }
        },
        "test_bucketise_bucketises_by_putting_things_in_a_bucketing_bucket": {
            "name": "test_bucketise_bucketises_by_putting_things_in_a_bucketing_bucket",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_tabulate_spits_out_ascii_table": {
            "name": "test_tabulate_spits_out_ascii_table",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {
                "fake_addon": []
            }
        },
        "test_merge_intersecting_sets_in_noncontiguous_collection": {
            "name": "test_merge_intersecting_sets_in_noncontiguous_collection",
            "location": 104,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_file_uri_to_path_posix_leading_slash_is_preserved": {
            "name": "test_file_uri_to_path_posix_leading_slash_is_preserved",
            "location": 122,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_file_uri_to_path_win32_leading_slash_is_stripped": {
            "name": "test_file_uri_to_path_win32_leading_slash_is_stripped",
            "location": 129,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_generator_in_run_in_thread_does_not_lock_up_loop.foo": {
            "name": "foo",
            "location": 136,
            "return": [
                "typing.Generator[typing.Text]"
            ],
            "arguments": {}
        }
    },
    "instawow-main/tests/test_wa_updater.py": {
        "wa_saved_vars": {
            "name": "wa_saved_vars",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "iw_manager": [
                    "typing.Callable[typing.Mapping, collections.abc.Awaitable[]]",
                    "bool",
                    "list[dict[, ]]"
                ]
            }
        },
        "builder": {
            "name": "builder",
            "location": 32,
            "return": [
                "typing.Generator[WaCompanionBuilder]"
            ],
            "arguments": {
                "iw_manager": [
                    "int",
                    "str",
                    "None"
                ]
            }
        },
        "test_can_parse_empty_displays_table": {
            "name": "test_can_parse_empty_displays_table",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "builder": [
                    "typing.Callable[, ]",
                    "dict[, ]",
                    "str",
                    "bool",
                    "typing.Type"
                ]
            }
        },
        "test_urlless_display_is_discarded": {
            "name": "test_urlless_display_is_discarded",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "builder": [
                    "dict[, ]",
                    "typing.Callable[, ]",
                    "str",
                    "bool"
                ]
            }
        },
        "test_can_parse_minimal_wago_display": {
            "name": "test_can_parse_minimal_wago_display",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "builder": [
                    "list[]"
                ]
            }
        },
        "test_url_host_not_wago_display_is_discarded": {
            "name": "test_url_host_not_wago_display_is_discarded",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {
                "builder": [
                    "dict[, ]",
                    "typing.Callable[, ]",
                    "str",
                    "list[str]",
                    "typing.Sequence[str]",
                    "bool"
                ]
            }
        },
        "test_can_build_addon_with_empty_seq": {
            "name": "test_can_build_addon_with_empty_seq",
            "location": 120,
            "return": [
                "None"
            ],
            "arguments": {
                "builder": []
            }
        },
        "test_build_is_reproducible": {
            "name": "test_build_is_reproducible",
            "location": 130,
            "return": [
                "None"
            ],
            "arguments": {
                "builder": []
            }
        },
        "test_changelog_is_generated": {
            "name": "test_changelog_is_generated",
            "location": 137,
            "return": [
                "None"
            ],
            "arguments": {
                "builder": []
            }
        }
    },
    "instawow-main/tests/plugin/instawow_test_plugin.py": {
        "foo": {
            "name": "foo",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "instawow_add_commands": {
            "name": "instawow_add_commands",
            "location": 42,
            "return": [
                "tuple[]"
            ],
            "arguments": {}
        },
        "instawow_add_resolvers": {
            "name": "instawow_add_resolvers",
            "location": 47,
            "return": [
                "tuple[MyResolver]"
            ],
            "arguments": {}
        }
    },
    "instawow-main/tests/plugin/setup.py": {}
}
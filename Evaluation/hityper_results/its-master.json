{
    "its-master/setup.py": {},
    "its-master/its/application.py": {
        "before_send": {
            "name": "before_send",
            "location": 46,
            "return": [
                "None",
                "str"
            ],
            "arguments": {
                "event": [
                    "str"
                ],
                "hint": [
                    "str",
                    "bytes"
                ]
            }
        },
        "_normalize_query": {
            "name": "_normalize_query",
            "location": 64,
            "return": [],
            "arguments": {
                "query": []
            }
        },
        "process_request": {
            "name": "process_request",
            "location": 77,
            "return": [
                "Response"
            ],
            "arguments": {
                "namespace": [
                    "str",
                    "None"
                ],
                "query": [
                    "int",
                    "str"
                ],
                "filename": [
                    "str",
                    "None",
                    "list[str]",
                    "dict[, ]",
                    "memoryview"
                ]
            }
        },
        "process_old_request": {
            "name": "process_old_request",
            "location": 138,
            "return": [],
            "arguments": {
                "transform": [
                    "int"
                ],
                "width": [
                    "None",
                    "int",
                    "str",
                    "float"
                ],
                "height": [
                    "None",
                    "int",
                    "str",
                    "list[str]"
                ],
                "ext": [
                    "None",
                    "str",
                    "bool"
                ],
                "x_coordinate": [
                    "None",
                    "int",
                    "str"
                ],
                "y_coordinate": [
                    "None",
                    "int",
                    "str",
                    "list[str]"
                ]
            }
        },
        "upload_image": {
            "name": "upload_image",
            "location": 169,
            "return": [],
            "arguments": {
                "request": [
                    "typing.Iterator"
                ],
                "namespace": [
                    "str",
                    "dict[, ]"
                ]
            }
        },
        "transform_image": {
            "name": "transform_image",
            "location": 193,
            "return": [
                "str",
                "tuple[typing.Union[str,str]]",
                "typing.Iterator",
                "None"
            ],
            "arguments": {
                "namespace": [
                    "str",
                    "dict[str, str]",
                    "dict[, ]",
                    "typing.Sequence[int]",
                    "bytes"
                ],
                "filename": [
                    "str",
                    "dict[, ]",
                    "None"
                ]
            }
        },
        "crop": {
            "name": "crop",
            "location": 207,
            "return": [
                "str",
                "tuple[typing.Union[str,str]]",
                "typing.Iterator",
                "None"
            ],
            "arguments": {
                "namespace": [
                    "int",
                    "str",
                    "None"
                ],
                "filename": [
                    "int",
                    "str",
                    "None"
                ],
                "width": [
                    "int"
                ],
                "height": [
                    "int"
                ],
                "ext": [
                    "int"
                ]
            }
        },
        "focalcrop": {
            "name": "focalcrop",
            "location": 217,
            "return": [
                "str",
                "tuple[typing.Union[str,str]]",
                "typing.Iterator",
                "None"
            ],
            "arguments": {
                "namespace": [
                    "str",
                    "int",
                    "float",
                    "None"
                ],
                "filename": [
                    "str",
                    "int",
                    "float",
                    "None"
                ],
                "width": [
                    "int"
                ],
                "height": [
                    "int"
                ],
                "x_coordinate": [
                    "int"
                ],
                "y_coordinate": [
                    "int"
                ],
                "ext": [
                    "int"
                ]
            }
        },
        "fit": {
            "name": "fit",
            "location": 232,
            "return": [
                "str",
                "tuple[typing.Union[str,str]]",
                "typing.Iterator",
                "None"
            ],
            "arguments": {
                "namespace": [
                    "int",
                    "str",
                    "None"
                ],
                "filename": [
                    "int",
                    "str",
                    "None"
                ],
                "width": [
                    "int"
                ],
                "height": [
                    "int"
                ],
                "ext": [
                    "int"
                ]
            }
        },
        "resize": {
            "name": "resize",
            "location": 242,
            "return": [
                "str",
                "tuple[typing.Union[str,str]]",
                "typing.Iterator",
                "None"
            ],
            "arguments": {
                "namespace": [
                    "str",
                    "bool"
                ],
                "filename": [
                    "str",
                    "bool"
                ],
                "ext": [
                    "int",
                    "float"
                ],
                "width": [
                    "None",
                    "int",
                    "float"
                ],
                "height": [
                    "None",
                    "int",
                    "float"
                ]
            }
        },
        "resize_passport": {
            "name": "resize_passport",
            "location": 260,
            "return": [],
            "arguments": {
                "namespace": [
                    "int",
                    "str",
                    "None"
                ],
                "filename": [
                    "int",
                    "str",
                    "None"
                ],
                "width": [
                    "int"
                ],
                "height": [
                    "int"
                ],
                "ext": [
                    "int"
                ]
            }
        },
        "fit_passport": {
            "name": "fit_passport",
            "location": 273,
            "return": [],
            "arguments": {
                "namespace": [
                    "int",
                    "str",
                    "None"
                ],
                "filename": [
                    "int",
                    "str",
                    "None"
                ],
                "width": [
                    "int"
                ],
                "height": [
                    "int"
                ],
                "ext": [
                    "int"
                ]
            }
        },
        "handle_transform_error": {
            "name": "handle_transform_error",
            "location": 283,
            "return": [
                "Response"
            ],
            "arguments": {
                "error": [
                    "OSError",
                    "str",
                    "dict[, ]"
                ]
            }
        }
    },
    "its-master/its/auth.py": {
        "check_token": {
            "name": "check_token",
            "location": 9,
            "return": [
                "bool"
            ],
            "arguments": {
                "namespace": [
                    "dict[, ]",
                    "int"
                ],
                "authorization_header": [
                    "str"
                ]
            }
        },
        "login_required": {
            "name": "login_required",
            "location": 19,
            "return": [],
            "arguments": {
                "f": [
                    "typing.Iterable[str]",
                    "typing.Callable[, ]"
                ]
            }
        },
        "login_required.decorated": {
            "name": "decorated",
            "location": 21,
            "return": [],
            "arguments": {}
        }
    },
    "its-master/its/errors.py": {
        "ITSError.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "error": [
                    "str"
                ]
            }
        }
    },
    "its-master/its/loader.py": {
        "loader": {
            "name": "loader",
            "location": 22,
            "return": [],
            "arguments": {
                "namespace": [
                    "str",
                    "dict[, ]",
                    "None",
                    "list[str]"
                ],
                "filename": [
                    "str"
                ]
            }
        }
    },
    "its-master/its/normalize.py": {
        "normalize": {
            "name": "normalize",
            "location": 12,
            "return": [],
            "arguments": {
                "image": []
            }
        }
    },
    "its-master/its/optimize.py": {
        "extract_pixels": {
            "name": "extract_pixels",
            "location": 19,
            "return": [
                "list[]"
            ],
            "arguments": {
                "img": []
            }
        },
        "has_transparent_background": {
            "name": "has_transparent_background",
            "location": 30,
            "return": [
                "bool"
            ],
            "arguments": {
                "img": [
                    "set[int]",
                    "list[str]",
                    "str",
                    "int",
                    "None"
                ]
            }
        },
        "identify_best_format": {
            "name": "identify_best_format",
            "location": 43,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "img": []
            }
        },
        "optimize": {
            "name": "optimize",
            "location": 59,
            "return": [],
            "arguments": {
                "img": [],
                "query": [
                    "str"
                ]
            }
        },
        "convert": {
            "name": "convert",
            "location": 102,
            "return": [],
            "arguments": {
                "img": [],
                "ext": [
                    "str"
                ],
                "tmp_file": [
                    "str",
                    "bytes"
                ]
            }
        },
        "optimize_jpg": {
            "name": "optimize_jpg",
            "location": 118,
            "return": [],
            "arguments": {
                "img": [],
                "tmp_file": [],
                "quality": []
            }
        },
        "optimize_png": {
            "name": "optimize_png",
            "location": 131,
            "return": [],
            "arguments": {
                "img": [],
                "tmp_file": [
                    "str"
                ],
                "quality": [
                    "int"
                ]
            }
        }
    },
    "its-master/its/pipeline.py": {
        "process_transforms": {
            "name": "process_transforms",
            "location": 19,
            "return": [
                "bool",
                "dict[str, object]",
                "str",
                "BytesIO",
                "dict[, ]"
            ],
            "arguments": {
                "img": [
                    "bool",
                    "dict[str, object]",
                    "str"
                ],
                "query": []
            }
        }
    },
    "its-master/its/settings.py": {},
    "its-master/its/util.py": {
        "get_redirect_location": {
            "name": "get_redirect_location",
            "location": 13,
            "return": [
                "str"
            ],
            "arguments": {
                "namespace": [
                    "str",
                    "bool"
                ],
                "query": [],
                "filename": [
                    "str",
                    "list[str]",
                    "typing.Type",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "validate_image_type": {
            "name": "validate_image_type",
            "location": 33,
            "return": [
                "str",
                "None",
                "typing.Sequence[typing.Any]"
            ],
            "arguments": {
                "image": [
                    "str",
                    "None",
                    "typing.Sequence[typing.Any]"
                ]
            }
        },
        "upload_to_s3": {
            "name": "upload_to_s3",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "image_file": [
                    "str",
                    "None"
                ],
                "bucket_name": [
                    "str",
                    "None"
                ],
                "key": [
                    "str",
                    "None"
                ]
            }
        },
        "slugify_filename": {
            "name": "slugify_filename",
            "location": 50,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "filename": [
                    "str",
                    "tuple[typing.Union[str,str,str,str,str]]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "get_random_string": {
            "name": "get_random_string",
            "location": 59,
            "return": [
                "str"
            ],
            "arguments": {
                "length": [
                    "int"
                ]
            }
        }
    },
    "its-master/its/wsgi.py": {},
    "its-master/its/__init__.py": {},
    "its-master/its/loaders/base.py": {
        "BaseLoader.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "arg": [
                    "int",
                    "float"
                ]
            }
        },
        "BaseLoader.load_image": {
            "name": "load_image",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "namespace": [
                    "str",
                    "list[str]",
                    "typing.Sequence[int]",
                    "typing.Optional[]",
                    "typing.Callable[, ]"
                ],
                "filename": [
                    "str",
                    "list[str]",
                    "typing.Sequence[int]",
                    "typing.Optional[]",
                    "typing.Callable[, ]"
                ]
            }
        },
        "BaseLoader.get_fileobj": {
            "name": "get_fileobj",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "namespace": [
                    "str",
                    "list[]"
                ],
                "filename": [
                    "str",
                    "list[]"
                ]
            }
        }
    },
    "its-master/its/loaders/file_system.py": {
        "FileSystemLoader.load_image": {
            "name": "load_image",
            "location": 23,
            "return": [],
            "arguments": {
                "namespace": [
                    "str"
                ],
                "filename": [
                    "str"
                ]
            }
        },
        "FileSystemLoader.get_fileobj": {
            "name": "get_fileobj",
            "location": 45,
            "return": [
                "BytesIO"
            ],
            "arguments": {
                "namespace": [
                    "str",
                    "int",
                    "None",
                    "dict[str, pathlib.Path]"
                ],
                "filename": [
                    "int"
                ]
            }
        }
    },
    "its-master/its/loaders/http.py": {
        "HTTPLoader.get_fileobj": {
            "name": "get_fileobj",
            "location": 18,
            "return": [
                "BytesIO"
            ],
            "arguments": {
                "namespace": [
                    "str",
                    "int",
                    "None"
                ],
                "filename": [
                    "str"
                ]
            }
        },
        "HTTPLoader.load_image": {
            "name": "load_image",
            "location": 56,
            "return": [],
            "arguments": {
                "namespace": [
                    "str",
                    "bool",
                    "list[list[str]]"
                ],
                "filename": [
                    "str",
                    "bool",
                    "list[list[str]]"
                ]
            }
        }
    },
    "its-master/its/loaders/s3_loader.py": {
        "S3Loader.get_fileobj": {
            "name": "get_fileobj",
            "location": 22,
            "return": [
                "BytesIO"
            ],
            "arguments": {
                "namespace": [
                    "str",
                    "dict[, ]",
                    "None"
                ],
                "filename": [
                    "str"
                ],
                "fallback": [
                    "bool"
                ]
            }
        },
        "S3Loader.load_image": {
            "name": "load_image",
            "location": 46,
            "return": [],
            "arguments": {
                "namespace": [
                    "str",
                    "bool",
                    "list[typing.Optional[str]]",
                    "None"
                ],
                "filename": [
                    "str",
                    "list[]"
                ],
                "fallback": [
                    "bool"
                ]
            }
        }
    },
    "its-master/its/loaders/__init__.py": {},
    "its-master/its/tests/conftest.py": {
        "pytest_collection_finish": {
            "name": "pytest_collection_finish",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {
                "session": [
                    "str",
                    "list[]"
                ]
            }
        },
        "collect_types_fixture": {
            "name": "collect_types_fixture",
            "location": 18,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {}
        },
        "pytest_sessionfinish": {
            "name": "pytest_sessionfinish",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "session": [
                    "str",
                    "list[]"
                ],
                "exitstatus": [
                    "str",
                    "list[]"
                ]
            }
        },
        "mock_s3_upload": {
            "name": "mock_s3_upload",
            "location": 33,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {}
        }
    },
    "its-master/its/tests/test_auth.py": {
        "TestLoginRequired.setUpClass": {
            "name": "setUpClass",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLoginRequired.test_invalid_namespace": {
            "name": "test_invalid_namespace",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLoginRequired.test_missing_credentials": {
            "name": "test_missing_credentials",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLoginRequired.test_invalid_credentials": {
            "name": "test_invalid_credentials",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLoginRequired.test_valid_credentials": {
            "name": "test_valid_credentials",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLoginRequired.test_forbidden_namespace": {
            "name": "test_forbidden_namespace",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "its-master/its/tests/test_client_error_handling.py": {
        "TestClientErrorHandling.setUpClass": {
            "name": "setUpClass",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestClientErrorHandling.test_invalid_namespace": {
            "name": "test_invalid_namespace",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestClientErrorHandling.test_fit_synonyms": {
            "name": "test_fit_synonyms",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestClientErrorHandling.test_non_image_file": {
            "name": "test_non_image_file",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestClientErrorHandling.test_large_image_file": {
            "name": "test_large_image_file",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestClientErrorHandling.test_no_cache_headers_on_400": {
            "name": "test_no_cache_headers_on_400",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestClientErrorHandling.test_gif_source_file": {
            "name": "test_gif_source_file",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestClientErrorHandling.test_gif_source_file_with_transforms": {
            "name": "test_gif_source_file_with_transforms",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestClientErrorHandling.test_too_large_a_crop": {
            "name": "test_too_large_a_crop",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestClientErrorHandling.test_too_large_a_resize": {
            "name": "test_too_large_a_resize",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestClientErrorHandling.test_crop_with_single_parameter": {
            "name": "test_crop_with_single_parameter",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "its-master/its/tests/test_cors.py": {
        "TestCorsHeaders.setUpClass": {
            "name": "setUpClass",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCorsHeaders.test_cors_on_get": {
            "name": "test_cors_on_get",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCorsHeaders.test_cors_on_options": {
            "name": "test_cors_on_options",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "its-master/its/tests/test_http_backend.py": {
        "TestRedirects.setUpClass": {
            "name": "setUpClass",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRedirects.test_merlin_http": {
            "name": "test_merlin_http",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRedirects.test_self_referential_http_backend_use": {
            "name": "test_self_referential_http_backend_use",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRedirects.test_http_backend_404": {
            "name": "test_http_backend_404",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "its-master/its/tests/test_overlay.py": {
        "TestOverlay.setUpClass": {
            "name": "setUpClass",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestOverlay.test_simple_overlay": {
            "name": "test_simple_overlay",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestOverlay.test_overlay_with_leading_slash": {
            "name": "test_overlay_with_leading_slash",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestOverlay.test_simple_overlay_with_underscores": {
            "name": "test_simple_overlay_with_underscores",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestOverlay.test_empty_overlay": {
            "name": "test_empty_overlay",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestOverlay.test_legacy_passport_resize_overlay": {
            "name": "test_legacy_passport_resize_overlay",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestOverlay.test_legacy_passport_fit_overlay": {
            "name": "test_legacy_passport_fit_overlay",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestOverlay.test_overlay_image_resize_100_bytes": {
            "name": "test_overlay_image_resize_100_bytes",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestOverlay.test_overlay_image_resize_500_bytes": {
            "name": "test_overlay_image_resize_500_bytes",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "its-master/its/tests/test_pipeline.py": {
        "get_pixels": {
            "name": "get_pixels",
            "location": 18,
            "return": [
                "list[]"
            ],
            "arguments": {
                "image": [
                    "int",
                    "dict[, ]",
                    "dict[str, typing.Any]",
                    "float"
                ]
            }
        },
        "compare_pixels": {
            "name": "compare_pixels",
            "location": 31,
            "return": [
                "float"
            ],
            "arguments": {
                "img1": [
                    "dict[str, typing.Any]",
                    "int",
                    "list[typing.Optional[str]]",
                    "dict[str, str]"
                ],
                "img2": [
                    "dict[str, typing.Any]",
                    "int",
                    "list[typing.Optional[str]]",
                    "dict[str, str]"
                ],
                "tolerance": [
                    "int"
                ],
                "is_white_or_black_image": [
                    "bool"
                ]
            }
        },
        "compare_pixels.pixel_matches": {
            "name": "pixel_matches",
            "location": 36,
            "return": [
                "bool"
            ],
            "arguments": {
                "pixel1": [],
                "pixel2": [],
                "tolerance": []
            }
        },
        "TestFitTransform.setUpClass": {
            "name": "setUpClass",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFitTransform.test_default_fit_no_alpha": {
            "name": "test_default_fit_no_alpha",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "MockFitTransform": []
            }
        },
        "TestFitTransform.test_default_crop_no_alpha": {
            "name": "test_default_crop_no_alpha",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "MockFitTransform": []
            }
        },
        "TestFitTransform.test_focal_fit_no_alpha": {
            "name": "test_focal_fit_no_alpha",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "MockFitTransform": []
            }
        },
        "TestFitTransform.test_focal_crop_no_alpha": {
            "name": "test_focal_crop_no_alpha",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "MockFitTransform": []
            }
        },
        "TestFitTransform.test_focal_1x1_no_alpha": {
            "name": "test_focal_1x1_no_alpha",
            "location": 101,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "MockFitTransform": []
            }
        },
        "TestFitTransform.test_focalcrop_1x1_no_alpha": {
            "name": "test_focalcrop_1x1_no_alpha",
            "location": 111,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "MockFitTransform": []
            }
        },
        "TestFitTransform.test_focal_100x100_no_alpha": {
            "name": "test_focal_100x100_no_alpha",
            "location": 121,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "MockFitTransform": []
            }
        },
        "TestFitTransform.test_focalcrop_100x100_no_alpha": {
            "name": "test_focalcrop_100x100_no_alpha",
            "location": 131,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "MockFitTransform": []
            }
        },
        "TestFitTransform.test_smart_70x1_no_alpha": {
            "name": "test_smart_70x1_no_alpha",
            "location": 141,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "MockFitTransform": []
            }
        },
        "TestFitTransform.test_smartcrop_70x1_no_alpha": {
            "name": "test_smartcrop_70x1_no_alpha",
            "location": 151,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "MockFitTransform": []
            }
        },
        "TestFitTransform.test_invalid_fit_size": {
            "name": "test_invalid_fit_size",
            "location": 160,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFitTransform.test_invalid_crop_size": {
            "name": "test_invalid_crop_size",
            "location": 168,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFitTransform.test_invalid_focal_percentages": {
            "name": "test_invalid_focal_percentages",
            "location": 176,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFitTransform.test_invalid_crop_focal_percentages": {
            "name": "test_invalid_crop_focal_percentages",
            "location": 184,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestResizeTransform.setUpClass": {
            "name": "setUpClass",
            "location": 195,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestResizeTransform.test_resize_size": {
            "name": "test_resize_size",
            "location": 200,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestResizeTransform.test_resize_without_height": {
            "name": "test_resize_without_height",
            "location": 207,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestResizeTransform.test_resize_without_width": {
            "name": "test_resize_without_width",
            "location": 215,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestResizeTransform.test_resize_integrity_smaller": {
            "name": "test_resize_integrity_smaller",
            "location": 223,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestResizeTransform.test_resize_integrity_smaller_noscaleup": {
            "name": "test_resize_integrity_smaller_noscaleup",
            "location": 233,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestResizeTransform.test_resize_integrity_larger": {
            "name": "test_resize_integrity_larger",
            "location": 245,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestResizeTransform.test_resize_integrity_larger_noscaleup": {
            "name": "test_resize_integrity_larger_noscaleup",
            "location": 254,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestResizeTransform.test_resize_integrity_larger_noscaleup_width_only": {
            "name": "test_resize_integrity_larger_noscaleup_width_only",
            "location": 266,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestResizeTransform.test_resize_integrity_larger_noscaleup_height_only": {
            "name": "test_resize_integrity_larger_noscaleup_height_only",
            "location": 277,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestResizeTransform.test_invalid_resize": {
            "name": "test_invalid_resize",
            "location": 288,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestResizeTransform.test_resize_format": {
            "name": "test_resize_format",
            "location": 295,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestImageResults.setUpClass": {
            "name": "setUpClass",
            "location": 306,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestImageResults.test_jpg_progressive": {
            "name": "test_jpg_progressive",
            "location": 310,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestImageResults.test_jpg_quality_vs_size": {
            "name": "test_jpg_quality_vs_size",
            "location": 315,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestImageResults.test_png_quality_vs_size": {
            "name": "test_png_quality_vs_size",
            "location": 329,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPipelineEndToEnd.setUpClass": {
            "name": "setUpClass",
            "location": 346,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPipelineEndToEnd.test_secret_png": {
            "name": "test_secret_png",
            "location": 352,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPipelineEndToEnd.test_cmyk_jpg_to_rgb_png": {
            "name": "test_cmyk_jpg_to_rgb_png",
            "location": 356,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPipelineEndToEnd.test_svg_passthrough": {
            "name": "test_svg_passthrough",
            "location": 360,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPipelineEndToEnd.test_grayscale_png_to_jpg": {
            "name": "test_grayscale_png_to_jpg",
            "location": 371,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPipelineEndToEnd.test_jpg_to_webp": {
            "name": "test_jpg_to_webp",
            "location": 376,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPipelineEndToEnd.test_jpg_without_extension_to_png": {
            "name": "test_jpg_without_extension_to_png",
            "location": 381,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPipelineEndToEnd.test_jpg_without_extension_to_focalcrop": {
            "name": "test_jpg_without_extension_to_focalcrop",
            "location": 386,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPipelineEndToEnd.test_focal_crop_without_filename_priority": {
            "name": "test_focal_crop_without_filename_priority",
            "location": 391,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPipelineEndToEnd.test_focal_crop_filename_priority": {
            "name": "test_focal_crop_filename_priority",
            "location": 404,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPipelineEndToEnd.test_small_vertical_resize": {
            "name": "test_small_vertical_resize",
            "location": 419,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPipelineEndToEnd.test_auto_format_flat_jpeg": {
            "name": "test_auto_format_flat_jpeg",
            "location": 424,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPipelineEndToEnd.test_auto_format_complex_transparent_png": {
            "name": "test_auto_format_complex_transparent_png",
            "location": 429,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPipelineEndToEnd.test_transparent_png_with_icc": {
            "name": "test_transparent_png_with_icc",
            "location": 434,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPipelineEndToEnd.test_auto_format_complex_opaque_png": {
            "name": "test_auto_format_complex_opaque_png",
            "location": 441,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPipelineEndToEnd.test_cache_control_on_200": {
            "name": "test_cache_control_on_200",
            "location": 446,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPipelineEndToEnd.test_auto_format_complex_jpeg": {
            "name": "test_auto_format_complex_jpeg",
            "location": 452,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPipelineEndToEnd.test_icc_profile_converted": {
            "name": "test_icc_profile_converted",
            "location": 457,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPipelineEndToEnd.test_white_transparent_background_converted": {
            "name": "test_white_transparent_background_converted",
            "location": 469,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPipelineEndToEnd.test_focalcrop_parity": {
            "name": "test_focalcrop_parity",
            "location": 482,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPipelineEndToEnd.test_resize_without_height": {
            "name": "test_resize_without_height",
            "location": 495,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPipelineEndToEnd.test_valid_blur_request": {
            "name": "test_valid_blur_request",
            "location": 500,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPipelineEndToEnd.test_blur_zero_value_parity": {
            "name": "test_blur_zero_value_parity",
            "location": 504,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPipelineEndToEnd.test_blur_non_parity": {
            "name": "test_blur_non_parity",
            "location": 514,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPipelineEndToEnd.test_invalid_blur_request_alpha_value": {
            "name": "test_invalid_blur_request_alpha_value",
            "location": 523,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPipelineEndToEnd.test_invalid_blur_request_no_value": {
            "name": "test_invalid_blur_request_no_value",
            "location": 527,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPipelineEndToEnd.test_untransformable_icc_profile": {
            "name": "test_untransformable_icc_profile",
            "location": 531,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPipelineEndToEnd.test_progressive_jpeg": {
            "name": "test_progressive_jpeg",
            "location": 540,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPipelineEndToEnd.test_progressive_jpeg.is_progressive": {
            "name": "is_progressive",
            "location": 542,
            "return": [
                "bool"
            ],
            "arguments": {
                "buffer": []
            }
        }
    },
    "its-master/its/tests/test_query_validation.py": {
        "TestRedirects.setUpClass": {
            "name": "setUpClass",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRedirects.test_bad_resize_argument": {
            "name": "test_bad_resize_argument",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRedirects.test_bad_format_argument": {
            "name": "test_bad_format_argument",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRedirects.test_zero_fit_argument": {
            "name": "test_zero_fit_argument",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRedirects.test_strange_punctuation_legacy_resize": {
            "name": "test_strange_punctuation_legacy_resize",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRedirects.test_strange_arguments_legacy_pipeline": {
            "name": "test_strange_arguments_legacy_pipeline",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "its-master/its/tests/test_redirects.py": {
        "TestRedirects.setUpClass": {
            "name": "setUpClass",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRedirects.test_redirect": {
            "name": "test_redirect",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "its-master/its/tests/test_upload.py": {
        "TestUpload.setUpClass": {
            "name": "setUpClass",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUpload.test_missing_image": {
            "name": "test_missing_image",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUpload.test_file_not_image": {
            "name": "test_file_not_image",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUpload.test_invalid_type": {
            "name": "test_invalid_type",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUpload.test_successful_upload": {
            "name": "test_successful_upload",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "its-master/its/tests/test_utils.py": {
        "TestSlugifyFilename.test_is_lowercase": {
            "name": "test_is_lowercase",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSlugifyFilename.test_remove_non_alphanumeric": {
            "name": "test_remove_non_alphanumeric",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSlugifyFilename.test_replace_spaces": {
            "name": "test_replace_spaces",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSlugifyFilename.test_add_random_string": {
            "name": "test_add_random_string",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGetRandomString.test_length": {
            "name": "test_length",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGetRandomString.test_is_alnum": {
            "name": "test_is_alnum",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGetRandomString.test_is_lowercase": {
            "name": "test_is_lowercase",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "its-master/its/tests/__init__.py": {},
    "its-master/its/transformations/base.py": {
        "BaseTransform.apply_transform": {
            "name": "apply_transform",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "img": [
                    "float",
                    "tuple['cirq.Qid']"
                ],
                "parameters": [
                    "float",
                    "tuple['cirq.Qid']"
                ]
            }
        },
        "BaseTransform.derive_parameters": {
            "name": "derive_parameters",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "query": [
                    "str",
                    "dict[, ]",
                    "None",
                    "typing.Callable[dict[, ], None]",
                    "list[]",
                    "tuple[]"
                ]
            }
        }
    },
    "its-master/its/transformations/blur.py": {
        "BlurTransform.derive_parameters": {
            "name": "derive_parameters",
            "location": 16,
            "return": [],
            "arguments": {
                "query": [
                    "str"
                ]
            }
        },
        "BlurTransform.apply_transform": {
            "name": "apply_transform",
            "location": 19,
            "return": [],
            "arguments": {
                "self": [],
                "img": [
                    "list[int]",
                    "str",
                    "int"
                ],
                "parameters": [
                    "str"
                ]
            }
        }
    },
    "its-master/its/transformations/fit.py": {
        "_fit_image": {
            "name": "_fit_image",
            "location": 14,
            "return": [],
            "arguments": {
                "img": [
                    "int",
                    "float"
                ],
                "crop_width": [
                    "int",
                    "float",
                    "str"
                ],
                "crop_height": [
                    "int",
                    "float",
                    "str"
                ],
                "focal_x": [
                    "bool",
                    "float"
                ],
                "focal_y": [
                    "bool",
                    "float"
                ]
            }
        },
        "_derive_focal_point": {
            "name": "_derive_focal_point",
            "location": 28,
            "return": [
                "list[int]",
                "typing.Sequence[typing.Union[str,int]]",
                "bool",
                "str",
                "typing.Iterable[T]"
            ],
            "arguments": {
                "img": [
                    "str",
                    "None",
                    "list[typing.Any]"
                ],
                "query_parameters": [
                    "typing.Sequence[typing.Union[str,int]]",
                    "bool",
                    "str",
                    "typing.Iterable[T]"
                ]
            }
        },
        "FitTransform.derive_parameters": {
            "name": "derive_parameters",
            "location": 55,
            "return": [],
            "arguments": {
                "query": [
                    "str"
                ]
            }
        },
        "FitTransform.apply_transform": {
            "name": "apply_transform",
            "location": 59,
            "return": [
                "int",
                "float",
                "list[str]"
            ],
            "arguments": {
                "img": [
                    "int",
                    "float",
                    "dict[, ]",
                    "list[bytes]"
                ],
                "parameters": []
            }
        }
    },
    "its-master/its/transformations/overlay.py": {
        "get_loader": {
            "name": "get_loader",
            "location": 17,
            "return": [],
            "arguments": {
                "overlay_loader": [
                    "str",
                    "bytes",
                    "int"
                ]
            }
        },
        "OverlayTransform.derive_parameters": {
            "name": "derive_parameters",
            "location": 48,
            "return": [
                "list[typing.Union[str,dict[, ],None,typing.Callable[dict[, ], None],list[],tuple[]]]"
            ],
            "arguments": {
                "query": [
                    "str",
                    "dict[, ]",
                    "None",
                    "typing.Callable[dict[, ], None]",
                    "list[]",
                    "tuple[]"
                ]
            }
        },
        "OverlayTransform.apply_transform": {
            "name": "apply_transform",
            "location": 52,
            "return": [
                "list[float]"
            ],
            "arguments": {
                "self": [],
                "img": [
                    "list[float]"
                ],
                "parameters": []
            }
        }
    },
    "its-master/its/transformations/resize.py": {
        "ResizeTransform.derive_parameters": {
            "name": "derive_parameters",
            "location": 17,
            "return": [],
            "arguments": {
                "query": [
                    "str"
                ]
            }
        },
        "ResizeTransform.apply_transform": {
            "name": "apply_transform",
            "location": 20,
            "return": [],
            "arguments": {
                "self": [],
                "img": [
                    "list[list[]]",
                    "int",
                    "float"
                ],
                "parameters": []
            }
        }
    },
    "its-master/its/transformations/__init__.py": {}
}
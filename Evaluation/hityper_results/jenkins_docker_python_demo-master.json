{
    "jenkins_docker_python_demo-master/blog/manage.py": {
        "main": {
            "name": "main",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "jenkins_docker_python_demo-master/blog/acl/admin.py": {},
    "jenkins_docker_python_demo-master/blog/acl/apps.py": {},
    "jenkins_docker_python_demo-master/blog/acl/auth_wrap.py": {
        "token_required": {
            "name": "token_required",
            "location": 10,
            "return": [],
            "arguments": {
                "view_func": [
                    "list[]",
                    "list[str]",
                    "bool"
                ]
            }
        },
        "token_required._wrapped_view": {
            "name": "_wrapped_view",
            "location": 12,
            "return": [
                "APIResponseError"
            ],
            "arguments": {
                "request": []
            }
        }
    },
    "jenkins_docker_python_demo-master/blog/acl/default_acl.py": {
        "read_acl": {
            "name": "read_acl",
            "location": 27,
            "return": [
                "dict[typing.Text, int]"
            ],
            "arguments": {}
        },
        "write_acl": {
            "name": "write_acl",
            "location": 31,
            "return": [
                "dict[typing.Text, int]"
            ],
            "arguments": {}
        },
        "update_acl": {
            "name": "update_acl",
            "location": 35,
            "return": [
                "dict[typing.Text, int]"
            ],
            "arguments": {}
        },
        "delte_acl": {
            "name": "delte_acl",
            "location": 39,
            "return": [
                "dict[typing.Text, int]"
            ],
            "arguments": {}
        },
        "row_acl": {
            "name": "row_acl",
            "location": 43,
            "return": [
                "dict[typing.Text, dict[typing.Text, int]]"
            ],
            "arguments": {}
        },
        "get_acl": {
            "name": "get_acl",
            "location": 47,
            "return": [],
            "arguments": {
                "permisson_name": [
                    "str",
                    "list[str]"
                ],
                "level": [
                    "typing.Text"
                ]
            }
        },
        "get_acl.acl": {
            "name": "acl",
            "location": 48,
            "return": [
                "dict[typing.Text, typing.Union[dict[typing.Text, int],int]]"
            ],
            "arguments": {}
        }
    },
    "jenkins_docker_python_demo-master/blog/acl/models.py": {
        "UserProfile.token": {
            "name": "token",
            "location": 68,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UserProfile._generate_jwt": {
            "name": "_generate_jwt",
            "location": 71,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UserProfile.to_dict": {
            "name": "to_dict",
            "location": 83,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "jenkins_docker_python_demo-master/blog/acl/tests.py": {},
    "jenkins_docker_python_demo-master/blog/acl/urls.py": {},
    "jenkins_docker_python_demo-master/blog/acl/views.py": {
        "register": {
            "name": "register",
            "location": 14,
            "return": [
                "APIResponse"
            ],
            "arguments": {
                "r": []
            }
        },
        "login": {
            "name": "login",
            "location": 23,
            "return": [
                "APIResponse",
                "APIResponseError"
            ],
            "arguments": {
                "r": []
            }
        },
        "logout": {
            "name": "logout",
            "location": 36,
            "return": [
                "APIResponse"
            ],
            "arguments": {
                "r": []
            }
        }
    },
    "jenkins_docker_python_demo-master/blog/acl/__init__.py": {},
    "jenkins_docker_python_demo-master/blog/acl/migrations/0001_initial.py": {},
    "jenkins_docker_python_demo-master/blog/acl/migrations/__init__.py": {},
    "jenkins_docker_python_demo-master/blog/article/action.py": {
        "Actions.run_action": {
            "name": "run_action",
            "location": 7,
            "return": [],
            "arguments": {
                "self": [],
                "r": [
                    "typing.Callable[..., None]",
                    "tuple[]",
                    "float"
                ]
            }
        },
        "Actions.publish_post": {
            "name": "publish_post",
            "location": 14,
            "return": [
                "APIResponse"
            ],
            "arguments": {
                "self": [],
                "r": [
                    "int",
                    "str"
                ]
            }
        }
    },
    "jenkins_docker_python_demo-master/blog/article/admin.py": {},
    "jenkins_docker_python_demo-master/blog/article/apps.py": {},
    "jenkins_docker_python_demo-master/blog/article/models.py": {
        "Post.__str__": {
            "name": "__str__",
            "location": 73,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "Post.to_dict": {
            "name": "to_dict",
            "location": 76,
            "return": [
                "dict[, ]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Post.update_tag": {
            "name": "update_tag",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tags": [],
                "user_id": [
                    "int"
                ]
            }
        },
        "Post.add_view_count": {
            "name": "add_view_count",
            "location": 104,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "count": [
                    "int"
                ]
            }
        }
    },
    "jenkins_docker_python_demo-master/blog/article/tests.py": {},
    "jenkins_docker_python_demo-master/blog/article/urls.py": {},
    "jenkins_docker_python_demo-master/blog/article/views.py": {
        "index": {
            "name": "index",
            "location": 82,
            "return": [
                "APIResponse"
            ],
            "arguments": {
                "r": [
                    "float",
                    "dict[, ]",
                    "int",
                    "list[T]",
                    "list[str]",
                    "list[]"
                ]
            }
        },
        "action": {
            "name": "action",
            "location": 92,
            "return": [],
            "arguments": {
                "r": [
                    "typing.Callable[r, collections.abc.Coroutine]",
                    "float"
                ]
            }
        },
        "CategoryView.get": {
            "name": "get",
            "location": 23,
            "return": [
                "APIResponse"
            ],
            "arguments": {
                "self": [],
                "r": [
                    "int"
                ]
            }
        },
        "TagView.get": {
            "name": "get",
            "location": 35,
            "return": [
                "APIResponse"
            ],
            "arguments": {
                "self": [],
                "r": [
                    "bool",
                    "dict[str, typing.Any]",
                    "str",
                    "dict[, ]"
                ]
            }
        },
        "PostView.get": {
            "name": "get",
            "location": 50,
            "return": [
                "APIResponse"
            ],
            "arguments": {
                "self": [],
                "r": [
                    "bool",
                    "dict[str, typing.Any]",
                    "str",
                    "dict[, ]"
                ]
            }
        },
        "PostView.post": {
            "name": "post",
            "location": 63,
            "return": [
                "APIResponse"
            ],
            "arguments": {
                "self": [],
                "r": [
                    "float",
                    "dict[, ]"
                ]
            }
        },
        "PostView.delete": {
            "name": "delete",
            "location": 74,
            "return": [
                "APIResponse"
            ],
            "arguments": {
                "self": [],
                "r": [
                    "bool",
                    "str",
                    "list[]",
                    "list[int]",
                    "list[str]",
                    "dict[, ]"
                ]
            }
        }
    },
    "jenkins_docker_python_demo-master/blog/article/__init__.py": {},
    "jenkins_docker_python_demo-master/blog/article/migrations/0001_initial.py": {},
    "jenkins_docker_python_demo-master/blog/article/migrations/0002_auto_20190513_1434.py": {},
    "jenkins_docker_python_demo-master/blog/article/migrations/0003_post_desc.py": {},
    "jenkins_docker_python_demo-master/blog/article/migrations/0004_auto_20190515_1523.py": {},
    "jenkins_docker_python_demo-master/blog/article/migrations/0005_post_views_count.py": {},
    "jenkins_docker_python_demo-master/blog/article/migrations/__init__.py": {},
    "jenkins_docker_python_demo-master/blog/blog/settings.py": {},
    "jenkins_docker_python_demo-master/blog/blog/urls.py": {},
    "jenkins_docker_python_demo-master/blog/blog/wsgi.py": {},
    "jenkins_docker_python_demo-master/blog/blog/__init__.py": {},
    "jenkins_docker_python_demo-master/blog/cqi/apps.py": {},
    "jenkins_docker_python_demo-master/blog/cqi/tests.py": {},
    "jenkins_docker_python_demo-master/blog/cqi/urls.py": {},
    "jenkins_docker_python_demo-master/blog/cqi/views.py": {
        "QueryView.get_model": {
            "name": "get_model",
            "location": 30,
            "return": [],
            "arguments": {
                "self": [],
                "model_name": []
            }
        },
        "QueryView.get": {
            "name": "get",
            "location": 48,
            "return": [
                "APIResponse"
            ],
            "arguments": {
                "self": [],
                "r": []
            }
        },
        "QueryView.post": {
            "name": "post",
            "location": 74,
            "return": [
                "APIResponse"
            ],
            "arguments": {
                "self": [],
                "r": []
            }
        },
        "QueryView.delete": {
            "name": "delete",
            "location": 98,
            "return": [
                "APIResponse"
            ],
            "arguments": {
                "self": [],
                "r": []
            }
        }
    },
    "jenkins_docker_python_demo-master/blog/cqi/__init__.py": {},
    "jenkins_docker_python_demo-master/blog/cqi/migrations/__init__.py": {},
    "jenkins_docker_python_demo-master/blog/upload/admin.py": {},
    "jenkins_docker_python_demo-master/blog/upload/apps.py": {},
    "jenkins_docker_python_demo-master/blog/upload/models.py": {},
    "jenkins_docker_python_demo-master/blog/upload/tests.py": {},
    "jenkins_docker_python_demo-master/blog/upload/urls.py": {},
    "jenkins_docker_python_demo-master/blog/upload/views.py": {
        "handle_upload_file": {
            "name": "handle_upload_file",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "file": [],
                "path": [
                    "str"
                ]
            }
        },
        "upload_image": {
            "name": "upload_image",
            "location": 22,
            "return": [
                "APIResponseError",
                "APIResponse"
            ],
            "arguments": {
                "r": [
                    "int",
                    "str",
                    "list[int]"
                ]
            }
        }
    },
    "jenkins_docker_python_demo-master/blog/upload/__init__.py": {},
    "jenkins_docker_python_demo-master/blog/upload/migrations/__init__.py": {},
    "jenkins_docker_python_demo-master/blog/utils/api_response.py": {
        "APIError.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "code": [
                    "int"
                ]
            }
        },
        "APIResponse.__init__": {
            "name": "__init__",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "typing.Text"
                ],
                "code": [
                    "int"
                ],
                "encoder": [],
                "safe": [
                    "bool"
                ],
                "json_dumps_params": [
                    "None"
                ]
            }
        },
        "APIResponseError.__init__": {
            "name": "__init__",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "code": [
                    "int"
                ],
                "data": [
                    "dict[, ]"
                ]
            }
        }
    },
    "jenkins_docker_python_demo-master/blog/utils/base_model.py": {
        "MyQuerySet.pagination": {
            "name": "pagination",
            "location": 14,
            "return": [],
            "arguments": {
                "self": [],
                "limit": [
                    "int"
                ],
                "offset": [
                    "int"
                ]
            }
        },
        "MyQuerySet.get_or_api_404": {
            "name": "get_or_api_404",
            "location": 52,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MyQuerySet.delete": {
            "name": "delete",
            "location": 68,
            "return": [
                "dict[, ]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MyQuerySet.true_delete": {
            "name": "true_delete",
            "location": 73,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MyManager.get_queryset": {
            "name": "get_queryset",
            "location": 81,
            "return": [
                "MyQuerySet"
            ],
            "arguments": {
                "self": []
            }
        },
        "MyManager.get_or_api_404": {
            "name": "get_or_api_404",
            "location": 84,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MyManager.active": {
            "name": "active",
            "location": 87,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BaseModel.__str__": {
            "name": "__str__",
            "location": 107,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseModel._get_fields": {
            "name": "_get_fields",
            "location": 111,
            "return": [
                "dict[typing.Text, ]"
            ],
            "arguments": {
                "cls": []
            }
        },
        "BaseModel._to_dict": {
            "name": "_to_dict",
            "location": 137,
            "return": [
                "dict[, typing.Union[list[],typing.Text,None]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseModel.to_dict": {
            "name": "to_dict",
            "location": 161,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BaseModel.pagination": {
            "name": "pagination",
            "location": 165,
            "return": [],
            "arguments": {
                "query_set": [],
                "limit": [
                    "int"
                ],
                "offset": [
                    "int"
                ]
            }
        },
        "BaseModel.update_fields": {
            "name": "update_fields",
            "location": 173,
            "return": [
                "BaseModel"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseModel._get_foreignKey": {
            "name": "_get_foreignKey",
            "location": 195,
            "return": [
                "dict[, ]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseModel._get_manyToMany": {
            "name": "_get_manyToMany",
            "location": 206,
            "return": [
                "dict[, ]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseModel.__update": {
            "name": "__update",
            "location": 220,
            "return": [
                "BaseModel"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseModel.create": {
            "name": "create",
            "location": 232,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "BaseModel.save_to_now": {
            "name": "save_to_now",
            "location": 262,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseModel.delete": {
            "name": "delete",
            "location": 268,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseModel.ture_delete": {
            "name": "ture_delete",
            "location": 274,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "jenkins_docker_python_demo-master/blog/utils/error_code.py": {
        "get_msg": {
            "name": "get_msg",
            "location": 64,
            "return": [],
            "arguments": {
                "code": [
                    "int"
                ],
                "lang": [
                    "typing.Text"
                ]
            }
        }
    },
    "jenkins_docker_python_demo-master/blog/utils/middleware.py": {
        "APIMiddleware.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "get_response": []
            }
        },
        "APIMiddleware.__call__": {
            "name": "__call__",
            "location": 14,
            "return": [],
            "arguments": {
                "self": [],
                "request": []
            }
        },
        "APIMiddleware.process_exception": {
            "name": "process_exception",
            "location": 29,
            "return": [
                "APIResponseError"
            ],
            "arguments": {
                "self": [],
                "request": [],
                "exception": []
            }
        }
    },
    "jenkins_docker_python_demo-master/blog/utils/model_search.py": {
        "get_model_search": {
            "name": "get_model_search",
            "location": 4,
            "return": [
                "int"
            ],
            "arguments": {
                "search_text": [
                    "str"
                ],
                "model_name": [
                    "str",
                    "dict[str, str]",
                    "typing.Mapping",
                    "None"
                ]
            }
        }
    },
    "jenkins_docker_python_demo-master/blog/utils/tool.py": {
        "is_uuid": {
            "name": "is_uuid",
            "location": 11,
            "return": [
                "bool"
            ],
            "arguments": {
                "arg": []
            }
        },
        "parse_query_string": {
            "name": "parse_query_string",
            "location": 21,
            "return": [],
            "arguments": {
                "queryDict": [],
                "model_name": []
            }
        }
    },
    "jenkins_docker_python_demo-master/blog/utils/__init__.py": {}
}
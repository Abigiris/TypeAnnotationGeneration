{
    "juju-master/app.py": {},
    "juju-master/manage.py": {},
    "juju-master/setup.py": {},
    "juju-master/api/__init__.py": {},
    "juju-master/cli/cmd_api.py": {
        "make_api": {
            "name": "make_api",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "api_name": [
                    "str"
                ],
                "model": [
                    "str",
                    "bool",
                    "list[str]"
                ]
            }
        }
    },
    "juju-master/cli/cmd_beat.py": {
        "beat": {
            "name": "beat",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "logfile": [
                    "bool",
                    "dict[, ]",
                    "str",
                    "None"
                ],
                "concurrency": [
                    "dict[, ]",
                    "dict[str, typing.Any]"
                ]
            }
        }
    },
    "juju-master/cli/cmd_celery.py": {
        "celery": {
            "name": "celery",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "queues": [
                    "str"
                ],
                "logfile": [],
                "concurrency": [
                    "dict[str, typing.Any]"
                ],
                "worker_max_tasks_per_child": [
                    "dict[str, typing.Any]",
                    "dict[, ]"
                ]
            }
        },
        "create_celery_logger_handler": {
            "name": "create_celery_logger_handler",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "logger": [
                    "str",
                    "list[str]",
                    "int",
                    "tuple[tuple[typing.Union[str,...]]]"
                ],
                "propagate": [
                    "str",
                    "None",
                    "typing.Callable[, ]"
                ]
            }
        },
        "after_setup_celery_task_logger": {
            "name": "after_setup_celery_task_logger",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "logger": [
                    "str",
                    "list[str]",
                    "bool",
                    "dict[str, str]"
                ]
            }
        },
        "after_setup_celery_logger": {
            "name": "after_setup_celery_logger",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "logger": [
                    "bool",
                    "dict[str, list[str]]",
                    "typing.Sequence[typing.Sequence[T]]",
                    "str",
                    "typing.Callable[, ]"
                ]
            }
        }
    },
    "juju-master/cli/cmd_command.py": {
        "make_command": {
            "name": "make_command",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "command_name": [
                    "str"
                ]
            }
        }
    },
    "juju-master/cli/cmd_cov.py": {
        "cli": {
            "name": "cli",
            "location": 9,
            "return": [],
            "arguments": {
                "path": [
                    "str",
                    "list[str]"
                ]
            }
        }
    },
    "juju-master/cli/cmd_db.py": {
        "make_model": {
            "name": "make_model",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "model_name": [
                    "str"
                ]
            }
        }
    },
    "juju-master/cli/cmd_loc.py": {
        "count_locs": {
            "name": "count_locs",
            "location": 7,
            "return": [],
            "arguments": {
                "file_type": [
                    "str",
                    "int",
                    "None"
                ],
                "comment_pattern": [
                    "str",
                    "typing.Any",
                    "None"
                ]
            }
        },
        "loc": {
            "name": "loc",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "juju-master/cli/cmd_middleware.py": {
        "make_middleware": {
            "name": "make_middleware",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "middleware_name": [
                    "str"
                ]
            }
        }
    },
    "juju-master/cli/cmd_secret.py": {
        "generate_secret": {
            "name": "generate_secret",
            "location": 9,
            "return": [],
            "arguments": {
                "bytes": [
                    "int",
                    "dict[str, str]",
                    "list[str]"
                ]
            }
        }
    },
    "juju-master/cli/cmd_test.py": {
        "test": {
            "name": "test",
            "location": 10,
            "return": [],
            "arguments": {
                "path": [
                    "str",
                    "list[str]"
                ]
            }
        }
    },
    "juju-master/cli/__init__.py": {},
    "juju-master/config/settings.py": {
        "create_app": {
            "name": "create_app",
            "location": 55,
            "return": [
                "Flask"
            ],
            "arguments": {
                "main": [
                    "bool"
                ]
            }
        }
    },
    "juju-master/config/static_config.py": {},
    "juju-master/config/events/other.py": {
        "push_model": {
            "name": "push_model",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {
                "model": []
            }
        },
        "on_ping_user": {
            "name": "on_ping_user",
            "location": 12,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "token": [
                    "str",
                    "dict[, ]",
                    "list[]"
                ]
            }
        },
        "post_message": {
            "name": "post_message",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "user_id": [
                    "bool",
                    "dict[str, typing.Any]",
                    "None",
                    "set[int]",
                    "float",
                    "str"
                ],
                "data": [
                    "bool",
                    "dict[str, typing.Any]",
                    "None",
                    "set[int]",
                    "float",
                    "str"
                ]
            }
        },
        "on_post_message": {
            "name": "on_post_message",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "data": [
                    "dict[, ]",
                    "dict[str, str]",
                    "list[str]"
                ],
                "token": [
                    "bool",
                    "list[]",
                    "dict[str, typing.Any]",
                    "typing.Mapping",
                    "bytes"
                ]
            }
        },
        "on_disconnect": {
            "name": "on_disconnect",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "juju-master/config/events/__init__.py": {},
    "juju-master/config/tasks/base.py": {
        "BaseTask.on_failure": {
            "name": "on_failure",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "exc": [
                    "str",
                    "int",
                    "bytes"
                ],
                "task_id": [
                    "int",
                    "None",
                    "str",
                    "tuple[typing.Union[int,int]]",
                    "dict[str, float]",
                    "dict[str, str]"
                ],
                "args": [],
                "kwargs": [],
                "einfo": [
                    "int",
                    "str",
                    "None"
                ]
            }
        }
    },
    "juju-master/config/tasks/common_tasks.py": {
        "task_1": {
            "name": "task_1",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "Task1.run": {
            "name": "run",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "juju-master/config/tasks/__init__.py": {},
    "juju-master/facilities/mimes.py": {
        "get_mimes": {
            "name": "get_mimes",
            "location": 101,
            "return": [
                "list[typing.Text]",
                "None"
            ],
            "arguments": {
                "extension": [
                    "None",
                    "str"
                ]
            }
        },
        "get_extensions": {
            "name": "get_extensions",
            "location": 106,
            "return": [
                "list[typing.Text]"
            ],
            "arguments": {
                "mime_type": [
                    "None",
                    "typing.Type",
                    "str",
                    "set[str]",
                    "int"
                ]
            }
        }
    },
    "juju-master/facilities/__init__.py": {},
    "juju-master/facilities/databases/DBMixins.py": {
        "IDMixin.as_dict": {
            "name": "as_dict",
            "location": 21,
            "return": [
                "dict[, dict[, ]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserMixin.is_active": {
            "name": "is_active",
            "location": 35,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserMixin.is_authenticated": {
            "name": "is_authenticated",
            "location": 39,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserMixin.is_anonymous": {
            "name": "is_anonymous",
            "location": 43,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserMixin.get_id": {
            "name": "get_id",
            "location": 46,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserMixin.__eq__": {
            "name": "__eq__",
            "location": 52,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "str",
                    "float",
                    "int",
                    "bytes",
                    "list[str]"
                ]
            }
        },
        "UserMixin.__ne__": {
            "name": "__ne__",
            "location": 60,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "typing.Collection"
                ]
            }
        },
        "AnonymousUserMixin.is_authenticated": {
            "name": "is_authenticated",
            "location": 76,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "AnonymousUserMixin.is_active": {
            "name": "is_active",
            "location": 80,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "AnonymousUserMixin.is_anonymous": {
            "name": "is_anonymous",
            "location": 84,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "AnonymousUserMixin.get_id": {
            "name": "get_id",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Serialize.as_dict": {
            "name": "as_dict",
            "location": 92,
            "return": [
                "dict[, str]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "juju-master/facilities/databases/__init__.py": {},
    "juju-master/facilities/middleware/__init__.py": {},
    "juju-master/models/users.py": {
        "User.__repr__": {
            "name": "__repr__",
            "location": 17,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "User.rolenames": {
            "name": "rolenames",
            "location": 22,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "User.lookup": {
            "name": "lookup",
            "location": 29,
            "return": [],
            "arguments": {
                "cls": [
                    "str",
                    "typing.Type",
                    "int"
                ],
                "username": [
                    "str",
                    "typing.Type",
                    "int"
                ]
            }
        },
        "User.identify": {
            "name": "identify",
            "location": 33,
            "return": [],
            "arguments": {
                "cls": [
                    "str",
                    "int",
                    "dict[, ]"
                ],
                "id_": [
                    "str",
                    "int",
                    "dict[, ]"
                ]
            }
        },
        "User.identity": {
            "name": "identity",
            "location": 37,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "User.is_active": {
            "name": "is_active",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "juju-master/models/__init__.py": {},
    "juju-master/tests/test_app.py": {}
}
{
    "kafkian-master/setup.py": {
        "readme": {
            "name": "readme",
            "location": 4,
            "return": [],
            "arguments": {}
        }
    },
    "kafkian-master/kafkian/consumer.py": {
        "Consumer.__init__": {
            "name": "__init__",
            "location": 43,
            "return": [],
            "arguments": {
                "self": [],
                "config": [],
                "topics": [],
                "value_deserializer": [],
                "key_deserializer": [],
                "error_callback": [],
                "commit_success_callback": [],
                "commit_error_callback": [],
                "metrics": []
            }
        },
        "Consumer._init_consumer_impl": {
            "name": "_init_consumer_impl",
            "location": 80,
            "return": [],
            "arguments": {
                "config": []
            }
        },
        "Consumer._subscribe": {
            "name": "_subscribe",
            "location": 83,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Consumer.__iter__": {
            "name": "__iter__",
            "location": 89,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Consumer.__next__": {
            "name": "__next__",
            "location": 93,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Consumer.__enter__": {
            "name": "__enter__",
            "location": 101,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Consumer.__exit__": {
            "name": "__exit__",
            "location": 105,
            "return": [],
            "arguments": {
                "self": [],
                "exc_type": [],
                "exc_value": [],
                "tb": []
            }
        },
        "Consumer._close": {
            "name": "_close",
            "location": 108,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Consumer._poll": {
            "name": "_poll",
            "location": 122,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Consumer._message_generator": {
            "name": "_message_generator",
            "location": 125,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Consumer.commit": {
            "name": "commit",
            "location": 138,
            "return": [],
            "arguments": {
                "self": [],
                "sync": []
            }
        },
        "Consumer._on_commit": {
            "name": "_on_commit",
            "location": 146,
            "return": [],
            "arguments": {
                "self": [],
                "err": [],
                "topics_partitions": []
            }
        },
        "Consumer._on_error": {
            "name": "_on_error",
            "location": 156,
            "return": [],
            "arguments": {
                "self": [],
                "error": []
            }
        },
        "Consumer._on_throttle": {
            "name": "_on_throttle",
            "location": 161,
            "return": [],
            "arguments": {
                "self": [],
                "event": []
            }
        },
        "Consumer._on_stats": {
            "name": "_on_stats",
            "location": 164,
            "return": [],
            "arguments": {
                "self": [],
                "stats": []
            }
        }
    },
    "kafkian-master/kafkian/exceptions.py": {},
    "kafkian-master/kafkian/message.py": {
        "Message.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "int",
                    "list[list[str]]",
                    "typing.MutableMapping",
                    "str",
                    "None",
                    "dict[str, tuple[typing.Union[str,str]]]"
                ],
                "key_deserializer": [
                    "str",
                    "list[str]",
                    "None"
                ],
                "value_deserializer": [
                    "str",
                    "list[T]",
                    "int",
                    "None"
                ]
            }
        },
        "Message.key": {
            "name": "key",
            "location": 32,
            "return": [
                "str",
                "bytes",
                "list[str]",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Message.value": {
            "name": "value",
            "location": 44,
            "return": [
                "float",
                "tuple[float]",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Message.topic": {
            "name": "topic",
            "location": 56,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Message.partition": {
            "name": "partition",
            "location": 63,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Message.offset": {
            "name": "offset",
            "location": 70,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Message.timestamp": {
            "name": "timestamp",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Message.timestamp_type": {
            "name": "timestamp_type",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Message.headers": {
            "name": "headers",
            "location": 97,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "kafkian-master/kafkian/producer.py": {
        "Producer.__init__": {
            "name": "__init__",
            "location": 36,
            "return": [],
            "arguments": {
                "self": [],
                "config": [],
                "value_serializer": [],
                "key_serializer": [],
                "error_callback": [],
                "delivery_success_callback": [],
                "delivery_error_callback": [],
                "metrics": []
            }
        },
        "Producer._init_producer_impl": {
            "name": "_init_producer_impl",
            "location": 67,
            "return": [],
            "arguments": {
                "config": []
            }
        },
        "Producer._close": {
            "name": "_close",
            "location": 70,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Producer.flush": {
            "name": "flush",
            "location": 73,
            "return": [],
            "arguments": {
                "self": [],
                "timeout": []
            }
        },
        "Producer.poll": {
            "name": "poll",
            "location": 84,
            "return": [],
            "arguments": {
                "self": [],
                "timeout": []
            }
        },
        "Producer.produce": {
            "name": "produce",
            "location": 94,
            "return": [],
            "arguments": {
                "self": [],
                "topic": [],
                "key": [],
                "value": [],
                "sync": []
            }
        },
        "Producer._produce": {
            "name": "_produce",
            "location": 115,
            "return": [],
            "arguments": {
                "self": [],
                "topic": [],
                "key": [],
                "value": []
            }
        },
        "Producer._on_delivery": {
            "name": "_on_delivery",
            "location": 118,
            "return": [],
            "arguments": {
                "self": [],
                "err": [],
                "msg": []
            }
        },
        "Producer._on_error": {
            "name": "_on_error",
            "location": 133,
            "return": [],
            "arguments": {
                "self": [],
                "error": []
            }
        },
        "Producer._on_throttle": {
            "name": "_on_throttle",
            "location": 138,
            "return": [],
            "arguments": {
                "self": [],
                "event": []
            }
        },
        "Producer._on_stats": {
            "name": "_on_stats",
            "location": 141,
            "return": [],
            "arguments": {
                "self": [],
                "stats": []
            }
        }
    },
    "kafkian-master/kafkian/__init__.py": {},
    "kafkian-master/kafkian/metrics/consts.py": {},
    "kafkian-master/kafkian/metrics/__init__.py": {
        "KafkaMetrics.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "statsd": [
                    "int",
                    "str",
                    "list[list[str]]"
                ],
                "basename": [
                    "typing.Text"
                ],
                "tags": [
                    "None",
                    "str",
                    "list[str]",
                    "dict[str, str]",
                    "bool"
                ]
            }
        },
        "KafkaMetrics.send": {
            "name": "send",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "stats_raw": [
                    "str"
                ]
            }
        },
        "KafkaMetrics._send_stats": {
            "name": "_send_stats",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "stats": [
                    "bytes"
                ]
            }
        },
        "KafkaMetrics._send_broker_stats": {
            "name": "_send_broker_stats",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "stats": [
                    "int",
                    "str",
                    "typing.Iterable['Context']"
                ]
            }
        },
        "KafkaMetrics._send_topic_partition_stats": {
            "name": "_send_topic_partition_stats",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "stats": []
            }
        },
        "KafkaMetrics._send_cgrp_stats": {
            "name": "_send_cgrp_stats",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "stats": [
                    "str"
                ]
            }
        },
        "KafkaMetrics._send_eos_stats": {
            "name": "_send_eos_stats",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "stats": [
                    "str"
                ]
            }
        }
    },
    "kafkian-master/kafkian/serde/avroserdebase.py": {
        "_wrap": {
            "name": "_wrap",
            "location": 28,
            "return": [
                "str",
                "typing.Pattern",
                "bool",
                "typing.Match",
                "None",
                "dict[str, dict[str, typing.Any]]"
            ],
            "arguments": {
                "value": [
                    "bool",
                    "str",
                    "list[]"
                ],
                "schema": [
                    "str",
                    "bool"
                ]
            }
        },
        "HasSchemaMixin.schema": {
            "name": "schema",
            "location": 16,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AvroSerDeBase.decode_message": {
            "name": "decode_message",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "bytes",
                    "typing.IO",
                    "int",
                    "list[str]",
                    "str"
                ]
            }
        }
    },
    "kafkian-master/kafkian/serde/deserialization.py": {
        "Deserializer.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Deserializer.deserialize": {
            "name": "deserialize",
            "location": 15,
            "return": [
                "int",
                "tuple[typing.Union[str,int]]",
                "complex",
                "list[]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "int",
                    "tuple[typing.Union[str,int]]",
                    "complex",
                    "list[]"
                ]
            }
        },
        "AvroDeserializer.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "schema_registry_url": [
                    "str"
                ]
            }
        },
        "AvroDeserializer.deserialize": {
            "name": "deserialize",
            "location": 25,
            "return": [],
            "arguments": {
                "self": [],
                "value": [
                    "float",
                    "int"
                ]
            }
        }
    },
    "kafkian-master/kafkian/serde/serialization.py": {
        "Serializer.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Serializer.serialize": {
            "name": "serialize",
            "location": 25,
            "return": [
                "int",
                "tuple[typing.Union[str,int]]",
                "complex",
                "list[]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "int",
                    "tuple[typing.Union[str,int]]",
                    "complex",
                    "list[]"
                ],
                "topic": [
                    "int",
                    "tuple[typing.Union[str,int]]",
                    "complex",
                    "list[]"
                ]
            }
        },
        "AvroSerializerBase.__init__": {
            "name": "__init__",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "schema_registry_url": [
                    "str",
                    "None",
                    "list[str]",
                    "typing.IO",
                    "bool"
                ],
                "auto_register_schemas": [
                    "bool"
                ],
                "subject_name_strategy": []
            }
        },
        "AvroSerializerBase._get_subject": {
            "name": "_get_subject",
            "location": 44,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "topic": [
                    "str"
                ],
                "schema": [
                    "str"
                ],
                "is_key": [
                    "bool"
                ]
            }
        },
        "AvroSerializerBase._ensure_schema": {
            "name": "_ensure_schema",
            "location": 55,
            "return": [
                "tuple[typing.Union[list[],str,int,dict[str, str]]]"
            ],
            "arguments": {
                "self": [],
                "topic": [
                    "str"
                ],
                "schema": [
                    "int",
                    "typing.Mapping",
                    "list[typing.Callable[, ]]"
                ],
                "is_key": [
                    "bool"
                ]
            }
        },
        "AvroSerializerBase.serialize": {
            "name": "serialize",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "int",
                    "tuple[typing.Union[str,int]]",
                    "complex",
                    "list[]"
                ],
                "topic": [
                    "int",
                    "tuple[typing.Union[str,int]]",
                    "complex",
                    "list[]"
                ]
            }
        },
        "AvroSerializer.serialize": {
            "name": "serialize",
            "location": 72,
            "return": [],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "int"
                ],
                "topic": [
                    "str",
                    "int"
                ],
                "is_key": [
                    "bool"
                ]
            }
        },
        "AvroStringKeySerializer.serialize": {
            "name": "serialize",
            "location": 85,
            "return": [],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "typing.Any",
                    "None",
                    "bytes",
                    "int"
                ],
                "topic": [
                    "Exception",
                    "typing.Protocol",
                    "int",
                    "typing.Callable[None, typing.Any]",
                    "str",
                    "bytes"
                ],
                "is_key": [
                    "bool"
                ]
            }
        }
    },
    "kafkian-master/kafkian/serde/__init__.py": {},
    "kafkian-master/tests/__init__.py": {},
    "kafkian-master/tests/system/test_produce_consume_avro.py": {
        "producer": {
            "name": "producer",
            "location": 46,
            "return": [
                "Producer"
            ],
            "arguments": {}
        },
        "consumer": {
            "name": "consumer",
            "location": 55,
            "return": [
                "Consumer"
            ],
            "arguments": {}
        },
        "test_produce_consume_one": {
            "name": "test_produce_consume_one",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "producer": [],
                "consumer": []
            }
        },
        "test_produce_consume_one_tombstone": {
            "name": "test_produce_consume_one_tombstone",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "producer": [],
                "consumer": []
            }
        }
    },
    "kafkian-master/tests/system/test_produce_consume_b.py": {
        "producer": {
            "name": "producer",
            "location": 22,
            "return": [
                "Producer"
            ],
            "arguments": {}
        },
        "consumer": {
            "name": "consumer",
            "location": 27,
            "return": [
                "Consumer"
            ],
            "arguments": {}
        },
        "test_produce_consume_one": {
            "name": "test_produce_consume_one",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "producer": [],
                "consumer": []
            }
        },
        "test_produce_consume_one_tombstone": {
            "name": "test_produce_consume_one_tombstone",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "producer": [],
                "consumer": []
            }
        }
    },
    "kafkian-master/tests/system/test_produce_consume_commit_offset.py": {
        "producer": {
            "name": "producer",
            "location": 22,
            "return": [
                "Producer"
            ],
            "arguments": {}
        },
        "consumer": {
            "name": "consumer",
            "location": 27,
            "return": [
                "Consumer"
            ],
            "arguments": {}
        },
        "test_produce_many_consume_one": {
            "name": "test_produce_many_consume_one",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "producer": [],
                "consumer": []
            }
        },
        "test_produce_many_consume_some": {
            "name": "test_produce_many_consume_some",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "producer": [],
                "consumer": []
            }
        }
    },
    "kafkian-master/tests/system/__init__.py": {},
    "kafkian-master/tests/unit/conftest.py": {},
    "kafkian-master/tests/unit/test_avro_serde_base.py": {
        "test_schema_mixin_wrapper_record_schema": {
            "name": "test_schema_mixin_wrapper_record_schema",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_schema_mixin_wrapper_key_schema": {
            "name": "test_schema_mixin_wrapper_key_schema",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "kafkian-master/tests/unit/test_consumer.py": {
        "consumer": {
            "name": "consumer",
            "location": 19,
            "return": [
                "Consumer"
            ],
            "arguments": {}
        },
        "test_consume_one_b": {
            "name": "test_consume_one_b",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "consumer": []
            }
        },
        "test_consume_one_tombstone": {
            "name": "test_consume_one_tombstone",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "consumer": []
            }
        },
        "MockMessage.key": {
            "name": "key",
            "location": 24,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MockMessage.value": {
            "name": "value",
            "location": 27,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MockMessage.set_key": {
            "name": "set_key",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "new_key": [
                    "str"
                ]
            }
        },
        "MockMessage.set_value": {
            "name": "set_value",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "new_value": [
                    "str",
                    "float",
                    "list[str]",
                    "typing.IO",
                    "None"
                ]
            }
        },
        "MockMessage.error": {
            "name": "error",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "kafkian-master/tests/unit/test_consumer_avro.py": {
        "consumer": {
            "name": "consumer",
            "location": 52,
            "return": [
                "Consumer"
            ],
            "arguments": {}
        },
        "test_consume_one_avro_value": {
            "name": "test_consume_one_avro_value",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "consumer": []
            }
        },
        "test_consume_one_tombstone": {
            "name": "test_consume_one_tombstone",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {
                "consumer": []
            }
        },
        "MockMessage.key": {
            "name": "key",
            "location": 58,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MockMessage.value": {
            "name": "value",
            "location": 61,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MockMessage.set_key": {
            "name": "set_key",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "new_key": [
                    "str"
                ]
            }
        },
        "MockMessage.set_value": {
            "name": "set_value",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "new_value": [
                    "str",
                    "float",
                    "list[str]",
                    "typing.IO",
                    "None"
                ]
            }
        },
        "MockMessage.error": {
            "name": "error",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "kafkian-master/tests/unit/test_consumer_errors.py": {
        "consumer": {
            "name": "consumer",
            "location": 21,
            "return": [
                "Consumer"
            ],
            "arguments": {}
        },
        "test_consumer_ignores_partition_eof": {
            "name": "test_consumer_ignores_partition_eof",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "consumer": []
            }
        },
        "test_consumer_generator_raises_and_closed_on_error": {
            "name": "test_consumer_generator_raises_and_closed_on_error",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "consumer": []
            }
        },
        "MockMessage.__init__": {
            "name": "__init__",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_key": [
                    "dict[, ]",
                    "typing.MutableMapping",
                    "bool"
                ],
                "_value": [
                    "bool",
                    "bytes"
                ],
                "_error": [
                    "float",
                    "None",
                    "bool",
                    "str",
                    "list[str]",
                    "typing.Type"
                ]
            }
        },
        "MockMessage.key": {
            "name": "key",
            "location": 31,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MockMessage.value": {
            "name": "value",
            "location": 34,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MockMessage.set_key": {
            "name": "set_key",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "new_key": [
                    "str"
                ]
            }
        },
        "MockMessage.set_value": {
            "name": "set_value",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "new_value": [
                    "str",
                    "float",
                    "list[str]",
                    "typing.IO",
                    "None"
                ]
            }
        },
        "MockMessage.error": {
            "name": "error",
            "location": 43,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MockError.__init__": {
            "name": "__init__",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_code": [
                    "int",
                    "str",
                    "float"
                ]
            }
        },
        "MockError.code": {
            "name": "code",
            "location": 51,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_consumer_ignores_partition_eof.next_message": {
            "name": "next_message",
            "location": 66,
            "return": [],
            "arguments": {
                "ignored": []
            }
        }
    },
    "kafkian-master/tests/unit/test_producer_avro.py": {
        "teardown_function": {
            "name": "teardown_function",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "function": [
                    "typing.Callable[, ]",
                    "Exception"
                ]
            }
        },
        "avro_producer": {
            "name": "avro_producer",
            "location": 52,
            "return": [
                "Producer"
            ],
            "arguments": {}
        },
        "test_producer_init": {
            "name": "test_producer_init",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "avro_producer": [
                    "int"
                ]
            }
        },
        "test_avro_producer_produce": {
            "name": "test_avro_producer_produce",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "avro_producer": []
            }
        }
    },
    "kafkian-master/tests/unit/test_producer_avro_key.py": {
        "teardown_function": {
            "name": "teardown_function",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "function": [
                    "typing.Callable[, ]",
                    "Exception"
                ]
            }
        },
        "avro_producer": {
            "name": "avro_producer",
            "location": 26,
            "return": [],
            "arguments": {}
        },
        "test_producer_init": {
            "name": "test_producer_init",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "avro_producer": [
                    "int"
                ]
            }
        },
        "test_avro_producer_produce": {
            "name": "test_avro_producer_produce",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "avro_producer": []
            }
        }
    },
    "kafkian-master/tests/unit/test_producer_consume_b.py": {
        "producer": {
            "name": "producer",
            "location": 27,
            "return": [
                "Producer"
            ],
            "arguments": {}
        },
        "consumer": {
            "name": "consumer",
            "location": 32,
            "return": [
                "Consumer"
            ],
            "arguments": {}
        },
        "test_produce_consume_one": {
            "name": "test_produce_consume_one",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "producer": [],
                "consumer": [
                    "str",
                    "typing.Mapping"
                ]
            }
        },
        "test_produce_consume_one_tombstone": {
            "name": "test_produce_consume_one_tombstone",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "producer": [],
                "consumer": [
                    "str",
                    "typing.Mapping"
                ]
            }
        }
    },
    "kafkian-master/tests/unit/test_subject_name_strategy.py": {
        "test_subject_name_strategy": {
            "name": "test_subject_name_strategy",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "strategy": [
                    "str",
                    "typing.Mapping",
                    "list[str]"
                ],
                "is_key": [
                    "str",
                    "bytes"
                ],
                "subject": [
                    "str",
                    "bytes"
                ]
            }
        }
    },
    "kafkian-master/tests/unit/__init__.py": {}
}
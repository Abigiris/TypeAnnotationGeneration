{
    "keno-master/build.py": {
        "oh_never_mind": {
            "name": "oh_never_mind",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {
                "what": [
                    "int",
                    "dict[str, typing.Any]",
                    "typing.Callable[int, None]"
                ]
            }
        },
        "has_source_code_tree_changed": {
            "name": "has_source_code_tree_changed",
            "location": 96,
            "return": [],
            "arguments": {
                "what": [
                    "int",
                    "float",
                    "dict[str, typing.Any]",
                    "list[int]"
                ]
            }
        },
        "skip_if_no_change": {
            "name": "skip_if_no_change",
            "location": 103,
            "return": [],
            "arguments": {
                "name": [
                    "str",
                    "bool"
                ]
            }
        },
        "execute_with_environment": {
            "name": "execute_with_environment",
            "location": 124,
            "return": [
                "None"
            ],
            "arguments": {
                "command": [
                    "str"
                ],
                "env": [
                    "str",
                    "dict[str, str]",
                    "int"
                ]
            }
        },
        "execute_get_text": {
            "name": "execute_get_text",
            "location": 129,
            "return": [],
            "arguments": {
                "command": [
                    "str",
                    "list[str]"
                ]
            }
        },
        "bumpversion": {
            "name": "bumpversion",
            "location": 149,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "clean": {
            "name": "clean",
            "location": 166,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "compile": {
            "name": "compile",
            "location": 177,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "formatting": {
            "name": "formatting",
            "location": 182,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "lint": {
            "name": "lint",
            "location": 187,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "nose_tests": {
            "name": "nose_tests",
            "location": 218,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "coverage": {
            "name": "coverage",
            "location": 224,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "docs": {
            "name": "docs",
            "location": 230,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "pip_check": {
            "name": "pip_check",
            "location": 236,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "pin_dependencies": {
            "name": "pin_dependencies",
            "location": 242,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "compile_md": {
            "name": "compile_md",
            "location": 247,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "mypy": {
            "name": "mypy",
            "location": 255,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "detect_secrets": {
            "name": "detect_secrets",
            "location": 289,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "config_pythonpath": {
            "name": "config_pythonpath",
            "location": 312,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "package": {
            "name": "package",
            "location": 321,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "xar": {
            "name": "xar",
            "location": 325,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "py2app": {
            "name": "py2app",
            "location": 333,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "echo": {
            "name": "echo",
            "location": 338,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "BuildState.__init__": {
            "name": "__init__",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "what": [
                    "str"
                ],
                "where": [
                    "float",
                    "int"
                ]
            }
        },
        "BuildState.oh_never_mind": {
            "name": "oh_never_mind",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BuildState.has_source_code_tree_changed": {
            "name": "has_source_code_tree_changed",
            "location": 66,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "skip_if_no_change.real_decorator": {
            "name": "real_decorator",
            "location": 105,
            "return": [],
            "arguments": {
                "func": []
            }
        },
        "skip_if_no_change.real_decorator.wrapper": {
            "name": "wrapper",
            "location": 107,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "keno-master/comm2ann.py": {
        "skip_blank": {
            "name": "skip_blank",
            "location": 30,
            "return": [
                "int"
            ],
            "arguments": {
                "d": [
                    "int",
                    "str"
                ],
                "lno": [
                    "int"
                ]
            }
        },
        "find_start": {
            "name": "find_start",
            "location": 36,
            "return": [],
            "arguments": {
                "d": [
                    "typing.Type",
                    "str",
                    "dict[str, typing.Any]"
                ],
                "lcom": []
            }
        },
        "check_target": {
            "name": "check_target",
            "location": 46,
            "return": [
                "bool"
            ],
            "arguments": {
                "stmt": [
                    "list[str]"
                ]
            }
        },
        "find_eq": {
            "name": "find_eq",
            "location": 63,
            "return": [
                "tuple[typing.Union[float,int,dict[str, int]]]"
            ],
            "arguments": {
                "d": [
                    "int"
                ],
                "lstart": [
                    "float"
                ]
            }
        },
        "find_val": {
            "name": "find_val",
            "location": 81,
            "return": [
                "tuple[typing.Union[int,list[],tuple[typing.Union[typing.Literal,typing.Literal,typing.Literal,typing.Literal]],list[list[typing.Any]],list[int],list[typing.Union[int,str]],list[tuple[typing.Union[str,typing.Any]]]]]"
            ],
            "arguments": {
                "d": [
                    "int",
                    "tuple[typing.Union[int,int,int]]"
                ],
                "poseq": [
                    "str",
                    "typing.Type",
                    "float"
                ]
            }
        },
        "find_targ": {
            "name": "find_targ",
            "location": 93,
            "return": [
                "tuple[int]"
            ],
            "arguments": {
                "d": [
                    "int",
                    "tuple[typing.Union[int,int,int]]"
                ],
                "poseq": [
                    "str",
                    "typing.Type",
                    "float"
                ]
            }
        },
        "trim": {
            "name": "trim",
            "location": 105,
            "return": [
                "None"
            ],
            "arguments": {
                "new_lines": [],
                "string": [
                    "str"
                ],
                "ltarg": [
                    "bool",
                    "str",
                    "dict[, ]",
                    "None"
                ],
                "poseq": [
                    "bool",
                    "str",
                    "dict[, ]",
                    "None"
                ],
                "lcom": [
                    "str",
                    "int",
                    "dict[, ]",
                    "list[str]",
                    "tuple[str]",
                    "None"
                ],
                "ccom": [
                    "int",
                    "bytes",
                    "str",
                    "tuple[typing.Union[int,int]]",
                    "list[str]"
                ]
            }
        },
        "_com2ann": {
            "name": "_com2ann",
            "location": 134,
            "return": [],
            "arguments": {
                "d": [
                    "str",
                    "int",
                    "float",
                    "list[str]"
                ],
                "drop_None": [
                    "str",
                    "tuple[typing.Union[int,int]]",
                    "bool",
                    "list[int]"
                ],
                "drop_Ellipsis": [
                    "int",
                    "tuple[]",
                    "str",
                    "typing.Sequence[_]"
                ]
            }
        },
        "com2ann": {
            "name": "com2ann",
            "location": 202,
            "return": [
                "None",
                "int",
                "list[]",
                "str",
                "dict[bytes, str]",
                "typing.Pattern"
            ],
            "arguments": {
                "code": [
                    "str"
                ]
            }
        },
        "translate_file": {
            "name": "translate_file",
            "location": 252,
            "return": [
                "None"
            ],
            "arguments": {
                "infile": [
                    "str"
                ],
                "outfile": [
                    "str"
                ],
                "dnone": [
                    "str",
                    "dict[, ]",
                    "int"
                ],
                "dell": [
                    "str",
                    "dict[, ]",
                    "int"
                ],
                "silent": [
                    "str",
                    "dict[, ]",
                    "int"
                ]
            }
        },
        "_Data.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "lines": [
                    "str",
                    "set[str]",
                    "typing.Sequence[str]",
                    "None",
                    "dict[str, typing.Any]"
                ],
                "tokens": [
                    "str"
                ]
            }
        },
        "trim.nopars": {
            "name": "nopars",
            "location": 114,
            "return": [],
            "arguments": {
                "s": []
            }
        }
    },
    "keno-master/play_script.py": {},
    "keno-master/pynt_extras.py": {
        "oh_never_mind": {
            "name": "oh_never_mind",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "what": [
                    "int",
                    "dict[str, typing.Any]",
                    "typing.Callable[int, None]"
                ]
            }
        },
        "has_source_code_tree_changed": {
            "name": "has_source_code_tree_changed",
            "location": 55,
            "return": [],
            "arguments": {
                "what": [
                    "int",
                    "float",
                    "dict[str, typing.Any]",
                    "list[int]"
                ]
            }
        },
        "skip_if_no_change": {
            "name": "skip_if_no_change",
            "location": 63,
            "return": [],
            "arguments": {
                "name": [
                    "str",
                    "bool"
                ]
            }
        },
        "execute_with_environment": {
            "name": "execute_with_environment",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {
                "command": [
                    "str"
                ],
                "env": [
                    "str",
                    "list[str]"
                ]
            }
        },
        "BuildState.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "what": [
                    "str"
                ]
            }
        },
        "BuildState.oh_never_mind": {
            "name": "oh_never_mind",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BuildState.has_source_code_tree_changed": {
            "name": "has_source_code_tree_changed",
            "location": 25,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "skip_if_no_change.real_decorator": {
            "name": "real_decorator",
            "location": 65,
            "return": [],
            "arguments": {
                "func": []
            }
        },
        "skip_if_no_change.real_decorator.wrapper": {
            "name": "wrapper",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "keno-master/read_dc_keno.py": {},
    "keno-master/setup.py": {
        "UploadCommand.status": {
            "name": "status",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "s": []
            }
        },
        "UploadCommand.initialize_options": {
            "name": "initialize_options",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UploadCommand.finalize_options": {
            "name": "finalize_options",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UploadCommand.run": {
            "name": "run",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "keno-master/docs/source/conf.py": {},
    "keno-master/keno/biased_rng.py": {
        "BiasedRng.__init__": {
            "name": "__init__",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BiasedRng.dates_only": {
            "name": "dates_only",
            "location": 47,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BiasedRng.random_birthday": {
            "name": "random_birthday",
            "location": 60,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BiasedRng.keno_range": {
            "name": "keno_range",
            "location": 70,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": [],
                "value": []
            }
        }
    },
    "keno-master/keno/evolutionary_parameters.py": {
        "EvolutionParameters.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "max_ticket_types": [
                    "str",
                    "int"
                ],
                "max_generations": [
                    "int",
                    "str"
                ],
                "mutation_percent": [
                    "bool",
                    "list[float]",
                    "list[str]"
                ],
                "fitness_bonus": [
                    "bool",
                    "list[float]",
                    "list[str]"
                ]
            }
        }
    },
    "keno-master/keno/game.py": {
        "Keno.ticket_ranges": {
            "name": "ticket_ranges",
            "location": 24,
            "return": [],
            "arguments": {
                "self": [],
                "to_go": [
                    "bool",
                    "typing.Callable[, ]",
                    "str"
                ]
            }
        },
        "Keno.__init__": {
            "name": "__init__",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Keno.state_drawing": {
            "name": "state_drawing",
            "location": 136,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "keno-master/keno/game_runner.py": {
        "simulate": {
            "name": "simulate",
            "location": 23,
            "return": [
                "tuple[typing.Union[int,dict[, ],list[int],list[list[int]],str,Player]]"
            ],
            "arguments": {
                "ticket": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ],
                "strategy": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ]
            }
        },
        "GameRunner.__init__": {
            "name": "__init__",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "strategy": [
                    "bool",
                    "str",
                    "dict[str, typing.Any]",
                    "None"
                ],
                "evolution_parameters": [
                    "bool",
                    "str",
                    "dict[str, typing.Any]",
                    "None"
                ]
            }
        },
        "GameRunner.generate_initial_population": {
            "name": "generate_initial_population",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GameRunner.run": {
            "name": "run",
            "location": 111,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GameRunner.cross_and_mutate": {
            "name": "cross_and_mutate",
            "location": 233,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "upcoming_generation": []
            }
        },
        "GameRunner.report_good_games": {
            "name": "report_good_games",
            "location": 269,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "i": [
                    "bool"
                ],
                "player": [
                    "int"
                ],
                "ticket": []
            }
        },
        "GameRunner.print_results": {
            "name": "print_results",
            "location": 288,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "run": {
            "name": "run",
            "location": 328,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "keno-master/keno/game_runner_test.py": {
        "xxx_slow_game": {
            "name": "xxx_slow_game",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_fast_game": {
            "name": "test_fast_game",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "keno-master/keno/game_test.py": {
        "test_static_number_machine": {
            "name": "test_static_number_machine",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_number_machine_twenty": {
            "name": "test_number_machine_twenty",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_number_machine": {
            "name": "test_number_machine",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_keno": {
            "name": "test_keno",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "keno-master/keno/number_machine.py": {
        "pick_twenty": {
            "name": "pick_twenty",
            "location": 126,
            "return": [
                "int",
                "dict[, ]",
                "list[int]",
                "list[list[int]]",
                "str"
            ],
            "arguments": {}
        },
        "generate_lots_of_numbers": {
            "name": "generate_lots_of_numbers",
            "location": 147,
            "return": [
                "typing.Generator[list[]]"
            ],
            "arguments": {}
        },
        "StaticNumbersMachine.__init__": {
            "name": "__init__",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "spots": [
                    "float",
                    "int"
                ]
            }
        },
        "StaticNumbersMachine.draw": {
            "name": "draw",
            "location": 43,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "NumbersMachine.__init__": {
            "name": "__init__",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "spots": [
                    "float",
                    "int"
                ]
            }
        },
        "NumbersMachine.draw": {
            "name": "draw",
            "location": 91,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "NumbersMachine.draw_no_caching": {
            "name": "draw_no_caching",
            "location": 108,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "run": {
            "name": "run",
            "location": 190,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "timings": {
            "name": "timings",
            "location": 202,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "keno-master/keno/play.py": {
        "run": {
            "name": "run",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "args": []
            }
        },
        "process_docopt": {
            "name": "process_docopt",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "keno-master/keno/player.py": {
        "Player.__init__": {
            "name": "__init__",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "strategy": [
                    "int"
                ]
            }
        },
        "Player.good_game": {
            "name": "good_game",
            "location": 45,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Player.evolutionary_fitness": {
            "name": "evolutionary_fitness",
            "location": 58,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Player.can_stop_any_time_i_want_to": {
            "name": "can_stop_any_time_i_want_to",
            "location": 65,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Player.go": {
            "name": "go",
            "location": 84,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Player.__str__": {
            "name": "__str__",
            "location": 123,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "keno-master/keno/player_test.py": {
        "test_three_six_ticket": {
            "name": "test_three_six_ticket",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_player": {
            "name": "test_player",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_player_str": {
            "name": "test_player_str",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "keno-master/keno/showdown.py": {
        "playone": {
            "name": "playone",
            "location": 13,
            "return": [
                "int"
            ],
            "arguments": {
                "strategy_ticket": [
                    "str"
                ]
            }
        },
        "simulate_one": {
            "name": "simulate_one",
            "location": 32,
            "return": [
                "int"
            ],
            "arguments": {
                "ticket": [
                    "int",
                    "str",
                    "float"
                ],
                "strategy": [
                    "int",
                    "str",
                    "float"
                ],
                "trials": []
            }
        },
        "showdown": {
            "name": "showdown",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "first": [
                    "int",
                    "str"
                ],
                "second": [
                    "int",
                    "str"
                ],
                "strategy": [
                    "dict[, ]"
                ]
            }
        },
        "go": {
            "name": "go",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "keno-master/keno/strategy.py": {
        "Strategy.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "state_range": [
                    "int",
                    "float"
                ],
                "min_ticket_price": [
                    "int",
                    "float"
                ],
                "max_ticket_price": [
                    "int",
                    "float",
                    "None",
                    "tuple[typing.Union[int,int]]"
                ],
                "max_plays_with_ticket_type": [
                    "str",
                    "bool",
                    "list[str]",
                    "tuple[]"
                ],
                "max_loss": [
                    "int",
                    "float",
                    "None",
                    "tuple[typing.Union[int,int]]"
                ],
                "sufficient_winnings": [
                    "int",
                    "float"
                ],
                "evade_taxes": [
                    "bool",
                    "str",
                    "dict[str, typing.Any]"
                ]
            }
        }
    },
    "keno-master/keno/ticket.py": {
        "Ticket.__init__": {
            "name": "__init__",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Ticket.copy": {
            "name": "copy",
            "location": 45,
            "return": [
                "Ticket"
            ],
            "arguments": {
                "self": []
            }
        },
        "Ticket.numbers": {
            "name": "numbers",
            "location": 63,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Ticket.pick": {
            "name": "pick",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Ticket.price": {
            "name": "price",
            "location": 83,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Ticket.randomize_ticket": {
            "name": "randomize_ticket",
            "location": 95,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Ticket.__str__": {
            "name": "__str__",
            "location": 127,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "Ticket.make_save_point": {
            "name": "make_save_point",
            "location": 140,
            "return": [
                "dict[typing.Text, ]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Ticket.geneticly_merge_ticket": {
            "name": "geneticly_merge_ticket",
            "location": 156,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ticket": [
                    "str",
                    "None",
                    "dict[, ]"
                ],
                "strategy": [
                    "int",
                    "float",
                    "str"
                ]
            }
        },
        "Ticket.mutate_ticket": {
            "name": "mutate_ticket",
            "location": 200,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "percent": [
                    "bool",
                    "float"
                ],
                "strategy": [
                    "int",
                    "float",
                    "str"
                ]
            }
        },
        "Ticket.__hash__": {
            "name": "__hash__",
            "location": 245,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Ticket.__eq__": {
            "name": "__eq__",
            "location": 269,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Ticket.calculate_payoff_n_drawings": {
            "name": "calculate_payoff_n_drawings",
            "location": 286,
            "return": [
                "list[]",
                "int",
                "float",
                "str"
            ],
            "arguments": {
                "self": [],
                "ticket": [
                    "list[str]",
                    "None"
                ],
                "strategy": [
                    "int",
                    "float"
                ]
            }
        },
        "Ticket.calculate_payoff_one_drawing": {
            "name": "calculate_payoff_one_drawing",
            "location": 312,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "state_drawing": [
                    "list[str]",
                    "dict[str, str]",
                    "str",
                    "bytes"
                ],
                "ticket": [
                    "bytes",
                    "int",
                    "list[str]",
                    "dict[int, bool]"
                ]
            }
        },
        "Ticket.check_single_winning": {
            "name": "check_single_winning",
            "location": 345,
            "return": [
                "set[]"
            ],
            "arguments": {
                "self": [],
                "picks": [
                    "dict[, ]"
                ],
                "state_drawing": [
                    "int"
                ]
            }
        },
        "Ticket.check_for_bonus": {
            "name": "check_for_bonus",
            "location": 363,
            "return": [
                "int",
                "tuple[int]"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "str"
                ]
            }
        },
        "Ticket.check_for_super_bonus": {
            "name": "check_for_super_bonus",
            "location": 400,
            "return": [
                "int",
                "tuple[typing.Union[int,float]]"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "str"
                ]
            }
        },
        "Ticket.can_i_win_this_much": {
            "name": "can_i_win_this_much",
            "location": 414,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "ticket": [
                    "str",
                    "int",
                    "None"
                ],
                "jackpot": [
                    "float"
                ]
            }
        },
        "Ticket.possible_pay_off_for_ticket_per_game": {
            "name": "possible_pay_off_for_ticket_per_game",
            "location": 430,
            "return": [],
            "arguments": {
                "self": [],
                "ticket": [
                    "dict[, ]",
                    "int"
                ]
            }
        },
        "Ticket.pay_off_chart": {
            "name": "pay_off_chart",
            "location": 460,
            "return": [],
            "arguments": {
                "self": [],
                "ticket": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ]
            }
        },
        "TicketValidator.__init__": {
            "name": "__init__",
            "location": 491,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TicketValidator.ticket_complies_with_strategy": {
            "name": "ticket_complies_with_strategy",
            "location": 494,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "ticket": [],
                "strategy": [
                    "int",
                    "str"
                ]
            }
        },
        "TicketValidator.is_good_ticket": {
            "name": "is_good_ticket",
            "location": 511,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "ticket": [
                    "int",
                    "float",
                    "str"
                ]
            }
        },
        "TicketValidator.check_ticket": {
            "name": "check_ticket",
            "location": 525,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ticket": [
                    "list[]",
                    "int"
                ]
            }
        },
        "TicketValidator.check_all_prizes_winnable": {
            "name": "check_all_prizes_winnable",
            "location": 568,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ticket": [
                    "typing.Sequence[tuple[typing.Union[typing.Any,typing.Any]]]",
                    "list[typing.Callable[, ]]"
                ]
            }
        }
    },
    "keno-master/keno/ticket_test.py": {
        "test_ticket": {
            "name": "test_ticket",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_ticket_str": {
            "name": "test_ticket_str",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_ticket_validator_is_good_ticket": {
            "name": "test_ticket_validator_is_good_ticket",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_ticket_validator_mutate": {
            "name": "test_ticket_validator_mutate",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_ticket_validator_merge": {
            "name": "test_ticket_validator_merge",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_ticket_validator_basically_ok": {
            "name": "test_ticket_validator_basically_ok",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_ticket_validator_winable": {
            "name": "test_ticket_validator_winable",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "keno-master/keno/__init__.py": {},
    "keno-master/keno/__main__.py": {
        "run": {
            "name": "run",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "keno-master/keno/__version__.py": {},
    "keno-master/keno/utility/stop_watch.py": {
        "Timer.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Timer.start": {
            "name": "start",
            "location": 16,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Timer.stop": {
            "name": "stop",
            "location": 21,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "typing.Text"
                ]
            }
        },
        "Timer.now": {
            "name": "now",
            "location": 26,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "typing.Text"
                ]
            }
        },
        "Timer.elapsed": {
            "name": "elapsed",
            "location": 30,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "typing.Text"
                ]
            }
        },
        "Timer.split": {
            "name": "split",
            "location": 34,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "typing.Text"
                ]
            }
        },
        "Timer.unsplit": {
            "name": "unsplit",
            "location": 39,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "typing.Text"
                ]
            }
        }
    },
    "keno-master/keno/utility/__init__.py": {}
}
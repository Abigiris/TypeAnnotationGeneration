{
    "kgx-master/setup.py": {},
    "kgx-master/docs/conf.py": {
        "setup": {
            "name": "setup",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "app": []
            }
        }
    },
    "kgx-master/examples/scripts/convert_nt_to_tsv.py": {
        "usage": {
            "name": "usage",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "kgx-master/examples/scripts/load_csv_to_neo4j.py": {
        "usage": {
            "name": "usage",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "kgx-master/examples/scripts/load_tsv_to_neo4j.py": {
        "usage": {
            "name": "usage",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "kgx-master/examples/scripts/read_from_neo4j.py": {
        "usage": {
            "name": "usage",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "kgx-master/kgx/config.py": {
        "get_config": {
            "name": "get_config",
            "location": 23,
            "return": [
                "dict[str, typing.Any]",
                "dict[, ]",
                "str",
                "dict[str, str]"
            ],
            "arguments": {
                "filename": []
            }
        },
        "get_jsonld_context": {
            "name": "get_jsonld_context",
            "location": 44,
            "return": [
                "str"
            ],
            "arguments": {
                "name": [
                    "typing.Text"
                ]
            }
        },
        "get_logger": {
            "name": "get_logger",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "name": [
                    "typing.Text"
                ]
            }
        },
        "get_graph_store_class": {
            "name": "get_graph_store_class",
            "location": 102,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "get_biolink_model_schema": {
            "name": "get_biolink_model_schema",
            "location": 130,
            "return": [
                "typing.Text",
                "None"
            ],
            "arguments": {
                "biolink_release": [
                    "str"
                ]
            }
        }
    },
    "kgx-master/kgx/curie_lookup_service.py": {
        "CurieLookupService.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "curie_map": [
                    "None",
                    "str",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "CurieLookupService.load_ontologies": {
            "name": "load_ontologies",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "kgx-master/kgx/error_detection.py": {
        "ErrorDetecting.__init__": {
            "name": "__init__",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "error_log": []
            }
        },
        "ErrorDetecting.clear_errors": {
            "name": "clear_errors",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ErrorDetecting.log_error": {
            "name": "log_error",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "entity": [
                    "str",
                    "typing.Sequence[str]",
                    "bool"
                ],
                "error_type": [
                    "str",
                    "typing.Mapping",
                    "Exception",
                    "set[str]",
                    "int",
                    "bytes",
                    "typing.Type",
                    "typing.Any",
                    "None"
                ],
                "message": [
                    "str",
                    "Exception",
                    "tuple[typing.Union[str,int]]",
                    "BaseException"
                ],
                "message_level": []
            }
        },
        "ErrorDetecting.get_errors": {
            "name": "get_errors",
            "location": 130,
            "return": [
                "dict[, ]"
            ],
            "arguments": {
                "self": [],
                "level": [
                    "str"
                ]
            }
        },
        "ErrorDetecting.write_report": {
            "name": "write_report",
            "location": 157,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "outstream": [
                    "None",
                    "str",
                    "bool",
                    "typing.Callable[, ]"
                ],
                "level": [
                    "None",
                    "str"
                ]
            }
        }
    },
    "kgx-master/kgx/prefix_manager.py": {
        "PrefixManager.__init__": {
            "name": "__init__",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "None",
                    "str",
                    "bytes"
                ]
            }
        },
        "PrefixManager.set_prefix_map": {
            "name": "set_prefix_map",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "m": [
                    "dict[, ]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "PrefixManager.update_prefix_map": {
            "name": "update_prefix_map",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "m": [
                    "dict[str, str]",
                    "dict[, ]"
                ]
            }
        },
        "PrefixManager.update_reverse_prefix_map": {
            "name": "update_reverse_prefix_map",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "m": [
                    "typing.Pattern",
                    "list[dict[, ]]",
                    "list[]",
                    "str",
                    "int",
                    "dict[, ]",
                    "dict[str, list[str]]"
                ]
            }
        },
        "PrefixManager.expand": {
            "name": "expand",
            "location": 105,
            "return": [
                "typing.Pattern",
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "curie": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ],
                "fallback": [
                    "bool"
                ]
            }
        },
        "PrefixManager.contract": {
            "name": "contract",
            "location": 127,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "uri": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ],
                "fallback": [
                    "bool"
                ]
            }
        },
        "PrefixManager.is_curie": {
            "name": "is_curie",
            "location": 155,
            "return": [
                "bool"
            ],
            "arguments": {
                "s": [
                    "str",
                    "bytes"
                ]
            }
        },
        "PrefixManager.is_iri": {
            "name": "is_iri",
            "location": 178,
            "return": [
                "bool"
            ],
            "arguments": {
                "s": [
                    "str",
                    "typing.Sequence[str]"
                ]
            }
        },
        "PrefixManager.has_urlfragment": {
            "name": "has_urlfragment",
            "location": 200,
            "return": [
                "bool"
            ],
            "arguments": {
                "s": [
                    "bytes",
                    "bytearray",
                    "str"
                ]
            }
        },
        "PrefixManager.get_prefix": {
            "name": "get_prefix",
            "location": 208,
            "return": [
                "None",
                "str"
            ],
            "arguments": {
                "curie": [
                    "str"
                ]
            }
        },
        "PrefixManager.get_reference": {
            "name": "get_reference",
            "location": 230,
            "return": [
                "None",
                "str"
            ],
            "arguments": {
                "curie": [
                    "str"
                ]
            }
        }
    },
    "kgx-master/kgx/transformer.py": {
        "Transformer.__init__": {
            "name": "__init__",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "stream": [
                    "bool"
                ],
                "infores_catalog": [
                    "str"
                ],
                "error_log": [
                    "None",
                    "bool",
                    "str",
                    "typing.Any"
                ]
            }
        },
        "Transformer.transform": {
            "name": "transform",
            "location": 123,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "input_args": [],
                "output_args": [
                    "str",
                    "list[str]"
                ],
                "inspector": [
                    "None",
                    "int",
                    "str",
                    "float",
                    "tuple[str]"
                ]
            }
        },
        "Transformer.get_infores_catalog": {
            "name": "get_infores_catalog",
            "location": 319,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Transformer.process": {
            "name": "process",
            "location": 326,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "source": [
                    "bytes"
                ],
                "sink": [
                    "str",
                    "float",
                    "typing.TextIO",
                    "list[]",
                    "None"
                ]
            }
        },
        "Transformer.save": {
            "name": "save",
            "location": 373,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "output_args": [
                    "str",
                    "list[str]"
                ]
            }
        },
        "Transformer.get_source": {
            "name": "get_source",
            "location": 408,
            "return": [],
            "arguments": {
                "self": [],
                "format": [
                    "str",
                    "list[str]"
                ]
            }
        },
        "Transformer.get_sink": {
            "name": "get_sink",
            "location": 429,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "kgx-master/kgx/validator.py": {
        "Validator.get_the_validator": {
            "name": "get_the_validator",
            "location": 58,
            "return": [
                "Validator"
            ],
            "arguments": {
                "cls": [],
                "verbose": [
                    "bool"
                ],
                "progress_monitor": [
                    "None",
                    "bool",
                    "str"
                ],
                "schema": [
                    "None",
                    "bool",
                    "str"
                ],
                "error_log": [
                    "None",
                    "bool",
                    "str"
                ]
            }
        },
        "Validator.__init__": {
            "name": "__init__",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "verbose": [
                    "bool"
                ],
                "progress_monitor": [
                    "None",
                    "typing.Mapping",
                    "list[str]"
                ],
                "schema": [
                    "None",
                    "str",
                    "dict[, ]",
                    "Exception"
                ],
                "error_log": [
                    "None",
                    "bool",
                    "str",
                    "typing.Any"
                ]
            }
        },
        "Validator.__call__": {
            "name": "__call__",
            "location": 107,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "entity_type": [],
                "rec": [
                    "BaseException",
                    "Exception",
                    "typing.Type",
                    "str"
                ]
            }
        },
        "Validator.get_validating_toolkit": {
            "name": "get_validating_toolkit",
            "location": 120,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Validator.get_validation_model_version": {
            "name": "get_validation_model_version",
            "location": 126,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Validator.set_biolink_model": {
            "name": "set_biolink_model",
            "location": 135,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "int",
                    "float"
                ],
                "version": [
                    "str",
                    "int",
                    "float"
                ]
            }
        },
        "Validator.get_toolkit": {
            "name": "get_toolkit",
            "location": 142,
            "return": [],
            "arguments": {
                "cls": [
                    "str",
                    "list[tuple[typing.Union[str,str]]]",
                    "int",
                    "float"
                ]
            }
        },
        "Validator.get_default_model_version": {
            "name": "get_default_model_version",
            "location": 153,
            "return": [],
            "arguments": {
                "cls": [
                    "str",
                    "dict[str, typing.Any]",
                    "typing.Callable[, ]"
                ]
            }
        },
        "Validator.analyse_node": {
            "name": "analyse_node",
            "location": 162,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "n": [
                    "bytes",
                    "bool",
                    "dict[str, str]"
                ],
                "data": [
                    "bytes",
                    "bool",
                    "dict[str, str]"
                ]
            }
        },
        "Validator.analyse_edge": {
            "name": "analyse_edge",
            "location": 173,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "u": [
                    "typing.Type",
                    "typing.IO",
                    "str",
                    "bytes"
                ],
                "v": [
                    "typing.Type",
                    "typing.IO",
                    "str",
                    "bytes"
                ],
                "k": [
                    "bool",
                    "str",
                    "collections.abc.Coroutine",
                    "typing.Type"
                ],
                "data": [
                    "typing.Type",
                    "typing.IO",
                    "str",
                    "bytes"
                ]
            }
        },
        "Validator.get_all_prefixes": {
            "name": "get_all_prefixes",
            "location": 189,
            "return": [
                "set[typing.Text]"
            ],
            "arguments": {
                "jsonld": [
                    "dict[str, typing.Any]"
                ]
            }
        },
        "Validator.get_required_node_properties": {
            "name": "get_required_node_properties",
            "location": 219,
            "return": [
                "list[]"
            ],
            "arguments": {
                "toolkit": []
            }
        },
        "Validator.get_required_edge_properties": {
            "name": "get_required_edge_properties",
            "location": 247,
            "return": [
                "list[]"
            ],
            "arguments": {
                "toolkit": []
            }
        },
        "Validator.validate": {
            "name": "validate",
            "location": 274,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "graph": [
                    "dict[, ]",
                    "list[str]",
                    "bool",
                    "None",
                    "float",
                    "str"
                ]
            }
        },
        "Validator.validate_nodes": {
            "name": "validate_nodes",
            "location": 288,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "graph": []
            }
        },
        "Validator.validate_edges": {
            "name": "validate_edges",
            "location": 310,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "graph": []
            }
        },
        "Validator.validate_node_properties": {
            "name": "validate_node_properties",
            "location": 332,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "str"
                ],
                "data": [
                    "dict[, ]",
                    "str",
                    "list[list[str]]",
                    "list[dict[str, typing.Any]]"
                ],
                "required_properties": [
                    "list[]",
                    "str",
                    "bytes",
                    "list[dict[str, typing.Any]]",
                    "dict[, ]"
                ]
            }
        },
        "Validator.validate_edge_properties": {
            "name": "validate_edge_properties",
            "location": 357,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "subject": [
                    "str",
                    "bool",
                    "dict[, ]"
                ],
                "object": [
                    "str",
                    "bool",
                    "dict[, ]"
                ],
                "data": [
                    "dict[, ]",
                    "list[list[str]]",
                    "dict[str, dict[str, str]]",
                    "bytes"
                ],
                "required_properties": [
                    "list[]",
                    "frozenset",
                    "list[str]"
                ]
            }
        },
        "Validator.validate_node_property_types": {
            "name": "validate_node_property_types",
            "location": 402,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "str",
                    "list[str]"
                ],
                "data": [
                    "dict[, ]"
                ],
                "toolkit": [
                    "None",
                    "str",
                    "dict[, ]",
                    "Exception",
                    "typing.Type",
                    "int"
                ]
            }
        },
        "Validator.validate_edge_property_types": {
            "name": "validate_edge_property_types",
            "location": 461,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "subject": [
                    "str",
                    "typing.IO",
                    "dict[, ]"
                ],
                "object": [
                    "str",
                    "typing.Type",
                    "dict[, ]"
                ],
                "data": [
                    "dict[, ]",
                    "dict[str, typing.Any]",
                    "dict[str, str]"
                ],
                "toolkit": []
            }
        },
        "Validator.validate_node_property_values": {
            "name": "validate_node_property_values",
            "location": 562,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "typing.Type",
                    "str"
                ],
                "data": [
                    "dict[, ]",
                    "str",
                    "list[]",
                    "list[dict[str, typing.Any]]",
                    "typing.Callable[[], typing.Any]"
                ]
            }
        },
        "Validator.validate_edge_property_values": {
            "name": "validate_edge_property_values",
            "location": 589,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "subject": [
                    "str",
                    "None",
                    "int",
                    "dict[, ]"
                ],
                "object": [
                    "str",
                    "bool",
                    "typing.Mapping"
                ],
                "data": [
                    "bool",
                    "list[dict[str, typing.Any]]",
                    "list[]",
                    "str",
                    "None",
                    "list[bytes]"
                ]
            }
        },
        "Validator.validate_categories": {
            "name": "validate_categories",
            "location": 631,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "Exception",
                    "str"
                ],
                "data": [
                    "dict[, ]"
                ],
                "toolkit": []
            }
        },
        "Validator.validate_edge_predicate": {
            "name": "validate_edge_predicate",
            "location": 688,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "subject": [
                    "str"
                ],
                "object": [
                    "str"
                ],
                "data": [
                    "dict[, ]"
                ],
                "toolkit": [
                    "None",
                    "tuple[typing.Union[float,float]]",
                    "bool",
                    "str"
                ]
            }
        }
    },
    "kgx-master/kgx/__init__.py": {},
    "kgx-master/kgx/cli/cli_utils.py": {
        "get_input_file_types": {
            "name": "get_input_file_types",
            "location": 29,
            "return": [
                "tuple[]"
            ],
            "arguments": {}
        },
        "get_output_file_types": {
            "name": "get_output_file_types",
            "location": 42,
            "return": [
                "tuple[]"
            ],
            "arguments": {}
        },
        "get_report_format_types": {
            "name": "get_report_format_types",
            "location": 55,
            "return": [
                "tuple[typing.Text]"
            ],
            "arguments": {}
        },
        "graph_summary": {
            "name": "graph_summary",
            "location": 68,
            "return": [],
            "arguments": {
                "inputs": [
                    "str",
                    "None"
                ],
                "input_format": [
                    "str",
                    "None"
                ],
                "input_compression": [
                    "str",
                    "None"
                ],
                "output": [
                    "str"
                ],
                "report_type": [
                    "int",
                    "None",
                    "typing.Type",
                    "str"
                ],
                "report_format": [
                    "None",
                    "str",
                    "dict[str, typing.Any]"
                ],
                "graph_name": [
                    "None",
                    "str",
                    "typing.Callable[dict[, ], None]",
                    "dict[str, str]"
                ],
                "node_facet_properties": [
                    "None",
                    "str",
                    "typing.Callable[dict[, ], None]",
                    "dict[str, str]"
                ],
                "edge_facet_properties": [
                    "None",
                    "str",
                    "typing.Callable[dict[, ], None]",
                    "dict[str, str]"
                ],
                "error_log": [
                    "typing.Text"
                ]
            }
        },
        "validate": {
            "name": "validate",
            "location": 169,
            "return": [],
            "arguments": {
                "inputs": [
                    "str",
                    "list[str]",
                    "None"
                ],
                "input_format": [
                    "str",
                    "list[str]",
                    "None"
                ],
                "input_compression": [
                    "str",
                    "list[str]",
                    "None"
                ],
                "output": [
                    "str"
                ],
                "biolink_release": [
                    "None",
                    "str",
                    "bool",
                    "typing.Final"
                ]
            }
        },
        "neo4j_download": {
            "name": "neo4j_download",
            "location": 234,
            "return": [
                "Transformer"
            ],
            "arguments": {
                "uri": [
                    "str",
                    "int"
                ],
                "username": [
                    "str",
                    "int"
                ],
                "password": [
                    "str",
                    "int"
                ],
                "output": [
                    "str",
                    "int"
                ],
                "output_format": [
                    "str",
                    "int"
                ],
                "output_compression": [
                    "str",
                    "int"
                ],
                "stream": [
                    "str"
                ],
                "node_filters": [
                    "None",
                    "str",
                    "int"
                ],
                "edge_filters": [
                    "None",
                    "str",
                    "int"
                ]
            }
        },
        "neo4j_upload": {
            "name": "neo4j_upload",
            "location": 295,
            "return": [
                "Transformer"
            ],
            "arguments": {
                "inputs": [
                    "str",
                    "int",
                    "list[str]"
                ],
                "input_format": [
                    "str",
                    "int",
                    "list[str]"
                ],
                "input_compression": [
                    "str",
                    "int",
                    "list[str]"
                ],
                "uri": [
                    "str",
                    "None"
                ],
                "username": [
                    "str",
                    "None"
                ],
                "password": [
                    "str",
                    "None"
                ],
                "stream": [
                    "str",
                    "dict[, ]"
                ],
                "node_filters": [
                    "None",
                    "str",
                    "int",
                    "list[str]"
                ],
                "edge_filters": [
                    "None",
                    "str",
                    "int",
                    "list[str]"
                ]
            }
        },
        "_validate_files": {
            "name": "_validate_files",
            "location": 352,
            "return": [
                "list[typing.Union[typing.Text,dict[str, str]]]"
            ],
            "arguments": {
                "cwd": [
                    "str"
                ],
                "file_paths": [
                    "str",
                    "list[str]",
                    "tuple[str]"
                ],
                "context": [
                    "typing.Text"
                ]
            }
        },
        "_process_knowledge_source": {
            "name": "_process_knowledge_source",
            "location": 378,
            "return": [
                "bool",
                "tuple[]"
            ],
            "arguments": {
                "ksf": [
                    "str"
                ],
                "spec": []
            }
        },
        "transform": {
            "name": "transform",
            "location": 400,
            "return": [
                "None"
            ],
            "arguments": {
                "inputs": [
                    "str",
                    "tuple[]"
                ],
                "input_format": [
                    "None",
                    "str",
                    "dict[str, str]",
                    "typing.Any",
                    "bool"
                ],
                "input_compression": [
                    "None",
                    "str",
                    "dict[str, str]",
                    "typing.Any",
                    "bool"
                ],
                "output": [
                    "None",
                    "str",
                    "dict[str, str]",
                    "typing.Any",
                    "bool"
                ],
                "output_format": [
                    "None",
                    "str",
                    "dict[str, str]",
                    "typing.Any",
                    "bool"
                ],
                "output_compression": [
                    "None",
                    "str",
                    "dict[str, str]",
                    "typing.Any",
                    "bool"
                ],
                "stream": [
                    "bool"
                ],
                "node_filters": [
                    "None",
                    "str",
                    "dict[str, str]",
                    "typing.Any",
                    "bool"
                ],
                "edge_filters": [
                    "None",
                    "str",
                    "dict[str, str]",
                    "typing.Any",
                    "bool"
                ],
                "transform_config": [
                    "str"
                ],
                "source": [
                    "None",
                    "str",
                    "dict[, ]",
                    "list[str]",
                    "bool",
                    "typing.Callable[str, str]",
                    "dict[str, str]"
                ],
                "knowledge_sources": [
                    "tuple[]",
                    "list[str]"
                ],
                "processes": [
                    "int"
                ],
                "infores_catalog": [
                    "None",
                    "dict[str, str]",
                    "dict[, ]",
                    "list[str]",
                    "str"
                ]
            }
        },
        "merge": {
            "name": "merge",
            "location": 570,
            "return": [],
            "arguments": {
                "merge_config": [
                    "str"
                ],
                "source": [
                    "None",
                    "dict[, ]",
                    "typing.Any",
                    "bool",
                    "dict[str, typing.Any]"
                ],
                "destination": [
                    "None",
                    "typing.MutableMapping",
                    "list[str]",
                    "dict[, ]",
                    "list[dict[, ]]",
                    "typing.Callable[, ]"
                ],
                "processes": [
                    "int"
                ]
            }
        },
        "parse_source": {
            "name": "parse_source",
            "location": 737,
            "return": [],
            "arguments": {
                "key": [
                    "str",
                    "None",
                    "bool"
                ],
                "source": [
                    "str",
                    "list[str]"
                ],
                "output_directory": [
                    "bytes",
                    "str"
                ],
                "prefix_map": [
                    "None",
                    "bool",
                    "typing.Iterable[int]",
                    "str",
                    "float"
                ],
                "node_property_predicates": [
                    "None",
                    "bool",
                    "typing.Iterable[int]",
                    "str",
                    "float"
                ],
                "predicate_mappings": [
                    "None",
                    "bool",
                    "typing.Iterable[int]",
                    "str",
                    "float"
                ],
                "checkpoint": [
                    "bool"
                ]
            }
        },
        "transform_source": {
            "name": "transform_source",
            "location": 798,
            "return": [],
            "arguments": {
                "key": [
                    "str",
                    "None",
                    "bool",
                    "dict[str, str]"
                ],
                "source": [
                    "bool",
                    "str",
                    "None"
                ],
                "output_directory": [
                    "bool",
                    "str",
                    "None"
                ],
                "prefix_map": [
                    "None",
                    "bool",
                    "typing.Iterable[int]",
                    "str",
                    "float"
                ],
                "node_property_predicates": [
                    "None",
                    "bool",
                    "typing.Iterable[int]",
                    "str",
                    "float"
                ],
                "predicate_mappings": [
                    "None",
                    "bool",
                    "typing.Iterable[int]",
                    "str",
                    "float"
                ],
                "reverse_prefix_map": [
                    "None",
                    "typing.TextIO"
                ],
                "reverse_predicate_mappings": [
                    "None",
                    "typing.TextIO"
                ],
                "property_types": [
                    "None",
                    "typing.TextIO"
                ],
                "checkpoint": [
                    "bool"
                ],
                "preserve_graph": [
                    "bool"
                ],
                "stream": [
                    "bool"
                ],
                "infores_catalog": [
                    "str",
                    "bytes"
                ]
            }
        },
        "prepare_input_args": {
            "name": "prepare_input_args",
            "location": 885,
            "return": [],
            "arguments": {
                "key": [
                    "str",
                    "None",
                    "list[str]"
                ],
                "source": [
                    "list[str]",
                    "bytes",
                    "str"
                ],
                "output_directory": [
                    "str",
                    "bool",
                    "None"
                ],
                "prefix_map": [],
                "node_property_predicates": [
                    "None",
                    "bool",
                    "list[str]",
                    "str"
                ],
                "predicate_mappings": [
                    "dict[str, typing.Any]"
                ]
            }
        },
        "prepare_output_args": {
            "name": "prepare_output_args",
            "location": 998,
            "return": [],
            "arguments": {
                "key": [
                    "str",
                    "typing.Callable[dict[, ], dict[, ]]",
                    "None"
                ],
                "source": [
                    "str"
                ],
                "output_directory": [
                    "str"
                ],
                "reverse_prefix_map": [
                    "list[str]"
                ],
                "reverse_predicate_mappings": [
                    "list[str]",
                    "dict[str, int]"
                ],
                "property_types": []
            }
        },
        "apply_operations": {
            "name": "apply_operations",
            "location": 1088,
            "return": [
                "str"
            ],
            "arguments": {
                "source": [
                    "str",
                    "list[]"
                ],
                "graph": [
                    "str"
                ]
            }
        },
        "prepare_top_level_args": {
            "name": "prepare_top_level_args",
            "location": 1117,
            "return": [
                "dict[typing.Text, typing.Union[bool,set[],dict[, ]]]"
            ],
            "arguments": {
                "d": []
            }
        }
    },
    "kgx-master/kgx/cli/__init__.py": {
        "error": {
            "name": "error",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "msg": [
                    "int",
                    "str"
                ]
            }
        },
        "cli": {
            "name": "cli",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "graph_summary_wrapper": {
            "name": "graph_summary_wrapper",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {
                "inputs": [
                    "str",
                    "int",
                    "dict[str, dict[, ]]",
                    "typing.Sequence[str]",
                    "list[typing.Any]",
                    "None"
                ],
                "input_format": [
                    "str",
                    "int",
                    "dict[str, dict[, ]]",
                    "typing.Sequence[str]",
                    "list[typing.Any]",
                    "None"
                ],
                "input_compression": [
                    "str",
                    "int",
                    "dict[str, dict[, ]]",
                    "typing.Sequence[str]",
                    "list[typing.Any]",
                    "None"
                ],
                "output": [
                    "str",
                    "int",
                    "dict[str, dict[, ]]",
                    "typing.Sequence[str]",
                    "list[typing.Any]",
                    "None"
                ],
                "report_type": [
                    "str",
                    "int",
                    "dict[str, dict[, ]]",
                    "typing.Sequence[str]",
                    "list[typing.Any]",
                    "None"
                ],
                "report_format": [
                    "str",
                    "int",
                    "dict[str, dict[, ]]",
                    "typing.Sequence[str]",
                    "list[typing.Any]",
                    "None"
                ],
                "graph_name": [
                    "str",
                    "int",
                    "dict[str, dict[, ]]",
                    "typing.Sequence[str]",
                    "list[typing.Any]",
                    "None"
                ],
                "node_facet_properties": [
                    "str",
                    "dict[str, dict[, ]]",
                    "list[typing.Any]"
                ],
                "edge_facet_properties": [
                    "str",
                    "dict[str, dict[, ]]",
                    "list[typing.Any]"
                ],
                "error_log": [
                    "typing.Text"
                ]
            }
        },
        "validate_wrapper": {
            "name": "validate_wrapper",
            "location": 175,
            "return": [
                "None"
            ],
            "arguments": {
                "inputs": [
                    "int",
                    "list[str]",
                    "dict[, ]"
                ],
                "input_format": [
                    "int",
                    "list[str]",
                    "dict[, ]"
                ],
                "input_compression": [
                    "int",
                    "list[str]",
                    "dict[, ]"
                ],
                "output": [
                    "int",
                    "list[str]",
                    "dict[, ]"
                ],
                "biolink_release": [
                    "None",
                    "int",
                    "list[str]",
                    "dict[, ]"
                ]
            }
        },
        "neo4j_download_wrapper": {
            "name": "neo4j_download_wrapper",
            "location": 254,
            "return": [
                "None"
            ],
            "arguments": {
                "uri": [
                    "str",
                    "tuple[]",
                    "int"
                ],
                "username": [
                    "str",
                    "tuple[]",
                    "int"
                ],
                "password": [
                    "str",
                    "tuple[]",
                    "int"
                ],
                "output": [
                    "str",
                    "tuple[]",
                    "int"
                ],
                "output_format": [
                    "str",
                    "tuple[]",
                    "int"
                ],
                "output_compression": [
                    "str",
                    "tuple[]",
                    "int"
                ],
                "stream": [
                    "str",
                    "tuple[]",
                    "int"
                ],
                "node_filters": [
                    "str",
                    "tuple[]",
                    "int"
                ],
                "edge_filters": [
                    "str",
                    "tuple[]",
                    "int"
                ]
            }
        },
        "neo4j_upload_wrapper": {
            "name": "neo4j_upload_wrapper",
            "location": 346,
            "return": [
                "None"
            ],
            "arguments": {
                "inputs": [
                    "int",
                    "str",
                    "float"
                ],
                "input_format": [
                    "int",
                    "str",
                    "float"
                ],
                "input_compression": [
                    "int",
                    "str",
                    "float"
                ],
                "uri": [
                    "int",
                    "str",
                    "float"
                ],
                "username": [
                    "int",
                    "str",
                    "float"
                ],
                "password": [
                    "int",
                    "str",
                    "float"
                ],
                "stream": [
                    "int",
                    "str",
                    "float"
                ],
                "node_filters": [
                    "int",
                    "str",
                    "float"
                ],
                "edge_filters": [
                    "int",
                    "str",
                    "float"
                ]
            }
        },
        "transform_wrapper": {
            "name": "transform_wrapper",
            "location": 473,
            "return": [
                "None"
            ],
            "arguments": {
                "inputs": [
                    "str",
                    "list[int]",
                    "int",
                    "tuple[]"
                ],
                "input_format": [
                    "str",
                    "list[int]",
                    "int",
                    "tuple[]"
                ],
                "input_compression": [
                    "str",
                    "list[int]",
                    "int",
                    "tuple[]"
                ],
                "output": [
                    "str",
                    "list[int]",
                    "int",
                    "tuple[]"
                ],
                "output_format": [
                    "str",
                    "list[int]",
                    "int",
                    "tuple[]"
                ],
                "output_compression": [
                    "str",
                    "list[int]",
                    "int",
                    "tuple[]"
                ],
                "stream": [
                    "str",
                    "list[int]",
                    "int",
                    "tuple[]"
                ],
                "node_filters": [
                    "str",
                    "list[int]",
                    "int",
                    "tuple[]"
                ],
                "edge_filters": [
                    "str",
                    "list[int]",
                    "int",
                    "tuple[]"
                ],
                "transform_config": [
                    "str",
                    "list[int]",
                    "int",
                    "tuple[]"
                ],
                "source": [
                    "str",
                    "list[int]",
                    "int",
                    "tuple[]"
                ],
                "knowledge_sources": [
                    "str",
                    "list[int]",
                    "int",
                    "tuple[]"
                ],
                "processes": [
                    "str",
                    "list[int]",
                    "int",
                    "tuple[]"
                ],
                "infores_catalog": [
                    "None",
                    "str",
                    "list[int]",
                    "int",
                    "tuple[]"
                ]
            }
        },
        "merge_wrapper": {
            "name": "merge_wrapper",
            "location": 572,
            "return": [
                "None"
            ],
            "arguments": {
                "merge_config": [
                    "dict[, ]",
                    "int"
                ],
                "source": [
                    "dict[, ]",
                    "int"
                ],
                "destination": [
                    "dict[, ]",
                    "int"
                ],
                "processes": [
                    "dict[, ]",
                    "int"
                ]
            }
        }
    },
    "kgx-master/kgx/graph/base_graph.py": {
        "BaseGraph.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseGraph.add_node": {
            "name": "add_node",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "bool"
                ]
            }
        },
        "BaseGraph.add_edge": {
            "name": "add_edge",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "subject_node": [
                    "bool",
                    "typing.Sequence[str]",
                    "str"
                ],
                "object_node": [
                    "bool",
                    "typing.Sequence[str]",
                    "str"
                ],
                "edge_key": [
                    "None",
                    "bool",
                    "typing.Sequence[str]",
                    "str"
                ]
            }
        },
        "BaseGraph.add_node_attribute": {
            "name": "add_node_attribute",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "str",
                    "int",
                    "list[typing.Union[typing.Any,typing.Any]]",
                    "typing.Pattern"
                ],
                "key": [
                    "str",
                    "int",
                    "list[typing.Union[typing.Any,typing.Any]]",
                    "typing.Pattern"
                ],
                "value": [
                    "str",
                    "int",
                    "list[typing.Union[typing.Any,typing.Any]]",
                    "typing.Pattern"
                ]
            }
        },
        "BaseGraph.add_edge_attribute": {
            "name": "add_edge_attribute",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "subject_node": [
                    "str",
                    "list[str]",
                    "bool",
                    "dict[str, str]",
                    "list[dict[str, typing.Any]]",
                    "list[]"
                ],
                "object_node": [
                    "str",
                    "list[str]",
                    "bool",
                    "dict[str, str]",
                    "list[dict[str, typing.Any]]",
                    "list[]"
                ],
                "edge_key": [
                    "str",
                    "list[str]",
                    "bool",
                    "dict[str, str]",
                    "list[dict[str, typing.Any]]",
                    "list[]"
                ],
                "attr_key": [
                    "str",
                    "list[str]",
                    "bool",
                    "dict[str, str]",
                    "list[dict[str, typing.Any]]",
                    "list[]"
                ],
                "attr_value": [
                    "str",
                    "list[str]",
                    "bool",
                    "dict[str, str]",
                    "list[dict[str, typing.Any]]",
                    "list[]"
                ]
            }
        },
        "BaseGraph.update_node_attribute": {
            "name": "update_node_attribute",
            "location": 108,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "str",
                    "int",
                    "list[]",
                    "None"
                ],
                "key": [
                    "str",
                    "int",
                    "list[]",
                    "None"
                ],
                "value": [
                    "str",
                    "int",
                    "list[]",
                    "None"
                ]
            }
        },
        "BaseGraph.update_edge_attribute": {
            "name": "update_edge_attribute",
            "location": 129,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "subject_node": [
                    "str",
                    "list[str]"
                ],
                "object_node": [
                    "str",
                    "list[str]"
                ],
                "edge_key": [
                    "str",
                    "list[str]"
                ],
                "attr_key": [
                    "str",
                    "list[str]"
                ],
                "attr_value": [
                    "str",
                    "list[str]"
                ]
            }
        },
        "BaseGraph.get_node": {
            "name": "get_node",
            "location": 161,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "bool"
                ]
            }
        },
        "BaseGraph.get_edge": {
            "name": "get_edge",
            "location": 178,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "subject_node": [
                    "bool",
                    "str",
                    "set[tuple[typing.Union[int,int]]]"
                ],
                "object_node": [
                    "bool",
                    "str",
                    "set[tuple[typing.Union[int,int]]]"
                ],
                "edge_key": [
                    "bool",
                    "str",
                    "set[tuple[typing.Union[int,int]]]"
                ]
            }
        },
        "BaseGraph.nodes": {
            "name": "nodes",
            "location": 201,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "bool"
                ]
            }
        },
        "BaseGraph.edges": {
            "name": "edges",
            "location": 218,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "keys": [
                    "bool"
                ],
                "data": [
                    "bool"
                ]
            }
        },
        "BaseGraph.in_edges": {
            "name": "in_edges",
            "location": 237,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "str",
                    "dict[, ]",
                    "None",
                    "typing.Callable[dict[, ], None]",
                    "list[]",
                    "tuple[]"
                ],
                "keys": [
                    "bool"
                ],
                "data": [
                    "bool"
                ]
            }
        },
        "BaseGraph.out_edges": {
            "name": "out_edges",
            "location": 258,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "str",
                    "collections.abc.Awaitable[]",
                    "typing.Callable[, ]",
                    "None"
                ],
                "keys": [
                    "bool"
                ],
                "data": [
                    "bool"
                ]
            }
        },
        "BaseGraph.nodes_iter": {
            "name": "nodes_iter",
            "location": 279,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseGraph.edges_iter": {
            "name": "edges_iter",
            "location": 291,
            "return": [
                "typing.Generator[tuple[]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseGraph.remove_node": {
            "name": "remove_node",
            "location": 304,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "bool",
                    "str"
                ]
            }
        },
        "BaseGraph.remove_edge": {
            "name": "remove_edge",
            "location": 320,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "subject_node": [
                    "bool",
                    "str"
                ],
                "object_node": [
                    "bool",
                    "str"
                ],
                "edge_key": [
                    "None",
                    "bool",
                    "str"
                ]
            }
        },
        "BaseGraph.has_node": {
            "name": "has_node",
            "location": 342,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "bool",
                    "str"
                ]
            }
        },
        "BaseGraph.has_edge": {
            "name": "has_edge",
            "location": 359,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "subject_node": [
                    "bool",
                    "str"
                ],
                "object_node": [
                    "bool",
                    "str"
                ],
                "edge_key": [
                    "None",
                    "bool",
                    "str"
                ]
            }
        },
        "BaseGraph.number_of_nodes": {
            "name": "number_of_nodes",
            "location": 382,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseGraph.number_of_edges": {
            "name": "number_of_edges",
            "location": 393,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseGraph.degree": {
            "name": "degree",
            "location": 404,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseGraph.clear": {
            "name": "clear",
            "location": 410,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseGraph.set_node_attributes": {
            "name": "set_node_attributes",
            "location": 417,
            "return": [
                "None"
            ],
            "arguments": {
                "graph": [
                    "int",
                    "list[list[str]]",
                    "str",
                    "list[]"
                ],
                "attributes": [
                    "int",
                    "list[list[str]]",
                    "str",
                    "list[]"
                ]
            }
        },
        "BaseGraph.set_edge_attributes": {
            "name": "set_edge_attributes",
            "location": 436,
            "return": [
                "None"
            ],
            "arguments": {
                "graph": [
                    "int",
                    "str"
                ],
                "attributes": [
                    "int",
                    "str"
                ]
            }
        },
        "BaseGraph.get_node_attributes": {
            "name": "get_node_attributes",
            "location": 455,
            "return": [
                "None"
            ],
            "arguments": {
                "graph": [
                    "bool",
                    "list[str]",
                    "list[dict[str, str]]",
                    "str"
                ],
                "attr_key": [
                    "bool",
                    "list[str]",
                    "list[dict[str, str]]",
                    "str"
                ]
            }
        },
        "BaseGraph.get_edge_attributes": {
            "name": "get_edge_attributes",
            "location": 474,
            "return": [
                "None"
            ],
            "arguments": {
                "graph": [
                    "str",
                    "bool",
                    "set[str]"
                ],
                "attr_key": [
                    "str",
                    "bool",
                    "set[str]"
                ]
            }
        },
        "BaseGraph.relabel_nodes": {
            "name": "relabel_nodes",
            "location": 493,
            "return": [
                "None"
            ],
            "arguments": {
                "graph": [
                    "dict[str, typing.Any]",
                    "list[]",
                    "bool",
                    "list[dict[str, typing.Any]]"
                ],
                "mapping": [
                    "dict[str, typing.Any]",
                    "list[]",
                    "bool",
                    "list[dict[str, typing.Any]]"
                ]
            }
        }
    },
    "kgx-master/kgx/graph/nx_graph.py": {
        "NxGraph.__init__": {
            "name": "__init__",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "NxGraph.add_node": {
            "name": "add_node",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "int",
                    "str"
                ]
            }
        },
        "NxGraph.add_edge": {
            "name": "add_edge",
            "location": 46,
            "return": [],
            "arguments": {
                "self": [],
                "subject_node": [
                    "bytes",
                    "int",
                    "str",
                    "list[list[int]]",
                    "None"
                ],
                "object_node": [
                    "bytes",
                    "int",
                    "str",
                    "list[list[int]]",
                    "None"
                ],
                "edge_key": [
                    "None",
                    "bytes",
                    "int",
                    "str",
                    "list[list[int]]"
                ]
            }
        },
        "NxGraph.add_node_attribute": {
            "name": "add_node_attribute",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "str",
                    "dict[, ]",
                    "None",
                    "typing.Type"
                ],
                "attr_key": [
                    "str",
                    "dict[, ]",
                    "None",
                    "typing.Type"
                ],
                "attr_value": [
                    "str",
                    "dict[, ]",
                    "None",
                    "typing.Type"
                ]
            }
        },
        "NxGraph.add_edge_attribute": {
            "name": "add_edge_attribute",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "subject_node": [
                    "str",
                    "bool"
                ],
                "object_node": [
                    "str",
                    "bool"
                ],
                "edge_key": [
                    "str",
                    "bool"
                ],
                "attr_key": [
                    "str",
                    "bool"
                ],
                "attr_value": [
                    "str",
                    "bool"
                ]
            }
        },
        "NxGraph.update_node_attribute": {
            "name": "update_node_attribute",
            "location": 115,
            "return": [],
            "arguments": {
                "self": [],
                "node": [
                    "float",
                    "str",
                    "None"
                ],
                "attr_key": [
                    "str",
                    "int"
                ],
                "attr_value": [
                    "str",
                    "int"
                ],
                "preserve": [
                    "bool"
                ]
            }
        },
        "NxGraph.update_edge_attribute": {
            "name": "update_edge_attribute",
            "location": 145,
            "return": [
                "dict[str, str]",
                "list[dict[str, typing.Any]]",
                "dict[int, str]",
                "str",
                "dict[str, dict[str, typing.Any]]"
            ],
            "arguments": {
                "self": [],
                "subject_node": [
                    "str"
                ],
                "object_node": [
                    "str"
                ],
                "edge_key": [
                    "str"
                ],
                "attr_key": [
                    "str",
                    "None"
                ],
                "attr_value": [
                    "str",
                    "None"
                ],
                "preserve": [
                    "bool"
                ]
            }
        },
        "NxGraph.get_node": {
            "name": "get_node",
            "location": 186,
            "return": [
                "dict[, ]"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "str",
                    "None",
                    "int"
                ]
            }
        },
        "NxGraph.get_edge": {
            "name": "get_edge",
            "location": 206,
            "return": [
                "dict[, ]",
                "float",
                "int"
            ],
            "arguments": {
                "self": [],
                "subject_node": [
                    "int",
                    "None"
                ],
                "object_node": [
                    "int",
                    "None"
                ],
                "edge_key": [
                    "None",
                    "int"
                ]
            }
        },
        "NxGraph.nodes": {
            "name": "nodes",
            "location": 232,
            "return": [],
            "arguments": {
                "self": [],
                "data": [
                    "bool"
                ]
            }
        },
        "NxGraph.edges": {
            "name": "edges",
            "location": 249,
            "return": [],
            "arguments": {
                "self": [],
                "keys": [
                    "bool"
                ],
                "data": [
                    "bool"
                ]
            }
        },
        "NxGraph.in_edges": {
            "name": "in_edges",
            "location": 268,
            "return": [],
            "arguments": {
                "self": [],
                "node": [
                    "dict[, ]",
                    "str",
                    "dict[str, typing.Any]"
                ],
                "keys": [
                    "bool"
                ],
                "data": [
                    "bool"
                ]
            }
        },
        "NxGraph.out_edges": {
            "name": "out_edges",
            "location": 289,
            "return": [],
            "arguments": {
                "self": [],
                "node": [
                    "dict[, ]",
                    "str",
                    "dict[str, typing.Any]"
                ],
                "keys": [
                    "bool"
                ],
                "data": [
                    "bool"
                ]
            }
        },
        "NxGraph.nodes_iter": {
            "name": "nodes_iter",
            "location": 310,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "NxGraph.edges_iter": {
            "name": "edges_iter",
            "location": 324,
            "return": [
                "typing.Generator[tuple[]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "NxGraph.remove_node": {
            "name": "remove_node",
            "location": 338,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "NxGraph.remove_edge": {
            "name": "remove_edge",
            "location": 350,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "subject_node": [
                    "str",
                    "int"
                ],
                "object_node": [
                    "str",
                    "int"
                ],
                "edge_key": [
                    "None",
                    "str",
                    "int"
                ]
            }
        },
        "NxGraph.has_node": {
            "name": "has_node",
            "location": 368,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "NxGraph.has_edge": {
            "name": "has_edge",
            "location": 385,
            "return": [],
            "arguments": {
                "self": [],
                "subject_node": [
                    "str",
                    "bytes",
                    "int",
                    "list[str]"
                ],
                "object_node": [
                    "str",
                    "bytes",
                    "int",
                    "list[str]"
                ],
                "edge_key": [
                    "None",
                    "str",
                    "bytes",
                    "int",
                    "list[str]"
                ]
            }
        },
        "NxGraph.number_of_nodes": {
            "name": "number_of_nodes",
            "location": 408,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NxGraph.number_of_edges": {
            "name": "number_of_edges",
            "location": 419,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NxGraph.degree": {
            "name": "degree",
            "location": 430,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NxGraph.clear": {
            "name": "clear",
            "location": 436,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "NxGraph.set_node_attributes": {
            "name": "set_node_attributes",
            "location": 443,
            "return": [],
            "arguments": {
                "graph": [
                    "str",
                    "float"
                ],
                "attributes": [
                    "str",
                    "float"
                ]
            }
        },
        "NxGraph.set_edge_attributes": {
            "name": "set_edge_attributes",
            "location": 458,
            "return": [],
            "arguments": {
                "graph": [
                    "bool",
                    "float"
                ],
                "attributes": [
                    "bool",
                    "float"
                ]
            }
        },
        "NxGraph.get_node_attributes": {
            "name": "get_node_attributes",
            "location": 477,
            "return": [],
            "arguments": {
                "graph": [
                    "str",
                    "typing.Callable[, ]"
                ],
                "attr_key": [
                    "str",
                    "typing.Callable[, ]"
                ]
            }
        },
        "NxGraph.get_edge_attributes": {
            "name": "get_edge_attributes",
            "location": 498,
            "return": [],
            "arguments": {
                "graph": [
                    "str",
                    "list[str]"
                ],
                "attr_key": [
                    "str",
                    "list[str]"
                ]
            }
        },
        "NxGraph.relabel_nodes": {
            "name": "relabel_nodes",
            "location": 519,
            "return": [
                "None"
            ],
            "arguments": {
                "graph": [
                    "int",
                    "dict[, ]"
                ],
                "mapping": [
                    "int",
                    "dict[, ]"
                ]
            }
        }
    },
    "kgx-master/kgx/graph/__init__.py": {},
    "kgx-master/kgx/graph_operations/clique_merge.py": {
        "clique_merge": {
            "name": "clique_merge",
            "location": 28,
            "return": [
                "tuple[typing.Union[int,str,dict[, ],list[int],tuple[typing.Union[typing.Any,typing.Any]],dict[str, typing.Any],tuple[typing.Union[typing.Literal,typing.Literal,typing.Literal]]]]"
            ],
            "arguments": {
                "target_graph": [
                    "int",
                    "dict[str, typing.Any]",
                    "float",
                    "None"
                ],
                "leader_annotation": [
                    "None",
                    "bool",
                    "tuple[typing.Union[int,...]]",
                    "str"
                ],
                "prefix_prioritization_map": [
                    "dict[, ]",
                    "dict[str, typing.Any]"
                ],
                "category_mapping": [
                    "None",
                    "float",
                    "int",
                    "str"
                ],
                "strict": [
                    "bool"
                ]
            }
        },
        "build_cliques": {
            "name": "build_cliques",
            "location": 88,
            "return": [],
            "arguments": {
                "target_graph": []
            }
        },
        "elect_leader": {
            "name": "elect_leader",
            "location": 137,
            "return": [
                "str",
                "bytes",
                "dict[, ]"
            ],
            "arguments": {
                "target_graph": [
                    "str",
                    "bytes",
                    "dict[, ]"
                ],
                "clique_graph": [],
                "leader_annotation": [
                    "bool",
                    "collections.abc.Awaitable[]"
                ],
                "prefix_prioritization_map": [],
                "category_mapping": [
                    "int",
                    "str",
                    "dict[, ]"
                ],
                "strict": [
                    "bool"
                ]
            }
        },
        "consolidate_edges": {
            "name": "consolidate_edges",
            "location": 252,
            "return": [],
            "arguments": {
                "target_graph": [
                    "int",
                    "tuple[typing.Union[float,float]]",
                    "None",
                    "dict[, ]"
                ],
                "clique_graph": [],
                "leader_annotation": [
                    "list[]",
                    "int",
                    "str",
                    "typing.Sequence[int]"
                ]
            }
        },
        "update_node_categories": {
            "name": "update_node_categories",
            "location": 388,
            "return": [
                "str"
            ],
            "arguments": {
                "target_graph": [],
                "clique_graph": [],
                "clique": [
                    "str"
                ],
                "category_mapping": [
                    "bool",
                    "None",
                    "str"
                ],
                "strict": [
                    "bool"
                ]
            }
        },
        "get_clique_category": {
            "name": "get_clique_category",
            "location": 474,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "clique_graph": [],
                "clique": [
                    "dict[str, float]",
                    "bytes",
                    "list[dict[, ]]"
                ]
            }
        },
        "check_categories": {
            "name": "check_categories",
            "location": 502,
            "return": [
                "tuple[list[str]]"
            ],
            "arguments": {
                "categories": [
                    "dict[, ]",
                    "list[str]",
                    "str"
                ],
                "closure": [],
                "category_mapping": []
            }
        },
        "check_all_categories": {
            "name": "check_all_categories",
            "location": 558,
            "return": [
                "tuple[list[]]"
            ],
            "arguments": {
                "categories": [
                    "dict[str, typing.Any]"
                ]
            }
        },
        "sort_categories": {
            "name": "sort_categories",
            "location": 600,
            "return": [
                "list[typing.Union[int,typing.Text]]"
            ],
            "arguments": {
                "categories": [
                    "str"
                ]
            }
        },
        "get_category_from_equivalence": {
            "name": "get_category_from_equivalence",
            "location": 623,
            "return": [
                "list[]"
            ],
            "arguments": {
                "target_graph": [
                    "bool",
                    "typing.Iterable[]",
                    "float"
                ],
                "clique_graph": [],
                "node": [],
                "attributes": [
                    "bool",
                    "typing.Iterable[]",
                    "float"
                ]
            }
        },
        "get_leader_by_annotation": {
            "name": "get_leader_by_annotation",
            "location": 662,
            "return": [
                "tuple[typing.Optional[typing.Text]]"
            ],
            "arguments": {
                "target_graph": [
                    "bool",
                    "str",
                    "dict[, ]"
                ],
                "clique_graph": [],
                "clique": [
                    "str",
                    "dict[, ]"
                ],
                "leader_annotation": [
                    "int",
                    "dict[, ]",
                    "str",
                    "list[]"
                ]
            }
        },
        "get_leader_by_prefix_priority": {
            "name": "get_leader_by_prefix_priority",
            "location": 716,
            "return": [
                "tuple[typing.Union[str,int,set[],dict[int, tuple[typing.Union[int,int]]],None]]"
            ],
            "arguments": {
                "target_graph": [
                    "bool",
                    "str",
                    "None",
                    "float"
                ],
                "clique_graph": [
                    "bool",
                    "str",
                    "None",
                    "float"
                ],
                "clique": [
                    "str",
                    "dict[, ]"
                ],
                "prefix_priority_list": [
                    "str"
                ]
            }
        },
        "get_leader_by_sort": {
            "name": "get_leader_by_sort",
            "location": 754,
            "return": [
                "tuple[typing.Text]"
            ],
            "arguments": {
                "target_graph": [
                    "bool",
                    "str",
                    "dict[, ]"
                ],
                "clique_graph": [
                    "bool",
                    "str",
                    "dict[, ]"
                ],
                "clique": [
                    "str",
                    "list[str]"
                ]
            }
        }
    },
    "kgx-master/kgx/graph_operations/graph_merge.py": {
        "merge_all_graphs": {
            "name": "merge_all_graphs",
            "location": 12,
            "return": [],
            "arguments": {
                "graphs": [],
                "preserve": [
                    "bool"
                ]
            }
        },
        "merge_graphs": {
            "name": "merge_graphs",
            "location": 59,
            "return": [
                "str",
                "int",
                "None"
            ],
            "arguments": {
                "graph": [
                    "str",
                    "int",
                    "None"
                ],
                "graphs": [
                    "str"
                ],
                "preserve": [
                    "bool"
                ]
            }
        },
        "add_all_nodes": {
            "name": "add_all_nodes",
            "location": 92,
            "return": [
                "int"
            ],
            "arguments": {
                "g1": [],
                "g2": [],
                "preserve": [
                    "bool"
                ]
            }
        },
        "merge_node": {
            "name": "merge_node",
            "location": 122,
            "return": [],
            "arguments": {
                "g": [],
                "n": [
                    "bool"
                ],
                "data": [
                    "bytes",
                    "str",
                    "dict[, ]"
                ],
                "preserve": [
                    "bool"
                ]
            }
        },
        "add_all_edges": {
            "name": "add_all_edges",
            "location": 151,
            "return": [
                "int"
            ],
            "arguments": {
                "g1": [
                    "str",
                    "typing.Mapping"
                ],
                "g2": [],
                "preserve": [
                    "bool"
                ]
            }
        },
        "merge_edge": {
            "name": "merge_edge",
            "location": 181,
            "return": [],
            "arguments": {
                "g": [],
                "u": [
                    "int",
                    "dict[str, dict[, ]]",
                    "str"
                ],
                "v": [
                    "int",
                    "dict[str, dict[, ]]",
                    "str"
                ],
                "key": [
                    "int",
                    "dict[str, dict[, ]]",
                    "str"
                ],
                "data": [
                    "str",
                    "tuple[typing.Union[int,int]]",
                    "dict[, ]",
                    "int"
                ],
                "preserve": [
                    "bool"
                ]
            }
        }
    },
    "kgx-master/kgx/graph_operations/meta_knowledge_graph.py": {
        "mkg_default": {
            "name": "mkg_default",
            "location": 29,
            "return": [
                "list[float]"
            ],
            "arguments": {
                "o": [
                    "str"
                ]
            }
        },
        "generate_meta_knowledge_graph": {
            "name": "generate_meta_knowledge_graph",
            "location": 969,
            "return": [
                "None"
            ],
            "arguments": {
                "graph": [
                    "str"
                ],
                "name": [
                    "str"
                ],
                "filename": [
                    "str"
                ]
            }
        },
        "summarize_graph": {
            "name": "summarize_graph",
            "location": 989,
            "return": [],
            "arguments": {
                "graph": [
                    "bool",
                    "str",
                    "dict[str, typing.Any]",
                    "tuple[typing.Union[str,int]]"
                ],
                "name": [
                    "None",
                    "str",
                    "int"
                ]
            }
        },
        "MetaKnowledgeGraph.__init__": {
            "name": "__init__",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "typing.Text"
                ],
                "node_facet_properties": [
                    "None",
                    "list[str]",
                    "set[P]",
                    "str",
                    "typing.Callable[, ]",
                    "bool",
                    "set[str]"
                ],
                "edge_facet_properties": [
                    "None",
                    "float",
                    "set[str]",
                    "str"
                ],
                "progress_monitor": [
                    "None",
                    "typing.Sequence[typing.Any]",
                    "float",
                    "str"
                ],
                "error_log": [
                    "None",
                    "str",
                    "bool"
                ]
            }
        },
        "MetaKnowledgeGraph.get_name": {
            "name": "get_name",
            "location": 136,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MetaKnowledgeGraph.__call__": {
            "name": "__call__",
            "location": 145,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "entity_type": [],
                "rec": [
                    "BaseException",
                    "Exception",
                    "typing.Type",
                    "str"
                ]
            }
        },
        "MetaKnowledgeGraph.get_facet_counts": {
            "name": "get_facet_counts",
            "location": 167,
            "return": [
                "None"
            ],
            "arguments": {
                "facets": [
                    "dict[, ]",
                    "list[dict[str, typing.Any]]"
                ],
                "counts_by_source": [],
                "data": [
                    "bytes",
                    "str"
                ]
            }
        },
        "MetaKnowledgeGraph.get_category": {
            "name": "get_category",
            "location": 353,
            "return": [],
            "arguments": {
                "self": [],
                "category_curie": [
                    "str",
                    "bool"
                ]
            }
        },
        "MetaKnowledgeGraph._process_category_field": {
            "name": "_process_category_field",
            "location": 370,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "category_field": [],
                "n": [
                    "str",
                    "tuple[int]",
                    "bool"
                ],
                "data": [
                    "typing.Callable[, ]",
                    "set[typing.Type]",
                    "int"
                ]
            }
        },
        "MetaKnowledgeGraph.analyse_node": {
            "name": "analyse_node",
            "location": 400,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "n": [
                    "str",
                    "bool",
                    "typing.Type",
                    "dict[str, typing.Any]"
                ],
                "data": [
                    "bytearray"
                ]
            }
        },
        "MetaKnowledgeGraph._capture_predicate": {
            "name": "_capture_predicate",
            "location": 447,
            "return": [
                "None",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "subj": [
                    "str",
                    "bytes",
                    "dict[, ]",
                    "OSError"
                ],
                "obj": [
                    "str",
                    "bytes",
                    "dict[, ]",
                    "OSError"
                ],
                "data": [
                    "bytes"
                ]
            }
        },
        "MetaKnowledgeGraph._compile_triple_source_stats": {
            "name": "_compile_triple_source_stats",
            "location": 485,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "triple": [
                    "dict[, ]",
                    "dict[str, typing.Any]",
                    "dict[str, dict[str, typing.Any]]",
                    "str"
                ],
                "data": [
                    "dict[, ]",
                    "dict[str, typing.Any]",
                    "dict[str, dict[str, typing.Any]]",
                    "str"
                ]
            }
        },
        "MetaKnowledgeGraph._normalize_relation_field": {
            "name": "_normalize_relation_field",
            "location": 493,
            "return": [
                "set[str]"
            ],
            "arguments": {
                "field": [
                    "str",
                    "set[str]"
                ]
            }
        },
        "MetaKnowledgeGraph._process_triple": {
            "name": "_process_triple",
            "location": 508,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "subject_category": [
                    "bool",
                    "float",
                    "str",
                    "tuple[typing.Union[int,int]]",
                    "list[tuple[typing.Union[int,int]]]"
                ],
                "predicate": [
                    "bool",
                    "float",
                    "str",
                    "tuple[typing.Union[int,int]]",
                    "list[tuple[typing.Union[int,int]]]"
                ],
                "object_category": [
                    "bool",
                    "float",
                    "str",
                    "tuple[typing.Union[int,int]]",
                    "list[tuple[typing.Union[int,int]]]"
                ],
                "data": [
                    "bytes"
                ]
            }
        },
        "MetaKnowledgeGraph.analyse_edge": {
            "name": "analyse_edge",
            "location": 535,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "u": [
                    "str",
                    "list[str]",
                    "None"
                ],
                "v": [
                    "str",
                    "None",
                    "list[str]"
                ],
                "k": [
                    "bool",
                    "str",
                    "collections.abc.Coroutine",
                    "typing.Type"
                ],
                "data": [
                    "str",
                    "list[str]"
                ]
            }
        },
        "MetaKnowledgeGraph.get_number_of_categories": {
            "name": "get_number_of_categories",
            "location": 602,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "MetaKnowledgeGraph.get_node_stats": {
            "name": "get_node_stats",
            "location": 616,
            "return": [
                "dict[, ]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MetaKnowledgeGraph.get_edge_stats": {
            "name": "get_edge_stats",
            "location": 642,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MetaKnowledgeGraph.get_total_nodes_count": {
            "name": "get_total_nodes_count",
            "location": 659,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "MetaKnowledgeGraph.get_node_count_by_category": {
            "name": "get_node_count_by_category",
            "location": 671,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "category_curie": [
                    "int",
                    "None",
                    "typing.MutableMapping"
                ]
            }
        },
        "MetaKnowledgeGraph.get_total_node_counts_across_categories": {
            "name": "get_total_node_counts_across_categories",
            "location": 700,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "MetaKnowledgeGraph.get_total_edges_count": {
            "name": "get_total_edges_count",
            "location": 716,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MetaKnowledgeGraph.get_edge_mapping_count": {
            "name": "get_edge_mapping_count",
            "location": 728,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "MetaKnowledgeGraph.get_predicate_count": {
            "name": "get_predicate_count",
            "location": 741,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "MetaKnowledgeGraph.get_edge_count_by_predicate": {
            "name": "get_edge_count_by_predicate",
            "location": 753,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "predicate_curie": [
                    "str",
                    "bool"
                ]
            }
        },
        "MetaKnowledgeGraph.get_total_edge_counts_across_mappings": {
            "name": "get_total_edge_counts_across_mappings",
            "location": 780,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "MetaKnowledgeGraph.get_edge_count_by_source": {
            "name": "get_edge_count_by_source",
            "location": 796,
            "return": [
                "dict[, ]"
            ],
            "arguments": {
                "self": [],
                "subject_category": [
                    "bool",
                    "str"
                ],
                "predicate": [
                    "bool",
                    "str"
                ],
                "object_category": [
                    "bool",
                    "str"
                ],
                "facet": [
                    "typing.Text"
                ],
                "source": [
                    "None",
                    "str",
                    "set[str]",
                    "int"
                ]
            }
        },
        "MetaKnowledgeGraph.summarize_graph_nodes": {
            "name": "summarize_graph_nodes",
            "location": 846,
            "return": [],
            "arguments": {
                "self": [],
                "graph": []
            }
        },
        "MetaKnowledgeGraph.summarize_graph_edges": {
            "name": "summarize_graph_edges",
            "location": 864,
            "return": [],
            "arguments": {
                "self": [],
                "graph": []
            }
        },
        "MetaKnowledgeGraph.summarize_graph": {
            "name": "summarize_graph",
            "location": 883,
            "return": [
                "str",
                "list[str]",
                "list[]",
                "dict[typing.Text, typing.Union[int,list[str],list[typing.Union[float,str]],list[list[typing.Any]],float,bytes,str,None,dict[, ],set[str]]]"
            ],
            "arguments": {
                "self": [],
                "graph": [
                    "bool",
                    "str",
                    "dict[str, typing.Any]",
                    "tuple[typing.Union[str,int]]"
                ],
                "name": [
                    "None",
                    "str",
                    "dict[, ]",
                    "set[str]"
                ]
            }
        },
        "MetaKnowledgeGraph.get_graph_summary": {
            "name": "get_graph_summary",
            "location": 913,
            "return": [
                "bool",
                "str",
                "dict[, ]",
                "set[]",
                "dict[typing.Text, typing.Union[None,str]]"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "None",
                    "str"
                ]
            }
        },
        "MetaKnowledgeGraph.save": {
            "name": "save",
            "location": 944,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "file": [
                    "str"
                ],
                "name": [
                    "None",
                    "str",
                    "bool"
                ],
                "file_format": [
                    "typing.Text"
                ]
            }
        },
        "MetaKnowledgeGraph.Category.__init__": {
            "name": "__init__",
            "location": 203,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "category_curie": [],
                "mkg": []
            }
        },
        "MetaKnowledgeGraph.Category.get_name": {
            "name": "get_name",
            "location": 226,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MetaKnowledgeGraph.Category.get_cid": {
            "name": "get_cid",
            "location": 235,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MetaKnowledgeGraph.Category.get_category_curie_from_index": {
            "name": "get_category_curie_from_index",
            "location": 245,
            "return": [],
            "arguments": {
                "cls": [],
                "cid": []
            }
        },
        "MetaKnowledgeGraph.Category.get_id_prefixes": {
            "name": "get_id_prefixes",
            "location": 259,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MetaKnowledgeGraph.Category.get_count": {
            "name": "get_count",
            "location": 268,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MetaKnowledgeGraph.Category.get_count_by_source": {
            "name": "get_count_by_source",
            "location": 277,
            "return": [
                "dict[None, ]",
                "dict[None, int]"
            ],
            "arguments": {
                "self": [],
                "facet": [
                    "typing.Text"
                ],
                "source": [
                    "None"
                ]
            }
        },
        "MetaKnowledgeGraph.Category._compile_prefix_stats": {
            "name": "_compile_prefix_stats",
            "location": 303,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "n": []
            }
        },
        "MetaKnowledgeGraph.Category._compile_category_source_stats": {
            "name": "_compile_category_source_stats",
            "location": 317,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "MetaKnowledgeGraph.Category.analyse_node_category": {
            "name": "analyse_node_category",
            "location": 324,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "n": [],
                "data": []
            }
        },
        "MetaKnowledgeGraph.Category.json_object": {
            "name": "json_object",
            "location": 340,
            "return": [
                "dict[typing.Text, list[]]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "kgx-master/kgx/graph_operations/summarize_graph.py": {
        "gs_default": {
            "name": "gs_default",
            "location": 43,
            "return": [
                "list[float]"
            ],
            "arguments": {
                "o": [
                    "str",
                    "bool"
                ]
            }
        },
        "generate_graph_stats": {
            "name": "generate_graph_stats",
            "location": 841,
            "return": [
                "None"
            ],
            "arguments": {
                "graph": [
                    "str",
                    "bool"
                ],
                "graph_name": [
                    "str",
                    "bool"
                ],
                "filename": [
                    "str"
                ],
                "node_facet_properties": [
                    "None",
                    "str",
                    "bool"
                ],
                "edge_facet_properties": [
                    "None",
                    "str",
                    "bool"
                ]
            }
        },
        "summarize_graph": {
            "name": "summarize_graph",
            "location": 872,
            "return": [],
            "arguments": {
                "graph": [
                    "bool",
                    "str",
                    "None",
                    "dict[str, typing.Any]"
                ],
                "name": [
                    "None",
                    "str",
                    "dict[, ]"
                ],
                "node_facet_properties": [
                    "None",
                    "str",
                    "dict[, ]"
                ],
                "edge_facet_properties": [
                    "None",
                    "str",
                    "dict[, ]"
                ]
            }
        },
        "GraphSummary.__init__": {
            "name": "__init__",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "typing.Text"
                ],
                "node_facet_properties": [
                    "list[str]",
                    "str",
                    "list[list[str]]",
                    "list[typing.Callable[, ]]"
                ],
                "edge_facet_properties": [
                    "set[str]",
                    "str",
                    "dict[, ]"
                ],
                "progress_monitor": [
                    "None",
                    "typing.Sequence[typing.Any]",
                    "float",
                    "str"
                ],
                "error_log": [
                    "None",
                    "str",
                    "bool"
                ]
            }
        },
        "GraphSummary.get_name": {
            "name": "get_name",
            "location": 160,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GraphSummary.__call__": {
            "name": "__call__",
            "location": 169,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "entity_type": [],
                "rec": [
                    "BaseException",
                    "Exception",
                    "typing.Type",
                    "str"
                ]
            }
        },
        "GraphSummary.get_category": {
            "name": "get_category",
            "location": 371,
            "return": [],
            "arguments": {
                "self": [],
                "category_curie": [
                    "str",
                    "bool"
                ]
            }
        },
        "GraphSummary._process_category_field": {
            "name": "_process_category_field",
            "location": 388,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "category_field": [],
                "n": [
                    "str",
                    "tuple[int]",
                    "bool"
                ],
                "data": [
                    "typing.Callable[, ]",
                    "set[typing.Type]",
                    "int"
                ]
            }
        },
        "GraphSummary.analyse_node": {
            "name": "analyse_node",
            "location": 426,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "n": [
                    "str",
                    "bool",
                    "typing.Type",
                    "dict[str, typing.Any]"
                ],
                "data": [
                    "bytearray"
                ]
            }
        },
        "GraphSummary._capture_predicate": {
            "name": "_capture_predicate",
            "location": 467,
            "return": [
                "None",
                "bytes",
                "dict[str, typing.Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "bytes",
                    "list[dict[str, typing.Any]]",
                    "str"
                ]
            }
        },
        "GraphSummary._process_triple": {
            "name": "_process_triple",
            "location": 501,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "subject_category": [
                    "str",
                    "bool",
                    "float"
                ],
                "predicate": [
                    "str",
                    "bool",
                    "float"
                ],
                "object_category": [
                    "str",
                    "bool",
                    "float"
                ],
                "data": []
            }
        },
        "GraphSummary.analyse_edge": {
            "name": "analyse_edge",
            "location": 517,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "u": [
                    "str",
                    "float",
                    "None"
                ],
                "v": [
                    "str",
                    "float",
                    "bytes",
                    "bool"
                ],
                "k": [
                    "bool",
                    "str",
                    "collections.abc.Coroutine",
                    "typing.Type"
                ],
                "data": [
                    "str"
                ]
            }
        },
        "GraphSummary._compile_prefix_stats_by_category": {
            "name": "_compile_prefix_stats_by_category",
            "location": 579,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "category_curie": [
                    "str",
                    "bool",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "GraphSummary._compile_category_stats": {
            "name": "_compile_category_stats",
            "location": 587,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node_category": []
            }
        },
        "GraphSummary.get_node_stats": {
            "name": "get_node_stats",
            "location": 604,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GraphSummary.add_node_stat": {
            "name": "add_node_stat",
            "location": 632,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tag": [
                    "str",
                    "set[str]",
                    "bool",
                    "list[str]"
                ],
                "value": [
                    "str",
                    "set[str]",
                    "bool",
                    "list[str]"
                ]
            }
        },
        "GraphSummary.get_edge_stats": {
            "name": "get_edge_stats",
            "location": 650,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GraphSummary._wrap_graph_stats": {
            "name": "_wrap_graph_stats",
            "location": 668,
            "return": [
                "str",
                "list[str]",
                "int",
                "dict[typing.Text, typing.Union[str,ImportError,int]]"
            ],
            "arguments": {
                "self": [],
                "graph_name": [
                    "str",
                    "ImportError",
                    "int"
                ],
                "node_stats": [
                    "str",
                    "ImportError",
                    "int"
                ],
                "edge_stats": [
                    "str",
                    "ImportError",
                    "int"
                ]
            }
        },
        "GraphSummary.get_graph_summary": {
            "name": "get_graph_summary",
            "location": 683,
            "return": [],
            "arguments": {
                "self": [],
                "name": [
                    "None",
                    "str"
                ]
            }
        },
        "GraphSummary.summarize_graph": {
            "name": "summarize_graph",
            "location": 708,
            "return": [],
            "arguments": {
                "self": [],
                "graph": [
                    "bool",
                    "dict[, ]"
                ]
            }
        },
        "GraphSummary.summarize_graph_nodes": {
            "name": "summarize_graph_nodes",
            "location": 729,
            "return": [],
            "arguments": {
                "self": [],
                "graph": []
            }
        },
        "GraphSummary.summarize_graph_edges": {
            "name": "summarize_graph_edges",
            "location": 748,
            "return": [],
            "arguments": {
                "self": [],
                "graph": []
            }
        },
        "GraphSummary._compile_facet_stats": {
            "name": "_compile_facet_stats",
            "location": 767,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "stats": [],
                "x": [
                    "int",
                    "typing.Mapping"
                ],
                "y": [
                    "int",
                    "typing.Mapping"
                ],
                "facet_property": [
                    "int",
                    "typing.Mapping"
                ],
                "value": [
                    "int",
                    "typing.Mapping"
                ]
            }
        },
        "GraphSummary.get_facet_counts": {
            "name": "get_facet_counts",
            "location": 780,
            "return": [
                "int",
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [],
                "stats": [
                    "int",
                    "None"
                ],
                "x": [
                    "int",
                    "None"
                ],
                "y": [
                    "int",
                    "None"
                ],
                "facet_property": [
                    "str",
                    "dict[, ]",
                    "int",
                    "float"
                ]
            }
        },
        "GraphSummary.save": {
            "name": "save",
            "location": 816,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "file": [
                    "str",
                    "dict[, ]",
                    "dict[str, str]"
                ],
                "name": [
                    "None",
                    "str",
                    "bool"
                ],
                "file_format": [
                    "typing.Text"
                ]
            }
        },
        "GraphSummary.Category.__init__": {
            "name": "__init__",
            "location": 200,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "category_curie": [],
                "summary": []
            }
        },
        "GraphSummary.Category.get_name": {
            "name": "get_name",
            "location": 241,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GraphSummary.Category.get_cid": {
            "name": "get_cid",
            "location": 250,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GraphSummary.Category.get_category_curie_by_index": {
            "name": "get_category_curie_by_index",
            "location": 260,
            "return": [],
            "arguments": {
                "cls": [],
                "cid": []
            }
        },
        "GraphSummary.Category.get_id_prefixes": {
            "name": "get_id_prefixes",
            "location": 274,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "GraphSummary.Category.get_count_by_id_prefixes": {
            "name": "get_count_by_id_prefixes",
            "location": 283,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GraphSummary.Category.get_count": {
            "name": "get_count",
            "location": 292,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GraphSummary.Category._capture_prefix": {
            "name": "_capture_prefix",
            "location": 301,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "n": []
            }
        },
        "GraphSummary.Category._capture_knowledge_source": {
            "name": "_capture_knowledge_source",
            "location": 317,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "GraphSummary.Category.analyse_node_category": {
            "name": "analyse_node_category",
            "location": 327,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "summary": [],
                "n": [],
                "data": []
            }
        },
        "GraphSummary.Category.json_object": {
            "name": "json_object",
            "location": 357,
            "return": [
                "dict[typing.Text, list[]]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "kgx-master/kgx/graph_operations/__init__.py": {
        "remap_node_identifier": {
            "name": "remap_node_identifier",
            "location": 18,
            "return": [],
            "arguments": {
                "graph": [],
                "category": [
                    "str",
                    "dict[str, typing.Any]",
                    "list[int]",
                    "int",
                    "float",
                    "list[dict[str, typing.Any]]"
                ],
                "alternative_property": [
                    "dict[str, typing.Any]",
                    "str",
                    "dict[str, dict[, ]]"
                ],
                "prefix": [
                    "None",
                    "str",
                    "dict[, ]",
                    "tuple[typing.Union[str,list[str],list[str]]]"
                ]
            }
        },
        "remap_node_property": {
            "name": "remap_node_property",
            "location": 97,
            "return": [
                "None"
            ],
            "arguments": {
                "graph": [],
                "category": [
                    "str",
                    "typing.Sequence[str]",
                    "bool",
                    "list[str]",
                    "set[int]"
                ],
                "old_property": [
                    "str",
                    "bytes",
                    "int"
                ],
                "new_property": [
                    "str",
                    "int",
                    "dict[int, dict[, ]]",
                    "tuple[tuple[typing.Union[int,int]]]"
                ]
            }
        },
        "remap_edge_property": {
            "name": "remap_edge_property",
            "location": 131,
            "return": [
                "None"
            ],
            "arguments": {
                "graph": [],
                "edge_predicate": [
                    "bool",
                    "str",
                    "list[dict[str, typing.Any]]",
                    "bytes"
                ],
                "old_property": [
                    "str",
                    "None",
                    "typing.Any",
                    "list[typing.Union[\"PipeChain\",str]]"
                ],
                "new_property": [
                    "int",
                    "typing.ItemsView",
                    "list[dict[, ]]"
                ]
            }
        },
        "fold_predicate": {
            "name": "fold_predicate",
            "location": 164,
            "return": [
                "None"
            ],
            "arguments": {
                "graph": [],
                "predicate": [
                    "str"
                ],
                "remove_prefix": [
                    "bool"
                ]
            }
        },
        "unfold_node_property": {
            "name": "unfold_node_property",
            "location": 199,
            "return": [
                "None"
            ],
            "arguments": {
                "graph": [],
                "node_property": [
                    "dict[, ]",
                    "bool",
                    "str"
                ],
                "prefix": [
                    "None",
                    "str",
                    "typing.Type",
                    "dict[, ]"
                ]
            }
        },
        "remove_singleton_nodes": {
            "name": "remove_singleton_nodes",
            "location": 238,
            "return": [
                "None"
            ],
            "arguments": {
                "graph": []
            }
        }
    },
    "kgx-master/kgx/parsers/ntriples_parser.py": {
        "CustomNTriplesParser.parse": {
            "name": "parse",
            "location": 14,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "str",
                    "bool"
                ]
            }
        },
        "CustomNTriplesParser.parseline": {
            "name": "parseline",
            "location": 51,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "kgx-master/kgx/parsers/__init__.py": {},
    "kgx-master/kgx/sink/graph_sink.py": {
        "GraphSink.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "owner": [
                    "int",
                    "str",
                    "dict[, ]"
                ]
            }
        },
        "GraphSink.write_node": {
            "name": "write_node",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "record": []
            }
        },
        "GraphSink.write_edge": {
            "name": "write_edge",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "record": [
                    "bytes"
                ]
            }
        },
        "GraphSink.finalize": {
            "name": "finalize",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "kgx-master/kgx/sink/jsonl_sink.py": {
        "JsonlSink.__init__": {
            "name": "__init__",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "owner": [
                    "str",
                    "int",
                    "None"
                ],
                "filename": [
                    "str"
                ],
                "format": [
                    "typing.Text"
                ],
                "compression": [
                    "None",
                    "str",
                    "list[str]"
                ]
            }
        },
        "JsonlSink.write_node": {
            "name": "write_node",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "record": [
                    "str",
                    "bytes",
                    "typing.IO",
                    "typing.TextIO"
                ]
            }
        },
        "JsonlSink.write_edge": {
            "name": "write_edge",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "record": [
                    "str",
                    "typing.IO"
                ]
            }
        },
        "JsonlSink.finalize": {
            "name": "finalize",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "kgx-master/kgx/sink/json_sink.py": {
        "JsonSink.__init__": {
            "name": "__init__",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "owner": [
                    "str",
                    "int",
                    "None"
                ],
                "filename": [
                    "str",
                    "dict[, ]",
                    "None",
                    "typing.Type",
                    "bool"
                ],
                "format": [
                    "typing.Text"
                ],
                "compression": [
                    "None",
                    "str",
                    "list[str]",
                    "bool",
                    "tuple[typing.Type]"
                ]
            }
        },
        "JsonSink.write_node": {
            "name": "write_node",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "record": [
                    "str",
                    "bytes",
                    "typing.IO",
                    "typing.TextIO"
                ]
            }
        },
        "JsonSink.write_edge": {
            "name": "write_edge",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "record": [
                    "str",
                    "typing.IO"
                ]
            }
        },
        "JsonSink.finalize": {
            "name": "finalize",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "kgx-master/kgx/sink/neo_sink.py": {
        "NeoSink.__init__": {
            "name": "__init__",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "owner": [
                    "bool",
                    "str"
                ],
                "uri": [
                    "str",
                    "bool",
                    "float"
                ],
                "username": [
                    "str",
                    "bool",
                    "float"
                ],
                "password": [
                    "str",
                    "bool",
                    "float"
                ]
            }
        },
        "NeoSink._flush_node_cache": {
            "name": "_flush_node_cache",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "NeoSink.write_node": {
            "name": "write_node",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "record": [
                    "list[]",
                    "tuple['cirq.Qid']",
                    "str"
                ]
            }
        },
        "NeoSink._write_node_cache": {
            "name": "_write_node_cache",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "NeoSink._flush_edge_cache": {
            "name": "_flush_edge_cache",
            "location": 108,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "NeoSink.write_edge": {
            "name": "write_edge",
            "location": 114,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "record": [
                    "str",
                    "list[typing.Mapping]"
                ]
            }
        },
        "NeoSink._write_edge_cache": {
            "name": "_write_edge_cache",
            "location": 136,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "NeoSink.finalize": {
            "name": "finalize",
            "location": 160,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "NeoSink.sanitize_category": {
            "name": "sanitize_category",
            "location": 168,
            "return": [
                "list[typing.Text]"
            ],
            "arguments": {
                "category": [
                    "list[]",
                    "tuple[str]"
                ]
            }
        },
        "NeoSink.generate_unwind_node_query": {
            "name": "generate_unwind_node_query",
            "location": 188,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "category": [
                    "int",
                    "list[int]"
                ]
            }
        },
        "NeoSink.generate_unwind_edge_query": {
            "name": "generate_unwind_edge_query",
            "location": 217,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "edge_predicate": [
                    "int",
                    "list[int]",
                    "str"
                ]
            }
        },
        "NeoSink.create_constraints": {
            "name": "create_constraints",
            "location": 243,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "categories": [
                    "list[typing.Union[int,str,str,str,str,str,str,str]]",
                    "str",
                    "list[]"
                ]
            }
        },
        "NeoSink.create_constraint_query": {
            "name": "create_constraint_query",
            "location": 272,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "category": [
                    "bool",
                    "float"
                ]
            }
        }
    },
    "kgx-master/kgx/sink/null_sink.py": {
        "NullSink.__init__": {
            "name": "__init__",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "owner": [
                    "int",
                    "list[tuple[typing.Union[typing.Any,typing.Any]]]"
                ]
            }
        },
        "NullSink.write_node": {
            "name": "write_node",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "record": [
                    "bool",
                    "typing.Mapping",
                    "str"
                ]
            }
        },
        "NullSink.write_edge": {
            "name": "write_edge",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "record": [
                    "int",
                    "str",
                    "typing.Iterable['Context']"
                ]
            }
        },
        "NullSink.finalize": {
            "name": "finalize",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "kgx-master/kgx/sink/rdf_sink.py": {
        "RdfSink.__init__": {
            "name": "__init__",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "owner": [
                    "str",
                    "int",
                    "None"
                ],
                "filename": [
                    "str"
                ],
                "format": [
                    "typing.Text"
                ],
                "compression": [
                    "None",
                    "str",
                    "bool"
                ],
                "reify_all_edges": [
                    "bool"
                ]
            }
        },
        "RdfSink.set_reverse_predicate_mapping": {
            "name": "set_reverse_predicate_mapping",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "m": [
                    "dict[str, bool]"
                ]
            }
        },
        "RdfSink.set_property_types": {
            "name": "set_property_types",
            "location": 107,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "m": [
                    "dict[str, typing.Any]"
                ]
            }
        },
        "RdfSink.write_node": {
            "name": "write_node",
            "location": 131,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "record": []
            }
        },
        "RdfSink._write_triple": {
            "name": "_write_triple",
            "location": 170,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "s": [
                    "str",
                    "bytes"
                ],
                "p": [
                    "str",
                    "bytes"
                ],
                "o": [
                    "str",
                    "bytes"
                ]
            }
        },
        "RdfSink.write_edge": {
            "name": "write_edge",
            "location": 186,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "record": [
                    "list['cirq.Qid']"
                ]
            }
        },
        "RdfSink.uriref": {
            "name": "uriref",
            "location": 288,
            "return": [
                "URIRef"
            ],
            "arguments": {
                "self": [],
                "identifier": [
                    "str"
                ]
            }
        },
        "RdfSink._prepare_object": {
            "name": "_prepare_object",
            "location": 330,
            "return": [
                "Literal",
                "URIRef",
                "list[]",
                "list[str]",
                "bytearray",
                "tuple[typing.Union[typing.Literal,typing.Any,typing.Literal,typing.Any,typing.Literal,typing.Any]]"
            ],
            "arguments": {
                "self": [],
                "prop": [
                    "typing.Type",
                    "None",
                    "BaseException",
                    "bool",
                    "typing.Callable[str, typing.Any]",
                    "dict[str, typing.Any]"
                ],
                "prop_type": [
                    "str"
                ],
                "value": [
                    "str",
                    "bool"
                ]
            }
        },
        "RdfSink._get_property_type": {
            "name": "_get_property_type",
            "location": 367,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": [],
                "p": [
                    "str",
                    "list[dict[str, str]]",
                    "list[]",
                    "dict[str, typing.Any]",
                    "bool"
                ]
            }
        },
        "RdfSink.process_predicate": {
            "name": "process_predicate",
            "location": 420,
            "return": [
                "tuple[typing.Union[None,typing.Text,typing.Deque,list[],float,bytes,dict[, ],tuple[typing.Union[typing.Any,typing.Any,typing.Any,typing.Any,typing.Any,typing.Any,typing.Any]]]]"
            ],
            "arguments": {
                "self": [],
                "p": [
                    "list[]",
                    "str"
                ]
            }
        },
        "RdfSink.get_biolink_element": {
            "name": "get_biolink_element",
            "location": 497,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "predicate": [
                    "dict[, ]",
                    "int",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "RdfSink.reify": {
            "name": "reify",
            "location": 536,
            "return": [],
            "arguments": {
                "self": [],
                "u": [
                    "bool",
                    "float",
                    "dict[str, str]",
                    "dict[str, dict[str, typing.Any]]"
                ],
                "v": [
                    "bool",
                    "float",
                    "dict[str, str]",
                    "dict[str, dict[str, typing.Any]]"
                ],
                "data": []
            }
        },
        "RdfSink.finalize": {
            "name": "finalize",
            "location": 576,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "kgx-master/kgx/sink/sink.py": {
        "Sink.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "owner": [
                    "str",
                    "list[str]",
                    "int",
                    "dict[, ]",
                    "dict[str, str]"
                ]
            }
        },
        "Sink.set_reverse_prefix_map": {
            "name": "set_reverse_prefix_map",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "m": [
                    "str",
                    "bool",
                    "list[str]",
                    "typing.Any",
                    "None"
                ]
            }
        },
        "Sink.write_node": {
            "name": "write_node",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "record": [
                    "bool",
                    "typing.Mapping",
                    "str"
                ]
            }
        },
        "Sink.write_edge": {
            "name": "write_edge",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "record": [
                    "int",
                    "str",
                    "typing.Iterable['Context']"
                ]
            }
        },
        "Sink.finalize": {
            "name": "finalize",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "kgx-master/kgx/sink/tsv_sink.py": {
        "TsvSink.__init__": {
            "name": "__init__",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "owner": [
                    "str",
                    "int",
                    "None"
                ],
                "filename": [
                    "str"
                ],
                "format": [
                    "str"
                ],
                "compression": [
                    "None",
                    "str",
                    "typing.Callable[typing.Any, bool]",
                    "int"
                ]
            }
        },
        "TsvSink.write_node": {
            "name": "write_node",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "record": [
                    "str",
                    "bytes",
                    "tuple[typing.Union[typing.Any,typing.Any,typing.Any]]"
                ]
            }
        },
        "TsvSink.write_edge": {
            "name": "write_edge",
            "location": 113,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "record": [
                    "str",
                    "bool",
                    "typing.Iterable[str]",
                    "None"
                ]
            }
        },
        "TsvSink.finalize": {
            "name": "finalize",
            "location": 132,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TsvSink._order_node_columns": {
            "name": "_order_node_columns",
            "location": 152,
            "return": [
                "dict[, ]"
            ],
            "arguments": {
                "cols": []
            }
        },
        "TsvSink._order_edge_columns": {
            "name": "_order_edge_columns",
            "location": 187,
            "return": [
                "dict[, ]"
            ],
            "arguments": {
                "cols": []
            }
        },
        "TsvSink.set_node_properties": {
            "name": "set_node_properties",
            "location": 229,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node_properties": [
                    "dict[, ]",
                    "dict[str, str]"
                ]
            }
        },
        "TsvSink.set_edge_properties": {
            "name": "set_edge_properties",
            "location": 242,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "edge_properties": [
                    "dict[str, str]",
                    "None",
                    "dict[, ]",
                    "bytes",
                    "tuple[str]"
                ]
            }
        }
    },
    "kgx-master/kgx/sink/__init__.py": {},
    "kgx-master/kgx/source/graph_source.py": {
        "GraphSource.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "owner": [
                    "int",
                    "list[tuple[typing.Union[typing.Any,typing.Any]]]"
                ]
            }
        },
        "GraphSource.parse": {
            "name": "parse",
            "location": 22,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "self": [],
                "graph": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ]
            }
        },
        "GraphSource.read_nodes": {
            "name": "read_nodes",
            "location": 47,
            "return": [
                "typing.Generator[tuple[]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "GraphSource.read_edges": {
            "name": "read_edges",
            "location": 73,
            "return": [
                "typing.Generator[tuple[]]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "kgx-master/kgx/source/jsonl_source.py": {
        "JsonlSource.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "owner": [
                    "int",
                    "list[tuple[typing.Union[typing.Any,typing.Any]]]"
                ]
            }
        },
        "JsonlSource.parse": {
            "name": "parse",
            "location": 22,
            "return": [
                "None",
                "typing.Generator[]"
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "str"
                ],
                "format": [
                    "typing.Text"
                ],
                "compression": [
                    "None",
                    "str"
                ]
            }
        }
    },
    "kgx-master/kgx/source/json_source.py": {
        "JsonSource.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "owner": [
                    "int",
                    "list[tuple[typing.Union[typing.Any,typing.Any]]]"
                ]
            }
        },
        "JsonSource.parse": {
            "name": "parse",
            "location": 21,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "str",
                    "list[]",
                    "list[str]",
                    "dict[, ]"
                ],
                "format": [
                    "typing.Text"
                ],
                "compression": [
                    "None",
                    "str",
                    "int"
                ]
            }
        },
        "JsonSource.read_nodes": {
            "name": "read_nodes",
            "location": 56,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "str"
                ]
            }
        },
        "JsonSource.read_edges": {
            "name": "read_edges",
            "location": 78,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "str"
                ]
            }
        }
    },
    "kgx-master/kgx/source/neo_source.py": {
        "NeoSource.__init__": {
            "name": "__init__",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "owner": [
                    "int",
                    "list[tuple[typing.Union[typing.Any,typing.Any]]]"
                ]
            }
        },
        "NeoSource._connect_db": {
            "name": "_connect_db",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "uri": [
                    "str",
                    "None"
                ],
                "username": [
                    "str",
                    "None"
                ],
                "password": [
                    "str",
                    "None"
                ]
            }
        },
        "NeoSource.parse": {
            "name": "parse",
            "location": 39,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "self": [],
                "uri": [
                    "str",
                    "bool",
                    "None",
                    "list[typing.Any]"
                ],
                "username": [
                    "str",
                    "bool",
                    "None",
                    "list[typing.Any]"
                ],
                "password": [
                    "str",
                    "bool",
                    "None",
                    "list[typing.Any]"
                ],
                "node_filters": [
                    "None",
                    "str",
                    "dict[, ]",
                    "list[int]",
                    "typing.Type",
                    "dict[str, typing.Any]"
                ],
                "edge_filters": [
                    "None",
                    "str",
                    "bool"
                ],
                "start": [
                    "int"
                ],
                "end": [
                    "None",
                    "int",
                    "list[str]",
                    "str",
                    "list[int]"
                ],
                "is_directed": [
                    "bool"
                ],
                "page_size": [
                    "int"
                ]
            }
        },
        "NeoSource.count": {
            "name": "count",
            "location": 101,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "is_directed": [
                    "bool"
                ]
            }
        },
        "NeoSource.get_nodes": {
            "name": "get_nodes",
            "location": 153,
            "return": [
                "list[dict[typing.Text, ]]"
            ],
            "arguments": {
                "self": [],
                "skip": [
                    "int"
                ],
                "limit": [
                    "int"
                ]
            }
        },
        "NeoSource.get_edges": {
            "name": "get_edges",
            "location": 210,
            "return": [],
            "arguments": {
                "self": [],
                "skip": [
                    "int"
                ],
                "limit": [
                    "int"
                ],
                "is_directed": [
                    "bool"
                ]
            }
        },
        "NeoSource.load_nodes": {
            "name": "load_nodes",
            "location": 305,
            "return": [
                "typing.Generator[typing.Union[dict[int, typing.Any],dict[str, typing.Union[int,str]],dict[str, str],dict[, ],list[]]]"
            ],
            "arguments": {
                "self": [],
                "nodes": [
                    "list[]",
                    "str",
                    "list[dict[str, typing.Any]]"
                ]
            }
        },
        "NeoSource.load_node": {
            "name": "load_node",
            "location": 325,
            "return": [
                "None",
                "tuple[]"
            ],
            "arguments": {
                "self": [],
                "node_data": [
                    "str"
                ]
            }
        },
        "NeoSource.load_edges": {
            "name": "load_edges",
            "location": 354,
            "return": [
                "typing.Generator[typing.Union[float,list[int],int,list[str]]]"
            ],
            "arguments": {
                "self": [],
                "edges": [
                    "str",
                    "list[]"
                ]
            }
        },
        "NeoSource.load_edge": {
            "name": "load_edge",
            "location": 394,
            "return": [
                "tuple[]",
                "tuple[typing.Union[str,dict[, ],dict[str, typing.Any]]]"
            ],
            "arguments": {
                "self": [],
                "edge_record": [
                    "list[str]",
                    "str"
                ]
            }
        },
        "NeoSource.get_pages": {
            "name": "get_pages",
            "location": 430,
            "return": [
                "None",
                "typing.Generator[]"
            ],
            "arguments": {
                "self": [],
                "query_function": [
                    "float",
                    "str",
                    "int",
                    "list[]",
                    "bytes",
                    "None",
                    "tuple[typing.Union[float,float]]"
                ],
                "start": [
                    "int"
                ],
                "end": [
                    "None",
                    "int",
                    "bytes",
                    "str"
                ],
                "page_size": [
                    "int"
                ]
            }
        },
        "NeoSource.format_node_filter": {
            "name": "format_node_filter",
            "location": 484,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "node_filters": [
                    "list[dict[, ]]",
                    "str",
                    "list[]"
                ],
                "key": [
                    "bool"
                ],
                "variable": [
                    "None",
                    "list[str]",
                    "list[list[int]]",
                    "typing.Callable[, ]"
                ],
                "prefix": [
                    "None",
                    "list[str]",
                    "list[list[int]]",
                    "typing.Callable[, ]"
                ],
                "op": [
                    "None",
                    "str",
                    "bool"
                ]
            }
        },
        "NeoSource.format_edge_filter": {
            "name": "format_edge_filter",
            "location": 540,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "edge_filters": [
                    "list[dict[, ]]",
                    "list[]"
                ],
                "key": [
                    "int"
                ],
                "variable": [
                    "None",
                    "dict[str, float]",
                    "typing.Callable[, ]",
                    "str",
                    "bool",
                    "list[dict[str, typing.Any]]"
                ],
                "prefix": [
                    "None",
                    "bool",
                    "str"
                ],
                "op": [
                    "None",
                    "str",
                    "bool",
                    "typing.Callable[, ]"
                ]
            }
        }
    },
    "kgx-master/kgx/source/obograph_source.py": {
        "ObographSource.__init__": {
            "name": "__init__",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "owner": [
                    "int",
                    "list[tuple[typing.Union[typing.Any,typing.Any]]]"
                ]
            }
        },
        "ObographSource.parse": {
            "name": "parse",
            "location": 31,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "str",
                    "None",
                    "typing.Iterable[bytes]"
                ],
                "format": [
                    "typing.Text"
                ],
                "compression": [
                    "None",
                    "str",
                    "typing.Iterable[bytes]"
                ]
            }
        },
        "ObographSource.read_nodes": {
            "name": "read_nodes",
            "location": 64,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "str"
                ],
                "compression": [
                    "None",
                    "int",
                    "str"
                ]
            }
        },
        "ObographSource.read_node": {
            "name": "read_node",
            "location": 88,
            "return": [],
            "arguments": {
                "self": [],
                "node": [
                    "tuple[object]"
                ]
            }
        },
        "ObographSource.read_edges": {
            "name": "read_edges",
            "location": 139,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "str"
                ],
                "compression": [
                    "None",
                    "bool",
                    "str"
                ]
            }
        },
        "ObographSource.read_edge": {
            "name": "read_edge",
            "location": 163,
            "return": [],
            "arguments": {
                "self": [],
                "edge": []
            }
        },
        "ObographSource.get_category": {
            "name": "get_category",
            "location": 229,
            "return": [
                "None",
                "typing.Text"
            ],
            "arguments": {
                "self": [],
                "curie": [
                    "str"
                ],
                "node": [
                    "list[dict[str, typing.Any]]",
                    "str"
                ]
            }
        },
        "ObographSource.parse_meta": {
            "name": "parse_meta",
            "location": 290,
            "return": [
                "dict[typing.Text, typing.Union[str,dict[str, str],typing.Pattern,dict[bytes, typing.Any],list[list[int]],int,list[typing.Union[int,str]]]]"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "list[int]"
                ],
                "meta": [
                    "tuple[typing.Union[int,int,bool]]"
                ]
            }
        }
    },
    "kgx-master/kgx/source/owl_source.py": {
        "OwlSource.__init__": {
            "name": "__init__",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "owner": [
                    "int",
                    "list[tuple[typing.Union[typing.Any,typing.Any]]]"
                ]
            }
        },
        "OwlSource.parse": {
            "name": "parse",
            "location": 35,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "str",
                    "int",
                    "list[str]",
                    "bytes"
                ],
                "format": [
                    "typing.Text"
                ],
                "compression": [
                    "None",
                    "str",
                    "bool"
                ]
            }
        },
        "OwlSource.load_graph": {
            "name": "load_graph",
            "location": 95,
            "return": [
                "typing.Generator[]",
                "typing.Generator[tuple[typing.Union[dict[str, str],dict[typing.Type, str]]]]",
                "typing.Generator[tuple[]]"
            ],
            "arguments": {
                "self": [],
                "rdfgraph": []
            }
        }
    },
    "kgx-master/kgx/source/rdf_source.py": {
        "RdfSource.__init__": {
            "name": "__init__",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "owner": [
                    "int",
                    "list[tuple[typing.Union[typing.Any,typing.Any]]]"
                ]
            }
        },
        "RdfSource.set_predicate_mapping": {
            "name": "set_predicate_mapping",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "m": [
                    "dict[str, bool]",
                    "dict[, ]"
                ]
            }
        },
        "RdfSource.set_node_property_predicates": {
            "name": "set_node_property_predicates",
            "location": 117,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "predicates": [
                    "list[str]",
                    "str",
                    "dict[, ]"
                ]
            }
        },
        "RdfSource.parse": {
            "name": "parse",
            "location": 130,
            "return": [
                "typing.Generator[]",
                "typing.Generator[tuple[]]"
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "str"
                ],
                "format": [
                    "typing.Text"
                ],
                "compression": [
                    "None",
                    "str"
                ]
            }
        },
        "RdfSource.triple": {
            "name": "triple",
            "location": 216,
            "return": [
                "typing.Generator[tuple[]]",
                "typing.Generator[None]"
            ],
            "arguments": {
                "self": [],
                "s": [
                    "str"
                ],
                "p": [
                    "str",
                    "list[]"
                ],
                "o": [
                    "str",
                    "typing.IO",
                    "typing.Callable[str, str]"
                ]
            }
        },
        "RdfSource.dereify": {
            "name": "dereify",
            "location": 324,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "n": [
                    "int"
                ],
                "node": []
            }
        },
        "RdfSource.add_node_attribute": {
            "name": "add_node_attribute",
            "location": 353,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "iri": [
                    "str",
                    "tuple[typing.Union[int,int]]",
                    "typing.Callable[, ]",
                    "None"
                ],
                "key": [
                    "str",
                    "dict[str, str]",
                    "None"
                ],
                "value": [
                    "str",
                    "list[]",
                    "int",
                    "None",
                    "typing.Mapping"
                ]
            }
        },
        "RdfSource.add_node": {
            "name": "add_node",
            "location": 427,
            "return": [],
            "arguments": {
                "self": [],
                "iri": [
                    "bytes",
                    "str"
                ],
                "data": [
                    "dict[, ]"
                ]
            }
        },
        "RdfSource.add_edge": {
            "name": "add_edge",
            "location": 471,
            "return": [
                "dict[typing.Text, typing.Union[typing.Text,int]]",
                "typing.Type",
                "dict[, ]",
                "str"
            ],
            "arguments": {
                "self": [],
                "subject_iri": [
                    "bool"
                ],
                "object_iri": [
                    "bool"
                ],
                "predicate_iri": [
                    "float",
                    "None",
                    "str",
                    "typing.Callable[, ]",
                    "set[str]",
                    "int"
                ],
                "data": [
                    "None",
                    "str",
                    "int",
                    "typing.Callable[, ]"
                ]
            }
        },
        "RdfSource.process_predicate": {
            "name": "process_predicate",
            "location": 557,
            "return": [
                "tuple[typing.Union[None,typing.Text,typing.Deque,list[],float,bytes,dict[, ],tuple[typing.Union[typing.Any,typing.Any,typing.Any,typing.Any,typing.Any,typing.Any,typing.Any]]]]"
            ],
            "arguments": {
                "self": [],
                "p": [
                    "list[]",
                    "str"
                ]
            }
        },
        "RdfSource.update_node": {
            "name": "update_node",
            "location": 634,
            "return": [
                "dict[, ]"
            ],
            "arguments": {
                "self": [],
                "n": [
                    "str",
                    "dict[str, typing.Any]",
                    "dict[, ]",
                    "tuple[typing.Union[int,int,bytearray]]",
                    "bytes"
                ],
                "data": [
                    "None",
                    "dict[, ]",
                    "str",
                    "list[]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "RdfSource.update_edge": {
            "name": "update_edge",
            "location": 657,
            "return": [
                "dict[typing.Union[str,typing.Any,int], typing.Union[str,dict[str, typing.Any],bool]]"
            ],
            "arguments": {
                "self": [],
                "subject_curie": [
                    "bytes",
                    "dict[str, str]",
                    "dict[, ]"
                ],
                "object_curie": [
                    "bytes",
                    "dict[str, str]",
                    "dict[, ]"
                ],
                "edge_key": [
                    "bytes",
                    "dict[str, str]",
                    "dict[, ]"
                ],
                "data": [
                    "str",
                    "dict[, ]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "RdfSource._prepare_data_dict": {
            "name": "_prepare_data_dict",
            "location": 694,
            "return": [],
            "arguments": {
                "self": [],
                "d1": [],
                "d2": [
                    "dict[, ]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "RdfSource.get_biolink_element": {
            "name": "get_biolink_element",
            "location": 823,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "predicate": [
                    "dict[, ]",
                    "int",
                    "dict[str, typing.Any]"
                ]
            }
        }
    },
    "kgx-master/kgx/source/source.py": {
        "Source.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "owner": [
                    "str",
                    "list[str]",
                    "int",
                    "dict[, ]",
                    "dict[str, str]"
                ]
            }
        },
        "Source.set_prefix_map": {
            "name": "set_prefix_map",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "m": [
                    "bool",
                    "list[str]",
                    "str"
                ]
            }
        },
        "Source.check_node_filter": {
            "name": "check_node_filter",
            "location": 42,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "str"
                ]
            }
        },
        "Source.check_edge_filter": {
            "name": "check_edge_filter",
            "location": 87,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "edge": [
                    "list[]",
                    "str"
                ]
            }
        },
        "Source.set_node_filter": {
            "name": "set_node_filter",
            "location": 136,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "set[]",
                    "dict[, ]",
                    "bool"
                ],
                "value": [
                    "str",
                    "dict[str, typing.Any]",
                    "set[]",
                    "dict[, ]"
                ]
            }
        },
        "Source.set_node_filters": {
            "name": "set_node_filters",
            "location": 176,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "filters": [
                    "dict[, ]"
                ]
            }
        },
        "Source.set_edge_filters": {
            "name": "set_edge_filters",
            "location": 193,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "filters": [
                    "dict[, ]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "Source.set_edge_filter": {
            "name": "set_edge_filter",
            "location": 210,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "bool",
                    "dict[, ]"
                ],
                "value": [
                    "str",
                    "dict[str, typing.Any]",
                    "set[]",
                    "dict[, ]"
                ]
            }
        },
        "Source.clear_graph_metadata": {
            "name": "clear_graph_metadata",
            "location": 247,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Source.set_provenance_map": {
            "name": "set_provenance_map",
            "location": 255,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "kwargs": []
            }
        },
        "Source.get_infores_catalog": {
            "name": "get_infores_catalog",
            "location": 262,
            "return": [
                "dict[, ]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Source.set_node_provenance": {
            "name": "set_node_provenance",
            "location": 270,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node_data": [
                    "dict[str, typing.Any]",
                    "typing.Type",
                    "str"
                ]
            }
        },
        "Source.set_edge_provenance": {
            "name": "set_edge_provenance",
            "location": 276,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "edge_data": [
                    "dict[, ]",
                    "str",
                    "dict[str, list[typing.Any]]"
                ]
            }
        },
        "Source.validate_node": {
            "name": "validate_node",
            "location": 282,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "Source.validate_edge": {
            "name": "validate_edge",
            "location": 324,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "edge": []
            }
        }
    },
    "kgx-master/kgx/source/sssom_source.py": {
        "SssomSource.__init__": {
            "name": "__init__",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "owner": [
                    "int",
                    "list[tuple[typing.Union[typing.Any,typing.Any]]]"
                ]
            }
        },
        "SssomSource.set_prefix_map": {
            "name": "set_prefix_map",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "m": [
                    "str",
                    "None",
                    "int",
                    "list[int]",
                    "tuple[int]"
                ]
            }
        },
        "SssomSource.set_reverse_prefix_map": {
            "name": "set_reverse_prefix_map",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "m": [
                    "str",
                    "None",
                    "list[int]",
                    "int",
                    "tuple[int]"
                ]
            }
        },
        "SssomSource.parse": {
            "name": "parse",
            "location": 67,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "str",
                    "bytes"
                ],
                "format": [
                    "str"
                ],
                "compression": [
                    "None",
                    "str",
                    "bytes"
                ]
            }
        },
        "SssomSource.parse_header": {
            "name": "parse_header",
            "location": 120,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "str"
                ],
                "compression": [
                    "None",
                    "bool",
                    "str"
                ]
            }
        },
        "SssomSource.load_node": {
            "name": "load_node",
            "location": 150,
            "return": [
                "None",
                "tuple[]"
            ],
            "arguments": {
                "self": [],
                "node_data": [
                    "str",
                    "typing.Type",
                    "dict[str, str]",
                    "dict[, ]",
                    "int",
                    "None"
                ]
            }
        },
        "SssomSource.load_edges": {
            "name": "load_edges",
            "location": 185,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "self": [],
                "df": []
            }
        },
        "SssomSource.load_edge": {
            "name": "load_edge",
            "location": 203,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "edge": []
            }
        }
    },
    "kgx-master/kgx/source/trapi_source.py": {
        "TrapiSource.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "owner": [
                    "int",
                    "list[tuple[typing.Union[typing.Any,typing.Any]]]"
                ]
            }
        },
        "TrapiSource.parse": {
            "name": "parse",
            "location": 23,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "str",
                    "None",
                    "typing.Iterable[bytes]"
                ],
                "format": [
                    "typing.Text"
                ],
                "compression": [
                    "None",
                    "str",
                    "typing.Iterable[bytes]"
                ]
            }
        },
        "TrapiSource.read_nodes": {
            "name": "read_nodes",
            "location": 57,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "str"
                ],
                "compression": [
                    "None",
                    "bool",
                    "str",
                    "list[str]"
                ]
            }
        },
        "TrapiSource.read_edges": {
            "name": "read_edges",
            "location": 81,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "str"
                ],
                "compression": [
                    "None",
                    "bool",
                    "str"
                ]
            }
        },
        "TrapiSource.load_node": {
            "name": "load_node",
            "location": 105,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "TrapiSource.load_edge": {
            "name": "load_edge",
            "location": 124,
            "return": [],
            "arguments": {
                "self": [],
                "edge": []
            }
        }
    },
    "kgx-master/kgx/source/tsv_source.py": {
        "TsvSource.__init__": {
            "name": "__init__",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "owner": [
                    "int",
                    "list[tuple[typing.Union[typing.Any,typing.Any]]]"
                ]
            }
        },
        "TsvSource.set_prefix_map": {
            "name": "set_prefix_map",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "m": [
                    "str",
                    "None",
                    "int",
                    "list[int]",
                    "tuple[int]"
                ]
            }
        },
        "TsvSource.set_reverse_prefix_map": {
            "name": "set_reverse_prefix_map",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "m": [
                    "str",
                    "None",
                    "list[int]",
                    "int",
                    "tuple[int]"
                ]
            }
        },
        "TsvSource.parse": {
            "name": "parse",
            "location": 56,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "str"
                ],
                "format": [
                    "str"
                ],
                "compression": [
                    "None",
                    "str",
                    "int"
                ]
            }
        },
        "TsvSource.read_nodes": {
            "name": "read_nodes",
            "location": 193,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "self": [],
                "df": []
            }
        },
        "TsvSource.read_node": {
            "name": "read_node",
            "location": 211,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "str"
                ]
            }
        },
        "TsvSource.read_edges": {
            "name": "read_edges",
            "location": 239,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "self": [],
                "df": []
            }
        },
        "TsvSource.read_edge": {
            "name": "read_edge",
            "location": 257,
            "return": [
                "None",
                "tuple[]"
            ],
            "arguments": {
                "self": [],
                "edge": [
                    "typing.Any",
                    "None",
                    "int",
                    "tuple[]",
                    "dict[, ]",
                    "typing.Sequence[int]",
                    "bytes"
                ]
            }
        }
    },
    "kgx-master/kgx/source/__init__.py": {},
    "kgx-master/kgx/utils/graph_utils.py": {
        "get_parents": {
            "name": "get_parents",
            "location": 16,
            "return": [
                "list[]"
            ],
            "arguments": {
                "graph": [],
                "node": [
                    "typing.Pattern",
                    "dict[str, typing.Any]"
                ],
                "relations": [
                    "None",
                    "list[str]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "get_ancestors": {
            "name": "get_ancestors",
            "location": 45,
            "return": [
                "list[]"
            ],
            "arguments": {
                "graph": [
                    "list[str]",
                    "str",
                    "None"
                ],
                "node": [
                    "int"
                ],
                "relations": [
                    "None",
                    "list[str]",
                    "str"
                ]
            }
        },
        "get_category_via_superclass": {
            "name": "get_category_via_superclass",
            "location": 78,
            "return": [
                "set[]"
            ],
            "arguments": {
                "graph": [],
                "curie": [
                    "str",
                    "int",
                    "Exception",
                    "None"
                ],
                "load_ontology": [
                    "bool"
                ]
            }
        },
        "curie_lookup": {
            "name": "curie_lookup",
            "location": 129,
            "return": [
                "None",
                "str"
            ],
            "arguments": {
                "curie": []
            }
        }
    },
    "kgx-master/kgx/utils/infores.py": {
        "InfoResContext.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "InfoResContext.get_catalog": {
            "name": "get_catalog",
            "location": 27,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "InfoResContext.get_mapping": {
            "name": "get_mapping",
            "location": 311,
            "return": [
                "InfoResMapping"
            ],
            "arguments": {
                "self": [],
                "ksf": [
                    "str",
                    "float",
                    "bool"
                ]
            }
        },
        "InfoResContext.set_provenance_map": {
            "name": "set_provenance_map",
            "location": 324,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "kwargs": []
            }
        },
        "InfoResContext.set_provenance": {
            "name": "set_provenance",
            "location": 375,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ksf": [
                    "dict[, ]",
                    "None",
                    "typing.Callable[, ]"
                ],
                "data": []
            }
        },
        "InfoResContext.set_node_provenance": {
            "name": "set_node_provenance",
            "location": 427,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node_data": [
                    "dict[, ]",
                    "dict[str, str]",
                    "typing.Sequence[float]",
                    "typing.Type"
                ]
            }
        },
        "InfoResContext.set_edge_provenance": {
            "name": "set_edge_provenance",
            "location": 442,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "edge_data": [
                    "dict[, ]",
                    "dict[str, typing.Any]",
                    "dict[str, typing.Union[str,bool]]"
                ]
            }
        },
        "InfoResContext.InfoResMapping.__init__": {
            "name": "__init__",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "context": [],
                "ksf": []
            }
        },
        "InfoResContext.InfoResMapping.processor": {
            "name": "processor",
            "location": 62,
            "return": [],
            "arguments": {
                "self": [],
                "infores_rewrite_filter": []
            }
        },
        "InfoResContext.InfoResMapping.default": {
            "name": "default",
            "location": 219,
            "return": [],
            "arguments": {
                "self": [],
                "default": [
                    "None"
                ]
            }
        },
        "InfoResContext.InfoResMapping.set_provenance_map_entry": {
            "name": "set_provenance_map_entry",
            "location": 287,
            "return": [],
            "arguments": {
                "self": [],
                "ksf_value": []
            }
        },
        "InfoResContext.InfoResMapping.processor._get_infores": {
            "name": "_get_infores",
            "location": 105,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "source": []
            }
        },
        "InfoResContext.InfoResMapping.processor._process_infores": {
            "name": "_process_infores",
            "location": 131,
            "return": [],
            "arguments": {
                "source": []
            }
        },
        "InfoResContext.InfoResMapping.processor.parser_list": {
            "name": "parser_list",
            "location": 168,
            "return": [
                "list[]"
            ],
            "arguments": {
                "sources": []
            }
        },
        "InfoResContext.InfoResMapping.processor.parser_scalar": {
            "name": "parser_scalar",
            "location": 192,
            "return": [],
            "arguments": {
                "source": [
                    "None"
                ]
            }
        },
        "InfoResContext.InfoResMapping.default.default_value_list": {
            "name": "default_value_list",
            "location": 237,
            "return": [
                "list[]",
                "None"
            ],
            "arguments": {
                "sources": [
                    "None"
                ]
            }
        },
        "InfoResContext.InfoResMapping.default.default_value_scalar": {
            "name": "default_value_scalar",
            "location": 259,
            "return": [
                "None"
            ],
            "arguments": {
                "source": [
                    "None"
                ]
            }
        }
    },
    "kgx-master/kgx/utils/kgx_utils.py": {
        "camelcase_to_sentencecase": {
            "name": "camelcase_to_sentencecase",
            "location": 110,
            "return": [],
            "arguments": {
                "s": [
                    "str",
                    "int"
                ]
            }
        },
        "snakecase_to_sentencecase": {
            "name": "snakecase_to_sentencecase",
            "location": 128,
            "return": [],
            "arguments": {
                "s": [
                    "str",
                    "int"
                ]
            }
        },
        "sentencecase_to_snakecase": {
            "name": "sentencecase_to_snakecase",
            "location": 146,
            "return": [],
            "arguments": {
                "s": [
                    "str",
                    "int"
                ]
            }
        },
        "sentencecase_to_camelcase": {
            "name": "sentencecase_to_camelcase",
            "location": 164,
            "return": [],
            "arguments": {
                "s": [
                    "str",
                    "bytes"
                ]
            }
        },
        "format_biolink_category": {
            "name": "format_biolink_category",
            "location": 182,
            "return": [
                "str",
                "list[typing.Any]",
                "None",
                "typing.Text"
            ],
            "arguments": {
                "s": [
                    "str",
                    "list[typing.Any]",
                    "None"
                ]
            }
        },
        "format_biolink_slots": {
            "name": "format_biolink_slots",
            "location": 205,
            "return": [
                "str",
                "list[typing.Any]",
                "None",
                "typing.Text"
            ],
            "arguments": {
                "s": [
                    "str",
                    "list[typing.Any]",
                    "None"
                ]
            }
        },
        "contract": {
            "name": "contract",
            "location": 213,
            "return": [
                "str",
                "tuple[]",
                "int",
                "list[str]"
            ],
            "arguments": {
                "uri": [
                    "str"
                ],
                "prefix_maps": [
                    "None",
                    "list[dict[, ]]",
                    "str",
                    "list[dict[str, typing.Any]]",
                    "list[]",
                    "int"
                ],
                "fallback": [
                    "bool"
                ]
            }
        },
        "expand": {
            "name": "expand",
            "location": 260,
            "return": [
                "int",
                "dict[, ]",
                "list[int]",
                "list[list[int]]",
                "str"
            ],
            "arguments": {
                "curie": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ],
                "prefix_maps": [
                    "None",
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ],
                "fallback": [
                    "bool"
                ]
            }
        },
        "get_toolkit": {
            "name": "get_toolkit",
            "location": 304,
            "return": [
                "None",
                "Toolkit"
            ],
            "arguments": {
                "biolink_release": [
                    "None",
                    "bool"
                ]
            }
        },
        "generate_edge_key": {
            "name": "generate_edge_key",
            "location": 334,
            "return": [
                "str"
            ],
            "arguments": {
                "s": [
                    "str",
                    "set[int]",
                    "typing.Callable[typing.Any, None]",
                    "bytes"
                ],
                "edge_predicate": [
                    "str",
                    "set[int]",
                    "typing.Callable[typing.Any, None]",
                    "bytes"
                ],
                "o": [
                    "str",
                    "set[int]",
                    "typing.Callable[typing.Any, None]",
                    "bytes"
                ]
            }
        },
        "get_curie_lookup_service": {
            "name": "get_curie_lookup_service",
            "location": 358,
            "return": [
                "str",
                "None",
                "frozenset",
                "ImportError",
                "bool",
                "dict[str, str]",
                "CurieLookupService"
            ],
            "arguments": {}
        },
        "get_cache": {
            "name": "get_cache",
            "location": 376,
            "return": [
                "int",
                "dict[, ]",
                "str",
                "None",
                "dict[str, typing.Literal]",
                "LRUCache"
            ],
            "arguments": {
                "maxsize": [
                    "int"
                ]
            }
        },
        "current_time_in_millis": {
            "name": "current_time_in_millis",
            "location": 397,
            "return": [
                "int"
            ],
            "arguments": {}
        },
        "get_prefix_prioritization_map": {
            "name": "get_prefix_prioritization_map",
            "location": 410,
            "return": [
                "dict[, ]"
            ],
            "arguments": {}
        },
        "get_biolink_element": {
            "name": "get_biolink_element",
            "location": 433,
            "return": [],
            "arguments": {
                "name": [
                    "str",
                    "list[]",
                    "None"
                ]
            }
        },
        "get_biolink_ancestors": {
            "name": "get_biolink_ancestors",
            "location": 453,
            "return": [],
            "arguments": {
                "name": [
                    "str",
                    "None",
                    "bool"
                ]
            }
        },
        "get_biolink_property_types": {
            "name": "get_biolink_property_types",
            "location": 472,
            "return": [
                "dict[typing.Text, typing.Text]"
            ],
            "arguments": {}
        },
        "get_type_for_property": {
            "name": "get_type_for_property",
            "location": 502,
            "return": [
                "typing.Text",
                "list[int]",
                "typing.Pattern",
                "list[]",
                "list[str]"
            ],
            "arguments": {
                "p": []
            }
        },
        "prepare_data_dict": {
            "name": "prepare_data_dict",
            "location": 540,
            "return": [],
            "arguments": {
                "d1": [
                    "dict[str, str]"
                ],
                "d2": [
                    "dict[, ]",
                    "dict[str, typing.Any]"
                ],
                "preserve": [
                    "bool"
                ]
            }
        },
        "apply_filters": {
            "name": "apply_filters",
            "location": 673,
            "return": [
                "None"
            ],
            "arguments": {
                "graph": [
                    "dict[, ]",
                    "str",
                    "None",
                    "dict[str, typing.Any]"
                ],
                "node_filters": [
                    "dict[str, typing.Union[str,set[]]]",
                    "str",
                    "typing.Callable[, ]"
                ],
                "edge_filters": [
                    "dict[str, typing.Union[str,set[]]]",
                    "str",
                    "None",
                    "bytes",
                    "typing.Type",
                    "bool"
                ]
            }
        },
        "apply_node_filters": {
            "name": "apply_node_filters",
            "location": 696,
            "return": [
                "None"
            ],
            "arguments": {
                "graph": [],
                "node_filters": [
                    "dict[str, typing.Union[str,set[]]]",
                    "dict[, ]",
                    "dict[str, str]"
                ]
            }
        },
        "apply_edge_filters": {
            "name": "apply_edge_filters",
            "location": 726,
            "return": [
                "None"
            ],
            "arguments": {
                "graph": [],
                "edge_filters": [
                    "dict[str, typing.Union[str,set[]]]",
                    "dict[str, dict[str, typing.Any]]"
                ]
            }
        },
        "generate_uuid": {
            "name": "generate_uuid",
            "location": 759,
            "return": [
                "typing.Text"
            ],
            "arguments": {}
        },
        "generate_edge_identifiers": {
            "name": "generate_edge_identifiers",
            "location": 772,
            "return": [
                "None"
            ],
            "arguments": {
                "graph": []
            }
        },
        "sanitize_import": {
            "name": "sanitize_import",
            "location": 787,
            "return": [
                "dict[tuple[typing.Union[str,pandas.DataFrame]], ]"
            ],
            "arguments": {
                "data": [
                    "dict[str, pandas.DataFrame]",
                    "dict[, ]",
                    "dict[str, str]"
                ],
                "list_delimiter": [
                    "None",
                    "dict[, ]",
                    "list[int]",
                    "dict[str, int]"
                ]
            }
        },
        "_sanitize_import_property": {
            "name": "_sanitize_import_property",
            "location": 813,
            "return": [
                "str",
                "list[str]",
                "bool",
                "typing.Mapping",
                "list[]",
                "list[tuple[typing.Union[int,int]]]",
                "list[tuple[typing.Union[str,typing.Any]]]",
                "float",
                "bytes"
            ],
            "arguments": {
                "key": [
                    "str",
                    "int",
                    "dict[, ]"
                ],
                "value": [
                    "bytes",
                    "list[]",
                    "str"
                ],
                "list_delimiter": [
                    "bool",
                    "list[]",
                    "str",
                    "dict[str, typing.Callable[str, typing.Any]]"
                ]
            }
        },
        "build_export_row": {
            "name": "build_export_row",
            "location": 885,
            "return": [
                "dict[tuple[str], ]"
            ],
            "arguments": {
                "data": [
                    "dict[, ]",
                    "dict[str, str]"
                ],
                "list_delimiter": [
                    "None",
                    "dict[, ]",
                    "list[]",
                    "int",
                    "str",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "_sanitize_export_property": {
            "name": "_sanitize_export_property",
            "location": 911,
            "return": [
                "str",
                "list[str]",
                "bool",
                "list[]"
            ],
            "arguments": {
                "key": [
                    "str",
                    "int",
                    "set[]",
                    "list[dict[, ]]"
                ],
                "value": [
                    "str",
                    "bytes"
                ],
                "list_delimiter": [
                    "str"
                ]
            }
        },
        "remove_null": {
            "name": "remove_null",
            "location": 981,
            "return": [
                "None",
                "str",
                "dict[, ]",
                "list[typing.Union[bytes,int,tuple[typing.Union[typing.Any,typing.Any]],float,list[tuple[typing.Union[int,int,int]]],typing.Counter]]"
            ],
            "arguments": {
                "input": [
                    "str",
                    "list[]"
                ]
            }
        },
        "is_null": {
            "name": "is_null",
            "location": 1021,
            "return": [
                "bool"
            ],
            "arguments": {
                "item": [
                    "str",
                    "list[float]"
                ]
            }
        },
        "apply_graph_operations": {
            "name": "apply_graph_operations",
            "location": 1043,
            "return": [
                "None"
            ],
            "arguments": {
                "graph": [
                    "str",
                    "typing.Callable[, ]",
                    "bytes"
                ],
                "operations": [
                    "str"
                ]
            }
        }
    },
    "kgx-master/kgx/utils/rdf_utils.py": {
        "infer_category": {
            "name": "infer_category",
            "location": 90,
            "return": [
                "list[]"
            ],
            "arguments": {
                "iri": [
                    "typing.Iterable[typing.Any]",
                    "typing.Deque"
                ],
                "rdfgraph": []
            }
        },
        "get_biolink_element": {
            "name": "get_biolink_element",
            "location": 134,
            "return": [],
            "arguments": {
                "prefix_manager": [],
                "predicate": []
            }
        },
        "process_predicate": {
            "name": "process_predicate",
            "location": 173,
            "return": [
                "tuple[typing.Union[None,typing.Text,int]]"
            ],
            "arguments": {
                "prefix_manager": [],
                "p": [
                    "int"
                ],
                "predicate_mapping": [
                    "str"
                ]
            }
        }
    },
    "kgx-master/kgx/utils/__init__.py": {},
    "kgx-master/tests/__init__.py": {
        "print_graph": {
            "name": "print_graph",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "g": []
            }
        }
    },
    "kgx-master/tests/integration/test_clique_merge_operation.py": {
        "test_clique_generation": {
            "name": "test_clique_generation",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_clique_merge": {
            "name": "test_clique_merge",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_clique_merge_edge_consolidation": {
            "name": "test_clique_merge_edge_consolidation",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "kgx-master/tests/integration/test_graph_merge.py": {
        "test_merge": {
            "name": "test_merge",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_merge_no_preserve": {
            "name": "test_merge_no_preserve",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "kgx-master/tests/integration/test_neo_loader.py": {
        "test_csv_to_neo4j_load_to_graph_transform": {
            "name": "test_csv_to_neo4j_load_to_graph_transform",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "clean_database": [
                    "str"
                ]
            }
        }
    },
    "kgx-master/tests/integration/test_stream_transform.py": {
        "run_transform": {
            "name": "run_transform",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "query": [
                    "dict[, ]",
                    "list[]",
                    "dict[int, dict[str, typing.Any]]",
                    "tuple[typing.Union[list[int],list[int]]]",
                    "int",
                    "str"
                ]
            }
        },
        "_transform": {
            "name": "_transform",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "query": [
                    "str",
                    "list[str]"
                ]
            }
        },
        "_stream_transform": {
            "name": "_stream_transform",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "query": [
                    "str",
                    "list[str]"
                ]
            }
        },
        "test_transform1": {
            "name": "test_transform1",
            "location": 176,
            "return": [
                "None"
            ],
            "arguments": {
                "query": [
                    "int",
                    "float",
                    "str"
                ]
            }
        },
        "test_transform2": {
            "name": "test_transform2",
            "location": 231,
            "return": [
                "None"
            ],
            "arguments": {
                "query": [
                    "int",
                    "float",
                    "str"
                ]
            }
        },
        "test_transform3": {
            "name": "test_transform3",
            "location": 305,
            "return": [
                "None"
            ],
            "arguments": {
                "query": [
                    "int",
                    "float",
                    "str"
                ]
            }
        },
        "test_transform4": {
            "name": "test_transform4",
            "location": 380,
            "return": [
                "None"
            ],
            "arguments": {
                "query": [
                    "int",
                    "float",
                    "str"
                ]
            }
        },
        "test_transform5": {
            "name": "test_transform5",
            "location": 452,
            "return": [
                "None"
            ],
            "arguments": {
                "query": [
                    "int",
                    "float",
                    "str"
                ]
            }
        },
        "test_transform6": {
            "name": "test_transform6",
            "location": 538,
            "return": [
                "None"
            ],
            "arguments": {
                "query": [
                    "int",
                    "float",
                    "str"
                ]
            }
        },
        "test_transform7": {
            "name": "test_transform7",
            "location": 635,
            "return": [
                "None"
            ],
            "arguments": {
                "clean_slate": [
                    "bool"
                ],
                "query": []
            }
        }
    },
    "kgx-master/tests/integration/test_transform.py": {
        "_transform": {
            "name": "_transform",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "query": [
                    "str",
                    "list[str]"
                ]
            }
        },
        "test_transform_filters1": {
            "name": "test_transform_filters1",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "query": [
                    "str"
                ]
            }
        },
        "test_transform_filters2": {
            "name": "test_transform_filters2",
            "location": 132,
            "return": [
                "None"
            ],
            "arguments": {
                "query": [
                    "str"
                ]
            }
        },
        "test_rdf_transform_with_filters1": {
            "name": "test_rdf_transform_with_filters1",
            "location": 166,
            "return": [
                "None"
            ],
            "arguments": {
                "query": [
                    "str"
                ]
            }
        },
        "test_rdf_transform1": {
            "name": "test_rdf_transform1",
            "location": 182,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_rdf_transform2": {
            "name": "test_rdf_transform2",
            "location": 244,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_rdf_transform3": {
            "name": "test_rdf_transform3",
            "location": 362,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_rdf_transform4": {
            "name": "test_rdf_transform4",
            "location": 425,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_rdf_transform5": {
            "name": "test_rdf_transform5",
            "location": 502,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_transform_inspector": {
            "name": "test_transform_inspector",
            "location": 586,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_transformer_infores_basic_formatting": {
            "name": "test_transformer_infores_basic_formatting",
            "location": 627,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_transformer_infores_suppression": {
            "name": "test_transformer_infores_suppression",
            "location": 663,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_transformer_infores_parser_deletion_rewrite": {
            "name": "test_transformer_infores_parser_deletion_rewrite",
            "location": 687,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_transformer_infores_parser_substitution_rewrite": {
            "name": "test_transformer_infores_parser_substitution_rewrite",
            "location": 720,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_transformer_infores_parser_prefix_rewrite": {
            "name": "test_transformer_infores_parser_prefix_rewrite",
            "location": 755,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_transformer_infores_simple_prefix_rewrite": {
            "name": "test_transformer_infores_simple_prefix_rewrite",
            "location": 790,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_transform_inspector.TestInspector.__init__": {
            "name": "__init__",
            "location": 601,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "test_transform_inspector.TestInspector.__call__": {
            "name": "__call__",
            "location": 605,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "entity_type": [],
                "rec": []
            }
        },
        "test_transform_inspector.TestInspector.get_node_count": {
            "name": "get_node_count",
            "location": 613,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_transform_inspector.TestInspector.get_edge_count": {
            "name": "get_edge_count",
            "location": 616,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "kgx-master/tests/integration/test_validator.py": {
        "test_validator_bad": {
            "name": "test_validator_bad",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_validator_good": {
            "name": "test_validator_good",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_validate_json": {
            "name": "test_validate_json",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_distinct_validator_class_versus_default_toolkit_biolink_version": {
            "name": "test_distinct_validator_class_versus_default_toolkit_biolink_version",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_distinct_class_versus_validator_instance_biolink_version": {
            "name": "test_distinct_class_versus_validator_instance_biolink_version",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_validator_explicit_biolink_version": {
            "name": "test_validator_explicit_biolink_version",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_validator": {
            "name": "test_validator",
            "location": 115,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "kgx-master/tests/integration/__init__.py": {
        "check_container": {
            "name": "check_container",
            "location": 13,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "clean_slate": {
            "name": "clean_slate",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "get_graph": {
            "name": "get_graph",
            "location": 41,
            "return": [],
            "arguments": {
                "source": [
                    "str",
                    "bool",
                    "dict[, ]"
                ]
            }
        }
    },
    "kgx-master/tests/unit/test_clique_merge.py": {
        "test_check_categories": {
            "name": "test_check_categories",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_check_all_categories1": {
            "name": "test_check_all_categories1",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_check_all_categories2": {
            "name": "test_check_all_categories2",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_sort_categories": {
            "name": "test_sort_categories",
            "location": 97,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_clique_merge1": {
            "name": "test_clique_merge1",
            "location": 108,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_clique_merge2": {
            "name": "test_clique_merge2",
            "location": 180,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_clique_merge3": {
            "name": "test_clique_merge3",
            "location": 253,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_clique_merge4": {
            "name": "test_clique_merge4",
            "location": 326,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_clique_merge5": {
            "name": "test_clique_merge5",
            "location": 401,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_clique_merge6": {
            "name": "test_clique_merge6",
            "location": 473,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_clique_merge7": {
            "name": "test_clique_merge7",
            "location": 546,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_clique_merge8": {
            "name": "test_clique_merge8",
            "location": 617,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_clique_merge9": {
            "name": "test_clique_merge9",
            "location": 678,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "kgx-master/tests/unit/test_cli_utils.py": {
        "test_get_file_types": {
            "name": "test_get_file_types",
            "location": 22,
            "return": [],
            "arguments": {}
        },
        "test_get_report_format_types": {
            "name": "test_get_report_format_types",
            "location": 33,
            "return": [],
            "arguments": {}
        },
        "test_graph_summary_wrapper": {
            "name": "test_graph_summary_wrapper",
            "location": 42,
            "return": [],
            "arguments": {}
        },
        "test_graph_summary_wrapper_error": {
            "name": "test_graph_summary_wrapper_error",
            "location": 58,
            "return": [],
            "arguments": {}
        },
        "test_graph_summary_report_type_wrapper_error": {
            "name": "test_graph_summary_report_type_wrapper_error",
            "location": 78,
            "return": [],
            "arguments": {}
        },
        "test_graph_summary_report_format_wrapper_error": {
            "name": "test_graph_summary_report_format_wrapper_error",
            "location": 95,
            "return": [],
            "arguments": {}
        },
        "test_transform_wrapper": {
            "name": "test_transform_wrapper",
            "location": 113,
            "return": [],
            "arguments": {}
        },
        "test_merge_wrapper": {
            "name": "test_merge_wrapper",
            "location": 138,
            "return": [],
            "arguments": {}
        },
        "test_get_output_file_types": {
            "name": "test_get_output_file_types",
            "location": 159,
            "return": [],
            "arguments": {}
        },
        "test_merge_wrapper_error": {
            "name": "test_merge_wrapper_error",
            "location": 164,
            "return": [],
            "arguments": {}
        },
        "test_kgx_graph_summary": {
            "name": "test_kgx_graph_summary",
            "location": 181,
            "return": [],
            "arguments": {}
        },
        "test_meta_knowledge_graph_as_json": {
            "name": "test_meta_knowledge_graph_as_json",
            "location": 215,
            "return": [],
            "arguments": {}
        },
        "test_meta_knowledge_graph_as_yaml": {
            "name": "test_meta_knowledge_graph_as_yaml",
            "location": 244,
            "return": [],
            "arguments": {}
        },
        "test_meta_knowledge_graph_as_json_streamed": {
            "name": "test_meta_knowledge_graph_as_json_streamed",
            "location": 271,
            "return": [],
            "arguments": {}
        },
        "test_validate_exception_triggered_error_exit_code": {
            "name": "test_validate_exception_triggered_error_exit_code",
            "location": 297,
            "return": [],
            "arguments": {}
        },
        "test_validate_parsing_triggered_error_exit_code": {
            "name": "test_validate_parsing_triggered_error_exit_code",
            "location": 322,
            "return": [],
            "arguments": {
                "query": []
            }
        },
        "test_validate": {
            "name": "test_validate",
            "location": 339,
            "return": [],
            "arguments": {}
        },
        "test_neo4j_upload": {
            "name": "test_neo4j_upload",
            "location": 361,
            "return": [],
            "arguments": {
                "clean_database": []
            }
        },
        "test_neo4j_download_wrapper": {
            "name": "test_neo4j_download_wrapper",
            "location": 386,
            "return": [],
            "arguments": {
                "clean_database": []
            }
        },
        "test_download_exception_triggered_error_exit_code": {
            "name": "test_download_exception_triggered_error_exit_code",
            "location": 410,
            "return": [],
            "arguments": {}
        },
        "test_neo4j_upload_wrapper": {
            "name": "test_neo4j_upload_wrapper",
            "location": 434,
            "return": [],
            "arguments": {
                "clean_database": []
            }
        },
        "test_neo4j_upload_wrapper_error": {
            "name": "test_neo4j_upload_wrapper_error",
            "location": 458,
            "return": [],
            "arguments": {
                "clean_database": []
            }
        },
        "test_neo4j_download": {
            "name": "test_neo4j_download",
            "location": 514,
            "return": [],
            "arguments": {
                "clean_database": []
            }
        },
        "test_transform1": {
            "name": "test_transform1",
            "location": 545,
            "return": [],
            "arguments": {}
        },
        "test_transform_error": {
            "name": "test_transform_error",
            "location": 580,
            "return": [],
            "arguments": {}
        },
        "test_transform_knowledge_source_suppression": {
            "name": "test_transform_knowledge_source_suppression",
            "location": 607,
            "return": [],
            "arguments": {}
        },
        "test_transform_knowledge_source_rewrite": {
            "name": "test_transform_knowledge_source_rewrite",
            "location": 642,
            "return": [],
            "arguments": {}
        },
        "test_transform_knowledge_source_rewrite_with_prefix": {
            "name": "test_transform_knowledge_source_rewrite_with_prefix",
            "location": 679,
            "return": [],
            "arguments": {}
        },
        "test_transform2": {
            "name": "test_transform2",
            "location": 716,
            "return": [],
            "arguments": {}
        },
        "test_merge1": {
            "name": "test_merge1",
            "location": 726,
            "return": [],
            "arguments": {}
        },
        "test_merge2": {
            "name": "test_merge2",
            "location": 737,
            "return": [],
            "arguments": {}
        }
    },
    "kgx-master/tests/unit/test_config.py": {
        "test_valid_biolink_version": {
            "name": "test_valid_biolink_version",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_invalid_biolink_version": {
            "name": "test_invalid_biolink_version",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "kgx-master/tests/unit/test_curie_lookup_service.py": {
        "test_curie_lookup": {
            "name": "test_curie_lookup",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "query": [
                    "str",
                    "int"
                ]
            }
        },
        "test_curie_lookup_with_custom": {
            "name": "test_curie_lookup_with_custom",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "kgx-master/tests/unit/test_graph_merge.py": {
        "get_graphs": {
            "name": "get_graphs",
            "location": 10,
            "return": [
                "list[NxGraph]"
            ],
            "arguments": {}
        },
        "test_merge_all_graphs": {
            "name": "test_merge_all_graphs",
            "location": 115,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_merge_graphs": {
            "name": "test_merge_graphs",
            "location": 158,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_merge_node": {
            "name": "test_merge_node",
            "location": 170,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_merge_edge": {
            "name": "test_merge_edge",
            "location": 191,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "kgx-master/tests/unit/test_graph_operations.py": {
        "get_graphs1": {
            "name": "get_graphs1",
            "location": 14,
            "return": [
                "list[NxGraph]"
            ],
            "arguments": {}
        },
        "get_graphs2": {
            "name": "get_graphs2",
            "location": 74,
            "return": [
                "list[NxGraph]"
            ],
            "arguments": {}
        },
        "test_fold_predicate1": {
            "name": "test_fold_predicate1",
            "location": 213,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_fold_predicate2": {
            "name": "test_fold_predicate2",
            "location": 224,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_unfold_node_property1": {
            "name": "test_unfold_node_property1",
            "location": 236,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_unfold_node_property2": {
            "name": "test_unfold_node_property2",
            "location": 248,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_remove_singleton_nodes": {
            "name": "test_remove_singleton_nodes",
            "location": 263,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_remap_node_identifier_alias": {
            "name": "test_remap_node_identifier_alias",
            "location": 281,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_remap_node_identifier_xref": {
            "name": "test_remap_node_identifier_xref",
            "location": 306,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_remap_node_property": {
            "name": "test_remap_node_property",
            "location": 337,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_remap_node_property_fail": {
            "name": "test_remap_node_property_fail",
            "location": 351,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_remap_edge_property": {
            "name": "test_remap_edge_property",
            "location": 367,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_remap_edge_property_fail": {
            "name": "test_remap_edge_property_fail",
            "location": 382,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "kgx-master/tests/unit/test_graph_utils.py": {
        "get_graphs": {
            "name": "get_graphs",
            "location": 7,
            "return": [
                "list[NxGraph]"
            ],
            "arguments": {}
        },
        "test_get_parents": {
            "name": "test_get_parents",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_get_ancestors": {
            "name": "test_get_ancestors",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_get_category_via_superclass": {
            "name": "test_get_category_via_superclass",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_curie_lookup": {
            "name": "test_curie_lookup",
            "location": 105,
            "return": [
                "None"
            ],
            "arguments": {
                "query": [
                    "str"
                ]
            }
        }
    },
    "kgx-master/tests/unit/test_kgx_utils.py": {
        "test_get_toolkit": {
            "name": "test_get_toolkit",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_get_curie_lookup_service": {
            "name": "test_get_curie_lookup_service",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_get_prefix_prioritization_map": {
            "name": "test_get_prefix_prioritization_map",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_get_biolink_element": {
            "name": "test_get_biolink_element",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "query": [
                    "str"
                ]
            }
        },
        "test_get_biolink_ancestors": {
            "name": "test_get_biolink_ancestors",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_generate_edge_key": {
            "name": "test_generate_edge_key",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_camelcase_to_sentencecase": {
            "name": "test_camelcase_to_sentencecase",
            "location": 95,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_snakecase_to_sentencecase": {
            "name": "test_snakecase_to_sentencecase",
            "location": 103,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_sentencecase_to_snakecase": {
            "name": "test_sentencecase_to_snakecase",
            "location": 111,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_sentencecase_to_camelcase": {
            "name": "test_sentencecase_to_camelcase",
            "location": 119,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_contract": {
            "name": "test_contract",
            "location": 137,
            "return": [
                "None"
            ],
            "arguments": {
                "query": [
                    "str"
                ]
            }
        },
        "test_expand": {
            "name": "test_expand",
            "location": 177,
            "return": [
                "None"
            ],
            "arguments": {
                "query": [
                    "str"
                ]
            }
        },
        "test_generate_uuid": {
            "name": "test_generate_uuid",
            "location": 205,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_prepare_data_dict": {
            "name": "test_prepare_data_dict",
            "location": 228,
            "return": [
                "None"
            ],
            "arguments": {
                "query": []
            }
        },
        "test_sanitize_import1": {
            "name": "test_sanitize_import1",
            "location": 279,
            "return": [
                "None"
            ],
            "arguments": {
                "query": [
                    "str"
                ]
            }
        },
        "test_sanitize_import2": {
            "name": "test_sanitize_import2",
            "location": 308,
            "return": [
                "None"
            ],
            "arguments": {
                "query": []
            }
        },
        "test_build_export_row": {
            "name": "test_build_export_row",
            "location": 355,
            "return": [
                "None"
            ],
            "arguments": {
                "query": [
                    "list[str]"
                ]
            }
        },
        "test_sanitize_export_property": {
            "name": "test_sanitize_export_property",
            "location": 384,
            "return": [
                "None"
            ],
            "arguments": {
                "query": []
            }
        }
    },
    "kgx-master/tests/unit/test_meta_knowledge_graph.py": {
        "_check_mkg_json_contents": {
            "name": "_check_mkg_json_contents",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "data": [
                    "bytes"
                ]
            }
        },
        "test_generate_classical_meta_knowledge_graph": {
            "name": "test_generate_classical_meta_knowledge_graph",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_generate_meta_knowledge_graph_by_inspector": {
            "name": "test_generate_meta_knowledge_graph_by_inspector",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_generate_meta_knowledge_graph_via_saved_file": {
            "name": "test_generate_meta_knowledge_graph_via_saved_file",
            "location": 144,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_meta_knowledge_graph_multiple_category_and_predicate_parsing": {
            "name": "test_meta_knowledge_graph_multiple_category_and_predicate_parsing",
            "location": 204,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_meta_knowledge_graph_of_complex_graph_data": {
            "name": "test_meta_knowledge_graph_of_complex_graph_data",
            "location": 256,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_generate_meta_knowledge_graph_via_saved_file.ProgressMonitor.__init__": {
            "name": "__init__",
            "location": 159,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "test_generate_meta_knowledge_graph_via_saved_file.ProgressMonitor.__call__": {
            "name": "__call__",
            "location": 166,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "entity_type": [],
                "rec": []
            }
        },
        "test_generate_meta_knowledge_graph_via_saved_file.ProgressMonitor.summary": {
            "name": "summary",
            "location": 175,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "kgx-master/tests/unit/test_nx_graph.py": {
        "get_graphs": {
            "name": "get_graphs",
            "location": 4,
            "return": [
                "list[NxGraph]"
            ],
            "arguments": {}
        },
        "test_add_node": {
            "name": "test_add_node",
            "location": 101,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_add_edge": {
            "name": "test_add_edge",
            "location": 111,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_add_node_attribute": {
            "name": "test_add_node_attribute",
            "location": 124,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_add_edge_attribute": {
            "name": "test_add_edge_attribute",
            "location": 135,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_update_node_attribute": {
            "name": "test_update_node_attribute",
            "location": 144,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_update_edge_attribute": {
            "name": "test_update_edge_attribute",
            "location": 156,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_nodes": {
            "name": "test_nodes",
            "location": 167,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_edges": {
            "name": "test_edges",
            "location": 181,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_in_edges": {
            "name": "test_in_edges",
            "location": 204,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_out_edges": {
            "name": "test_out_edges",
            "location": 222,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_nodes_iter": {
            "name": "test_nodes_iter",
            "location": 240,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_edges_iter": {
            "name": "test_edges_iter",
            "location": 251,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_remove_node": {
            "name": "test_remove_node",
            "location": 265,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_remove_edge": {
            "name": "test_remove_edge",
            "location": 274,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_number_of_nodes_edges": {
            "name": "test_number_of_nodes_edges",
            "location": 283,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_set_node_attributes": {
            "name": "test_set_node_attributes",
            "location": 292,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_set_edge_attributes": {
            "name": "test_set_edge_attributes",
            "location": 303,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_get_node_attributes": {
            "name": "test_get_node_attributes",
            "location": 317,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_get_edge_attributes": {
            "name": "test_get_edge_attributes",
            "location": 327,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_relabel_nodes": {
            "name": "test_relabel_nodes",
            "location": 337,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "kgx-master/tests/unit/test_prefix_manager.py": {
        "test_is_iri": {
            "name": "test_is_iri",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "query": [
                    "typing.Callable[, ]"
                ]
            }
        },
        "test_is_curie": {
            "name": "test_is_curie",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "query": [
                    "typing.Callable[, ]"
                ]
            }
        },
        "test_get_prefix": {
            "name": "test_get_prefix",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "query": []
            }
        },
        "test_get_reference": {
            "name": "test_get_reference",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "query": [
                    "dict[, ]",
                    "str"
                ]
            }
        },
        "test_prefix_manager": {
            "name": "test_prefix_manager",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_prefix_manager_expand": {
            "name": "test_prefix_manager_expand",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {
                "query": [
                    "dict[, ]"
                ]
            }
        },
        "test_prefix_manager_contract": {
            "name": "test_prefix_manager_contract",
            "location": 117,
            "return": [
                "None"
            ],
            "arguments": {
                "query": [
                    "dict[, ]"
                ]
            }
        }
    },
    "kgx-master/tests/unit/test_rdf_utils.py": {
        "test_infer_category": {
            "name": "test_infer_category",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "query": [
                    "str",
                    "list[str]",
                    "tuple[typing.Union[typing.Literal,typing.Literal]]"
                ]
            }
        },
        "test_process_predicate": {
            "name": "test_process_predicate",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {
                "query": [
                    "tuple[]",
                    "list[str]"
                ]
            }
        }
    },
    "kgx-master/tests/unit/test_summarize_graph.py": {
        "get_graphs": {
            "name": "get_graphs",
            "location": 31,
            "return": [
                "list[NxGraph]"
            ],
            "arguments": {}
        },
        "test_generate_graph_stats": {
            "name": "test_generate_graph_stats",
            "location": 129,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_summarize_graph": {
            "name": "test_summarize_graph",
            "location": 214,
            "return": [
                "None"
            ],
            "arguments": {
                "query": [
                    "bytes"
                ]
            }
        },
        "test_summarize_graph_inspector": {
            "name": "test_summarize_graph_inspector",
            "location": 225,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "kgx-master/tests/unit/test_validator.py": {
        "test_get_all_prefixes": {
            "name": "test_get_all_prefixes",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "prefix": [
                    "str",
                    "dict[str, float]",
                    "int"
                ]
            }
        },
        "test_get_required_node_properties": {
            "name": "test_get_required_node_properties",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "property": [
                    "str",
                    "dict[str, typing.Any]",
                    "bytes"
                ]
            }
        },
        "test_get_required_edge_properties": {
            "name": "test_get_required_edge_properties",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "property": [
                    "str",
                    "dict[str, typing.Any]",
                    "list[]"
                ]
            }
        },
        "test_validate_node_properties": {
            "name": "test_validate_node_properties",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "query": [
                    "list[int]"
                ]
            }
        },
        "test_validate_edge_properties": {
            "name": "test_validate_edge_properties",
            "location": 108,
            "return": [
                "None"
            ],
            "arguments": {
                "query": []
            }
        },
        "test_validate_node_property_types": {
            "name": "test_validate_node_property_types",
            "location": 166,
            "return": [
                "None"
            ],
            "arguments": {
                "query": []
            }
        },
        "test_validate_node_property_id_types_error": {
            "name": "test_validate_node_property_id_types_error",
            "location": 186,
            "return": [
                "None"
            ],
            "arguments": {
                "query": [
                    "str"
                ]
            }
        },
        "test_validate_node_property_id_str_is_int_types_error": {
            "name": "test_validate_node_property_id_str_is_int_types_error",
            "location": 206,
            "return": [
                "None"
            ],
            "arguments": {
                "query": [
                    "str"
                ]
            }
        },
        "test_validate_node_property_uriorcurie_types_error": {
            "name": "test_validate_node_property_uriorcurie_types_error",
            "location": 226,
            "return": [
                "None"
            ],
            "arguments": {
                "query": [
                    "str"
                ]
            }
        },
        "test_validate_edge_property_object_is_int_type_error": {
            "name": "test_validate_edge_property_object_is_int_type_error",
            "location": 252,
            "return": [
                "None"
            ],
            "arguments": {
                "query": [
                    "bytes"
                ]
            }
        },
        "test_validate_edge_property_subject_is_int_type_error": {
            "name": "test_validate_edge_property_subject_is_int_type_error",
            "location": 279,
            "return": [
                "None"
            ],
            "arguments": {
                "query": [
                    "bytes"
                ]
            }
        },
        "test_validate_edge_property_types_and_prefixes": {
            "name": "test_validate_edge_property_types_and_prefixes",
            "location": 338,
            "return": [
                "None"
            ],
            "arguments": {
                "query": [
                    "str"
                ]
            }
        },
        "test_validate_node_property_values": {
            "name": "test_validate_node_property_values",
            "location": 378,
            "return": [
                "None"
            ],
            "arguments": {
                "query": []
            }
        },
        "test_validate_edge_property_values": {
            "name": "test_validate_edge_property_values",
            "location": 437,
            "return": [
                "None"
            ],
            "arguments": {
                "query": [
                    "str"
                ]
            }
        },
        "test_validate_categories": {
            "name": "test_validate_categories",
            "location": 477,
            "return": [
                "None"
            ],
            "arguments": {
                "query": [
                    "list[list[str]]",
                    "list[str]"
                ]
            }
        },
        "test_validate_edge_label": {
            "name": "test_validate_edge_label",
            "location": 536,
            "return": [
                "None"
            ],
            "arguments": {
                "query": [
                    "list[dict[, ]]",
                    "str"
                ]
            }
        }
    },
    "kgx-master/tests/unit/__init__.py": {
        "check_container": {
            "name": "check_container",
            "location": 14,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "clean_database": {
            "name": "clean_database",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "load_graph_dictionary": {
            "name": "load_graph_dictionary",
            "location": 58,
            "return": [
                "tuple[dict[, ]]"
            ],
            "arguments": {
                "g": [
                    "list[]"
                ]
            }
        },
        "get_graph": {
            "name": "get_graph",
            "location": 77,
            "return": [],
            "arguments": {
                "source": [
                    "str",
                    "dict[, ]"
                ]
            }
        }
    },
    "kgx-master/tests/unit/test_sink/test_graph_sink.py": {
        "test_write_graph_no_edge_identifier": {
            "name": "test_write_graph_no_edge_identifier",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "kgx-master/tests/unit/test_sink/test_jsonl_sink.py": {
        "test_write_jsonl1": {
            "name": "test_write_jsonl1",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_write_jsonl2": {
            "name": "test_write_jsonl2",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "kgx-master/tests/unit/test_sink/test_json_sink.py": {
        "test_write_json1": {
            "name": "test_write_json1",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_write_json2": {
            "name": "test_write_json2",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "kgx-master/tests/unit/test_sink/test_neo_sink.py": {
        "test_sanitize_category": {
            "name": "test_sanitize_category",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_create_constraint_query": {
            "name": "test_create_constraint_query",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "category": [
                    "tuple[typing.Union[int,int]]"
                ]
            }
        },
        "test_write_neo1": {
            "name": "test_write_neo1",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "clean_database": [
                    "str",
                    "typing.Mapping"
                ]
            }
        },
        "test_write_neo2": {
            "name": "test_write_neo2",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {
                "clean_database": [
                    "bool"
                ],
                "query": [
                    "list[int]",
                    "str"
                ]
            }
        },
        "test_write_neo3": {
            "name": "test_write_neo3",
            "location": 121,
            "return": [
                "None"
            ],
            "arguments": {
                "clean_database": [
                    "str",
                    "typing.Mapping"
                ]
            }
        }
    },
    "kgx-master/tests/unit/test_sink/test_rdf_sink.py": {
        "test_write_rdf1": {
            "name": "test_write_rdf1",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_write_rdf2": {
            "name": "test_write_rdf2",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_write_rdf3": {
            "name": "test_write_rdf3",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_prepare_object": {
            "name": "test_prepare_object",
            "location": 101,
            "return": [
                "None"
            ],
            "arguments": {
                "query": []
            }
        },
        "test_get_property_type": {
            "name": "test_get_property_type",
            "location": 117,
            "return": [
                "None"
            ],
            "arguments": {
                "query": [
                    "str",
                    "dict[str, str]",
                    "dict[typing.Hashable, typing.Any]",
                    "None",
                    "list[]",
                    "set[]",
                    "typing.Callable[, ]",
                    "bool"
                ]
            }
        },
        "test_uriref": {
            "name": "test_uriref",
            "location": 135,
            "return": [
                "None"
            ],
            "arguments": {
                "query": [
                    "str"
                ]
            }
        }
    },
    "kgx-master/tests/unit/test_sink/test_tsv_sink.py": {
        "test_write_tsv1": {
            "name": "test_write_tsv1",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_write_tsv2": {
            "name": "test_write_tsv2",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_write_tsv3": {
            "name": "test_write_tsv3",
            "location": 112,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "kgx-master/tests/unit/test_sink/__init__.py": {
        "get_graph": {
            "name": "get_graph",
            "location": 4,
            "return": [
                "NxGraph"
            ],
            "arguments": {}
        }
    },
    "kgx-master/tests/unit/test_source/test_graph_source.py": {
        "test_read_graph1": {
            "name": "test_read_graph1",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_read_graph2": {
            "name": "test_read_graph2",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "kgx-master/tests/unit/test_source/test_jsonl_source.py": {
        "test_read_jsonl1": {
            "name": "test_read_jsonl1",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_read_jsonl2": {
            "name": "test_read_jsonl2",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "kgx-master/tests/unit/test_source/test_json_source.py": {
        "test_read_json1": {
            "name": "test_read_json1",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_read_json2": {
            "name": "test_read_json2",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_read_json_compressed": {
            "name": "test_read_json_compressed",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "kgx-master/tests/unit/test_source/test_neo_source.py": {
        "test_read_neo": {
            "name": "test_read_neo",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "clean_database": [
                    "str",
                    "typing.Mapping"
                ]
            }
        }
    },
    "kgx-master/tests/unit/test_source/test_obograph_source.py": {
        "test_read_obograph1": {
            "name": "test_read_obograph1",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_read_jsonl2": {
            "name": "test_read_jsonl2",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_get_category": {
            "name": "test_get_category",
            "location": 174,
            "return": [
                "None"
            ],
            "arguments": {
                "query": []
            }
        },
        "test_error_detection": {
            "name": "test_error_detection",
            "location": 187,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "kgx-master/tests/unit/test_source/test_owl_source.py": {
        "test_read_owl1": {
            "name": "test_read_owl1",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_read_owl2": {
            "name": "test_read_owl2",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_read_owl3": {
            "name": "test_read_owl3",
            "location": 110,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_read_owl4": {
            "name": "test_read_owl4",
            "location": 172,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "kgx-master/tests/unit/test_source/test_rdf_source.py": {
        "test_read_nt1": {
            "name": "test_read_nt1",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_read_nt2": {
            "name": "test_read_nt2",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_read_nt3": {
            "name": "test_read_nt3",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_read_nt4": {
            "name": "test_read_nt4",
            "location": 150,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_read_nt5": {
            "name": "test_read_nt5",
            "location": 216,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_read_nt6": {
            "name": "test_read_nt6",
            "location": 261,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_prepare_data_dict": {
            "name": "test_prepare_data_dict",
            "location": 381,
            "return": [
                "None"
            ],
            "arguments": {
                "query": [
                    "str"
                ]
            }
        }
    },
    "kgx-master/tests/unit/test_source/test_source.py": {
        "test_validate_incorrect_node": {
            "name": "test_validate_incorrect_node",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "node": [
                    "str",
                    "int",
                    "typing.Callable[, ]"
                ]
            }
        },
        "test_validate_correct_node": {
            "name": "test_validate_correct_node",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "node": [
                    "int"
                ]
            }
        },
        "test_validate_incorrect_edge": {
            "name": "test_validate_incorrect_edge",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "edge": [
                    "str"
                ]
            }
        },
        "test_validate_correct_edge": {
            "name": "test_validate_correct_edge",
            "location": 95,
            "return": [
                "None"
            ],
            "arguments": {
                "edge": [
                    "int"
                ]
            }
        },
        "test_incorrect_node_filters": {
            "name": "test_incorrect_node_filters",
            "location": 119,
            "return": [
                "None"
            ],
            "arguments": {
                "node": [
                    "str",
                    "typing.Callable[, ]",
                    "int"
                ]
            }
        },
        "test_incorrect_edge_filters": {
            "name": "test_incorrect_edge_filters",
            "location": 145,
            "return": [
                "None"
            ],
            "arguments": {
                "edge": []
            }
        }
    },
    "kgx-master/tests/unit/test_source/test_sssom_source.py": {
        "test_load1": {
            "name": "test_load1",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_load2": {
            "name": "test_load2",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_load3": {
            "name": "test_load3",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "kgx-master/tests/unit/test_source/test_trapi_source.py": {
        "test_read_trapi_json1": {
            "name": "test_read_trapi_json1",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_read_trapi_json2": {
            "name": "test_read_trapi_json2",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "kgx-master/tests/unit/test_source/test_tsv_source.py": {
        "test_read_tsv": {
            "name": "test_read_tsv",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_read_csv": {
            "name": "test_read_csv",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_read_tsv_tar_compressed": {
            "name": "test_read_tsv_tar_compressed",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_read_tsv_tar_gz_compressed": {
            "name": "test_read_tsv_tar_gz_compressed",
            "location": 101,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_read_tsv_tar_gz_compressed_inverted_file_order": {
            "name": "test_read_tsv_tar_gz_compressed_inverted_file_order",
            "location": 125,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_incorrect_nodes": {
            "name": "test_incorrect_nodes",
            "location": 149,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "kgx-master/tests/unit/test_source/__init__.py": {}
}
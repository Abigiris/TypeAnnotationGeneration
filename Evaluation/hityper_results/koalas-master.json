{
    "koalas-master/setup.py": {},
    "koalas-master/databricks/conftest.py": {
        "session_termination": {
            "name": "session_termination",
            "location": 52,
            "return": [
                "typing.Generator"
            ],
            "arguments": {}
        },
        "add_ks": {
            "name": "add_ks",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "doctest_namespace": []
            }
        },
        "add_pd": {
            "name": "add_pd",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "doctest_namespace": []
            }
        },
        "add_pa": {
            "name": "add_pa",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "doctest_namespace": []
            }
        },
        "add_np": {
            "name": "add_np",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {
                "doctest_namespace": []
            }
        },
        "add_path": {
            "name": "add_path",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {
                "doctest_namespace": []
            }
        },
        "add_db": {
            "name": "add_db",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {
                "doctest_namespace": []
            }
        },
        "add_caplog": {
            "name": "add_caplog",
            "location": 99,
            "return": [
                "typing.Generator"
            ],
            "arguments": {
                "caplog": []
            }
        },
        "check_options": {
            "name": "check_options",
            "location": 105,
            "return": [
                "typing.Generator"
            ],
            "arguments": {}
        }
    },
    "koalas-master/databricks/__init__.py": {},
    "koalas-master/databricks/koalas/accessors.py": {
        "KoalasFrameMethods.__init__": {
            "name": "__init__",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "frame": []
            }
        },
        "KoalasFrameMethods.attach_id_column": {
            "name": "attach_id_column",
            "location": 57,
            "return": [
                "DataFrame"
            ],
            "arguments": {
                "self": [],
                "id_type": [],
                "column": []
            }
        },
        "KoalasFrameMethods.apply_batch": {
            "name": "apply_batch",
            "location": 190,
            "return": [
                "DataFrame"
            ],
            "arguments": {
                "self": [],
                "func": [],
                "args": [
                    "tuple"
                ]
            }
        },
        "KoalasFrameMethods.transform_batch": {
            "name": "transform_batch",
            "location": 405,
            "return": [],
            "arguments": {
                "self": [],
                "func": []
            }
        },
        "KoalasSeriesMethods.__init__": {
            "name": "__init__",
            "location": 747,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "series": []
            }
        },
        "KoalasSeriesMethods.transform_batch": {
            "name": "transform_batch",
            "location": 750,
            "return": [],
            "arguments": {
                "self": [],
                "func": []
            }
        },
        "KoalasSeriesMethods._transform_batch": {
            "name": "_transform_batch",
            "location": 874,
            "return": [],
            "arguments": {
                "self": [],
                "func": [],
                "return_type": []
            }
        },
        "KoalasFrameMethods.transform_batch.pandas_concat": {
            "name": "pandas_concat",
            "location": 556,
            "return": [],
            "arguments": {
                "series": []
            }
        },
        "KoalasFrameMethods.transform_batch.apply_func": {
            "name": "apply_func",
            "location": 563,
            "return": [],
            "arguments": {
                "pdf": []
            }
        },
        "KoalasFrameMethods.transform_batch.pandas_extract": {
            "name": "pandas_extract",
            "location": 566,
            "return": [],
            "arguments": {
                "pdf": [],
                "name": []
            }
        },
        "KoalasFrameMethods.transform_batch.pandas_series_func": {
            "name": "pandas_series_func",
            "location": 571,
            "return": [
                "typing.Callable"
            ],
            "arguments": {
                "f": [],
                "by_pass": []
            }
        },
        "KoalasFrameMethods.transform_batch.pandas_frame_func": {
            "name": "pandas_frame_func",
            "location": 578,
            "return": [
                "typing.Callable"
            ],
            "arguments": {
                "f": [],
                "field_name": []
            }
        },
        "KoalasSeriesMethods._transform_batch.pandas_concat": {
            "name": "pandas_concat",
            "location": 903,
            "return": [],
            "arguments": {
                "series": []
            }
        },
        "KoalasSeriesMethods._transform_batch.apply_func": {
            "name": "apply_func",
            "location": 910,
            "return": [],
            "arguments": {
                "pdf": []
            }
        }
    },
    "koalas-master/databricks/koalas/base.py": {
        "should_alignment_for_column_op": {
            "name": "should_alignment_for_column_op",
            "location": 75,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "align_diff_index_ops": {
            "name": "align_diff_index_ops",
            "location": 84,
            "return": [],
            "arguments": {
                "func": [],
                "this_index_ops": []
            }
        },
        "booleanize_null": {
            "name": "booleanize_null",
            "location": 194,
            "return": [],
            "arguments": {
                "scol": [],
                "f": []
            }
        },
        "column_op": {
            "name": "column_op",
            "location": 211,
            "return": [],
            "arguments": {
                "f": []
            }
        },
        "numpy_column_op": {
            "name": "numpy_column_op",
            "location": 266,
            "return": [],
            "arguments": {
                "f": []
            }
        },
        "column_op.wrapper": {
            "name": "wrapper",
            "location": 224,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "numpy_column_op.wrapper": {
            "name": "wrapper",
            "location": 268,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "IndexOpsMixin._internal": {
            "name": "_internal",
            "location": 291,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "IndexOpsMixin._kdf": {
            "name": "_kdf",
            "location": 296,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "IndexOpsMixin._with_new_scol": {
            "name": "_with_new_scol",
            "location": 300,
            "return": [],
            "arguments": {
                "self": [],
                "scol": []
            }
        },
        "IndexOpsMixin._column_label": {
            "name": "_column_label",
            "location": 305,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "IndexOpsMixin.spark": {
            "name": "spark",
            "location": 310,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "IndexOpsMixin.spark_column": {
            "name": "spark_column",
            "location": 314,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "IndexOpsMixin.__add__": {
            "name": "__add__",
            "location": 327,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "IndexOpsMixin.__sub__": {
            "name": "__sub__",
            "location": 349,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "IndexOpsMixin.__mul__": {
            "name": "__mul__",
            "location": 393,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "IndexOpsMixin.__truediv__": {
            "name": "__truediv__",
            "location": 419,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "IndexOpsMixin.__mod__": {
            "name": "__mod__",
            "location": 456,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "IndexOpsMixin.__radd__": {
            "name": "__radd__",
            "location": 472,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "IndexOpsMixin.__rsub__": {
            "name": "__rsub__",
            "location": 490,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "IndexOpsMixin.__rmul__": {
            "name": "__rmul__",
            "location": 522,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "IndexOpsMixin.__rtruediv__": {
            "name": "__rtruediv__",
            "location": 539,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "IndexOpsMixin.__floordiv__": {
            "name": "__floordiv__",
            "location": 553,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "IndexOpsMixin.__rfloordiv__": {
            "name": "__rfloordiv__",
            "location": 593,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "IndexOpsMixin.__rmod__": {
            "name": "__rmod__",
            "location": 607,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "IndexOpsMixin.__pow__": {
            "name": "__pow__",
            "location": 619,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "IndexOpsMixin.__rpow__": {
            "name": "__rpow__",
            "location": 625,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "IndexOpsMixin.__and__": {
            "name": "__and__",
            "location": 643,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "IndexOpsMixin.__or__": {
            "name": "__or__",
            "location": 669,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "IndexOpsMixin.__rand__": {
            "name": "__rand__",
            "location": 695,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "IndexOpsMixin.__ror__": {
            "name": "__ror__",
            "location": 698,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "IndexOpsMixin.__len__": {
            "name": "__len__",
            "location": 701,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "IndexOpsMixin.__array_ufunc__": {
            "name": "__array_ufunc__",
            "location": 705,
            "return": [],
            "arguments": {
                "self": [],
                "ufunc": [],
                "method": []
            }
        },
        "IndexOpsMixin.dtype": {
            "name": "dtype",
            "location": 724,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "IndexOpsMixin.empty": {
            "name": "empty",
            "location": 747,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "IndexOpsMixin.hasnans": {
            "name": "hasnans",
            "location": 763,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "IndexOpsMixin.is_monotonic": {
            "name": "is_monotonic",
            "location": 794,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "IndexOpsMixin.is_monotonic_decreasing": {
            "name": "is_monotonic_decreasing",
            "location": 872,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "IndexOpsMixin._is_locally_monotonic_spark_column": {
            "name": "_is_locally_monotonic_spark_column",
            "location": 947,
            "return": [],
            "arguments": {
                "self": [],
                "order": []
            }
        },
        "IndexOpsMixin._is_monotonic": {
            "name": "_is_monotonic",
            "location": 963,
            "return": [],
            "arguments": {
                "self": [],
                "order": []
            }
        },
        "IndexOpsMixin.ndim": {
            "name": "ndim",
            "location": 1021,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "IndexOpsMixin.astype": {
            "name": "astype",
            "location": 1053,
            "return": [],
            "arguments": {
                "self": [],
                "dtype": []
            }
        },
        "IndexOpsMixin.isin": {
            "name": "isin",
            "location": 1186,
            "return": [],
            "arguments": {
                "self": [],
                "values": []
            }
        },
        "IndexOpsMixin.isnull": {
            "name": "isnull",
            "location": 1239,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "IndexOpsMixin.notnull": {
            "name": "notnull",
            "location": 1277,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "IndexOpsMixin.all": {
            "name": "all",
            "location": 1322,
            "return": [],
            "arguments": {
                "self": [],
                "axis": []
            }
        },
        "IndexOpsMixin.any": {
            "name": "any",
            "location": 1385,
            "return": [],
            "arguments": {
                "self": [],
                "axis": []
            }
        },
        "IndexOpsMixin.shift": {
            "name": "shift",
            "location": 1448,
            "return": [],
            "arguments": {
                "self": [],
                "periods": [],
                "fill_value": []
            }
        },
        "IndexOpsMixin._shift": {
            "name": "_shift",
            "location": 1497,
            "return": [],
            "arguments": {
                "self": [],
                "periods": [],
                "fill_value": []
            }
        },
        "IndexOpsMixin.value_counts": {
            "name": "value_counts",
            "location": 1512,
            "return": [],
            "arguments": {
                "self": [],
                "normalize": [],
                "sort": [],
                "ascending": [],
                "bins": [],
                "dropna": []
            }
        },
        "IndexOpsMixin.nunique": {
            "name": "nunique",
            "location": 1694,
            "return": [],
            "arguments": {
                "self": [],
                "dropna": [],
                "approx": [],
                "rsd": []
            }
        },
        "IndexOpsMixin._nunique": {
            "name": "_nunique",
            "location": 1748,
            "return": [],
            "arguments": {
                "self": [],
                "dropna": [],
                "approx": [],
                "rsd": []
            }
        },
        "IndexOpsMixin.take": {
            "name": "take",
            "location": 1761,
            "return": [],
            "arguments": {
                "self": [],
                "indices": []
            }
        },
        "IndexOpsMixin.factorize": {
            "name": "factorize",
            "location": 1835,
            "return": [],
            "arguments": {
                "self": [],
                "sort": [],
                "na_sentinel": []
            }
        },
        "IndexOpsMixin.__truediv__.truediv": {
            "name": "truediv",
            "location": 447,
            "return": [],
            "arguments": {
                "left": [],
                "right": []
            }
        },
        "IndexOpsMixin.__mod__.mod": {
            "name": "mod",
            "location": 467,
            "return": [],
            "arguments": {
                "left": [],
                "right": []
            }
        },
        "IndexOpsMixin.__rtruediv__.rtruediv": {
            "name": "rtruediv",
            "location": 546,
            "return": [],
            "arguments": {
                "left": [],
                "right": []
            }
        },
        "IndexOpsMixin.__floordiv__.floordiv": {
            "name": "floordiv",
            "location": 580,
            "return": [],
            "arguments": {
                "left": [],
                "right": []
            }
        },
        "IndexOpsMixin.__rfloordiv__.rfloordiv": {
            "name": "rfloordiv",
            "location": 600,
            "return": [],
            "arguments": {
                "left": [],
                "right": []
            }
        },
        "IndexOpsMixin.__rmod__.rmod": {
            "name": "rmod",
            "location": 614,
            "return": [],
            "arguments": {
                "left": [],
                "right": []
            }
        },
        "IndexOpsMixin.__pow__.pow_func": {
            "name": "pow_func",
            "location": 620,
            "return": [],
            "arguments": {
                "left": [],
                "right": []
            }
        },
        "IndexOpsMixin.__rpow__.rpow_func": {
            "name": "rpow_func",
            "location": 626,
            "return": [],
            "arguments": {
                "left": [],
                "right": []
            }
        },
        "IndexOpsMixin.__and__.and_func": {
            "name": "and_func",
            "location": 658,
            "return": [],
            "arguments": {
                "left": [],
                "right": []
            }
        },
        "IndexOpsMixin.__or__.or_func": {
            "name": "or_func",
            "location": 684,
            "return": [],
            "arguments": {
                "left": [],
                "right": []
            }
        }
    },
    "koalas-master/databricks/koalas/categorical.py": {
        "CategoricalAccessor.__init__": {
            "name": "__init__",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "series": []
            }
        },
        "CategoricalAccessor.categories": {
            "name": "categories",
            "location": 84,
            "return": [],
            "arguments": {
                "self": [],
                "categories": []
            }
        },
        "CategoricalAccessor.ordered": {
            "name": "ordered",
            "location": 88,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CategoricalAccessor.codes": {
            "name": "codes",
            "location": 111,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CategoricalAccessor.add_categories": {
            "name": "add_categories",
            "location": 139,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "new_categories": [],
                "inplace": [
                    "bool"
                ]
            }
        },
        "CategoricalAccessor.as_ordered": {
            "name": "as_ordered",
            "location": 142,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "inplace": [
                    "bool"
                ]
            }
        },
        "CategoricalAccessor.as_unordered": {
            "name": "as_unordered",
            "location": 145,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "inplace": [
                    "bool"
                ]
            }
        },
        "CategoricalAccessor.remove_categories": {
            "name": "remove_categories",
            "location": 148,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "removals": [],
                "inplace": [
                    "bool"
                ]
            }
        },
        "CategoricalAccessor.remove_unused_categories": {
            "name": "remove_unused_categories",
            "location": 151,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CategoricalAccessor.rename_categories": {
            "name": "rename_categories",
            "location": 154,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "new_categories": [],
                "inplace": [
                    "bool"
                ]
            }
        },
        "CategoricalAccessor.reorder_categories": {
            "name": "reorder_categories",
            "location": 157,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "new_categories": [],
                "ordered": [
                    "None"
                ],
                "inplace": [
                    "bool"
                ]
            }
        },
        "CategoricalAccessor.set_categories": {
            "name": "set_categories",
            "location": 160,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "new_categories": [],
                "ordered": [
                    "None"
                ],
                "rename": [
                    "bool"
                ],
                "inplace": [
                    "bool"
                ]
            }
        }
    },
    "koalas-master/databricks/koalas/config.py": {
        "show_options": {
            "name": "show_options",
            "location": 244,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "get_option": {
            "name": "get_option",
            "location": 277,
            "return": [],
            "arguments": {
                "key": [],
                "default": []
            }
        },
        "set_option": {
            "name": "set_option",
            "location": 304,
            "return": [
                "None"
            ],
            "arguments": {
                "key": [],
                "value": []
            }
        },
        "reset_option": {
            "name": "reset_option",
            "location": 325,
            "return": [
                "None"
            ],
            "arguments": {
                "key": []
            }
        },
        "option_context": {
            "name": "option_context",
            "location": 345,
            "return": [
                "typing.Generator"
            ],
            "arguments": {}
        },
        "_check_option": {
            "name": "_check_option",
            "location": 372,
            "return": [
                "None"
            ],
            "arguments": {
                "key": []
            }
        },
        "Option.__init__": {
            "name": "__init__",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Option.validate": {
            "name": "validate",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "v": []
            }
        },
        "DictWrapper.__init__": {
            "name": "__init__",
            "location": 384,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "d": [],
                "prefix": [
                    "typing.Text"
                ]
            }
        },
        "DictWrapper.__setattr__": {
            "name": "__setattr__",
            "location": 388,
            "return": [],
            "arguments": {
                "self": [],
                "key": [],
                "val": []
            }
        },
        "DictWrapper.__getattr__": {
            "name": "__getattr__",
            "location": 407,
            "return": [
                "DictWrapper"
            ],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "DictWrapper.__dir__": {
            "name": "__dir__",
            "location": 428,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "koalas-master/databricks/koalas/datetimes.py": {
        "DatetimeMethods.__init__": {
            "name": "__init__",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "series": []
            }
        },
        "DatetimeMethods.date": {
            "name": "date",
            "location": 43,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DatetimeMethods.time": {
            "name": "time",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DatetimeMethods.timetz": {
            "name": "timetz",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DatetimeMethods.year": {
            "name": "year",
            "location": 61,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DatetimeMethods.month": {
            "name": "month",
            "location": 68,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DatetimeMethods.day": {
            "name": "day",
            "location": 75,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DatetimeMethods.hour": {
            "name": "hour",
            "location": 82,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DatetimeMethods.minute": {
            "name": "minute",
            "location": 89,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DatetimeMethods.second": {
            "name": "second",
            "location": 96,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DatetimeMethods.microsecond": {
            "name": "microsecond",
            "location": 103,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DatetimeMethods.nanosecond": {
            "name": "nanosecond",
            "location": 114,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DatetimeMethods.week": {
            "name": "week",
            "location": 118,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DatetimeMethods.weekofyear": {
            "name": "weekofyear",
            "location": 125,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DatetimeMethods.dayofweek": {
            "name": "dayofweek",
            "location": 131,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DatetimeMethods.weekday": {
            "name": "weekday",
            "location": 173,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DatetimeMethods.dayofyear": {
            "name": "dayofyear",
            "location": 179,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DatetimeMethods.quarter": {
            "name": "quarter",
            "location": 190,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DatetimeMethods.is_month_start": {
            "name": "is_month_start",
            "location": 201,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DatetimeMethods.is_month_end": {
            "name": "is_month_end",
            "location": 240,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DatetimeMethods.is_quarter_start": {
            "name": "is_quarter_start",
            "location": 279,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DatetimeMethods.is_quarter_end": {
            "name": "is_quarter_end",
            "location": 329,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DatetimeMethods.is_year_start": {
            "name": "is_year_start",
            "location": 379,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DatetimeMethods.is_year_end": {
            "name": "is_year_end",
            "location": 418,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DatetimeMethods.is_leap_year": {
            "name": "is_leap_year",
            "location": 457,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DatetimeMethods.daysinmonth": {
            "name": "daysinmonth",
            "location": 496,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DatetimeMethods.days_in_month": {
            "name": "days_in_month",
            "location": 507,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DatetimeMethods.tz_localize": {
            "name": "tz_localize",
            "location": 514,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tz": []
            }
        },
        "DatetimeMethods.tz_convert": {
            "name": "tz_convert",
            "location": 521,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tz": []
            }
        },
        "DatetimeMethods.normalize": {
            "name": "normalize",
            "location": 528,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DatetimeMethods.strftime": {
            "name": "strftime",
            "location": 566,
            "return": [],
            "arguments": {
                "self": [],
                "date_format": []
            }
        },
        "DatetimeMethods.round": {
            "name": "round",
            "location": 614,
            "return": [],
            "arguments": {
                "self": [],
                "freq": []
            }
        },
        "DatetimeMethods.floor": {
            "name": "floor",
            "location": 669,
            "return": [],
            "arguments": {
                "self": [],
                "freq": []
            }
        },
        "DatetimeMethods.ceil": {
            "name": "ceil",
            "location": 724,
            "return": [],
            "arguments": {
                "self": [],
                "freq": []
            }
        },
        "DatetimeMethods.month_name": {
            "name": "month_name",
            "location": 779,
            "return": [],
            "arguments": {
                "self": [],
                "locale": [
                    "None"
                ]
            }
        },
        "DatetimeMethods.day_name": {
            "name": "day_name",
            "location": 815,
            "return": [],
            "arguments": {
                "self": [],
                "locale": [
                    "None"
                ]
            }
        },
        "DatetimeMethods.microsecond.pandas_microsecond": {
            "name": "pandas_microsecond",
            "location": 108,
            "return": [],
            "arguments": {
                "s": []
            }
        },
        "DatetimeMethods.dayofweek.pandas_dayofweek": {
            "name": "pandas_dayofweek",
            "location": 167,
            "return": [],
            "arguments": {
                "s": []
            }
        },
        "DatetimeMethods.dayofyear.pandas_dayofyear": {
            "name": "pandas_dayofyear",
            "location": 184,
            "return": [],
            "arguments": {
                "s": []
            }
        },
        "DatetimeMethods.quarter.pandas_quarter": {
            "name": "pandas_quarter",
            "location": 195,
            "return": [],
            "arguments": {
                "s": []
            }
        },
        "DatetimeMethods.is_month_start.pandas_is_month_start": {
            "name": "pandas_is_month_start",
            "location": 234,
            "return": [],
            "arguments": {
                "s": []
            }
        },
        "DatetimeMethods.is_month_end.pandas_is_month_end": {
            "name": "pandas_is_month_end",
            "location": 273,
            "return": [],
            "arguments": {
                "s": []
            }
        },
        "DatetimeMethods.is_quarter_start.pandas_is_quarter_start": {
            "name": "pandas_is_quarter_start",
            "location": 323,
            "return": [],
            "arguments": {
                "s": []
            }
        },
        "DatetimeMethods.is_quarter_end.pandas_is_quarter_end": {
            "name": "pandas_is_quarter_end",
            "location": 373,
            "return": [],
            "arguments": {
                "s": []
            }
        },
        "DatetimeMethods.is_year_start.pandas_is_year_start": {
            "name": "pandas_is_year_start",
            "location": 412,
            "return": [],
            "arguments": {
                "s": []
            }
        },
        "DatetimeMethods.is_year_end.pandas_is_year_end": {
            "name": "pandas_is_year_end",
            "location": 451,
            "return": [],
            "arguments": {
                "s": []
            }
        },
        "DatetimeMethods.is_leap_year.pandas_is_leap_year": {
            "name": "pandas_is_leap_year",
            "location": 490,
            "return": [],
            "arguments": {
                "s": []
            }
        },
        "DatetimeMethods.daysinmonth.pandas_daysinmonth": {
            "name": "pandas_daysinmonth",
            "location": 501,
            "return": [],
            "arguments": {
                "s": []
            }
        },
        "DatetimeMethods.normalize.pandas_normalize": {
            "name": "pandas_normalize",
            "location": 561,
            "return": [],
            "arguments": {
                "s": []
            }
        },
        "DatetimeMethods.strftime.pandas_strftime": {
            "name": "pandas_strftime",
            "location": 609,
            "return": [],
            "arguments": {
                "s": []
            }
        },
        "DatetimeMethods.round.pandas_round": {
            "name": "pandas_round",
            "location": 664,
            "return": [],
            "arguments": {
                "s": []
            }
        },
        "DatetimeMethods.floor.pandas_floor": {
            "name": "pandas_floor",
            "location": 719,
            "return": [],
            "arguments": {
                "s": []
            }
        },
        "DatetimeMethods.ceil.pandas_ceil": {
            "name": "pandas_ceil",
            "location": 774,
            "return": [],
            "arguments": {
                "s": []
            }
        },
        "DatetimeMethods.month_name.pandas_month_name": {
            "name": "pandas_month_name",
            "location": 810,
            "return": [],
            "arguments": {
                "s": []
            }
        },
        "DatetimeMethods.day_name.pandas_day_name": {
            "name": "pandas_day_name",
            "location": 846,
            "return": [],
            "arguments": {
                "s": []
            }
        }
    },
    "koalas-master/databricks/koalas/exceptions.py": {
        "code_change_hint": {
            "name": "code_change_hint",
            "location": 30,
            "return": [
                "str",
                "typing.Text"
            ],
            "arguments": {
                "pandas_function": [],
                "spark_target_function": []
            }
        },
        "SparkPandasNotImplementedError.__init__": {
            "name": "__init__",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pandas_function": [
                    "None"
                ],
                "spark_target_function": [
                    "None"
                ],
                "description": [
                    "typing.Text"
                ]
            }
        },
        "PandasNotImplementedError.__init__": {
            "name": "__init__",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "class_name": [],
                "method_name": [
                    "None"
                ],
                "arg_name": [
                    "None"
                ],
                "property_name": [
                    "None"
                ],
                "deprecated": [
                    "bool"
                ],
                "reason": [
                    "typing.Text"
                ]
            }
        }
    },
    "koalas-master/databricks/koalas/extensions.py": {
        "_register_accessor": {
            "name": "_register_accessor",
            "location": 56,
            "return": [],
            "arguments": {
                "name": [],
                "cls": []
            }
        },
        "register_dataframe_accessor": {
            "name": "register_dataframe_accessor",
            "location": 121,
            "return": [],
            "arguments": {
                "name": []
            }
        },
        "register_series_accessor": {
            "name": "register_series_accessor",
            "location": 199,
            "return": [],
            "arguments": {
                "name": []
            }
        },
        "register_index_accessor": {
            "name": "register_index_accessor",
            "location": 271,
            "return": [],
            "arguments": {
                "name": []
            }
        },
        "CachedAccessor.__init__": {
            "name": "__init__",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [],
                "accessor": []
            }
        },
        "CachedAccessor.__get__": {
            "name": "__get__",
            "location": 48,
            "return": [],
            "arguments": {
                "self": [],
                "obj": [],
                "cls": []
            }
        },
        "_register_accessor.decorator": {
            "name": "decorator",
            "location": 105,
            "return": [],
            "arguments": {
                "accessor": []
            }
        }
    },
    "koalas-master/databricks/koalas/frame.py": {
        "_create_tuple_for_frame_type": {
            "name": "_create_tuple_for_frame_type",
            "location": 338,
            "return": [],
            "arguments": {
                "params": []
            }
        },
        "_reduce_spark_multi": {
            "name": "_reduce_spark_multi",
            "location": 11916,
            "return": [],
            "arguments": {
                "sdf": [],
                "aggs": []
            }
        },
        "new_getitem": {
            "name": "new_getitem",
            "location": 397,
            "return": [],
            "arguments": {
                "self": [],
                "params": []
            }
        },
        "DataFrame.__init__": {
            "name": "__init__",
            "location": 481,
            "return": [],
            "arguments": {
                "self": [],
                "data": [],
                "index": [],
                "columns": [],
                "dtype": [],
                "copy": []
            }
        },
        "DataFrame._ksers": {
            "name": "_ksers",
            "location": 515,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DataFrame._internal": {
            "name": "_internal",
            "location": 542,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DataFrame._update_internal_frame": {
            "name": "_update_internal_frame",
            "location": 545,
            "return": [],
            "arguments": {
                "self": [],
                "internal": [],
                "requires_same_anchor": []
            }
        },
        "DataFrame.ndim": {
            "name": "ndim",
            "location": 592,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DataFrame.axes": {
            "name": "axes",
            "location": 615,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DataFrame._reduce_for_stat_function": {
            "name": "_reduce_for_stat_function",
            "location": 631,
            "return": [],
            "arguments": {
                "self": [],
                "sfun": [],
                "name": [],
                "axis": [],
                "numeric_only": []
            }
        },
        "DataFrame._kser_for": {
            "name": "_kser_for",
            "location": 730,
            "return": [],
            "arguments": {
                "self": [],
                "label": []
            }
        },
        "DataFrame._apply_series_op": {
            "name": "_apply_series_op",
            "location": 759,
            "return": [],
            "arguments": {
                "self": [],
                "op": [],
                "should_resolve": []
            }
        },
        "DataFrame._map_series_op": {
            "name": "_map_series_op",
            "location": 769,
            "return": [],
            "arguments": {
                "self": [],
                "op": [],
                "other": []
            }
        },
        "DataFrame.__add__": {
            "name": "__add__",
            "location": 822,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "DataFrame.__radd__": {
            "name": "__radd__",
            "location": 825,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "DataFrame.__div__": {
            "name": "__div__",
            "location": 828,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "DataFrame.__rdiv__": {
            "name": "__rdiv__",
            "location": 831,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "DataFrame.__truediv__": {
            "name": "__truediv__",
            "location": 834,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "DataFrame.__rtruediv__": {
            "name": "__rtruediv__",
            "location": 837,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "DataFrame.__mul__": {
            "name": "__mul__",
            "location": 840,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "DataFrame.__rmul__": {
            "name": "__rmul__",
            "location": 843,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "DataFrame.__sub__": {
            "name": "__sub__",
            "location": 846,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "DataFrame.__rsub__": {
            "name": "__rsub__",
            "location": 849,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "DataFrame.__pow__": {
            "name": "__pow__",
            "location": 852,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "DataFrame.__rpow__": {
            "name": "__rpow__",
            "location": 855,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "DataFrame.__mod__": {
            "name": "__mod__",
            "location": 858,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "DataFrame.__rmod__": {
            "name": "__rmod__",
            "location": 861,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "DataFrame.__floordiv__": {
            "name": "__floordiv__",
            "location": 864,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "DataFrame.__rfloordiv__": {
            "name": "__rfloordiv__",
            "location": 867,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "DataFrame.__abs__": {
            "name": "__abs__",
            "location": 870,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DataFrame.__neg__": {
            "name": "__neg__",
            "location": 873,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DataFrame.add": {
            "name": "add",
            "location": 876,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "DataFrame.hist": {
            "name": "hist",
            "location": 888,
            "return": [],
            "arguments": {
                "self": [],
                "bins": []
            }
        },
        "DataFrame.kde": {
            "name": "kde",
            "location": 893,
            "return": [],
            "arguments": {
                "self": [],
                "bw_method": [],
                "ind": []
            }
        },
        "DataFrame.radd": {
            "name": "radd",
            "location": 902,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "DataFrame.div": {
            "name": "div",
            "location": 909,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "DataFrame.rdiv": {
            "name": "rdiv",
            "location": 918,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "DataFrame.truediv": {
            "name": "truediv",
            "location": 925,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "DataFrame.rtruediv": {
            "name": "rtruediv",
            "location": 932,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "DataFrame.mul": {
            "name": "mul",
            "location": 939,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "DataFrame.rmul": {
            "name": "rmul",
            "location": 948,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "DataFrame.sub": {
            "name": "sub",
            "location": 955,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "DataFrame.rsub": {
            "name": "rsub",
            "location": 964,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "DataFrame.mod": {
            "name": "mod",
            "location": 971,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "DataFrame.rmod": {
            "name": "rmod",
            "location": 978,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "DataFrame.pow": {
            "name": "pow",
            "location": 985,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "DataFrame.rpow": {
            "name": "rpow",
            "location": 992,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "DataFrame.floordiv": {
            "name": "floordiv",
            "location": 999,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "DataFrame.rfloordiv": {
            "name": "rfloordiv",
            "location": 1006,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "DataFrame.__eq__": {
            "name": "__eq__",
            "location": 1014,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "DataFrame.__ne__": {
            "name": "__ne__",
            "location": 1017,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "DataFrame.__lt__": {
            "name": "__lt__",
            "location": 1020,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "DataFrame.__le__": {
            "name": "__le__",
            "location": 1023,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "DataFrame.__ge__": {
            "name": "__ge__",
            "location": 1026,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "DataFrame.__gt__": {
            "name": "__gt__",
            "location": 1029,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "DataFrame.eq": {
            "name": "eq",
            "location": 1032,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "DataFrame.gt": {
            "name": "gt",
            "location": 1051,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "DataFrame.ge": {
            "name": "ge",
            "location": 1068,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "DataFrame.lt": {
            "name": "lt",
            "location": 1085,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "DataFrame.le": {
            "name": "le",
            "location": 1102,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "DataFrame.ne": {
            "name": "ne",
            "location": 1119,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "DataFrame.applymap": {
            "name": "applymap",
            "location": 1136,
            "return": [],
            "arguments": {
                "self": [],
                "func": []
            }
        },
        "DataFrame.aggregate": {
            "name": "aggregate",
            "location": 1199,
            "return": [],
            "arguments": {
                "self": [],
                "func": []
            }
        },
        "DataFrame.corr": {
            "name": "corr",
            "location": 1324,
            "return": [],
            "arguments": {
                "self": [],
                "method": []
            }
        },
        "DataFrame.iteritems": {
            "name": "iteritems",
            "location": 1368,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DataFrame.iterrows": {
            "name": "iterrows",
            "location": 1412,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DataFrame.itertuples": {
            "name": "itertuples",
            "location": 1473,
            "return": [],
            "arguments": {
                "self": [],
                "index": [],
                "name": []
            }
        },
        "DataFrame.items": {
            "name": "items",
            "location": 1570,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DataFrame.to_clipboard": {
            "name": "to_clipboard",
            "location": 1574,
            "return": [],
            "arguments": {
                "self": [],
                "excel": [],
                "sep": []
            }
        },
        "DataFrame.to_html": {
            "name": "to_html",
            "location": 1649,
            "return": [],
            "arguments": {
                "self": [],
                "buf": [],
                "columns": [],
                "col_space": [],
                "header": [],
                "index": [],
                "na_rep": [],
                "formatters": [],
                "float_format": [],
                "sparsify": [],
                "index_names": [],
                "justify": [],
                "max_rows": [],
                "max_cols": [],
                "show_dimensions": [],
                "decimal": [],
                "bold_rows": [],
                "classes": [],
                "escape": [],
                "notebook": [],
                "border": [],
                "table_id": [],
                "render_links": []
            }
        },
        "DataFrame.to_string": {
            "name": "to_string",
            "location": 1769,
            "return": [],
            "arguments": {
                "self": [],
                "buf": [],
                "columns": [],
                "col_space": [],
                "header": [],
                "index": [],
                "na_rep": [],
                "formatters": [],
                "float_format": [],
                "sparsify": [],
                "index_names": [],
                "justify": [],
                "max_rows": [],
                "max_cols": [],
                "show_dimensions": [],
                "decimal": [],
                "line_width": []
            }
        },
        "DataFrame.to_dict": {
            "name": "to_dict",
            "location": 1884,
            "return": [],
            "arguments": {
                "self": [],
                "orient": [],
                "into": []
            }
        },
        "DataFrame.to_latex": {
            "name": "to_latex",
            "location": 1981,
            "return": [],
            "arguments": {
                "self": [],
                "buf": [],
                "columns": [],
                "col_space": [],
                "header": [],
                "index": [],
                "na_rep": [],
                "formatters": [],
                "float_format": [],
                "sparsify": [],
                "index_names": [],
                "bold_rows": [],
                "column_format": [],
                "longtable": [],
                "escape": [],
                "encoding": [],
                "decimal": [],
                "multicolumn": [],
                "multicolumn_format": [],
                "multirow": []
            }
        },
        "DataFrame.transpose": {
            "name": "transpose",
            "location": 2107,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DataFrame.apply_batch": {
            "name": "apply_batch",
            "location": 2307,
            "return": [],
            "arguments": {
                "self": [],
                "func": [],
                "args": []
            }
        },
        "DataFrame.map_in_pandas": {
            "name": "map_in_pandas",
            "location": 2318,
            "return": [],
            "arguments": {
                "self": [],
                "func": []
            }
        },
        "DataFrame.apply": {
            "name": "apply",
            "location": 2328,
            "return": [],
            "arguments": {
                "self": [],
                "func": [],
                "axis": [],
                "args": []
            }
        },
        "DataFrame.transform": {
            "name": "transform",
            "location": 2640,
            "return": [],
            "arguments": {
                "self": [],
                "func": [],
                "axis": []
            }
        },
        "DataFrame.transform_batch": {
            "name": "transform_batch",
            "location": 2796,
            "return": [],
            "arguments": {
                "self": [],
                "func": []
            }
        },
        "DataFrame.pop": {
            "name": "pop",
            "location": 2806,
            "return": [],
            "arguments": {
                "self": [],
                "item": []
            }
        },
        "DataFrame.xs": {
            "name": "xs",
            "location": 2885,
            "return": [],
            "arguments": {
                "self": [],
                "key": [],
                "axis": [],
                "level": []
            }
        },
        "DataFrame.between_time": {
            "name": "between_time",
            "location": 3013,
            "return": [],
            "arguments": {
                "self": [],
                "start_time": [],
                "end_time": [],
                "include_start": [],
                "include_end": [],
                "axis": []
            }
        },
        "DataFrame.at_time": {
            "name": "at_time",
            "location": 3111,
            "return": [],
            "arguments": {
                "self": [],
                "time": [],
                "asof": [],
                "axis": []
            }
        },
        "DataFrame.where": {
            "name": "where",
            "location": 3191,
            "return": [],
            "arguments": {
                "self": [],
                "cond": [],
                "other": []
            }
        },
        "DataFrame.mask": {
            "name": "mask",
            "location": 3382,
            "return": [],
            "arguments": {
                "self": [],
                "cond": [],
                "other": []
            }
        },
        "DataFrame.index": {
            "name": "index",
            "location": 3463,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DataFrame.empty": {
            "name": "empty",
            "location": 3477,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DataFrame.style": {
            "name": "style",
            "location": 3498,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DataFrame.set_index": {
            "name": "set_index",
            "location": 3517,
            "return": [],
            "arguments": {
                "self": [],
                "keys": [],
                "drop": [],
                "append": [],
                "inplace": []
            }
        },
        "DataFrame.reset_index": {
            "name": "reset_index",
            "location": 3624,
            "return": [],
            "arguments": {
                "self": [],
                "level": [],
                "drop": [],
                "inplace": [],
                "col_level": [],
                "col_fill": []
            }
        },
        "DataFrame.isnull": {
            "name": "isnull",
            "location": 3896,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DataFrame.notnull": {
            "name": "notnull",
            "location": 3928,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DataFrame.insert": {
            "name": "insert",
            "location": 3960,
            "return": [],
            "arguments": {
                "self": [],
                "loc": [],
                "column": [],
                "value": [],
                "allow_duplicates": []
            }
        },
        "DataFrame.shift": {
            "name": "shift",
            "location": 4042,
            "return": [],
            "arguments": {
                "self": [],
                "periods": [],
                "fill_value": []
            }
        },
        "DataFrame.diff": {
            "name": "diff",
            "location": 4092,
            "return": [],
            "arguments": {
                "self": [],
                "periods": [],
                "axis": []
            }
        },
        "DataFrame.nunique": {
            "name": "nunique",
            "location": 4167,
            "return": [],
            "arguments": {
                "self": [],
                "axis": [],
                "dropna": [],
                "approx": [],
                "rsd": []
            }
        },
        "DataFrame.round": {
            "name": "round",
            "location": 4246,
            "return": [],
            "arguments": {
                "self": [],
                "decimals": []
            }
        },
        "DataFrame._mark_duplicates": {
            "name": "_mark_duplicates",
            "location": 4328,
            "return": [],
            "arguments": {
                "self": [],
                "subset": [],
                "keep": []
            }
        },
        "DataFrame.duplicated": {
            "name": "duplicated",
            "location": 4367,
            "return": [],
            "arguments": {
                "self": [],
                "subset": [],
                "keep": []
            }
        },
        "DataFrame.dot": {
            "name": "dot",
            "location": 4445,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "DataFrame.__matmul__": {
            "name": "__matmul__",
            "location": 4526,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "DataFrame.to_koalas": {
            "name": "to_koalas",
            "location": 4532,
            "return": [],
            "arguments": {
                "self": [],
                "index_col": []
            }
        },
        "DataFrame.cache": {
            "name": "cache",
            "location": 4599,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DataFrame.persist": {
            "name": "persist",
            "location": 4609,
            "return": [],
            "arguments": {
                "self": [],
                "storage_level": []
            }
        },
        "DataFrame.hint": {
            "name": "hint",
            "location": 4619,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "DataFrame.to_table": {
            "name": "to_table",
            "location": 4629,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "format": [],
                "mode": [],
                "partition_cols": [],
                "index_col": []
            }
        },
        "DataFrame.to_delta": {
            "name": "to_delta",
            "location": 4642,
            "return": [],
            "arguments": {
                "self": [],
                "path": [],
                "mode": [],
                "partition_cols": [],
                "index_col": []
            }
        },
        "DataFrame.to_parquet": {
            "name": "to_parquet",
            "location": 4719,
            "return": [],
            "arguments": {
                "self": [],
                "path": [],
                "mode": [],
                "partition_cols": [],
                "compression": [],
                "index_col": []
            }
        },
        "DataFrame.to_orc": {
            "name": "to_orc",
            "location": 4790,
            "return": [],
            "arguments": {
                "self": [],
                "path": [],
                "mode": [],
                "partition_cols": [],
                "index_col": []
            }
        },
        "DataFrame.to_spark_io": {
            "name": "to_spark_io",
            "location": 4861,
            "return": [],
            "arguments": {
                "self": [],
                "path": [],
                "format": [],
                "mode": [],
                "partition_cols": [],
                "index_col": []
            }
        },
        "DataFrame.to_spark": {
            "name": "to_spark",
            "location": 4874,
            "return": [],
            "arguments": {
                "self": [],
                "index_col": []
            }
        },
        "DataFrame.to_pandas": {
            "name": "to_pandas",
            "location": 4879,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DataFrame.toPandas": {
            "name": "toPandas",
            "location": 4900,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DataFrame.assign": {
            "name": "assign",
            "location": 4910,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DataFrame._assign": {
            "name": "_assign",
            "location": 4970,
            "return": [],
            "arguments": {
                "self": [],
                "kwargs": []
            }
        },
        "DataFrame.from_records": {
            "name": "from_records",
            "location": 5029,
            "return": [],
            "arguments": {
                "data": [],
                "index": [],
                "exclude": [],
                "columns": [],
                "coerce_float": [],
                "nrows": []
            }
        },
        "DataFrame.to_records": {
            "name": "to_records",
            "location": 5090,
            "return": [],
            "arguments": {
                "self": [],
                "index": [],
                "column_dtypes": [],
                "index_dtypes": []
            }
        },
        "DataFrame.copy": {
            "name": "copy",
            "location": 5169,
            "return": [],
            "arguments": {
                "self": [],
                "deep": []
            }
        },
        "DataFrame.dropna": {
            "name": "dropna",
            "location": 5198,
            "return": [],
            "arguments": {
                "self": [],
                "axis": [],
                "how": [],
                "thresh": [],
                "subset": [],
                "inplace": []
            }
        },
        "DataFrame.fillna": {
            "name": "fillna",
            "location": 5404,
            "return": [],
            "arguments": {
                "self": [],
                "value": [],
                "method": [],
                "axis": [],
                "inplace": [],
                "limit": []
            }
        },
        "DataFrame.replace": {
            "name": "replace",
            "location": 5528,
            "return": [],
            "arguments": {
                "self": [],
                "to_replace": [],
                "value": [],
                "inplace": [],
                "limit": [],
                "regex": [],
                "method": []
            }
        },
        "DataFrame.clip": {
            "name": "clip",
            "location": 5650,
            "return": [],
            "arguments": {
                "self": [],
                "lower": [],
                "upper": []
            }
        },
        "DataFrame.head": {
            "name": "head",
            "location": 5693,
            "return": [],
            "arguments": {
                "self": [],
                "n": []
            }
        },
        "DataFrame.last": {
            "name": "last",
            "location": 5755,
            "return": [],
            "arguments": {
                "self": [],
                "offset": []
            }
        },
        "DataFrame.first": {
            "name": "first",
            "location": 5810,
            "return": [],
            "arguments": {
                "self": [],
                "offset": []
            }
        },
        "DataFrame.pivot_table": {
            "name": "pivot_table",
            "location": 5865,
            "return": [],
            "arguments": {
                "self": [],
                "values": [],
                "index": [],
                "columns": [],
                "aggfunc": [],
                "fill_value": []
            }
        },
        "DataFrame.pivot": {
            "name": "pivot",
            "location": 6152,
            "return": [],
            "arguments": {
                "self": [],
                "index": [],
                "columns": [],
                "values": []
            }
        },
        "DataFrame.columns": {
            "name": "columns",
            "location": 6298,
            "return": [],
            "arguments": {
                "self": [],
                "columns": []
            }
        },
        "DataFrame.dtypes": {
            "name": "dtypes",
            "location": 6330,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DataFrame.spark_schema": {
            "name": "spark_schema",
            "location": 6366,
            "return": [],
            "arguments": {
                "self": [],
                "index_col": []
            }
        },
        "DataFrame.print_schema": {
            "name": "print_schema",
            "location": 6376,
            "return": [],
            "arguments": {
                "self": [],
                "index_col": []
            }
        },
        "DataFrame.select_dtypes": {
            "name": "select_dtypes",
            "location": 6386,
            "return": [],
            "arguments": {
                "self": [],
                "include": [],
                "exclude": []
            }
        },
        "DataFrame.droplevel": {
            "name": "droplevel",
            "location": 6552,
            "return": [],
            "arguments": {
                "self": [],
                "level": [],
                "axis": []
            }
        },
        "DataFrame.drop": {
            "name": "drop",
            "location": 6663,
            "return": [],
            "arguments": {
                "self": [],
                "labels": [],
                "axis": [],
                "columns": []
            }
        },
        "DataFrame._sort": {
            "name": "_sort",
            "location": 6772,
            "return": [],
            "arguments": {
                "self": [],
                "by": [],
                "ascending": [],
                "inplace": [],
                "na_position": []
            }
        },
        "DataFrame.sort_values": {
            "name": "sort_values",
            "location": 6801,
            "return": [],
            "arguments": {
                "self": [],
                "by": [],
                "ascending": [],
                "inplace": [],
                "na_position": []
            }
        },
        "DataFrame.sort_index": {
            "name": "sort_index",
            "location": 6898,
            "return": [],
            "arguments": {
                "self": [],
                "axis": [],
                "level": [],
                "ascending": [],
                "inplace": [],
                "kind": [],
                "na_position": []
            }
        },
        "DataFrame.swaplevel": {
            "name": "swaplevel",
            "location": 7001,
            "return": [],
            "arguments": {
                "self": [],
                "i": [],
                "j": [],
                "axis": []
            }
        },
        "DataFrame.swapaxes": {
            "name": "swapaxes",
            "location": 7102,
            "return": [],
            "arguments": {
                "self": [],
                "i": [],
                "j": [],
                "copy": []
            }
        },
        "DataFrame._swaplevel_columns": {
            "name": "_swaplevel_columns",
            "location": 7159,
            "return": [],
            "arguments": {
                "self": [],
                "i": [],
                "j": []
            }
        },
        "DataFrame._swaplevel_index": {
            "name": "_swaplevel_index",
            "location": 7189,
            "return": [],
            "arguments": {
                "self": [],
                "i": [],
                "j": []
            }
        },
        "DataFrame.nlargest": {
            "name": "nlargest",
            "location": 7221,
            "return": [],
            "arguments": {
                "self": [],
                "n": [],
                "columns": []
            }
        },
        "DataFrame.nsmallest": {
            "name": "nsmallest",
            "location": 7295,
            "return": [],
            "arguments": {
                "self": [],
                "n": [],
                "columns": []
            }
        },
        "DataFrame.isin": {
            "name": "isin",
            "location": 7359,
            "return": [],
            "arguments": {
                "self": [],
                "values": []
            }
        },
        "DataFrame.shape": {
            "name": "shape",
            "location": 7439,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DataFrame.merge": {
            "name": "merge",
            "location": 7456,
            "return": [],
            "arguments": {
                "self": [],
                "right": [],
                "how": [],
                "on": [],
                "left_on": [],
                "right_on": [],
                "left_index": [],
                "right_index": [],
                "suffixes": []
            }
        },
        "DataFrame.join": {
            "name": "join",
            "location": 7785,
            "return": [],
            "arguments": {
                "self": [],
                "right": [],
                "on": [],
                "how": [],
                "lsuffix": [],
                "rsuffix": []
            }
        },
        "DataFrame.append": {
            "name": "append",
            "location": 7914,
            "return": [],
            "arguments": {
                "self": [],
                "other": [],
                "ignore_index": [],
                "verify_integrity": [],
                "sort": []
            }
        },
        "DataFrame.update": {
            "name": "update",
            "location": 7988,
            "return": [],
            "arguments": {
                "self": [],
                "other": [],
                "join": [],
                "overwrite": []
            }
        },
        "DataFrame.sample": {
            "name": "sample",
            "location": 8096,
            "return": [],
            "arguments": {
                "self": [],
                "n": [],
                "frac": [],
                "replace": [],
                "random_state": []
            }
        },
        "DataFrame.astype": {
            "name": "astype",
            "location": 8185,
            "return": [],
            "arguments": {
                "self": [],
                "dtype": []
            }
        },
        "DataFrame.add_prefix": {
            "name": "add_prefix",
            "location": 8257,
            "return": [],
            "arguments": {
                "self": [],
                "prefix": []
            }
        },
        "DataFrame.add_suffix": {
            "name": "add_suffix",
            "location": 8302,
            "return": [],
            "arguments": {
                "self": [],
                "suffix": []
            }
        },
        "DataFrame.describe": {
            "name": "describe",
            "location": 8348,
            "return": [],
            "arguments": {
                "self": [],
                "percentiles": []
            }
        },
        "DataFrame.drop_duplicates": {
            "name": "drop_duplicates",
            "location": 8531,
            "return": [],
            "arguments": {
                "self": [],
                "subset": [],
                "keep": [],
                "inplace": []
            }
        },
        "DataFrame.reindex": {
            "name": "reindex",
            "location": 8609,
            "return": [],
            "arguments": {
                "self": [],
                "labels": [],
                "index": [],
                "columns": [],
                "axis": [],
                "copy": [],
                "fill_value": []
            }
        },
        "DataFrame._reindex_index": {
            "name": "_reindex_index",
            "location": 8795,
            "return": [],
            "arguments": {
                "self": [],
                "index": [],
                "fill_value": []
            }
        },
        "DataFrame._reindex_columns": {
            "name": "_reindex_columns",
            "location": 8880,
            "return": [],
            "arguments": {
                "self": [],
                "columns": [],
                "fill_value": []
            }
        },
        "DataFrame.reindex_like": {
            "name": "reindex_like",
            "location": 8915,
            "return": [],
            "arguments": {
                "self": [],
                "other": [],
                "copy": []
            }
        },
        "DataFrame.melt": {
            "name": "melt",
            "location": 8990,
            "return": [],
            "arguments": {
                "self": [],
                "id_vars": [],
                "value_vars": [],
                "var_name": [],
                "value_name": []
            }
        },
        "DataFrame.stack": {
            "name": "stack",
            "location": 9204,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DataFrame.unstack": {
            "name": "unstack",
            "location": 9387,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DataFrame.all": {
            "name": "all",
            "location": 9547,
            "return": [],
            "arguments": {
                "self": [],
                "axis": []
            }
        },
        "DataFrame.any": {
            "name": "any",
            "location": 9634,
            "return": [],
            "arguments": {
                "self": [],
                "axis": []
            }
        },
        "DataFrame.rank": {
            "name": "rank",
            "location": 9721,
            "return": [],
            "arguments": {
                "self": [],
                "method": [],
                "ascending": []
            }
        },
        "DataFrame.filter": {
            "name": "filter",
            "location": 9794,
            "return": [],
            "arguments": {
                "self": [],
                "items": [],
                "like": [],
                "regex": [],
                "axis": []
            }
        },
        "DataFrame.rename": {
            "name": "rename",
            "location": 9949,
            "return": [],
            "arguments": {
                "self": [],
                "mapper": [],
                "index": [],
                "columns": [],
                "axis": [],
                "inplace": [],
                "level": [],
                "errors": []
            }
        },
        "DataFrame.rename_axis": {
            "name": "rename_axis",
            "location": 10176,
            "return": [],
            "arguments": {
                "self": [],
                "mapper": [],
                "index": [],
                "columns": [],
                "axis": [],
                "inplace": []
            }
        },
        "DataFrame.keys": {
            "name": "keys",
            "location": 10339,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DataFrame.pct_change": {
            "name": "pct_change",
            "location": 10364,
            "return": [],
            "arguments": {
                "self": [],
                "periods": []
            }
        },
        "DataFrame.idxmax": {
            "name": "idxmax",
            "location": 10423,
            "return": [],
            "arguments": {
                "self": [],
                "axis": []
            }
        },
        "DataFrame.idxmin": {
            "name": "idxmin",
            "location": 10501,
            "return": [],
            "arguments": {
                "self": [],
                "axis": []
            }
        },
        "DataFrame.info": {
            "name": "info",
            "location": 10572,
            "return": [],
            "arguments": {
                "self": [],
                "verbose": [],
                "buf": [],
                "max_cols": [],
                "null_counts": []
            }
        },
        "DataFrame.quantile": {
            "name": "quantile",
            "location": 10687,
            "return": [],
            "arguments": {
                "self": [],
                "q": [],
                "axis": [],
                "numeric_only": [],
                "accuracy": []
            }
        },
        "DataFrame.query": {
            "name": "query",
            "location": 10846,
            "return": [],
            "arguments": {
                "self": [],
                "expr": [],
                "inplace": []
            }
        },
        "DataFrame.explain": {
            "name": "explain",
            "location": 10950,
            "return": [],
            "arguments": {
                "self": [],
                "extended": [],
                "mode": []
            }
        },
        "DataFrame.take": {
            "name": "take",
            "location": 10960,
            "return": [],
            "arguments": {
                "self": [],
                "indices": [],
                "axis": []
            }
        },
        "DataFrame.eval": {
            "name": "eval",
            "location": 11041,
            "return": [],
            "arguments": {
                "self": [],
                "expr": [],
                "inplace": []
            }
        },
        "DataFrame.explode": {
            "name": "explode",
            "location": 11160,
            "return": [],
            "arguments": {
                "self": [],
                "column": []
            }
        },
        "DataFrame.mad": {
            "name": "mad",
            "location": 11224,
            "return": [],
            "arguments": {
                "self": [],
                "axis": []
            }
        },
        "DataFrame.tail": {
            "name": "tail",
            "location": 11318,
            "return": [],
            "arguments": {
                "self": [],
                "n": []
            }
        },
        "DataFrame.align": {
            "name": "align",
            "location": 11403,
            "return": [],
            "arguments": {
                "self": [],
                "other": [],
                "join": [],
                "axis": [],
                "copy": []
            }
        },
        "DataFrame.from_dict": {
            "name": "from_dict",
            "location": 11580,
            "return": [],
            "arguments": {
                "data": [],
                "orient": [],
                "dtype": [],
                "columns": []
            }
        },
        "DataFrame._to_internal_pandas": {
            "name": "_to_internal_pandas",
            "location": 11643,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DataFrame._get_or_create_repr_pandas_cache": {
            "name": "_get_or_create_repr_pandas_cache",
            "location": 11651,
            "return": [],
            "arguments": {
                "self": [],
                "n": []
            }
        },
        "DataFrame.__repr__": {
            "name": "__repr__",
            "location": 11658,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DataFrame._repr_html_": {
            "name": "_repr_html_",
            "location": 11678,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DataFrame.__getitem__": {
            "name": "__getitem__",
            "location": 11703,
            "return": [],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "DataFrame.__setitem__": {
            "name": "__setitem__",
            "location": 11722,
            "return": [],
            "arguments": {
                "self": [],
                "key": [],
                "value": []
            }
        },
        "DataFrame._index_normalized_label": {
            "name": "_index_normalized_label",
            "location": 11771,
            "return": [],
            "arguments": {
                "level": [],
                "labels": []
            }
        },
        "DataFrame._index_normalized_frame": {
            "name": "_index_normalized_frame",
            "location": 11793,
            "return": [],
            "arguments": {
                "level": [],
                "kser_or_kdf": []
            }
        },
        "DataFrame.__getattr__": {
            "name": "__getattr__",
            "location": 11816,
            "return": [],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "DataFrame.__setattr__": {
            "name": "__setattr__",
            "location": 11833,
            "return": [],
            "arguments": {
                "self": [],
                "key": [],
                "value": []
            }
        },
        "DataFrame.__len__": {
            "name": "__len__",
            "location": 11849,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DataFrame.__dir__": {
            "name": "__dir__",
            "location": 11852,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DataFrame.__iter__": {
            "name": "__iter__",
            "location": 11858,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DataFrame.__array_ufunc__": {
            "name": "__array_ufunc__",
            "location": 11862,
            "return": [],
            "arguments": {
                "self": [],
                "ufunc": [],
                "method": []
            }
        },
        "CachedDataFrame.__init__": {
            "name": "__init__",
            "location": 11936,
            "return": [],
            "arguments": {
                "self": [],
                "internal": [],
                "storage_level": []
            }
        },
        "CachedDataFrame.__enter__": {
            "name": "__enter__",
            "location": 11947,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CachedDataFrame.__exit__": {
            "name": "__exit__",
            "location": 11950,
            "return": [],
            "arguments": {
                "self": [],
                "exception_type": [],
                "exception_value": [],
                "traceback": []
            }
        },
        "CachedDataFrame.storage_level": {
            "name": "storage_level",
            "location": 11957,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CachedDataFrame.unpersist": {
            "name": "unpersist",
            "location": 11967,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DataFrame.iterrows.extract_kv_from_spark_row": {
            "name": "extract_kv_from_spark_row",
            "location": 1458,
            "return": [],
            "arguments": {
                "row": []
            }
        },
        "DataFrame.itertuples.extract_kv_from_spark_row": {
            "name": "extract_kv_from_spark_row",
            "location": 1545,
            "return": [],
            "arguments": {
                "row": []
            }
        },
        "DataFrame.apply.apply_func": {
            "name": "apply_func",
            "location": 2528,
            "return": [],
            "arguments": {
                "pdf": []
            }
        },
        "DataFrame.between_time.pandas_between_time": {
            "name": "pandas_between_time",
            "location": 3094,
            "return": [],
            "arguments": {
                "pdf": []
            }
        },
        "DataFrame.reset_index.rename": {
            "name": "rename",
            "location": 3772,
            "return": [],
            "arguments": {
                "index": []
            }
        },
        "DataFrame.round.op": {
            "name": "op",
            "location": 4317,
            "return": [],
            "arguments": {
                "kser": []
            }
        },
        "DataFrame.merge.to_list": {
            "name": "to_list",
            "location": 7584,
            "return": [],
            "arguments": {
                "os": []
            }
        },
        "DataFrame.merge.resolve": {
            "name": "resolve",
            "location": 7640,
            "return": [],
            "arguments": {
                "internal": [],
                "side": []
            }
        },
        "DataFrame.rename.gen_mapper_fn": {
            "name": "gen_mapper_fn",
            "location": 10044,
            "return": [],
            "arguments": {
                "mapper": []
            }
        },
        "DataFrame.rename_axis.gen_names": {
            "name": "gen_names",
            "location": 10289,
            "return": [],
            "arguments": {
                "v": [],
                "curnames": []
            }
        },
        "DataFrame.pct_change.op": {
            "name": "op",
            "location": 10414,
            "return": [],
            "arguments": {
                "kser": []
            }
        },
        "DataFrame.quantile.quantile": {
            "name": "quantile",
            "location": 10764,
            "return": [],
            "arguments": {
                "spark_column": [],
                "spark_type": []
            }
        },
        "DataFrame.eval.eval_func": {
            "name": "eval_func",
            "location": 11130,
            "return": [],
            "arguments": {
                "pdf": []
            }
        },
        "DataFrame.__class_getitem__": {
            "name": "__class_getitem__",
            "location": 11903,
            "return": [],
            "arguments": {
                "cls": [],
                "params": []
            }
        },
        "DataFrame._reduce_for_stat_function.calculate_columns_axis": {
            "name": "calculate_columns_axis",
            "location": 707,
            "return": [],
            "arguments": {}
        },
        "DataFrame.at_time.pandas_at_time": {
            "name": "pandas_at_time",
            "location": 3175,
            "return": [],
            "arguments": {
                "pdf": []
            }
        },
        "DataFrame.replace.op": {
            "name": "op",
            "location": 5634,
            "return": [],
            "arguments": {
                "kser": []
            }
        },
        "DataFrame.rename.gen_new_index_column": {
            "name": "gen_new_index_column",
            "location": 10124,
            "return": [],
            "arguments": {
                "level": []
            }
        },
        "DataFrame.rename.gen_new_column_labels_entry": {
            "name": "gen_new_column_labels_entry",
            "location": 10150,
            "return": [],
            "arguments": {
                "column_labels_entry": []
            }
        },
        "DataFrame.mad.get_spark_column": {
            "name": "get_spark_column",
            "location": 11256,
            "return": [],
            "arguments": {
                "kdf": [],
                "label": []
            }
        },
        "DataFrame.mad.calculate_columns_axis": {
            "name": "calculate_columns_axis",
            "location": 11303,
            "return": [],
            "arguments": {}
        },
        "DataFrame.__setitem__.assign_columns": {
            "name": "assign_columns",
            "location": 11731,
            "return": [],
            "arguments": {
                "kdf": [],
                "this_column_labels": [],
                "that_column_labels": []
            }
        },
        "DataFrame.__array_ufunc__.apply_op": {
            "name": "apply_op",
            "location": 11875,
            "return": [],
            "arguments": {
                "kdf": [],
                "this_column_labels": [],
                "that_column_labels": []
            }
        },
        "DataFrame._map_series_op.apply_op": {
            "name": "apply_op",
            "location": 786,
            "return": [],
            "arguments": {
                "kdf": [],
                "this_column_labels": [],
                "that_column_labels": []
            }
        },
        "DataFrame.fillna.op": {
            "name": "op",
            "location": 5502,
            "return": [],
            "arguments": {
                "kser": []
            }
        },
        "DataFrame.rename.gen_mapper_fn.mapper_fn": {
            "name": "mapper_fn",
            "location": 10068,
            "return": [],
            "arguments": {
                "x": []
            }
        }
    },
    "koalas-master/databricks/koalas/generic.py": {
        "Frame.__getitem__": {
            "name": "__getitem__",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "Frame._internal": {
            "name": "_internal",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Frame._apply_series_op": {
            "name": "_apply_series_op",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "op": [],
                "should_resolve": [
                    "bool"
                ]
            }
        },
        "Frame._reduce_for_stat_function": {
            "name": "_reduce_for_stat_function",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sfun": [],
                "name": [],
                "axis": [
                    "None"
                ],
                "numeric_only": [
                    "bool"
                ]
            }
        },
        "Frame.dtypes": {
            "name": "dtypes",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Frame.to_pandas": {
            "name": "to_pandas",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Frame.index": {
            "name": "index",
            "location": 99,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Frame.copy": {
            "name": "copy",
            "location": 103,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Frame._to_internal_pandas": {
            "name": "_to_internal_pandas",
            "location": 107,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Frame.head": {
            "name": "head",
            "location": 111,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "n": [
                    "int"
                ]
            }
        },
        "Frame.cummin": {
            "name": "cummin",
            "location": 115,
            "return": [],
            "arguments": {
                "self": [],
                "skipna": [
                    "bool"
                ]
            }
        },
        "Frame.cummax": {
            "name": "cummax",
            "location": 175,
            "return": [],
            "arguments": {
                "self": [],
                "skipna": [
                    "bool"
                ]
            }
        },
        "Frame.cumsum": {
            "name": "cumsum",
            "location": 236,
            "return": [],
            "arguments": {
                "self": [],
                "skipna": [
                    "bool"
                ]
            }
        },
        "Frame.cumprod": {
            "name": "cumprod",
            "location": 299,
            "return": [],
            "arguments": {
                "self": [],
                "skipna": [
                    "bool"
                ]
            }
        },
        "Frame.get_dtype_counts": {
            "name": "get_dtype_counts",
            "location": 367,
            "return": [
                "Series"
            ],
            "arguments": {
                "self": []
            }
        },
        "Frame.pipe": {
            "name": "pipe",
            "location": 413,
            "return": [],
            "arguments": {
                "self": [],
                "func": []
            }
        },
        "Frame.to_numpy": {
            "name": "to_numpy",
            "location": 506,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Frame.values": {
            "name": "values",
            "location": 544,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Frame.to_csv": {
            "name": "to_csv",
            "location": 606,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "None"
                ],
                "sep": [
                    "typing.Text"
                ],
                "na_rep": [
                    "typing.Text"
                ],
                "columns": [
                    "None"
                ],
                "header": [
                    "bool"
                ],
                "quotechar": [
                    "typing.Text"
                ],
                "date_format": [
                    "None"
                ],
                "escapechar": [
                    "None"
                ],
                "num_files": [
                    "None"
                ],
                "mode": [
                    "typing.Text"
                ],
                "partition_cols": [
                    "None"
                ],
                "index_col": [
                    "None"
                ]
            }
        },
        "Frame.to_json": {
            "name": "to_json",
            "location": 841,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "None"
                ],
                "compression": [
                    "typing.Text"
                ],
                "num_files": [
                    "None"
                ],
                "mode": [
                    "typing.Text"
                ],
                "orient": [
                    "typing.Text"
                ],
                "lines": [
                    "bool"
                ],
                "partition_cols": [
                    "None"
                ],
                "index_col": [
                    "None"
                ]
            }
        },
        "Frame.to_excel": {
            "name": "to_excel",
            "location": 972,
            "return": [],
            "arguments": {
                "self": [],
                "excel_writer": [],
                "sheet_name": [
                    "typing.Text"
                ],
                "na_rep": [
                    "typing.Text"
                ],
                "float_format": [
                    "None"
                ],
                "columns": [
                    "None"
                ],
                "header": [
                    "bool"
                ],
                "index": [
                    "bool"
                ],
                "index_label": [
                    "None"
                ],
                "startrow": [
                    "int"
                ],
                "startcol": [
                    "int"
                ],
                "engine": [
                    "None"
                ],
                "merge_cells": [
                    "bool"
                ],
                "encoding": [
                    "None"
                ],
                "inf_rep": [
                    "typing.Text"
                ],
                "verbose": [
                    "bool"
                ],
                "freeze_panes": [
                    "None"
                ]
            }
        },
        "Frame.mean": {
            "name": "mean",
            "location": 1104,
            "return": [],
            "arguments": {
                "self": [],
                "axis": [
                    "None"
                ],
                "numeric_only": [
                    "None"
                ]
            }
        },
        "Frame.sum": {
            "name": "sum",
            "location": 1167,
            "return": [],
            "arguments": {
                "self": [],
                "axis": [
                    "None"
                ],
                "numeric_only": [
                    "None"
                ],
                "min_count": [
                    "int"
                ]
            }
        },
        "Frame.product": {
            "name": "product",
            "location": 1252,
            "return": [],
            "arguments": {
                "self": [],
                "axis": [
                    "None"
                ],
                "numeric_only": [
                    "None"
                ],
                "min_count": [
                    "int"
                ]
            }
        },
        "Frame.skew": {
            "name": "skew",
            "location": 1351,
            "return": [],
            "arguments": {
                "self": [],
                "axis": [
                    "None"
                ],
                "numeric_only": [
                    "None"
                ]
            }
        },
        "Frame.kurtosis": {
            "name": "kurtosis",
            "location": 1407,
            "return": [],
            "arguments": {
                "self": [],
                "axis": [
                    "None"
                ],
                "numeric_only": [
                    "None"
                ]
            }
        },
        "Frame.min": {
            "name": "min",
            "location": 1466,
            "return": [],
            "arguments": {
                "self": [],
                "axis": [
                    "None"
                ],
                "numeric_only": [
                    "None"
                ]
            }
        },
        "Frame.max": {
            "name": "max",
            "location": 1521,
            "return": [],
            "arguments": {
                "self": [],
                "axis": [
                    "None"
                ],
                "numeric_only": [
                    "None"
                ]
            }
        },
        "Frame.count": {
            "name": "count",
            "location": 1576,
            "return": [],
            "arguments": {
                "self": [],
                "axis": [
                    "None"
                ],
                "numeric_only": [
                    "bool"
                ]
            }
        },
        "Frame.std": {
            "name": "std",
            "location": 1650,
            "return": [],
            "arguments": {
                "self": [],
                "axis": [
                    "None"
                ],
                "ddof": [
                    "int"
                ],
                "numeric_only": [
                    "None"
                ]
            }
        },
        "Frame.var": {
            "name": "var",
            "location": 1729,
            "return": [],
            "arguments": {
                "self": [],
                "axis": [
                    "None"
                ],
                "ddof": [
                    "int"
                ],
                "numeric_only": [
                    "None"
                ]
            }
        },
        "Frame.median": {
            "name": "median",
            "location": 1808,
            "return": [],
            "arguments": {
                "self": [],
                "axis": [
                    "None"
                ],
                "numeric_only": [
                    "None"
                ],
                "accuracy": [
                    "int"
                ]
            }
        },
        "Frame.sem": {
            "name": "sem",
            "location": 1917,
            "return": [],
            "arguments": {
                "self": [],
                "axis": [
                    "None"
                ],
                "ddof": [
                    "int"
                ],
                "numeric_only": [
                    "None"
                ]
            }
        },
        "Frame.size": {
            "name": "size",
            "location": 2009,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Frame.abs": {
            "name": "abs",
            "location": 2036,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Frame.groupby": {
            "name": "groupby",
            "location": 2090,
            "return": [],
            "arguments": {
                "self": [],
                "by": [],
                "axis": [
                    "int"
                ],
                "as_index": [
                    "bool"
                ],
                "dropna": [
                    "bool"
                ]
            }
        },
        "Frame.bool": {
            "name": "bool",
            "location": 2225,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Frame.first_valid_index": {
            "name": "first_valid_index",
            "location": 2271,
            "return": [
                "None",
                "tuple"
            ],
            "arguments": {
                "self": []
            }
        },
        "Frame.last_valid_index": {
            "name": "last_valid_index",
            "location": 2374,
            "return": [
                "None",
                "tuple"
            ],
            "arguments": {
                "self": []
            }
        },
        "Frame.rolling": {
            "name": "rolling",
            "location": 2483,
            "return": [
                "Rolling"
            ],
            "arguments": {
                "self": [],
                "window": [],
                "min_periods": [
                    "None"
                ]
            }
        },
        "Frame.expanding": {
            "name": "expanding",
            "location": 2512,
            "return": [
                "Expanding"
            ],
            "arguments": {
                "self": [],
                "min_periods": [
                    "int"
                ]
            }
        },
        "Frame.get": {
            "name": "get",
            "location": 2532,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [],
                "default": [
                    "None"
                ]
            }
        },
        "Frame.squeeze": {
            "name": "squeeze",
            "location": 2583,
            "return": [
                "Frame",
                "Series"
            ],
            "arguments": {
                "self": [],
                "axis": [
                    "None"
                ]
            }
        },
        "Frame.truncate": {
            "name": "truncate",
            "location": 2715,
            "return": [],
            "arguments": {
                "self": [],
                "before": [],
                "after": [],
                "axis": [
                    "None"
                ],
                "copy": [
                    "bool"
                ]
            }
        },
        "Frame.to_markdown": {
            "name": "to_markdown",
            "location": 2856,
            "return": [],
            "arguments": {
                "self": [],
                "buf": [
                    "None"
                ],
                "mode": [
                    "None"
                ]
            }
        },
        "Frame.fillna": {
            "name": "fillna",
            "location": 2917,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "None"
                ],
                "method": [
                    "None"
                ],
                "axis": [
                    "None"
                ],
                "inplace": [
                    "bool"
                ],
                "limit": [
                    "None"
                ]
            }
        },
        "Frame.bfill": {
            "name": "bfill",
            "location": 2921,
            "return": [],
            "arguments": {
                "self": [],
                "axis": [
                    "None"
                ],
                "inplace": [
                    "bool"
                ],
                "limit": [
                    "None"
                ]
            }
        },
        "Frame.ffill": {
            "name": "ffill",
            "location": 2995,
            "return": [],
            "arguments": {
                "self": [],
                "axis": [
                    "None"
                ],
                "inplace": [
                    "bool"
                ],
                "limit": [
                    "None"
                ]
            }
        },
        "Frame.at": {
            "name": "at",
            "location": 3069,
            "return": [
                "AtIndexer"
            ],
            "arguments": {
                "self": []
            }
        },
        "Frame.iat": {
            "name": "iat",
            "location": 3075,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Frame.iloc": {
            "name": "iloc",
            "location": 3081,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Frame.loc": {
            "name": "loc",
            "location": 3087,
            "return": [
                "LocIndexer"
            ],
            "arguments": {
                "self": []
            }
        },
        "Frame.__bool__": {
            "name": "__bool__",
            "location": 3092,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Frame._count_expr": {
            "name": "_count_expr",
            "location": 3099,
            "return": [],
            "arguments": {
                "spark_column": [],
                "spark_type": []
            }
        },
        "Frame.mean.mean": {
            "name": "mean",
            "location": 1152,
            "return": [],
            "arguments": {
                "spark_column": [],
                "spark_type": []
            }
        },
        "Frame.sum.sum": {
            "name": "sum",
            "location": 1237,
            "return": [],
            "arguments": {
                "spark_column": [],
                "spark_type": []
            }
        },
        "Frame.product.prod": {
            "name": "prod",
            "location": 1321,
            "return": [],
            "arguments": {
                "spark_column": [],
                "spark_type": []
            }
        },
        "Frame.skew.skew": {
            "name": "skew",
            "location": 1392,
            "return": [],
            "arguments": {
                "spark_column": [],
                "spark_type": []
            }
        },
        "Frame.kurtosis.kurtosis": {
            "name": "kurtosis",
            "location": 1449,
            "return": [],
            "arguments": {
                "spark_column": [],
                "spark_type": []
            }
        },
        "Frame.std.std": {
            "name": "std",
            "location": 1711,
            "return": [],
            "arguments": {
                "spark_column": [],
                "spark_type": []
            }
        },
        "Frame.var.var": {
            "name": "var",
            "location": 1790,
            "return": [],
            "arguments": {
                "spark_column": [],
                "spark_type": []
            }
        },
        "Frame.median.median": {
            "name": "median",
            "location": 1903,
            "return": [],
            "arguments": {
                "spark_column": [],
                "spark_type": []
            }
        },
        "Frame.sem.std": {
            "name": "std",
            "location": 1985,
            "return": [],
            "arguments": {
                "spark_column": [],
                "spark_type": []
            }
        },
        "Frame.sem.sem": {
            "name": "sem",
            "location": 1999,
            "return": [],
            "arguments": {
                "spark_column": [],
                "spark_type": []
            }
        },
        "Frame.abs.abs": {
            "name": "abs",
            "location": 2073,
            "return": [],
            "arguments": {
                "kser": []
            }
        }
    },
    "koalas-master/databricks/koalas/groupby.py": {
        "is_multi_agg_with_relabel": {
            "name": "is_multi_agg_with_relabel",
            "location": 3122,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "normalize_keyword_aggregation": {
            "name": "normalize_keyword_aggregation",
            "location": 3149,
            "return": [
                "tuple[typing.Union[OrderedDict,list[tuple]]]"
            ],
            "arguments": {
                "kwargs": []
            }
        },
        "GroupBy.__init__": {
            "name": "__init__",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "kdf": [],
                "groupkeys": [],
                "as_index": [],
                "dropna": [],
                "column_labels_to_exlcude": [],
                "agg_columns_selected": [],
                "agg_columns": []
            }
        },
        "GroupBy._groupkeys_scols": {
            "name": "_groupkeys_scols",
            "location": 106,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "GroupBy._agg_columns_scols": {
            "name": "_agg_columns_scols",
            "location": 110,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "GroupBy._apply_series_op": {
            "name": "_apply_series_op",
            "location": 114,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "op": [],
                "should_resolve": [
                    "bool"
                ],
                "numeric_only": [
                    "bool"
                ]
            }
        },
        "GroupBy.aggregate": {
            "name": "aggregate",
            "location": 119,
            "return": [
                "DataFrame"
            ],
            "arguments": {
                "self": [],
                "func_or_funcs": []
            }
        },
        "GroupBy._spark_groupby": {
            "name": "_spark_groupby",
            "location": 275,
            "return": [],
            "arguments": {
                "kdf": [],
                "func": [],
                "groupkeys": [
                    "tuple"
                ]
            }
        },
        "GroupBy.count": {
            "name": "count",
            "location": 335,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GroupBy.first": {
            "name": "first",
            "location": 358,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GroupBy.last": {
            "name": "last",
            "location": 369,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GroupBy.max": {
            "name": "max",
            "location": 382,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GroupBy.mean": {
            "name": "mean",
            "location": 394,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GroupBy.min": {
            "name": "min",
            "location": 425,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GroupBy.std": {
            "name": "std",
            "location": 437,
            "return": [],
            "arguments": {
                "self": [],
                "ddof": [
                    "int"
                ]
            }
        },
        "GroupBy.sum": {
            "name": "sum",
            "location": 458,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GroupBy.var": {
            "name": "var",
            "location": 470,
            "return": [],
            "arguments": {
                "self": [],
                "ddof": [
                    "int"
                ]
            }
        },
        "GroupBy.all": {
            "name": "all",
            "location": 492,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GroupBy.any": {
            "name": "any",
            "location": 534,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GroupBy.size": {
            "name": "size",
            "location": 576,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GroupBy.diff": {
            "name": "diff",
            "location": 647,
            "return": [],
            "arguments": {
                "self": [],
                "periods": [
                    "int"
                ]
            }
        },
        "GroupBy.cumcount": {
            "name": "cumcount",
            "location": 706,
            "return": [],
            "arguments": {
                "self": [],
                "ascending": [
                    "bool"
                ]
            }
        },
        "GroupBy.cummax": {
            "name": "cummax",
            "location": 766,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GroupBy.cummin": {
            "name": "cummin",
            "location": 815,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GroupBy.cumprod": {
            "name": "cumprod",
            "location": 864,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GroupBy.cumsum": {
            "name": "cumsum",
            "location": 913,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GroupBy.apply": {
            "name": "apply",
            "location": 962,
            "return": [],
            "arguments": {
                "self": [],
                "func": []
            }
        },
        "GroupBy.filter": {
            "name": "filter",
            "location": 1260,
            "return": [
                "DataFrame"
            ],
            "arguments": {
                "self": [],
                "func": []
            }
        },
        "GroupBy._prepare_group_map_apply": {
            "name": "_prepare_group_map_apply",
            "location": 1360,
            "return": [
                "tuple[typing.Union[DataFrame,list]]"
            ],
            "arguments": {
                "kdf": [],
                "groupkeys": [],
                "agg_columns": []
            }
        },
        "GroupBy._spark_group_map_apply": {
            "name": "_spark_group_map_apply",
            "location": 1369,
            "return": [],
            "arguments": {
                "kdf": [],
                "func": [],
                "groupkeys_scols": [],
                "return_schema": [],
                "retain_index": []
            }
        },
        "GroupBy._make_pandas_df_builder_func": {
            "name": "_make_pandas_df_builder_func",
            "location": 1376,
            "return": [],
            "arguments": {
                "kdf": [],
                "func": [],
                "return_schema": [],
                "retain_index": []
            }
        },
        "GroupBy.rank": {
            "name": "rank",
            "location": 1403,
            "return": [],
            "arguments": {
                "self": [],
                "method": [
                    "typing.Text"
                ],
                "ascending": [
                    "bool"
                ]
            }
        },
        "GroupBy.idxmax": {
            "name": "idxmax",
            "location": 1471,
            "return": [
                "DataFrame"
            ],
            "arguments": {
                "self": [],
                "skipna": [
                    "bool"
                ]
            }
        },
        "GroupBy.idxmin": {
            "name": "idxmin",
            "location": 1550,
            "return": [
                "DataFrame"
            ],
            "arguments": {
                "self": [],
                "skipna": [
                    "bool"
                ]
            }
        },
        "GroupBy.fillna": {
            "name": "fillna",
            "location": 1627,
            "return": [],
            "arguments": {
                "self": [],
                "value": [
                    "None"
                ],
                "method": [
                    "None"
                ],
                "axis": [
                    "None"
                ],
                "inplace": [
                    "bool"
                ],
                "limit": [
                    "None"
                ]
            }
        },
        "GroupBy.bfill": {
            "name": "bfill",
            "location": 1697,
            "return": [],
            "arguments": {
                "self": [],
                "limit": [
                    "None"
                ]
            }
        },
        "GroupBy.ffill": {
            "name": "ffill",
            "location": 1748,
            "return": [],
            "arguments": {
                "self": [],
                "limit": [
                    "None"
                ]
            }
        },
        "GroupBy._limit": {
            "name": "_limit",
            "location": 1799,
            "return": [],
            "arguments": {
                "self": [],
                "n": [],
                "asc": []
            }
        },
        "GroupBy.head": {
            "name": "head",
            "location": 1839,
            "return": [],
            "arguments": {
                "self": [],
                "n": [
                    "int"
                ]
            }
        },
        "GroupBy.tail": {
            "name": "tail",
            "location": 1887,
            "return": [],
            "arguments": {
                "self": [],
                "n": [
                    "int"
                ]
            }
        },
        "GroupBy.shift": {
            "name": "shift",
            "location": 1940,
            "return": [],
            "arguments": {
                "self": [],
                "periods": [
                    "int"
                ],
                "fill_value": [
                    "None"
                ]
            }
        },
        "GroupBy.transform": {
            "name": "transform",
            "location": 2002,
            "return": [
                "DataFrame"
            ],
            "arguments": {
                "self": [],
                "func": []
            }
        },
        "GroupBy.nunique": {
            "name": "nunique",
            "location": 2188,
            "return": [],
            "arguments": {
                "self": [],
                "dropna": [
                    "bool"
                ]
            }
        },
        "GroupBy.rolling": {
            "name": "rolling",
            "location": 2241,
            "return": [
                "RollingGroupby"
            ],
            "arguments": {
                "self": [],
                "window": [],
                "min_periods": [
                    "None"
                ]
            }
        },
        "GroupBy.expanding": {
            "name": "expanding",
            "location": 2268,
            "return": [
                "ExpandingGroupby"
            ],
            "arguments": {
                "self": [],
                "min_periods": [
                    "int"
                ]
            }
        },
        "GroupBy.get_group": {
            "name": "get_group",
            "location": 2290,
            "return": [
                "DataFrame"
            ],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "GroupBy.median": {
            "name": "median",
            "location": 2369,
            "return": [],
            "arguments": {
                "self": [],
                "numeric_only": [
                    "bool"
                ],
                "accuracy": [
                    "int"
                ]
            }
        },
        "GroupBy._reduce_for_stat_function": {
            "name": "_reduce_for_stat_function",
            "location": 2436,
            "return": [
                "DataFrame"
            ],
            "arguments": {
                "self": [],
                "sfun": [],
                "only_numeric": []
            }
        },
        "GroupBy._resolve_grouping_from_diff_dataframes": {
            "name": "_resolve_grouping_from_diff_dataframes",
            "location": 2499,
            "return": [],
            "arguments": {
                "kdf": [],
                "by": []
            }
        },
        "GroupBy._resolve_grouping": {
            "name": "_resolve_grouping",
            "location": 2572,
            "return": [
                "list[Series]"
            ],
            "arguments": {
                "kdf": [],
                "by": []
            }
        },
        "DataFrameGroupBy._build": {
            "name": "_build",
            "location": 2589,
            "return": [
                "DataFrameGroupBy"
            ],
            "arguments": {
                "kdf": [],
                "by": [],
                "as_index": [],
                "dropna": []
            }
        },
        "DataFrameGroupBy.__init__": {
            "name": "__init__",
            "location": 2609,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "kdf": [],
                "by": [],
                "as_index": [],
                "dropna": [],
                "column_labels_to_exlcude": [],
                "agg_columns": []
            }
        },
        "DataFrameGroupBy.__getattr__": {
            "name": "__getattr__",
            "location": 2642,
            "return": [],
            "arguments": {
                "self": [],
                "item": []
            }
        },
        "DataFrameGroupBy.__getitem__": {
            "name": "__getitem__",
            "location": 2651,
            "return": [
                "SeriesGroupBy",
                "DataFrameGroupBy"
            ],
            "arguments": {
                "self": [],
                "item": []
            }
        },
        "DataFrameGroupBy._apply_series_op": {
            "name": "_apply_series_op",
            "location": 2681,
            "return": [
                "DataFrame"
            ],
            "arguments": {
                "self": [],
                "op": [],
                "should_resolve": [
                    "bool"
                ],
                "numeric_only": [
                    "bool"
                ]
            }
        },
        "DataFrameGroupBy.describe": {
            "name": "describe",
            "location": 2697,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SeriesGroupBy._build": {
            "name": "_build",
            "location": 2786,
            "return": [
                "SeriesGroupBy"
            ],
            "arguments": {
                "kser": [],
                "by": [],
                "as_index": [],
                "dropna": []
            }
        },
        "SeriesGroupBy.__init__": {
            "name": "__init__",
            "location": 2800,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "kser": [],
                "by": [],
                "as_index": [
                    "bool"
                ],
                "dropna": [
                    "bool"
                ]
            }
        },
        "SeriesGroupBy.__getattr__": {
            "name": "__getattr__",
            "location": 2814,
            "return": [],
            "arguments": {
                "self": [],
                "item": []
            }
        },
        "SeriesGroupBy._apply_series_op": {
            "name": "_apply_series_op",
            "location": 2823,
            "return": [],
            "arguments": {
                "self": [],
                "op": [],
                "should_resolve": [
                    "bool"
                ],
                "numeric_only": [
                    "bool"
                ]
            }
        },
        "SeriesGroupBy._reduce_for_stat_function": {
            "name": "_reduce_for_stat_function",
            "location": 2833,
            "return": [],
            "arguments": {
                "self": [],
                "sfun": [],
                "only_numeric": []
            }
        },
        "SeriesGroupBy.agg": {
            "name": "agg",
            "location": 2836,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SeriesGroupBy.aggregate": {
            "name": "aggregate",
            "location": 2839,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SeriesGroupBy.transform": {
            "name": "transform",
            "location": 2842,
            "return": [],
            "arguments": {
                "self": [],
                "func": []
            }
        },
        "SeriesGroupBy.idxmin": {
            "name": "idxmin",
            "location": 2847,
            "return": [],
            "arguments": {
                "self": [],
                "skipna": [
                    "bool"
                ]
            }
        },
        "SeriesGroupBy.idxmax": {
            "name": "idxmax",
            "location": 2852,
            "return": [],
            "arguments": {
                "self": [],
                "skipna": [
                    "bool"
                ]
            }
        },
        "SeriesGroupBy.head": {
            "name": "head",
            "location": 2857,
            "return": [],
            "arguments": {
                "self": [],
                "n": [
                    "int"
                ]
            }
        },
        "SeriesGroupBy.tail": {
            "name": "tail",
            "location": 2862,
            "return": [],
            "arguments": {
                "self": [],
                "n": [
                    "int"
                ]
            }
        },
        "SeriesGroupBy.size": {
            "name": "size",
            "location": 2867,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SeriesGroupBy.get_group": {
            "name": "get_group",
            "location": 2872,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "SeriesGroupBy.nsmallest": {
            "name": "nsmallest",
            "location": 2878,
            "return": [],
            "arguments": {
                "self": [],
                "n": [
                    "int"
                ]
            }
        },
        "SeriesGroupBy.nlargest": {
            "name": "nlargest",
            "location": 2955,
            "return": [],
            "arguments": {
                "self": [],
                "n": [
                    "int"
                ]
            }
        },
        "SeriesGroupBy.value_counts": {
            "name": "value_counts",
            "location": 3032,
            "return": [],
            "arguments": {
                "self": [],
                "sort": [
                    "None"
                ],
                "ascending": [
                    "None"
                ],
                "dropna": [
                    "bool"
                ]
            }
        },
        "SeriesGroupBy.unique": {
            "name": "unique",
            "location": 3096,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GroupBy.apply.pandas_groupby_apply": {
            "name": "pandas_groupby_apply",
            "location": 1202,
            "return": [
                "DataFrame"
            ],
            "arguments": {
                "pdf": []
            }
        },
        "GroupBy._make_pandas_df_builder_func.rename_output": {
            "name": "rename_output",
            "location": 1384,
            "return": [],
            "arguments": {
                "pdf": []
            }
        },
        "GroupBy.transform.pandas_transform": {
            "name": "pandas_transform",
            "location": 2128,
            "return": [],
            "arguments": {
                "pdf": []
            }
        },
        "GroupBy._resolve_grouping_from_diff_dataframes.assign_columns": {
            "name": "assign_columns",
            "location": 2540,
            "return": [
                "None"
            ],
            "arguments": {
                "kdf": [],
                "this_column_labels": [],
                "that_column_labels": []
            }
        },
        "GroupBy.apply.pandas_apply": {
            "name": "pandas_apply",
            "location": 1145,
            "return": [],
            "arguments": {
                "pdf": []
            }
        },
        "GroupBy.filter.pandas_filter": {
            "name": "pandas_filter",
            "location": 1342,
            "return": [
                "DataFrame"
            ],
            "arguments": {
                "pdf": []
            }
        },
        "GroupBy.filter.wrapped_func": {
            "name": "wrapped_func",
            "location": 1339,
            "return": [
                "Series",
                "DataFrame"
            ],
            "arguments": {
                "pdf": []
            }
        },
        "GroupBy.apply.pandas_groupby_apply.wrapped_func": {
            "name": "wrapped_func",
            "location": 1210,
            "return": [
                "Series",
                "DataFrame"
            ],
            "arguments": {
                "df": []
            }
        }
    },
    "koalas-master/databricks/koalas/indexing.py": {
        "IndexerLike.__init__": {
            "name": "__init__",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "kdf_or_kser": []
            }
        },
        "IndexerLike._is_df": {
            "name": "_is_df",
            "location": 72,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "IndexerLike._is_series": {
            "name": "_is_series",
            "location": 78,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "IndexerLike._kdf": {
            "name": "_kdf",
            "location": 84,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "IndexerLike._internal": {
            "name": "_internal",
            "location": 92,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AtIndexer.__getitem__": {
            "name": "__getitem__",
            "location": 134,
            "return": [],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "iAtIndexer.__getitem__": {
            "name": "__getitem__",
            "location": 221,
            "return": [],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "LocIndexerLike._select_rows": {
            "name": "_select_rows",
            "location": 241,
            "return": [
                "tuple[None]"
            ],
            "arguments": {
                "self": [],
                "rows_sel": []
            }
        },
        "LocIndexerLike._select_cols": {
            "name": "_select_cols",
            "location": 279,
            "return": [
                "tuple[typing.Optional[bool]]"
            ],
            "arguments": {
                "self": [],
                "cols_sel": [],
                "missing_keys": [
                    "None"
                ]
            }
        },
        "LocIndexerLike._select_rows_by_series": {
            "name": "_select_rows_by_series",
            "location": 330,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "rows_sel": []
            }
        },
        "LocIndexerLike._select_rows_by_spark_column": {
            "name": "_select_rows_by_spark_column",
            "location": 337,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "rows_sel": []
            }
        },
        "LocIndexerLike._select_rows_by_slice": {
            "name": "_select_rows_by_slice",
            "location": 344,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "rows_sel": []
            }
        },
        "LocIndexerLike._select_rows_by_iterable": {
            "name": "_select_rows_by_iterable",
            "location": 351,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "rows_sel": []
            }
        },
        "LocIndexerLike._select_rows_else": {
            "name": "_select_rows_else",
            "location": 358,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "rows_sel": []
            }
        },
        "LocIndexerLike._select_cols_by_series": {
            "name": "_select_cols_by_series",
            "location": 367,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cols_sel": [],
                "missing_keys": []
            }
        },
        "LocIndexerLike._select_cols_by_spark_column": {
            "name": "_select_cols_by_spark_column",
            "location": 376,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cols_sel": [],
                "missing_keys": []
            }
        },
        "LocIndexerLike._select_cols_by_slice": {
            "name": "_select_cols_by_slice",
            "location": 385,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cols_sel": [],
                "missing_keys": []
            }
        },
        "LocIndexerLike._select_cols_by_iterable": {
            "name": "_select_cols_by_iterable",
            "location": 394,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cols_sel": [],
                "missing_keys": []
            }
        },
        "LocIndexerLike._select_cols_else": {
            "name": "_select_cols_else",
            "location": 403,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cols_sel": [],
                "missing_keys": []
            }
        },
        "LocIndexerLike.__getitem__": {
            "name": "__getitem__",
            "location": 411,
            "return": [],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "LocIndexerLike.__setitem__": {
            "name": "__setitem__",
            "location": 549,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [],
                "value": []
            }
        },
        "LocIndexer._NotImplemented": {
            "name": "_NotImplemented",
            "location": 950,
            "return": [
                "SparkPandasNotImplementedError"
            ],
            "arguments": {
                "description": []
            }
        },
        "LocIndexer._select_rows_by_series": {
            "name": "_select_rows_by_series",
            "location": 957,
            "return": [
                "tuple[None]"
            ],
            "arguments": {
                "self": [],
                "rows_sel": []
            }
        },
        "LocIndexer._select_rows_by_spark_column": {
            "name": "_select_rows_by_spark_column",
            "location": 963,
            "return": [
                "tuple[None]"
            ],
            "arguments": {
                "self": [],
                "rows_sel": []
            }
        },
        "LocIndexer._select_rows_by_slice": {
            "name": "_select_rows_by_slice",
            "location": 970,
            "return": [
                "tuple[None]"
            ],
            "arguments": {
                "self": [],
                "rows_sel": []
            }
        },
        "LocIndexer._select_rows_by_iterable": {
            "name": "_select_rows_by_iterable",
            "location": 1090,
            "return": [
                "tuple[None]",
                "tuple[typing.Optional[bool]]"
            ],
            "arguments": {
                "self": [],
                "rows_sel": []
            }
        },
        "LocIndexer._select_rows_else": {
            "name": "_select_rows_else",
            "location": 1116,
            "return": [
                "tuple[typing.Optional[int]]"
            ],
            "arguments": {
                "self": [],
                "rows_sel": []
            }
        },
        "LocIndexer._get_from_multiindex_column": {
            "name": "_get_from_multiindex_column",
            "location": 1131,
            "return": [
                "tuple[typing.Union[list,bool,None]]"
            ],
            "arguments": {
                "self": [],
                "key": [],
                "missing_keys": [],
                "labels": [
                    "None"
                ],
                "recursed": [
                    "int"
                ]
            }
        },
        "LocIndexer._select_cols_by_series": {
            "name": "_select_cols_by_series",
            "location": 1180,
            "return": [
                "tuple[typing.Union[list,bool,None]]"
            ],
            "arguments": {
                "self": [],
                "cols_sel": [],
                "missing_keys": []
            }
        },
        "LocIndexer._select_cols_by_spark_column": {
            "name": "_select_cols_by_spark_column",
            "location": 1190,
            "return": [
                "tuple[typing.Union[list[tuple],None,bool]]"
            ],
            "arguments": {
                "self": [],
                "cols_sel": [],
                "missing_keys": []
            }
        },
        "LocIndexer._select_cols_by_slice": {
            "name": "_select_cols_by_slice",
            "location": 1201,
            "return": [
                "tuple[typing.Optional[bool]]"
            ],
            "arguments": {
                "self": [],
                "cols_sel": [],
                "missing_keys": []
            }
        },
        "LocIndexer._select_cols_by_iterable": {
            "name": "_select_cols_by_iterable",
            "location": 1212,
            "return": [],
            "arguments": {
                "self": [],
                "cols_sel": [],
                "missing_keys": []
            }
        },
        "LocIndexer._select_cols_else": {
            "name": "_select_cols_else",
            "location": 1299,
            "return": [],
            "arguments": {
                "self": [],
                "cols_sel": [],
                "missing_keys": []
            }
        },
        "iLocIndexer._NotImplemented": {
            "name": "_NotImplemented",
            "location": 1463,
            "return": [
                "SparkPandasNotImplementedError"
            ],
            "arguments": {
                "description": []
            }
        },
        "iLocIndexer._internal": {
            "name": "_internal",
            "location": 1471,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "iLocIndexer._sequence_col": {
            "name": "_sequence_col",
            "location": 1480,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "iLocIndexer._select_rows_by_series": {
            "name": "_select_rows_by_series",
            "location": 1485,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "rows_sel": []
            }
        },
        "iLocIndexer._select_rows_by_spark_column": {
            "name": "_select_rows_by_spark_column",
            "location": 1494,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "rows_sel": []
            }
        },
        "iLocIndexer._select_rows_by_slice": {
            "name": "_select_rows_by_slice",
            "location": 1503,
            "return": [
                "tuple[None]"
            ],
            "arguments": {
                "self": [],
                "rows_sel": []
            }
        },
        "iLocIndexer._select_rows_by_iterable": {
            "name": "_select_rows_by_iterable",
            "location": 1567,
            "return": [
                "tuple[None]"
            ],
            "arguments": {
                "self": [],
                "rows_sel": []
            }
        },
        "iLocIndexer._select_rows_else": {
            "name": "_select_rows_else",
            "location": 1604,
            "return": [
                "tuple[typing.Optional[bool]]"
            ],
            "arguments": {
                "self": [],
                "rows_sel": []
            }
        },
        "iLocIndexer._select_cols_by_series": {
            "name": "_select_cols_by_series",
            "location": 1619,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cols_sel": [],
                "missing_keys": []
            }
        },
        "iLocIndexer._select_cols_by_spark_column": {
            "name": "_select_cols_by_spark_column",
            "location": 1629,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cols_sel": [],
                "missing_keys": []
            }
        },
        "iLocIndexer._select_cols_by_slice": {
            "name": "_select_cols_by_slice",
            "location": 1639,
            "return": [
                "tuple[typing.Optional[bool]]"
            ],
            "arguments": {
                "self": [],
                "cols_sel": [],
                "missing_keys": []
            }
        },
        "iLocIndexer._select_cols_by_iterable": {
            "name": "_select_cols_by_iterable",
            "location": 1665,
            "return": [
                "tuple[typing.Union[list,bool,None]]"
            ],
            "arguments": {
                "self": [],
                "cols_sel": [],
                "missing_keys": []
            }
        },
        "iLocIndexer._select_cols_else": {
            "name": "_select_cols_else",
            "location": 1680,
            "return": [
                "tuple[typing.Union[list,bool,None]]"
            ],
            "arguments": {
                "self": [],
                "cols_sel": [],
                "missing_keys": []
            }
        },
        "iLocIndexer.__setitem__": {
            "name": "__setitem__",
            "location": 1698,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [],
                "value": []
            }
        },
        "iLocIndexer._select_rows_by_slice.verify_type": {
            "name": "verify_type",
            "location": 1506,
            "return": [
                "None"
            ],
            "arguments": {
                "i": []
            }
        }
    },
    "koalas-master/databricks/koalas/internal.py": {
        "InternalFrame.__init__": {
            "name": "__init__",
            "location": 389,
            "return": [],
            "arguments": {
                "self": [],
                "spark_frame": [],
                "index_spark_columns": [],
                "index_names": [],
                "index_dtypes": [],
                "column_labels": [],
                "data_spark_columns": [],
                "data_dtypes": [],
                "column_label_names": []
            }
        },
        "InternalFrame.attach_default_index": {
            "name": "attach_default_index",
            "location": 632,
            "return": [],
            "arguments": {
                "sdf": [],
                "default_index_type": []
            }
        },
        "InternalFrame.attach_sequence_column": {
            "name": "attach_sequence_column",
            "location": 677,
            "return": [],
            "arguments": {
                "sdf": [],
                "column_name": []
            }
        },
        "InternalFrame.attach_distributed_column": {
            "name": "attach_distributed_column",
            "location": 685,
            "return": [],
            "arguments": {
                "sdf": [],
                "column_name": []
            }
        },
        "InternalFrame.attach_distributed_sequence_column": {
            "name": "attach_distributed_sequence_column",
            "location": 690,
            "return": [],
            "arguments": {
                "sdf": [],
                "column_name": []
            }
        },
        "InternalFrame._attach_distributed_sequence_column": {
            "name": "_attach_distributed_sequence_column",
            "location": 737,
            "return": [],
            "arguments": {
                "sdf": [],
                "column_name": []
            }
        },
        "InternalFrame.spark_column_for": {
            "name": "spark_column_for",
            "location": 802,
            "return": [],
            "arguments": {
                "self": [],
                "label": []
            }
        },
        "InternalFrame.spark_column_name_for": {
            "name": "spark_column_name_for",
            "location": 810,
            "return": [],
            "arguments": {
                "self": [],
                "label_or_scol": []
            }
        },
        "InternalFrame.spark_type_for": {
            "name": "spark_type_for",
            "location": 818,
            "return": [],
            "arguments": {
                "self": [],
                "label_or_scol": []
            }
        },
        "InternalFrame.spark_column_nullable_for": {
            "name": "spark_column_nullable_for",
            "location": 826,
            "return": [],
            "arguments": {
                "self": [],
                "label_or_scol": []
            }
        },
        "InternalFrame.dtype_for": {
            "name": "dtype_for",
            "location": 834,
            "return": [],
            "arguments": {
                "self": [],
                "label": []
            }
        },
        "InternalFrame.spark_frame": {
            "name": "spark_frame",
            "location": 843,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "InternalFrame.data_spark_column_names": {
            "name": "data_spark_column_names",
            "location": 848,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "InternalFrame.data_spark_columns": {
            "name": "data_spark_columns",
            "location": 853,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "InternalFrame.index_spark_column_names": {
            "name": "index_spark_column_names",
            "location": 858,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "InternalFrame.index_spark_columns": {
            "name": "index_spark_columns",
            "location": 863,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "InternalFrame.spark_column_names": {
            "name": "spark_column_names",
            "location": 868,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "InternalFrame.spark_columns": {
            "name": "spark_columns",
            "location": 873,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "InternalFrame.index_names": {
            "name": "index_names",
            "location": 883,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "InternalFrame.index_level": {
            "name": "index_level",
            "location": 888,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "InternalFrame.column_labels": {
            "name": "column_labels",
            "location": 893,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "InternalFrame.column_labels_level": {
            "name": "column_labels_level",
            "location": 898,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "InternalFrame.column_label_names": {
            "name": "column_label_names",
            "location": 903,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "InternalFrame.index_dtypes": {
            "name": "index_dtypes",
            "location": 908,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "InternalFrame.data_dtypes": {
            "name": "data_dtypes",
            "location": 913,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "InternalFrame.to_internal_spark_frame": {
            "name": "to_internal_spark_frame",
            "location": 918,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "InternalFrame.to_pandas_frame": {
            "name": "to_pandas_frame",
            "location": 931,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "InternalFrame.arguments_for_restore_index": {
            "name": "arguments_for_restore_index",
            "location": 954,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "InternalFrame.restore_index": {
            "name": "restore_index",
            "location": 994,
            "return": [],
            "arguments": {
                "pdf": []
            }
        },
        "InternalFrame.resolved_copy": {
            "name": "resolved_copy",
            "location": 1066,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "InternalFrame.with_new_sdf": {
            "name": "with_new_sdf",
            "location": 1075,
            "return": [],
            "arguments": {
                "self": [],
                "spark_frame": []
            }
        },
        "InternalFrame.with_new_columns": {
            "name": "with_new_columns",
            "location": 1124,
            "return": [],
            "arguments": {
                "self": [],
                "scols_or_ksers": []
            }
        },
        "InternalFrame.with_filter": {
            "name": "with_filter",
            "location": 1211,
            "return": [],
            "arguments": {
                "self": [],
                "pred": []
            }
        },
        "InternalFrame.with_new_spark_column": {
            "name": "with_new_spark_column",
            "location": 1228,
            "return": [],
            "arguments": {
                "self": [],
                "column_label": [],
                "scol": []
            }
        },
        "InternalFrame.select_column": {
            "name": "select_column",
            "location": 1256,
            "return": [],
            "arguments": {
                "self": [],
                "column_label": []
            }
        },
        "InternalFrame.copy": {
            "name": "copy",
            "location": 1272,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "InternalFrame.from_pandas": {
            "name": "from_pandas",
            "location": 1327,
            "return": [],
            "arguments": {
                "pdf": []
            }
        },
        "InternalFrame.prepare_pandas_frame": {
            "name": "prepare_pandas_frame",
            "location": 1377,
            "return": [],
            "arguments": {
                "pdf": []
            }
        },
        "InternalFrame._attach_distributed_sequence_column.offset": {
            "name": "offset",
            "location": 786,
            "return": [],
            "arguments": {
                "id": []
            }
        }
    },
    "koalas-master/databricks/koalas/ml.py": {
        "corr": {
            "name": "corr",
            "location": 35,
            "return": [],
            "arguments": {
                "kdf": [],
                "method": [
                    "typing.Text"
                ]
            }
        },
        "to_numeric_df": {
            "name": "to_numeric_df",
            "location": 64,
            "return": [
                "tuple[list]"
            ],
            "arguments": {
                "kdf": []
            }
        }
    },
    "koalas-master/databricks/koalas/mlflow.py": {
        "load_model": {
            "name": "load_model",
            "location": 103,
            "return": [
                "PythonModelWrapper"
            ],
            "arguments": {
                "model_uri": [],
                "predict_type": [
                    "typing.Text"
                ]
            }
        },
        "PythonModelWrapper.__init__": {
            "name": "__init__",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "model_uri": [],
                "return_type_hint": []
            }
        },
        "PythonModelWrapper._return_type": {
            "name": "_return_type",
            "location": 47,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PythonModelWrapper._model": {
            "name": "_model",
            "location": 60,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PythonModelWrapper._model_udf": {
            "name": "_model_udf",
            "location": 67,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PythonModelWrapper.__str__": {
            "name": "__str__",
            "location": 71,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "PythonModelWrapper.__repr__": {
            "name": "__repr__",
            "location": 74,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "PythonModelWrapper.predict": {
            "name": "predict",
            "location": 77,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        }
    },
    "koalas-master/databricks/koalas/namespace.py": {
        "from_pandas": {
            "name": "from_pandas",
            "location": 105,
            "return": [],
            "arguments": {
                "pobj": []
            }
        },
        "range": {
            "name": "range",
            "location": 135,
            "return": [],
            "arguments": {
                "start": [],
                "end": [],
                "step": [],
                "num_partitions": []
            }
        },
        "read_csv": {
            "name": "read_csv",
            "location": 188,
            "return": [],
            "arguments": {
                "path": [],
                "sep": [],
                "header": [],
                "names": [],
                "index_col": [],
                "usecols": [],
                "squeeze": [],
                "mangle_dupe_cols": [],
                "dtype": [],
                "nrows": [],
                "parse_dates": [],
                "quotechar": [],
                "escapechar": [],
                "comment": []
            }
        },
        "read_json": {
            "name": "read_json",
            "location": 415,
            "return": [],
            "arguments": {
                "path": [],
                "lines": [],
                "index_col": []
            }
        },
        "read_delta": {
            "name": "read_delta",
            "location": 473,
            "return": [],
            "arguments": {
                "path": [],
                "version": [],
                "timestamp": [],
                "index_col": []
            }
        },
        "read_table": {
            "name": "read_table",
            "location": 556,
            "return": [],
            "arguments": {
                "name": [],
                "index_col": []
            }
        },
        "read_spark_io": {
            "name": "read_spark_io",
            "location": 602,
            "return": [],
            "arguments": {
                "path": [],
                "format": [],
                "schema": [],
                "index_col": []
            }
        },
        "read_parquet": {
            "name": "read_parquet",
            "location": 686,
            "return": [],
            "arguments": {
                "path": [],
                "columns": [],
                "index_col": [],
                "pandas_metadata": []
            }
        },
        "read_clipboard": {
            "name": "read_clipboard",
            "location": 796,
            "return": [],
            "arguments": {
                "sep": []
            }
        },
        "read_excel": {
            "name": "read_excel",
            "location": 818,
            "return": [],
            "arguments": {
                "io": [],
                "sheet_name": [],
                "header": [],
                "names": [],
                "index_col": [],
                "usecols": [],
                "squeeze": [],
                "dtype": [],
                "engine": [],
                "converters": [],
                "true_values": [],
                "false_values": [],
                "skiprows": [],
                "nrows": [],
                "na_values": [],
                "keep_default_na": [],
                "verbose": [],
                "parse_dates": [],
                "date_parser": [],
                "thousands": [],
                "comment": [],
                "skipfooter": [],
                "convert_float": [],
                "mangle_dupe_cols": []
            }
        },
        "read_html": {
            "name": "read_html",
            "location": 1152,
            "return": [],
            "arguments": {
                "io": [],
                "match": [],
                "flavor": [],
                "header": [],
                "index_col": [],
                "skiprows": [],
                "attrs": [],
                "parse_dates": [],
                "thousands": [],
                "encoding": [],
                "decimal": [],
                "converters": [],
                "na_values": [],
                "keep_default_na": [],
                "displayed_only": []
            }
        },
        "read_sql_table": {
            "name": "read_sql_table",
            "location": 1289,
            "return": [],
            "arguments": {
                "table_name": [],
                "con": [],
                "schema": [],
                "index_col": [],
                "columns": []
            }
        },
        "read_sql_query": {
            "name": "read_sql_query",
            "location": 1355,
            "return": [],
            "arguments": {
                "sql": [],
                "con": [],
                "index_col": []
            }
        },
        "read_sql": {
            "name": "read_sql",
            "location": 1408,
            "return": [],
            "arguments": {
                "sql": [],
                "con": [],
                "index_col": [],
                "columns": []
            }
        },
        "to_datetime": {
            "name": "to_datetime",
            "location": 1462,
            "return": [],
            "arguments": {
                "arg": [],
                "errors": [],
                "format": [],
                "unit": [],
                "infer_datetime_format": [],
                "origin": []
            }
        },
        "date_range": {
            "name": "date_range",
            "location": 1606,
            "return": [],
            "arguments": {
                "start": [],
                "end": [],
                "periods": [],
                "freq": [],
                "tz": [],
                "normalize": [],
                "name": [],
                "closed": []
            }
        },
        "get_dummies": {
            "name": "get_dummies",
            "location": 1769,
            "return": [],
            "arguments": {
                "data": [],
                "prefix": [],
                "prefix_sep": [],
                "dummy_na": [],
                "columns": [],
                "sparse": [],
                "drop_first": [],
                "dtype": []
            }
        },
        "concat": {
            "name": "concat",
            "location": 1993,
            "return": [],
            "arguments": {
                "objs": [],
                "axis": [],
                "join": [],
                "ignore_index": [],
                "sort": []
            }
        },
        "melt": {
            "name": "melt",
            "location": 2378,
            "return": [],
            "arguments": {
                "frame": [],
                "id_vars": [],
                "value_vars": [],
                "var_name": [],
                "value_name": []
            }
        },
        "isna": {
            "name": "isna",
            "location": 2385,
            "return": [],
            "arguments": {
                "obj": []
            }
        },
        "notna": {
            "name": "notna",
            "location": 2467,
            "return": [],
            "arguments": {
                "obj": []
            }
        },
        "merge": {
            "name": "merge",
            "location": 2541,
            "return": [],
            "arguments": {
                "obj": [],
                "right": [],
                "how": [],
                "on": [],
                "left_on": [],
                "right_on": [],
                "left_index": [],
                "right_index": [],
                "suffixes": []
            }
        },
        "to_numeric": {
            "name": "to_numeric",
            "location": 2674,
            "return": [],
            "arguments": {
                "arg": []
            }
        },
        "broadcast": {
            "name": "broadcast",
            "location": 2746,
            "return": [],
            "arguments": {
                "obj": []
            }
        },
        "read_orc": {
            "name": "read_orc",
            "location": 2787,
            "return": [],
            "arguments": {
                "path": [],
                "columns": [],
                "index_col": []
            }
        },
        "_get_index_map": {
            "name": "_get_index_map",
            "location": 2845,
            "return": [],
            "arguments": {
                "sdf": [],
                "index_col": []
            }
        },
        "read_excel.pd_read_excel": {
            "name": "pd_read_excel",
            "location": 1045,
            "return": [],
            "arguments": {
                "io_or_bin": [],
                "sn": [],
                "sq": []
            }
        },
        "to_datetime.pandas_to_datetime": {
            "name": "pandas_to_datetime",
            "location": 1579,
            "return": [],
            "arguments": {
                "pser_or_pdf": []
            }
        },
        "read_parquet.read_index_metadata": {
            "name": "read_index_metadata",
            "location": 744,
            "return": [],
            "arguments": {
                "pser": []
            }
        },
        "read_excel.read_excel_on_spark": {
            "name": "read_excel_on_spark",
            "location": 1099,
            "return": [],
            "arguments": {
                "pdf_or_pser": [],
                "sn": []
            }
        },
        "get_dummies.column_name": {
            "name": "column_name",
            "location": 1974,
            "return": [],
            "arguments": {
                "value": []
            }
        },
        "read_excel.read_excel_on_spark.output_func": {
            "name": "output_func",
            "location": 1111,
            "return": [],
            "arguments": {
                "pdf": []
            }
        },
        "concat.resolve_func": {
            "name": "resolve_func",
            "location": 2204,
            "return": [],
            "arguments": {
                "kdf": [],
                "this_column_labels": [],
                "that_column_labels": []
            }
        }
    },
    "koalas-master/databricks/koalas/numpy_compat.py": {
        "maybe_dispatch_ufunc_to_dunder_op": {
            "name": "maybe_dispatch_ufunc_to_dunder_op",
            "location": 119,
            "return": [],
            "arguments": {
                "ser_or_index": [],
                "ufunc": [],
                "method": []
            }
        },
        "maybe_dispatch_ufunc_to_spark_func": {
            "name": "maybe_dispatch_ufunc_to_spark_func",
            "location": 184,
            "return": [],
            "arguments": {
                "ser_or_index": [],
                "ufunc": [],
                "method": []
            }
        },
        "maybe_dispatch_ufunc_to_dunder_op.not_implemented": {
            "name": "not_implemented",
            "location": 169,
            "return": [],
            "arguments": {}
        },
        "maybe_dispatch_ufunc_to_spark_func.convert_arguments": {
            "name": "convert_arguments",
            "location": 201,
            "return": [],
            "arguments": {}
        }
    },
    "koalas-master/databricks/koalas/series.py": {
        "_create_type_for_series_type": {
            "name": "_create_type_for_series_type",
            "location": 326,
            "return": [],
            "arguments": {
                "param": []
            }
        },
        "unpack_scalar": {
            "name": "unpack_scalar",
            "location": 6213,
            "return": [],
            "arguments": {
                "sdf": []
            }
        },
        "first_series": {
            "name": "first_series",
            "location": 6226,
            "return": [],
            "arguments": {
                "df": []
            }
        },
        "new_getitem": {
            "name": "new_getitem",
            "location": 343,
            "return": [],
            "arguments": {
                "self": [],
                "params": []
            }
        },
        "Series.__init__": {
            "name": "__init__",
            "location": 381,
            "return": [],
            "arguments": {
                "self": [],
                "data": [],
                "index": [],
                "dtype": [],
                "name": [],
                "copy": [],
                "fastpath": []
            }
        },
        "Series._kdf": {
            "name": "_kdf",
            "location": 414,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Series._internal": {
            "name": "_internal",
            "location": 418,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Series._column_label": {
            "name": "_column_label",
            "location": 422,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Series._update_anchor": {
            "name": "_update_anchor",
            "location": 425,
            "return": [],
            "arguments": {
                "self": [],
                "kdf": []
            }
        },
        "Series._with_new_scol": {
            "name": "_with_new_scol",
            "location": 433,
            "return": [],
            "arguments": {
                "self": [],
                "scol": []
            }
        },
        "Series.dtypes": {
            "name": "dtypes",
            "location": 449,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Series.axes": {
            "name": "axes",
            "location": 459,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Series.spark_type": {
            "name": "spark_type",
            "location": 473,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Series.add": {
            "name": "add",
            "location": 484,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Series.radd": {
            "name": "radd",
            "location": 495,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Series.div": {
            "name": "div",
            "location": 506,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Series.rdiv": {
            "name": "rdiv",
            "location": 519,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Series.truediv": {
            "name": "truediv",
            "location": 530,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Series.rtruediv": {
            "name": "rtruediv",
            "location": 541,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Series.mul": {
            "name": "mul",
            "location": 552,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Series.rmul": {
            "name": "rmul",
            "location": 565,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Series.sub": {
            "name": "sub",
            "location": 576,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Series.rsub": {
            "name": "rsub",
            "location": 589,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Series.mod": {
            "name": "mod",
            "location": 600,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Series.rmod": {
            "name": "rmod",
            "location": 611,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Series.pow": {
            "name": "pow",
            "location": 622,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Series.rpow": {
            "name": "rpow",
            "location": 633,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Series.floordiv": {
            "name": "floordiv",
            "location": 644,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Series.rfloordiv": {
            "name": "rfloordiv",
            "location": 655,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Series.eq": {
            "name": "eq",
            "location": 670,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Series.gt": {
            "name": "gt",
            "location": 696,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Series.ge": {
            "name": "ge",
            "location": 720,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Series.lt": {
            "name": "lt",
            "location": 744,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Series.le": {
            "name": "le",
            "location": 768,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Series.ne": {
            "name": "ne",
            "location": 792,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Series.divmod": {
            "name": "divmod",
            "location": 816,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Series.rdivmod": {
            "name": "rdivmod",
            "location": 836,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Series.between": {
            "name": "between",
            "location": 856,
            "return": [],
            "arguments": {
                "self": [],
                "left": [],
                "right": [],
                "inclusive": []
            }
        },
        "Series.map": {
            "name": "map",
            "location": 932,
            "return": [],
            "arguments": {
                "self": [],
                "arg": []
            }
        },
        "Series.alias": {
            "name": "alias",
            "location": 1022,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "Series.shape": {
            "name": "shape",
            "location": 1031,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Series.name": {
            "name": "name",
            "location": 1045,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "Series.rename": {
            "name": "rename",
            "location": 1050,
            "return": [],
            "arguments": {
                "self": [],
                "index": []
            }
        },
        "Series.rename_axis": {
            "name": "rename_axis",
            "location": 1104,
            "return": [],
            "arguments": {
                "self": [],
                "mapper": [],
                "index": [],
                "inplace": []
            }
        },
        "Series.index": {
            "name": "index",
            "location": 1176,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Series.is_unique": {
            "name": "is_unique",
            "location": 1186,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Series.reset_index": {
            "name": "reset_index",
            "location": 1214,
            "return": [],
            "arguments": {
                "self": [],
                "level": [],
                "drop": [],
                "name": [],
                "inplace": []
            }
        },
        "Series.to_frame": {
            "name": "to_frame",
            "location": 1309,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "Series.to_string": {
            "name": "to_string",
            "location": 1350,
            "return": [],
            "arguments": {
                "self": [],
                "buf": [],
                "na_rep": [],
                "float_format": [],
                "header": [],
                "index": [],
                "length": [],
                "dtype": [],
                "name": [],
                "max_rows": []
            }
        },
        "Series.to_clipboard": {
            "name": "to_clipboard",
            "location": 1420,
            "return": [],
            "arguments": {
                "self": [],
                "excel": [],
                "sep": []
            }
        },
        "Series.to_dict": {
            "name": "to_dict",
            "location": 1431,
            "return": [],
            "arguments": {
                "self": [],
                "into": []
            }
        },
        "Series.to_latex": {
            "name": "to_latex",
            "location": 1473,
            "return": [],
            "arguments": {
                "self": [],
                "buf": [],
                "columns": [],
                "col_space": [],
                "header": [],
                "index": [],
                "na_rep": [],
                "formatters": [],
                "float_format": [],
                "sparsify": [],
                "index_names": [],
                "bold_rows": [],
                "column_format": [],
                "longtable": [],
                "escape": [],
                "encoding": [],
                "decimal": [],
                "multicolumn": [],
                "multicolumn_format": [],
                "multirow": []
            }
        },
        "Series.to_pandas": {
            "name": "to_pandas",
            "location": 1504,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Series.toPandas": {
            "name": "toPandas",
            "location": 1524,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Series.to_list": {
            "name": "to_list",
            "location": 1533,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Series.drop_duplicates": {
            "name": "drop_duplicates",
            "location": 1549,
            "return": [],
            "arguments": {
                "self": [],
                "keep": [],
                "inplace": []
            }
        },
        "Series.reindex": {
            "name": "reindex",
            "location": 1624,
            "return": [],
            "arguments": {
                "self": [],
                "index": [],
                "fill_value": []
            }
        },
        "Series.reindex_like": {
            "name": "reindex_like",
            "location": 1727,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Series.fillna": {
            "name": "fillna",
            "location": 1792,
            "return": [],
            "arguments": {
                "self": [],
                "value": [],
                "method": [],
                "axis": [],
                "inplace": [],
                "limit": []
            }
        },
        "Series._fillna": {
            "name": "_fillna",
            "location": 1883,
            "return": [],
            "arguments": {
                "self": [],
                "value": [],
                "method": [],
                "axis": [],
                "limit": [],
                "part_cols": []
            }
        },
        "Series.dropna": {
            "name": "dropna",
            "location": 1936,
            "return": [],
            "arguments": {
                "self": [],
                "axis": [],
                "inplace": []
            }
        },
        "Series.clip": {
            "name": "clip",
            "location": 1987,
            "return": [],
            "arguments": {
                "self": [],
                "lower": [],
                "upper": []
            }
        },
        "Series.drop": {
            "name": "drop",
            "location": 2038,
            "return": [],
            "arguments": {
                "self": [],
                "labels": [],
                "index": [],
                "level": []
            }
        },
        "Series._drop": {
            "name": "_drop",
            "location": 2150,
            "return": [],
            "arguments": {
                "self": [],
                "labels": [],
                "index": [],
                "level": []
            }
        },
        "Series.head": {
            "name": "head",
            "location": 2198,
            "return": [],
            "arguments": {
                "self": [],
                "n": []
            }
        },
        "Series.last": {
            "name": "last",
            "location": 2223,
            "return": [],
            "arguments": {
                "self": [],
                "offset": []
            }
        },
        "Series.first": {
            "name": "first",
            "location": 2270,
            "return": [],
            "arguments": {
                "self": [],
                "offset": []
            }
        },
        "Series.unique": {
            "name": "unique",
            "location": 2319,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Series.sort_values": {
            "name": "sort_values",
            "location": 2371,
            "return": [],
            "arguments": {
                "self": [],
                "ascending": [],
                "inplace": [],
                "na_position": []
            }
        },
        "Series.sort_index": {
            "name": "sort_index",
            "location": 2476,
            "return": [],
            "arguments": {
                "self": [],
                "axis": [],
                "level": [],
                "ascending": [],
                "inplace": [],
                "kind": [],
                "na_position": []
            }
        },
        "Series.swaplevel": {
            "name": "swaplevel",
            "location": 2570,
            "return": [],
            "arguments": {
                "self": [],
                "i": [],
                "j": [],
                "copy": []
            }
        },
        "Series.swapaxes": {
            "name": "swapaxes",
            "location": 2620,
            "return": [],
            "arguments": {
                "self": [],
                "i": [],
                "j": [],
                "copy": []
            }
        },
        "Series.add_prefix": {
            "name": "add_prefix",
            "location": 2658,
            "return": [],
            "arguments": {
                "self": [],
                "prefix": []
            }
        },
        "Series.add_suffix": {
            "name": "add_suffix",
            "location": 2713,
            "return": [],
            "arguments": {
                "self": [],
                "suffix": []
            }
        },
        "Series.corr": {
            "name": "corr",
            "location": 2768,
            "return": [],
            "arguments": {
                "self": [],
                "other": [],
                "method": []
            }
        },
        "Series.nsmallest": {
            "name": "nsmallest",
            "location": 2813,
            "return": [],
            "arguments": {
                "self": [],
                "n": []
            }
        },
        "Series.nlargest": {
            "name": "nlargest",
            "location": 2873,
            "return": [],
            "arguments": {
                "self": [],
                "n": []
            }
        },
        "Series.append": {
            "name": "append",
            "location": 2935,
            "return": [],
            "arguments": {
                "self": [],
                "to_append": [],
                "ignore_index": [],
                "verify_integrity": []
            }
        },
        "Series.sample": {
            "name": "sample",
            "location": 2992,
            "return": [],
            "arguments": {
                "self": [],
                "n": [],
                "frac": [],
                "replace": [],
                "random_state": []
            }
        },
        "Series.hist": {
            "name": "hist",
            "location": 3005,
            "return": [],
            "arguments": {
                "self": [],
                "bins": []
            }
        },
        "Series.apply": {
            "name": "apply",
            "location": 3010,
            "return": [],
            "arguments": {
                "self": [],
                "func": [],
                "args": []
            }
        },
        "Series.aggregate": {
            "name": "aggregate",
            "location": 3144,
            "return": [],
            "arguments": {
                "self": [],
                "func": []
            }
        },
        "Series.transpose": {
            "name": "transpose",
            "location": 3190,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Series.transform": {
            "name": "transform",
            "location": 3216,
            "return": [],
            "arguments": {
                "self": [],
                "func": [],
                "axis": []
            }
        },
        "Series.transform_batch": {
            "name": "transform_batch",
            "location": 3304,
            "return": [],
            "arguments": {
                "self": [],
                "func": []
            }
        },
        "Series.round": {
            "name": "round",
            "location": 3314,
            "return": [],
            "arguments": {
                "self": [],
                "decimals": []
            }
        },
        "Series.quantile": {
            "name": "quantile",
            "location": 3354,
            "return": [],
            "arguments": {
                "self": [],
                "q": [],
                "accuracy": []
            }
        },
        "Series.rank": {
            "name": "rank",
            "location": 3430,
            "return": [],
            "arguments": {
                "self": [],
                "method": [],
                "ascending": []
            }
        },
        "Series._rank": {
            "name": "_rank",
            "location": 3510,
            "return": [],
            "arguments": {
                "self": [],
                "method": [],
                "ascending": []
            }
        },
        "Series.filter": {
            "name": "filter",
            "location": 3558,
            "return": [],
            "arguments": {
                "self": [],
                "items": [],
                "like": [],
                "regex": [],
                "axis": []
            }
        },
        "Series.describe": {
            "name": "describe",
            "location": 3568,
            "return": [],
            "arguments": {
                "self": [],
                "percentiles": []
            }
        },
        "Series.diff": {
            "name": "diff",
            "location": 3573,
            "return": [],
            "arguments": {
                "self": [],
                "periods": []
            }
        },
        "Series._diff": {
            "name": "_diff",
            "location": 3641,
            "return": [],
            "arguments": {
                "self": [],
                "periods": []
            }
        },
        "Series.idxmax": {
            "name": "idxmax",
            "location": 3652,
            "return": [],
            "arguments": {
                "self": [],
                "skipna": []
            }
        },
        "Series.idxmin": {
            "name": "idxmin",
            "location": 3755,
            "return": [],
            "arguments": {
                "self": [],
                "skipna": []
            }
        },
        "Series.pop": {
            "name": "pop",
            "location": 3863,
            "return": [],
            "arguments": {
                "self": [],
                "item": []
            }
        },
        "Series.copy": {
            "name": "copy",
            "location": 4034,
            "return": [],
            "arguments": {
                "self": [],
                "deep": []
            }
        },
        "Series.mode": {
            "name": "mode",
            "location": 4062,
            "return": [],
            "arguments": {
                "self": [],
                "dropna": []
            }
        },
        "Series.keys": {
            "name": "keys",
            "location": 4145,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Series.replace": {
            "name": "replace",
            "location": 4177,
            "return": [],
            "arguments": {
                "self": [],
                "to_replace": [],
                "value": [],
                "regex": []
            }
        },
        "Series.update": {
            "name": "update",
            "location": 4371,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Series.where": {
            "name": "where",
            "location": 4461,
            "return": [],
            "arguments": {
                "self": [],
                "cond": [],
                "other": []
            }
        },
        "Series.mask": {
            "name": "mask",
            "location": 4567,
            "return": [],
            "arguments": {
                "self": [],
                "cond": [],
                "other": []
            }
        },
        "Series.xs": {
            "name": "xs",
            "location": 4626,
            "return": [],
            "arguments": {
                "self": [],
                "key": [],
                "level": []
            }
        },
        "Series.pct_change": {
            "name": "pct_change",
            "location": 4730,
            "return": [],
            "arguments": {
                "self": [],
                "periods": []
            }
        },
        "Series.combine_first": {
            "name": "combine_first",
            "location": 4783,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Series.dot": {
            "name": "dot",
            "location": 4838,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Series.__matmul__": {
            "name": "__matmul__",
            "location": 4932,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Series.repeat": {
            "name": "repeat",
            "location": 4938,
            "return": [],
            "arguments": {
                "self": [],
                "repeats": []
            }
        },
        "Series.asof": {
            "name": "asof",
            "location": 5024,
            "return": [],
            "arguments": {
                "self": [],
                "where": []
            }
        },
        "Series.mad": {
            "name": "mad",
            "location": 5114,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Series.unstack": {
            "name": "unstack",
            "location": 5139,
            "return": [],
            "arguments": {
                "self": [],
                "level": []
            }
        },
        "Series.item": {
            "name": "item",
            "location": 5213,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Series.iteritems": {
            "name": "iteritems",
            "location": 5235,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Series.items": {
            "name": "items",
            "location": 5281,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Series.droplevel": {
            "name": "droplevel",
            "location": 5285,
            "return": [],
            "arguments": {
                "self": [],
                "level": []
            }
        },
        "Series.tail": {
            "name": "tail",
            "location": 5336,
            "return": [],
            "arguments": {
                "self": [],
                "n": []
            }
        },
        "Series.explode": {
            "name": "explode",
            "location": 5380,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Series.argsort": {
            "name": "argsort",
            "location": 5424,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Series.argmax": {
            "name": "argmax",
            "location": 5530,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Series.argmin": {
            "name": "argmin",
            "location": 5577,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Series.compare": {
            "name": "compare",
            "location": 5624,
            "return": [],
            "arguments": {
                "self": [],
                "other": [],
                "keep_shape": [],
                "keep_equal": []
            }
        },
        "Series.align": {
            "name": "align",
            "location": 5740,
            "return": [],
            "arguments": {
                "self": [],
                "other": [],
                "join": [],
                "axis": [],
                "copy": []
            }
        },
        "Series.between_time": {
            "name": "between_time",
            "location": 5834,
            "return": [],
            "arguments": {
                "self": [],
                "start_time": [],
                "end_time": [],
                "include_start": [],
                "include_end": [],
                "axis": []
            }
        },
        "Series.at_time": {
            "name": "at_time",
            "location": 5898,
            "return": [],
            "arguments": {
                "self": [],
                "time": [],
                "asof": [],
                "axis": []
            }
        },
        "Series._cum": {
            "name": "_cum",
            "location": 5942,
            "return": [],
            "arguments": {
                "self": [],
                "func": [],
                "skipna": [],
                "part_cols": [],
                "ascending": []
            }
        },
        "Series._cumsum": {
            "name": "_cumsum",
            "location": 6029,
            "return": [],
            "arguments": {
                "self": [],
                "skipna": [],
                "part_cols": []
            }
        },
        "Series._cumprod": {
            "name": "_cumprod",
            "location": 6042,
            "return": [],
            "arguments": {
                "self": [],
                "skipna": [],
                "part_cols": []
            }
        },
        "Series._apply_series_op": {
            "name": "_apply_series_op",
            "location": 6084,
            "return": [],
            "arguments": {
                "self": [],
                "op": [],
                "should_resolve": []
            }
        },
        "Series._reduce_for_stat_function": {
            "name": "_reduce_for_stat_function",
            "location": 6092,
            "return": [],
            "arguments": {
                "self": [],
                "sfun": [],
                "name": [],
                "axis": [],
                "numeric_only": []
            }
        },
        "Series.__getitem__": {
            "name": "__getitem__",
            "location": 6127,
            "return": [],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "Series.__getattr__": {
            "name": "__getattr__",
            "location": 6144,
            "return": [],
            "arguments": {
                "self": [],
                "item": []
            }
        },
        "Series._to_internal_pandas": {
            "name": "_to_internal_pandas",
            "location": 6155,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Series.__repr__": {
            "name": "__repr__",
            "location": 6163,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Series.__dir__": {
            "name": "__dir__",
            "location": 6192,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Series.__iter__": {
            "name": "__iter__",
            "location": 6199,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Series.iteritems.extract_kv_from_spark_row": {
            "name": "extract_kv_from_spark_row",
            "location": 5267,
            "return": [],
            "arguments": {
                "row": []
            }
        },
        "Series.__class_getitem__": {
            "name": "__class_getitem__",
            "location": 6204,
            "return": [],
            "arguments": {
                "cls": [],
                "params": []
            }
        },
        "Series.quantile.quantile": {
            "name": "quantile",
            "location": 3417,
            "return": [],
            "arguments": {
                "spark_column": [],
                "spark_type": []
            }
        }
    },
    "koalas-master/databricks/koalas/sql.py": {
        "sql": {
            "name": "sql",
            "location": 36,
            "return": [],
            "arguments": {
                "query": [],
                "globals": [
                    "None"
                ],
                "locals": [
                    "None"
                ]
            }
        },
        "_get_local_scope": {
            "name": "_get_local_scope",
            "location": 153,
            "return": [
                "dict"
            ],
            "arguments": {}
        },
        "_get_ipython_scope": {
            "name": "_get_ipython_scope",
            "location": 163,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "escape_sql_string": {
            "name": "escape_sql_string",
            "location": 190,
            "return": [],
            "arguments": {
                "value": []
            }
        },
        "SQLProcessor.__init__": {
            "name": "__init__",
            "location": 206,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "scope": [],
                "statement": [],
                "session": []
            }
        },
        "SQLProcessor.execute": {
            "name": "execute",
            "location": 222,
            "return": [
                "DataFrame"
            ],
            "arguments": {
                "self": []
            }
        },
        "SQLProcessor._convert": {
            "name": "_convert",
            "location": 258,
            "return": [],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "SQLProcessor._convert_var": {
            "name": "_convert_var",
            "location": 278,
            "return": [
                "str",
                "typing.Text"
            ],
            "arguments": {
                "self": [],
                "var": []
            }
        }
    },
    "koalas-master/databricks/koalas/strings.py": {
        "StringMethods.__init__": {
            "name": "__init__",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "series": []
            }
        },
        "StringMethods.capitalize": {
            "name": "capitalize",
            "location": 43,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "StringMethods.title": {
            "name": "title",
            "location": 70,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "StringMethods.lower": {
            "name": "lower",
            "location": 97,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "StringMethods.upper": {
            "name": "upper",
            "location": 120,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "StringMethods.swapcase": {
            "name": "swapcase",
            "location": 143,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "StringMethods.startswith": {
            "name": "startswith",
            "location": 170,
            "return": [],
            "arguments": {
                "self": [],
                "pattern": [],
                "na": [
                    "None"
                ]
            }
        },
        "StringMethods.endswith": {
            "name": "endswith",
            "location": 221,
            "return": [],
            "arguments": {
                "self": [],
                "pattern": [],
                "na": [
                    "None"
                ]
            }
        },
        "StringMethods.strip": {
            "name": "strip",
            "location": 272,
            "return": [],
            "arguments": {
                "self": [],
                "to_strip": [
                    "None"
                ]
            }
        },
        "StringMethods.lstrip": {
            "name": "lstrip",
            "location": 324,
            "return": [],
            "arguments": {
                "self": [],
                "to_strip": [
                    "None"
                ]
            }
        },
        "StringMethods.rstrip": {
            "name": "rstrip",
            "location": 364,
            "return": [],
            "arguments": {
                "self": [],
                "to_strip": [
                    "None"
                ]
            }
        },
        "StringMethods.get": {
            "name": "get",
            "location": 404,
            "return": [],
            "arguments": {
                "self": [],
                "i": []
            }
        },
        "StringMethods.isalnum": {
            "name": "isalnum",
            "location": 458,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "StringMethods.isalpha": {
            "name": "isalpha",
            "location": 494,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "StringMethods.isdigit": {
            "name": "isdigit",
            "location": 519,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "StringMethods.isspace": {
            "name": "isspace",
            "location": 569,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "StringMethods.islower": {
            "name": "islower",
            "location": 592,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "StringMethods.isupper": {
            "name": "isupper",
            "location": 616,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "StringMethods.istitle": {
            "name": "istitle",
            "location": 640,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "StringMethods.isnumeric": {
            "name": "isnumeric",
            "location": 670,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "StringMethods.isdecimal": {
            "name": "isdecimal",
            "location": 728,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "StringMethods.cat": {
            "name": "cat",
            "location": 778,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "others": [
                    "None"
                ],
                "sep": [
                    "None"
                ],
                "na_rep": [
                    "None"
                ],
                "join": [
                    "None"
                ]
            }
        },
        "StringMethods.center": {
            "name": "center",
            "location": 784,
            "return": [],
            "arguments": {
                "self": [],
                "width": [],
                "fillchar": [
                    "typing.Text"
                ]
            }
        },
        "StringMethods.contains": {
            "name": "contains",
            "location": 820,
            "return": [],
            "arguments": {
                "self": [],
                "pat": [],
                "case": [
                    "bool"
                ],
                "flags": [
                    "int"
                ],
                "na": [
                    "None"
                ],
                "regex": [
                    "bool"
                ]
            }
        },
        "StringMethods.count": {
            "name": "count",
            "location": 937,
            "return": [],
            "arguments": {
                "self": [],
                "pat": [],
                "flags": [
                    "int"
                ]
            }
        },
        "StringMethods.decode": {
            "name": "decode",
            "location": 987,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "encoding": [],
                "errors": [
                    "typing.Text"
                ]
            }
        },
        "StringMethods.encode": {
            "name": "encode",
            "location": 993,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "encoding": [],
                "errors": [
                    "typing.Text"
                ]
            }
        },
        "StringMethods.extract": {
            "name": "extract",
            "location": 999,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pat": [],
                "flags": [
                    "int"
                ],
                "expand": [
                    "bool"
                ]
            }
        },
        "StringMethods.extractall": {
            "name": "extractall",
            "location": 1005,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pat": [],
                "flags": [
                    "int"
                ]
            }
        },
        "StringMethods.find": {
            "name": "find",
            "location": 1011,
            "return": [],
            "arguments": {
                "self": [],
                "sub": [],
                "start": [
                    "int"
                ],
                "end": [
                    "None"
                ]
            }
        },
        "StringMethods.findall": {
            "name": "findall",
            "location": 1066,
            "return": [],
            "arguments": {
                "self": [],
                "pat": [],
                "flags": [
                    "int"
                ]
            }
        },
        "StringMethods.index": {
            "name": "index",
            "location": 1152,
            "return": [],
            "arguments": {
                "self": [],
                "sub": [],
                "start": [
                    "int"
                ],
                "end": [
                    "None"
                ]
            }
        },
        "StringMethods.join": {
            "name": "join",
            "location": 1195,
            "return": [],
            "arguments": {
                "self": [],
                "sep": []
            }
        },
        "StringMethods.len": {
            "name": "len",
            "location": 1244,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "StringMethods.ljust": {
            "name": "ljust",
            "location": 1278,
            "return": [],
            "arguments": {
                "self": [],
                "width": [],
                "fillchar": [
                    "typing.Text"
                ]
            }
        },
        "StringMethods.match": {
            "name": "match",
            "location": 1314,
            "return": [],
            "arguments": {
                "self": [],
                "pat": [],
                "case": [
                    "bool"
                ],
                "flags": [
                    "int"
                ],
                "na": []
            }
        },
        "StringMethods.normalize": {
            "name": "normalize",
            "location": 1380,
            "return": [],
            "arguments": {
                "self": [],
                "form": []
            }
        },
        "StringMethods.pad": {
            "name": "pad",
            "location": 1403,
            "return": [],
            "arguments": {
                "self": [],
                "width": [],
                "side": [
                    "typing.Text"
                ],
                "fillchar": [
                    "typing.Text"
                ]
            }
        },
        "StringMethods.partition": {
            "name": "partition",
            "location": 1451,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sep": [
                    "typing.Text"
                ],
                "expand": [
                    "bool"
                ]
            }
        },
        "StringMethods.repeat": {
            "name": "repeat",
            "location": 1457,
            "return": [],
            "arguments": {
                "self": [],
                "repeats": []
            }
        },
        "StringMethods.replace": {
            "name": "replace",
            "location": 1494,
            "return": [],
            "arguments": {
                "self": [],
                "pat": [],
                "repl": [],
                "n": [
                    "int"
                ],
                "case": [
                    "None"
                ],
                "flags": [
                    "int"
                ],
                "regex": [
                    "bool"
                ]
            }
        },
        "StringMethods.rfind": {
            "name": "rfind",
            "location": 1588,
            "return": [],
            "arguments": {
                "self": [],
                "sub": [],
                "start": [
                    "int"
                ],
                "end": [
                    "None"
                ]
            }
        },
        "StringMethods.rindex": {
            "name": "rindex",
            "location": 1643,
            "return": [],
            "arguments": {
                "self": [],
                "sub": [],
                "start": [
                    "int"
                ],
                "end": [
                    "None"
                ]
            }
        },
        "StringMethods.rjust": {
            "name": "rjust",
            "location": 1686,
            "return": [],
            "arguments": {
                "self": [],
                "width": [],
                "fillchar": [
                    "typing.Text"
                ]
            }
        },
        "StringMethods.rpartition": {
            "name": "rpartition",
            "location": 1727,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sep": [
                    "typing.Text"
                ],
                "expand": [
                    "bool"
                ]
            }
        },
        "StringMethods.slice": {
            "name": "slice",
            "location": 1733,
            "return": [],
            "arguments": {
                "self": [],
                "start": [
                    "None"
                ],
                "stop": [
                    "None"
                ],
                "step": [
                    "None"
                ]
            }
        },
        "StringMethods.slice_replace": {
            "name": "slice_replace",
            "location": 1790,
            "return": [],
            "arguments": {
                "self": [],
                "start": [
                    "None"
                ],
                "stop": [
                    "None"
                ],
                "repl": [
                    "None"
                ]
            }
        },
        "StringMethods.split": {
            "name": "split",
            "location": 1864,
            "return": [
                "DataFrame"
            ],
            "arguments": {
                "self": [],
                "pat": [
                    "None"
                ],
                "n": [
                    "int"
                ],
                "expand": [
                    "bool"
                ]
            }
        },
        "StringMethods.rsplit": {
            "name": "rsplit",
            "location": 2011,
            "return": [
                "DataFrame"
            ],
            "arguments": {
                "self": [],
                "pat": [
                    "None"
                ],
                "n": [
                    "int"
                ],
                "expand": [
                    "bool"
                ]
            }
        },
        "StringMethods.translate": {
            "name": "translate",
            "location": 2149,
            "return": [],
            "arguments": {
                "self": [],
                "table": []
            }
        },
        "StringMethods.wrap": {
            "name": "wrap",
            "location": 2183,
            "return": [],
            "arguments": {
                "self": [],
                "width": []
            }
        },
        "StringMethods.zfill": {
            "name": "zfill",
            "location": 2234,
            "return": [],
            "arguments": {
                "self": [],
                "width": []
            }
        },
        "StringMethods.get_dummies": {
            "name": "get_dummies",
            "location": 2284,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sep": [
                    "typing.Text"
                ]
            }
        },
        "StringMethods.capitalize.pandas_capitalize": {
            "name": "pandas_capitalize",
            "location": 65,
            "return": [],
            "arguments": {
                "s": []
            }
        },
        "StringMethods.title.pandas_title": {
            "name": "pandas_title",
            "location": 92,
            "return": [],
            "arguments": {
                "s": []
            }
        },
        "StringMethods.swapcase.pandas_swapcase": {
            "name": "pandas_swapcase",
            "location": 165,
            "return": [],
            "arguments": {
                "s": []
            }
        },
        "StringMethods.startswith.pandas_startswith": {
            "name": "pandas_startswith",
            "location": 216,
            "return": [],
            "arguments": {
                "s": []
            }
        },
        "StringMethods.endswith.pandas_endswith": {
            "name": "pandas_endswith",
            "location": 267,
            "return": [],
            "arguments": {
                "s": []
            }
        },
        "StringMethods.strip.pandas_strip": {
            "name": "pandas_strip",
            "location": 319,
            "return": [],
            "arguments": {
                "s": []
            }
        },
        "StringMethods.lstrip.pandas_lstrip": {
            "name": "pandas_lstrip",
            "location": 359,
            "return": [],
            "arguments": {
                "s": []
            }
        },
        "StringMethods.rstrip.pandas_rstrip": {
            "name": "pandas_rstrip",
            "location": 399,
            "return": [],
            "arguments": {
                "s": []
            }
        },
        "StringMethods.get.pandas_get": {
            "name": "pandas_get",
            "location": 453,
            "return": [],
            "arguments": {
                "s": []
            }
        },
        "StringMethods.isalnum.pandas_isalnum": {
            "name": "pandas_isalnum",
            "location": 489,
            "return": [],
            "arguments": {
                "s": []
            }
        },
        "StringMethods.isalpha.pandas_isalpha": {
            "name": "pandas_isalpha",
            "location": 514,
            "return": [],
            "arguments": {
                "s": []
            }
        },
        "StringMethods.isdigit.pandas_isdigit": {
            "name": "pandas_isdigit",
            "location": 564,
            "return": [],
            "arguments": {
                "s": []
            }
        },
        "StringMethods.isspace.pandas_isspace": {
            "name": "pandas_isspace",
            "location": 587,
            "return": [],
            "arguments": {
                "s": []
            }
        },
        "StringMethods.islower.pandas_isspace": {
            "name": "pandas_isspace",
            "location": 611,
            "return": [],
            "arguments": {
                "s": []
            }
        },
        "StringMethods.isupper.pandas_isspace": {
            "name": "pandas_isspace",
            "location": 635,
            "return": [],
            "arguments": {
                "s": []
            }
        },
        "StringMethods.istitle.pandas_istitle": {
            "name": "pandas_istitle",
            "location": 665,
            "return": [],
            "arguments": {
                "s": []
            }
        },
        "StringMethods.isnumeric.pandas_isnumeric": {
            "name": "pandas_isnumeric",
            "location": 723,
            "return": [],
            "arguments": {
                "s": []
            }
        },
        "StringMethods.isdecimal.pandas_isdecimal": {
            "name": "pandas_isdecimal",
            "location": 773,
            "return": [],
            "arguments": {
                "s": []
            }
        },
        "StringMethods.center.pandas_center": {
            "name": "pandas_center",
            "location": 815,
            "return": [],
            "arguments": {
                "s": []
            }
        },
        "StringMethods.contains.pandas_contains": {
            "name": "pandas_contains",
            "location": 932,
            "return": [],
            "arguments": {
                "s": []
            }
        },
        "StringMethods.count.pandas_count": {
            "name": "pandas_count",
            "location": 982,
            "return": [],
            "arguments": {
                "s": []
            }
        },
        "StringMethods.find.pandas_find": {
            "name": "pandas_find",
            "location": 1061,
            "return": [],
            "arguments": {
                "s": []
            }
        },
        "StringMethods.index.pandas_index": {
            "name": "pandas_index",
            "location": 1190,
            "return": [],
            "arguments": {
                "s": []
            }
        },
        "StringMethods.join.pandas_join": {
            "name": "pandas_join",
            "location": 1239,
            "return": [],
            "arguments": {
                "s": []
            }
        },
        "StringMethods.ljust.pandas_ljust": {
            "name": "pandas_ljust",
            "location": 1309,
            "return": [],
            "arguments": {
                "s": []
            }
        },
        "StringMethods.match.pandas_match": {
            "name": "pandas_match",
            "location": 1375,
            "return": [],
            "arguments": {
                "s": []
            }
        },
        "StringMethods.normalize.pandas_normalize": {
            "name": "pandas_normalize",
            "location": 1398,
            "return": [],
            "arguments": {
                "s": []
            }
        },
        "StringMethods.pad.pandas_pad": {
            "name": "pandas_pad",
            "location": 1446,
            "return": [],
            "arguments": {
                "s": []
            }
        },
        "StringMethods.replace.pandas_replace": {
            "name": "pandas_replace",
            "location": 1583,
            "return": [],
            "arguments": {
                "s": []
            }
        },
        "StringMethods.rfind.pandas_rfind": {
            "name": "pandas_rfind",
            "location": 1638,
            "return": [],
            "arguments": {
                "s": []
            }
        },
        "StringMethods.rindex.pandas_rindex": {
            "name": "pandas_rindex",
            "location": 1681,
            "return": [],
            "arguments": {
                "s": []
            }
        },
        "StringMethods.rjust.pandas_rjust": {
            "name": "pandas_rjust",
            "location": 1722,
            "return": [],
            "arguments": {
                "s": []
            }
        },
        "StringMethods.slice.pandas_slice": {
            "name": "pandas_slice",
            "location": 1785,
            "return": [],
            "arguments": {
                "s": []
            }
        },
        "StringMethods.slice_replace.pandas_slice_replace": {
            "name": "pandas_slice_replace",
            "location": 1859,
            "return": [],
            "arguments": {
                "s": []
            }
        },
        "StringMethods.translate.pandas_translate": {
            "name": "pandas_translate",
            "location": 2178,
            "return": [],
            "arguments": {
                "s": []
            }
        },
        "StringMethods.wrap.pandas_wrap": {
            "name": "pandas_wrap",
            "location": 2229,
            "return": [],
            "arguments": {
                "s": []
            }
        },
        "StringMethods.zfill.pandas_zfill": {
            "name": "pandas_zfill",
            "location": 2279,
            "return": [],
            "arguments": {
                "s": []
            }
        }
    },
    "koalas-master/databricks/koalas/utils.py": {
        "same_anchor": {
            "name": "same_anchor",
            "location": 63,
            "return": [],
            "arguments": {
                "this": [],
                "that": []
            }
        },
        "combine_frames": {
            "name": "combine_frames",
            "location": 98,
            "return": [],
            "arguments": {
                "this": []
            }
        },
        "align_diff_frames": {
            "name": "align_diff_frames",
            "location": 282,
            "return": [],
            "arguments": {
                "resolve_func": [],
                "this": [],
                "that": [],
                "fillna": [],
                "how": [],
                "preserve_order_column": []
            }
        },
        "is_testing": {
            "name": "is_testing",
            "location": 428,
            "return": [],
            "arguments": {}
        },
        "default_session": {
            "name": "default_session",
            "location": 433,
            "return": [],
            "arguments": {
                "conf": []
            }
        },
        "sql_conf": {
            "name": "sql_conf",
            "location": 480,
            "return": [],
            "arguments": {
                "pairs": []
            }
        },
        "validate_arguments_and_invoke_function": {
            "name": "validate_arguments_and_invoke_function",
            "location": 505,
            "return": [],
            "arguments": {
                "pobj": [],
                "koalas_func": [],
                "pandas_func": [],
                "input_args": []
            }
        },
        "lazy_property": {
            "name": "lazy_property",
            "location": 566,
            "return": [],
            "arguments": {
                "fn": []
            }
        },
        "scol_for": {
            "name": "scol_for",
            "location": 588,
            "return": [],
            "arguments": {
                "sdf": [],
                "column_name": []
            }
        },
        "column_labels_level": {
            "name": "column_labels_level",
            "location": 593,
            "return": [],
            "arguments": {
                "column_labels": []
            }
        },
        "name_like_string": {
            "name": "name_like_string",
            "location": 603,
            "return": [],
            "arguments": {
                "name": []
            }
        },
        "is_name_like_tuple": {
            "name": "is_name_like_tuple",
            "location": 630,
            "return": [],
            "arguments": {
                "value": [],
                "allow_none": [],
                "check_type": []
            }
        },
        "is_name_like_value": {
            "name": "is_name_like_value",
            "location": 673,
            "return": [],
            "arguments": {
                "value": [],
                "allow_none": [],
                "allow_tuple": [],
                "check_type": []
            }
        },
        "validate_axis": {
            "name": "validate_axis",
            "location": 714,
            "return": [],
            "arguments": {
                "axis": [],
                "none_axis": []
            }
        },
        "validate_bool_kwarg": {
            "name": "validate_bool_kwarg",
            "location": 723,
            "return": [],
            "arguments": {
                "value": [],
                "arg_name": []
            }
        },
        "validate_how": {
            "name": "validate_how",
            "location": 733,
            "return": [],
            "arguments": {
                "how": []
            }
        },
        "verify_temp_column_name": {
            "name": "verify_temp_column_name",
            "location": 752,
            "return": [],
            "arguments": {
                "df": [],
                "column_name_or_label": []
            }
        },
        "compare_null_first": {
            "name": "compare_null_first",
            "location": 860,
            "return": [],
            "arguments": {
                "left": [],
                "right": [],
                "comp": []
            }
        },
        "compare_null_last": {
            "name": "compare_null_last",
            "location": 866,
            "return": [],
            "arguments": {
                "left": [],
                "right": [],
                "comp": []
            }
        },
        "compare_disallow_null": {
            "name": "compare_disallow_null",
            "location": 872,
            "return": [],
            "arguments": {
                "left": [],
                "right": [],
                "comp": []
            }
        },
        "compare_allow_null": {
            "name": "compare_allow_null",
            "location": 876,
            "return": [],
            "arguments": {
                "left": [],
                "right": [],
                "comp": []
            }
        },
        "lazy_property.wrapped_lazy_property": {
            "name": "wrapped_lazy_property",
            "location": 576,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "lazy_property.deleter": {
            "name": "deleter",
            "location": 581,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "combine_frames.resolve": {
            "name": "resolve",
            "location": 137,
            "return": [],
            "arguments": {
                "internal": [],
                "side": []
            }
        },
        "combine_frames.fill_label": {
            "name": "fill_label",
            "location": 254,
            "return": [],
            "arguments": {
                "label": []
            }
        }
    },
    "koalas-master/databricks/koalas/version.py": {},
    "koalas-master/databricks/koalas/window.py": {
        "RollingAndExpanding.__init__": {
            "name": "__init__",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "kdf_or_kser": [],
                "window": [],
                "min_periods": []
            }
        },
        "RollingAndExpanding._apply_as_series_or_frame": {
            "name": "_apply_as_series_or_frame",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "func": []
            }
        },
        "RollingAndExpanding.count": {
            "name": "count",
            "location": 60,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RollingAndExpanding.sum": {
            "name": "sum",
            "location": 66,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RollingAndExpanding.min": {
            "name": "min",
            "location": 75,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RollingAndExpanding.max": {
            "name": "max",
            "location": 84,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RollingAndExpanding.mean": {
            "name": "mean",
            "location": 93,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RollingAndExpanding.std": {
            "name": "std",
            "location": 102,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RollingAndExpanding.var": {
            "name": "var",
            "location": 111,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Rolling.__init__": {
            "name": "__init__",
            "location": 122,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "kdf_or_kser": [],
                "window": [],
                "min_periods": []
            }
        },
        "Rolling.__getattr__": {
            "name": "__getattr__",
            "location": 145,
            "return": [],
            "arguments": {
                "self": [],
                "item": []
            }
        },
        "Rolling._apply_as_series_or_frame": {
            "name": "_apply_as_series_or_frame",
            "location": 154,
            "return": [],
            "arguments": {
                "self": [],
                "func": []
            }
        },
        "Rolling.count": {
            "name": "count",
            "location": 160,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Rolling.sum": {
            "name": "sum",
            "location": 209,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Rolling.min": {
            "name": "min",
            "location": 287,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Rolling.max": {
            "name": "max",
            "location": 365,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Rolling.mean": {
            "name": "mean",
            "location": 442,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Rolling.std": {
            "name": "std",
            "location": 520,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Rolling.var": {
            "name": "var",
            "location": 570,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RollingGroupby.__init__": {
            "name": "__init__",
            "location": 622,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "groupby": [],
                "window": [],
                "min_periods": [
                    "None"
                ]
            }
        },
        "RollingGroupby.__getattr__": {
            "name": "__getattr__",
            "location": 644,
            "return": [],
            "arguments": {
                "self": [],
                "item": []
            }
        },
        "RollingGroupby._apply_as_series_or_frame": {
            "name": "_apply_as_series_or_frame",
            "location": 653,
            "return": [
                "DataFrame"
            ],
            "arguments": {
                "self": [],
                "func": []
            }
        },
        "RollingGroupby.count": {
            "name": "count",
            "location": 728,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RollingGroupby.sum": {
            "name": "sum",
            "location": 782,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RollingGroupby.min": {
            "name": "min",
            "location": 836,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RollingGroupby.max": {
            "name": "max",
            "location": 890,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RollingGroupby.mean": {
            "name": "mean",
            "location": 944,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RollingGroupby.std": {
            "name": "std",
            "location": 998,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RollingGroupby.var": {
            "name": "var",
            "location": 1017,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Expanding.__init__": {
            "name": "__init__",
            "location": 1038,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "kdf_or_kser": [],
                "min_periods": [
                    "int"
                ]
            }
        },
        "Expanding.__getattr__": {
            "name": "__getattr__",
            "location": 1055,
            "return": [],
            "arguments": {
                "self": [],
                "item": []
            }
        },
        "Expanding.__repr__": {
            "name": "__repr__",
            "location": 1065,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Expanding.count": {
            "name": "count",
            "location": 1070,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Expanding.sum": {
            "name": "sum",
            "location": 1118,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Expanding.min": {
            "name": "min",
            "location": 1180,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Expanding.max": {
            "name": "max",
            "location": 1217,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Expanding.mean": {
            "name": "mean",
            "location": 1253,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Expanding.std": {
            "name": "std",
            "location": 1297,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Expanding.var": {
            "name": "var",
            "location": 1347,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ExpandingGroupby.__init__": {
            "name": "__init__",
            "location": 1399,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "groupby": [],
                "min_periods": [
                    "int"
                ]
            }
        },
        "ExpandingGroupby.__getattr__": {
            "name": "__getattr__",
            "location": 1421,
            "return": [],
            "arguments": {
                "self": [],
                "item": []
            }
        },
        "ExpandingGroupby.count": {
            "name": "count",
            "location": 1432,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ExpandingGroupby.sum": {
            "name": "sum",
            "location": 1486,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ExpandingGroupby.min": {
            "name": "min",
            "location": 1540,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ExpandingGroupby.max": {
            "name": "max",
            "location": 1594,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ExpandingGroupby.mean": {
            "name": "mean",
            "location": 1647,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ExpandingGroupby.std": {
            "name": "std",
            "location": 1701,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ExpandingGroupby.var": {
            "name": "var",
            "location": 1721,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RollingAndExpanding.count.count": {
            "name": "count",
            "location": 61,
            "return": [],
            "arguments": {
                "scol": []
            }
        },
        "RollingAndExpanding.sum.sum": {
            "name": "sum",
            "location": 67,
            "return": [],
            "arguments": {
                "scol": []
            }
        },
        "RollingAndExpanding.min.min": {
            "name": "min",
            "location": 76,
            "return": [],
            "arguments": {
                "scol": []
            }
        },
        "RollingAndExpanding.max.max": {
            "name": "max",
            "location": 85,
            "return": [],
            "arguments": {
                "scol": []
            }
        },
        "RollingAndExpanding.mean.mean": {
            "name": "mean",
            "location": 94,
            "return": [],
            "arguments": {
                "scol": []
            }
        },
        "RollingAndExpanding.std.std": {
            "name": "std",
            "location": 103,
            "return": [],
            "arguments": {
                "scol": []
            }
        },
        "RollingAndExpanding.var.var": {
            "name": "var",
            "location": 112,
            "return": [],
            "arguments": {
                "scol": []
            }
        },
        "Expanding.count.count": {
            "name": "count",
            "location": 1110,
            "return": [],
            "arguments": {
                "scol": []
            }
        }
    },
    "koalas-master/databricks/koalas/__init__.py": {
        "assert_python_version": {
            "name": "assert_python_version",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "assert_pyspark_version": {
            "name": "assert_pyspark_version",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "_auto_patch_spark": {
            "name": "_auto_patch_spark",
            "location": 174,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "_auto_patch_pandas": {
            "name": "_auto_patch_pandas",
            "location": 207,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "koalas-master/databricks/koalas/indexes/base.py": {
        "Index.__new__": {
            "name": "__new__",
            "location": 121,
            "return": [
                "Index"
            ],
            "arguments": {
                "cls": [],
                "data": [
                    "None"
                ],
                "dtype": [
                    "None"
                ],
                "copy": [
                    "bool"
                ],
                "name": [
                    "None"
                ],
                "tupleize_cols": [
                    "bool"
                ]
            }
        },
        "Index._new_instance": {
            "name": "_new_instance",
            "location": 157,
            "return": [],
            "arguments": {
                "anchor": []
            }
        },
        "Index._kdf": {
            "name": "_kdf",
            "location": 186,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Index._internal": {
            "name": "_internal",
            "location": 190,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Index._column_label": {
            "name": "_column_label",
            "location": 200,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Index._with_new_scol": {
            "name": "_with_new_scol",
            "location": 203,
            "return": [],
            "arguments": {
                "self": [],
                "scol": []
            }
        },
        "Index._summary": {
            "name": "_summary",
            "location": 222,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "None"
                ]
            }
        },
        "Index.size": {
            "name": "size",
            "location": 253,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Index.shape": {
            "name": "shape",
            "location": 271,
            "return": [
                "tuple[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Index.identical": {
            "name": "identical",
            "location": 294,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Index.equals": {
            "name": "equals",
            "location": 348,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Index.transpose": {
            "name": "transpose",
            "location": 411,
            "return": [
                "Index"
            ],
            "arguments": {
                "self": []
            }
        },
        "Index._to_internal_pandas": {
            "name": "_to_internal_pandas",
            "location": 443,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Index.to_pandas": {
            "name": "to_pandas",
            "location": 451,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Index.toPandas": {
            "name": "toPandas",
            "location": 468,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Index.to_numpy": {
            "name": "to_numpy",
            "location": 477,
            "return": [],
            "arguments": {
                "self": [],
                "dtype": [
                    "None"
                ],
                "copy": [
                    "bool"
                ]
            }
        },
        "Index.values": {
            "name": "values",
            "location": 511,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Index.asi8": {
            "name": "asi8",
            "location": 535,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Index.spark_type": {
            "name": "spark_type",
            "location": 568,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Index.has_duplicates": {
            "name": "has_duplicates",
            "location": 578,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Index.is_unique": {
            "name": "is_unique",
            "location": 608,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Index.name": {
            "name": "name",
            "location": 640,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "Index.names": {
            "name": "names",
            "location": 652,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "names": []
            }
        },
        "Index.nlevels": {
            "name": "nlevels",
            "location": 667,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Index.rename": {
            "name": "rename",
            "location": 683,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [],
                "inplace": [
                    "bool"
                ]
            }
        },
        "Index._verify_for_rename": {
            "name": "_verify_for_rename",
            "location": 748,
            "return": [
                "list",
                "list[tuple]"
            ],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "Index.fillna": {
            "name": "fillna",
            "location": 757,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "Index.drop_duplicates": {
            "name": "drop_duplicates",
            "location": 787,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Index.to_series": {
            "name": "to_series",
            "location": 822,
            "return": [],
            "arguments": {
                "self": [],
                "name": [
                    "None"
                ]
            }
        },
        "Index.to_frame": {
            "name": "to_frame",
            "location": 864,
            "return": [],
            "arguments": {
                "self": [],
                "index": [
                    "bool"
                ],
                "name": [
                    "None"
                ]
            }
        },
        "Index._to_frame": {
            "name": "_to_frame",
            "location": 926,
            "return": [
                "DataFrame"
            ],
            "arguments": {
                "self": [],
                "index": [],
                "names": []
            }
        },
        "Index.is_boolean": {
            "name": "is_boolean",
            "location": 947,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Index.is_categorical": {
            "name": "is_categorical",
            "location": 958,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Index.is_floating": {
            "name": "is_floating",
            "location": 969,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Index.is_integer": {
            "name": "is_integer",
            "location": 980,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Index.is_interval": {
            "name": "is_interval",
            "location": 991,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Index.is_numeric": {
            "name": "is_numeric",
            "location": 1002,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Index.is_object": {
            "name": "is_object",
            "location": 1013,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Index.is_type_compatible": {
            "name": "is_type_compatible",
            "location": 1024,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "kind": []
            }
        },
        "Index.dropna": {
            "name": "dropna",
            "location": 1042,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Index.unique": {
            "name": "unique",
            "location": 1102,
            "return": [],
            "arguments": {
                "self": [],
                "level": [
                    "None"
                ]
            }
        },
        "Index.drop": {
            "name": "drop",
            "location": 1153,
            "return": [],
            "arguments": {
                "self": [],
                "labels": []
            }
        },
        "Index._validate_index_level": {
            "name": "_validate_index_level",
            "location": 1190,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "level": []
            }
        },
        "Index.get_level_values": {
            "name": "get_level_values",
            "location": 1209,
            "return": [
                "Index"
            ],
            "arguments": {
                "self": [],
                "level": []
            }
        },
        "Index.copy": {
            "name": "copy",
            "location": 1225,
            "return": [],
            "arguments": {
                "self": [],
                "name": [
                    "None"
                ],
                "deep": [
                    "None"
                ]
            }
        },
        "Index.droplevel": {
            "name": "droplevel",
            "location": 1264,
            "return": [],
            "arguments": {
                "self": [],
                "level": []
            }
        },
        "Index.symmetric_difference": {
            "name": "symmetric_difference",
            "location": 1355,
            "return": [],
            "arguments": {
                "self": [],
                "other": [],
                "result_name": [
                    "None"
                ],
                "sort": [
                    "None"
                ]
            }
        },
        "Index.sort_values": {
            "name": "sort_values",
            "location": 1431,
            "return": [],
            "arguments": {
                "self": [],
                "ascending": [
                    "bool"
                ]
            }
        },
        "Index.sort": {
            "name": "sort",
            "location": 1506,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Index.min": {
            "name": "min",
            "location": 1512,
            "return": [
                "tuple"
            ],
            "arguments": {
                "self": []
            }
        },
        "Index.max": {
            "name": "max",
            "location": 1553,
            "return": [
                "tuple"
            ],
            "arguments": {
                "self": []
            }
        },
        "Index.delete": {
            "name": "delete",
            "location": 1594,
            "return": [],
            "arguments": {
                "self": [],
                "loc": []
            }
        },
        "Index.append": {
            "name": "append",
            "location": 1708,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Index.argmax": {
            "name": "argmax",
            "location": 1771,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Index.argmin": {
            "name": "argmin",
            "location": 1819,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Index.set_names": {
            "name": "set_names",
            "location": 1853,
            "return": [],
            "arguments": {
                "self": [],
                "names": [],
                "level": [
                    "None"
                ],
                "inplace": [
                    "bool"
                ]
            }
        },
        "Index.difference": {
            "name": "difference",
            "location": 1915,
            "return": [],
            "arguments": {
                "self": [],
                "other": [],
                "sort": [
                    "None"
                ]
            }
        },
        "Index.is_all_dates": {
            "name": "is_all_dates",
            "location": 2014,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Index.repeat": {
            "name": "repeat",
            "location": 2047,
            "return": [],
            "arguments": {
                "self": [],
                "repeats": []
            }
        },
        "Index.asof": {
            "name": "asof",
            "location": 2110,
            "return": [],
            "arguments": {
                "self": [],
                "label": []
            }
        },
        "Index.union": {
            "name": "union",
            "location": 2167,
            "return": [],
            "arguments": {
                "self": [],
                "other": [],
                "sort": [
                    "None"
                ]
            }
        },
        "Index.holds_integer": {
            "name": "holds_integer",
            "location": 2245,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Index.intersection": {
            "name": "intersection",
            "location": 2278,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Index.item": {
            "name": "item",
            "location": 2335,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Index.insert": {
            "name": "insert",
            "location": 2357,
            "return": [],
            "arguments": {
                "self": [],
                "loc": [],
                "item": []
            }
        },
        "Index.view": {
            "name": "view",
            "location": 2398,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Index.to_list": {
            "name": "to_list",
            "location": 2404,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Index.inferred_type": {
            "name": "inferred_type",
            "location": 2435,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Index.__getattr__": {
            "name": "__getattr__",
            "location": 2456,
            "return": [],
            "arguments": {
                "self": [],
                "item": []
            }
        },
        "Index.__repr__": {
            "name": "__repr__",
            "location": 2465,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Index.__iter__": {
            "name": "__iter__",
            "location": 2480,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Index.__xor__": {
            "name": "__xor__",
            "location": 2483,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Index.__bool__": {
            "name": "__bool__",
            "location": 2486,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Index.delete.is_len_exceeded": {
            "name": "is_len_exceeded",
            "location": 1632,
            "return": [
                "bool"
            ],
            "arguments": {
                "index": []
            }
        }
    },
    "koalas-master/databricks/koalas/indexes/category.py": {
        "CategoricalIndex.__new__": {
            "name": "__new__",
            "location": 99,
            "return": [
                "Index"
            ],
            "arguments": {
                "cls": [],
                "data": [
                    "None"
                ],
                "categories": [
                    "None"
                ],
                "ordered": [
                    "None"
                ],
                "dtype": [
                    "None"
                ],
                "copy": [
                    "bool"
                ],
                "name": [
                    "None"
                ]
            }
        },
        "CategoricalIndex.codes": {
            "name": "codes",
            "location": 115,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CategoricalIndex.categories": {
            "name": "categories",
            "location": 160,
            "return": [],
            "arguments": {
                "self": [],
                "categories": []
            }
        },
        "CategoricalIndex.ordered": {
            "name": "ordered",
            "location": 164,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CategoricalIndex.__getattr__": {
            "name": "__getattr__",
            "location": 180,
            "return": [],
            "arguments": {
                "self": [],
                "item": []
            }
        }
    },
    "koalas-master/databricks/koalas/indexes/datetimes.py": {
        "disallow_nanoseconds": {
            "name": "disallow_nanoseconds",
            "location": 739,
            "return": [
                "None"
            ],
            "arguments": {
                "freq": []
            }
        },
        "DatetimeIndex.__new__": {
            "name": "__new__",
            "location": 97,
            "return": [
                "Index"
            ],
            "arguments": {
                "cls": [],
                "data": [
                    "None"
                ],
                "freq": [],
                "normalize": [
                    "bool"
                ],
                "closed": [
                    "None"
                ],
                "ambiguous": [
                    "typing.Text"
                ],
                "dayfirst": [
                    "bool"
                ],
                "yearfirst": [
                    "bool"
                ],
                "dtype": [
                    "None"
                ],
                "copy": [
                    "bool"
                ],
                "name": [
                    "None"
                ]
            }
        },
        "DatetimeIndex.__getattr__": {
            "name": "__getattr__",
            "location": 133,
            "return": [],
            "arguments": {
                "self": [],
                "item": []
            }
        },
        "DatetimeIndex.year": {
            "name": "year",
            "location": 144,
            "return": [
                "Index"
            ],
            "arguments": {
                "self": []
            }
        },
        "DatetimeIndex.month": {
            "name": "month",
            "location": 151,
            "return": [
                "Index"
            ],
            "arguments": {
                "self": []
            }
        },
        "DatetimeIndex.day": {
            "name": "day",
            "location": 158,
            "return": [
                "Index"
            ],
            "arguments": {
                "self": []
            }
        },
        "DatetimeIndex.hour": {
            "name": "hour",
            "location": 165,
            "return": [
                "Index"
            ],
            "arguments": {
                "self": []
            }
        },
        "DatetimeIndex.minute": {
            "name": "minute",
            "location": 172,
            "return": [
                "Index"
            ],
            "arguments": {
                "self": []
            }
        },
        "DatetimeIndex.second": {
            "name": "second",
            "location": 179,
            "return": [
                "Index"
            ],
            "arguments": {
                "self": []
            }
        },
        "DatetimeIndex.microsecond": {
            "name": "microsecond",
            "location": 186,
            "return": [
                "Index"
            ],
            "arguments": {
                "self": []
            }
        },
        "DatetimeIndex.week": {
            "name": "week",
            "location": 193,
            "return": [
                "Index"
            ],
            "arguments": {
                "self": []
            }
        },
        "DatetimeIndex.weekofyear": {
            "name": "weekofyear",
            "location": 200,
            "return": [
                "Index"
            ],
            "arguments": {
                "self": []
            }
        },
        "DatetimeIndex.dayofweek": {
            "name": "dayofweek",
            "location": 206,
            "return": [
                "Index"
            ],
            "arguments": {
                "self": []
            }
        },
        "DatetimeIndex.day_of_week": {
            "name": "day_of_week",
            "location": 234,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DatetimeIndex.weekday": {
            "name": "weekday",
            "location": 240,
            "return": [
                "Index"
            ],
            "arguments": {
                "self": []
            }
        },
        "DatetimeIndex.dayofyear": {
            "name": "dayofyear",
            "location": 246,
            "return": [
                "Index"
            ],
            "arguments": {
                "self": []
            }
        },
        "DatetimeIndex.day_of_year": {
            "name": "day_of_year",
            "location": 253,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DatetimeIndex.quarter": {
            "name": "quarter",
            "location": 259,
            "return": [
                "Index"
            ],
            "arguments": {
                "self": []
            }
        },
        "DatetimeIndex.is_month_start": {
            "name": "is_month_start",
            "location": 266,
            "return": [
                "Index"
            ],
            "arguments": {
                "self": []
            }
        },
        "DatetimeIndex.is_month_end": {
            "name": "is_month_end",
            "location": 289,
            "return": [
                "Index"
            ],
            "arguments": {
                "self": []
            }
        },
        "DatetimeIndex.is_quarter_start": {
            "name": "is_quarter_start",
            "location": 312,
            "return": [
                "Index"
            ],
            "arguments": {
                "self": []
            }
        },
        "DatetimeIndex.is_quarter_end": {
            "name": "is_quarter_end",
            "location": 335,
            "return": [
                "Index"
            ],
            "arguments": {
                "self": []
            }
        },
        "DatetimeIndex.is_year_start": {
            "name": "is_year_start",
            "location": 358,
            "return": [
                "Index"
            ],
            "arguments": {
                "self": []
            }
        },
        "DatetimeIndex.is_year_end": {
            "name": "is_year_end",
            "location": 380,
            "return": [
                "Index"
            ],
            "arguments": {
                "self": []
            }
        },
        "DatetimeIndex.is_leap_year": {
            "name": "is_leap_year",
            "location": 402,
            "return": [
                "Index"
            ],
            "arguments": {
                "self": []
            }
        },
        "DatetimeIndex.daysinmonth": {
            "name": "daysinmonth",
            "location": 425,
            "return": [
                "Index"
            ],
            "arguments": {
                "self": []
            }
        },
        "DatetimeIndex.days_in_month": {
            "name": "days_in_month",
            "location": 432,
            "return": [
                "Index"
            ],
            "arguments": {
                "self": []
            }
        },
        "DatetimeIndex.ceil": {
            "name": "ceil",
            "location": 438,
            "return": [
                "DatetimeIndex"
            ],
            "arguments": {
                "self": [],
                "freq": []
            }
        },
        "DatetimeIndex.floor": {
            "name": "floor",
            "location": 468,
            "return": [
                "DatetimeIndex"
            ],
            "arguments": {
                "self": [],
                "freq": []
            }
        },
        "DatetimeIndex.round": {
            "name": "round",
            "location": 498,
            "return": [
                "DatetimeIndex"
            ],
            "arguments": {
                "self": [],
                "freq": []
            }
        },
        "DatetimeIndex.month_name": {
            "name": "month_name",
            "location": 528,
            "return": [
                "Index"
            ],
            "arguments": {
                "self": [],
                "locale": [
                    "None"
                ]
            }
        },
        "DatetimeIndex.day_name": {
            "name": "day_name",
            "location": 551,
            "return": [
                "Index"
            ],
            "arguments": {
                "self": [],
                "locale": [
                    "None"
                ]
            }
        },
        "DatetimeIndex.normalize": {
            "name": "normalize",
            "location": 574,
            "return": [
                "DatetimeIndex"
            ],
            "arguments": {
                "self": []
            }
        },
        "DatetimeIndex.strftime": {
            "name": "strftime",
            "location": 604,
            "return": [
                "Index"
            ],
            "arguments": {
                "self": [],
                "date_format": []
            }
        },
        "DatetimeIndex.indexer_between_time": {
            "name": "indexer_between_time",
            "location": 639,
            "return": [
                "Index"
            ],
            "arguments": {
                "self": [],
                "start_time": [],
                "end_time": [],
                "include_start": [
                    "bool"
                ],
                "include_end": [
                    "bool"
                ]
            }
        },
        "DatetimeIndex.indexer_at_time": {
            "name": "indexer_at_time",
            "location": 693,
            "return": [
                "Index"
            ],
            "arguments": {
                "self": [],
                "time": [],
                "asof": [
                    "bool"
                ]
            }
        },
        "DatetimeIndex.indexer_between_time.pandas_between_time": {
            "name": "pandas_between_time",
            "location": 681,
            "return": [],
            "arguments": {
                "pdf": []
            }
        },
        "DatetimeIndex.indexer_at_time.pandas_at_time": {
            "name": "pandas_at_time",
            "location": 726,
            "return": [],
            "arguments": {
                "pdf": []
            }
        }
    },
    "koalas-master/databricks/koalas/indexes/multi.py": {
        "MultiIndex.__new__": {
            "name": "__new__",
            "location": 99,
            "return": [],
            "arguments": {
                "cls": [],
                "levels": [
                    "None"
                ],
                "codes": [
                    "None"
                ],
                "sortorder": [
                    "None"
                ],
                "names": [
                    "None"
                ],
                "dtype": [
                    "None"
                ],
                "copy": [
                    "bool"
                ],
                "name": [
                    "None"
                ],
                "verify_integrity": [
                    "bool"
                ]
            }
        },
        "MultiIndex._internal": {
            "name": "_internal",
            "location": 138,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MultiIndex._column_label": {
            "name": "_column_label",
            "location": 149,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MultiIndex.__abs__": {
            "name": "__abs__",
            "location": 152,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MultiIndex._with_new_scol": {
            "name": "_with_new_scol",
            "location": 155,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "scol": []
            }
        },
        "MultiIndex._align_and_column_op": {
            "name": "_align_and_column_op",
            "location": 158,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "f": []
            }
        },
        "MultiIndex.any": {
            "name": "any",
            "location": 161,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MultiIndex.all": {
            "name": "all",
            "location": 164,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MultiIndex.from_tuples": {
            "name": "from_tuples",
            "location": 168,
            "return": [],
            "arguments": {
                "tuples": [],
                "sortorder": [
                    "None"
                ],
                "names": [
                    "None"
                ]
            }
        },
        "MultiIndex.from_arrays": {
            "name": "from_arrays",
            "location": 205,
            "return": [],
            "arguments": {
                "arrays": [],
                "sortorder": [
                    "None"
                ],
                "names": [
                    "None"
                ]
            }
        },
        "MultiIndex.from_product": {
            "name": "from_product",
            "location": 242,
            "return": [],
            "arguments": {
                "iterables": [],
                "sortorder": [
                    "None"
                ],
                "names": [
                    "None"
                ]
            }
        },
        "MultiIndex.from_frame": {
            "name": "from_frame",
            "location": 287,
            "return": [],
            "arguments": {
                "df": [],
                "names": [
                    "None"
                ]
            }
        },
        "MultiIndex.name": {
            "name": "name",
            "location": 363,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "MultiIndex._verify_for_rename": {
            "name": "_verify_for_rename",
            "location": 366,
            "return": [
                "list[tuple]"
            ],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "MultiIndex.swaplevel": {
            "name": "swaplevel",
            "location": 380,
            "return": [],
            "arguments": {
                "self": [],
                "i": [
                    "int"
                ],
                "j": [
                    "int"
                ]
            }
        },
        "MultiIndex.levshape": {
            "name": "levshape",
            "location": 451,
            "return": [
                "tuple"
            ],
            "arguments": {
                "self": []
            }
        },
        "MultiIndex._comparator_for_monotonic_increasing": {
            "name": "_comparator_for_monotonic_increasing",
            "location": 473,
            "return": [],
            "arguments": {
                "data_type": []
            }
        },
        "MultiIndex._is_monotonic": {
            "name": "_is_monotonic",
            "location": 476,
            "return": [],
            "arguments": {
                "self": [],
                "order": []
            }
        },
        "MultiIndex._is_monotonic_increasing": {
            "name": "_is_monotonic_increasing",
            "location": 482,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MultiIndex._comparator_for_monotonic_decreasing": {
            "name": "_comparator_for_monotonic_decreasing",
            "location": 521,
            "return": [],
            "arguments": {
                "data_type": []
            }
        },
        "MultiIndex._is_monotonic_decreasing": {
            "name": "_is_monotonic_decreasing",
            "location": 524,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MultiIndex.to_frame": {
            "name": "to_frame",
            "location": 562,
            "return": [],
            "arguments": {
                "self": [],
                "index": [
                    "bool"
                ],
                "name": [
                    "None"
                ]
            }
        },
        "MultiIndex.to_pandas": {
            "name": "to_pandas",
            "location": 635,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MultiIndex.toPandas": {
            "name": "toPandas",
            "location": 659,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MultiIndex.nunique": {
            "name": "nunique",
            "location": 669,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dropna": [
                    "bool"
                ]
            }
        },
        "MultiIndex.copy": {
            "name": "copy",
            "location": 673,
            "return": [],
            "arguments": {
                "self": [],
                "deep": [
                    "None"
                ]
            }
        },
        "MultiIndex.symmetric_difference": {
            "name": "symmetric_difference",
            "location": 705,
            "return": [],
            "arguments": {
                "self": [],
                "other": [],
                "result_name": [
                    "None"
                ],
                "sort": [
                    "None"
                ]
            }
        },
        "MultiIndex.drop": {
            "name": "drop",
            "location": 798,
            "return": [],
            "arguments": {
                "self": [],
                "codes": [],
                "level": [
                    "None"
                ]
            }
        },
        "MultiIndex.value_counts": {
            "name": "value_counts",
            "location": 867,
            "return": [],
            "arguments": {
                "self": [],
                "normalize": [
                    "bool"
                ],
                "sort": [
                    "bool"
                ],
                "ascending": [
                    "bool"
                ],
                "bins": [
                    "None"
                ],
                "dropna": [
                    "bool"
                ]
            }
        },
        "MultiIndex.argmax": {
            "name": "argmax",
            "location": 886,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MultiIndex.argmin": {
            "name": "argmin",
            "location": 889,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MultiIndex.asof": {
            "name": "asof",
            "location": 892,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "label": []
            }
        },
        "MultiIndex.is_all_dates": {
            "name": "is_all_dates",
            "location": 898,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "MultiIndex.__getattr__": {
            "name": "__getattr__",
            "location": 919,
            "return": [],
            "arguments": {
                "self": [],
                "item": []
            }
        },
        "MultiIndex._get_level_number": {
            "name": "_get_level_number",
            "location": 928,
            "return": [
                "None",
                "int"
            ],
            "arguments": {
                "self": [],
                "level": []
            }
        },
        "MultiIndex.get_level_values": {
            "name": "get_level_values",
            "location": 957,
            "return": [],
            "arguments": {
                "self": [],
                "level": []
            }
        },
        "MultiIndex.insert": {
            "name": "insert",
            "location": 1004,
            "return": [],
            "arguments": {
                "self": [],
                "loc": [],
                "item": []
            }
        },
        "MultiIndex.item": {
            "name": "item",
            "location": 1068,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MultiIndex.intersection": {
            "name": "intersection",
            "location": 1090,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "MultiIndex.hasnans": {
            "name": "hasnans",
            "location": 1144,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MultiIndex.inferred_type": {
            "name": "inferred_type",
            "location": 1148,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "MultiIndex.asi8": {
            "name": "asi8",
            "location": 1156,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MultiIndex.factorize": {
            "name": "factorize",
            "location": 1163,
            "return": [],
            "arguments": {
                "self": [],
                "sort": [
                    "bool"
                ],
                "na_sentinel": [
                    "int"
                ]
            }
        },
        "MultiIndex.__iter__": {
            "name": "__iter__",
            "location": 1168,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "koalas-master/databricks/koalas/indexes/numeric.py": {
        "Int64Index.__new__": {
            "name": "__new__",
            "location": 83,
            "return": [
                "Index"
            ],
            "arguments": {
                "cls": [],
                "data": [
                    "None"
                ],
                "dtype": [
                    "None"
                ],
                "copy": [
                    "bool"
                ],
                "name": [
                    "None"
                ]
            }
        },
        "Float64Index.__new__": {
            "name": "__new__",
            "location": 137,
            "return": [
                "Index"
            ],
            "arguments": {
                "cls": [],
                "data": [
                    "None"
                ],
                "dtype": [
                    "None"
                ],
                "copy": [
                    "bool"
                ],
                "name": [
                    "None"
                ]
            }
        }
    },
    "koalas-master/databricks/koalas/indexes/__init__.py": {},
    "koalas-master/databricks/koalas/missing/common.py": {},
    "koalas-master/databricks/koalas/missing/frame.py": {
        "_unsupported_function": {
            "name": "_unsupported_function",
            "location": 23,
            "return": [],
            "arguments": {
                "method_name": [],
                "deprecated": [
                    "bool"
                ],
                "reason": [
                    "typing.Text"
                ]
            }
        },
        "_unsupported_property": {
            "name": "_unsupported_property",
            "location": 29,
            "return": [],
            "arguments": {
                "property_name": [],
                "deprecated": [
                    "bool"
                ],
                "reason": [
                    "typing.Text"
                ]
            }
        }
    },
    "koalas-master/databricks/koalas/missing/groupby.py": {
        "_unsupported_function": {
            "name": "_unsupported_function",
            "location": 20,
            "return": [],
            "arguments": {
                "method_name": [],
                "deprecated": [
                    "bool"
                ],
                "reason": [
                    "typing.Text"
                ]
            }
        },
        "_unsupported_property": {
            "name": "_unsupported_property",
            "location": 29,
            "return": [],
            "arguments": {
                "property_name": [],
                "deprecated": [
                    "bool"
                ],
                "reason": [
                    "typing.Text"
                ]
            }
        }
    },
    "koalas-master/databricks/koalas/missing/indexes.py": {
        "_unsupported_function": {
            "name": "_unsupported_function",
            "location": 23,
            "return": [],
            "arguments": {
                "method_name": [],
                "deprecated": [
                    "bool"
                ],
                "reason": [
                    "typing.Text"
                ],
                "cls": [
                    "typing.Text"
                ]
            }
        },
        "_unsupported_property": {
            "name": "_unsupported_property",
            "location": 32,
            "return": [],
            "arguments": {
                "property_name": [],
                "deprecated": [
                    "bool"
                ],
                "reason": [
                    "typing.Text"
                ],
                "cls": [
                    "typing.Text"
                ]
            }
        }
    },
    "koalas-master/databricks/koalas/missing/series.py": {
        "_unsupported_function": {
            "name": "_unsupported_function",
            "location": 23,
            "return": [],
            "arguments": {
                "method_name": [],
                "deprecated": [
                    "bool"
                ],
                "reason": [
                    "typing.Text"
                ]
            }
        },
        "_unsupported_property": {
            "name": "_unsupported_property",
            "location": 29,
            "return": [],
            "arguments": {
                "property_name": [],
                "deprecated": [
                    "bool"
                ],
                "reason": [
                    "typing.Text"
                ]
            }
        }
    },
    "koalas-master/databricks/koalas/missing/window.py": {
        "_unsupported_function_expanding": {
            "name": "_unsupported_function_expanding",
            "location": 20,
            "return": [],
            "arguments": {
                "method_name": [],
                "deprecated": [
                    "bool"
                ],
                "reason": [
                    "typing.Text"
                ]
            }
        },
        "_unsupported_property_expanding": {
            "name": "_unsupported_property_expanding",
            "location": 29,
            "return": [],
            "arguments": {
                "property_name": [],
                "deprecated": [
                    "bool"
                ],
                "reason": [
                    "typing.Text"
                ]
            }
        },
        "_unsupported_function_rolling": {
            "name": "_unsupported_function_rolling",
            "location": 38,
            "return": [],
            "arguments": {
                "method_name": [],
                "deprecated": [
                    "bool"
                ],
                "reason": [
                    "typing.Text"
                ]
            }
        },
        "_unsupported_property_rolling": {
            "name": "_unsupported_property_rolling",
            "location": 47,
            "return": [],
            "arguments": {
                "property_name": [],
                "deprecated": [
                    "bool"
                ],
                "reason": [
                    "typing.Text"
                ]
            }
        }
    },
    "koalas-master/databricks/koalas/missing/__init__.py": {
        "unsupported_function": {
            "name": "unsupported_function",
            "location": 20,
            "return": [],
            "arguments": {
                "class_name": [],
                "method_name": [],
                "deprecated": [
                    "bool"
                ],
                "reason": [
                    "typing.Text"
                ]
            }
        },
        "unsupported_property": {
            "name": "unsupported_property",
            "location": 34,
            "return": [],
            "arguments": {
                "class_name": [],
                "property_name": [],
                "deprecated": [
                    "bool"
                ],
                "reason": [
                    "typing.Text"
                ]
            }
        },
        "unsupported_function.unsupported_function": {
            "name": "unsupported_function",
            "location": 21,
            "return": [],
            "arguments": {}
        },
        "unsupported_function.deprecated_function": {
            "name": "deprecated_function",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "unsupported_property.unsupported_property": {
            "name": "unsupported_property",
            "location": 36,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "unsupported_property.deprecated_property": {
            "name": "deprecated_property",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "koalas-master/databricks/koalas/plot/core.py": {
        "TopNPlotBase.get_top_n": {
            "name": "get_top_n",
            "location": 33,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "TopNPlotBase.set_result_text": {
            "name": "set_result_text",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ax": []
            }
        },
        "SampledPlotBase.get_sampled": {
            "name": "get_sampled",
            "location": 67,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "SampledPlotBase.set_result_text": {
            "name": "set_result_text",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ax": []
            }
        },
        "HistogramPlotBase.prepare_hist_data": {
            "name": "prepare_hist_data",
            "location": 101,
            "return": [
                "tuple"
            ],
            "arguments": {
                "data": [],
                "bins": []
            }
        },
        "HistogramPlotBase.get_bins": {
            "name": "get_bins",
            "location": 125,
            "return": [],
            "arguments": {
                "sdf": [],
                "bins": []
            }
        },
        "HistogramPlotBase.compute_hist": {
            "name": "compute_hist",
            "location": 142,
            "return": [
                "list"
            ],
            "arguments": {
                "kdf": [],
                "bins": []
            }
        },
        "BoxPlotBase.compute_stats": {
            "name": "compute_stats",
            "location": 268,
            "return": [
                "tuple[typing.Union[dict[typing.Text, ],tuple]]"
            ],
            "arguments": {
                "data": [],
                "colname": [],
                "whis": [],
                "precision": []
            }
        },
        "BoxPlotBase.outliers": {
            "name": "outliers",
            "location": 303,
            "return": [],
            "arguments": {
                "data": [],
                "colname": [],
                "lfence": [],
                "ufence": []
            }
        },
        "BoxPlotBase.calc_whiskers": {
            "name": "calc_whiskers",
            "location": 312,
            "return": [],
            "arguments": {
                "colname": [],
                "outliers": []
            }
        },
        "BoxPlotBase.get_fliers": {
            "name": "get_fliers",
            "location": 322,
            "return": [],
            "arguments": {
                "colname": [],
                "outliers": [],
                "min_val": []
            }
        },
        "KdePlotBase.prepare_kde_data": {
            "name": "prepare_kde_data",
            "location": 343,
            "return": [],
            "arguments": {
                "data": []
            }
        },
        "KdePlotBase.get_ind": {
            "name": "get_ind",
            "location": 363,
            "return": [],
            "arguments": {
                "sdf": [],
                "ind": []
            }
        },
        "KdePlotBase.compute_kde": {
            "name": "compute_kde",
            "location": 384,
            "return": [],
            "arguments": {
                "sdf": [],
                "bw_method": [
                    "None"
                ],
                "ind": [
                    "None"
                ]
            }
        },
        "KoalasPlotAccessor.__init__": {
            "name": "__init__",
            "location": 423,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "KoalasPlotAccessor._find_backend": {
            "name": "_find_backend",
            "location": 427,
            "return": [],
            "arguments": {
                "backend": []
            }
        },
        "KoalasPlotAccessor._get_plot_backend": {
            "name": "_get_plot_backend",
            "location": 453,
            "return": [],
            "arguments": {
                "backend": [
                    "None"
                ]
            }
        },
        "KoalasPlotAccessor.__call__": {
            "name": "__call__",
            "location": 490,
            "return": [],
            "arguments": {
                "self": [],
                "kind": [
                    "typing.Text"
                ],
                "backend": [
                    "None"
                ]
            }
        },
        "KoalasPlotAccessor.line": {
            "name": "line",
            "location": 508,
            "return": [],
            "arguments": {
                "self": [],
                "x": [
                    "None"
                ],
                "y": [
                    "None"
                ]
            }
        },
        "KoalasPlotAccessor.bar": {
            "name": "bar",
            "location": 574,
            "return": [],
            "arguments": {
                "self": [],
                "x": [
                    "None"
                ],
                "y": [
                    "None"
                ]
            }
        },
        "KoalasPlotAccessor.barh": {
            "name": "barh",
            "location": 676,
            "return": [],
            "arguments": {
                "self": [],
                "x": [
                    "None"
                ],
                "y": [
                    "None"
                ]
            }
        },
        "KoalasPlotAccessor.box": {
            "name": "box",
            "location": 766,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "KoalasPlotAccessor.hist": {
            "name": "hist",
            "location": 821,
            "return": [],
            "arguments": {
                "self": [],
                "bins": [
                    "int"
                ]
            }
        },
        "KoalasPlotAccessor.kde": {
            "name": "kde",
            "location": 871,
            "return": [],
            "arguments": {
                "self": [],
                "bw_method": [
                    "None"
                ],
                "ind": [
                    "None"
                ]
            }
        },
        "KoalasPlotAccessor.area": {
            "name": "area",
            "location": 948,
            "return": [],
            "arguments": {
                "self": [],
                "x": [
                    "None"
                ],
                "y": [
                    "None"
                ]
            }
        },
        "KoalasPlotAccessor.pie": {
            "name": "pie",
            "location": 1008,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "KoalasPlotAccessor.scatter": {
            "name": "scatter",
            "location": 1068,
            "return": [],
            "arguments": {
                "self": [],
                "x": [],
                "y": []
            }
        },
        "KoalasPlotAccessor.hexbin": {
            "name": "hexbin",
            "location": 1132,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "KdePlotBase.get_ind.calc_min_max": {
            "name": "calc_min_max",
            "location": 364,
            "return": [],
            "arguments": {}
        }
    },
    "koalas-master/databricks/koalas/plot/matplotlib.py": {
        "plot_koalas": {
            "name": "plot_koalas",
            "location": 525,
            "return": [],
            "arguments": {
                "data": [],
                "kind": []
            }
        },
        "plot_series": {
            "name": "plot_series",
            "location": 541,
            "return": [],
            "arguments": {
                "data": [],
                "kind": [
                    "typing.Text"
                ],
                "ax": [
                    "None"
                ],
                "figsize": [
                    "None"
                ],
                "use_index": [
                    "bool"
                ],
                "title": [
                    "None"
                ],
                "grid": [
                    "None"
                ],
                "legend": [
                    "bool"
                ],
                "style": [
                    "None"
                ],
                "logx": [
                    "bool"
                ],
                "logy": [
                    "bool"
                ],
                "loglog": [
                    "bool"
                ],
                "xticks": [
                    "None"
                ],
                "yticks": [
                    "None"
                ],
                "xlim": [
                    "None"
                ],
                "ylim": [
                    "None"
                ],
                "rot": [
                    "None"
                ],
                "fontsize": [
                    "None"
                ],
                "colormap": [
                    "None"
                ],
                "table": [
                    "bool"
                ],
                "yerr": [
                    "None"
                ],
                "xerr": [
                    "None"
                ],
                "label": [
                    "None"
                ],
                "secondary_y": [
                    "bool"
                ]
            }
        },
        "plot_frame": {
            "name": "plot_frame",
            "location": 698,
            "return": [],
            "arguments": {
                "data": [],
                "x": [
                    "None"
                ],
                "y": [
                    "None"
                ],
                "kind": [
                    "typing.Text"
                ],
                "ax": [
                    "None"
                ],
                "subplots": [
                    "None"
                ],
                "sharex": [
                    "None"
                ],
                "sharey": [
                    "bool"
                ],
                "layout": [
                    "None"
                ],
                "figsize": [
                    "None"
                ],
                "use_index": [
                    "bool"
                ],
                "title": [
                    "None"
                ],
                "grid": [
                    "None"
                ],
                "legend": [
                    "bool"
                ],
                "style": [
                    "None"
                ],
                "logx": [
                    "bool"
                ],
                "logy": [
                    "bool"
                ],
                "loglog": [
                    "bool"
                ],
                "xticks": [
                    "None"
                ],
                "yticks": [
                    "None"
                ],
                "xlim": [
                    "None"
                ],
                "ylim": [
                    "None"
                ],
                "rot": [
                    "None"
                ],
                "fontsize": [
                    "None"
                ],
                "colormap": [
                    "None"
                ],
                "table": [
                    "bool"
                ],
                "yerr": [
                    "None"
                ],
                "xerr": [
                    "None"
                ],
                "secondary_y": [
                    "bool"
                ],
                "sort_columns": [
                    "bool"
                ]
            }
        },
        "_plot": {
            "name": "_plot",
            "location": 867,
            "return": [],
            "arguments": {
                "data": [],
                "x": [
                    "None"
                ],
                "y": [
                    "None"
                ],
                "subplots": [
                    "bool"
                ],
                "ax": [
                    "None"
                ],
                "kind": [
                    "typing.Text"
                ]
            }
        },
        "KoalasBarPlot.__init__": {
            "name": "__init__",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "KoalasBarPlot._plot": {
            "name": "_plot",
            "location": 72,
            "return": [],
            "arguments": {
                "self": [],
                "ax": [],
                "x": [],
                "y": [],
                "w": [],
                "start": [
                    "int"
                ],
                "log": [
                    "bool"
                ]
            }
        },
        "KoalasBoxPlot.boxplot": {
            "name": "boxplot",
            "location": 78,
            "return": [],
            "arguments": {
                "self": [],
                "ax": [],
                "bxpstats": [],
                "notch": [
                    "None"
                ],
                "sym": [
                    "None"
                ],
                "vert": [
                    "None"
                ],
                "whis": [
                    "None"
                ],
                "positions": [
                    "None"
                ],
                "widths": [
                    "None"
                ],
                "patch_artist": [
                    "None"
                ],
                "bootstrap": [
                    "None"
                ],
                "usermedians": [
                    "None"
                ],
                "conf_intervals": [
                    "None"
                ],
                "meanline": [
                    "None"
                ],
                "showmeans": [
                    "None"
                ],
                "showcaps": [
                    "None"
                ],
                "showbox": [
                    "None"
                ],
                "showfliers": [
                    "None"
                ],
                "boxprops": [
                    "None"
                ],
                "labels": [
                    "None"
                ],
                "flierprops": [
                    "None"
                ],
                "medianprops": [
                    "None"
                ],
                "meanprops": [
                    "None"
                ],
                "capprops": [
                    "None"
                ],
                "whiskerprops": [
                    "None"
                ],
                "manage_ticks": [
                    "None"
                ],
                "manage_xticks": [
                    "None"
                ],
                "autorange": [
                    "bool"
                ],
                "zorder": [
                    "None"
                ],
                "precision": [
                    "None"
                ]
            }
        },
        "KoalasBoxPlot._plot": {
            "name": "_plot",
            "location": 237,
            "return": [
                "tuple"
            ],
            "arguments": {
                "self": [],
                "ax": [],
                "bxpstats": [],
                "column_num": [
                    "None"
                ],
                "return_type": [
                    "typing.Text"
                ]
            }
        },
        "KoalasBoxPlot._compute_plot_data": {
            "name": "_compute_plot_data",
            "location": 247,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "KoalasBoxPlot._make_plot": {
            "name": "_make_plot",
            "location": 293,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "KoalasBoxPlot.rc_defaults": {
            "name": "rc_defaults",
            "location": 322,
            "return": [],
            "arguments": {
                "notch": [
                    "None"
                ],
                "vert": [
                    "None"
                ],
                "whis": [
                    "None"
                ],
                "patch_artist": [
                    "None"
                ],
                "bootstrap": [
                    "None"
                ],
                "meanline": [
                    "None"
                ],
                "showmeans": [
                    "None"
                ],
                "showcaps": [
                    "None"
                ],
                "showbox": [
                    "None"
                ],
                "showfliers": [
                    "None"
                ]
            }
        },
        "KoalasHistPlot._args_adjust": {
            "name": "_args_adjust",
            "location": 373,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "KoalasHistPlot._compute_plot_data": {
            "name": "_compute_plot_data",
            "location": 377,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "KoalasHistPlot._make_plot": {
            "name": "_make_plot",
            "location": 380,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "KoalasHistPlot._plot": {
            "name": "_plot",
            "location": 405,
            "return": [],
            "arguments": {
                "cls": [],
                "ax": [],
                "y": [],
                "style": [
                    "None"
                ],
                "bins": [],
                "bottom": [
                    "int"
                ],
                "column_num": [
                    "int"
                ],
                "stacking_id": [
                    "None"
                ]
            }
        },
        "KoalasPiePlot.__init__": {
            "name": "__init__",
            "location": 421,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "KoalasPiePlot._make_plot": {
            "name": "_make_plot",
            "location": 424,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "KoalasAreaPlot.__init__": {
            "name": "__init__",
            "location": 430,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "KoalasAreaPlot._make_plot": {
            "name": "_make_plot",
            "location": 433,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "KoalasLinePlot.__init__": {
            "name": "__init__",
            "location": 439,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "KoalasLinePlot._make_plot": {
            "name": "_make_plot",
            "location": 442,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "KoalasBarhPlot.__init__": {
            "name": "__init__",
            "location": 448,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "KoalasBarhPlot._make_plot": {
            "name": "_make_plot",
            "location": 451,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "KoalasScatterPlot.__init__": {
            "name": "__init__",
            "location": 457,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [],
                "x": [],
                "y": []
            }
        },
        "KoalasScatterPlot._make_plot": {
            "name": "_make_plot",
            "location": 460,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "KoalasKdePlot._compute_plot_data": {
            "name": "_compute_plot_data",
            "location": 466,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "KoalasKdePlot._make_plot": {
            "name": "_make_plot",
            "location": 469,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "KoalasKdePlot._get_ind": {
            "name": "_get_ind",
            "location": 495,
            "return": [],
            "arguments": {
                "self": [],
                "y": []
            }
        },
        "KoalasKdePlot._plot": {
            "name": "_plot",
            "location": 499,
            "return": [],
            "arguments": {
                "cls": [],
                "ax": [],
                "y": [],
                "style": [
                    "None"
                ],
                "bw_method": [
                    "None"
                ],
                "ind": [
                    "None"
                ],
                "column_num": [
                    "None"
                ],
                "stacking_id": [
                    "None"
                ]
            }
        },
        "KoalasBoxPlot.boxplot.update_dict": {
            "name": "update_dict",
            "location": 112,
            "return": [
                "dict"
            ],
            "arguments": {
                "dictionary": [],
                "rc_name": [],
                "properties": []
            }
        }
    },
    "koalas-master/databricks/koalas/plot/plotly.py": {
        "plot_koalas": {
            "name": "plot_koalas",
            "location": 32,
            "return": [],
            "arguments": {
                "data": [],
                "kind": []
            }
        },
        "plot_pie": {
            "name": "plot_pie",
            "location": 49,
            "return": [],
            "arguments": {
                "data": []
            }
        },
        "plot_histogram": {
            "name": "plot_histogram",
            "location": 73,
            "return": [],
            "arguments": {
                "data": []
            }
        },
        "plot_box": {
            "name": "plot_box",
            "location": 117,
            "return": [],
            "arguments": {
                "data": []
            }
        },
        "plot_kde": {
            "name": "plot_kde",
            "location": 185,
            "return": [],
            "arguments": {
                "data": []
            }
        }
    },
    "koalas-master/databricks/koalas/plot/__init__.py": {},
    "koalas-master/databricks/koalas/spark/accessors.py": {
        "SparkIndexOpsMethods.__init__": {
            "name": "__init__",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "SparkIndexOpsMethods.data_type": {
            "name": "data_type",
            "location": 44,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SparkIndexOpsMethods.nullable": {
            "name": "nullable",
            "location": 49,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SparkIndexOpsMethods.column": {
            "name": "column",
            "location": 54,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SparkIndexOpsMethods.transform": {
            "name": "transform",
            "location": 63,
            "return": [],
            "arguments": {
                "self": [],
                "func": []
            }
        },
        "SparkIndexOpsMethods.analyzed": {
            "name": "analyzed",
            "location": 129,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SparkSeriesMethods.transform": {
            "name": "transform",
            "location": 134,
            "return": [],
            "arguments": {
                "self": [],
                "func": []
            }
        },
        "SparkSeriesMethods.apply": {
            "name": "apply",
            "location": 139,
            "return": [],
            "arguments": {
                "self": [],
                "func": []
            }
        },
        "SparkSeriesMethods.analyzed": {
            "name": "analyzed",
            "location": 206,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SparkIndexMethods.transform": {
            "name": "transform",
            "location": 260,
            "return": [],
            "arguments": {
                "self": [],
                "func": []
            }
        },
        "SparkIndexMethods.analyzed": {
            "name": "analyzed",
            "location": 266,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SparkFrameMethods.__init__": {
            "name": "__init__",
            "location": 313,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "frame": []
            }
        },
        "SparkFrameMethods.schema": {
            "name": "schema",
            "location": 316,
            "return": [],
            "arguments": {
                "self": [],
                "index_col": [
                    "None"
                ]
            }
        },
        "SparkFrameMethods.print_schema": {
            "name": "print_schema",
            "location": 347,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "index_col": [
                    "None"
                ]
            }
        },
        "SparkFrameMethods.frame": {
            "name": "frame",
            "location": 390,
            "return": [],
            "arguments": {
                "self": [],
                "index_col": [
                    "None"
                ]
            }
        },
        "SparkFrameMethods.cache": {
            "name": "cache",
            "location": 517,
            "return": [
                "CachedDataFrame"
            ],
            "arguments": {
                "self": []
            }
        },
        "SparkFrameMethods.persist": {
            "name": "persist",
            "location": 567,
            "return": [
                "CachedDataFrame"
            ],
            "arguments": {
                "self": [],
                "storage_level": []
            }
        },
        "SparkFrameMethods.hint": {
            "name": "hint",
            "location": 645,
            "return": [
                "DataFrame"
            ],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "SparkFrameMethods.to_table": {
            "name": "to_table",
            "location": 682,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [],
                "format": [
                    "None"
                ],
                "mode": [
                    "typing.Text"
                ],
                "partition_cols": [
                    "None"
                ],
                "index_col": [
                    "None"
                ]
            }
        },
        "SparkFrameMethods.to_spark_io": {
            "name": "to_spark_io",
            "location": 757,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "None"
                ],
                "format": [
                    "None"
                ],
                "mode": [
                    "typing.Text"
                ],
                "partition_cols": [
                    "None"
                ],
                "index_col": [
                    "None"
                ]
            }
        },
        "SparkFrameMethods.explain": {
            "name": "explain",
            "location": 830,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "extended": [
                    "None"
                ],
                "mode": [
                    "None"
                ]
            }
        },
        "SparkFrameMethods.apply": {
            "name": "apply",
            "location": 906,
            "return": [],
            "arguments": {
                "self": [],
                "func": [],
                "index_col": [
                    "None"
                ]
            }
        },
        "SparkFrameMethods.repartition": {
            "name": "repartition",
            "location": 968,
            "return": [
                "DataFrame"
            ],
            "arguments": {
                "self": [],
                "num_partitions": []
            }
        },
        "SparkFrameMethods.coalesce": {
            "name": "coalesce",
            "location": 1010,
            "return": [
                "DataFrame"
            ],
            "arguments": {
                "self": [],
                "num_partitions": []
            }
        },
        "SparkFrameMethods.checkpoint": {
            "name": "checkpoint",
            "location": 1061,
            "return": [
                "DataFrame"
            ],
            "arguments": {
                "self": [],
                "eager": [
                    "bool"
                ]
            }
        },
        "SparkFrameMethods.local_checkpoint": {
            "name": "local_checkpoint",
            "location": 1098,
            "return": [
                "DataFrame"
            ],
            "arguments": {
                "self": [],
                "eager": [
                    "bool"
                ]
            }
        },
        "SparkFrameMethods.analyzed": {
            "name": "analyzed",
            "location": 1137,
            "return": [
                "DataFrame"
            ],
            "arguments": {
                "self": []
            }
        },
        "CachedSparkFrameMethods.__init__": {
            "name": "__init__",
            "location": 1193,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "frame": []
            }
        },
        "CachedSparkFrameMethods.storage_level": {
            "name": "storage_level",
            "location": 1197,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CachedSparkFrameMethods.unpersist": {
            "name": "unpersist",
            "location": 1228,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "koalas-master/databricks/koalas/spark/functions.py": {
        "percentile_approx": {
            "name": "percentile_approx",
            "location": 27,
            "return": [],
            "arguments": {
                "col": [],
                "percentage": [],
                "accuracy": [
                    "int"
                ]
            }
        },
        "array_repeat": {
            "name": "array_repeat",
            "location": 66,
            "return": [
                "Column"
            ],
            "arguments": {
                "col": [],
                "count": []
            }
        },
        "repeat": {
            "name": "repeat",
            "location": 80,
            "return": [],
            "arguments": {
                "col": [],
                "n": []
            }
        },
        "_call_udf": {
            "name": "_call_udf",
            "location": 89,
            "return": [
                "Column"
            ],
            "arguments": {
                "sc": [],
                "name": []
            }
        },
        "_make_arguments": {
            "name": "_make_arguments",
            "location": 93,
            "return": [],
            "arguments": {
                "sc": []
            }
        }
    },
    "koalas-master/databricks/koalas/spark/utils.py": {
        "as_nullable_spark_type": {
            "name": "as_nullable_spark_type",
            "location": 22,
            "return": [
                "StructType",
                "ArrayType",
                "MapType"
            ],
            "arguments": {
                "dt": []
            }
        },
        "force_decimal_precision_scale": {
            "name": "force_decimal_precision_scale",
            "location": 70,
            "return": [
                "StructType",
                "ArrayType",
                "MapType",
                "DecimalType"
            ],
            "arguments": {
                "dt": [],
                "precision": [
                    "int"
                ],
                "scale": [
                    "int"
                ]
            }
        }
    },
    "koalas-master/databricks/koalas/spark/__init__.py": {},
    "koalas-master/databricks/koalas/testing/utils.py": {
        "compare_both": {
            "name": "compare_both",
            "location": 302,
            "return": [],
            "arguments": {
                "f": [],
                "almost": []
            }
        },
        "assert_produces_warning": {
            "name": "assert_produces_warning",
            "location": 323,
            "return": [],
            "arguments": {
                "expected_warning": [],
                "filter_level": [],
                "check_stacklevel": [],
                "raise_on_extra_warnings": []
            }
        },
        "SQLTestUtils.sql_conf": {
            "name": "sql_conf",
            "location": 44,
            "return": [],
            "arguments": {
                "self": [],
                "pairs": []
            }
        },
        "SQLTestUtils.database": {
            "name": "database",
            "location": 55,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SQLTestUtils.table": {
            "name": "table",
            "location": 70,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SQLTestUtils.tempView": {
            "name": "tempView",
            "location": 84,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SQLTestUtils.function": {
            "name": "function",
            "location": 98,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ReusedSQLTestCase.setUpClass": {
            "name": "setUpClass",
            "location": 114,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "ReusedSQLTestCase.tearDownClass": {
            "name": "tearDownClass",
            "location": 119,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "ReusedSQLTestCase.assertPandasEqual": {
            "name": "assertPandasEqual",
            "location": 125,
            "return": [],
            "arguments": {
                "self": [],
                "left": [],
                "right": [],
                "check_exact": []
            }
        },
        "ReusedSQLTestCase.assertPandasAlmostEqual": {
            "name": "assertPandasAlmostEqual",
            "location": 182,
            "return": [],
            "arguments": {
                "self": [],
                "left": [],
                "right": []
            }
        },
        "ReusedSQLTestCase.assert_eq": {
            "name": "assert_eq",
            "location": 239,
            "return": [],
            "arguments": {
                "self": [],
                "left": [],
                "right": [],
                "check_exact": [],
                "almost": []
            }
        },
        "ReusedSQLTestCase._to_pandas": {
            "name": "_to_pandas",
            "location": 270,
            "return": [],
            "arguments": {
                "obj": []
            }
        },
        "TestUtils.temp_dir": {
            "name": "temp_dir",
            "location": 279,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestUtils.temp_file": {
            "name": "temp_file",
            "location": 287,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ComparisonTestBase.kdf": {
            "name": "kdf",
            "location": 294,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ComparisonTestBase.pdf": {
            "name": "pdf",
            "location": 298,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "compare_both.wrapped": {
            "name": "wrapped",
            "location": 310,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "koalas-master/databricks/koalas/testing/__init__.py": {},
    "koalas-master/databricks/koalas/tests/test_categorical.py": {
        "CategoricalTest.pdf": {
            "name": "pdf",
            "location": 28,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CategoricalTest.kdf": {
            "name": "kdf",
            "location": 39,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CategoricalTest.df_pair": {
            "name": "df_pair",
            "location": 43,
            "return": [
                "tuple"
            ],
            "arguments": {
                "self": []
            }
        },
        "CategoricalTest.test_categorical_frame": {
            "name": "test_categorical_frame",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CategoricalTest.test_categorical_series": {
            "name": "test_categorical_series",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CategoricalTest.test_astype": {
            "name": "test_astype",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CategoricalTest.test_factorize": {
            "name": "test_factorize",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CategoricalTest.test_frame_apply": {
            "name": "test_frame_apply",
            "location": 110,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CategoricalTest.test_frame_apply_without_shortcut": {
            "name": "test_frame_apply_without_shortcut",
            "location": 118,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CategoricalTest.test_frame_transform": {
            "name": "test_frame_transform",
            "location": 137,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CategoricalTest.test_frame_transform_without_shortcut": {
            "name": "test_frame_transform_without_shortcut",
            "location": 155,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CategoricalTest.test_series_apply": {
            "name": "test_series_apply",
            "location": 180,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CategoricalTest.test_series_apply_without_shortcut": {
            "name": "test_series_apply_without_shortcut",
            "location": 185,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CategoricalTest.test_groupby_apply": {
            "name": "test_groupby_apply",
            "location": 205,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CategoricalTest.test_groupby_apply_without_shortcut": {
            "name": "test_groupby_apply_without_shortcut",
            "location": 234,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CategoricalTest.test_groupby_transform": {
            "name": "test_groupby_transform",
            "location": 248,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CategoricalTest.test_groupby_transform_without_shortcut": {
            "name": "test_groupby_transform_without_shortcut",
            "location": 263,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CategoricalTest.test_frame_apply_batch": {
            "name": "test_frame_apply_batch",
            "location": 295,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CategoricalTest.test_frame_apply_batch_without_shortcut": {
            "name": "test_frame_apply_batch_without_shortcut",
            "location": 315,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CategoricalTest.test_frame_transform_batch": {
            "name": "test_frame_transform_batch",
            "location": 345,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CategoricalTest.test_frame_transform_batch_without_shortcut": {
            "name": "test_frame_transform_batch_without_shortcut",
            "location": 373,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CategoricalTest.test_series_transform_batch": {
            "name": "test_series_transform_batch",
            "location": 416,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CategoricalTest.test_series_transform_batch_without_shortcut": {
            "name": "test_series_transform_batch_without_shortcut",
            "location": 436,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CategoricalTest.test_frame_apply_without_shortcut.categorize": {
            "name": "categorize",
            "location": 129,
            "return": [],
            "arguments": {
                "ser": []
            }
        },
        "CategoricalTest.test_frame_transform_without_shortcut.codes": {
            "name": "codes",
            "location": 161,
            "return": [],
            "arguments": {
                "pser": []
            }
        },
        "CategoricalTest.test_frame_transform_without_shortcut.to_category": {
            "name": "to_category",
            "location": 173,
            "return": [],
            "arguments": {
                "pser": []
            }
        },
        "CategoricalTest.test_series_apply_without_shortcut.identity": {
            "name": "identity",
            "location": 192,
            "return": [],
            "arguments": {
                "pser": []
            }
        },
        "CategoricalTest.test_groupby_apply_without_shortcut.identity": {
            "name": "identity",
            "location": 240,
            "return": [],
            "arguments": {
                "df": []
            }
        },
        "CategoricalTest.test_groupby_transform_without_shortcut.identity": {
            "name": "identity",
            "location": 269,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "CategoricalTest.test_groupby_transform_without_shortcut.astype": {
            "name": "astype",
            "location": 279,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "CategoricalTest.test_frame_apply_batch_without_shortcut.to_str": {
            "name": "to_str",
            "location": 321,
            "return": [],
            "arguments": {
                "pdf": []
            }
        },
        "CategoricalTest.test_frame_apply_batch_without_shortcut.to_category": {
            "name": "to_category",
            "location": 337,
            "return": [],
            "arguments": {
                "pdf": []
            }
        },
        "CategoricalTest.test_frame_transform_batch_without_shortcut.to_str": {
            "name": "to_str",
            "location": 379,
            "return": [],
            "arguments": {
                "pdf": []
            }
        },
        "CategoricalTest.test_frame_transform_batch_without_shortcut.to_codes": {
            "name": "to_codes",
            "location": 386,
            "return": [],
            "arguments": {
                "pdf": []
            }
        },
        "CategoricalTest.test_frame_transform_batch_without_shortcut.to_category": {
            "name": "to_category",
            "location": 408,
            "return": [],
            "arguments": {
                "pdf": []
            }
        },
        "CategoricalTest.test_series_transform_batch_without_shortcut.to_str": {
            "name": "to_str",
            "location": 442,
            "return": [],
            "arguments": {
                "pser": []
            }
        },
        "CategoricalTest.test_series_transform_batch_without_shortcut.to_category": {
            "name": "to_category",
            "location": 456,
            "return": [],
            "arguments": {
                "pser": []
            }
        }
    },
    "koalas-master/databricks/koalas/tests/test_config.py": {
        "ConfigTest.setUp": {
            "name": "setUp",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConfigTest.tearDown": {
            "name": "tearDown",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConfigTest.test_get_set_reset_option": {
            "name": "test_get_set_reset_option",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConfigTest.test_get_set_reset_option_different_types": {
            "name": "test_get_set_reset_option_different_types",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConfigTest.test_different_types": {
            "name": "test_different_types",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConfigTest.test_check_func": {
            "name": "test_check_func",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConfigTest.test_unknown_option": {
            "name": "test_unknown_option",
            "location": 95,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConfigTest.test_namespace_access": {
            "name": "test_namespace_access",
            "location": 105,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConfigTest.test_dir_options": {
            "name": "test_dir_options",
            "location": 134,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "koalas-master/databricks/koalas/tests/test_csv.py": {
        "normalize_text": {
            "name": "normalize_text",
            "location": 28,
            "return": [
                "str"
            ],
            "arguments": {
                "s": []
            }
        },
        "CsvTest.setUp": {
            "name": "setUp",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CsvTest.tearDown": {
            "name": "tearDown",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CsvTest.csv_text": {
            "name": "csv_text",
            "location": 40,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CsvTest.csv_text_2": {
            "name": "csv_text_2",
            "location": 61,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CsvTest.csv_text_with_comments": {
            "name": "csv_text_with_comments",
            "location": 73,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CsvTest.tab_delimited_csv_text": {
            "name": "tab_delimited_csv_text",
            "location": 87,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CsvTest.q_quoted_csv_text": {
            "name": "q_quoted_csv_text",
            "location": 98,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CsvTest.e_escapeted_csv_text": {
            "name": "e_escapeted_csv_text",
            "location": 109,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CsvTest.csv_file": {
            "name": "csv_file",
            "location": 120,
            "return": [
                "typing.Generator"
            ],
            "arguments": {
                "self": [],
                "csv": []
            }
        },
        "CsvTest.test_read_csv": {
            "name": "test_read_csv",
            "location": 126,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CsvTest.test_read_with_spark_schema": {
            "name": "test_read_with_spark_schema",
            "location": 201,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CsvTest.test_read_csv_with_comment": {
            "name": "test_read_csv_with_comment",
            "location": 207,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CsvTest.test_read_csv_with_limit": {
            "name": "test_read_csv_with_limit",
            "location": 234,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CsvTest.test_read_csv_with_sep": {
            "name": "test_read_csv_with_sep",
            "location": 240,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CsvTest.test_read_csv_with_squeeze": {
            "name": "test_read_csv_with_squeeze",
            "location": 246,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CsvTest.test_read_csv_with_mangle_dupe_cols": {
            "name": "test_read_csv_with_mangle_dupe_cols",
            "location": 260,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CsvTest.test_read_csv_with_parse_dates": {
            "name": "test_read_csv_with_parse_dates",
            "location": 265,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CsvTest.test_read_csv_with_dtype": {
            "name": "test_read_csv_with_dtype",
            "location": 270,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CsvTest.test_read_csv_with_quotechar": {
            "name": "test_read_csv_with_quotechar",
            "location": 279,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CsvTest.test_read_csv_with_escapechar": {
            "name": "test_read_csv_with_escapechar",
            "location": 285,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CsvTest.test_to_csv": {
            "name": "test_to_csv",
            "location": 297,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CsvTest._check_output": {
            "name": "_check_output",
            "location": 331,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dir": [],
                "expected": []
            }
        },
        "CsvTest.test_to_csv_with_path": {
            "name": "test_to_csv_with_path",
            "location": 338,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CsvTest.test_to_csv_with_path_and_basic_options": {
            "name": "test_to_csv_with_path_and_basic_options",
            "location": 369,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CsvTest.test_to_csv_with_path_and_basic_options_multiindex_columns": {
            "name": "test_to_csv_with_path_and_basic_options_multiindex_columns",
            "location": 378,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CsvTest.test_to_csv_with_path_and_pyspark_options": {
            "name": "test_to_csv_with_path_and_pyspark_options",
            "location": 391,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CsvTest.test_to_csv_with_partition_cols": {
            "name": "test_to_csv_with_partition_cols",
            "location": 400,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CsvTest.test_read_csv.check": {
            "name": "check",
            "location": 129,
            "return": [
                "None"
            ],
            "arguments": {
                "header": [
                    "typing.Text"
                ],
                "names": [
                    "None"
                ],
                "usecols": [
                    "None"
                ],
                "index_col": [
                    "None"
                ]
            }
        }
    },
    "koalas-master/databricks/koalas/tests/test_dataframe.py": {
        "DataFrameTest.pdf": {
            "name": "pdf",
            "location": 52,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DataFrameTest.kdf": {
            "name": "kdf",
            "location": 59,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DataFrameTest.df_pair": {
            "name": "df_pair",
            "location": 63,
            "return": [
                "tuple"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataFrameTest.test_dataframe": {
            "name": "test_dataframe",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataFrameTest._check_extension": {
            "name": "_check_extension",
            "location": 99,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "kdf": [],
                "pdf": []
            }
        },
        "DataFrameTest.test_extension_dtypes": {
            "name": "test_extension_dtypes",
            "location": 108,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataFrameTest.test_astype_extension_dtypes": {
            "name": "test_astype_extension_dtypes",
            "location": 124,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataFrameTest.test_extension_object_dtypes": {
            "name": "test_extension_object_dtypes",
            "location": 142,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataFrameTest.test_astype_extension_object_dtypes": {
            "name": "test_astype_extension_object_dtypes",
            "location": 156,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataFrameTest.test_extension_float_dtypes": {
            "name": "test_extension_float_dtypes",
            "location": 167,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataFrameTest.test_astype_extension_float_dtypes": {
            "name": "test_astype_extension_float_dtypes",
            "location": 183,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataFrameTest.test_insert": {
            "name": "test_insert",
            "location": 191,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataFrameTest.test_inplace": {
            "name": "test_inplace",
            "location": 248,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataFrameTest.test_assign_list": {
            "name": "test_assign_list",
            "location": 260,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataFrameTest.test_dataframe_multiindex_columns": {
            "name": "test_dataframe_multiindex_columns",
            "location": 275,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataFrameTest.test_dataframe_column_level_name": {
            "name": "test_dataframe_column_level_name",
            "location": 304,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataFrameTest.test_dataframe_multiindex_names_level": {
            "name": "test_dataframe_multiindex_names_level",
            "location": 313,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataFrameTest.test_itertuples": {
            "name": "test_itertuples",
            "location": 346,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataFrameTest.test_iterrows": {
            "name": "test_iterrows",
            "location": 384,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataFrameTest.test_reset_index": {
            "name": "test_reset_index",
            "location": 400,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataFrameTest.test_reset_index_with_default_index_types": {
            "name": "test_reset_index_with_default_index_types",
            "location": 424,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataFrameTest.test_reset_index_with_multiindex_columns": {
            "name": "test_reset_index_with_multiindex_columns",
            "location": 438,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataFrameTest.test_index_to_frame_reset_index": {
            "name": "test_index_to_frame_reset_index",
            "location": 477,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataFrameTest.test_multiindex_column_access": {
            "name": "test_multiindex_column_access",
            "location": 502,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataFrameTest.test_repr_cache_invalidation": {
            "name": "test_repr_cache_invalidation",
            "location": 547,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataFrameTest.test_repr_html_cache_invalidation": {
            "name": "test_repr_html_cache_invalidation",
            "location": 554,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataFrameTest.test_empty_dataframe": {
            "name": "test_empty_dataframe",
            "location": 561,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataFrameTest.test_all_null_dataframe": {
            "name": "test_all_null_dataframe",
            "location": 575,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataFrameTest.test_nullable_object": {
            "name": "test_nullable_object",
            "location": 611,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataFrameTest.test_assign": {
            "name": "test_assign",
            "location": 631,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataFrameTest.test_head": {
            "name": "test_head",
            "location": 674,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataFrameTest.test_attributes": {
            "name": "test_attributes",
            "location": 683,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataFrameTest.test_column_names": {
            "name": "test_column_names",
            "location": 696,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataFrameTest.test_rename_columns": {
            "name": "test_rename_columns",
            "location": 712,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataFrameTest.test_rename_dataframe": {
            "name": "test_rename_dataframe",
            "location": 772,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataFrameTest.test_rename_axis": {
            "name": "test_rename_axis",
            "location": 837,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataFrameTest.test_dot_in_column_name": {
            "name": "test_dot_in_column_name",
            "location": 1004,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataFrameTest.test_aggregate": {
            "name": "test_aggregate",
            "location": 1010,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataFrameTest.test_droplevel": {
            "name": "test_droplevel",
            "location": 1088,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataFrameTest.test_drop": {
            "name": "test_drop",
            "location": 1214,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataFrameTest._test_dropna": {
            "name": "_test_dropna",
            "location": 1258,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pdf": [],
                "axis": []
            }
        },
        "DataFrameTest.test_dropna_axis_index": {
            "name": "test_dropna_axis_index",
            "location": 1319,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataFrameTest.test_dropna_axis_column": {
            "name": "test_dropna_axis_column",
            "location": 1350,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataFrameTest.test_dtype": {
            "name": "test_dtype",
            "location": 1371,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataFrameTest.test_fillna": {
            "name": "test_fillna",
            "location": 1393,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataFrameTest.test_isnull": {
            "name": "test_isnull",
            "location": 1489,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataFrameTest.test_to_datetime": {
            "name": "test_to_datetime",
            "location": 1498,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataFrameTest.test_nunique": {
            "name": "test_nunique",
            "location": 1506,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataFrameTest.test_sort_values": {
            "name": "test_sort_values",
            "location": 1538,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataFrameTest.test_sort_index": {
            "name": "test_sort_index",
            "location": 1592,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataFrameTest.test_swaplevel": {
            "name": "test_swaplevel",
            "location": 1633,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataFrameTest.test_swapaxes": {
            "name": "test_swapaxes",
            "location": 1703,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataFrameTest.test_nlargest": {
            "name": "test_nlargest",
            "location": 1718,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataFrameTest.test_nsmallest": {
            "name": "test_nsmallest",
            "location": 1726,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataFrameTest.test_xs": {
            "name": "test_xs",
            "location": 1734,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataFrameTest.test_missing": {
            "name": "test_missing",
            "location": 1782,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataFrameTest.test_to_numpy": {
            "name": "test_to_numpy",
            "location": 1830,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataFrameTest.test_to_pandas": {
            "name": "test_to_pandas",
            "location": 1844,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataFrameTest.test_isin": {
            "name": "test_isin",
            "location": 1849,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataFrameTest.test_merge": {
            "name": "test_merge",
            "location": 1884,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataFrameTest.test_merge_same_anchor": {
            "name": "test_merge_same_anchor",
            "location": 2049,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataFrameTest.test_merge_retains_indices": {
            "name": "test_merge_retains_indices",
            "location": 2097,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataFrameTest.test_merge_how_parameter": {
            "name": "test_merge_how_parameter",
            "location": 2120,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataFrameTest.test_merge_raises": {
            "name": "test_merge_raises",
            "location": 2154,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataFrameTest.test_append": {
            "name": "test_append",
            "location": 2200,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataFrameTest.test_clip": {
            "name": "test_clip",
            "location": 2286,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataFrameTest.test_binary_operators": {
            "name": "test_binary_operators",
            "location": 2316,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataFrameTest.test_binary_operator_add": {
            "name": "test_binary_operator_add",
            "location": 2336,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataFrameTest.test_binary_operator_sub": {
            "name": "test_binary_operator_sub",
            "location": 2354,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataFrameTest.test_binary_operator_truediv": {
            "name": "test_binary_operator_truediv",
            "location": 2375,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataFrameTest.test_binary_operator_floordiv": {
            "name": "test_binary_operator_floordiv",
            "location": 2392,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataFrameTest.test_binary_operator_mod": {
            "name": "test_binary_operator_mod",
            "location": 2402,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataFrameTest.test_binary_operator_multiply": {
            "name": "test_binary_operator_multiply",
            "location": 2418,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataFrameTest.test_sample": {
            "name": "test_sample",
            "location": 2445,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataFrameTest.test_add_prefix": {
            "name": "test_add_prefix",
            "location": 2462,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataFrameTest.test_add_suffix": {
            "name": "test_add_suffix",
            "location": 2472,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataFrameTest.test_join": {
            "name": "test_join",
            "location": 2482,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataFrameTest.test_replace": {
            "name": "test_replace",
            "location": 2594,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataFrameTest.test_update": {
            "name": "test_update",
            "location": 2701,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataFrameTest.test_pivot_table_dtypes": {
            "name": "test_pivot_table_dtypes",
            "location": 2777,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataFrameTest.test_pivot_table": {
            "name": "test_pivot_table",
            "location": 2813,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataFrameTest.test_pivot_table_and_index": {
            "name": "test_pivot_table_and_index",
            "location": 2954,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataFrameTest.test_stack": {
            "name": "test_stack",
            "location": 2994,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataFrameTest.test_unstack": {
            "name": "test_unstack",
            "location": 3039,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataFrameTest.test_pivot_errors": {
            "name": "test_pivot_errors",
            "location": 3048,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataFrameTest.test_pivot_table_errors": {
            "name": "test_pivot_table_errors",
            "location": 3057,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataFrameTest.test_transpose": {
            "name": "test_transpose",
            "location": 3131,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataFrameTest._test_cummin": {
            "name": "_test_cummin",
            "location": 3166,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pdf": [],
                "kdf": []
            }
        },
        "DataFrameTest.test_cummin": {
            "name": "test_cummin",
            "location": 3171,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataFrameTest.test_cummin_multiindex_columns": {
            "name": "test_cummin_multiindex_columns",
            "location": 3180,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataFrameTest._test_cummax": {
            "name": "_test_cummax",
            "location": 3187,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pdf": [],
                "kdf": []
            }
        },
        "DataFrameTest.test_cummax": {
            "name": "test_cummax",
            "location": 3192,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataFrameTest.test_cummax_multiindex_columns": {
            "name": "test_cummax_multiindex_columns",
            "location": 3201,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataFrameTest._test_cumsum": {
            "name": "_test_cumsum",
            "location": 3208,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pdf": [],
                "kdf": []
            }
        },
        "DataFrameTest.test_cumsum": {
            "name": "test_cumsum",
            "location": 3213,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataFrameTest.test_cumsum_multiindex_columns": {
            "name": "test_cumsum_multiindex_columns",
            "location": 3222,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataFrameTest._test_cumprod": {
            "name": "_test_cumprod",
            "location": 3229,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pdf": [],
                "kdf": []
            }
        },
        "DataFrameTest.test_cumprod": {
            "name": "test_cumprod",
            "location": 3234,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataFrameTest.test_cumprod_multiindex_columns": {
            "name": "test_cumprod_multiindex_columns",
            "location": 3252,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataFrameTest.test_drop_duplicates": {
            "name": "test_drop_duplicates",
            "location": 3259,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataFrameTest.test_reindex": {
            "name": "test_reindex",
            "location": 3355,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataFrameTest.test_reindex_like": {
            "name": "test_reindex_like",
            "location": 3521,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataFrameTest.test_melt": {
            "name": "test_melt",
            "location": 3581,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataFrameTest.test_all": {
            "name": "test_all",
            "location": 3733,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataFrameTest.test_any": {
            "name": "test_any",
            "location": 3775,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataFrameTest.test_rank": {
            "name": "test_rank",
            "location": 3817,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataFrameTest.test_round": {
            "name": "test_round",
            "location": 3845,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataFrameTest.test_shift": {
            "name": "test_shift",
            "location": 3893,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataFrameTest.test_diff": {
            "name": "test_diff",
            "location": 3925,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataFrameTest.test_duplicated": {
            "name": "test_duplicated",
            "location": 3950,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataFrameTest.test_ffill": {
            "name": "test_ffill",
            "location": 4017,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataFrameTest.test_bfill": {
            "name": "test_bfill",
            "location": 4042,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataFrameTest.test_filter": {
            "name": "test_filter",
            "location": 4067,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataFrameTest.test_pipe": {
            "name": "test_pipe",
            "location": 4155,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataFrameTest.test_transform": {
            "name": "test_transform",
            "location": 4167,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataFrameTest.test_apply": {
            "name": "test_apply",
            "location": 4212,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataFrameTest.test_apply_batch": {
            "name": "test_apply_batch",
            "location": 4309,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataFrameTest.test_transform_batch": {
            "name": "test_transform_batch",
            "location": 4360,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataFrameTest.test_transform_batch_same_anchor": {
            "name": "test_transform_batch_same_anchor",
            "location": 4429,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataFrameTest.test_empty_timestamp": {
            "name": "test_empty_timestamp",
            "location": 4463,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataFrameTest.test_to_spark": {
            "name": "test_to_spark",
            "location": 4478,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataFrameTest.test_keys": {
            "name": "test_keys",
            "location": 4487,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataFrameTest.test_quantile": {
            "name": "test_quantile",
            "location": 4497,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataFrameTest.test_pct_change": {
            "name": "test_pct_change",
            "location": 4548,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataFrameTest.test_where": {
            "name": "test_where",
            "location": 4559,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataFrameTest.test_mask": {
            "name": "test_mask",
            "location": 4565,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataFrameTest.test_query": {
            "name": "test_query",
            "location": 4571,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataFrameTest.test_take": {
            "name": "test_take",
            "location": 4618,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataFrameTest.test_axes": {
            "name": "test_axes",
            "location": 4709,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataFrameTest.test_udt": {
            "name": "test_udt",
            "location": 4720,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataFrameTest.test_eval": {
            "name": "test_eval",
            "location": 4733,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataFrameTest.test_to_markdown": {
            "name": "test_to_markdown",
            "location": 4767,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataFrameTest.test_cache": {
            "name": "test_cache",
            "location": 4777,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataFrameTest.test_persist": {
            "name": "test_persist",
            "location": 4789,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataFrameTest.test_squeeze": {
            "name": "test_squeeze",
            "location": 4808,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataFrameTest.test_rfloordiv": {
            "name": "test_rfloordiv",
            "location": 4846,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataFrameTest.test_truncate": {
            "name": "test_truncate",
            "location": 4867,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataFrameTest.test_explode": {
            "name": "test_explode",
            "location": 4974,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataFrameTest.test_spark_schema": {
            "name": "test_spark_schema",
            "location": 5050,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataFrameTest.test_print_schema": {
            "name": "test_print_schema",
            "location": 5065,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataFrameTest.test_explain_hint": {
            "name": "test_explain_hint",
            "location": 5087,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataFrameTest.test_mad": {
            "name": "test_mad",
            "location": 5111,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataFrameTest.test_abs": {
            "name": "test_abs",
            "location": 5141,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataFrameTest.test_iteritems": {
            "name": "test_iteritems",
            "location": 5148,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataFrameTest.test_tail": {
            "name": "test_tail",
            "location": 5164,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataFrameTest.test_last_valid_index": {
            "name": "test_last_valid_index",
            "location": 5187,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataFrameTest.test_last": {
            "name": "test_last",
            "location": 5206,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataFrameTest.test_first": {
            "name": "test_first",
            "location": 5215,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataFrameTest.test_first_valid_index": {
            "name": "test_first_valid_index",
            "location": 5224,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataFrameTest.test_product": {
            "name": "test_product",
            "location": 5255,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataFrameTest.test_from_dict": {
            "name": "test_from_dict",
            "location": 5323,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataFrameTest.test_pad": {
            "name": "test_pad",
            "location": 5337,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataFrameTest.test_backfill": {
            "name": "test_backfill",
            "location": 5372,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataFrameTest.test_align": {
            "name": "test_align",
            "location": 5407,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataFrameTest.test_between_time": {
            "name": "test_between_time",
            "location": 5451,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataFrameTest.test_at_time": {
            "name": "test_at_time",
            "location": 5500,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataFrameTest.test_index_to_frame_reset_index.check": {
            "name": "check",
            "location": 478,
            "return": [
                "None"
            ],
            "arguments": {
                "kdf": [],
                "pdf": []
            }
        },
        "DataFrameTest.test_rename_dataframe.str_lower": {
            "name": "str_lower",
            "location": 792,
            "return": [
                "str"
            ],
            "arguments": {
                "s": []
            }
        },
        "DataFrameTest.test_rename_dataframe.mul10": {
            "name": "mul10",
            "location": 799,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "DataFrameTest.test_merge.check": {
            "name": "check",
            "location": 1907,
            "return": [
                "None"
            ],
            "arguments": {
                "op": [],
                "right_kdf": [],
                "right_pdf": []
            }
        },
        "DataFrameTest.test_merge_same_anchor.check": {
            "name": "check",
            "location": 2067,
            "return": [
                "None"
            ],
            "arguments": {
                "op": [],
                "right_kdf": [],
                "right_pdf": []
            }
        },
        "DataFrameTest.test_update.get_data": {
            "name": "get_data",
            "location": 2703,
            "return": [
                "tuple"
            ],
            "arguments": {
                "left_columns": [
                    "None"
                ],
                "right_columns": [
                    "None"
                ]
            }
        },
        "DataFrameTest.test_transform_batch_same_anchor.plus_one": {
            "name": "plus_one",
            "location": 4455,
            "return": [],
            "arguments": {
                "ser": []
            }
        },
        "DataFrameTest.test_apply.f1": {
            "name": "f1",
            "location": 4273,
            "return": [
                "None"
            ],
            "arguments": {
                "_": []
            }
        },
        "DataFrameTest.test_apply.f2": {
            "name": "f2",
            "location": 4280,
            "return": [
                "None"
            ],
            "arguments": {
                "_": []
            }
        },
        "DataFrameTest.test_apply_batch.f2": {
            "name": "f2",
            "location": 4341,
            "return": [
                "None"
            ],
            "arguments": {
                "_": []
            }
        }
    },
    "koalas-master/databricks/koalas/tests/test_dataframe_conversion.py": {
        "DataFrameConversionTest.setUp": {
            "name": "setUp",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataFrameConversionTest.tearDown": {
            "name": "tearDown",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataFrameConversionTest.pdf": {
            "name": "pdf",
            "location": 39,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DataFrameConversionTest.kdf": {
            "name": "kdf",
            "location": 43,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DataFrameConversionTest.strip_all_whitespace": {
            "name": "strip_all_whitespace",
            "location": 47,
            "return": [
                "str"
            ],
            "arguments": {
                "str": []
            }
        },
        "DataFrameConversionTest.test_to_html": {
            "name": "test_to_html",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataFrameConversionTest.get_excel_dfs": {
            "name": "get_excel_dfs",
            "location": 87,
            "return": [
                "dict[typing.Text, ]"
            ],
            "arguments": {
                "koalas_location": [],
                "pandas_location": []
            }
        },
        "DataFrameConversionTest.test_to_excel": {
            "name": "test_to_excel",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataFrameConversionTest.test_to_json": {
            "name": "test_to_json",
            "location": 138,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataFrameConversionTest.test_to_json_negative": {
            "name": "test_to_json_negative",
            "location": 144,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataFrameConversionTest.test_read_json_negative": {
            "name": "test_read_json_negative",
            "location": 153,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataFrameConversionTest.test_to_json_with_path": {
            "name": "test_to_json_with_path",
            "location": 157,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataFrameConversionTest.test_to_json_with_partition_cols": {
            "name": "test_to_json_with_partition_cols",
            "location": 169,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataFrameConversionTest.test_to_clipboard": {
            "name": "test_to_clipboard",
            "location": 191,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataFrameConversionTest.test_to_latex": {
            "name": "test_to_latex",
            "location": 201,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataFrameConversionTest.test_to_records": {
            "name": "test_to_records",
            "location": 218,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataFrameConversionTest.test_from_records": {
            "name": "test_from_records",
            "location": 228,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "koalas-master/databricks/koalas/tests/test_dataframe_spark_io.py": {
        "DataFrameSparkIOTest.test_column_order": {
            "name": "test_column_order",
            "location": 35,
            "return": [
                "list[typing.Text]"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataFrameSparkIOTest.test_pdf": {
            "name": "test_pdf",
            "location": 39,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DataFrameSparkIOTest.test_parquet_read": {
            "name": "test_parquet_read",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataFrameSparkIOTest.test_parquet_read_with_pandas_metadata": {
            "name": "test_parquet_read_with_pandas_metadata",
            "location": 102,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataFrameSparkIOTest.test_parquet_write": {
            "name": "test_parquet_write",
            "location": 125,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataFrameSparkIOTest.test_table": {
            "name": "test_table",
            "location": 154,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataFrameSparkIOTest.test_spark_io": {
            "name": "test_spark_io",
            "location": 205,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataFrameSparkIOTest.test_read_excel": {
            "name": "test_read_excel",
            "location": 248,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataFrameSparkIOTest.test_read_orc": {
            "name": "test_read_orc",
            "location": 381,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataFrameSparkIOTest.test_orc_write": {
            "name": "test_orc_write",
            "location": 428,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataFrameSparkIOTest.test_parquet_read.check": {
            "name": "check",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "columns": [],
                "expected": []
            }
        }
    },
    "koalas-master/databricks/koalas/tests/test_default_index.py": {
        "DefaultIndexTest.test_default_index_sequence": {
            "name": "test_default_index_sequence",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DefaultIndexTest.test_default_index_distributed_sequence": {
            "name": "test_default_index_distributed_sequence",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DefaultIndexTest.test_default_index_distributed": {
            "name": "test_default_index_distributed",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "koalas-master/databricks/koalas/tests/test_expanding.py": {
        "ExpandingTest._test_expanding_func": {
            "name": "_test_expanding_func",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "f": []
            }
        },
        "ExpandingTest.test_expanding_error": {
            "name": "test_expanding_error",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ExpandingTest.test_expanding_repr": {
            "name": "test_expanding_repr",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ExpandingTest.test_expanding_count": {
            "name": "test_expanding_count",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ExpandingTest.test_expanding_min": {
            "name": "test_expanding_min",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ExpandingTest.test_expanding_max": {
            "name": "test_expanding_max",
            "location": 103,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ExpandingTest.test_expanding_mean": {
            "name": "test_expanding_mean",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ExpandingTest.test_expanding_sum": {
            "name": "test_expanding_sum",
            "location": 109,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ExpandingTest.test_expanding_std": {
            "name": "test_expanding_std",
            "location": 112,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ExpandingTest.test_expanding_var": {
            "name": "test_expanding_var",
            "location": 115,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ExpandingTest._test_groupby_expanding_func": {
            "name": "_test_groupby_expanding_func",
            "location": 118,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "f": []
            }
        },
        "ExpandingTest.test_groupby_expanding_count": {
            "name": "test_groupby_expanding_count",
            "location": 183,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ExpandingTest.test_groupby_expanding_min": {
            "name": "test_groupby_expanding_min",
            "location": 277,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ExpandingTest.test_groupby_expanding_max": {
            "name": "test_groupby_expanding_max",
            "location": 280,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ExpandingTest.test_groupby_expanding_mean": {
            "name": "test_groupby_expanding_mean",
            "location": 283,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ExpandingTest.test_groupby_expanding_sum": {
            "name": "test_groupby_expanding_sum",
            "location": 286,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ExpandingTest.test_groupby_expanding_std": {
            "name": "test_groupby_expanding_std",
            "location": 289,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ExpandingTest.test_groupby_expanding_var": {
            "name": "test_groupby_expanding_var",
            "location": 292,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "koalas-master/databricks/koalas/tests/test_extension.py": {
        "ensure_removed": {
            "name": "ensure_removed",
            "location": 31,
            "return": [
                "typing.Generator"
            ],
            "arguments": {
                "obj": [],
                "attr": []
            }
        },
        "CustomAccessor.__init__": {
            "name": "__init__",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "obj": []
            }
        },
        "CustomAccessor.prop": {
            "name": "prop",
            "location": 51,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CustomAccessor.method": {
            "name": "method",
            "location": 54,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CustomAccessor.check_length": {
            "name": "check_length",
            "location": 57,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "col": [
                    "None"
                ]
            }
        },
        "ExtensionTest.pdf": {
            "name": "pdf",
            "location": 69,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ExtensionTest.kdf": {
            "name": "kdf",
            "location": 76,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ExtensionTest.accessor": {
            "name": "accessor",
            "location": 80,
            "return": [
                "CustomAccessor"
            ],
            "arguments": {
                "self": []
            }
        },
        "ExtensionTest.test_setup": {
            "name": "test_setup",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ExtensionTest.test_dataframe_register": {
            "name": "test_dataframe_register",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ExtensionTest.test_series_register": {
            "name": "test_series_register",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ExtensionTest.test_index_register": {
            "name": "test_index_register",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ExtensionTest.test_accessor_works": {
            "name": "test_accessor_works",
            "location": 107,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ExtensionTest.test_overwrite_warns": {
            "name": "test_overwrite_warns",
            "location": 115,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ExtensionTest.test_raises_attr_error": {
            "name": "test_raises_attr_error",
            "location": 129,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ExtensionTest.test_raises_attr_error.Bad.__init__": {
            "name": "__init__",
            "location": 133,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": []
            }
        }
    },
    "koalas-master/databricks/koalas/tests/test_frame_spark.py": {
        "SparkFrameMethodsTest.test_frame_apply_negative": {
            "name": "test_frame_apply_negative",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SparkFrameMethodsTest.test_hint": {
            "name": "test_hint",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SparkFrameMethodsTest.test_repartition": {
            "name": "test_repartition",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SparkFrameMethodsTest.test_coalesce": {
            "name": "test_coalesce",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SparkFrameMethodsTest.test_checkpoint": {
            "name": "test_checkpoint",
            "location": 132,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SparkFrameMethodsTest.test_local_checkpoint": {
            "name": "test_local_checkpoint",
            "location": 140,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "koalas-master/databricks/koalas/tests/test_groupby.py": {
        "GroupByTest.test_groupby_simple": {
            "name": "test_groupby_simple",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GroupByTest.test_groupby_multiindex_columns": {
            "name": "test_groupby_multiindex_columns",
            "location": 172,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GroupByTest.test_split_apply_combine_on_series": {
            "name": "test_split_apply_combine_on_series",
            "location": 221,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GroupByTest.test_aggregate": {
            "name": "test_aggregate",
            "location": 341,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GroupByTest.test_aggregate_func_str_list": {
            "name": "test_aggregate_func_str_list",
            "location": 473,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GroupByTest.test_aggregate_relabel": {
            "name": "test_aggregate_relabel",
            "location": 509,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GroupByTest.test_dropna": {
            "name": "test_dropna",
            "location": 552,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GroupByTest.test_describe": {
            "name": "test_describe",
            "location": 713,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GroupByTest.test_aggregate_relabel_multiindex": {
            "name": "test_aggregate_relabel_multiindex",
            "location": 798,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GroupByTest.test_all_any": {
            "name": "test_all_any",
            "location": 848,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GroupByTest.test_raises": {
            "name": "test_raises",
            "location": 906,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GroupByTest.test_nunique": {
            "name": "test_nunique",
            "location": 919,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GroupByTest.test_unique": {
            "name": "test_unique",
            "location": 981,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GroupByTest.test_value_counts": {
            "name": "test_value_counts",
            "location": 1002,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GroupByTest.test_size": {
            "name": "test_size",
            "location": 1030,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GroupByTest.test_diff": {
            "name": "test_diff",
            "location": 1057,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GroupByTest.test_rank": {
            "name": "test_rank",
            "location": 1102,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GroupByTest.test_cumcount": {
            "name": "test_cumcount",
            "location": 1148,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GroupByTest.test_cummin": {
            "name": "test_cummin",
            "location": 1216,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GroupByTest.test_cummax": {
            "name": "test_cummax",
            "location": 1286,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GroupByTest.test_cumsum": {
            "name": "test_cumsum",
            "location": 1356,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GroupByTest.test_cumprod": {
            "name": "test_cumprod",
            "location": 1426,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GroupByTest.test_nsmallest": {
            "name": "test_nsmallest",
            "location": 1509,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GroupByTest.test_nlargest": {
            "name": "test_nlargest",
            "location": 1548,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GroupByTest.test_fillna": {
            "name": "test_fillna",
            "location": 1587,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GroupByTest.test_ffill": {
            "name": "test_ffill",
            "location": 1688,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GroupByTest.test_bfill": {
            "name": "test_bfill",
            "location": 1739,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GroupByTest.test_shift": {
            "name": "test_shift",
            "location": 1791,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GroupByTest.test_apply": {
            "name": "test_apply",
            "location": 1863,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GroupByTest.test_apply_without_shortcut": {
            "name": "test_apply_without_shortcut",
            "location": 1951,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GroupByTest.test_apply_negative": {
            "name": "test_apply_negative",
            "location": 1955,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GroupByTest.test_apply_with_new_dataframe": {
            "name": "test_apply_with_new_dataframe",
            "location": 1962,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GroupByTest.test_apply_with_new_dataframe_without_shortcut": {
            "name": "test_apply_with_new_dataframe_without_shortcut",
            "location": 2005,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GroupByTest.test_apply_key_handling": {
            "name": "test_apply_key_handling",
            "location": 2009,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GroupByTest.test_apply_with_side_effect": {
            "name": "test_apply_with_side_effect",
            "location": 2024,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GroupByTest.test_transform": {
            "name": "test_transform",
            "location": 2053,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GroupByTest.test_transform_without_shortcut": {
            "name": "test_transform_without_shortcut",
            "location": 2118,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GroupByTest.test_filter": {
            "name": "test_filter",
            "location": 2122,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GroupByTest.test_idxmax": {
            "name": "test_idxmax",
            "location": 2191,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GroupByTest.test_idxmin": {
            "name": "test_idxmin",
            "location": 2238,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GroupByTest.test_head": {
            "name": "test_head",
            "location": 2285,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GroupByTest.test_missing": {
            "name": "test_missing",
            "location": 2407,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GroupByTest.test_is_multi_agg_with_relabel": {
            "name": "test_is_multi_agg_with_relabel",
            "location": 2507,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "GroupByTest.test_get_group": {
            "name": "test_get_group",
            "location": 2512,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GroupByTest.test_median": {
            "name": "test_median",
            "location": 2624,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GroupByTest.test_tail": {
            "name": "test_tail",
            "location": 2648,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GroupByTest.test_ddof": {
            "name": "test_ddof",
            "location": 2770,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GroupByTest.test_apply_negative.func": {
            "name": "func",
            "location": 1956,
            "return": [],
            "arguments": {
                "_": []
            }
        },
        "GroupByTest.test_apply_with_side_effect.sum_with_acc_frame": {
            "name": "sum_with_acc_frame",
            "location": 2032,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "GroupByTest.test_apply_with_side_effect.sum_with_acc_series": {
            "name": "sum_with_acc_series",
            "location": 2042,
            "return": [],
            "arguments": {
                "x": []
            }
        }
    },
    "koalas-master/databricks/koalas/tests/test_indexing.py": {
        "BasicIndexingTest.pdf": {
            "name": "pdf",
            "location": 31,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BasicIndexingTest.test_indexing": {
            "name": "test_indexing",
            "location": 37,
            "return": [
                "typing.Generator"
            ],
            "arguments": {
                "self": [],
                "df": []
            }
        },
        "BasicIndexingTest.test_from_pandas_with_explicit_index": {
            "name": "test_from_pandas_with_explicit_index",
            "location": 136,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BasicIndexingTest.test_limitations": {
            "name": "test_limitations",
            "location": 145,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IndexingTest.pdf": {
            "name": "pdf",
            "location": 157,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "IndexingTest.kdf": {
            "name": "kdf",
            "location": 164,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "IndexingTest.pdf2": {
            "name": "pdf2",
            "location": 168,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "IndexingTest.kdf2": {
            "name": "kdf2",
            "location": 175,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "IndexingTest.test_at": {
            "name": "test_at",
            "location": 178,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IndexingTest.test_at_multiindex": {
            "name": "test_at_multiindex",
            "location": 234,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IndexingTest.test_at_multiindex_columns": {
            "name": "test_at_multiindex_columns",
            "location": 253,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IndexingTest.test_iat": {
            "name": "test_iat",
            "location": 272,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IndexingTest.test_iat_multiindex": {
            "name": "test_iat_multiindex",
            "location": 315,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IndexingTest.test_iat_multiindex_columns": {
            "name": "test_iat_multiindex_columns",
            "location": 324,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IndexingTest.test_loc": {
            "name": "test_loc",
            "location": 337,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IndexingTest.test_loc_non_informative_index": {
            "name": "test_loc_non_informative_index",
            "location": 419,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IndexingTest.test_loc_with_series": {
            "name": "test_loc_with_series",
            "location": 429,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IndexingTest.test_loc_noindex": {
            "name": "test_loc_noindex",
            "location": 443,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IndexingTest.test_loc_multiindex": {
            "name": "test_loc_multiindex",
            "location": 454,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IndexingTest.test_loc2d_multiindex": {
            "name": "test_loc2d_multiindex",
            "location": 547,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IndexingTest.test_loc2d": {
            "name": "test_loc2d",
            "location": 561,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IndexingTest.test_loc2d_multiindex_columns": {
            "name": "test_loc2d_multiindex_columns",
            "location": 623,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IndexingTest.test_loc2d_with_known_divisions": {
            "name": "test_loc2d_with_known_divisions",
            "location": 684,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IndexingTest.test_loc2d_duplicated_columns": {
            "name": "test_loc2d_duplicated_columns",
            "location": 701,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IndexingTest.test_getitem": {
            "name": "test_getitem",
            "location": 725,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IndexingTest.test_getitem_slice": {
            "name": "test_getitem_slice",
            "location": 767,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IndexingTest.test_loc_on_numpy_datetimes": {
            "name": "test_loc_on_numpy_datetimes",
            "location": 781,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IndexingTest.test_loc_on_pandas_datetimes": {
            "name": "test_loc_on_pandas_datetimes",
            "location": 789,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IndexingTest.test_loc_datetime_no_freq": {
            "name": "test_loc_datetime_no_freq",
            "location": 798,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IndexingTest.test_loc_timestamp_str": {
            "name": "test_loc_timestamp_str",
            "location": 810,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IndexingTest.test_getitem_timestamp_str": {
            "name": "test_getitem_timestamp_str",
            "location": 846,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IndexingTest.test_getitem_period_str": {
            "name": "test_getitem_period_str",
            "location": 871,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IndexingTest.test_iloc": {
            "name": "test_iloc",
            "location": 895,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IndexingTest.test_iloc_multiindex_columns": {
            "name": "test_iloc_multiindex_columns",
            "location": 906,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IndexingTest.test_iloc_series": {
            "name": "test_iloc_series",
            "location": 919,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IndexingTest.test_iloc_slice_rows_sel": {
            "name": "test_iloc_slice_rows_sel",
            "location": 933,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IndexingTest.test_iloc_iterable_rows_sel": {
            "name": "test_iloc_iterable_rows_sel",
            "location": 958,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IndexingTest.test_frame_loc_setitem": {
            "name": "test_frame_loc_setitem",
            "location": 988,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IndexingTest.test_frame_iloc_setitem": {
            "name": "test_frame_iloc_setitem",
            "location": 1075,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IndexingTest.test_series_loc_setitem": {
            "name": "test_series_loc_setitem",
            "location": 1107,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IndexingTest.test_series_iloc_setitem": {
            "name": "test_series_iloc_setitem",
            "location": 1160,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IndexingTest.test_iloc_raises": {
            "name": "test_iloc_raises",
            "location": 1238,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IndexingTest.test_index_operator_datetime": {
            "name": "test_index_operator_datetime",
            "location": 1263,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IndexingTest.test_index_operator_int": {
            "name": "test_index_operator_int",
            "location": 1302,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "koalas-master/databricks/koalas/tests/test_indexops_spark.py": {
        "SparkIndexOpsMethodsTest.pser": {
            "name": "pser",
            "location": 27,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SparkIndexOpsMethodsTest.kser": {
            "name": "kser",
            "location": 31,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SparkIndexOpsMethodsTest.test_series_transform_negative": {
            "name": "test_series_transform_negative",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SparkIndexOpsMethodsTest.test_multiindex_transform_negative": {
            "name": "test_multiindex_transform_negative",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SparkIndexOpsMethodsTest.test_series_apply_negative": {
            "name": "test_series_apply_negative",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "koalas-master/databricks/koalas/tests/test_internal.py": {
        "InternalFrameTest.test_from_pandas": {
            "name": "test_from_pandas",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "koalas-master/databricks/koalas/tests/test_namespace.py": {
        "NamespaceTest.test_from_pandas": {
            "name": "test_from_pandas",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "NamespaceTest.test_to_datetime": {
            "name": "test_to_datetime",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "NamespaceTest.test_date_range": {
            "name": "test_date_range",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "NamespaceTest.test_concat_index_axis": {
            "name": "test_concat_index_axis",
            "location": 121,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "NamespaceTest.test_concat_column_axis": {
            "name": "test_concat_column_axis",
            "location": 239,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "NamespaceTest.test_broadcast": {
            "name": "test_broadcast",
            "location": 287,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "NamespaceTest.test_get_index_map": {
            "name": "test_get_index_map",
            "location": 306,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "NamespaceTest.test_get_index_map.check": {
            "name": "check",
            "location": 311,
            "return": [
                "None"
            ],
            "arguments": {
                "actual": [],
                "expected": []
            }
        }
    },
    "koalas-master/databricks/koalas/tests/test_numpy_compat.py": {
        "NumPyCompatTest.pdf": {
            "name": "pdf",
            "location": 51,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NumPyCompatTest.kdf": {
            "name": "kdf",
            "location": 58,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NumPyCompatTest.test_np_add_series": {
            "name": "test_np_add_series",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "NumPyCompatTest.test_np_add_index": {
            "name": "test_np_add_index",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "NumPyCompatTest.test_np_unsupported_series": {
            "name": "test_np_unsupported_series",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "NumPyCompatTest.test_np_unsupported_frame": {
            "name": "test_np_unsupported_frame",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "NumPyCompatTest.test_np_spark_compat_series": {
            "name": "test_np_spark_compat_series",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "NumPyCompatTest.test_np_spark_compat_frame": {
            "name": "test_np_spark_compat_frame",
            "location": 149,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "koalas-master/databricks/koalas/tests/test_ops_on_diff_frames.py": {
        "OpsOnDiffFramesEnabledTest.setUpClass": {
            "name": "setUpClass",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": []
            }
        },
        "OpsOnDiffFramesEnabledTest.tearDownClass": {
            "name": "tearDownClass",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": []
            }
        },
        "OpsOnDiffFramesEnabledTest.pdf1": {
            "name": "pdf1",
            "location": 49,
            "return": [
                "DataFrame"
            ],
            "arguments": {
                "self": []
            }
        },
        "OpsOnDiffFramesEnabledTest.pdf2": {
            "name": "pdf2",
            "location": 56,
            "return": [
                "DataFrame"
            ],
            "arguments": {
                "self": []
            }
        },
        "OpsOnDiffFramesEnabledTest.pdf3": {
            "name": "pdf3",
            "location": 63,
            "return": [
                "DataFrame"
            ],
            "arguments": {
                "self": []
            }
        },
        "OpsOnDiffFramesEnabledTest.pdf4": {
            "name": "pdf4",
            "location": 70,
            "return": [
                "DataFrame"
            ],
            "arguments": {
                "self": []
            }
        },
        "OpsOnDiffFramesEnabledTest.pdf5": {
            "name": "pdf5",
            "location": 77,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "OpsOnDiffFramesEnabledTest.pdf6": {
            "name": "pdf6",
            "location": 88,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "OpsOnDiffFramesEnabledTest.pser1": {
            "name": "pser1",
            "location": 100,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "OpsOnDiffFramesEnabledTest.pser2": {
            "name": "pser2",
            "location": 108,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "OpsOnDiffFramesEnabledTest.pser3": {
            "name": "pser3",
            "location": 116,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "OpsOnDiffFramesEnabledTest.kdf1": {
            "name": "kdf1",
            "location": 124,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "OpsOnDiffFramesEnabledTest.kdf2": {
            "name": "kdf2",
            "location": 128,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "OpsOnDiffFramesEnabledTest.kdf3": {
            "name": "kdf3",
            "location": 132,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "OpsOnDiffFramesEnabledTest.kdf4": {
            "name": "kdf4",
            "location": 136,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "OpsOnDiffFramesEnabledTest.kdf5": {
            "name": "kdf5",
            "location": 140,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "OpsOnDiffFramesEnabledTest.kdf6": {
            "name": "kdf6",
            "location": 144,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "OpsOnDiffFramesEnabledTest.kser1": {
            "name": "kser1",
            "location": 148,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "OpsOnDiffFramesEnabledTest.kser2": {
            "name": "kser2",
            "location": 152,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "OpsOnDiffFramesEnabledTest.kser3": {
            "name": "kser3",
            "location": 156,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "OpsOnDiffFramesEnabledTest.test_ranges": {
            "name": "test_ranges",
            "location": 159,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "OpsOnDiffFramesEnabledTest.test_no_matched_index": {
            "name": "test_no_matched_index",
            "location": 167,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "OpsOnDiffFramesEnabledTest.test_arithmetic": {
            "name": "test_arithmetic",
            "location": 173,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "OpsOnDiffFramesEnabledTest.test_arithmetic_extension_dtypes": {
            "name": "test_arithmetic_extension_dtypes",
            "location": 178,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "OpsOnDiffFramesEnabledTest.test_arithmetic_extension_float_dtypes": {
            "name": "test_arithmetic_extension_float_dtypes",
            "location": 191,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "OpsOnDiffFramesEnabledTest._test_arithmetic_frame": {
            "name": "_test_arithmetic_frame",
            "location": 199,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pdf1": [],
                "pdf2": []
            }
        },
        "OpsOnDiffFramesEnabledTest._test_arithmetic_series": {
            "name": "_test_arithmetic_series",
            "location": 256,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pser1": [],
                "pser2": []
            }
        },
        "OpsOnDiffFramesEnabledTest.test_arithmetic_chain": {
            "name": "test_arithmetic_chain",
            "location": 280,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "OpsOnDiffFramesEnabledTest.test_arithmetic_chain_extension_dtypes": {
            "name": "test_arithmetic_chain_extension_dtypes",
            "location": 287,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "OpsOnDiffFramesEnabledTest.test_arithmetic_chain_extension_float_dtypes": {
            "name": "test_arithmetic_chain_extension_float_dtypes",
            "location": 304,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "OpsOnDiffFramesEnabledTest._test_arithmetic_chain_frame": {
            "name": "_test_arithmetic_chain_frame",
            "location": 318,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pdf1": [],
                "pdf2": [],
                "pdf3": []
            }
        },
        "OpsOnDiffFramesEnabledTest._test_arithmetic_chain_series": {
            "name": "_test_arithmetic_chain_series",
            "location": 401,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pser1": [],
                "pser2": [],
                "pser3": []
            }
        },
        "OpsOnDiffFramesEnabledTest.test_mod": {
            "name": "test_mod",
            "location": 445,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "OpsOnDiffFramesEnabledTest.test_rmod": {
            "name": "test_rmod",
            "location": 455,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "OpsOnDiffFramesEnabledTest.test_getitem_boolean_series": {
            "name": "test_getitem_boolean_series",
            "location": 465,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "OpsOnDiffFramesEnabledTest.test_loc_getitem_boolean_series": {
            "name": "test_loc_getitem_boolean_series",
            "location": 484,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "OpsOnDiffFramesEnabledTest.test_bitwise": {
            "name": "test_bitwise",
            "location": 503,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "OpsOnDiffFramesEnabledTest.test_bitwise_extension_dtype": {
            "name": "test_bitwise_extension_dtype",
            "location": 523,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "OpsOnDiffFramesEnabledTest.test_concat_column_axis": {
            "name": "test_concat_column_axis",
            "location": 562,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "OpsOnDiffFramesEnabledTest.test_combine_first": {
            "name": "test_combine_first",
            "location": 614,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "OpsOnDiffFramesEnabledTest.test_insert": {
            "name": "test_insert",
            "location": 679,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "OpsOnDiffFramesEnabledTest.test_compare": {
            "name": "test_compare",
            "location": 721,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "OpsOnDiffFramesEnabledTest.test_different_columns": {
            "name": "test_different_columns",
            "location": 886,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "OpsOnDiffFramesEnabledTest.test_assignment_series": {
            "name": "test_assignment_series",
            "location": 904,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "OpsOnDiffFramesEnabledTest.test_assignment_frame": {
            "name": "test_assignment_frame",
            "location": 954,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "OpsOnDiffFramesEnabledTest.test_assignment_series_chain": {
            "name": "test_assignment_series_chain",
            "location": 1006,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "OpsOnDiffFramesEnabledTest.test_assignment_frame_chain": {
            "name": "test_assignment_frame_chain",
            "location": 1020,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "OpsOnDiffFramesEnabledTest.test_multi_index_arithmetic": {
            "name": "test_multi_index_arithmetic",
            "location": 1034,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "OpsOnDiffFramesEnabledTest.test_multi_index_assignment_series": {
            "name": "test_multi_index_assignment_series",
            "location": 1048,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "OpsOnDiffFramesEnabledTest.test_multi_index_assignment_frame": {
            "name": "test_multi_index_assignment_frame",
            "location": 1070,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "OpsOnDiffFramesEnabledTest.test_frame_loc_setitem": {
            "name": "test_frame_loc_setitem",
            "location": 1092,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "OpsOnDiffFramesEnabledTest.test_frame_iloc_setitem": {
            "name": "test_frame_iloc_setitem",
            "location": 1139,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "OpsOnDiffFramesEnabledTest.test_series_loc_setitem": {
            "name": "test_series_loc_setitem",
            "location": 1164,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "OpsOnDiffFramesEnabledTest.test_series_iloc_setitem": {
            "name": "test_series_iloc_setitem",
            "location": 1241,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "OpsOnDiffFramesEnabledTest.test_update": {
            "name": "test_update",
            "location": 1327,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "OpsOnDiffFramesEnabledTest.test_where": {
            "name": "test_where",
            "location": 1338,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "OpsOnDiffFramesEnabledTest.test_mask": {
            "name": "test_mask",
            "location": 1363,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "OpsOnDiffFramesEnabledTest.test_multi_index_column_assignment_frame": {
            "name": "test_multi_index_column_assignment_frame",
            "location": 1388,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "OpsOnDiffFramesEnabledTest.test_series_dot": {
            "name": "test_series_dot",
            "location": 1417,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "OpsOnDiffFramesEnabledTest.test_frame_dot": {
            "name": "test_frame_dot",
            "location": 1482,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "OpsOnDiffFramesEnabledTest.test_to_series_comparison": {
            "name": "test_to_series_comparison",
            "location": 1533,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "OpsOnDiffFramesEnabledTest.test_series_repeat": {
            "name": "test_series_repeat",
            "location": 1544,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "OpsOnDiffFramesEnabledTest.test_series_ops": {
            "name": "test_series_ops",
            "location": 1555,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "OpsOnDiffFramesEnabledTest.test_index_ops": {
            "name": "test_index_ops",
            "location": 1606,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "OpsOnDiffFramesEnabledTest.test_align": {
            "name": "test_align",
            "location": 1644,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "OpsOnDiffFramesEnabledTest.test_pow_and_rpow": {
            "name": "test_pow_and_rpow",
            "location": 1710,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "OpsOnDiffFramesEnabledTest.test_shift": {
            "name": "test_shift",
            "location": 1720,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "OpsOnDiffFramesEnabledTest.test_diff": {
            "name": "test_diff",
            "location": 1739,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "OpsOnDiffFramesEnabledTest.test_rank": {
            "name": "test_rank",
            "location": 1758,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "OpsOnDiffFramesDisabledTest.setUpClass": {
            "name": "setUpClass",
            "location": 1777,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": []
            }
        },
        "OpsOnDiffFramesDisabledTest.tearDownClass": {
            "name": "tearDownClass",
            "location": 1782,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": []
            }
        },
        "OpsOnDiffFramesDisabledTest.pdf1": {
            "name": "pdf1",
            "location": 1787,
            "return": [
                "DataFrame"
            ],
            "arguments": {
                "self": []
            }
        },
        "OpsOnDiffFramesDisabledTest.pdf2": {
            "name": "pdf2",
            "location": 1794,
            "return": [
                "DataFrame"
            ],
            "arguments": {
                "self": []
            }
        },
        "OpsOnDiffFramesDisabledTest.kdf1": {
            "name": "kdf1",
            "location": 1801,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "OpsOnDiffFramesDisabledTest.kdf2": {
            "name": "kdf2",
            "location": 1805,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "OpsOnDiffFramesDisabledTest.test_arithmetic": {
            "name": "test_arithmetic",
            "location": 1808,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "OpsOnDiffFramesDisabledTest.test_assignment": {
            "name": "test_assignment",
            "location": 1821,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "OpsOnDiffFramesDisabledTest.test_frame_loc_setitem": {
            "name": "test_frame_loc_setitem",
            "location": 1826,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "OpsOnDiffFramesDisabledTest.test_frame_iloc_setitem": {
            "name": "test_frame_iloc_setitem",
            "location": 1844,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "OpsOnDiffFramesDisabledTest.test_series_loc_setitem": {
            "name": "test_series_loc_setitem",
            "location": 1856,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "OpsOnDiffFramesDisabledTest.test_series_iloc_setitem": {
            "name": "test_series_iloc_setitem",
            "location": 1872,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "OpsOnDiffFramesDisabledTest.test_where": {
            "name": "test_where",
            "location": 1882,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "OpsOnDiffFramesDisabledTest.test_mask": {
            "name": "test_mask",
            "location": 1899,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "OpsOnDiffFramesDisabledTest.test_align": {
            "name": "test_align",
            "location": 1916,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "OpsOnDiffFramesDisabledTest.test_pow_and_rpow": {
            "name": "test_pow_and_rpow",
            "location": 1928,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "OpsOnDiffFramesEnabledTest._test_arithmetic_frame.assert_eq": {
            "name": "assert_eq",
            "location": 203,
            "return": [
                "None"
            ],
            "arguments": {
                "actual": [],
                "expected": []
            }
        },
        "OpsOnDiffFramesEnabledTest._test_arithmetic_series.assert_eq": {
            "name": "assert_eq",
            "location": 260,
            "return": [
                "None"
            ],
            "arguments": {
                "actual": [],
                "expected": []
            }
        },
        "OpsOnDiffFramesEnabledTest._test_arithmetic_chain_frame.assert_eq": {
            "name": "assert_eq",
            "location": 325,
            "return": [
                "None"
            ],
            "arguments": {
                "actual": [],
                "expected": []
            }
        },
        "OpsOnDiffFramesEnabledTest._test_arithmetic_chain_series.assert_eq": {
            "name": "assert_eq",
            "location": 406,
            "return": [
                "None"
            ],
            "arguments": {
                "actual": [],
                "expected": []
            }
        },
        "OpsOnDiffFramesEnabledTest.test_bitwise_extension_dtype.assert_eq": {
            "name": "assert_eq",
            "location": 524,
            "return": [
                "None"
            ],
            "arguments": {
                "actual": [],
                "expected": []
            }
        }
    },
    "koalas-master/databricks/koalas/tests/test_ops_on_diff_frames_groupby.py": {
        "OpsOnDiffFramesGroupByTest.setUpClass": {
            "name": "setUpClass",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": []
            }
        },
        "OpsOnDiffFramesGroupByTest.tearDownClass": {
            "name": "tearDownClass",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": []
            }
        },
        "OpsOnDiffFramesGroupByTest.test_groupby_different_lengths": {
            "name": "test_groupby_different_lengths",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "OpsOnDiffFramesGroupByTest.test_groupby_multiindex_columns": {
            "name": "test_groupby_multiindex_columns",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "OpsOnDiffFramesGroupByTest.test_split_apply_combine_on_series": {
            "name": "test_split_apply_combine_on_series",
            "location": 104,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "OpsOnDiffFramesGroupByTest.test_aggregate": {
            "name": "test_aggregate",
            "location": 155,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "OpsOnDiffFramesGroupByTest.test_duplicated_labels": {
            "name": "test_duplicated_labels",
            "location": 233,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "OpsOnDiffFramesGroupByTest.test_apply": {
            "name": "test_apply",
            "location": 247,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "OpsOnDiffFramesGroupByTest.test_transform": {
            "name": "test_transform",
            "location": 273,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "OpsOnDiffFramesGroupByTest.test_filter": {
            "name": "test_filter",
            "location": 299,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "OpsOnDiffFramesGroupByTest.test_head": {
            "name": "test_head",
            "location": 325,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "OpsOnDiffFramesGroupByTest.test_cumcount": {
            "name": "test_cumcount",
            "location": 352,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "OpsOnDiffFramesGroupByTest.test_cummin": {
            "name": "test_cummin",
            "location": 378,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "OpsOnDiffFramesGroupByTest.test_cummax": {
            "name": "test_cummax",
            "location": 402,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "OpsOnDiffFramesGroupByTest.test_cumsum": {
            "name": "test_cumsum",
            "location": 426,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "OpsOnDiffFramesGroupByTest.test_cumprod": {
            "name": "test_cumprod",
            "location": 450,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "OpsOnDiffFramesGroupByTest.test_diff": {
            "name": "test_diff",
            "location": 478,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "OpsOnDiffFramesGroupByTest.test_rank": {
            "name": "test_rank",
            "location": 502,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "OpsOnDiffFramesGroupByTest.test_shift": {
            "name": "test_shift",
            "location": 527,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "OpsOnDiffFramesGroupByTest.test_fillna": {
            "name": "test_fillna",
            "location": 553,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "koalas-master/databricks/koalas/tests/test_ops_on_diff_frames_groupby_expanding.py": {
        "OpsOnDiffFramesGroupByExpandingTest.setUpClass": {
            "name": "setUpClass",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": []
            }
        },
        "OpsOnDiffFramesGroupByExpandingTest.tearDownClass": {
            "name": "tearDownClass",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": []
            }
        },
        "OpsOnDiffFramesGroupByExpandingTest._test_groupby_expanding_func": {
            "name": "_test_groupby_expanding_func",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "f": []
            }
        },
        "OpsOnDiffFramesGroupByExpandingTest.test_groupby_expanding_count": {
            "name": "test_groupby_expanding_count",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "OpsOnDiffFramesGroupByExpandingTest.test_groupby_expanding_min": {
            "name": "test_groupby_expanding_min",
            "location": 105,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "OpsOnDiffFramesGroupByExpandingTest.test_groupby_expanding_max": {
            "name": "test_groupby_expanding_max",
            "location": 108,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "OpsOnDiffFramesGroupByExpandingTest.test_groupby_expanding_mean": {
            "name": "test_groupby_expanding_mean",
            "location": 111,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "OpsOnDiffFramesGroupByExpandingTest.test_groupby_expanding_sum": {
            "name": "test_groupby_expanding_sum",
            "location": 114,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "OpsOnDiffFramesGroupByExpandingTest.test_groupby_expanding_std": {
            "name": "test_groupby_expanding_std",
            "location": 117,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "OpsOnDiffFramesGroupByExpandingTest.test_groupby_expanding_var": {
            "name": "test_groupby_expanding_var",
            "location": 120,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "koalas-master/databricks/koalas/tests/test_ops_on_diff_frames_groupby_rolling.py": {
        "OpsOnDiffFramesGroupByRollingTest.setUpClass": {
            "name": "setUpClass",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": []
            }
        },
        "OpsOnDiffFramesGroupByRollingTest.tearDownClass": {
            "name": "tearDownClass",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": []
            }
        },
        "OpsOnDiffFramesGroupByRollingTest._test_groupby_rolling_func": {
            "name": "_test_groupby_rolling_func",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "f": []
            }
        },
        "OpsOnDiffFramesGroupByRollingTest.test_groupby_rolling_count": {
            "name": "test_groupby_rolling_count",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "OpsOnDiffFramesGroupByRollingTest.test_groupby_rolling_min": {
            "name": "test_groupby_rolling_min",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "OpsOnDiffFramesGroupByRollingTest.test_groupby_rolling_max": {
            "name": "test_groupby_rolling_max",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "OpsOnDiffFramesGroupByRollingTest.test_groupby_rolling_mean": {
            "name": "test_groupby_rolling_mean",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "OpsOnDiffFramesGroupByRollingTest.test_groupby_rolling_sum": {
            "name": "test_groupby_rolling_sum",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "OpsOnDiffFramesGroupByRollingTest.test_groupby_rolling_std": {
            "name": "test_groupby_rolling_std",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "OpsOnDiffFramesGroupByRollingTest.test_groupby_rolling_var": {
            "name": "test_groupby_rolling_var",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "koalas-master/databricks/koalas/tests/test_repr.py": {
        "ReprTest.setUpClass": {
            "name": "setUpClass",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": []
            }
        },
        "ReprTest.tearDownClass": {
            "name": "tearDownClass",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": []
            }
        },
        "ReprTest.test_repr_dataframe": {
            "name": "test_repr_dataframe",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ReprTest.test_repr_series": {
            "name": "test_repr_series",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ReprTest.test_repr_indexes": {
            "name": "test_repr_indexes",
            "location": 104,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ReprTest.test_html_repr": {
            "name": "test_html_repr",
            "location": 141,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ReprTest.test_repr_float_index": {
            "name": "test_repr_float_index",
            "location": 153,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "koalas-master/databricks/koalas/tests/test_reshape.py": {
        "ReshapeTest.test_get_dummies": {
            "name": "test_get_dummies",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ReshapeTest.test_get_dummies_object": {
            "name": "test_get_dummies_object",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ReshapeTest.test_get_dummies_date_datetime": {
            "name": "test_get_dummies_date_datetime",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ReshapeTest.test_get_dummies_boolean": {
            "name": "test_get_dummies_boolean",
            "location": 123,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ReshapeTest.test_get_dummies_decimal": {
            "name": "test_get_dummies_decimal",
            "location": 135,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ReshapeTest.test_get_dummies_kwargs": {
            "name": "test_get_dummies_kwargs",
            "location": 149,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ReshapeTest.test_get_dummies_prefix": {
            "name": "test_get_dummies_prefix",
            "location": 174,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ReshapeTest.test_get_dummies_dtype": {
            "name": "test_get_dummies_dtype",
            "location": 223,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ReshapeTest.test_get_dummies_multiindex_columns": {
            "name": "test_get_dummies_multiindex_columns",
            "location": 241,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "koalas-master/databricks/koalas/tests/test_rolling.py": {
        "RollingTest.test_rolling_error": {
            "name": "test_rolling_error",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RollingTest._test_rolling_func": {
            "name": "_test_rolling_func",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "f": []
            }
        },
        "RollingTest.test_rolling_min": {
            "name": "test_rolling_min",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RollingTest.test_rolling_max": {
            "name": "test_rolling_max",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RollingTest.test_rolling_mean": {
            "name": "test_rolling_mean",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RollingTest.test_rolling_sum": {
            "name": "test_rolling_sum",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RollingTest.test_rolling_count": {
            "name": "test_rolling_count",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RollingTest.test_rolling_std": {
            "name": "test_rolling_std",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RollingTest.test_rolling_var": {
            "name": "test_rolling_var",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RollingTest._test_groupby_rolling_func": {
            "name": "_test_groupby_rolling_func",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "f": []
            }
        },
        "RollingTest.test_groupby_rolling_count": {
            "name": "test_groupby_rolling_count",
            "location": 151,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RollingTest.test_groupby_rolling_min": {
            "name": "test_groupby_rolling_min",
            "location": 154,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RollingTest.test_groupby_rolling_max": {
            "name": "test_groupby_rolling_max",
            "location": 157,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RollingTest.test_groupby_rolling_mean": {
            "name": "test_groupby_rolling_mean",
            "location": 160,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RollingTest.test_groupby_rolling_sum": {
            "name": "test_groupby_rolling_sum",
            "location": 163,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RollingTest.test_groupby_rolling_std": {
            "name": "test_groupby_rolling_std",
            "location": 166,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RollingTest.test_groupby_rolling_var": {
            "name": "test_groupby_rolling_var",
            "location": 170,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "koalas-master/databricks/koalas/tests/test_series.py": {
        "SeriesTest.pser": {
            "name": "pser",
            "location": 48,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SeriesTest.kser": {
            "name": "kser",
            "location": 52,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SeriesTest.test_series_ops": {
            "name": "test_series_ops",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SeriesTest.test_series_tuple_name": {
            "name": "test_series_tuple_name",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SeriesTest.test_repr_cache_invalidation": {
            "name": "test_repr_cache_invalidation",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SeriesTest._check_extension": {
            "name": "_check_extension",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "kser": [],
                "pser": []
            }
        },
        "SeriesTest.test_extension_dtypes": {
            "name": "test_extension_dtypes",
            "location": 95,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SeriesTest.test_extension_object_dtypes": {
            "name": "test_extension_object_dtypes",
            "location": 111,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SeriesTest.test_extension_float_dtypes": {
            "name": "test_extension_float_dtypes",
            "location": 129,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SeriesTest.test_empty_series": {
            "name": "test_empty_series",
            "location": 140,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SeriesTest.test_all_null_series": {
            "name": "test_all_null_series",
            "location": 157,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SeriesTest.test_head": {
            "name": "test_head",
            "location": 174,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SeriesTest.test_last": {
            "name": "test_last",
            "location": 183,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SeriesTest.test_first": {
            "name": "test_first",
            "location": 192,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SeriesTest.test_rename": {
            "name": "test_rename",
            "location": 201,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SeriesTest.test_rename_method": {
            "name": "test_rename_method",
            "location": 230,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SeriesTest.test_rename_axis": {
            "name": "test_rename_axis",
            "location": 269,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SeriesTest.test_or": {
            "name": "test_or",
            "location": 354,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SeriesTest.test_or_extenstion_dtypes": {
            "name": "test_or_extenstion_dtypes",
            "location": 374,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SeriesTest.test_and": {
            "name": "test_and",
            "location": 391,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SeriesTest.test_and_extenstion_dtypes": {
            "name": "test_and_extenstion_dtypes",
            "location": 411,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SeriesTest.test_to_numpy": {
            "name": "test_to_numpy",
            "location": 428,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SeriesTest.test_isin": {
            "name": "test_isin",
            "location": 434,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SeriesTest.test_drop_duplicates": {
            "name": "test_drop_duplicates",
            "location": 447,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SeriesTest.test_reindex": {
            "name": "test_reindex",
            "location": 466,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SeriesTest.test_reindex_like": {
            "name": "test_reindex_like",
            "location": 489,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SeriesTest.test_fillna": {
            "name": "test_fillna",
            "location": 546,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SeriesTest.test_dropna": {
            "name": "test_dropna",
            "location": 597,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SeriesTest.test_nunique": {
            "name": "test_nunique",
            "location": 611,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SeriesTest._test_value_counts": {
            "name": "_test_value_counts",
            "location": 629,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SeriesTest.test_value_counts": {
            "name": "test_value_counts",
            "location": 857,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SeriesTest.test_nsmallest": {
            "name": "test_nsmallest",
            "location": 868,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SeriesTest.test_nlargest": {
            "name": "test_nlargest",
            "location": 876,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SeriesTest.test_isnull": {
            "name": "test_isnull",
            "location": 884,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SeriesTest.test_all": {
            "name": "test_all",
            "location": 897,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SeriesTest.test_any": {
            "name": "test_any",
            "location": 921,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SeriesTest.test_reset_index": {
            "name": "test_reset_index",
            "location": 945,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SeriesTest.test_reset_index_with_default_index_types": {
            "name": "test_reset_index_with_default_index_types",
            "location": 962,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SeriesTest.test_index_to_series_reset_index": {
            "name": "test_index_to_series_reset_index",
            "location": 979,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SeriesTest.test_sort_values": {
            "name": "test_sort_values",
            "location": 997,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SeriesTest.test_sort_index": {
            "name": "test_sort_index",
            "location": 1024,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SeriesTest.test_to_datetime": {
            "name": "test_to_datetime",
            "location": 1066,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SeriesTest.test_missing": {
            "name": "test_missing",
            "location": 1075,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SeriesTest.test_clip": {
            "name": "test_clip",
            "location": 1123,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SeriesTest.test_compare": {
            "name": "test_compare",
            "location": 1147,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SeriesTest.test_is_unique": {
            "name": "test_is_unique",
            "location": 1173,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SeriesTest.test_to_list": {
            "name": "test_to_list",
            "location": 1195,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SeriesTest.test_append": {
            "name": "test_append",
            "location": 1198,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SeriesTest.test_map": {
            "name": "test_map",
            "location": 1217,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SeriesTest.test_add_prefix": {
            "name": "test_add_prefix",
            "location": 1234,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SeriesTest.test_add_suffix": {
            "name": "test_add_suffix",
            "location": 1247,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SeriesTest.test_cummin": {
            "name": "test_cummin",
            "location": 1260,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SeriesTest.test_cummax": {
            "name": "test_cummax",
            "location": 1273,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SeriesTest.test_cumsum": {
            "name": "test_cumsum",
            "location": 1286,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SeriesTest.test_cumprod": {
            "name": "test_cumprod",
            "location": 1305,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SeriesTest.test_median": {
            "name": "test_median",
            "location": 1343,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SeriesTest.test_rank": {
            "name": "test_rank",
            "location": 1347,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SeriesTest.test_round": {
            "name": "test_round",
            "location": 1362,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SeriesTest.test_quantile": {
            "name": "test_quantile",
            "location": 1370,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SeriesTest.test_idxmax": {
            "name": "test_idxmax",
            "location": 1389,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SeriesTest.test_idxmin": {
            "name": "test_idxmin",
            "location": 1415,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SeriesTest.test_shift": {
            "name": "test_shift",
            "location": 1441,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SeriesTest.test_diff": {
            "name": "test_diff",
            "location": 1456,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SeriesTest._test_numeric_astype": {
            "name": "_test_numeric_astype",
            "location": 1464,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pser": []
            }
        },
        "SeriesTest.test_astype": {
            "name": "test_astype",
            "location": 1535,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SeriesTest.test_aggregate": {
            "name": "test_aggregate",
            "location": 1616,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SeriesTest.test_drop": {
            "name": "test_drop",
            "location": 1628,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SeriesTest.test_pop": {
            "name": "test_pop",
            "location": 1677,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SeriesTest.test_replace": {
            "name": "test_replace",
            "location": 1696,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SeriesTest.test_xs": {
            "name": "test_xs",
            "location": 1719,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SeriesTest.test_duplicates": {
            "name": "test_duplicates",
            "location": 1729,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SeriesTest.test_update": {
            "name": "test_update",
            "location": 1747,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SeriesTest.test_where": {
            "name": "test_where",
            "location": 1755,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SeriesTest.test_mask": {
            "name": "test_mask",
            "location": 1761,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SeriesTest.test_truncate": {
            "name": "test_truncate",
            "location": 1767,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SeriesTest.test_getitem": {
            "name": "test_getitem",
            "location": 1797,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SeriesTest.test_keys": {
            "name": "test_keys",
            "location": 1821,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SeriesTest.test_index": {
            "name": "test_index",
            "location": 1831,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SeriesTest.test_pct_change": {
            "name": "test_pct_change",
            "location": 1846,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SeriesTest.test_axes": {
            "name": "test_axes",
            "location": 1872,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SeriesTest.test_udt": {
            "name": "test_udt",
            "location": 1886,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SeriesTest.test_repeat": {
            "name": "test_repeat",
            "location": 1899,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SeriesTest.test_take": {
            "name": "test_take",
            "location": 1917,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SeriesTest.test_divmod": {
            "name": "test_divmod",
            "location": 1936,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SeriesTest.test_rdivmod": {
            "name": "test_rdivmod",
            "location": 1961,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SeriesTest.test_mod": {
            "name": "test_mod",
            "location": 1986,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SeriesTest.test_mode": {
            "name": "test_mode",
            "location": 1998,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SeriesTest.test_rmod": {
            "name": "test_rmod",
            "location": 2019,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SeriesTest.test_asof": {
            "name": "test_asof",
            "location": 2031,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SeriesTest.test_squeeze": {
            "name": "test_squeeze",
            "location": 2063,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SeriesTest.test_swaplevel": {
            "name": "test_swaplevel",
            "location": 2086,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SeriesTest.test_swapaxes": {
            "name": "test_swapaxes",
            "location": 2118,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SeriesTest.test_div_zero_and_nan": {
            "name": "test_div_zero_and_nan",
            "location": 2130,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SeriesTest.test_mad": {
            "name": "test_mad",
            "location": 2153,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SeriesTest.test_to_frame": {
            "name": "test_to_frame",
            "location": 2182,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SeriesTest.test_shape": {
            "name": "test_shape",
            "location": 2195,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SeriesTest.test_to_markdown": {
            "name": "test_to_markdown",
            "location": 2208,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SeriesTest.test_unstack": {
            "name": "test_unstack",
            "location": 2218,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SeriesTest.test_item": {
            "name": "test_item",
            "location": 2257,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SeriesTest.test_filter": {
            "name": "test_filter",
            "location": 2261,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SeriesTest.test_abs": {
            "name": "test_abs",
            "location": 2288,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SeriesTest.test_bfill": {
            "name": "test_bfill",
            "location": 2295,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SeriesTest.test_ffill": {
            "name": "test_ffill",
            "location": 2311,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SeriesTest.test_iteritems": {
            "name": "test_iteritems",
            "location": 2327,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SeriesTest.test_droplevel": {
            "name": "test_droplevel",
            "location": 2335,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SeriesTest.test_dot": {
            "name": "test_dot",
            "location": 2397,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SeriesTest.test_tail": {
            "name": "test_tail",
            "location": 2409,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SeriesTest.test_product": {
            "name": "test_product",
            "location": 2428,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SeriesTest.test_hasnans": {
            "name": "test_hasnans",
            "location": 2487,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SeriesTest.test_last_valid_index": {
            "name": "test_last_valid_index",
            "location": 2510,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SeriesTest.test_first_valid_index": {
            "name": "test_first_valid_index",
            "location": 2529,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SeriesTest.test_factorize": {
            "name": "test_factorize",
            "location": 2535,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SeriesTest.test_pad": {
            "name": "test_pad",
            "location": 2642,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SeriesTest.test_explode": {
            "name": "test_explode",
            "location": 2661,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SeriesTest.test_argsort": {
            "name": "test_argsort",
            "location": 2707,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SeriesTest.test_argmin_argmax": {
            "name": "test_argmin_argmax",
            "location": 2800,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SeriesTest.test_backfill": {
            "name": "test_backfill",
            "location": 2850,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SeriesTest.test_align": {
            "name": "test_align",
            "location": 2869,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SeriesTest.test_pow_and_rpow": {
            "name": "test_pow_and_rpow",
            "location": 2887,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SeriesTest.test_between_time": {
            "name": "test_between_time",
            "location": 2896,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SeriesTest.test_at_time": {
            "name": "test_at_time",
            "location": 2919,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SeriesTest.test_index_to_series_reset_index.check": {
            "name": "check",
            "location": 980,
            "return": [
                "None"
            ],
            "arguments": {
                "kser": [],
                "pser": []
            }
        },
        "SeriesTest.test_map.tomorrow": {
            "name": "tomorrow",
            "location": 1227,
            "return": [],
            "arguments": {
                "date": []
            }
        }
    },
    "koalas-master/databricks/koalas/tests/test_series_conversion.py": {
        "SeriesConversionTest.pser": {
            "name": "pser",
            "location": 28,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SeriesConversionTest.kser": {
            "name": "kser",
            "location": 32,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SeriesConversionTest.test_to_clipboard": {
            "name": "test_to_clipboard",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SeriesConversionTest.test_to_latex": {
            "name": "test_to_latex",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "koalas-master/databricks/koalas/tests/test_series_datetime.py": {
        "SeriesDateTimeTest.pdf1": {
            "name": "pdf1",
            "location": 28,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SeriesDateTimeTest.pd_start_date": {
            "name": "pd_start_date",
            "location": 34,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SeriesDateTimeTest.ks_start_date": {
            "name": "ks_start_date",
            "location": 38,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SeriesDateTimeTest.check_func": {
            "name": "check_func",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "func": []
            }
        },
        "SeriesDateTimeTest.test_timestamp_subtraction": {
            "name": "test_timestamp_subtraction",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SeriesDateTimeTest.test_arithmetic_op_exceptions": {
            "name": "test_arithmetic_op_exceptions",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SeriesDateTimeTest.test_date_subtraction": {
            "name": "test_date_subtraction",
            "location": 111,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SeriesDateTimeTest.test_div": {
            "name": "test_div",
            "location": 145,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SeriesDateTimeTest.test_date": {
            "name": "test_date",
            "location": 156,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SeriesDateTimeTest.test_time": {
            "name": "test_time",
            "location": 159,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SeriesDateTimeTest.test_timetz": {
            "name": "test_timetz",
            "location": 163,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SeriesDateTimeTest.test_year": {
            "name": "test_year",
            "location": 167,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SeriesDateTimeTest.test_month": {
            "name": "test_month",
            "location": 170,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SeriesDateTimeTest.test_day": {
            "name": "test_day",
            "location": 173,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SeriesDateTimeTest.test_hour": {
            "name": "test_hour",
            "location": 176,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SeriesDateTimeTest.test_minute": {
            "name": "test_minute",
            "location": 179,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SeriesDateTimeTest.test_second": {
            "name": "test_second",
            "location": 182,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SeriesDateTimeTest.test_microsecond": {
            "name": "test_microsecond",
            "location": 185,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SeriesDateTimeTest.test_nanosecond": {
            "name": "test_nanosecond",
            "location": 188,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SeriesDateTimeTest.test_week": {
            "name": "test_week",
            "location": 192,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SeriesDateTimeTest.test_weekofyear": {
            "name": "test_weekofyear",
            "location": 195,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SeriesDateTimeTest.test_dayofweek": {
            "name": "test_dayofweek",
            "location": 198,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SeriesDateTimeTest.test_weekday": {
            "name": "test_weekday",
            "location": 201,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SeriesDateTimeTest.test_dayofyear": {
            "name": "test_dayofyear",
            "location": 204,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SeriesDateTimeTest.test_quarter": {
            "name": "test_quarter",
            "location": 207,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SeriesDateTimeTest.test_is_month_start": {
            "name": "test_is_month_start",
            "location": 210,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SeriesDateTimeTest.test_is_month_end": {
            "name": "test_is_month_end",
            "location": 213,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SeriesDateTimeTest.test_is_quarter_start": {
            "name": "test_is_quarter_start",
            "location": 216,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SeriesDateTimeTest.test_is_quarter_end": {
            "name": "test_is_quarter_end",
            "location": 219,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SeriesDateTimeTest.test_is_year_start": {
            "name": "test_is_year_start",
            "location": 222,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SeriesDateTimeTest.test_is_year_end": {
            "name": "test_is_year_end",
            "location": 225,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SeriesDateTimeTest.test_is_leap_year": {
            "name": "test_is_leap_year",
            "location": 228,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SeriesDateTimeTest.test_daysinmonth": {
            "name": "test_daysinmonth",
            "location": 231,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SeriesDateTimeTest.test_days_in_month": {
            "name": "test_days_in_month",
            "location": 234,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SeriesDateTimeTest.test_tz_localize": {
            "name": "test_tz_localize",
            "location": 238,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SeriesDateTimeTest.test_tz_convert": {
            "name": "test_tz_convert",
            "location": 242,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SeriesDateTimeTest.test_normalize": {
            "name": "test_normalize",
            "location": 245,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SeriesDateTimeTest.test_strftime": {
            "name": "test_strftime",
            "location": 248,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SeriesDateTimeTest.test_round": {
            "name": "test_round",
            "location": 251,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SeriesDateTimeTest.test_floor": {
            "name": "test_floor",
            "location": 255,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SeriesDateTimeTest.test_ceil": {
            "name": "test_ceil",
            "location": 259,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SeriesDateTimeTest.test_month_name": {
            "name": "test_month_name",
            "location": 263,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SeriesDateTimeTest.test_day_name": {
            "name": "test_day_name",
            "location": 267,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SeriesDateTimeTest.test_unsupported_type": {
            "name": "test_unsupported_type",
            "location": 271,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "koalas-master/databricks/koalas/tests/test_series_string.py": {
        "SeriesStringTest.pser": {
            "name": "pser",
            "location": 28,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SeriesStringTest.check_func": {
            "name": "check_func",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "func": [],
                "almost": [
                    "bool"
                ]
            }
        },
        "SeriesStringTest.check_func_on_series": {
            "name": "check_func_on_series",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "func": [],
                "pser": [],
                "almost": [
                    "bool"
                ]
            }
        },
        "SeriesStringTest.test_string_add_str_num": {
            "name": "test_string_add_str_num",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SeriesStringTest.test_string_add_assign": {
            "name": "test_string_add_assign",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SeriesStringTest.test_string_add_str_str": {
            "name": "test_string_add_str_str",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SeriesStringTest.test_string_add_str_lit": {
            "name": "test_string_add_str_lit",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SeriesStringTest.test_string_capitalize": {
            "name": "test_string_capitalize",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SeriesStringTest.test_string_title": {
            "name": "test_string_title",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SeriesStringTest.test_string_lower": {
            "name": "test_string_lower",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SeriesStringTest.test_string_upper": {
            "name": "test_string_upper",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SeriesStringTest.test_string_swapcase": {
            "name": "test_string_swapcase",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SeriesStringTest.test_string_startswith": {
            "name": "test_string_startswith",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SeriesStringTest.test_string_endswith": {
            "name": "test_string_endswith",
            "location": 97,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SeriesStringTest.test_string_strip": {
            "name": "test_string_strip",
            "location": 102,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SeriesStringTest.test_string_lstrip": {
            "name": "test_string_lstrip",
            "location": 107,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SeriesStringTest.test_string_rstrip": {
            "name": "test_string_rstrip",
            "location": 112,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SeriesStringTest.test_string_get": {
            "name": "test_string_get",
            "location": 117,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SeriesStringTest.test_string_isalnum": {
            "name": "test_string_isalnum",
            "location": 121,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SeriesStringTest.test_string_isalpha": {
            "name": "test_string_isalpha",
            "location": 124,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SeriesStringTest.test_string_isdigit": {
            "name": "test_string_isdigit",
            "location": 127,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SeriesStringTest.test_string_isspace": {
            "name": "test_string_isspace",
            "location": 130,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SeriesStringTest.test_string_islower": {
            "name": "test_string_islower",
            "location": 133,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SeriesStringTest.test_string_isupper": {
            "name": "test_string_isupper",
            "location": 136,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SeriesStringTest.test_string_istitle": {
            "name": "test_string_istitle",
            "location": 139,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SeriesStringTest.test_string_isnumeric": {
            "name": "test_string_isnumeric",
            "location": 142,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SeriesStringTest.test_string_isdecimal": {
            "name": "test_string_isdecimal",
            "location": 145,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SeriesStringTest.test_string_cat": {
            "name": "test_string_cat",
            "location": 148,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SeriesStringTest.test_string_center": {
            "name": "test_string_center",
            "location": 153,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SeriesStringTest.test_string_contains": {
            "name": "test_string_contains",
            "location": 158,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SeriesStringTest.test_string_count": {
            "name": "test_string_count",
            "location": 164,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SeriesStringTest.test_string_decode": {
            "name": "test_string_decode",
            "location": 168,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SeriesStringTest.test_string_encode": {
            "name": "test_string_encode",
            "location": 173,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SeriesStringTest.test_string_extract": {
            "name": "test_string_extract",
            "location": 178,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SeriesStringTest.test_string_extractall": {
            "name": "test_string_extractall",
            "location": 183,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SeriesStringTest.test_string_find": {
            "name": "test_string_find",
            "location": 188,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SeriesStringTest.test_string_findall": {
            "name": "test_string_findall",
            "location": 193,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SeriesStringTest.test_string_index": {
            "name": "test_string_index",
            "location": 199,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SeriesStringTest.test_string_join": {
            "name": "test_string_join",
            "location": 207,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SeriesStringTest.test_string_len": {
            "name": "test_string_len",
            "location": 212,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SeriesStringTest.test_string_ljust": {
            "name": "test_string_ljust",
            "location": 217,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SeriesStringTest.test_string_match": {
            "name": "test_string_match",
            "location": 222,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SeriesStringTest.test_string_normalize": {
            "name": "test_string_normalize",
            "location": 228,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SeriesStringTest.test_string_pad": {
            "name": "test_string_pad",
            "location": 232,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SeriesStringTest.test_string_partition": {
            "name": "test_string_partition",
            "location": 237,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SeriesStringTest.test_string_repeat": {
            "name": "test_string_repeat",
            "location": 241,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SeriesStringTest.test_string_replace": {
            "name": "test_string_replace",
            "location": 246,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SeriesStringTest.test_string_rfind": {
            "name": "test_string_rfind",
            "location": 257,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SeriesStringTest.test_string_rindex": {
            "name": "test_string_rindex",
            "location": 262,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SeriesStringTest.test_string_rjust": {
            "name": "test_string_rjust",
            "location": 270,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SeriesStringTest.test_string_rpartition": {
            "name": "test_string_rpartition",
            "location": 275,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SeriesStringTest.test_string_slice": {
            "name": "test_string_slice",
            "location": 279,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SeriesStringTest.test_string_slice_replace": {
            "name": "test_string_slice_replace",
            "location": 285,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SeriesStringTest.test_string_split": {
            "name": "test_string_split",
            "location": 290,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SeriesStringTest.test_string_rsplit": {
            "name": "test_string_rsplit",
            "location": 300,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SeriesStringTest.test_string_translate": {
            "name": "test_string_translate",
            "location": 310,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SeriesStringTest.test_string_wrap": {
            "name": "test_string_wrap",
            "location": 314,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SeriesStringTest.test_string_zfill": {
            "name": "test_string_zfill",
            "location": 322,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SeriesStringTest.test_string_get_dummies": {
            "name": "test_string_get_dummies",
            "location": 325,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "koalas-master/databricks/koalas/tests/test_sql.py": {
        "SQLTest.test_error_variable_not_exist": {
            "name": "test_error_variable_not_exist",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SQLTest.test_error_unsupported_type": {
            "name": "test_error_unsupported_type",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SQLTest.test_error_bad_sql": {
            "name": "test_error_bad_sql",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "koalas-master/databricks/koalas/tests/test_stats.py": {
        "StatsTest._test_stat_functions": {
            "name": "_test_stat_functions",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pdf_or_pser": [],
                "kdf_or_kser": []
            }
        },
        "StatsTest.test_stat_functions": {
            "name": "test_stat_functions",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "StatsTest.test_stat_functions_multiindex_column": {
            "name": "test_stat_functions_multiindex_column",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "StatsTest.test_stat_functions_with_no_numeric_columns": {
            "name": "test_stat_functions_with_no_numeric_columns",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "StatsTest.test_sum": {
            "name": "test_sum",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "StatsTest.test_product": {
            "name": "test_product",
            "location": 108,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "StatsTest.test_abs": {
            "name": "test_abs",
            "location": 130,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "StatsTest.test_axis_on_dataframe": {
            "name": "test_axis_on_dataframe",
            "location": 158,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "StatsTest.test_corr": {
            "name": "test_corr",
            "location": 227,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "StatsTest.test_cov_corr_meta": {
            "name": "test_cov_corr_meta",
            "location": 261,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "StatsTest.test_stats_on_boolean_dataframe": {
            "name": "test_stats_on_boolean_dataframe",
            "location": 280,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "StatsTest.test_stats_on_boolean_series": {
            "name": "test_stats_on_boolean_series",
            "location": 299,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "StatsTest.test_stats_on_non_numeric_columns_should_be_discarded_if_numeric_only_is_true": {
            "name": "test_stats_on_non_numeric_columns_should_be_discarded_if_numeric_only_is_true",
            "location": 318,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "StatsTest.test_numeric_only_unsupported": {
            "name": "test_numeric_only_unsupported",
            "location": 386,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "koalas-master/databricks/koalas/tests/test_typedef.py": {
        "TypeHintTests.test_infer_schema_from_pandas_instances": {
            "name": "test_infer_schema_from_pandas_instances",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TypeHintTests.test_if_pandas_implements_class_getitem": {
            "name": "test_if_pandas_implements_class_getitem",
            "location": 141,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TypeHintTests.test_infer_schema_with_names_pandas_instances": {
            "name": "test_infer_schema_with_names_pandas_instances",
            "location": 152,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TypeHintTests.test_infer_schema_with_names_pandas_instances_negative": {
            "name": "test_infer_schema_with_names_pandas_instances_negative",
            "location": 205,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TypeHintTests.test_infer_schema_with_names_negative": {
            "name": "test_infer_schema_with_names_negative",
            "location": 252,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TypeHintTests.test_as_spark_type_koalas_dtype": {
            "name": "test_as_spark_type_koalas_dtype",
            "location": 299,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TypeHintTests.test_as_spark_type_extension_dtypes": {
            "name": "test_as_spark_type_extension_dtypes",
            "location": 382,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TypeHintTests.test_as_spark_type_extension_object_dtypes": {
            "name": "test_as_spark_type_extension_object_dtypes",
            "location": 399,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TypeHintTests.test_as_spark_type_extension_float_dtypes": {
            "name": "test_as_spark_type_extension_float_dtypes",
            "location": 414,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TypeHintTests.test_infer_schema_from_pandas_instances.func": {
            "name": "func",
            "location": 133,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "TypeHintTests.test_infer_schema_with_names_pandas_instances.func": {
            "name": "func",
            "location": 193,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "TypeHintTests.test_infer_schema_with_names_pandas_instances_negative.try_infer_return_type": {
            "name": "try_infer_return_type",
            "location": 244,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "TypeHintTests.test_infer_schema_with_names_negative.try_infer_return_type": {
            "name": "try_infer_return_type",
            "location": 291,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "TypeHintTests.test_infer_schema_with_names_pandas_instances_negative.try_infer_return_type.f": {
            "name": "f",
            "location": 245,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "TypeHintTests.test_infer_schema_with_names_negative.try_infer_return_type.f": {
            "name": "f",
            "location": 292,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "koalas-master/databricks/koalas/tests/test_utils.py": {
        "UtilsTest.to_html": {
            "name": "to_html",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "max_rows": [
                    "None"
                ],
                "unsupported_param": [
                    "None"
                ]
            }
        },
        "UtilsTest.to_clipboard": {
            "name": "to_clipboard",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sep": [
                    "typing.Text"
                ]
            }
        },
        "UtilsTest.test_validate_arguments_and_invoke_function": {
            "name": "test_validate_arguments_and_invoke_function",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UtilsTest.test_lazy_property": {
            "name": "test_lazy_property",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UtilsTest.test_validate_bool_kwarg": {
            "name": "test_validate_bool_kwarg",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestClassForLazyProp.__init__": {
            "name": "__init__",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestClassForLazyProp.lazy_prop": {
            "name": "lazy_prop",
            "location": 89,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "koalas-master/databricks/koalas/tests/test_window.py": {
        "ExpandingRollingTest.test_missing": {
            "name": "test_missing",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ExpandingRollingTest.test_missing_groupby": {
            "name": "test_missing_groupby",
            "location": 167,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "koalas-master/databricks/koalas/tests/__init__.py": {},
    "koalas-master/databricks/koalas/tests/indexes/test_base.py": {
        "IndexesTest.pdf": {
            "name": "pdf",
            "location": 39,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "IndexesTest.kdf": {
            "name": "kdf",
            "location": 46,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "IndexesTest.test_index_basic": {
            "name": "test_index_basic",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IndexesTest.test_index_from_series": {
            "name": "test_index_from_series",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IndexesTest.test_index_from_index": {
            "name": "test_index_from_index",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IndexesTest.test_index_getattr": {
            "name": "test_index_getattr",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IndexesTest.test_multi_index_getattr": {
            "name": "test_multi_index_getattr",
            "location": 116,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IndexesTest.test_to_series": {
            "name": "test_to_series",
            "location": 128,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IndexesTest.test_to_frame": {
            "name": "test_to_frame",
            "location": 160,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IndexesTest.test_index_names": {
            "name": "test_index_names",
            "location": 212,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IndexesTest.test_multi_index_names": {
            "name": "test_multi_index_names",
            "location": 265,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IndexesTest.test_index_rename": {
            "name": "test_index_rename",
            "location": 294,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IndexesTest.test_multi_index_rename": {
            "name": "test_multi_index_rename",
            "location": 321,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IndexesTest.test_multi_index_levshape": {
            "name": "test_multi_index_levshape",
            "location": 352,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IndexesTest.test_index_unique": {
            "name": "test_index_unique",
            "location": 357,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IndexesTest.test_multi_index_copy": {
            "name": "test_multi_index_copy",
            "location": 375,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IndexesTest.test_drop_duplicates": {
            "name": "test_drop_duplicates",
            "location": 383,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IndexesTest.test_dropna": {
            "name": "test_dropna",
            "location": 392,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IndexesTest.test_index_symmetric_difference": {
            "name": "test_index_symmetric_difference",
            "location": 399,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IndexesTest.test_multi_index_symmetric_difference": {
            "name": "test_multi_index_symmetric_difference",
            "location": 436,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IndexesTest.test_missing": {
            "name": "test_missing",
            "location": 449,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IndexesTest.test_index_has_duplicates": {
            "name": "test_index_has_duplicates",
            "location": 631,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IndexesTest.test_multiindex_has_duplicates": {
            "name": "test_multiindex_has_duplicates",
            "location": 642,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IndexesTest.test_multi_index_not_supported": {
            "name": "test_multi_index_not_supported",
            "location": 657,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IndexesTest.test_index_nlevels": {
            "name": "test_index_nlevels",
            "location": 666,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IndexesTest.test_multiindex_nlevel": {
            "name": "test_multiindex_nlevel",
            "location": 672,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IndexesTest.test_multiindex_from_arrays": {
            "name": "test_multiindex_from_arrays",
            "location": 678,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IndexesTest.test_multiindex_swaplevel": {
            "name": "test_multiindex_swaplevel",
            "location": 685,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IndexesTest.test_multiindex_droplevel": {
            "name": "test_multiindex_droplevel",
            "location": 709,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IndexesTest.test_index_fillna": {
            "name": "test_index_fillna",
            "location": 749,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IndexesTest.test_index_drop": {
            "name": "test_index_drop",
            "location": 759,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IndexesTest.test_multiindex_drop": {
            "name": "test_multiindex_drop",
            "location": 767,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IndexesTest.test_sort_values": {
            "name": "test_sort_values",
            "location": 787,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IndexesTest.test_index_drop_duplicates": {
            "name": "test_index_drop_duplicates",
            "location": 809,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IndexesTest.test_index_sort": {
            "name": "test_index_sort",
            "location": 818,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IndexesTest.test_multiindex_isna": {
            "name": "test_multiindex_isna",
            "location": 831,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IndexesTest.test_index_nunique": {
            "name": "test_index_nunique",
            "location": 846,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IndexesTest.test_multiindex_nunique": {
            "name": "test_multiindex_nunique",
            "location": 853,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IndexesTest.test_multiindex_rename": {
            "name": "test_multiindex_rename",
            "location": 858,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IndexesTest.test_multiindex_set_names": {
            "name": "test_multiindex_set_names",
            "location": 870,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IndexesTest.test_multiindex_from_tuples": {
            "name": "test_multiindex_from_tuples",
            "location": 906,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IndexesTest.test_multiindex_from_product": {
            "name": "test_multiindex_from_product",
            "location": 913,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IndexesTest.test_multiindex_tuple_column_name": {
            "name": "test_multiindex_tuple_column_name",
            "location": 920,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IndexesTest.test_len": {
            "name": "test_len",
            "location": 927,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IndexesTest.test_delete": {
            "name": "test_delete",
            "location": 938,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IndexesTest.test_append": {
            "name": "test_append",
            "location": 976,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IndexesTest.test_argmin": {
            "name": "test_argmin",
            "location": 1056,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IndexesTest.test_argmax": {
            "name": "test_argmax",
            "location": 1069,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IndexesTest.test_min": {
            "name": "test_min",
            "location": 1082,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IndexesTest.test_max": {
            "name": "test_max",
            "location": 1099,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IndexesTest.test_monotonic": {
            "name": "test_monotonic",
            "location": 1116,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IndexesTest.test_difference": {
            "name": "test_difference",
            "location": 1286,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IndexesTest.test_repeat": {
            "name": "test_repeat",
            "location": 1363,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IndexesTest.test_unique": {
            "name": "test_unique",
            "location": 1383,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IndexesTest.test_asof": {
            "name": "test_asof",
            "location": 1396,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IndexesTest.test_union": {
            "name": "test_union",
            "location": 1450,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IndexesTest.test_take": {
            "name": "test_take",
            "location": 1612,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IndexesTest.test_index_get_level_values": {
            "name": "test_index_get_level_values",
            "location": 1651,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IndexesTest.test_multiindex_get_level_values": {
            "name": "test_multiindex_get_level_values",
            "location": 1658,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IndexesTest.test_index_get_level_number": {
            "name": "test_index_get_level_number",
            "location": 1666,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IndexesTest.test_holds_integer": {
            "name": "test_holds_integer",
            "location": 1704,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IndexesTest.test_abs": {
            "name": "test_abs",
            "location": 1726,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IndexesTest.test_hasnans": {
            "name": "test_hasnans",
            "location": 1737,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IndexesTest.test_intersection": {
            "name": "test_intersection",
            "location": 1760,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IndexesTest.test_item": {
            "name": "test_item",
            "location": 1908,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IndexesTest.test_inferred_type": {
            "name": "test_inferred_type",
            "location": 1938,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IndexesTest.test_multi_index_from_index": {
            "name": "test_multi_index_from_index",
            "location": 1964,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IndexesTest.test_multiindex_from_frame": {
            "name": "test_multiindex_from_frame",
            "location": 1983,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IndexesTest.test_is_type_compatible": {
            "name": "test_is_type_compatible",
            "location": 2037,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IndexesTest.test_asi8": {
            "name": "test_asi8",
            "location": 2069,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IndexesTest.test_index_is_unique": {
            "name": "test_index_is_unique",
            "location": 2108,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IndexesTest.test_multiindex_is_unique": {
            "name": "test_multiindex_is_unique",
            "location": 2119,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IndexesTest.test_view": {
            "name": "test_view",
            "location": 2134,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IndexesTest.test_insert": {
            "name": "test_insert",
            "location": 2146,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IndexesTest.test_astype": {
            "name": "test_astype",
            "location": 2191,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IndexesTest.test_to_list": {
            "name": "test_to_list",
            "location": 2249,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IndexesTest.test_index_ops": {
            "name": "test_index_ops",
            "location": 2267,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IndexesTest.test_factorize": {
            "name": "test_factorize",
            "location": 2293,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "koalas-master/databricks/koalas/tests/indexes/test_category.py": {
        "CategoricalIndexTest.test_categorical_index": {
            "name": "test_categorical_index",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CategoricalIndexTest.test_astype": {
            "name": "test_astype",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CategoricalIndexTest.test_factorize": {
            "name": "test_factorize",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "koalas-master/databricks/koalas/tests/indexes/test_datetime.py": {
        "DatetimeIndexTest.fixed_freqs": {
            "name": "fixed_freqs",
            "location": 28,
            "return": [
                "list[typing.Text]"
            ],
            "arguments": {
                "self": []
            }
        },
        "DatetimeIndexTest.non_fixed_freqs": {
            "name": "non_fixed_freqs",
            "location": 40,
            "return": [
                "list[typing.Text]"
            ],
            "arguments": {
                "self": []
            }
        },
        "DatetimeIndexTest.pidxs": {
            "name": "pidxs",
            "location": 44,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "DatetimeIndexTest.kidxs": {
            "name": "kidxs",
            "location": 54,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "DatetimeIndexTest.idx_pairs": {
            "name": "idx_pairs",
            "location": 58,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "DatetimeIndexTest._disallow_nanoseconds": {
            "name": "_disallow_nanoseconds",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "f": []
            }
        },
        "DatetimeIndexTest.test_properties": {
            "name": "test_properties",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DatetimeIndexTest.test_ceil": {
            "name": "test_ceil",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DatetimeIndexTest.test_floor": {
            "name": "test_floor",
            "location": 101,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DatetimeIndexTest.test_round": {
            "name": "test_round",
            "location": 108,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DatetimeIndexTest.test_day_name": {
            "name": "test_day_name",
            "location": 115,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DatetimeIndexTest.test_month_name": {
            "name": "test_month_name",
            "location": 119,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DatetimeIndexTest.test_normalize": {
            "name": "test_normalize",
            "location": 123,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DatetimeIndexTest.test_strftime": {
            "name": "test_strftime",
            "location": 127,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DatetimeIndexTest.test_indexer_between_time": {
            "name": "test_indexer_between_time",
            "location": 133,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DatetimeIndexTest.test_indexer_at_time": {
            "name": "test_indexer_at_time",
            "location": 167,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DatetimeIndexTest.test_arithmetic_op_exceptions": {
            "name": "test_arithmetic_op_exceptions",
            "location": 189,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "koalas-master/databricks/koalas/tests/indexes/__init__.py": {},
    "koalas-master/databricks/koalas/tests/plot/test_frame_plot.py": {
        "DataFramePlotTest.setUpClass": {
            "name": "setUpClass",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": []
            }
        },
        "DataFramePlotTest.tearDownClass": {
            "name": "tearDownClass",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": []
            }
        },
        "DataFramePlotTest.test_missing": {
            "name": "test_missing",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataFramePlotTest.test_topn_max_rows": {
            "name": "test_topn_max_rows",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataFramePlotTest.test_sampled_plot_with_ratio": {
            "name": "test_sampled_plot_with_ratio",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataFramePlotTest.test_sampled_plot_with_max_rows": {
            "name": "test_sampled_plot_with_max_rows",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataFramePlotTest.test_compute_hist_single_column": {
            "name": "test_compute_hist_single_column",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataFramePlotTest.test_compute_hist_multi_columns": {
            "name": "test_compute_hist_multi_columns",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "koalas-master/databricks/koalas/tests/plot/test_frame_plot_matplotlib.py": {
        "DataFramePlotMatplotlibTest.setUpClass": {
            "name": "setUpClass",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": []
            }
        },
        "DataFramePlotMatplotlibTest.tearDownClass": {
            "name": "tearDownClass",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": []
            }
        },
        "DataFramePlotMatplotlibTest.pdf1": {
            "name": "pdf1",
            "location": 56,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DataFramePlotMatplotlibTest.kdf1": {
            "name": "kdf1",
            "location": 63,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DataFramePlotMatplotlibTest.plot_to_base64": {
            "name": "plot_to_base64",
            "location": 67,
            "return": [],
            "arguments": {
                "ax": []
            }
        },
        "DataFramePlotMatplotlibTest.test_line_plot": {
            "name": "test_line_plot",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataFramePlotMatplotlibTest.test_area_plot": {
            "name": "test_area_plot",
            "location": 99,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataFramePlotMatplotlibTest.test_area_plot_stacked_false": {
            "name": "test_area_plot_stacked_false",
            "location": 123,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataFramePlotMatplotlibTest.test_area_plot_y": {
            "name": "test_area_plot_y",
            "location": 150,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataFramePlotMatplotlibTest.test_barh_plot_with_x_y": {
            "name": "test_barh_plot_with_x_y",
            "location": 176,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataFramePlotMatplotlibTest.test_barh_plot": {
            "name": "test_barh_plot",
            "location": 201,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataFramePlotMatplotlibTest.test_bar_plot": {
            "name": "test_bar_plot",
            "location": 226,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataFramePlotMatplotlibTest.test_bar_with_x_y": {
            "name": "test_bar_with_x_y",
            "location": 250,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataFramePlotMatplotlibTest.test_pie_plot": {
            "name": "test_pie_plot",
            "location": 284,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataFramePlotMatplotlibTest.test_pie_plot_error_message": {
            "name": "test_pie_plot_error_message",
            "location": 331,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataFramePlotMatplotlibTest.test_scatter_plot": {
            "name": "test_scatter_plot",
            "location": 345,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataFramePlotMatplotlibTest.test_hist_plot": {
            "name": "test_hist_plot",
            "location": 377,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataFramePlotMatplotlibTest.test_kde_plot": {
            "name": "test_kde_plot",
            "location": 428,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataFramePlotMatplotlibTest.test_line_plot.check_line_plot": {
            "name": "check_line_plot",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "pdf": [],
                "kdf": []
            }
        },
        "DataFramePlotMatplotlibTest.test_area_plot.check_area_plot": {
            "name": "check_area_plot",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {
                "pdf": [],
                "kdf": []
            }
        },
        "DataFramePlotMatplotlibTest.test_area_plot_stacked_false.check_area_plot_stacked_false": {
            "name": "check_area_plot_stacked_false",
            "location": 124,
            "return": [
                "None"
            ],
            "arguments": {
                "pdf": [],
                "kdf": []
            }
        },
        "DataFramePlotMatplotlibTest.test_area_plot_y.check_area_plot_y": {
            "name": "check_area_plot_y",
            "location": 151,
            "return": [
                "None"
            ],
            "arguments": {
                "pdf": [],
                "kdf": [],
                "y": []
            }
        },
        "DataFramePlotMatplotlibTest.test_barh_plot_with_x_y.check_barh_plot_with_x_y": {
            "name": "check_barh_plot_with_x_y",
            "location": 177,
            "return": [
                "None"
            ],
            "arguments": {
                "pdf": [],
                "kdf": [],
                "x": [],
                "y": []
            }
        },
        "DataFramePlotMatplotlibTest.test_barh_plot.check_barh_plot": {
            "name": "check_barh_plot",
            "location": 202,
            "return": [
                "None"
            ],
            "arguments": {
                "pdf": [],
                "kdf": []
            }
        },
        "DataFramePlotMatplotlibTest.test_bar_plot.check_bar_plot": {
            "name": "check_bar_plot",
            "location": 227,
            "return": [
                "None"
            ],
            "arguments": {
                "pdf": [],
                "kdf": []
            }
        },
        "DataFramePlotMatplotlibTest.test_pie_plot.check_pie_plot": {
            "name": "check_pie_plot",
            "location": 285,
            "return": [
                "None"
            ],
            "arguments": {
                "pdf": [],
                "kdf": [],
                "y": []
            }
        },
        "DataFramePlotMatplotlibTest.test_scatter_plot.check_scatter_plot": {
            "name": "check_scatter_plot",
            "location": 346,
            "return": [
                "None"
            ],
            "arguments": {
                "pdf": [],
                "kdf": [],
                "x": [],
                "y": [],
                "c": []
            }
        },
        "DataFramePlotMatplotlibTest.test_hist_plot.check_hist_plot": {
            "name": "check_hist_plot",
            "location": 378,
            "return": [
                "None"
            ],
            "arguments": {
                "pdf": [],
                "kdf": []
            }
        },
        "DataFramePlotMatplotlibTest.test_kde_plot.moving_average": {
            "name": "moving_average",
            "location": 429,
            "return": [
                "int"
            ],
            "arguments": {
                "a": [],
                "n": [
                    "int"
                ]
            }
        },
        "DataFramePlotMatplotlibTest.test_kde_plot.check_kde_plot": {
            "name": "check_kde_plot",
            "location": 434,
            "return": [
                "None"
            ],
            "arguments": {
                "pdf": [],
                "kdf": []
            }
        }
    },
    "koalas-master/databricks/koalas/tests/plot/test_frame_plot_plotly.py": {
        "DataFramePlotPlotlyTest.setUpClass": {
            "name": "setUpClass",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": []
            }
        },
        "DataFramePlotPlotlyTest.tearDownClass": {
            "name": "tearDownClass",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": []
            }
        },
        "DataFramePlotPlotlyTest.pdf1": {
            "name": "pdf1",
            "location": 53,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DataFramePlotPlotlyTest.kdf1": {
            "name": "kdf1",
            "location": 60,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DataFramePlotPlotlyTest.test_line_plot": {
            "name": "test_line_plot",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataFramePlotPlotlyTest.test_area_plot": {
            "name": "test_area_plot",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataFramePlotPlotlyTest.test_area_plot_y": {
            "name": "test_area_plot_y",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataFramePlotPlotlyTest.test_barh_plot_with_x_y": {
            "name": "test_barh_plot_with_x_y",
            "location": 97,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataFramePlotPlotlyTest.test_barh_plot": {
            "name": "test_barh_plot",
            "location": 107,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataFramePlotPlotlyTest.test_bar_plot": {
            "name": "test_bar_plot",
            "location": 117,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataFramePlotPlotlyTest.test_bar_with_x_y": {
            "name": "test_bar_with_x_y",
            "location": 126,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataFramePlotPlotlyTest.test_scatter_plot": {
            "name": "test_scatter_plot",
            "location": 136,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataFramePlotPlotlyTest.test_pie_plot": {
            "name": "test_pie_plot",
            "location": 151,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataFramePlotPlotlyTest.test_hist_plot": {
            "name": "test_hist_plot",
            "location": 181,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataFramePlotPlotlyTest.test_kde_plot": {
            "name": "test_kde_plot",
            "location": 228,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataFramePlotPlotlyTest.test_line_plot.check_line_plot": {
            "name": "check_line_plot",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "pdf": [],
                "kdf": []
            }
        },
        "DataFramePlotPlotlyTest.test_area_plot.check_area_plot": {
            "name": "check_area_plot",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "pdf": [],
                "kdf": []
            }
        },
        "DataFramePlotPlotlyTest.test_area_plot_y.check_area_plot_y": {
            "name": "check_area_plot_y",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "pdf": [],
                "kdf": [],
                "y": []
            }
        },
        "DataFramePlotPlotlyTest.test_barh_plot_with_x_y.check_barh_plot_with_x_y": {
            "name": "check_barh_plot_with_x_y",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {
                "pdf": [],
                "kdf": [],
                "x": [],
                "y": []
            }
        },
        "DataFramePlotPlotlyTest.test_barh_plot.check_barh_plot": {
            "name": "check_barh_plot",
            "location": 108,
            "return": [
                "None"
            ],
            "arguments": {
                "pdf": [],
                "kdf": []
            }
        },
        "DataFramePlotPlotlyTest.test_bar_plot.check_bar_plot": {
            "name": "check_bar_plot",
            "location": 118,
            "return": [
                "None"
            ],
            "arguments": {
                "pdf": [],
                "kdf": []
            }
        },
        "DataFramePlotPlotlyTest.test_scatter_plot.check_scatter_plot": {
            "name": "check_scatter_plot",
            "location": 137,
            "return": [
                "None"
            ],
            "arguments": {
                "pdf": [],
                "kdf": [],
                "x": [],
                "y": [],
                "c": []
            }
        },
        "DataFramePlotPlotlyTest.test_pie_plot.check_pie_plot": {
            "name": "check_pie_plot",
            "location": 152,
            "return": [
                "None"
            ],
            "arguments": {
                "kdf": []
            }
        },
        "DataFramePlotPlotlyTest.test_hist_plot.check_hist_plot": {
            "name": "check_hist_plot",
            "location": 182,
            "return": [
                "None"
            ],
            "arguments": {
                "kdf": []
            }
        }
    },
    "koalas-master/databricks/koalas/tests/plot/test_series_plot.py": {
        "SeriesPlotTest.pdf1": {
            "name": "pdf1",
            "location": 28,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SeriesPlotTest.kdf1": {
            "name": "kdf1",
            "location": 34,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SeriesPlotTest.test_plot_backends": {
            "name": "test_plot_backends",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SeriesPlotTest.test_plot_backends_incorrect": {
            "name": "test_plot_backends_incorrect",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SeriesPlotTest.test_box_summary": {
            "name": "test_box_summary",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SeriesPlotTest.test_box_summary.check_box_summary": {
            "name": "check_box_summary",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "kdf": [],
                "pdf": []
            }
        }
    },
    "koalas-master/databricks/koalas/tests/plot/test_series_plot_matplotlib.py": {
        "SeriesPlotMatplotlibTest.setUpClass": {
            "name": "setUpClass",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": []
            }
        },
        "SeriesPlotMatplotlibTest.tearDownClass": {
            "name": "tearDownClass",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": []
            }
        },
        "SeriesPlotMatplotlibTest.pdf1": {
            "name": "pdf1",
            "location": 51,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SeriesPlotMatplotlibTest.kdf1": {
            "name": "kdf1",
            "location": 57,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SeriesPlotMatplotlibTest.kdf2": {
            "name": "kdf2",
            "location": 61,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SeriesPlotMatplotlibTest.pdf2": {
            "name": "pdf2",
            "location": 65,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SeriesPlotMatplotlibTest.plot_to_base64": {
            "name": "plot_to_base64",
            "location": 69,
            "return": [],
            "arguments": {
                "ax": []
            }
        },
        "SeriesPlotMatplotlibTest.test_bar_plot": {
            "name": "test_bar_plot",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SeriesPlotMatplotlibTest.test_bar_plot_limited": {
            "name": "test_bar_plot_limited",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SeriesPlotMatplotlibTest.test_pie_plot": {
            "name": "test_pie_plot",
            "location": 116,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SeriesPlotMatplotlibTest.test_pie_plot_limited": {
            "name": "test_pie_plot_limited",
            "location": 132,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SeriesPlotMatplotlibTest.test_line_plot": {
            "name": "test_line_plot",
            "location": 155,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SeriesPlotMatplotlibTest.test_barh_plot": {
            "name": "test_barh_plot",
            "location": 171,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SeriesPlotMatplotlibTest.test_barh_plot_limited": {
            "name": "test_barh_plot_limited",
            "location": 181,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SeriesPlotMatplotlibTest.test_hist": {
            "name": "test_hist",
            "location": 204,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SeriesPlotMatplotlibTest.test_hist_plot": {
            "name": "test_hist_plot",
            "location": 226,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SeriesPlotMatplotlibTest.test_area_plot": {
            "name": "test_area_plot",
            "location": 256,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SeriesPlotMatplotlibTest.test_box_plot": {
            "name": "test_box_plot",
            "location": 286,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SeriesPlotMatplotlibTest.test_kde_plot": {
            "name": "test_kde_plot",
            "location": 336,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SeriesPlotMatplotlibTest.test_empty_hist": {
            "name": "test_empty_hist",
            "location": 368,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SeriesPlotMatplotlibTest.test_single_value_hist": {
            "name": "test_single_value_hist",
            "location": 376,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SeriesPlotMatplotlibTest.test_hist.plot_to_base64": {
            "name": "plot_to_base64",
            "location": 211,
            "return": [],
            "arguments": {
                "ax": []
            }
        },
        "SeriesPlotMatplotlibTest.test_box_plot.check_box_plot": {
            "name": "check_box_plot",
            "location": 287,
            "return": [
                "None"
            ],
            "arguments": {
                "pser": [],
                "kser": []
            }
        },
        "SeriesPlotMatplotlibTest.test_kde_plot.moving_average": {
            "name": "moving_average",
            "location": 337,
            "return": [
                "int"
            ],
            "arguments": {
                "a": [],
                "n": [
                    "int"
                ]
            }
        },
        "SeriesPlotMatplotlibTest.test_kde_plot.check_kde_plot": {
            "name": "check_kde_plot",
            "location": 342,
            "return": [
                "None"
            ],
            "arguments": {
                "pdf": [],
                "kdf": []
            }
        }
    },
    "koalas-master/databricks/koalas/tests/plot/test_series_plot_plotly.py": {
        "SeriesPlotPlotlyTest.setUpClass": {
            "name": "setUpClass",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": []
            }
        },
        "SeriesPlotPlotlyTest.tearDownClass": {
            "name": "tearDownClass",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": []
            }
        },
        "SeriesPlotPlotlyTest.pdf1": {
            "name": "pdf1",
            "location": 53,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SeriesPlotPlotlyTest.kdf1": {
            "name": "kdf1",
            "location": 59,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SeriesPlotPlotlyTest.kdf2": {
            "name": "kdf2",
            "location": 63,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SeriesPlotPlotlyTest.pdf2": {
            "name": "pdf2",
            "location": 67,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SeriesPlotPlotlyTest.test_bar_plot": {
            "name": "test_bar_plot",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SeriesPlotPlotlyTest.test_line_plot": {
            "name": "test_line_plot",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SeriesPlotPlotlyTest.test_barh_plot": {
            "name": "test_barh_plot",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SeriesPlotPlotlyTest.test_area_plot": {
            "name": "test_area_plot",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SeriesPlotPlotlyTest.test_pie_plot": {
            "name": "test_pie_plot",
            "location": 107,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SeriesPlotPlotlyTest.test_hist_plot": {
            "name": "test_hist_plot",
            "location": 136,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SeriesPlotPlotlyTest.test_pox_plot": {
            "name": "test_pox_plot",
            "location": 172,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SeriesPlotPlotlyTest.test_pox_plot_arguments": {
            "name": "test_pox_plot_arguments",
            "location": 203,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SeriesPlotPlotlyTest.test_kde_plot": {
            "name": "test_kde_plot",
            "location": 210,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SeriesPlotPlotlyTest.test_hist_plot.check_hist_plot": {
            "name": "check_hist_plot",
            "location": 137,
            "return": [
                "None"
            ],
            "arguments": {
                "kser": []
            }
        },
        "SeriesPlotPlotlyTest.test_pox_plot.check_pox_plot": {
            "name": "check_pox_plot",
            "location": 173,
            "return": [
                "None"
            ],
            "arguments": {
                "kser": []
            }
        }
    },
    "koalas-master/databricks/koalas/tests/plot/__init__.py": {},
    "koalas-master/databricks/koalas/typedef/string_typehints.py": {
        "resolve_string_type_hint": {
            "name": "resolve_string_type_hint",
            "location": 24,
            "return": [],
            "arguments": {
                "tpe": []
            }
        }
    },
    "koalas-master/databricks/koalas/typedef/typehints.py": {
        "as_spark_type": {
            "name": "as_spark_type",
            "location": 137,
            "return": [
                "None"
            ],
            "arguments": {
                "tpe": []
            }
        },
        "spark_type_to_pandas_dtype": {
            "name": "spark_type_to_pandas_dtype",
            "location": 226,
            "return": [
                "Int8Dtype",
                "Int16Dtype",
                "Int32Dtype",
                "Int64Dtype",
                "BooleanDtype",
                "StringDtype",
                "Float32Dtype",
                "Float64Dtype"
            ],
            "arguments": {
                "spark_type": []
            }
        },
        "koalas_dtype": {
            "name": "koalas_dtype",
            "location": 275,
            "return": [
                "tuple"
            ],
            "arguments": {
                "tpe": []
            }
        },
        "infer_pd_series_spark_type": {
            "name": "infer_pd_series_spark_type",
            "location": 314,
            "return": [],
            "arguments": {
                "pser": [],
                "dtype": []
            }
        },
        "infer_return_type": {
            "name": "infer_return_type",
            "location": 335,
            "return": [
                "SeriesType",
                "DataFrameType",
                "UnknownType",
                "ScalarType"
            ],
            "arguments": {
                "f": []
            }
        },
        "SeriesType.__init__": {
            "name": "__init__",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dtype": [],
                "spark_type": []
            }
        },
        "SeriesType.__repr__": {
            "name": "__repr__",
            "location": 91,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataFrameType.__init__": {
            "name": "__init__",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dtypes": [],
                "spark_types": [],
                "names": []
            }
        },
        "DataFrameType.__repr__": {
            "name": "__repr__",
            "location": 109,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ScalarType.__init__": {
            "name": "__init__",
            "location": 115,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dtype": [],
                "spark_type": []
            }
        },
        "ScalarType.__repr__": {
            "name": "__repr__",
            "location": 119,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "UnknownType.__init__": {
            "name": "__init__",
            "location": 125,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tpe": []
            }
        },
        "UnknownType.__repr__": {
            "name": "__repr__",
            "location": 128,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "koalas-master/databricks/koalas/typedef/__init__.py": {},
    "koalas-master/databricks/koalas/usage_logging/usage_logger.py": {
        "get_logger": {
            "name": "get_logger",
            "location": 26,
            "return": [
                "KoalasUsageLogger"
            ],
            "arguments": {}
        },
        "_format_signature": {
            "name": "_format_signature",
            "location": 31,
            "return": [
                "str"
            ],
            "arguments": {
                "signature": []
            }
        },
        "KoalasUsageLogger.__init__": {
            "name": "__init__",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "KoalasUsageLogger.log_success": {
            "name": "log_success",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "class_name": [],
                "name": [],
                "duration": [],
                "signature": [
                    "None"
                ]
            }
        },
        "KoalasUsageLogger.log_failure": {
            "name": "log_failure",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "class_name": [],
                "name": [],
                "ex": [],
                "duration": [],
                "signature": [
                    "None"
                ]
            }
        },
        "KoalasUsageLogger.log_missing": {
            "name": "log_missing",
            "location": 108,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "class_name": [],
                "name": [],
                "is_deprecated": [
                    "bool"
                ],
                "signature": [
                    "None"
                ]
            }
        }
    },
    "koalas-master/databricks/koalas/usage_logging/__init__.py": {
        "attach": {
            "name": "attach",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "logger_module": []
            }
        },
        "_wrap_function": {
            "name": "_wrap_function",
            "location": 182,
            "return": [],
            "arguments": {
                "class_name": [],
                "function_name": [],
                "func": [],
                "logger": []
            }
        },
        "_wrap_property": {
            "name": "_wrap_property",
            "location": 211,
            "return": [],
            "arguments": {
                "class_name": [],
                "property_name": [],
                "prop": [],
                "logger": []
            }
        },
        "_wrap_missing_function": {
            "name": "_wrap_missing_function",
            "location": 238,
            "return": [],
            "arguments": {
                "class_name": [],
                "function_name": [],
                "func": [],
                "original": [],
                "logger": []
            }
        },
        "_wrap_missing_property": {
            "name": "_wrap_missing_property",
            "location": 257,
            "return": [],
            "arguments": {
                "class_name": [],
                "property_name": [],
                "prop": [],
                "logger": []
            }
        },
        "_wrap_function.wrapper": {
            "name": "wrapper",
            "location": 187,
            "return": [],
            "arguments": {}
        },
        "_wrap_property.wrapper": {
            "name": "wrapper",
            "location": 213,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_wrap_missing_function.wrapper": {
            "name": "wrapper",
            "location": 248,
            "return": [],
            "arguments": {}
        },
        "_wrap_missing_property.wrapper": {
            "name": "wrapper",
            "location": 262,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "koalas-master/dev/gendoc.py": {
        "get_json": {
            "name": "get_json",
            "location": 44,
            "return": [],
            "arguments": {
                "url": []
            }
        },
        "list_releases_to_document": {
            "name": "list_releases_to_document",
            "location": 72,
            "return": [],
            "arguments": {
                "cur_version": []
            }
        },
        "gen_release_notes": {
            "name": "gen_release_notes",
            "location": 87,
            "return": [],
            "arguments": {
                "path": []
            }
        },
        "retry": {
            "name": "retry",
            "location": 143,
            "return": [],
            "arguments": {
                "f": [],
                "num": [],
                "args": []
            }
        },
        "is_exe": {
            "name": "is_exe",
            "location": 161,
            "return": [],
            "arguments": {
                "path": []
            }
        },
        "which": {
            "name": "which",
            "location": 170,
            "return": [],
            "arguments": {
                "program": []
            }
        },
        "download_pandoc_if_needed": {
            "name": "download_pandoc_if_needed",
            "location": 190,
            "return": [],
            "arguments": {
                "path": []
            }
        },
        "download_pandoc_if_needed.download_pandoc": {
            "name": "download_pandoc",
            "location": 217,
            "return": [],
            "arguments": {}
        }
    },
    "koalas-master/dev/make_missing_functions.py": {
        "inspect_missing_functions": {
            "name": "inspect_missing_functions",
            "location": 38,
            "return": [
                "tuple[list[tuple]]"
            ],
            "arguments": {
                "original_type": [],
                "target_type": []
            }
        },
        "format_arguments": {
            "name": "format_arguments",
            "location": 76,
            "return": [],
            "arguments": {
                "arguments": [],
                "prefix_len": [],
                "suffix_len": []
            }
        },
        "format_method_arguments": {
            "name": "format_method_arguments",
            "location": 101,
            "return": [],
            "arguments": {
                "name": [],
                "signature": []
            }
        },
        "format_derived_from": {
            "name": "format_derived_from",
            "location": 121,
            "return": [
                "str"
            ],
            "arguments": {
                "original_type": [],
                "unavailable_arguments": [],
                "signature": []
            }
        },
        "format_raise_errors": {
            "name": "format_raise_errors",
            "location": 149,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "original_type": [],
                "name": [],
                "unavailable_arguments": [],
                "signature": []
            }
        },
        "make_missing_function": {
            "name": "make_missing_function",
            "location": 189,
            "return": [
                "str"
            ],
            "arguments": {
                "original_type": [],
                "name": [],
                "signature": []
            }
        },
        "make_modified_function_def": {
            "name": "make_modified_function_def",
            "location": 211,
            "return": [
                "str"
            ],
            "arguments": {
                "original_type": [],
                "name": [],
                "original": [],
                "target": []
            }
        },
        "_main": {
            "name": "_main",
            "location": 226,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "format_arguments.append_arg": {
            "name": "append_arg",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "arg": []
            }
        }
    },
    "koalas-master/dev/make_missing_properties.py": {
        "inspect_missing_properties": {
            "name": "inspect_missing_properties",
            "location": 34,
            "return": [
                "tuple[list]"
            ],
            "arguments": {
                "original_type": [],
                "target_type": []
            }
        },
        "_main": {
            "name": "_main",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "koalas-master/docs/source/conf.py": {
        "gendoc": {
            "name": "gendoc",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    }
}
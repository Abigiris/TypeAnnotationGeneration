{
    "lemon-master/setup.py": {},
    "lemon-master/docs/source/conf.py": {},
    "lemon-master/examples/catch_error.py": {},
    "lemon-master/examples/cookies.py": {},
    "lemon-master/examples/cors.py": {},
    "lemon-master/examples/raw_uvicorn.py": {
        "EchoBody.__init__": {
            "name": "__init__",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "scope": [
                    "int",
                    "float"
                ]
            }
        }
    },
    "lemon-master/examples/router.py": {},
    "lemon-master/examples/simple.py": {},
    "lemon-master/examples/throw.py": {},
    "lemon-master/examples/upload.py": {},
    "lemon-master/lemon/app.py": {
        "Lemon.__init__": {
            "name": "__init__",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "None",
                    "dict[, ]",
                    "dict[str, typing.Any]",
                    "dict[str, str]"
                ],
                "debug": [
                    "bool"
                ]
            }
        },
        "Lemon.use": {
            "name": "use",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Lemon.application": {
            "name": "application",
            "location": 78,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Lemon.listen": {
            "name": "listen",
            "location": 110,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "host": [
                    "None",
                    "str"
                ],
                "port": [
                    "None",
                    "str",
                    "bool"
                ]
            }
        },
        "Lemon.stop": {
            "name": "stop",
            "location": 120,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "Lemon.application._make": {
            "name": "_make",
            "location": 79,
            "return": [],
            "arguments": {
                "scope": []
            }
        }
    },
    "lemon-master/lemon/asgi.py": {
        "ASGIRequest.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "scope": [
                    "int",
                    "float"
                ]
            }
        }
    },
    "lemon-master/lemon/config.py": {
        "LemonConfig.__init__": {
            "name": "__init__",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "default_config": [
                    "None",
                    "bool",
                    "typing.Callable[, ]",
                    "str"
                ],
                "config": [
                    "None",
                    "str",
                    "typing.Type",
                    "dict[, ]"
                ]
            }
        },
        "LemonConfig.set_config": {
            "name": "set_config",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "dict[str, typing.Any]",
                    "bool"
                ]
            }
        },
        "LemonConfig.__getattr__": {
            "name": "__getattr__",
            "location": 19,
            "return": [],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "bytes"
                ]
            }
        },
        "LemonConfig.__getitem__": {
            "name": "__getitem__",
            "location": 24,
            "return": [],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "bytes",
                    "typing.Type",
                    "int",
                    "typing.Iterable[str]",
                    "typing.Callable[str, typing.Any]",
                    "None"
                ]
            }
        }
    },
    "lemon-master/lemon/const.py": {},
    "lemon-master/lemon/context.py": {
        "Context.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Context.__setattr__": {
            "name": "__setattr__",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str"
                ],
                "value": [
                    "str",
                    "bytes",
                    "int"
                ]
            }
        },
        "Context.__getattr__": {
            "name": "__getattr__",
            "location": 29,
            "return": [],
            "arguments": {
                "self": [],
                "item": [
                    "list[str]"
                ]
            }
        },
        "Context.throw": {
            "name": "throw",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "status": [
                    "int",
                    "bytes"
                ],
                "body": [
                    "None",
                    "int",
                    "bytes"
                ]
            }
        }
    },
    "lemon-master/lemon/exception.py": {
        "GeneralException.__init__": {
            "name": "__init__",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "status": [
                    "None",
                    "int",
                    "list[int]",
                    "str",
                    "float"
                ],
                "body": [
                    "None",
                    "int",
                    "list[int]",
                    "str",
                    "float"
                ]
            }
        },
        "RequestBadError.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RequestUnauthorizedError.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RequestForbiddenError.__init__": {
            "name": "__init__",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RequestNotFoundError.__init__": {
            "name": "__init__",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ServerError.__init__": {
            "name": "__init__",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "lemon-master/lemon/log.py": {},
    "lemon-master/lemon/middleware.py": {},
    "lemon-master/lemon/parsers.py": {
        "get_mimetype_and_options": {
            "name": "get_mimetype_and_options",
            "location": 14,
            "return": [
                "tuple[typing.Union[typing.Text,dict[, ]]]"
            ],
            "arguments": {
                "headers": [
                    "dict[, ]"
                ]
            }
        },
        "get_content_length": {
            "name": "get_content_length",
            "location": 21,
            "return": [
                "None",
                "int"
            ],
            "arguments": {
                "headers": [
                    "dict[, ]",
                    "typing.Mapping",
                    "dict[str, str]"
                ]
            }
        },
        "json_parser": {
            "name": "json_parser",
            "location": 33,
            "return": [],
            "arguments": {
                "body": [
                    "bytes"
                ]
            }
        },
        "url_encoded_parser": {
            "name": "url_encoded_parser",
            "location": 42,
            "return": [],
            "arguments": {
                "body": [
                    "bytes",
                    "str",
                    "int"
                ]
            }
        },
        "multi_part_parser": {
            "name": "multi_part_parser",
            "location": 46,
            "return": [
                "ImmutableMultiDict"
            ],
            "arguments": {
                "body": [
                    "bytes",
                    "str",
                    "None"
                ],
                "headers": [
                    "dict[, ]"
                ]
            }
        },
        "parse_http_body": {
            "name": "parse_http_body",
            "location": 66,
            "return": [],
            "arguments": {
                "headers": [
                    "dict[, ]",
                    "dict[str, typing.Any]",
                    "str",
                    "frozenset"
                ],
                "body": [
                    "bytes",
                    "list[str]",
                    "dict[str, str]",
                    "int"
                ]
            }
        }
    },
    "lemon-master/lemon/request.py": {
        "HttpHeaders.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "raw_headers": [
                    "bytes"
                ]
            }
        },
        "HttpHeaders.__setitem__": {
            "name": "__setitem__",
            "location": 16,
            "return": [],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "bytes"
                ],
                "value": [
                    "str",
                    "int",
                    "bytes"
                ]
            }
        },
        "HttpHeaders.__getitem__": {
            "name": "__getitem__",
            "location": 19,
            "return": [],
            "arguments": {
                "self": [],
                "key": [
                    "str"
                ]
            }
        },
        "HttpHeaders.set": {
            "name": "set",
            "location": 22,
            "return": [],
            "arguments": {
                "self": [],
                "key": [
                    "str"
                ],
                "value": [
                    "str"
                ]
            }
        },
        "HttpHeaders.to_raw": {
            "name": "to_raw",
            "location": 25,
            "return": [
                "list[list[]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Request.__init__": {
            "name": "__init__",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "http_version": [
                    "list[float]",
                    "str",
                    "typing.Sequence[str]",
                    "None"
                ],
                "method": [
                    "str"
                ],
                "scheme": [
                    "list[float]",
                    "str",
                    "typing.Sequence[str]",
                    "None"
                ],
                "path": [
                    "str",
                    "None",
                    "bytes",
                    "list[str]"
                ],
                "query_string": [
                    "str",
                    "dict[, ]",
                    "typing.Callable[, ]",
                    "int"
                ],
                "headers": [
                    "str",
                    "None",
                    "int"
                ],
                "body": [
                    "list[float]",
                    "str",
                    "typing.Sequence[str]",
                    "None"
                ],
                "data": [
                    "dict[str, str]",
                    "dict[str, list[typing.Any]]",
                    "dict[, ]",
                    "None",
                    "str",
                    "int",
                    "bytes"
                ],
                "client": [
                    "list[float]",
                    "str",
                    "typing.Sequence[str]",
                    "None"
                ],
                "server": [
                    "list[float]",
                    "str",
                    "typing.Sequence[str]",
                    "None"
                ]
            }
        },
        "Request.protocol": {
            "name": "protocol",
            "location": 70,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Request.secure": {
            "name": "secure",
            "location": 76,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Request.host": {
            "name": "host",
            "location": 82,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Request.content_type": {
            "name": "content_type",
            "location": 88,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Request.query": {
            "name": "query",
            "location": 94,
            "return": [
                "str",
                "dict[str, typing.Any]",
                "dict[, ]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Request.form": {
            "name": "form",
            "location": 101,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Request.cookies": {
            "name": "cookies",
            "location": 105,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "lemon-master/lemon/response.py": {
        "Response.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "status": [
                    "int"
                ],
                "headers": [
                    "None",
                    "str",
                    "dict[, ]"
                ],
                "body": [
                    "None",
                    "str",
                    "bool",
                    "dict[, ]"
                ],
                "content_type": [],
                "charset": []
            }
        },
        "Response.raw_content_type": {
            "name": "raw_content_type",
            "location": 20,
            "return": [
                "list[bytes]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Response.raw_headers": {
            "name": "raw_headers",
            "location": 27,
            "return": [
                "str",
                "dict[str, list[str]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Response.raw_body": {
            "name": "raw_body",
            "location": 34,
            "return": [
                "bytes",
                "str",
                "dict[tuple[typing.Union[str,str]], str]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "lemon-master/lemon/router.py": {
        "_clean_slash": {
            "name": "_clean_slash",
            "location": 20,
            "return": [
                "str"
            ],
            "arguments": {
                "path": [
                    "str"
                ]
            }
        },
        "AbstractRouter.use": {
            "name": "use",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "methods": [
                    "list[]",
                    "str",
                    "bool",
                    "list[dict[, ]]"
                ],
                "path": [
                    "list[]",
                    "str",
                    "bool",
                    "list[dict[, ]]"
                ]
            }
        },
        "AbstractRouter.routes": {
            "name": "routes",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbstractRouter.match": {
            "name": "match",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ctx": []
            }
        },
        "AbstractBaseRouter.get": {
            "name": "get",
            "location": 50,
            "return": [],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "int",
                    "dict[, ]"
                ]
            }
        },
        "AbstractBaseRouter.put": {
            "name": "put",
            "location": 57,
            "return": [],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "bool"
                ]
            }
        },
        "AbstractBaseRouter.post": {
            "name": "post",
            "location": 64,
            "return": [],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "None"
                ]
            }
        },
        "AbstractBaseRouter.delete": {
            "name": "delete",
            "location": 71,
            "return": [],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "int",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "AbstractBaseRouter.all": {
            "name": "all",
            "location": 78,
            "return": [],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ]
            }
        },
        "AbstractBaseRouter.routes": {
            "name": "routes",
            "location": 90,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SimpleRouter.__init__": {
            "name": "__init__",
            "location": 111,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "slash": []
            }
        },
        "SimpleRouter.match": {
            "name": "match",
            "location": 120,
            "return": [],
            "arguments": {
                "self": [],
                "ctx": []
            }
        },
        "SimpleRouter.use": {
            "name": "use",
            "location": 132,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "methods": [
                    "list[]",
                    "str",
                    "list[dict[, ]]"
                ],
                "path": []
            }
        },
        "Router.__init__": {
            "name": "__init__",
            "location": 147,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "slash": []
            }
        },
        "Router.use": {
            "name": "use",
            "location": 156,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "methods": [
                    "list[]",
                    "str",
                    "list[dict[, ]]"
                ],
                "path": [
                    "list[str]",
                    "str",
                    "typing.Sequence[str]",
                    "None",
                    "typing.Callable[, ]"
                ]
            }
        },
        "Router.match": {
            "name": "match",
            "location": 167,
            "return": [],
            "arguments": {
                "self": [],
                "ctx": []
            }
        },
        "Router._register_middleware_list": {
            "name": "_register_middleware_list",
            "location": 183,
            "return": [],
            "arguments": {
                "self": [],
                "method": [
                    "str"
                ],
                "path": [
                    "str",
                    "None"
                ]
            }
        }
    },
    "lemon-master/lemon/server.py": {
        "serve": {
            "name": "serve",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "app": [],
                "host": [
                    "int",
                    "str"
                ],
                "port": []
            }
        }
    },
    "lemon-master/lemon/__init__.py": {},
    "lemon-master/tests/asgi.py": {
        "ASGIResponse.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "status": [
                    "bool",
                    "typing.Callable[, ]",
                    "None",
                    "float"
                ],
                "headers": [
                    "str",
                    "int",
                    "typing.Callable[, ]",
                    "None",
                    "dict[, ]",
                    "tuple[typing.Union[str,str]]",
                    "tuple[typing.Union[int,int]]"
                ],
                "content": [
                    "dict[, ]",
                    "dict[str, typing.Any]",
                    "dict[str, str]",
                    "bytes",
                    "int",
                    "list[str]",
                    "None"
                ]
            }
        },
        "ASGIResponse.status_code": {
            "name": "status_code",
            "location": 15,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ASGIResponse.text": {
            "name": "text",
            "location": 19,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ASGIResponse.json": {
            "name": "json",
            "location": 22,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ASGIHttpTestCase.setup_method": {
            "name": "setup_method",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "method": [
                    "str",
                    "dict[, ]",
                    "tuple[]"
                ]
            }
        },
        "ASGIHttpTestCase.set_scope": {
            "name": "set_scope",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "method": [
                    "bool",
                    "str",
                    "typing.Type",
                    "None"
                ],
                "path": [
                    "str",
                    "typing.Callable[, ]"
                ],
                "query_string": [
                    "typing.Text"
                ],
                "headers": [
                    "None",
                    "str",
                    "dict[, ]"
                ]
            }
        }
    },
    "lemon-master/tests/test_basic.py": {},
    "lemon-master/tests/test_config.py": {
        "TestConfig.test_config": {
            "name": "test_config",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "lemon-master/tests/test_cors.py": {},
    "lemon-master/tests/test_exception.py": {
        "TestException.test_exception": {
            "name": "test_exception",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "lemon-master/tests/test_middleware.py": {},
    "lemon-master/tests/test_parser.py": {
        "TestParser.test_get_content_length": {
            "name": "test_get_content_length",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestParser.test_json_parser": {
            "name": "test_json_parser",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestParser.test_url_encoded_parser": {
            "name": "test_url_encoded_parser",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "lemon-master/tests/test_router.py": {},
    "lemon-master/tests/test_server.py": {
        "TestServer.test_serve": {
            "name": "test_serve",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "lemon-master/tests/__init__.py": {}
}
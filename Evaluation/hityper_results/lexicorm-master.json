{
    "lexicorm-master/setup.py": {},
    "lexicorm-master/lexicorm/conversion.py": {
        "python_dict_to_json_dict": {
            "name": "python_dict_to_json_dict",
            "location": 8,
            "return": [
                "dict[, typing.Union[tuple[typing.Union[str,typing.Any]],tuple[typing.Union[str,float]]]]"
            ],
            "arguments": {
                "input": [
                    "dict[str, typing.Any]",
                    "dict[, ]",
                    "dict[str, float]"
                ]
            }
        },
        "json_dict_to_python_dict": {
            "name": "json_dict_to_python_dict",
            "location": 16,
            "return": [
                "dict[, tuple[typing.Union[str,typing.Any]]]"
            ],
            "arguments": {
                "input": [
                    "dict[, ]",
                    "dict[str, typing.Any]"
                ]
            }
        }
    },
    "lexicorm-master/lexicorm/model_to_dict.py": {
        "model_to_dict": {
            "name": "model_to_dict",
            "location": 9,
            "return": [
                "dict[, ]"
            ],
            "arguments": {
                "sqlalchemy_model": [
                    "str",
                    "None",
                    "dict[str, typing.Any]",
                    "typing.Callable[, ]"
                ],
                "get_lazy": [
                    "bool"
                ],
                "return_immediately": [
                    "bool"
                ]
            }
        },
        "_model_to_dict": {
            "name": "_model_to_dict",
            "location": 49,
            "return": [
                "dict[, list[]]"
            ],
            "arguments": {
                "inspected_sqlalchemy_model": [
                    "str",
                    "bool",
                    "dict[, ]",
                    "typing.MutableMapping"
                ],
                "lazy_keys": [
                    "list[str]",
                    "bool",
                    "dict[str, typing.Any]",
                    "dict[, ]",
                    "list[object]",
                    "str",
                    "list[]"
                ],
                "get_lazy": [
                    "bool"
                ]
            }
        },
        "_get_eager_relationships": {
            "name": "_get_eager_relationships",
            "location": 66,
            "return": [
                "list[]"
            ],
            "arguments": {
                "inspected_sqlalchemy_model": [
                    "int",
                    "list[A]"
                ]
            }
        },
        "_get_lazy_relationships": {
            "name": "_get_lazy_relationships",
            "location": 76,
            "return": [
                "list[]"
            ],
            "arguments": {
                "inspected_sqlalchemy_model": [
                    "str",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "_convert_model_list_to_dicts": {
            "name": "_convert_model_list_to_dicts",
            "location": 86,
            "return": [
                "list[]"
            ],
            "arguments": {
                "model_list": [
                    "dict[str, typing.Any]",
                    "dict[, ]",
                    "dict[str, dict[str, typing.Any]]"
                ]
            }
        },
        "_hydrate_eager_relationships": {
            "name": "_hydrate_eager_relationships",
            "location": 92,
            "return": [
                "dict[, ]"
            ],
            "arguments": {
                "inspected_sqlalchemy_model": [
                    "list[str]",
                    "str",
                    "float"
                ],
                "eager_relationships": [
                    "list[str]",
                    "str",
                    "dict[str, list[typing.Any]]",
                    "Exception",
                    "dict[, ]"
                ]
            }
        },
        "_hydrate_lazy_relationships": {
            "name": "_hydrate_lazy_relationships",
            "location": 104,
            "return": [
                "dict[str, ]"
            ],
            "arguments": {
                "inspected_sqlalchemy_model": [
                    "typing.Type",
                    "bytes"
                ],
                "lazy_relationships": [
                    "list[str]",
                    "dict[, ]"
                ]
            }
        }
    },
    "lexicorm-master/lexicorm/type.py": {},
    "lexicorm-master/lexicorm/__init__.py": {},
    "lexicorm-master/test/fixtures.py": {
        "create_tables": {
            "name": "create_tables",
            "location": 36,
            "return": [],
            "arguments": {}
        },
        "get_fixtures": {
            "name": "get_fixtures",
            "location": 41,
            "return": [
                "dict[typing.Text, typing.Union[Band,Musician]]"
            ],
            "arguments": {}
        },
        "get_fixtures_with_relationship": {
            "name": "get_fixtures_with_relationship",
            "location": 58,
            "return": [
                "dict[typing.Text, ]"
            ],
            "arguments": {}
        }
    },
    "lexicorm-master/test/__init__.py": {},
    "lexicorm-master/test/e2e/steps/steps.py": {
        "no_model": {
            "name": "no_model",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "context": [
                    "str",
                    "int"
                ]
            }
        },
        "model_dict_on_model": {
            "name": "model_dict_on_model",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "context": [
                    "str",
                    "typing.Type",
                    "dict[, ]"
                ],
                "model_name": [
                    "str",
                    "bool",
                    "set[str]"
                ]
            }
        },
        "empty_dict": {
            "name": "empty_dict",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "context": [
                    "str",
                    "None"
                ]
            }
        },
        "musician": {
            "name": "musician",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "context": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ]
            }
        },
        "get_dictionary_with_key": {
            "name": "get_dictionary_with_key",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "context": [
                    "str",
                    "dict[, ]",
                    "bool",
                    "bytes",
                    "dict[typing.Any, list[]]"
                ],
                "key": [
                    "str",
                    "dict[, ]",
                    "bool",
                    "bytes",
                    "dict[typing.Any, list[]]"
                ],
                "value": [
                    "str",
                    "dict[, ]",
                    "bool",
                    "bytes",
                    "dict[typing.Any, list[]]"
                ]
            }
        },
        "have_musician": {
            "name": "have_musician",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "context": [
                    "dict[str, typing.Any]",
                    "dict[, ]",
                    "str"
                ]
            }
        },
        "get_dictionary": {
            "name": "get_dictionary",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "context": [
                    "str",
                    "typing.Sequence[str]",
                    "list[str]",
                    "dict[str, typing.Any]",
                    "None"
                ],
                "key": [
                    "str",
                    "typing.Sequence[str]",
                    "list[str]",
                    "dict[str, typing.Any]",
                    "None"
                ],
                "test_type": []
            }
        },
        "find_dict": {
            "name": "find_dict",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "context": [
                    "str",
                    "bool",
                    "typing.Callable[, ]"
                ],
                "object_name": [
                    "str",
                    "bool",
                    "typing.Callable[, ]"
                ],
                "key": [
                    "dict[, ]",
                    "bytes",
                    "bool",
                    "str"
                ],
                "value": [
                    "str",
                    "None"
                ]
            }
        },
        "step_impl": {
            "name": "step_impl",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "context": [
                    "str",
                    "list[str]",
                    "dict[, ]"
                ],
                "object_name": [
                    "str",
                    "typing.Iterable[tuple[typing.Union[int,int]]]"
                ],
                "key": [
                    "str",
                    "list[]",
                    "list[str]",
                    "bool",
                    "dict[, ]"
                ],
                "value": [
                    "str"
                ]
            }
        }
    },
    "lexicorm-master/test/unit/test_conversion.py": {
        "test_python_dict_to_json_dict": {
            "name": "test_python_dict_to_json_dict",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_json_dict_to_python_dict": {
            "name": "test_json_dict_to_python_dict",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "lexicorm-master/test/unit/__init__.py": {}
}
{
    "libkol-master/setup.py": {
        "readme": {
            "name": "readme",
            "location": 11,
            "return": [],
            "arguments": {}
        },
        "VerifyVersionCommand.run": {
            "name": "run",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "libkol-master/ci_test/check_mail.py": {},
    "libkol-master/docs_source/conf.py": {
        "format_annotation": {
            "name": "format_annotation",
            "location": 61,
            "return": [
                "str"
            ],
            "arguments": {
                "annotation": [
                    "str"
                ]
            }
        }
    },
    "libkol-master/examples/chat.py": {},
    "libkol-master/examples/combat.py": {},
    "libkol-master/examples/max.py": {},
    "libkol-master/examples/noncombat.py": {},
    "libkol-master/libkol/Bonus.py": {},
    "libkol-master/libkol/CharacterClass.py": {
        "CharacterClass.stat": {
            "name": "stat",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CharacterClass.has_value": {
            "name": "has_value",
            "location": 35,
            "return": [
                "bool"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "set[str]",
                    "list[]",
                    "dict[str, int]",
                    "dict[, ]"
                ],
                "value": [
                    "str",
                    "typing.Mapping",
                    "int",
                    "set[str]",
                    "list[]",
                    "dict[str, int]",
                    "dict[, ]"
                ]
            }
        },
        "CharacterClass.from_title": {
            "name": "from_title",
            "location": 39,
            "return": [],
            "arguments": {
                "cls": [],
                "title": [
                    "str",
                    "dict[, ]",
                    "dict[str, typing.Any]"
                ]
            }
        }
    },
    "libkol-master/libkol/Chat.py": {
        "Chat.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "session": [
                    "str",
                    "list[str]",
                    "typing.Sequence[str]",
                    "bool"
                ]
            }
        }
    },
    "libkol-master/libkol/Clan.py": {
        "Clan.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "session": [
                    "str",
                    "int"
                ],
                "id": [
                    "str",
                    "None"
                ],
                "name": [
                    "None",
                    "str",
                    "dict[str, typing.Any]",
                    "list[str]"
                ]
            }
        },
        "Clan.__ge__": {
            "name": "__ge__",
            "location": 21,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "dict[, ]",
                    "int",
                    "float",
                    "dict[str, str]",
                    "None"
                ]
            }
        }
    },
    "libkol-master/libkol/Effect.py": {},
    "libkol-master/libkol/Element.py": {
        "Element.damage": {
            "name": "damage",
            "location": 16,
            "return": [
                "dict[str, int]",
                "typing.Literal",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Element.resistance": {
            "name": "resistance",
            "location": 37,
            "return": [
                "dict[str, int]",
                "typing.Literal",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Element.immunity": {
            "name": "immunity",
            "location": 58,
            "return": [
                "dict[str, int]",
                "typing.Literal",
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "libkol-master/libkol/Error.py": {
        "Error.__init__": {
            "name": "__init__",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "int",
                    "float"
                ],
                "wait": [
                    "None",
                    "int",
                    "float"
                ]
            }
        },
        "Error.__str__": {
            "name": "__str__",
            "location": 9,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ItemError.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "libkol-master/libkol/Familiar.py": {
        "FamiliarMeta.__getitem__": {
            "name": "__getitem__",
            "location": 11,
            "return": [],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "float",
                    "int"
                ]
            }
        },
        "Familiar.__ge__": {
            "name": "__ge__",
            "location": 96,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "dict[, ]",
                    "int",
                    "float",
                    "dict[str, str]",
                    "None"
                ]
            }
        },
        "Familiar.have": {
            "name": "have",
            "location": 105,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Familiar.weight": {
            "name": "weight",
            "location": 109,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "libkol-master/libkol/FoldGroup.py": {},
    "libkol-master/libkol/Item.py": {
        "ItemMeta.__getitem__": {
            "name": "__getitem__",
            "location": 28,
            "return": [],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "float",
                    "int"
                ]
            }
        },
        "Item.adventures": {
            "name": "adventures",
            "location": 171,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Item.pluralize": {
            "name": "pluralize",
            "location": 174,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Item.space": {
            "name": "space",
            "location": 178,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Item.cleans_organ": {
            "name": "cleans_organ",
            "location": 198,
            "return": [
                "None",
                "tuple[typing.Union[int,typing.Text]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Item.type": {
            "name": "type",
            "location": 252,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Item.slot": {
            "name": "slot",
            "location": 265,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Item.amount": {
            "name": "amount",
            "location": 358,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Item.equipped": {
            "name": "equipped",
            "location": 361,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Item.have": {
            "name": "have",
            "location": 386,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Item.meet_requirements": {
            "name": "meet_requirements",
            "location": 389,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "libkol-master/libkol/Kmail.py": {
        "Kmail.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "session": [
                    "str",
                    "list[str]",
                    "typing.Sequence[str]",
                    "bool"
                ]
            }
        }
    },
    "libkol-master/libkol/koldate.py": {
        "KLT.utcoffset": {
            "name": "utcoffset",
            "location": 20,
            "return": [],
            "arguments": {
                "self": [],
                "dt": [
                    "typing.Callable[[], None]",
                    "int"
                ]
            }
        },
        "KLT.tzname": {
            "name": "tzname",
            "location": 23,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": [],
                "dt": [
                    "typing.Callable[[], None]",
                    "int"
                ]
            }
        },
        "KLT.dst": {
            "name": "dst",
            "location": 26,
            "return": [],
            "arguments": {
                "self": [],
                "dt": [
                    "typing.Callable[[], None]",
                    "int"
                ]
            }
        },
        "koldate.__init__": {
            "name": "__init__",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "year": [
                    "int",
                    "list[int]"
                ],
                "month": [
                    "int",
                    "list[int]"
                ],
                "day": [
                    "int",
                    "list[int]"
                ]
            }
        },
        "koldate.__lt__": {
            "name": "__lt__",
            "location": 54,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "typing.Sequence[str]",
                    "str",
                    "bool",
                    "complex",
                    "float"
                ]
            }
        },
        "koldate.__lte__": {
            "name": "__lte__",
            "location": 57,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "typing.Sequence[str]",
                    "str",
                    "bool",
                    "complex",
                    "float"
                ]
            }
        },
        "koldate.__gt__": {
            "name": "__gt__",
            "location": 60,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "typing.Sequence[str]",
                    "str",
                    "bool",
                    "complex",
                    "float"
                ]
            }
        },
        "koldate.__gte__": {
            "name": "__gte__",
            "location": 63,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "typing.Sequence[str]",
                    "str",
                    "bool",
                    "complex",
                    "float"
                ]
            }
        },
        "koldate.__eq__": {
            "name": "__eq__",
            "location": 66,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "typing.Sequence[str]",
                    "str",
                    "bool",
                    "complex",
                    "float"
                ]
            }
        },
        "koldate.__sub__": {
            "name": "__sub__",
            "location": 69,
            "return": [],
            "arguments": {
                "self": [],
                "value": [
                    "typing.Sequence[str]",
                    "str",
                    "bool",
                    "complex",
                    "float"
                ]
            }
        },
        "koldate.COLLISION": {
            "name": "COLLISION",
            "location": 73,
            "return": [
                "koldate"
            ],
            "arguments": {
                "self": []
            }
        },
        "koldate.today": {
            "name": "today",
            "location": 77,
            "return": [],
            "arguments": {
                "cls": [
                    "int",
                    "dict[, ]",
                    "float",
                    "str"
                ]
            }
        },
        "koldate.get_phase_name": {
            "name": "get_phase_name",
            "location": 81,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "dict[int, str]",
                    "bool",
                    "list[dict[, ]]"
                ],
                "phase": [
                    "int",
                    "dict[, ]",
                    "dict[str, typing.Any]",
                    "typing.Type"
                ]
            }
        },
        "koldate.from_gregorian": {
            "name": "from_gregorian",
            "location": 85,
            "return": [],
            "arguments": {
                "cls": [
                    "None",
                    "int"
                ],
                "date": [
                    "str"
                ]
            }
        },
        "koldate.get_hamburglar_light": {
            "name": "get_hamburglar_light",
            "location": 95,
            "return": [
                "int"
            ],
            "arguments": {
                "cls": [],
                "ronald_phase": [
                    "int"
                ],
                "grimace_phase": [
                    "int"
                ],
                "hamburglar_phase": [
                    "bool",
                    "str",
                    "None",
                    "typing.Type",
                    "list[str]"
                ]
            }
        },
        "koldate.jarlsberg": {
            "name": "jarlsberg",
            "location": 130,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "koldate.strftime": {
            "name": "strftime",
            "location": 133,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "format": [
                    "str",
                    "int"
                ]
            }
        },
        "koldate.days": {
            "name": "days",
            "location": 147,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "koldate.month_name": {
            "name": "month_name",
            "location": 151,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "koldate.ronald_phase": {
            "name": "ronald_phase",
            "location": 155,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "koldate.grimace_phase": {
            "name": "grimace_phase",
            "location": 159,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "koldate.hamburglar_phase": {
            "name": "hamburglar_phase",
            "location": 163,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "koldate.ronald_light": {
            "name": "ronald_light",
            "location": 170,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "koldate.grimace_light": {
            "name": "grimace_light",
            "location": 177,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "koldate.grimace_darkness": {
            "name": "grimace_darkness",
            "location": 184,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "koldate.hamburglar_light": {
            "name": "hamburglar_light",
            "location": 188,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "koldate.hamburglar_darkness": {
            "name": "hamburglar_darkness",
            "location": 194,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "koldate.moonlight": {
            "name": "moonlight",
            "location": 205,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "libkol-master/libkol/Location.py": {
        "Combat.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "session": [
                    "str",
                    "list[str]",
                    "typing.Sequence[str]",
                    "bool"
                ]
            }
        },
        "Location.__init__": {
            "name": "__init__",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "session": [
                    "int",
                    "str",
                    "None",
                    "float"
                ],
                "id": [
                    "str",
                    "int",
                    "list[str]",
                    "dict[str, str]",
                    "None"
                ]
            }
        }
    },
    "libkol-master/libkol/Maximizer.py": {
        "Maximizer.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "session": [
                    "str",
                    "list[str]",
                    "typing.Sequence[str]",
                    "bool"
                ]
            }
        },
        "Maximizer.__iadd__": {
            "name": "__iadd__",
            "location": 22,
            "return": [
                "Maximizer"
            ],
            "arguments": {
                "self": [],
                "constraint": [
                    "int"
                ]
            }
        },
        "Maximizer.__isub__": {
            "name": "__isub__",
            "location": 41,
            "return": [
                "Maximizer"
            ],
            "arguments": {
                "self": [],
                "constraint": [
                    "int"
                ]
            }
        },
        "Maximizer.calculate_smithsness": {
            "name": "calculate_smithsness",
            "location": 61,
            "return": [
                "bool"
            ],
            "arguments": {
                "solution": [],
                "smithsness": [
                    "bool",
                    "str",
                    "typing.Type",
                    "typing.Match",
                    "list[str]"
                ]
            }
        },
        "Maximizer.calculate_hobo_power": {
            "name": "calculate_hobo_power",
            "location": 69,
            "return": [
                "bool"
            ],
            "arguments": {
                "solution": [
                    "dict[, ]"
                ],
                "hobo_power": [
                    "list[str]",
                    "dict[, ]",
                    "typing.AbstractSet",
                    "None"
                ]
            }
        },
        "Maximizer.enthroned_repr": {
            "name": "enthroned_repr",
            "location": 77,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "familiar": []
            }
        },
        "Maximizer.summarise": {
            "name": "summarise",
            "location": 80,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "libkol-master/libkol/Model.py": {},
    "libkol-master/libkol/Modifier.py": {
        "WeightedModifier.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "modifier": [
                    "int",
                    "str",
                    "tuple[int]",
                    "typing.AbstractSet"
                ],
                "weight": [
                    "int"
                ],
                "min": [
                    "None",
                    "int",
                    "tuple[]",
                    "str",
                    "typing.Sequence[T]"
                ]
            }
        },
        "WeightedModifier.__eq__": {
            "name": "__eq__",
            "location": 16,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "thing": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ]
            }
        },
        "Modifier.__mul__": {
            "name": "__mul__",
            "location": 171,
            "return": [
                "WeightedModifier"
            ],
            "arguments": {
                "self": [],
                "weight": [
                    "float",
                    "int"
                ]
            }
        },
        "Modifier.__ge__": {
            "name": "__ge__",
            "location": 174,
            "return": [
                "WeightedModifier"
            ],
            "arguments": {
                "self": [],
                "min": [
                    "float",
                    "int"
                ]
            }
        },
        "Modifier.apply_percentage": {
            "name": "apply_percentage",
            "location": 177,
            "return": [
                "float",
                "int"
            ],
            "arguments": {
                "self": [],
                "session": [],
                "multiplier": []
            }
        },
        "Modifier.sum": {
            "name": "sum",
            "location": 195,
            "return": [
                "bool",
                "int"
            ],
            "arguments": {
                "self": [],
                "values": []
            }
        },
        "Modifier.normalise": {
            "name": "normalise",
            "location": 219,
            "return": [
                "int",
                "tuple[typing.Union[str,int]]",
                "complex",
                "list[]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "int",
                    "tuple[typing.Union[str,int]]",
                    "complex",
                    "list[]"
                ]
            }
        }
    },
    "libkol-master/libkol/Monster.py": {},
    "libkol-master/libkol/MonsterDrop.py": {},
    "libkol-master/libkol/MonsterImage.py": {},
    "libkol-master/libkol/Outfit.py": {},
    "libkol-master/libkol/OutfitVariant.py": {},
    "libkol-master/libkol/Phylum.py": {},
    "libkol-master/libkol/Session.py": {
        "Stats.from_tuple": {
            "name": "from_tuple",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tuple": [
                    "str",
                    "typing.Callable[, ]"
                ]
            }
        },
        "Session.__init__": {
            "name": "__init__",
            "location": 101,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "db_file": [
                    "None",
                    "str"
                ]
            }
        },
        "Session.username": {
            "name": "username",
            "location": 210,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Session.user_id": {
            "name": "user_id",
            "location": 217,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Session.clan": {
            "name": "clan",
            "location": 224,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Session.adventures": {
            "name": "adventures",
            "location": 250,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Session.hp": {
            "name": "hp",
            "location": 254,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Session.max_hp": {
            "name": "max_hp",
            "location": 258,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Session.mp": {
            "name": "mp",
            "location": 262,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Session.skills": {
            "name": "skills",
            "location": 266,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Session.pwd": {
            "name": "pwd",
            "location": 270,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Session.fury": {
            "name": "fury",
            "location": 274,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Session.get_stat": {
            "name": "get_stat",
            "location": 312,
            "return": [],
            "arguments": {
                "self": [],
                "stat": [
                    "bool",
                    "str"
                ],
                "buffed": [
                    "bool"
                ]
            }
        },
        "Session.get_character_class": {
            "name": "get_character_class",
            "location": 317,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Session.inebriety": {
            "name": "inebriety",
            "location": 321,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Session.fullness": {
            "name": "fullness",
            "location": 325,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Session.spleenhit": {
            "name": "spleenhit",
            "location": 329,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Session.level": {
            "name": "level",
            "location": 333,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Session.effects": {
            "name": "effects",
            "location": 337,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Session.ascensions": {
            "name": "ascensions",
            "location": 341,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Session.gender": {
            "name": "gender",
            "location": 355,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Session.familiar": {
            "name": "familiar",
            "location": 359,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Session.familiar_weight": {
            "name": "familiar_weight",
            "location": 363,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Session.equipment": {
            "name": "equipment",
            "location": 381,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Session.familiars": {
            "name": "familiars",
            "location": 390,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Session.inventory": {
            "name": "inventory",
            "location": 403,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "libkol-master/libkol/Skill.py": {
        "SkillMeta.__getitem__": {
            "name": "__getitem__",
            "location": 11,
            "return": [],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "float",
                    "int"
                ]
            }
        },
        "Skill.buff": {
            "name": "buff",
            "location": 50,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Skill.have": {
            "name": "have",
            "location": 53,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "libkol-master/libkol/Slot.py": {
        "Slot.from_acc_number": {
            "name": "from_acc_number",
            "location": 18,
            "return": [],
            "arguments": {
                "cls": [
                    "str",
                    "typing.Callable[..., None]",
                    "typing.Sequence[str]",
                    "int"
                ],
                "num": [
                    "int",
                    "str"
                ]
            }
        },
        "Slot.to_acc_number": {
            "name": "to_acc_number",
            "location": 21,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Slot.is_accessory": {
            "name": "is_accessory",
            "location": 24,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Slot.from_db": {
            "name": "from_db",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "typing.Sequence[str]",
                    "bool",
                    "tuple[typing.Union[typing.Sequence[typing.Any],typing.Sequence[str],typing.Sequence[typing.Any]]]"
                ],
                "key": [
                    "str"
                ]
            }
        }
    },
    "libkol-master/libkol/Stat.py": {
        "Stat.__contains__": {
            "name": "__contains__",
            "location": 12,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "character_class": [
                    "str",
                    "dict[str, dict[str, str]]",
                    "typing.Type"
                ]
            }
        },
        "Stat.substats": {
            "name": "substats",
            "location": 16,
            "return": [
                "list[typing.Text]",
                "list[]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "libkol-master/libkol/Store.py": {},
    "libkol-master/libkol/Trophy.py": {},
    "libkol-master/libkol/types.py": {},
    "libkol-master/libkol/ZapGroup.py": {},
    "libkol-master/libkol/__init__.py": {
        "run": {
            "name": "run",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "func": [
                    "typing.Callable[, ]",
                    "tuple[]"
                ]
            }
        }
    },
    "libkol-master/libkol/pattern/PatternManager.py": {
        "getOrCompilePattern": {
            "name": "getOrCompilePattern",
            "location": 16,
            "return": [],
            "arguments": {
                "patternId": [
                    "int",
                    "str",
                    "None"
                ]
            }
        }
    },
    "libkol-master/libkol/pattern/Patterns.py": {},
    "libkol-master/libkol/pattern/__init__.py": {},
    "libkol-master/libkol/request/adventure.py": {
        "adventure.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "session": [],
                "location_id": [
                    "str",
                    "int",
                    "bytes"
                ]
            }
        }
    },
    "libkol-master/libkol/request/ascension_history.py": {
        "get_int_cell": {
            "name": "get_int_cell",
            "location": 44,
            "return": [],
            "arguments": {
                "c": [
                    "str",
                    "int",
                    "list[tuple[typing.Union[float,float]]]",
                    "bytes",
                    "dict[int, str]",
                    "float"
                ]
            }
        },
        "ascension_history.__init__": {
            "name": "__init__",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "session": [],
                "player_id": [
                    "dict[, ]",
                    "str"
                ],
                "pre_ns13": [
                    "bool"
                ]
            }
        }
    },
    "libkol-master/libkol/request/autosell_items.py": {
        "autosell_items.__init__": {
            "name": "__init__",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "session": [
                    "typing.Any",
                    "None",
                    "typing.MutableMapping",
                    "dict[str, str]",
                    "typing.Collection"
                ],
                "items": [
                    "list[I]",
                    "str"
                ],
                "quantity": [
                    "int"
                ],
                "all": [
                    "bool"
                ],
                "keep_one": [
                    "bool"
                ]
            }
        }
    },
    "libkol-master/libkol/request/cafe_consume.py": {
        "cafe_consume.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "session": [],
                "cafe": [
                    "list[dict[, ]]",
                    "bool",
                    "str",
                    "dict[str, typing.Any]"
                ],
                "item": [
                    "list[dict[, ]]",
                    "bool",
                    "str",
                    "dict[str, typing.Any]"
                ]
            }
        }
    },
    "libkol-master/libkol/request/cafe_menu.py": {
        "cafe_menu.__init__": {
            "name": "__init__",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "session": [],
                "cafe": [
                    "str",
                    "list[str]",
                    "typing.Sequence[str]",
                    "bool"
                ]
            }
        }
    },
    "libkol-master/libkol/request/campground_kitchen.py": {
        "campground_kitchen.__init__": {
            "name": "__init__",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "session": []
            }
        }
    },
    "libkol-master/libkol/request/campground_rest.py": {
        "campground_rest.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "session": []
            }
        }
    },
    "libkol-master/libkol/request/canadia_gym.py": {
        "canadia_gym.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "session": [],
                "turns": [
                    "str",
                    "list[str]",
                    "typing.Sequence[str]",
                    "bool"
                ]
            }
        }
    },
    "libkol-master/libkol/request/canadia_mindcontrol.py": {
        "canadia_mindcontrol.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "session": [],
                "level": [
                    "str",
                    "list[str]",
                    "typing.Sequence[str]",
                    "bool"
                ]
            }
        }
    },
    "libkol-master/libkol/request/charpane.py": {
        "charpane.__init__": {
            "name": "__init__",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "session": []
            }
        },
        "charpane.get_stat": {
            "name": "get_stat",
            "location": 53,
            "return": [
                "tuple[int]"
            ],
            "arguments": {
                "soup": [
                    "str",
                    "bytes",
                    "dict[str, str]"
                ],
                "key": [
                    "str",
                    "bytes",
                    "dict[str, str]"
                ]
            }
        }
    },
    "libkol-master/libkol/request/chat_channel.py": {
        "chat_channel.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "session": []
            }
        }
    },
    "libkol-master/libkol/request/chat_receive.py": {
        "chat_receive.__init__": {
            "name": "__init__",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "session": [],
                "since": [
                    "int"
                ]
            }
        }
    },
    "libkol-master/libkol/request/chat_send.py": {
        "chat_send.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "session": [],
                "text": [
                    "typing.Text"
                ]
            }
        }
    },
    "libkol-master/libkol/request/chew.py": {
        "chew.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "session": [],
                "item": [
                    "typing.Type",
                    "None",
                    "str",
                    "bool",
                    "dict[, ]"
                ]
            }
        }
    },
    "libkol-master/libkol/request/choice.py": {
        "choice.__init__": {
            "name": "__init__",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "session": [],
                "choice": [
                    "str",
                    "None",
                    "dict[str, typing.Any]",
                    "bool"
                ],
                "option": [
                    "str",
                    "None",
                    "dict[str, typing.Any]",
                    "bool"
                ],
                "extra": [
                    "dict[, ]"
                ]
            }
        }
    },
    "libkol-master/libkol/request/clan_accepting_applications.py": {
        "clan_accepting_applications.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "session": []
            }
        }
    },
    "libkol-master/libkol/request/clan_apply.py": {
        "clan_apply.__init__": {
            "name": "__init__",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "session": [],
                "clan_id": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "libkol-master/libkol/request/clan_log.py": {
        "clan_log.__init__": {
            "name": "__init__",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "session": []
            }
        },
        "clan_log.parse_clan_log": {
            "name": "parse_clan_log",
            "location": 115,
            "return": [
                "ClanLog"
            ],
            "arguments": {
                "cls": [
                    "bool"
                ],
                "raw_log": [
                    "str"
                ]
            }
        }
    },
    "libkol-master/libkol/request/clan_member_boot.py": {
        "clan_member_boot.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "session": [],
                "user_id": [
                    "int"
                ]
            }
        }
    },
    "libkol-master/libkol/request/clan_raids.py": {
        "clan_raids.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "session": []
            }
        },
        "clan_raids.dungeon_name_id_from_title": {
            "name": "dungeon_name_id_from_title",
            "location": 23,
            "return": [
                "tuple[int]"
            ],
            "arguments": {
                "comment": [
                    "str"
                ]
            }
        }
    },
    "libkol-master/libkol/request/clan_raids_previous.py": {
        "clan_raids_previous.__init__": {
            "name": "__init__",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "session": [],
                "page": [
                    "int"
                ]
            }
        }
    },
    "libkol-master/libkol/request/clan_raid_log.py": {
        "clan_raid_log.__init__": {
            "name": "__init__",
            "location": 148,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "session": [],
                "raid_id": [
                    "str",
                    "int",
                    "None"
                ]
            }
        },
        "clan_raid_log.center_with_no_link": {
            "name": "center_with_no_link",
            "location": 156,
            "return": [
                "bool"
            ],
            "arguments": {
                "tag": [
                    "str",
                    "typing.Protocol"
                ]
            }
        },
        "clan_raid_log.parse_raid_log": {
            "name": "parse_raid_log",
            "location": 457,
            "return": [
                "None",
                "Event"
            ],
            "arguments": {
                "cls": [
                    "bool"
                ],
                "raw_log": [
                    "str",
                    "None",
                    "list[str]",
                    "typing.IO",
                    "int"
                ]
            }
        },
        "clan_raid_log.parse_raid": {
            "name": "parse_raid",
            "location": 484,
            "return": [
                "Raid"
            ],
            "arguments": {
                "cls": [],
                "name": [
                    "str"
                ],
                "id": [
                    "int",
                    "str",
                    "None",
                    "typing.Collection"
                ],
                "raid": []
            }
        }
    },
    "libkol-master/libkol/request/clan_ranks.py": {
        "clan_ranks.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "session": []
            }
        },
        "clan_ranks.parse_privileges": {
            "name": "parse_privileges",
            "location": 16,
            "return": [
                "dict[typing.Union[typing.Text,dict[, ]], typing.Union[dict[str, int],int]]"
            ],
            "arguments": {
                "container": []
            }
        }
    },
    "libkol-master/libkol/request/clan_rumpus.py": {
        "Furniture.has_value": {
            "name": "has_value",
            "location": 38,
            "return": [
                "bool"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "set[enum.Enum]"
                ],
                "value": [
                    "str",
                    "typing.Type",
                    "set[enum.Enum]"
                ]
            }
        },
        "clan_rumpus.__init__": {
            "name": "__init__",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "session": []
            }
        }
    },
    "libkol-master/libkol/request/clan_rumpus_effect.py": {
        "clan_rumpus_effect.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "session": [],
                "type": [
                    "dict[, ]",
                    "int",
                    "str"
                ]
            }
        }
    },
    "libkol-master/libkol/request/clan_rumpus_gym.py": {
        "clan_rumpus_gym.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "session": [],
                "stat": [
                    "str",
                    "bool",
                    "None"
                ],
                "turns": [
                    "str",
                    "bool",
                    "None"
                ]
            }
        }
    },
    "libkol-master/libkol/request/clan_rumpus_item.py": {
        "clan_rumpus_item.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "session": [],
                "furniture": [
                    "dict[, ]",
                    "str",
                    "None",
                    "dict[str, typing.Any]"
                ]
            }
        }
    },
    "libkol-master/libkol/request/clan_rumpus_meat.py": {
        "clan_rumpus_meat.__init__": {
            "name": "__init__",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "session": [],
                "furniture": [
                    "dict[, ]",
                    "str",
                    "None",
                    "dict[str, typing.Any]"
                ]
            }
        }
    },
    "libkol-master/libkol/request/clan_rumpus_sofa.py": {
        "clan_rumpus_sofa.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "session": [],
                "turns": [
                    "int"
                ]
            }
        }
    },
    "libkol-master/libkol/request/clan_search.py": {
        "clan_search.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "session": [],
                "query": [
                    "str",
                    "int"
                ],
                "nameonly": [
                    "bool"
                ]
            }
        }
    },
    "libkol-master/libkol/request/clan_show.py": {
        "clan_show.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "session": [],
                "id": [
                    "str",
                    "int",
                    "None",
                    "dict[str, T]"
                ]
            }
        }
    },
    "libkol-master/libkol/request/clan_stash.py": {
        "clan_stash.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "session": []
            }
        }
    },
    "libkol-master/libkol/request/clan_stash_item_add.py": {
        "clan_stash_item_add.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "session": [],
                "items": [
                    "list[I]",
                    "dict[str, str]",
                    "dict[str, bytes]",
                    "dict[, ]",
                    "dict[int, dict[str, typing.Any]]",
                    "list[]"
                ]
            }
        }
    },
    "libkol-master/libkol/request/clan_stash_item_remove.py": {
        "clan_stash_item_remove.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "session": [],
                "item_id": [
                    "int"
                ],
                "quantity": [
                    "int"
                ]
            }
        }
    },
    "libkol-master/libkol/request/clan_stash_meat_add.py": {
        "clan_stash_meat_add.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "session": [],
                "quantity": [
                    "str",
                    "list[str]",
                    "typing.Sequence[str]",
                    "bool"
                ]
            }
        }
    },
    "libkol-master/libkol/request/clan_vip_crimbotree.py": {
        "clan_vip_crimbotree.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "session": []
            }
        }
    },
    "libkol-master/libkol/request/clan_vip_klaw.py": {
        "clan_vip_klaw.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "session": []
            }
        }
    },
    "libkol-master/libkol/request/clan_vip_lookingglass.py": {
        "clan_vip_lookingglass.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "session": []
            }
        }
    },
    "libkol-master/libkol/request/clan_whitelist.py": {
        "clan_whitelist.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "session": []
            }
        }
    },
    "libkol-master/libkol/request/clan_whitelist_add.py": {
        "clan_whitelist_add.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "session": [],
                "user": [
                    "bool",
                    "str"
                ],
                "rank": [
                    "int"
                ],
                "title": [
                    "typing.Text"
                ]
            }
        }
    },
    "libkol-master/libkol/request/clan_whitelist_remove.py": {
        "clan_whitelist_remove.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "session": [],
                "user": [
                    "bool",
                    "str"
                ]
            }
        }
    },
    "libkol-master/libkol/request/closet_item_add.py": {
        "closet_item_add.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "session": [],
                "item": [
                    "typing.Callable[, ]",
                    "str"
                ],
                "quantity": [
                    "typing.Callable[, ]",
                    "str"
                ]
            }
        }
    },
    "libkol-master/libkol/request/closet_meat_add.py": {
        "closet_meat_add.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "session": [],
                "quantity": [
                    "str",
                    "list[str]",
                    "typing.Sequence[str]",
                    "bool"
                ]
            }
        }
    },
    "libkol-master/libkol/request/closet_meat_remove.py": {
        "closet_meat_remove.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "session": [],
                "amount": [
                    "int"
                ]
            }
        }
    },
    "libkol-master/libkol/request/combat.py": {
        "combat.__init__": {
            "name": "__init__",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "session": [],
                "action": [
                    "float",
                    "str",
                    "None"
                ],
                "skill": [
                    "None",
                    "str",
                    "float",
                    "int"
                ],
                "item": [
                    "None",
                    "str",
                    "bool",
                    "list[tuple[typing.Union[bytes,bytes]]]",
                    "dict[int, int]",
                    "list[dict[, ]]",
                    "dict[, ]"
                ]
            }
        },
        "combat.parse_damage": {
            "name": "parse_damage",
            "location": 114,
            "return": [
                "int"
            ],
            "arguments": {
                "log": [
                    "int",
                    "dict[str, str]",
                    "str"
                ]
            }
        },
        "combat.parse_event": {
            "name": "parse_event",
            "location": 148,
            "return": [
                "CombatEvent"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "dict[str, typing.Any]"
                ],
                "line": []
            }
        }
    },
    "libkol-master/libkol/request/craft.py": {
        "craft.__init__": {
            "name": "__init__",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "session": [
                    "typing.Any",
                    "None",
                    "dict[str, str]",
                    "dict[, ]"
                ],
                "mode": [
                    "bool",
                    "typing.Any",
                    "None",
                    "dict[str, typing.Any]"
                ],
                "ingredients": [],
                "quantity": [
                    "int"
                ],
                "max": [
                    "bool"
                ]
            }
        }
    },
    "libkol-master/libkol/request/craft_paste.py": {
        "craft_paste.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "session": [],
                "item": [
                    "bool",
                    "list[list[str]]"
                ],
                "quantity": [
                    "int"
                ]
            }
        }
    },
    "libkol-master/libkol/request/curse.py": {
        "curse.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "session": [],
                "player": [],
                "item": []
            }
        }
    },
    "libkol-master/libkol/request/display_case_add_items.py": {
        "display_case_add_items.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "session": [],
                "items": [
                    "list[I]",
                    "dict[str, str]",
                    "dict[str, bytes]",
                    "dict[, ]",
                    "dict[int, dict[str, typing.Any]]",
                    "list[]"
                ]
            }
        }
    },
    "libkol-master/libkol/request/drink.py": {
        "drink.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "session": [],
                "item": [
                    "typing.Type",
                    "None",
                    "str",
                    "bool",
                    "dict[, ]"
                ],
                "utensil": [
                    "None",
                    "str",
                    "list[str]",
                    "bool",
                    "dict[, ]",
                    "typing.Callable[str, bool]"
                ]
            }
        }
    },
    "libkol-master/libkol/request/eat.py": {
        "eat.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "session": [],
                "item": [
                    "typing.Type",
                    "None",
                    "str",
                    "bool",
                    "dict[, ]"
                ],
                "utensil": [
                    "None",
                    "str",
                    "list[str]",
                    "bool",
                    "dict[, ]",
                    "typing.Callable[str, bool]"
                ]
            }
        }
    },
    "libkol-master/libkol/request/equip.py": {
        "equip.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "session": [],
                "item": [
                    "typing.Type",
                    "None",
                    "str",
                    "bool",
                    "dict[, ]"
                ],
                "slot": []
            }
        }
    },
    "libkol-master/libkol/request/equipment.py": {
        "equipment.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "session": []
            }
        }
    },
    "libkol-master/libkol/request/familiar.py": {
        "familiar.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "session": []
            }
        }
    },
    "libkol-master/libkol/request/guild_malus.py": {
        "guild_malus.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "session": [],
                "item": [
                    "str",
                    "typing.Mapping",
                    "None",
                    "dict[, ]"
                ],
                "quantity": [
                    "int"
                ]
            }
        }
    },
    "libkol-master/libkol/request/guild_train.py": {
        "guild_train.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "session": [],
                "skill": [
                    "dict[str, typing.Any]",
                    "dict[, ]",
                    "None",
                    "typing.MutableMapping"
                ]
            }
        }
    },
    "libkol-master/libkol/request/hermit_menu.py": {
        "hermit_menu.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "session": []
            }
        }
    },
    "libkol-master/libkol/request/hermit_trade.py": {
        "hermit_trade.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "session": [],
                "item": [
                    "str",
                    "set[str]",
                    "bool",
                    "dict[str, typing.Any]"
                ],
                "quantity": [
                    "int"
                ]
            }
        }
    },
    "libkol-master/libkol/request/homepage.py": {
        "homepage.__init__": {
            "name": "__init__",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "session": [],
                "server_number": [
                    "int"
                ]
            }
        }
    },
    "libkol-master/libkol/request/inventory.py": {
        "inventory.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "session": []
            }
        }
    },
    "libkol-master/libkol/request/item_description.py": {
        "item_description.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "session": [],
                "descid": [
                    "str",
                    "list[str]",
                    "typing.Sequence[str]",
                    "bool"
                ]
            }
        }
    },
    "libkol-master/libkol/request/item_discard.py": {
        "item_discard.__init__": {
            "name": "__init__",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "session": [],
                "item": [
                    "typing.Type",
                    "None",
                    "str",
                    "bool",
                    "dict[, ]"
                ]
            }
        }
    },
    "libkol-master/libkol/request/item_information.py": {
        "item_information.__init__": {
            "name": "__init__",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "session": [],
                "item_id": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "libkol-master/libkol/request/item_multi_use.py": {
        "item_multi_use.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "session": [],
                "item": [
                    "typing.Callable[, ]",
                    "str"
                ],
                "quantity": [
                    "typing.Callable[, ]",
                    "str"
                ]
            }
        }
    },
    "libkol-master/libkol/request/item_search.py": {
        "item_search.__init__": {
            "name": "__init__",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "session": [],
                "query": [
                    "dict[str, typing.Any]",
                    "None",
                    "typing.Sequence[]",
                    "int",
                    "str"
                ],
                "category": [],
                "sort_items_by": [],
                "tiers": [
                    "list[]"
                ],
                "consumable_by_me": [
                    "bool"
                ],
                "weapon_attribute": [
                    "int"
                ],
                "weapon_hands": [
                    "int"
                ],
                "wearable_by_me": [
                    "bool"
                ],
                "start": [
                    "int"
                ]
            }
        }
    },
    "libkol-master/libkol/request/item_use.py": {
        "item_use.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "session": [],
                "item": [
                    "typing.Type",
                    "None",
                    "str",
                    "bool",
                    "dict[, ]"
                ]
            }
        }
    },
    "libkol-master/libkol/request/kmail_delete.py": {
        "kmail_delete.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "session": [],
                "message_ids": [
                    "list[int]",
                    "str",
                    "dict[, ]",
                    "list[dict[, ]]"
                ],
                "box": [
                    "typing.Text"
                ]
            }
        }
    },
    "libkol-master/libkol/request/kmail_get.py": {
        "kmail_get.__init__": {
            "name": "__init__",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "session": [],
                "box": [
                    "typing.Text"
                ],
                "page": [
                    "int"
                ],
                "messages_per_page": [
                    "int"
                ],
                "oldest_first": [
                    "bool"
                ]
            }
        }
    },
    "libkol-master/libkol/request/kmail_send.py": {
        "kmail_send.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "session": [],
                "recipient": [
                    "bytes",
                    "list[typing.Type]",
                    "None",
                    "dict[, ]",
                    "list[]",
                    "dict[str, dict[str, typing.Any]]",
                    "typing.Callable[, ]"
                ],
                "message": [
                    "typing.Text"
                ],
                "items": [
                    "list[]"
                ],
                "meat": [
                    "int"
                ]
            }
        }
    },
    "libkol-master/libkol/request/login.py": {
        "login.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "session": [],
                "username": [
                    "str"
                ],
                "password": [
                    "str",
                    "dict[str, typing.Any]",
                    "bool"
                ],
                "challenge": [
                    "None",
                    "str",
                    "dict[str, str]"
                ],
                "stealth": [
                    "bool"
                ]
            }
        }
    },
    "libkol-master/libkol/request/logout.py": {
        "logout.__init__": {
            "name": "__init__",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "session": []
            }
        }
    },
    "libkol-master/libkol/request/main.py": {
        "main.__init__": {
            "name": "__init__",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "session": []
            }
        }
    },
    "libkol-master/libkol/request/mall_price.py": {
        "mall_price.__init__": {
            "name": "__init__",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "session": [],
                "item": [
                    "str",
                    "dict[, ]"
                ]
            }
        }
    },
    "libkol-master/libkol/request/mall_purchase.py": {
        "mall_purchase.__init__": {
            "name": "__init__",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "session": [],
                "listing": [
                    "None",
                    "dict[, ]",
                    "dict[str, object]",
                    "str"
                ],
                "store_id": [
                    "None",
                    "int",
                    "str",
                    "bytes"
                ],
                "item": [
                    "None",
                    "dict[str, typing.Any]",
                    "str",
                    "list[str]",
                    "dict[, ]"
                ],
                "price": [
                    "None",
                    "str",
                    "dict[str, typing.Any]",
                    "dict[, ]",
                    "dict[str, str]",
                    "typing.Sequence[str]"
                ],
                "quantity": [
                    "None",
                    "str",
                    "int",
                    "typing.Any",
                    "dict[str, typing.Any]"
                ]
            }
        }
    },
    "libkol-master/libkol/request/mall_search.py": {
        "mall_search.__init__": {
            "name": "__init__",
            "location": 104,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "session": [],
                "query": [
                    "typing.Type",
                    "float",
                    "None",
                    "bool",
                    "str",
                    "set[str]"
                ],
                "category": [],
                "no_limits": [
                    "bool"
                ],
                "max_price": [
                    "int"
                ],
                "num_results": [
                    "int"
                ],
                "sort_items_by": [],
                "sort_shops_by": [],
                "tiers": [
                    "list[]"
                ],
                "consumable_by_me": [
                    "bool"
                ],
                "weapon_attribute": [
                    "int"
                ],
                "weapon_hands": [
                    "int"
                ],
                "wearable_by_me": [
                    "bool"
                ],
                "start": [
                    "int"
                ]
            }
        }
    },
    "libkol-master/libkol/request/mall_transactions.py": {
        "mall_transactions.__init__": {
            "name": "__init__",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "session": []
            }
        }
    },
    "libkol-master/libkol/request/mining.py": {
        "mining.__init__": {
            "name": "__init__",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "session": [],
                "mine": [
                    "str",
                    "list[str]",
                    "typing.Sequence[str]",
                    "bool"
                ],
                "reset": [
                    "bool"
                ],
                "coords": [
                    "None",
                    "tuple[typing.Union[int,int]]",
                    "bool",
                    "dict[str, typing.Any]",
                    "dict[str, str]",
                    "tuple[]"
                ]
            }
        },
        "mining.parse_mine": {
            "name": "parse_mine",
            "location": 56,
            "return": [
                "list[list[MiningSpotType]]"
            ],
            "arguments": {
                "content": [
                    "str",
                    "int",
                    "None"
                ]
            }
        }
    },
    "libkol-master/libkol/request/npc_buy.py": {
        "npc_buy.__init__": {
            "name": "__init__",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "session": [],
                "store": [
                    "int",
                    "None",
                    "str",
                    "list[tuple[typing.Union[str,str]]]",
                    "bytes"
                ],
                "item": [
                    "dict[, ]",
                    "typing.Callable[, ]"
                ],
                "quantity": [
                    "int"
                ]
            }
        }
    },
    "libkol-master/libkol/request/player_profile.py": {
        "player_profile.__init__": {
            "name": "__init__",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "session": [],
                "player_id": [
                    "str",
                    "int",
                    "None"
                ]
            }
        }
    },
    "libkol-master/libkol/request/player_search.py": {
        "player_search.__init__": {
            "name": "__init__",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "session": [],
                "query": [
                    "bool",
                    "str",
                    "Exception",
                    "None",
                    "typing.Callable[list[], typing.Any]"
                ],
                "query_type": [],
                "pvp_only": [
                    "bool"
                ],
                "hardcore_only": [
                    "None",
                    "bool",
                    "str",
                    "Exception",
                    "typing.Callable[list[], typing.Any]"
                ],
                "level": [
                    "None",
                    "bool",
                    "str",
                    "Exception",
                    "typing.Callable[list[], typing.Any]"
                ],
                "fame": [
                    "None",
                    "bool",
                    "str",
                    "Exception",
                    "typing.Callable[list[], typing.Any]"
                ]
            }
        }
    },
    "libkol-master/libkol/request/pulverize.py": {
        "pulverize.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "session": [],
                "item": [
                    "typing.Callable[, ]",
                    "str"
                ],
                "quantity": [
                    "int"
                ]
            }
        }
    },
    "libkol-master/libkol/request/questlog.py": {
        "questlog.__init__": {
            "name": "__init__",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "session": [],
                "page": []
            }
        }
    },
    "libkol-master/libkol/request/request.py": {
        "Request.__init__": {
            "name": "__init__",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "session": [
                    "str",
                    "list[str]",
                    "typing.Sequence[str]",
                    "bool"
                ]
            }
        }
    },
    "libkol-master/libkol/request/skills.py": {
        "skills.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "session": []
            }
        }
    },
    "libkol-master/libkol/request/skill_use.py": {
        "skill_use.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "session": [],
                "skill": [
                    "str",
                    "None",
                    "bool",
                    "float"
                ],
                "times": [
                    "int"
                ],
                "target": [
                    "None",
                    "str",
                    "dict[str, typing.Any]",
                    "int"
                ]
            }
        }
    },
    "libkol-master/libkol/request/status.py": {
        "status.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "session": []
            }
        }
    },
    "libkol-master/libkol/request/store_inventory.py": {
        "store_inventory.__init__": {
            "name": "__init__",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "session": []
            }
        }
    },
    "libkol-master/libkol/request/store_item_add.py": {
        "store_item_add.__init__": {
            "name": "__init__",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "session": [],
                "item": [
                    "str",
                    "bool"
                ],
                "quantity": [
                    "int"
                ],
                "limit": [
                    "int"
                ],
                "price": [
                    "int"
                ],
                "from_hangks": [
                    "bool"
                ]
            }
        }
    },
    "libkol-master/libkol/request/store_item_remove.py": {
        "store_item_remove.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "session": [],
                "item": [
                    "typing.Callable[, ]",
                    "str"
                ],
                "quantity": [
                    "int"
                ]
            }
        }
    },
    "libkol-master/libkol/request/store_item_update.py": {
        "store_item_update.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "session": [],
                "listings": []
            }
        }
    },
    "libkol-master/libkol/request/trade_cancel.py": {
        "trade_cancel.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "session": [],
                "id": [
                    "str",
                    "int",
                    "None",
                    "set[int]"
                ],
                "status": [
                    "str",
                    "int",
                    "None",
                    "set[int]"
                ]
            }
        }
    },
    "libkol-master/libkol/request/trade_offer_decline.py": {
        "trade_offer_decline.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "session": [],
                "trade_id": [
                    "str",
                    "int",
                    "None"
                ]
            }
        }
    },
    "libkol-master/libkol/request/trade_pending.py": {
        "trade_pending.__init__": {
            "name": "__init__",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "session": []
            }
        }
    },
    "libkol-master/libkol/request/trade_propose.py": {
        "trade_propose.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "session": [],
                "user_id": [
                    "str",
                    "int"
                ],
                "item_quantities": [
                    "list[]"
                ],
                "meat": [
                    "int"
                ],
                "message": [
                    "typing.Text"
                ]
            }
        }
    },
    "libkol-master/libkol/request/trade_respond.py": {
        "trade_respond.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "session": [],
                "trade_id": [
                    "int",
                    "str",
                    "dict[str, typing.Any]"
                ],
                "item_quantities": [
                    "list[]"
                ],
                "meat": [
                    "int"
                ],
                "message": [
                    "typing.Text"
                ]
            }
        }
    },
    "libkol-master/libkol/request/trade_response_accept.py": {
        "trade_response_accept.__init__": {
            "name": "__init__",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "session": [],
                "trade_id": [
                    "str",
                    "int",
                    "None"
                ]
            }
        }
    },
    "libkol-master/libkol/request/trade_response_decline.py": {
        "trade_response_decline.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "session": [],
                "trade_id": [
                    "str",
                    "int",
                    "None"
                ]
            }
        }
    },
    "libkol-master/libkol/request/trophy.py": {
        "trophy.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "session": []
            }
        }
    },
    "libkol-master/libkol/request/trophy_buy.py": {
        "trophy_buy.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "session": [],
                "trophy": [
                    "dict[str, typing.Any]",
                    "dict[, ]",
                    "None",
                    "typing.MutableMapping"
                ]
            }
        }
    },
    "libkol-master/libkol/request/uneffect.py": {
        "uneffect.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "session": [],
                "effect_id": [
                    "str",
                    "int",
                    "None"
                ]
            }
        }
    },
    "libkol-master/libkol/request/unequip.py": {
        "unequip.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "session": [],
                "slot": [
                    "None",
                    "str",
                    "dict[str, str]",
                    "tuple[typing.Union[int,int]]",
                    "dict[, ]",
                    "int"
                ]
            }
        }
    },
    "libkol-master/libkol/request/__init__.py": {},
    "libkol-master/libkol/staticdata/Adventures.py": {},
    "libkol-master/libkol/staticdata/Quests.py": {},
    "libkol-master/libkol/staticdata/Skills.py": {},
    "libkol-master/libkol/staticdata/__init__.py": {},
    "libkol-master/libkol/util/decorators.py": {
        "logged_in": {
            "name": "logged_in",
            "location": 6,
            "return": [],
            "arguments": {
                "func": []
            }
        },
        "logged_in._decorator": {
            "name": "_decorator",
            "location": 8,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "libkol-master/libkol/util/EnumField.py": {
        "EnumField.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "enum_type": [
                    "str"
                ]
            }
        },
        "EnumField.to_db_value": {
            "name": "to_db_value",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "typing.Any",
                    "None",
                    "typing.Type"
                ],
                "instance": [
                    "float",
                    "str",
                    "bool"
                ]
            }
        },
        "EnumField.to_python_value": {
            "name": "to_python_value",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "None"
                ]
            }
        }
    },
    "libkol-master/libkol/util/expression.py": {
        "arg_encode": {
            "name": "arg_encode",
            "location": 38,
            "return": [],
            "arguments": {
                "v": [
                    "str"
                ]
            }
        },
        "arg_decode": {
            "name": "arg_decode",
            "location": 43,
            "return": [],
            "arguments": {
                "v": []
            }
        },
        "parse": {
            "name": "parse",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "expression_string": [
                    "str"
                ]
            }
        }
    },
    "libkol-master/libkol/util/parsing.py": {
        "panel": {
            "name": "panel",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "html": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ],
                "title": [
                    "typing.Text"
                ]
            }
        },
        "get_value": {
            "name": "get_value",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "soup": [],
                "key": [
                    "str",
                    "bool"
                ]
            }
        },
        "to_float": {
            "name": "to_float",
            "location": 29,
            "return": [
                "float"
            ],
            "arguments": {
                "s": [
                    "str"
                ]
            }
        },
        "to_int": {
            "name": "to_int",
            "location": 33,
            "return": [
                "int"
            ],
            "arguments": {
                "s": [
                    "str"
                ]
            }
        },
        "wrap_elements": {
            "name": "wrap_elements",
            "location": 37,
            "return": [],
            "arguments": {
                "wrapper": [
                    "float",
                    "str",
                    "int",
                    "BaseException"
                ],
                "elements": [
                    "list[str]",
                    "list[bs4.Tag]",
                    "str"
                ]
            }
        },
        "split_by_br": {
            "name": "split_by_br",
            "location": 45,
            "return": [
                "list[]"
            ],
            "arguments": {
                "element": [
                    "dict[str, typing.Any]",
                    "None"
                ],
                "wrapper": [
                    "None",
                    "int"
                ]
            }
        },
        "meat": {
            "name": "meat",
            "location": 110,
            "return": [
                "int"
            ],
            "arguments": {
                "text": [
                    "str"
                ]
            }
        },
        "substat": {
            "name": "substat",
            "location": 122,
            "return": [
                "dict[, ]"
            ],
            "arguments": {
                "text": [
                    "str"
                ]
            }
        },
        "stats": {
            "name": "stats",
            "location": 140,
            "return": [
                "dict[Stat, int]"
            ],
            "arguments": {
                "text": [
                    "str"
                ]
            }
        },
        "level": {
            "name": "level",
            "location": 159,
            "return": [
                "int"
            ],
            "arguments": {
                "text": [
                    "str",
                    "typing.Pattern"
                ]
            }
        },
        "hp": {
            "name": "hp",
            "location": 170,
            "return": [
                "bool"
            ],
            "arguments": {
                "text": [
                    "str"
                ]
            }
        },
        "mp": {
            "name": "mp",
            "location": 179,
            "return": [
                "bool"
            ],
            "arguments": {
                "text": [
                    "str"
                ]
            }
        },
        "inebriety": {
            "name": "inebriety",
            "location": 188,
            "return": [
                "int"
            ],
            "arguments": {
                "text": [
                    "str"
                ]
            }
        },
        "adventures": {
            "name": "adventures",
            "location": 193,
            "return": [
                "int"
            ],
            "arguments": {
                "text": [
                    "str"
                ]
            }
        },
        "effects": {
            "name": "effects",
            "location": 198,
            "return": [
                "list[dict[typing.Text, ]]"
            ],
            "arguments": {
                "text": [
                    "str"
                ]
            }
        }
    },
    "libkol-master/libkol/util/PickleField.py": {
        "save_function": {
            "name": "save_function",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "pickler": [
                    "bool",
                    "list[]",
                    "str"
                ],
                "obj": [
                    "bool",
                    "list[]",
                    "str"
                ]
            }
        },
        "PickleField.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PickleField.encode": {
            "name": "encode",
            "location": 24,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "value": [
                    "str",
                    "None",
                    "list[]"
                ]
            }
        },
        "PickleField.to_db_value": {
            "name": "to_db_value",
            "location": 32,
            "return": [],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "float",
                    "list[str]",
                    "typing.Callable[object, typing.Any]",
                    "int"
                ],
                "instance": [
                    "float",
                    "str",
                    "bool"
                ]
            }
        },
        "PickleField.to_python_value": {
            "name": "to_python_value",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ]
            }
        }
    },
    "libkol-master/libkol/util/__init__.py": {},
    "libkol-master/test/test_koldate.py": {
        "KoldateTestCase.test_ronald_phase": {
            "name": "test_ronald_phase",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "KoldateTestCase.test_ronald_light": {
            "name": "test_ronald_light",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "KoldateTestCase.test_grimace_phase": {
            "name": "test_grimace_phase",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "KoldateTestCase.test_grimace_light": {
            "name": "test_grimace_light",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "KoldateTestCase.test_hamburglar_phase": {
            "name": "test_hamburglar_phase",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "KoldateTestCase.test_hamburglar_light": {
            "name": "test_hamburglar_light",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "KoldateTestCase.test_moonlight": {
            "name": "test_moonlight",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "libkol-master/test/__init__.py": {},
    "libkol-master/test/request/test_base.py": {
        "open_test_data": {
            "name": "open_test_data",
            "location": 15,
            "return": [
                "typing.IO"
            ],
            "arguments": {
                "request": [
                    "str",
                    "bool",
                    "dict[str, typing.Any]"
                ],
                "variant": [
                    "str",
                    "bool",
                    "dict[str, typing.Any]"
                ],
                "ext": [
                    "typing.Text"
                ]
            }
        },
        "MockSession.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "test": [
                    "int",
                    "None",
                    "str",
                    "list[str]",
                    "dict[str, typing.Any]"
                ],
                "request_mocks": [
                    "int",
                    "None",
                    "str",
                    "list[str]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "TestCase.run_async": {
            "name": "run_async",
            "location": 64,
            "return": [
                "str",
                "dict[str, typing.Any]",
                "dict[, ]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "str",
                    "bool",
                    "dict[str, list[dict[, ]]]"
                ],
                "async_test": [
                    "str",
                    "bool",
                    "dict[str, list[dict[, ]]]"
                ],
                "ext": [
                    "typing.Text"
                ],
                "request_mocks": [
                    "dict[, ]"
                ]
            }
        },
        "MockSession.__init__.async_return": {
            "name": "async_return",
            "location": 27,
            "return": [],
            "arguments": {
                "url": []
            }
        }
    },
    "libkol-master/test/request/test_charpane.py": {
        "CharpaneTestCase.test_charpane_basic": {
            "name": "test_charpane_basic",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CharpaneTestCase.test_charpane_custom_title": {
            "name": "test_charpane_custom_title",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "libkol-master/test/request/test_chat_send.py": {
        "ChatSendTestCase.test_chat_send_no_respose": {
            "name": "test_chat_send_no_respose",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ChatSendTestCase.test_chat_send_green_response": {
            "name": "test_chat_send_green_response",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "libkol-master/test/request/test_choice.py": {
        "ChoiceTestCase.test_choice_shore": {
            "name": "test_choice_shore",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "libkol-master/test/request/test_clan_accepting_applications.py": {
        "ClanAcceptingApplicationsTestCase.test_clan_accepting_applications_on": {
            "name": "test_clan_accepting_applications_on",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ClanAcceptingApplicationsTestCase.test_clan_accepting_applications_off": {
            "name": "test_clan_accepting_applications_off",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "libkol-master/test/request/test_clan_log.py": {
        "ClanLogTestCase.test_clan_log_basic": {
            "name": "test_clan_log_basic",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ClanLogTestCase.test_clan_log_busy": {
            "name": "test_clan_log_busy",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "libkol-master/test/request/test_clan_raid_log.py": {
        "ClanRaidLogTestCase.test_clan_raid_log_events": {
            "name": "test_clan_raid_log_events",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "libkol-master/test/request/test_combat.py": {
        "CombatTestCase.test_combat_parse_damage": {
            "name": "test_combat_parse_damage",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CombatTestCase.test_combat_fumble": {
            "name": "test_combat_fumble",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "libkol-master/test/request/test_craft.py": {
        "CraftTestCase.test_craft_combine_meatpaste_error": {
            "name": "test_craft_combine_meatpaste_error",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CraftTestCase.test_craft_cook_recipe_error": {
            "name": "test_craft_cook_recipe_error",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "libkol-master/test/request/test_equipment.py": {
        "EquipmentTestCase.test_equipment_accessories_merged": {
            "name": "test_equipment_accessories_merged",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EquipmentTestCase.test_equipment_accessories_separate": {
            "name": "test_equipment_accessories_separate",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "libkol-master/test/request/test_familiar.py": {
        "MiningTestCase.test_familiar_basic": {
            "name": "test_familiar_basic",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "libkol-master/test/request/test_hermit_menu.py": {
        "HermitMenuTestCase.test_hermit_menu_clovers": {
            "name": "test_hermit_menu_clovers",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HermitMenuTestCase.test_hermit_menu_unrecognised": {
            "name": "test_hermit_menu_unrecognised",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "libkol-master/test/request/test_hermit_trade.py": {
        "HermitTradeTestCase.test_hermit_trade_clover": {
            "name": "test_hermit_trade_clover",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HermitTradeTestCase.test_hermit_trade_doesnt_sell": {
            "name": "test_hermit_trade_doesnt_sell",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HermitTradeTestCase.test_hermit_trade_insufficient": {
            "name": "test_hermit_trade_insufficient",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "libkol-master/test/request/test_item_description.py": {
        "ItemDescriptionTestCase.test_item_description_food": {
            "name": "test_item_description_food",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ItemDescriptionTestCase.test_item_description_hat": {
            "name": "test_item_description_hat",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "libkol-master/test/request/test_mall_price.py": {
        "MallPriceTestCase.test_mall_price_basic": {
            "name": "test_mall_price_basic",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MallPriceTestCase.test_mall_price_commas": {
            "name": "test_mall_price_commas",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "libkol-master/test/request/test_mall_search.py": {
        "MallSearchTestCase.test_mall_search_lime": {
            "name": "test_mall_search_lime",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MallSearchTestCase.test_mall_search_limited_include": {
            "name": "test_mall_search_limited_include",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MallSearchTestCase.test_mall_search_limited_exclude": {
            "name": "test_mall_search_limited_exclude",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "libkol-master/test/request/test_mall_transactions.py": {
        "MallTransactionsTestCase.test_mall_transactions_short": {
            "name": "test_mall_transactions_short",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "libkol-master/test/request/test_mining.py": {
        "MiningTestCase.test_mining_mid_mine": {
            "name": "test_mining_mid_mine",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "libkol-master/test/request/test_player_profile.py": {
        "PlayerSearchTestCase.test_player_profile_public": {
            "name": "test_player_profile_public",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PlayerSearchTestCase.test_player_profile_private": {
            "name": "test_player_profile_private",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "libkol-master/test/request/test_player_search.py": {
        "PlayerSearchTestCase.test_player_search_basic": {
            "name": "test_player_search_basic",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PlayerSearchTestCase.test_player_search_pvp": {
            "name": "test_player_search_pvp",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PlayerSearchTestCase.test_player_search_infinity": {
            "name": "test_player_search_infinity",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "libkol-master/test/request/test_skills.py": {
        "SkillsTestCase.test_skills_lots": {
            "name": "test_skills_lots",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "libkol-master/test/request/test_trophy.py": {
        "TrophyTestCase.test_trophy_none": {
            "name": "test_trophy_none",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TrophyTestCase.test_trophy_one": {
            "name": "test_trophy_one",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "libkol-master/tools/bonuses.py": {
        "ModifierError.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "bool",
                    "str"
                ],
                "modifier": [
                    "str",
                    "typing.AbstractSet",
                    "typing.Mapping",
                    "bool",
                    "set[]",
                    "tuple[typing.Union[float,float,float]]"
                ]
            }
        }
    },
    "libkol-master/tools/consumables.py": {},
    "libkol-master/tools/effects.py": {},
    "libkol-master/tools/equipment.py": {},
    "libkol-master/tools/familiars.py": {},
    "libkol-master/tools/foldgroups.py": {},
    "libkol-master/tools/items.py": {},
    "libkol-master/tools/monsters.py": {
        "apply_params": {
            "name": "apply_params",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "monster": [
                    "float",
                    "int"
                ],
                "param_list": []
            }
        }
    },
    "libkol-master/tools/npcstores.py": {},
    "libkol-master/tools/outfits.py": {},
    "libkol-master/tools/populate_db.py": {},
    "libkol-master/tools/skills.py": {},
    "libkol-master/tools/trophies.py": {},
    "libkol-master/tools/util.py": {
        "split_range": {
            "name": "split_range",
            "location": 15,
            "return": [
                "tuple[int]"
            ],
            "arguments": {
                "range": [
                    "str",
                    "int"
                ]
            }
        },
        "mafia_dedupe": {
            "name": "mafia_dedupe",
            "location": 28,
            "return": [
                "dict[typing.Text, str]",
                "dict[typing.Text, int]"
            ],
            "arguments": {
                "name": [
                    "str"
                ]
            }
        }
    },
    "libkol-master/tools/zapgroups.py": {},
    "libkol-master/tools/__init__.py": {}
}
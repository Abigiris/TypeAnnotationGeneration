{
    "lightweight-master/setup.py": {
        "readme": {
            "name": "readme",
            "location": 6,
            "return": [],
            "arguments": {}
        }
    },
    "lightweight-master/lightweight/cli.py": {
        "positional_args_count": {
            "name": "positional_args_count",
            "location": 162,
            "return": [
                "bool"
            ],
            "arguments": {
                "func": []
            }
        },
        "SiteCli.__init__": {
            "name": "__init__",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "build": []
            }
        },
        "SiteCli.run": {
            "name": "run",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SiteCli.help": {
            "name": "help",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SiteCli._argument_parser": {
            "name": "_argument_parser",
            "location": 70,
            "return": [
                "ArgumentParser"
            ],
            "arguments": {
                "self": []
            }
        },
        "SiteCli._add_commands": {
            "name": "_add_commands",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "subparsers": []
            }
        },
        "SiteCli._add_build_cli": {
            "name": "_add_build_cli",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "subparsers": []
            }
        },
        "SiteCli._run_build": {
            "name": "_run_build",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "args": []
            }
        },
        "SiteCli._add_clean_cli": {
            "name": "_add_clean_cli",
            "location": 104,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "subparsers": []
            }
        },
        "SiteCli._run_clean": {
            "name": "_run_clean",
            "location": 111,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "args": []
            }
        },
        "SiteCli._add_server_cli": {
            "name": "_add_server_cli",
            "location": 116,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "subparsers": []
            }
        },
        "SiteCli._run_serve": {
            "name": "_run_serve",
            "location": 147,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "func_file": [],
                "func_name": [],
                "args": []
            }
        }
    },
    "lightweight-master/lightweight/errors.py": {
        "AbsolutePathIncluded.__init__": {
            "name": "__init__",
            "location": 2,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IncludedDuplicate.__init__": {
            "name": "__init__",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "at": [
                    "str",
                    "typing.Callable[, ]",
                    "bytes",
                    "dict[str, object]"
                ]
            }
        }
    },
    "lightweight-master/lightweight/files.py": {
        "paths": {
            "name": "paths",
            "location": 9,
            "return": [
                "list[Path]"
            ],
            "arguments": {
                "pattern": [
                    "str",
                    "typing.Iterable[str]"
                ]
            }
        },
        "directory": {
            "name": "directory",
            "location": 28,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "location": [
                    "str",
                    "typing.Iterable[str]",
                    "Exception"
                ]
            }
        }
    },
    "lightweight-master/lightweight/included.py": {
        "Includes.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Includes.add": {
            "name": "add",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ic": []
            }
        },
        "Includes.__contains__": {
            "name": "__contains__",
            "location": 27,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "location": []
            }
        },
        "Includes.__iter__": {
            "name": "__iter__",
            "location": 30,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "IncludedContent.path": {
            "name": "path",
            "location": 50,
            "return": [
                "Path"
            ],
            "arguments": {
                "self": []
            }
        },
        "IncludedContent.make_tasks": {
            "name": "make_tasks",
            "location": 53,
            "return": [
                "list[GenTask]"
            ],
            "arguments": {
                "self": [],
                "ctx": []
            }
        }
    },
    "lightweight-master/lightweight/lw.py": {
        "positional_args_count": {
            "name": "positional_args_count",
            "location": 149,
            "return": [
                "bool"
            ],
            "arguments": {
                "func": []
            }
        },
        "load_module": {
            "name": "load_module",
            "location": 159,
            "return": [],
            "arguments": {
                "p": []
            }
        },
        "sys_path_starting": {
            "name": "sys_path_starting",
            "location": 170,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "with_": []
            }
        },
        "start_server": {
            "name": "start_server",
            "location": 177,
            "return": [
                "None"
            ],
            "arguments": {
                "func_file": [],
                "func_name": []
            }
        },
        "absolute_out": {
            "name": "absolute_out",
            "location": 209,
            "return": [],
            "arguments": {
                "out": [],
                "abs_source": []
            }
        },
        "quickstart": {
            "name": "quickstart",
            "location": 236,
            "return": [
                "None"
            ],
            "arguments": {
                "location": [],
                "title": []
            }
        },
        "custom_jinja_tags": {
            "name": "custom_jinja_tags",
            "location": 269,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {}
        },
        "slugify_title": {
            "name": "slugify_title",
            "location": 288,
            "return": [],
            "arguments": {
                "title": []
            }
        },
        "argument_parser": {
            "name": "argument_parser",
            "location": 295,
            "return": [
                "ArgumentParser"
            ],
            "arguments": {}
        },
        "add_init_cli": {
            "name": "add_init_cli",
            "location": 307,
            "return": [
                "None"
            ],
            "arguments": {
                "subparsers": []
            }
        },
        "add_log_arguments": {
            "name": "add_log_arguments",
            "location": 315,
            "return": [
                "None"
            ],
            "arguments": {
                "parser": []
            }
        },
        "set_log_level": {
            "name": "set_log_level",
            "location": 320,
            "return": [
                "None"
            ],
            "arguments": {
                "args": []
            }
        },
        "parse_log_level": {
            "name": "parse_log_level",
            "location": 325,
            "return": [],
            "arguments": {
                "value": []
            }
        },
        "add_version_cli": {
            "name": "add_version_cli",
            "location": 338,
            "return": [
                "None"
            ],
            "arguments": {
                "subparsers": []
            }
        },
        "parse_args": {
            "name": "parse_args",
            "location": 343,
            "return": [],
            "arguments": {}
        },
        "lw_version": {
            "name": "lw_version",
            "location": 348,
            "return": [],
            "arguments": {}
        },
        "main": {
            "name": "main",
            "location": 353,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "Process.__init__": {
            "name": "__init__",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Process.run": {
            "name": "run",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Process.exception": {
            "name": "exception",
            "location": 79,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Process._recv_exc": {
            "name": "_recv_exc",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Process.traceback": {
            "name": "traceback",
            "location": 90,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Generator.__init__": {
            "name": "__init__",
            "location": 101,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "func_file": [],
                "func_name": []
            }
        },
        "Generator.url": {
            "name": "url",
            "location": 111,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "Generator.generate": {
            "name": "generate",
            "location": 114,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Generator.load_executable": {
            "name": "load_executable",
            "location": 134,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Color.bright": {
            "name": "bright",
            "location": 223,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "Color.css": {
            "name": "css",
            "location": 229,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": [],
                "alpha": [
                    "None"
                ]
            }
        },
        "Generator.generate.worker": {
            "name": "worker",
            "location": 115,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "lightweight-master/lightweight/server.py": {
        "u": {
            "name": "u",
            "location": 75,
            "return": [
                "bytes"
            ],
            "arguments": {
                "string": [
                    "str"
                ]
            }
        },
        "check_directory": {
            "name": "check_directory",
            "location": 231,
            "return": [],
            "arguments": {
                "working_dir": []
            }
        },
        "now_repr": {
            "name": "now_repr",
            "location": 350,
            "return": [],
            "arguments": {}
        },
        "File.read": {
            "name": "read",
            "location": 43,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MimeType.of": {
            "name": "of",
            "location": 59,
            "return": [],
            "arguments": {
                "cls": [
                    "str"
                ],
                "path": [
                    "str"
                ]
            }
        },
        "DevServer.__init__": {
            "name": "__init__",
            "location": 95,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "location": [
                    "str",
                    "dict[str, dict[, ]]"
                ]
            }
        },
        "DevServer.serve": {
            "name": "serve",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "host": [
                    "int",
                    "str",
                    "typing.Iterable[C]"
                ],
                "port": [
                    "int",
                    "str",
                    "typing.Iterable[C]"
                ],
                "loop": [
                    "bool",
                    "tuple[typing.Union[int,int]]"
                ]
            }
        },
        "DevServer.shutdown": {
            "name": "shutdown",
            "location": 116,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "loop": [
                    "str"
                ]
            }
        },
        "DevServer.handle": {
            "name": "handle",
            "location": 125,
            "return": [],
            "arguments": {
                "self": [],
                "writer": [
                    "set[str]"
                ],
                "request": [
                    "set[str]"
                ]
            }
        },
        "DevServer.handle_static": {
            "name": "handle_static",
            "location": 129,
            "return": [],
            "arguments": {
                "self": [],
                "writer": [
                    "str",
                    "bytes"
                ],
                "request": []
            }
        },
        "DevServer.find_file": {
            "name": "find_file",
            "location": 141,
            "return": [
                "File"
            ],
            "arguments": {
                "self": [],
                "location": [
                    "str",
                    "bool"
                ]
            }
        },
        "DevServer.sendfile": {
            "name": "sendfile",
            "location": 159,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "writer": [
                    "str",
                    "typing.BinaryIO",
                    "typing.IO"
                ],
                "file": []
            }
        },
        "DevServer.start_response": {
            "name": "start_response",
            "location": 165,
            "return": [
                "None"
            ],
            "arguments": {
                "writer": [
                    "str",
                    "bytes"
                ],
                "content_type": [
                    "typing.Text"
                ],
                "status": [
                    "typing.Text"
                ],
                "headers": [
                    "dict[str, str]",
                    "dict[str, set[str]]",
                    "dict[str, dict[str, str]]",
                    "dict[str, int]",
                    "dict[, ]"
                ]
            }
        },
        "DevServer.http_error": {
            "name": "http_error",
            "location": 178,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [],
                "writer": [
                    "str",
                    "int"
                ],
                "status": [
                    "str",
                    "int"
                ]
            }
        },
        "LiveReloadServer.__init__": {
            "name": "__init__",
            "location": 245,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "location": [
                    "dict[str, typing.Any]",
                    "int",
                    "None",
                    "typing.TextIO"
                ]
            }
        },
        "LiveReloadServer.serve": {
            "name": "serve",
            "location": 259,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "host": [
                    "int",
                    "str"
                ],
                "port": [
                    "int",
                    "str"
                ],
                "loop": [
                    "bool",
                    "str",
                    "list[int]"
                ]
            }
        },
        "LiveReloadServer.shutdown": {
            "name": "shutdown",
            "location": 264,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "loop": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ]
            }
        },
        "LiveReloadServer.handle": {
            "name": "handle",
            "location": 268,
            "return": [],
            "arguments": {
                "self": [],
                "writer": [
                    "str",
                    "int"
                ],
                "request": [
                    "set[str]"
                ]
            }
        },
        "LiveReloadServer.sendfile": {
            "name": "sendfile",
            "location": 274,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "writer": [
                    "str",
                    "typing.IO"
                ],
                "file": [
                    "str",
                    "dict[, ]",
                    "typing.Mapping"
                ]
            }
        },
        "LiveReloadServer.send_live_reload_id": {
            "name": "send_live_reload_id",
            "location": 285,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "writer": [
                    "str",
                    "bytes",
                    "Exception"
                ]
            }
        },
        "LiveReloadServer._is_ignored_location": {
            "name": "_is_ignored_location",
            "location": 295,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "location": [
                    "str"
                ]
            }
        },
        "LiveReloadServer.on_source_changed": {
            "name": "on_source_changed",
            "location": 298,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LiveReloadServer._new_id": {
            "name": "_new_id",
            "location": 307,
            "return": [
                "str"
            ],
            "arguments": {}
        }
    },
    "lightweight-master/lightweight/site.py": {
        "_check_site_url": {
            "name": "_check_site_url",
            "location": 195,
            "return": [],
            "arguments": {
                "url": []
            }
        },
        "Site.__init__": {
            "name": "__init__",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "url": []
            }
        },
        "Site.add": {
            "name": "add",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "location": [],
                "content": []
            }
        },
        "Site._include_content": {
            "name": "_include_content",
            "location": 109,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "location": [],
                "content": [],
                "cwd": []
            }
        },
        "Site._include": {
            "name": "_include",
            "location": 118,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "c": []
            }
        },
        "Site.generate": {
            "name": "generate",
            "location": 123,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "out": [
                    "typing.Text"
                ]
            }
        },
        "Site._generate": {
            "name": "_generate",
            "location": 140,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "out": []
            }
        },
        "Site.create_ctx": {
            "name": "create_ctx",
            "location": 164,
            "return": [
                "GenContext"
            ],
            "arguments": {
                "self": [],
                "out": []
            }
        },
        "Site.__str__": {
            "name": "__str__",
            "location": 168,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Site.__repr__": {
            "name": "__repr__",
            "location": 171,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "Site.__truediv__": {
            "name": "__truediv__",
            "location": 174,
            "return": [],
            "arguments": {
                "self": [],
                "location": []
            }
        },
        "Site.info": {
            "name": "info",
            "location": 188,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "text": []
            }
        },
        "Site.debug": {
            "name": "debug",
            "location": 191,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "text": []
            }
        }
    },
    "lightweight-master/lightweight/templates.py": {
        "template": {
            "name": "template",
            "location": 156,
            "return": [],
            "arguments": {
                "location": [
                    "str",
                    "None",
                    "int"
                ]
            }
        },
        "CwdLoader.get_source": {
            "name": "get_source",
            "location": 27,
            "return": [
                "tuple[str]"
            ],
            "arguments": {
                "self": [],
                "environment": [
                    "list[]",
                    "str"
                ],
                "template": [
                    "list[]",
                    "str"
                ]
            }
        },
        "CwdLoader.list_templates": {
            "name": "list_templates",
            "location": 49,
            "return": [
                "list[typing.Union[str,list[]]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "LruCachePerCwd.__init__": {
            "name": "__init__",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "capacity": [
                    "int",
                    "float"
                ]
            }
        },
        "LruCachePerCwd.instance": {
            "name": "instance",
            "location": 83,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LruCachePerCwd.__getstate__": {
            "name": "__getstate__",
            "location": 86,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LruCachePerCwd.__setstate__": {
            "name": "__setstate__",
            "location": 89,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LruCachePerCwd.__getnewargs__": {
            "name": "__getnewargs__",
            "location": 92,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LruCachePerCwd.copy": {
            "name": "copy",
            "location": 95,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LruCachePerCwd.get": {
            "name": "get",
            "location": 98,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LruCachePerCwd.setdefault": {
            "name": "setdefault",
            "location": 101,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LruCachePerCwd.clear": {
            "name": "clear",
            "location": 104,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LruCachePerCwd.__contains__": {
            "name": "__contains__",
            "location": 107,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LruCachePerCwd.__len__": {
            "name": "__len__",
            "location": 110,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LruCachePerCwd.__repr__": {
            "name": "__repr__",
            "location": 113,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LruCachePerCwd.__getitem__": {
            "name": "__getitem__",
            "location": 116,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LruCachePerCwd.__setitem__": {
            "name": "__setitem__",
            "location": 119,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LruCachePerCwd.__delitem__": {
            "name": "__delitem__",
            "location": 122,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LruCachePerCwd.items": {
            "name": "items",
            "location": 125,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LruCachePerCwd.iteritems": {
            "name": "iteritems",
            "location": 128,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LruCachePerCwd.values": {
            "name": "values",
            "location": 131,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LruCachePerCwd.itervalue": {
            "name": "itervalue",
            "location": 134,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LruCachePerCwd.keys": {
            "name": "keys",
            "location": 137,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LruCachePerCwd.iterkeys": {
            "name": "iterkeys",
            "location": 140,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LruCachePerCwd.__reversed__": {
            "name": "__reversed__",
            "location": 143,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LruCachePerCwd.__iter__": {
            "name": "__iter__",
            "location": 146,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LruCachePerCwd.__copy__": {
            "name": "__copy__",
            "location": 149,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CwdLoader.get_source.uptodate": {
            "name": "uptodate",
            "location": 41,
            "return": [
                "bool"
            ],
            "arguments": {}
        }
    },
    "lightweight-master/lightweight/__init__.py": {},
    "lightweight-master/lightweight/content/content_abc.py": {
        "Content.write": {
            "name": "write",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "bool",
                    "list[]",
                    "str"
                ],
                "ctx": [
                    "bool",
                    "list[]",
                    "str"
                ]
            }
        }
    },
    "lightweight-master/lightweight/content/copies.py": {
        "copy": {
            "name": "copy",
            "location": 34,
            "return": [
                "FileCopy",
                "DirectoryCopy"
            ],
            "arguments": {
                "path": [
                    "str"
                ]
            }
        },
        "DirectoryCopy.write": {
            "name": "write",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [],
                "ctx": [
                    "bool",
                    "list[]",
                    "str"
                ]
            }
        },
        "FileCopy.write": {
            "name": "write",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [],
                "ctx": [
                    "bool",
                    "list[]",
                    "str"
                ]
            }
        }
    },
    "lightweight-master/lightweight/content/jinja_page.py": {
        "jinja": {
            "name": "jinja",
            "location": 48,
            "return": [
                "JinjaPage"
            ],
            "arguments": {
                "template_path": [
                    "str"
                ]
            }
        },
        "from_ctx": {
            "name": "from_ctx",
            "location": 74,
            "return": [
                "LazyContextParameter"
            ],
            "arguments": {
                "func": [
                    "dict[, ]"
                ]
            }
        },
        "_eval_if_lazy": {
            "name": "_eval_if_lazy",
            "location": 93,
            "return": [
                "int",
                "str",
                "LazyContextParameter"
            ],
            "arguments": {
                "o": [
                    "int",
                    "str"
                ],
                "ctx": [
                    "str"
                ]
            }
        },
        "JinjaPage.write": {
            "name": "write",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "list[str]",
                    "list[]"
                ],
                "ctx": [
                    "str",
                    "list[str]",
                    "list[]"
                ]
            }
        },
        "JinjaPage.render": {
            "name": "render",
            "location": 34,
            "return": [],
            "arguments": {
                "self": [],
                "ctx": []
            }
        },
        "JinjaPage._evaluated_props": {
            "name": "_evaluated_props",
            "location": 43,
            "return": [
                "dict[, ]"
            ],
            "arguments": {
                "self": [],
                "ctx": []
            }
        },
        "LazyContextParameter.__init__": {
            "name": "__init__",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "func": [
                    "int",
                    "float",
                    "list[list[T]]"
                ]
            }
        },
        "LazyContextParameter.__call__": {
            "name": "__call__",
            "location": 70,
            "return": [],
            "arguments": {
                "self": [],
                "ctx": [
                    "str"
                ]
            }
        }
    },
    "lightweight-master/lightweight/content/lwmd.py": {
        "TocBuilder.__init__": {
            "name": "__init__",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TocBuilder.append": {
            "name": "append",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "entry": []
            }
        },
        "TocBuilder.compile": {
            "name": "compile",
            "location": 36,
            "return": [
                "TableOfContents"
            ],
            "arguments": {
                "self": [],
                "level": []
            }
        },
        "TocBuilder._fill_sections": {
            "name": "_fill_sections",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "level": [],
                "min_level": [],
                "toc": []
            }
        },
        "TocBuilder._fill_empty_sections": {
            "name": "_fill_empty_sections",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "level": [],
                "min_level": [],
                "sections": []
            }
        },
        "TableOfContents.__init__": {
            "name": "__init__",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "id": [
                    "None"
                ]
            }
        },
        "TableOfContents.html": {
            "name": "html",
            "location": 83,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "TableOfContents.__iter__": {
            "name": "__iter__",
            "location": 90,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TableOfContents.__len__": {
            "name": "__len__",
            "location": 93,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Section.__init__": {
            "name": "__init__",
            "location": 102,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "title": [],
                "slug": []
            }
        },
        "TocMixin.__init__": {
            "name": "__init__",
            "location": 115,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TocMixin.reset": {
            "name": "reset",
            "location": 119,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TocMixin.header": {
            "name": "header",
            "location": 122,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": [],
                "text": [],
                "level": [],
                "raw": [
                    "None"
                ]
            }
        },
        "TocMixin.table_of_contents": {
            "name": "table_of_contents",
            "location": 128,
            "return": [],
            "arguments": {
                "self": [],
                "level": []
            }
        },
        "LwRenderer.__init__": {
            "name": "__init__",
            "location": 140,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "link_mapping": []
            }
        },
        "LwRenderer.link": {
            "name": "link",
            "location": 144,
            "return": [],
            "arguments": {
                "self": [],
                "link": [],
                "title": [],
                "text": []
            }
        },
        "LwRenderer.image": {
            "name": "image",
            "location": 153,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": [],
                "src": [],
                "title": [],
                "text": []
            }
        }
    },
    "lightweight-master/lightweight/content/md_page.py": {
        "markdown": {
            "name": "markdown",
            "location": 99,
            "return": [
                "MarkdownPage"
            ],
            "arguments": {
                "md_path": [
                    "str",
                    "typing.Iterable[str]"
                ],
                "template": [
                    "dict[str, int]",
                    "str"
                ]
            }
        },
        "MarkdownPage.write": {
            "name": "write",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [],
                "ctx": []
            }
        },
        "MarkdownPage.render": {
            "name": "render",
            "location": 64,
            "return": [
                "RenderedMarkdown"
            ],
            "arguments": {
                "self": [],
                "ctx": [
                    "str",
                    "None"
                ]
            }
        },
        "MarkdownPage._map_links": {
            "name": "_map_links",
            "location": 78,
            "return": [
                "dict[str, ]"
            ],
            "arguments": {
                "ctx": [
                    "str",
                    "typing.TextIO"
                ]
            }
        },
        "MarkdownPage._extract_preview": {
            "name": "_extract_preview",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "html": [
                    "str"
                ]
            }
        },
        "MarkdownPage._evaluated_props": {
            "name": "_evaluated_props",
            "location": 95,
            "return": [
                "dict[, ]"
            ],
            "arguments": {
                "self": [],
                "ctx": []
            }
        }
    },
    "lightweight-master/lightweight/content/sass_scss.py": {
        "_construct_relative_css_path": {
            "name": "_construct_relative_css_path",
            "location": 50,
            "return": [],
            "arguments": {
                "source": [
                    "list[str]",
                    "bool"
                ]
            }
        },
        "_write": {
            "name": "_write",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "source": [
                    "str"
                ],
                "target": []
            }
        },
        "sass": {
            "name": "sass",
            "location": 75,
            "return": [
                "Sass"
            ],
            "arguments": {
                "location": [
                    "str",
                    "dict[str, str]",
                    "bytes",
                    "int",
                    "typing.TextIO"
                ]
            }
        },
        "Sass.write": {
            "name": "write",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [],
                "ctx": [
                    "str"
                ]
            }
        },
        "_construct_relative_css_path.remap": {
            "name": "remap",
            "location": 53,
            "return": [],
            "arguments": {
                "path": []
            }
        }
    },
    "lightweight-master/lightweight/content/__init__.py": {},
    "lightweight-master/lightweight/generation/context.py": {
        "GenContext.__init__": {
            "name": "__init__",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "out": [
                    "int",
                    "dict[, ]",
                    "None",
                    "float",
                    "list[str]"
                ],
                "site": [
                    "bool",
                    "str",
                    "None"
                ]
            }
        },
        "GenContext.path": {
            "name": "path",
            "location": 35,
            "return": [
                "GenPath"
            ],
            "arguments": {
                "self": [],
                "p": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "lightweight-master/lightweight/generation/path.py": {
        "GenPath.real_path": {
            "name": "real_path",
            "location": 44,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GenPath.name": {
            "name": "name",
            "location": 49,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GenPath.parts": {
            "name": "parts",
            "location": 54,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GenPath.parent": {
            "name": "parent",
            "location": 59,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GenPath.suffix": {
            "name": "suffix",
            "location": 64,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GenPath.url": {
            "name": "url",
            "location": 69,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GenPath.location": {
            "name": "location",
            "location": 91,
            "return": [
                "typing.Text",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "GenPath.absolute": {
            "name": "absolute",
            "location": 109,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GenPath.exists": {
            "name": "exists",
            "location": 113,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GenPath.mkdir": {
            "name": "mkdir",
            "location": 117,
            "return": [],
            "arguments": {
                "self": [],
                "mode": [
                    "int"
                ],
                "parents": [
                    "bool"
                ],
                "exist_ok": [
                    "bool"
                ]
            }
        },
        "GenPath.__truediv__": {
            "name": "__truediv__",
            "location": 125,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "GenPath.__str__": {
            "name": "__str__",
            "location": 143,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "GenPath.with_name": {
            "name": "with_name",
            "location": 146,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "GenPath.open": {
            "name": "open",
            "location": 150,
            "return": [],
            "arguments": {
                "self": [],
                "mode": [
                    "typing.Text"
                ],
                "buffering": [
                    "int"
                ],
                "encoding": [
                    "None"
                ],
                "errors": [
                    "None"
                ],
                "newline": [
                    "None"
                ]
            }
        },
        "GenPath.with_suffix": {
            "name": "with_suffix",
            "location": 154,
            "return": [],
            "arguments": {
                "self": [],
                "suffix": []
            }
        },
        "GenPath.create": {
            "name": "create",
            "location": 158,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "contents": []
            }
        }
    },
    "lightweight-master/lightweight/generation/task.py": {
        "GenTask.execute": {
            "name": "execute",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "lightweight-master/lightweight/generation/__init__.py": {},
    "lightweight-master/tests/server_utils.py": {},
    "lightweight-master/tests/test_cli.py": {
        "assert_help_in_out": {
            "name": "assert_help_in_out",
            "location": 247,
            "return": [
                "None"
            ],
            "arguments": {
                "capsys": []
            }
        },
        "run_lw": {
            "name": "run_lw",
            "location": 253,
            "return": [
                "None"
            ],
            "arguments": {
                "cmd": [
                    "str",
                    "bytes",
                    "dict[, ]"
                ]
            }
        },
        "run_site_cli": {
            "name": "run_site_cli",
            "location": 262,
            "return": [
                "None"
            ],
            "arguments": {
                "cmd": [
                    "str",
                    "typing.Generator[typing.Union[str,None,None]]"
                ],
                "build": [
                    "None",
                    "str",
                    "typing.Callable[, ]"
                ]
            }
        },
        "interrupt": {
            "name": "interrupt",
            "location": 272,
            "return": [
                "None"
            ],
            "arguments": {
                "loop": [
                    "collections.abc.Awaitable[None]",
                    "str"
                ]
            }
        },
        "build_func": {
            "name": "build_func",
            "location": 279,
            "return": [
                "Site"
            ],
            "arguments": {
                "url": [
                    "str"
                ]
            }
        },
        "build_jinja_file": {
            "name": "build_jinja_file",
            "location": 283,
            "return": [
                "dict[str, typing.Union[typing.Any,typing.Any,typing.Any,typing.Any]]",
                "dict[typing.Any, int]",
                "list[dict[str, typing.Any]]",
                "dict[str, int]"
            ],
            "arguments": {
                "url": [
                    "str",
                    "list[str]"
                ]
            }
        },
        "build_func_no_arg": {
            "name": "build_func_no_arg",
            "location": 289,
            "return": [
                "Site"
            ],
            "arguments": {}
        },
        "build_func_2_args": {
            "name": "build_func_2_args",
            "location": 293,
            "return": [
                "Site"
            ],
            "arguments": {
                "a": [
                    "str",
                    "list[str]",
                    "typing.Callable[, ]",
                    "list[]",
                    "bool"
                ],
                "b": [
                    "str",
                    "list[str]",
                    "typing.Callable[, ]",
                    "list[]",
                    "bool"
                ]
            }
        },
        "build_func_with_default": {
            "name": "build_func_with_default",
            "location": 297,
            "return": [
                "Site"
            ],
            "arguments": {
                "a": [
                    "bool",
                    "dict[str, set[str]]",
                    "list[str]",
                    "typing.Callable[, ]",
                    "list[dict[str, typing.Any]]",
                    "list[dict[str, str]]"
                ],
                "b": [
                    "typing.Text"
                ]
            }
        },
        "TestTheCli._recover_args": {
            "name": "_recover_args",
            "location": 21,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTheCli._recover_start_server": {
            "name": "_recover_start_server",
            "location": 27,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTheCli.out": {
            "name": "out",
            "location": 33,
            "return": [
                "typing.Generator[typing.Union[str,typing.Iterable[str]]]"
            ],
            "arguments": {
                "self": [],
                "tmp_path": [
                    "str",
                    "typing.Iterable[str]"
                ]
            }
        },
        "TestTheCli.mock_start_server": {
            "name": "mock_start_server",
            "location": 38,
            "return": [
                "typing.Generator[MockStartServer]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTheCli.test_generate": {
            "name": "test_generate",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "out": [
                    "int"
                ]
            }
        },
        "TestTheCli.test_serve": {
            "name": "test_serve",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "unused_tcp_port": [
                    "str",
                    "typing.Mapping"
                ],
                "out": [
                    "str",
                    "int"
                ]
            }
        },
        "TestTheCli.test_serve_live_reload": {
            "name": "test_serve_live_reload",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "unused_tcp_port": [
                    "str"
                ],
                "out": [
                    "typing.Callable[[], int]",
                    "bool"
                ],
                "event_loop": [
                    "typing.Callable[[], int]",
                    "bool"
                ]
            }
        },
        "TestTheCli.test_version": {
            "name": "test_version",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "capsys": []
            }
        },
        "TestTheCli.test_help": {
            "name": "test_help",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "capsys": [
                    "str",
                    "float"
                ]
            }
        },
        "TestTheCli.test_no_cmd": {
            "name": "test_no_cmd",
            "location": 104,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "capsys": [
                    "tuple[typing.Union[float,float,float,float,float]]",
                    "float",
                    "int"
                ]
            }
        },
        "TestTheCli.test_site_cli_serve": {
            "name": "test_site_cli_serve",
            "location": 108,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_start_server": [
                    "typing.Callable[, ]",
                    "str",
                    "dict[str, typing.Any]",
                    "bool"
                ]
            }
        },
        "TestTheCli.test_site_cli_custom_serve": {
            "name": "test_site_cli_custom_serve",
            "location": 121,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_start_server": [
                    "typing.Callable[, ]",
                    "str",
                    "dict[str, typing.Any]",
                    "bool"
                ]
            }
        },
        "TestTheCli.test_exit_on_failed_generation": {
            "name": "test_exit_on_failed_generation",
            "location": 139,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_start_server": [
                    "typing.Callable[, ]",
                    "str",
                    "dict[str, typing.Any]",
                    "bool"
                ]
            }
        },
        "TestTheCli.test_cant_serve_uncallable": {
            "name": "test_cant_serve_uncallable",
            "location": 148,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "caplog": [
                    "str",
                    "float"
                ]
            }
        },
        "TestTheCli.test_serve_wrong_callable": {
            "name": "test_serve_wrong_callable",
            "location": 152,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "caplog": [
                    "str",
                    "float"
                ]
            }
        },
        "TestTheCli.test_cant_serve_method": {
            "name": "test_cant_serve_method",
            "location": 156,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "caplog": []
            }
        },
        "TestTheCli.test_serve_invalid_signature_no_args": {
            "name": "test_serve_invalid_signature_no_args",
            "location": 164,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "caplog": []
            }
        },
        "TestTheCli.test_serve_invalid_signature_2_args": {
            "name": "test_serve_invalid_signature_2_args",
            "location": 168,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "caplog": []
            }
        },
        "TestTheCli.test_serve_with_default": {
            "name": "test_serve_with_default",
            "location": 172,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_start_server": []
            }
        },
        "TestTheCli.test_invalid_command_shows_help": {
            "name": "test_invalid_command_shows_help",
            "location": 176,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "capsys": [
                    "int",
                    "typing.Sequence[int]"
                ]
            }
        },
        "TestTheCli.test_clean": {
            "name": "test_clean",
            "location": 180,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tmp_path": []
            }
        },
        "TestTheCli.test_specific_clean": {
            "name": "test_specific_clean",
            "location": 188,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tmp_path": []
            }
        },
        "TestTheCli.test_build": {
            "name": "test_build",
            "location": 196,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_start_server": [
                    "str",
                    "list[pathlib.Path]",
                    "bool",
                    "list[str]"
                ],
                "tmp_path": []
            }
        },
        "TestTheCli.test_build_url": {
            "name": "test_build_url",
            "location": 204,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_start_server": [
                    "str",
                    "typing.BinaryIO"
                ],
                "tmp_path": []
            }
        },
        "TestTheCli.test_build_out": {
            "name": "test_build_out",
            "location": 212,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_start_server": [
                    "str",
                    "bool",
                    "typing.Sequence[str]"
                ],
                "tmp_path": []
            }
        },
        "TestTheCli.test_build_host_port": {
            "name": "test_build_host_port",
            "location": 220,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_start_server": [
                    "str",
                    "list[pathlib.Path]",
                    "bool",
                    "list[str]"
                ],
                "tmp_path": []
            }
        },
        "TestTheCli.test_build_error_with_url_and_host": {
            "name": "test_build_error_with_url_and_host",
            "location": 228,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_start_server": [
                    "bool",
                    "typing.Callable[str,List, None]",
                    "str",
                    "None"
                ]
            }
        },
        "TestTheCli.test_build_error_with_url_and_port": {
            "name": "test_build_error_with_url_and_port",
            "location": 232,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_start_server": [
                    "bool",
                    "typing.Callable[str,List, None]",
                    "str",
                    "None"
                ]
            }
        },
        "TestTheCli.test_run_server": {
            "name": "test_run_server",
            "location": 236,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tmp_path": []
            }
        },
        "MockStartServer.__init__": {
            "name": "__init__",
            "location": 302,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MockStartServer.__call__": {
            "name": "__call__",
            "location": 308,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MockStartServer.doing": {
            "name": "doing",
            "location": 314,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "func": [
                    "typing.Callable[, ]",
                    "float"
                ]
            }
        },
        "MockStartServer.noop_implementation": {
            "name": "noop_implementation",
            "location": 318,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "TestTheCli.test_exit_on_failed_generation.raise_failed": {
            "name": "raise_failed",
            "location": 140,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "TestTheCli.test_run_server.raise_interrupt": {
            "name": "raise_interrupt",
            "location": 237,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "TestTheCli.test_cant_serve_method.Some.method": {
            "name": "method",
            "location": 158,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "lightweight-master/tests/test_cover_type_checking.py": {
        "cover_type_checking": {
            "name": "cover_type_checking",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_cover_type_checking": {
            "name": "test_cover_type_checking",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "lightweight-master/tests/test_files.py": {
        "test_dir": {
            "name": "test_dir",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_file": {
            "name": "test_file",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_files": {
            "name": "test_files",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_recursive_files": {
            "name": "test_recursive_files",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_path": {
            "name": "test_path",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_directory": {
            "name": "test_directory",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "lightweight-master/tests/test_gen_path.py": {
        "test_url": {
            "name": "test_url",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "tmp_path": [
                    "str",
                    "typing.Iterable[pathlib.Path]",
                    "typing.Iterable[str]",
                    "bool"
                ]
            }
        },
        "test_location": {
            "name": "test_location",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "tmp_path": [
                    "str",
                    "typing.Iterable[str]",
                    "typing.Iterable[pathlib.Path]"
                ]
            }
        },
        "test_parts": {
            "name": "test_parts",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "tmp_path": [
                    "str",
                    "typing.Iterable[str]",
                    "typing.Iterable[pathlib.Path]"
                ]
            }
        },
        "test_exists": {
            "name": "test_exists",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "tmp_path": []
            }
        },
        "test_slash": {
            "name": "test_slash",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "tmp_path": [
                    "str",
                    "typing.Iterable[pathlib.Path]",
                    "typing.Iterable[str]"
                ]
            }
        }
    },
    "lightweight-master/tests/test_include_copy.py": {
        "test_include_file": {
            "name": "test_include_file",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "tmp_path": []
            }
        },
        "test_include_not_found": {
            "name": "test_include_not_found",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "tmp_path": [
                    "dict[str, P]"
                ]
            }
        },
        "test_include_directory": {
            "name": "test_include_directory",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "tmp_path": []
            }
        },
        "test_include_glob": {
            "name": "test_include_glob",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "tmp_path": []
            }
        },
        "test_include_file_under_different_name": {
            "name": "test_include_file_under_different_name",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "tmp_path": []
            }
        },
        "test_include_dir_under_different_name": {
            "name": "test_include_dir_under_different_name",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "tmp_path": []
            }
        },
        "test_include_not_found_under_different_name": {
            "name": "test_include_not_found_under_different_name",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {
                "tmp_path": [
                    "dict[str, P]"
                ]
            }
        }
    },
    "lightweight-master/tests/test_include_jinja.py": {
        "test_render_jinja": {
            "name": "test_render_jinja",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "tmp_path": []
            }
        },
        "test_render_jinja_file": {
            "name": "test_render_jinja_file",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "tmp_path": []
            }
        },
        "test_lazy_params": {
            "name": "test_lazy_params",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "tmp_path": []
            }
        },
        "test_jinja_env_does_not_allow_undefined": {
            "name": "test_jinja_env_does_not_allow_undefined",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "NoopContent.write": {
            "name": "write",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "bool",
                    "list[]",
                    "str"
                ],
                "ctx": [
                    "bool",
                    "list[]",
                    "str"
                ]
            }
        },
        "TestWorkingDirectory.setup_method": {
            "name": "setup_method",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "method": [
                    "str",
                    "dict[, ]",
                    "tuple[]"
                ]
            }
        },
        "TestWorkingDirectory.teardown_method": {
            "name": "teardown_method",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "method": [
                    "str",
                    "dict[, ]",
                    "tuple[]"
                ]
            }
        },
        "TestWorkingDirectory.test_dynamic_cwd": {
            "name": "test_dynamic_cwd",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tmp_path": [
                    "dict[str, P]",
                    "list[str]"
                ]
            }
        }
    },
    "lightweight-master/tests/test_include_markdown.py": {
        "test_render_markdown": {
            "name": "test_render_markdown",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {
                "tmp_path": []
            }
        },
        "test_render_toc": {
            "name": "test_render_toc",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "tmp_path": []
            }
        },
        "test_render_file": {
            "name": "test_render_file",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "tmp_path": []
            }
        },
        "test_render_markdown_link": {
            "name": "test_render_markdown_link",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "tmp_path": []
            }
        },
        "test_lazy_params": {
            "name": "test_lazy_params",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "tmp_path": []
            }
        }
    },
    "lightweight-master/tests/test_include_sass.py": {
        "test_render_scss_file": {
            "name": "test_render_scss_file",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "tmp_path": []
            }
        },
        "test_render_scss_directory": {
            "name": "test_render_scss_directory",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "tmp_path": []
            }
        },
        "test_render_sass_directory": {
            "name": "test_render_sass_directory",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "tmp_path": []
            }
        },
        "test_nonexistent": {
            "name": "test_nonexistent",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "tmp_path": [
                    "dict[str, P]",
                    "list[str]"
                ]
            }
        },
        "test_render_scss_file_sourcemaps": {
            "name": "test_render_scss_file_sourcemaps",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "tmp_path": []
            }
        },
        "test_render_scss_directory_sourcemaps": {
            "name": "test_render_scss_directory_sourcemaps",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {
                "tmp_path": []
            }
        }
    },
    "lightweight-master/tests/test_other.py": {
        "test_package": {
            "name": "test_package",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_per_cwd_jinja_cache_creation": {
            "name": "test_per_cwd_jinja_cache_creation",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_per_cwd_jinja_cache_calls": {
            "name": "test_per_cwd_jinja_cache_calls",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "CallRecorder.__getattr__": {
            "name": "__getattr__",
            "location": 18,
            "return": [],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "CallRecorder.save_params": {
            "name": "save_params",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CallRecorder.__repr__": {
            "name": "__repr__",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MockCache.__init__": {
            "name": "__init__",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "recorder": [
                    "int",
                    "float"
                ]
            }
        },
        "MockCache.instance": {
            "name": "instance",
            "location": 37,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "lightweight-master/tests/test_server.py": {
        "test_file_not_found": {
            "name": "test_file_not_found",
            "location": 143,
            "return": [],
            "arguments": {}
        },
        "test_file_not_a_directory": {
            "name": "test_file_not_a_directory",
            "location": 148,
            "return": [],
            "arguments": {}
        },
        "TestTheServer.event_loop": {
            "name": "event_loop",
            "location": 15,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestTheServer._create_tmp_site": {
            "name": "_create_tmp_site",
            "location": 26,
            "return": [],
            "arguments": {
                "self": [],
                "tmp_path": []
            }
        },
        "TestTheServer.test_500.pass_if_matching": {
            "name": "pass_if_matching",
            "location": 130,
            "return": [],
            "arguments": {
                "loop": [],
                "context": []
            }
        },
        "TestTheServer.test_live_reload_regenerate.MockRegenerate.__call__": {
            "name": "__call__",
            "location": 67,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestTheServer.test_500.BadServer.handle": {
            "name": "handle",
            "location": 127,
            "return": [],
            "arguments": {
                "self": [],
                "writer": [],
                "request": []
            }
        }
    },
    "lightweight-master/tests/test_site.py": {
        "test_rewrite_out": {
            "name": "test_rewrite_out",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "tmp_path": []
            }
        },
        "assert_site_render": {
            "name": "assert_site_render",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "src_location": [
                    "dict[str, typing.Any]"
                ],
                "content": [
                    "str",
                    "list[tuple[]]",
                    "tuple[]",
                    "set[str]"
                ],
                "tmp_path": [
                    "bool"
                ]
            }
        },
        "test_absolute_includes_not_allowed": {
            "name": "test_absolute_includes_not_allowed",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_site_location": {
            "name": "test_site_location",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "tmp_path": [
                    "dict[str, P]"
                ]
            }
        },
        "test_site_include_duplicate": {
            "name": "test_site_include_duplicate",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_str": {
            "name": "test_str",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_repr": {
            "name": "test_repr",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_url_check": {
            "name": "test_url_check",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "lightweight-master/tests/__init__.py": {},
    "lightweight-master/tests/site/invalid.py": {
        "signature0": {
            "name": "signature0",
            "location": 1,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "signature1": {
            "name": "signature1",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {
                "one": [
                    "int",
                    "str",
                    "dict[str, str]"
                ]
            }
        },
        "signature3": {
            "name": "signature3",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "one": [
                    "int",
                    "str",
                    "dict[str, str]"
                ],
                "two": [
                    "int",
                    "str",
                    "dict[str, str]"
                ],
                "three": [
                    "int",
                    "str",
                    "dict[str, str]"
                ]
            }
        },
        "no_site": {
            "name": "no_site",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "host": [
                    "collections.abc.Awaitable[typing.Any]",
                    "list[str]",
                    "list[tuple[typing.Union[str,...]]]",
                    "list[]",
                    "str",
                    "bool"
                ],
                "port": [
                    "collections.abc.Awaitable[typing.Any]",
                    "list[str]",
                    "list[tuple[typing.Union[str,...]]]",
                    "list[]",
                    "str",
                    "bool"
                ]
            }
        }
    }
}
{
    "llisp-master/setup.py": {},
    "llisp-master/llisp/lbuiltins.py": {
        "create_atom": {
            "name": "create_atom",
            "location": 123,
            "return": [
                "Atom",
                "Name"
            ],
            "arguments": {
                "value": []
            }
        },
        "is_int": {
            "name": "is_int",
            "location": 147,
            "return": [
                "bool"
            ],
            "arguments": {
                "s": []
            }
        },
        "is_char": {
            "name": "is_char",
            "location": 155,
            "return": [
                "bool"
            ],
            "arguments": {
                "s": [
                    "str"
                ]
            }
        },
        "is_float": {
            "name": "is_float",
            "location": 159,
            "return": [
                "bool"
            ],
            "arguments": {
                "s": [
                    "str"
                ]
            }
        },
        "is_name": {
            "name": "is_name",
            "location": 167,
            "return": [
                "bool"
            ],
            "arguments": {
                "s": []
            }
        },
        "plus_op": {
            "name": "plus_op",
            "location": 230,
            "return": [],
            "arguments": {
                "expr": [
                    "dict[, ]"
                ],
                "state": [
                    "dict[, ]",
                    "dict[str, str]",
                    "int"
                ]
            }
        },
        "minus_op": {
            "name": "minus_op",
            "location": 237,
            "return": [],
            "arguments": {
                "expr": [
                    "dict[, ]"
                ],
                "state": [
                    "dict[, ]",
                    "dict[str, str]",
                    "int"
                ]
            }
        },
        "times_op": {
            "name": "times_op",
            "location": 244,
            "return": [],
            "arguments": {
                "expr": [
                    "dict[, ]"
                ],
                "state": [
                    "dict[, ]"
                ]
            }
        },
        "divide_op": {
            "name": "divide_op",
            "location": 251,
            "return": [],
            "arguments": {
                "expr": [
                    "dict[, ]"
                ],
                "state": [
                    "dict[, ]",
                    "dict[str, str]",
                    "int"
                ]
            }
        },
        "divide_int_op": {
            "name": "divide_int_op",
            "location": 258,
            "return": [],
            "arguments": {
                "expr": [
                    "dict[, ]"
                ],
                "state": [
                    "dict[, ]"
                ]
            }
        },
        "mod_op": {
            "name": "mod_op",
            "location": 265,
            "return": [],
            "arguments": {
                "expr": [
                    "dict[, ]",
                    "typing.Callable[, ]"
                ],
                "state": [
                    "dict[, ]",
                    "typing.Callable[, ]"
                ]
            }
        },
        "if_op": {
            "name": "if_op",
            "location": 271,
            "return": [],
            "arguments": {
                "expr": [
                    "dict[, ]"
                ],
                "state": [
                    "dict[, ]"
                ]
            }
        },
        "eq_op": {
            "name": "eq_op",
            "location": 279,
            "return": [
                "Atom"
            ],
            "arguments": {
                "expr": [
                    "dict[, ]"
                ],
                "state": [
                    "dict[, ]"
                ]
            }
        },
        "not_op": {
            "name": "not_op",
            "location": 288,
            "return": [
                "Atom"
            ],
            "arguments": {
                "expr": [
                    "dict[, ]",
                    "typing.Callable[, ]"
                ],
                "state": [
                    "dict[, ]",
                    "typing.Callable[, ]"
                ]
            }
        },
        "less_op": {
            "name": "less_op",
            "location": 296,
            "return": [
                "Atom"
            ],
            "arguments": {
                "expr": [
                    "dict[, ]"
                ],
                "state": [
                    "dict[, ]"
                ]
            }
        },
        "var_op": {
            "name": "var_op",
            "location": 305,
            "return": [],
            "arguments": {
                "expr": [
                    "str",
                    "dict[, ]"
                ],
                "state": [
                    "dict[, ]",
                    "typing.Callable[, ]"
                ]
            }
        },
        "def_op": {
            "name": "def_op",
            "location": 318,
            "return": [],
            "arguments": {
                "expr": [
                    "dict[, ]"
                ],
                "state": [
                    "dict[, ]",
                    "str"
                ]
            }
        },
        "custom_op": {
            "name": "custom_op",
            "location": 335,
            "return": [],
            "arguments": {
                "name": [],
                "expr": [
                    "str"
                ],
                "state": [
                    "str"
                ]
            }
        },
        "echo_op": {
            "name": "echo_op",
            "location": 346,
            "return": [],
            "arguments": {
                "expr": [
                    "dict[, ]",
                    "typing.Callable[, ]"
                ],
                "state": [
                    "dict[, ]",
                    "typing.Callable[, ]"
                ]
            }
        },
        "print_op": {
            "name": "print_op",
            "location": 352,
            "return": [],
            "arguments": {
                "expr": [
                    "dict[, ]",
                    "typing.Callable[, ]"
                ],
                "state": [
                    "dict[, ]",
                    "typing.Callable[, ]"
                ]
            }
        },
        "list_op": {
            "name": "list_op",
            "location": 358,
            "return": [
                "Atom"
            ],
            "arguments": {
                "expr": [
                    "dict[, ]",
                    "typing.IO",
                    "str",
                    "typing.Callable[, ]"
                ],
                "state": [
                    "dict[, ]",
                    "str",
                    "list[]",
                    "list[str]"
                ]
            }
        },
        "push_op": {
            "name": "push_op",
            "location": 366,
            "return": [
                "Atom"
            ],
            "arguments": {
                "expr": [
                    "dict[, ]"
                ],
                "state": [
                    "dict[, ]"
                ]
            }
        },
        "pop_op": {
            "name": "pop_op",
            "location": 380,
            "return": [
                "Atom"
            ],
            "arguments": {
                "expr": [
                    "dict[, ]",
                    "int"
                ],
                "state": [
                    "dict[, ]",
                    "int"
                ]
            }
        },
        "el_op": {
            "name": "el_op",
            "location": 390,
            "return": [],
            "arguments": {
                "expr": [
                    "dict[, ]",
                    "float",
                    "list[str]",
                    "typing.Callable[, ]",
                    "bytes"
                ],
                "state": [
                    "dict[, ]",
                    "float",
                    "list[str]",
                    "typing.Callable[, ]",
                    "bytes"
                ]
            }
        },
        "Atom.__init__": {
            "name": "__init__",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "int",
                    "bytes",
                    "None"
                ]
            }
        },
        "Atom.parse": {
            "name": "parse",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Atom.evaluate": {
            "name": "evaluate",
            "location": 57,
            "return": [
                "Atom"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "str"
                ]
            }
        },
        "Atom.plus": {
            "name": "plus",
            "location": 64,
            "return": [
                "Atom"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "list[T]",
                    "typing.AbstractSet",
                    "Exception"
                ]
            }
        },
        "Atom.minus": {
            "name": "minus",
            "location": 67,
            "return": [
                "Atom"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "list[T]",
                    "typing.AbstractSet",
                    "Exception"
                ]
            }
        },
        "Atom.times": {
            "name": "times",
            "location": 70,
            "return": [
                "Atom"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "list[T]"
                ]
            }
        },
        "Atom.divide": {
            "name": "divide",
            "location": 73,
            "return": [
                "Atom"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "list[T]",
                    "typing.AbstractSet",
                    "Exception"
                ]
            }
        },
        "Atom.divide_int": {
            "name": "divide_int",
            "location": 76,
            "return": [
                "Atom"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "list[T]",
                    "typing.AbstractSet",
                    "Exception"
                ]
            }
        },
        "Atom.__eq__": {
            "name": "__eq__",
            "location": 80,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "list[T]"
                ]
            }
        },
        "Atom.__lt__": {
            "name": "__lt__",
            "location": 83,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "list[T]"
                ]
            }
        },
        "Atom.modulo": {
            "name": "modulo",
            "location": 86,
            "return": [
                "Atom"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "list[T]",
                    "typing.AbstractSet",
                    "Exception"
                ]
            }
        },
        "Atom.__repr__": {
            "name": "__repr__",
            "location": 89,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "Name.__init__": {
            "name": "__init__",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "float",
                    "int",
                    "None"
                ],
                "body": [
                    "None",
                    "str"
                ],
                "params": [
                    "None",
                    "str",
                    "typing.Sequence[dict[str, str]]",
                    "int"
                ]
            }
        },
        "Name.evaluate": {
            "name": "evaluate",
            "location": 106,
            "return": [],
            "arguments": {
                "self": [],
                "state": [
                    "dict[, ]",
                    "list[str]",
                    "str",
                    "typing.Sequence[str]"
                ]
            }
        },
        "Name.call_proc": {
            "name": "call_proc",
            "location": 115,
            "return": [],
            "arguments": {
                "self": [],
                "state": [],
                "sub_state": []
            }
        },
        "Program.__init__": {
            "name": "__init__",
            "location": 187,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Program.run": {
            "name": "run",
            "location": 190,
            "return": [],
            "arguments": {
                "self": [],
                "state": [
                    "list[]",
                    "bytes"
                ]
            }
        },
        "LList.__init__": {
            "name": "__init__",
            "location": 197,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LList.evaluate": {
            "name": "evaluate",
            "location": 200,
            "return": [],
            "arguments": {
                "self": [],
                "state": [
                    "typing.Callable[..., int]",
                    "list[str]",
                    "memoryview",
                    "typing.Sequence[str]"
                ]
            }
        },
        "LList.__eq__": {
            "name": "__eq__",
            "location": 218,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "int",
                    "typing.AbstractSet"
                ]
            }
        },
        "LList.__repr__": {
            "name": "__repr__",
            "location": 226,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "llisp-master/llisp/main.py": {
        "execute_file": {
            "name": "execute_file",
            "location": 14,
            "return": [
                "int"
            ],
            "arguments": {
                "filename": [],
                "state": [],
                "debug": [
                    "bool"
                ]
            }
        },
        "load_std": {
            "name": "load_std",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "state": []
            }
        },
        "arguments": {
            "name": "arguments",
            "location": 29,
            "return": [],
            "arguments": {}
        },
        "repl": {
            "name": "repl",
            "location": 35,
            "return": [
                "int"
            ],
            "arguments": {
                "state": []
            }
        },
        "main": {
            "name": "main",
            "location": 50,
            "return": [],
            "arguments": {}
        }
    },
    "llisp-master/llisp/parser.py": {
        "lexer": {
            "name": "lexer",
            "location": 6,
            "return": [
                "tuple[int]"
            ],
            "arguments": {
                "expr": []
            }
        },
        "expand_str": {
            "name": "expand_str",
            "location": 46,
            "return": [],
            "arguments": {
                "expr": [],
                "max_depth": [
                    "str",
                    "int",
                    "None"
                ]
            }
        },
        "atomize": {
            "name": "atomize",
            "location": 64,
            "return": [
                "LList"
            ],
            "arguments": {
                "expr": [
                    "list[]",
                    "str"
                ]
            }
        },
        "listing": {
            "name": "listing",
            "location": 73,
            "return": [
                "Atom"
            ],
            "arguments": {
                "expr": [
                    "str",
                    "int"
                ],
                "parent": [
                    "None",
                    "typing.Sequence[str]",
                    "str"
                ]
            }
        },
        "create_program": {
            "name": "create_program",
            "location": 82,
            "return": [
                "Program"
            ],
            "arguments": {
                "expr": [
                    "str",
                    "dict[str, typing.Any]"
                ]
            }
        }
    },
    "llisp-master/llisp/__init__.py": {},
    "llisp-master/tests/core_tests.py": {
        "simple_multi": {
            "name": "simple_multi",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "test_inputs": [
                    "list[str]"
                ],
                "expected": [
                    "str",
                    "bool",
                    "float",
                    "list[]"
                ]
            }
        },
        "test_is_int": {
            "name": "test_is_int",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "test_input": [
                    "str",
                    "bool",
                    "None"
                ],
                "expected": [
                    "str",
                    "bool",
                    "None"
                ]
            }
        },
        "test_compute_char": {
            "name": "test_compute_char",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "test_input": [
                    "str"
                ],
                "expected": [
                    "str",
                    "list[str]",
                    "None"
                ]
            }
        },
        "test_compute_plus": {
            "name": "test_compute_plus",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "test_input": [
                    "str"
                ],
                "expected": [
                    "str",
                    "dict[str, typing.Any]",
                    "None",
                    "bool"
                ]
            }
        },
        "testParseError": {
            "name": "testParseError",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "test_input": [
                    "str"
                ]
            }
        },
        "testUndefinedError": {
            "name": "testUndefinedError",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "test_input": [
                    "str"
                ]
            }
        },
        "testNotCallableError": {
            "name": "testNotCallableError",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {
                "test_input": [
                    "str"
                ]
            }
        },
        "test_compute_divide": {
            "name": "test_compute_divide",
            "location": 109,
            "return": [
                "None"
            ],
            "arguments": {
                "test_input": [
                    "str"
                ],
                "expected": [
                    "str",
                    "dict[str, typing.Any]",
                    "None",
                    "bool"
                ]
            }
        },
        "test_compute_divide_int": {
            "name": "test_compute_divide_int",
            "location": 127,
            "return": [
                "None"
            ],
            "arguments": {
                "test_input": [
                    "str"
                ],
                "expected": [
                    "str",
                    "dict[str, typing.Any]",
                    "None",
                    "bool"
                ]
            }
        },
        "test_compute_mod": {
            "name": "test_compute_mod",
            "location": 145,
            "return": [
                "None"
            ],
            "arguments": {
                "test_input": [
                    "str"
                ],
                "expected": [
                    "str",
                    "dict[str, typing.Any]",
                    "None",
                    "bool"
                ]
            }
        },
        "test_compute_not": {
            "name": "test_compute_not",
            "location": 154,
            "return": [
                "None"
            ],
            "arguments": {
                "test_input": [
                    "str"
                ],
                "expected": [
                    "str",
                    "dict[str, typing.Any]",
                    "None",
                    "bool"
                ]
            }
        },
        "test_compute_minus": {
            "name": "test_compute_minus",
            "location": 168,
            "return": [
                "None"
            ],
            "arguments": {
                "test_input": [
                    "str"
                ],
                "expected": [
                    "str",
                    "dict[str, typing.Any]",
                    "None",
                    "bool"
                ]
            }
        },
        "test_compute_echo": {
            "name": "test_compute_echo",
            "location": 186,
            "return": [
                "None"
            ],
            "arguments": {
                "test_input": [
                    "str"
                ],
                "expected": [
                    "str",
                    "dict[str, typing.Any]",
                    "None",
                    "bool"
                ]
            }
        },
        "test_compute_print": {
            "name": "test_compute_print",
            "location": 204,
            "return": [
                "None"
            ],
            "arguments": {
                "test_input": [
                    "str"
                ],
                "expected": [
                    "str",
                    "dict[str, typing.Any]",
                    "None",
                    "bool"
                ]
            }
        },
        "test_compute_var": {
            "name": "test_compute_var",
            "location": 217,
            "return": [],
            "arguments": {
                "test_inputs": [
                    "list[str]",
                    "str"
                ],
                "expected": [
                    "list[str]",
                    "str"
                ]
            }
        },
        "test_compute_def": {
            "name": "test_compute_def",
            "location": 238,
            "return": [],
            "arguments": {
                "test_inputs": [
                    "list[str]",
                    "str"
                ],
                "expected": [
                    "list[str]",
                    "str"
                ]
            }
        },
        "test_compute_eq": {
            "name": "test_compute_eq",
            "location": 253,
            "return": [],
            "arguments": {
                "test_inputs": [
                    "list[str]",
                    "str"
                ],
                "expected": [
                    "list[str]",
                    "str"
                ]
            }
        },
        "test_compute_lt": {
            "name": "test_compute_lt",
            "location": 260,
            "return": [],
            "arguments": {
                "test_inputs": [
                    "list[str]",
                    "str"
                ],
                "expected": [
                    "list[str]",
                    "str"
                ]
            }
        },
        "test_compute_if": {
            "name": "test_compute_if",
            "location": 278,
            "return": [],
            "arguments": {
                "test_inputs": [
                    "list[str]",
                    "str"
                ],
                "expected": [
                    "list[str]",
                    "str"
                ]
            }
        },
        "test_compute_if_def": {
            "name": "test_compute_if_def",
            "location": 336,
            "return": [],
            "arguments": {
                "test_inputs": [
                    "list[str]",
                    "str"
                ],
                "expected": [
                    "list[str]",
                    "str"
                ]
            }
        },
        "test_compute_recursive_def": {
            "name": "test_compute_recursive_def",
            "location": 344,
            "return": [],
            "arguments": {
                "test_inputs": [
                    "list[str]",
                    "str"
                ],
                "expected": [
                    "list[str]",
                    "str"
                ]
            }
        },
        "test_compute_multi_expr": {
            "name": "test_compute_multi_expr",
            "location": 355,
            "return": [],
            "arguments": {
                "test_inputs": [
                    "list[str]",
                    "str"
                ],
                "expected": [
                    "list[str]",
                    "str"
                ]
            }
        },
        "test_compute_list": {
            "name": "test_compute_list",
            "location": 369,
            "return": [],
            "arguments": {
                "test_inputs": [
                    "list[str]",
                    "str"
                ],
                "expected": [
                    "list[str]",
                    "str"
                ]
            }
        },
        "test_compute_str": {
            "name": "test_compute_str",
            "location": 381,
            "return": [],
            "arguments": {
                "test_inputs": [
                    "list[str]",
                    "str"
                ],
                "expected": [
                    "list[str]",
                    "str"
                ]
            }
        }
    },
    "llisp-master/tests/project_euler_tests.py": {
        "simple_test_file": {
            "name": "simple_test_file",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "std_state": [
                    "str",
                    "int",
                    "dict[int, bool]",
                    "None"
                ],
                "test_file": [
                    "str",
                    "int",
                    "list[str]"
                ],
                "expected": [
                    "str",
                    "dict[, ]",
                    "bool"
                ]
            }
        },
        "test_problem": {
            "name": "test_problem",
            "location": 29,
            "return": [],
            "arguments": {
                "std_state": [
                    "str",
                    "dict[str, object]",
                    "list[str]"
                ],
                "test_file": [
                    "str",
                    "dict[str, object]",
                    "list[str]"
                ],
                "expected": [
                    "str",
                    "dict[str, object]",
                    "list[str]"
                ]
            }
        }
    },
    "llisp-master/tests/std_tests.py": {
        "std_state": {
            "name": "std_state",
            "location": 10,
            "return": [
                "dict[, ]"
            ],
            "arguments": {}
        },
        "simple_multi_std": {
            "name": "simple_multi_std",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "std_state": [
                    "int",
                    "float",
                    "list[list[int]]"
                ],
                "test_inputs": [
                    "list[str]"
                ],
                "expected": [
                    "str",
                    "int",
                    "tuple[]",
                    "list[list[int]]"
                ]
            }
        },
        "test_bool": {
            "name": "test_bool",
            "location": 38,
            "return": [],
            "arguments": {
                "std_state": [
                    "list[str]",
                    "str",
                    "dict[str, object]"
                ],
                "test_inputs": [
                    "list[str]",
                    "str",
                    "dict[str, object]"
                ],
                "expected": [
                    "list[str]",
                    "str",
                    "dict[str, object]"
                ]
            }
        },
        "test_not": {
            "name": "test_not",
            "location": 53,
            "return": [],
            "arguments": {
                "std_state": [
                    "list[str]",
                    "str",
                    "dict[str, object]"
                ],
                "test_inputs": [
                    "list[str]",
                    "str",
                    "dict[str, object]"
                ],
                "expected": [
                    "list[str]",
                    "str",
                    "dict[str, object]"
                ]
            }
        },
        "test_and": {
            "name": "test_and",
            "location": 70,
            "return": [],
            "arguments": {
                "std_state": [
                    "list[str]",
                    "str",
                    "dict[str, object]"
                ],
                "test_inputs": [
                    "list[str]",
                    "str",
                    "dict[str, object]"
                ],
                "expected": [
                    "list[str]",
                    "str",
                    "dict[str, object]"
                ]
            }
        },
        "test_or": {
            "name": "test_or",
            "location": 86,
            "return": [],
            "arguments": {
                "std_state": [
                    "list[str]",
                    "str",
                    "dict[str, object]"
                ],
                "test_inputs": [
                    "list[str]",
                    "str",
                    "dict[str, object]"
                ],
                "expected": [
                    "list[str]",
                    "str",
                    "dict[str, object]"
                ]
            }
        },
        "test_xor": {
            "name": "test_xor",
            "location": 103,
            "return": [],
            "arguments": {
                "std_state": [
                    "list[str]",
                    "str",
                    "dict[str, object]"
                ],
                "test_inputs": [
                    "list[str]",
                    "str",
                    "dict[str, object]"
                ],
                "expected": [
                    "list[str]",
                    "str",
                    "dict[str, object]"
                ]
            }
        },
        "test_min": {
            "name": "test_min",
            "location": 120,
            "return": [],
            "arguments": {
                "std_state": [
                    "list[str]",
                    "str",
                    "dict[str, object]"
                ],
                "test_inputs": [
                    "list[str]",
                    "str",
                    "dict[str, object]"
                ],
                "expected": [
                    "list[str]",
                    "str",
                    "dict[str, object]"
                ]
            }
        },
        "test_chartoint": {
            "name": "test_chartoint",
            "location": 136,
            "return": [],
            "arguments": {
                "std_state": [
                    "list[str]",
                    "str",
                    "dict[str, object]"
                ],
                "test_inputs": [
                    "list[str]",
                    "str",
                    "dict[str, object]"
                ],
                "expected": [
                    "list[str]",
                    "str",
                    "dict[str, object]"
                ]
            }
        },
        "test_toint": {
            "name": "test_toint",
            "location": 152,
            "return": [],
            "arguments": {
                "std_state": [
                    "list[str]",
                    "str",
                    "dict[str, object]"
                ],
                "test_inputs": [
                    "list[str]",
                    "str",
                    "dict[str, object]"
                ],
                "expected": [
                    "list[str]",
                    "str",
                    "dict[str, object]"
                ]
            }
        }
    },
    "llisp-master/tests/__init__.py": {}
}
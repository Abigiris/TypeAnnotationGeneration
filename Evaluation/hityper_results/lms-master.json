{
    "lms-master/lms/app.py": {},
    "lms-master/lms/__init__.py": {},
    "lms-master/lms/extractors/base.py": {
        "Extractor.__init__": {
            "name": "__init__",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "to_extract": []
            }
        },
        "Extractor._convert_to_text": {
            "name": "_convert_to_text",
            "location": 33,
            "return": [
                "str",
                "bytes"
            ],
            "arguments": {
                "code": []
            }
        },
        "Extractor._split_header": {
            "name": "_split_header",
            "location": 47,
            "return": [
                "tuple[typing.Union[str,bool,set[str]]]"
            ],
            "arguments": {
                "cls": [],
                "code": [
                    "str",
                    "None"
                ]
            }
        },
        "Extractor._clean": {
            "name": "_clean",
            "location": 60,
            "return": [
                "tuple[int]",
                "tuple[typing.Union[int,typing.Text]]"
            ],
            "arguments": {
                "cls": [],
                "code": [
                    "str",
                    "bytes",
                    "None"
                ]
            }
        },
        "Extractor.get_exercise": {
            "name": "get_exercise",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "to_extract": [
                    "str",
                    "list[dict[, ]]",
                    "typing.Sequence[int]",
                    "int",
                    "None",
                    "list[str]"
                ]
            }
        },
        "Extractor.get_exercises": {
            "name": "get_exercises",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Extractor.can_extract": {
            "name": "can_extract",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Extractor.__iter__": {
            "name": "__iter__",
            "location": 80,
            "return": [
                "typing.Generator[typing.Generator[tuple[]]]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "lms-master/lms/extractors/imagefile.py": {
        "Imagefile.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Imagefile.can_extract": {
            "name": "can_extract",
            "location": 17,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Imagefile.get_exercise": {
            "name": "get_exercise",
            "location": 20,
            "return": [
                "tuple[typing.Union[int,list[File]]]"
            ],
            "arguments": {
                "self": [],
                "to_extract": [
                    "str",
                    "int",
                    "float",
                    "tuple[typing.Union[int,int]]"
                ]
            }
        },
        "Imagefile.get_exercises": {
            "name": "get_exercises",
            "location": 30,
            "return": [
                "typing.Generator[tuple[]]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "lms-master/lms/extractors/notebook.py": {
        "Notebook.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Notebook.can_extract": {
            "name": "can_extract",
            "location": 34,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Notebook._is_code_cell": {
            "name": "_is_code_cell",
            "location": 38,
            "return": [
                "bool"
            ],
            "arguments": {
                "cell": [
                    "dict[str, bool]",
                    "dict[, ]",
                    "dict[str, dict[str, typing.Any]]"
                ]
            }
        },
        "Notebook._get_code_cells": {
            "name": "_get_code_cells",
            "location": 44,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Notebook._get_file_type": {
            "name": "_get_file_type",
            "location": 49,
            "return": [
                "tuple[typing.Union[dict[str, typing.Any],None,list[dict[str, str]],dict[str, typing.Union[int,str]],bytes,dict[str, str],typing.DefaultDict]]",
                "tuple[typing.Union[str,typing.NamedTuple]]"
            ],
            "arguments": {
                "self": [],
                "code": [
                    "str",
                    "typing.NamedTuple"
                ]
            }
        },
        "Notebook.get_exercise": {
            "name": "get_exercise",
            "location": 63,
            "return": [
                "tuple[typing.Union[int,dict[str, str],str,dict[str, dict[int, int]],tuple[str],list[File]]]"
            ],
            "arguments": {
                "self": [],
                "to_extract": [
                    "dict[str, list[]]"
                ]
            }
        },
        "Notebook.get_exercises": {
            "name": "get_exercises",
            "location": 69,
            "return": [
                "typing.Generator[tuple[]]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "lms-master/lms/extractors/textfile.py": {
        "Textfile.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Textfile.can_extract": {
            "name": "can_extract",
            "location": 22,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Textfile.get_exercise": {
            "name": "get_exercise",
            "location": 29,
            "return": [
                "tuple[typing.Union[str,int,typing.Type,list[File]]]"
            ],
            "arguments": {
                "self": [],
                "to_extract": [
                    "str"
                ]
            }
        },
        "Textfile.get_exercises": {
            "name": "get_exercises",
            "location": 39,
            "return": [
                "typing.Generator[tuple[]]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "lms-master/lms/extractors/ziparchive.py": {
        "Ziparchive.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Ziparchive.can_extract": {
            "name": "can_extract",
            "location": 33,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Ziparchive.check_files_size": {
            "name": "check_files_size",
            "location": 36,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Ziparchive._extract": {
            "name": "_extract",
            "location": 42,
            "return": [],
            "arguments": {
                "archive": [],
                "filename": [],
                "dirname": []
            }
        },
        "Ziparchive.get_files": {
            "name": "get_files",
            "location": 55,
            "return": [],
            "arguments": {
                "self": [],
                "archive": [],
                "filenames": [],
                "dirname": []
            }
        },
        "Ziparchive.get_exercises_by_dirs": {
            "name": "get_exercises_by_dirs",
            "location": 69,
            "return": [],
            "arguments": {
                "self": [],
                "archive": [],
                "filenames": []
            }
        },
        "Ziparchive.get_exercise": {
            "name": "get_exercise",
            "location": 82,
            "return": [],
            "arguments": {
                "self": [],
                "file": []
            }
        },
        "Ziparchive.get_exercises": {
            "name": "get_exercises",
            "location": 95,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Ziparchive.get_unwanted_files_types": {
            "name": "get_unwanted_files_types",
            "location": 106,
            "return": [],
            "arguments": {}
        },
        "Ziparchive.get_unwanted_files": {
            "name": "get_unwanted_files",
            "location": 116,
            "return": [],
            "arguments": {
                "self": [],
                "namelist": []
            }
        }
    },
    "lms-master/lms/extractors/__init__.py": {},
    "lms-master/lms/lmsdb/bootstrap.py": {
        "_migrate_column_in_table_if_needed": {
            "name": "_migrate_column_in_table_if_needed",
            "location": 17,
            "return": [
                "bool"
            ],
            "arguments": {
                "table": [
                    "str",
                    "None",
                    "dict[str, object]"
                ],
                "field_instance": [
                    "str",
                    "dict[str, object]"
                ]
            }
        },
        "_migrate_copy_column": {
            "name": "_migrate_copy_column",
            "location": 51,
            "return": [
                "bool"
            ],
            "arguments": {
                "table": [
                    "Exception",
                    "dict[, ]",
                    "str"
                ],
                "source": [
                    "str",
                    "typing.Type",
                    "list[]",
                    "bool"
                ],
                "dest": [
                    "str",
                    "typing.Sequence[typing.Any]",
                    "None",
                    "typing.Mapping"
                ]
            }
        },
        "_drop_not_null": {
            "name": "_drop_not_null",
            "location": 69,
            "return": [
                "bool"
            ],
            "arguments": {
                "table": [
                    "str",
                    "bool",
                    "typing.Sequence[str]"
                ],
                "column_name": [
                    "str"
                ]
            }
        },
        "_add_not_null": {
            "name": "_add_not_null",
            "location": 78,
            "return": [
                "bool"
            ],
            "arguments": {
                "table": [
                    "str",
                    "bool",
                    "typing.Sequence[str]"
                ],
                "column_name": [
                    "str",
                    "None"
                ]
            }
        },
        "get_details": {
            "name": "get_details",
            "location": 87,
            "return": [
                "tuple[typing.Union[bool,str,dict[, ],dict[str, dict[str, str]]]]"
            ],
            "arguments": {
                "table": [
                    "str",
                    "None"
                ],
                "column": [
                    "str",
                    "list[str]"
                ]
            }
        },
        "_add_not_null_column": {
            "name": "_add_not_null_column",
            "location": 95,
            "return": [
                "bool"
            ],
            "arguments": {
                "table": [
                    "bool",
                    "dict[, ]",
                    "dict[str, dict[, ]]",
                    "typing.Type"
                ],
                "column": [
                    "bool",
                    "str"
                ],
                "run_before_adding_not_null": [
                    "None",
                    "dict[, ]",
                    "bool"
                ]
            }
        },
        "_rename_column_in_table_if_needed": {
            "name": "_rename_column_in_table_if_needed",
            "location": 116,
            "return": [
                "bool"
            ],
            "arguments": {
                "table": [
                    "str"
                ],
                "old_column_name": [
                    "str"
                ],
                "new_column_name": [
                    "str",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "_alter_column_type_if_needed": {
            "name": "_alter_column_type_if_needed",
            "location": 144,
            "return": [
                "bool"
            ],
            "arguments": {
                "table": [
                    "str",
                    "list[str]",
                    "dict[, ]",
                    "None",
                    "set[str]"
                ],
                "field_instance": [
                    "str"
                ],
                "new_type": [
                    "bool",
                    "list[]",
                    "dict[str, typing.Any]",
                    "set[]",
                    "str"
                ]
            }
        },
        "_drop_column_from_module_if_needed": {
            "name": "_drop_column_from_module_if_needed",
            "location": 171,
            "return": [
                "bool"
            ],
            "arguments": {
                "table": [
                    "str",
                    "None"
                ],
                "column_name": [
                    "str"
                ]
            }
        },
        "_execute_sql_if_possible": {
            "name": "_execute_sql_if_possible",
            "location": 190,
            "return": [
                "bool"
            ],
            "arguments": {
                "sql": [
                    "str",
                    "int"
                ]
            }
        },
        "_drop_constraint_if_needed": {
            "name": "_drop_constraint_if_needed",
            "location": 201,
            "return": [
                "bool"
            ],
            "arguments": {
                "table": [
                    "str"
                ],
                "column_name": [
                    "str"
                ]
            }
        },
        "has_column_named": {
            "name": "has_column_named",
            "location": 217,
            "return": [
                "bool"
            ],
            "arguments": {
                "db": [
                    "str",
                    "typing.Type",
                    "set[str]"
                ],
                "table": [
                    "str"
                ],
                "column_name": [
                    "str"
                ]
            }
        },
        "_add_api_keys_to_users_table": {
            "name": "_add_api_keys_to_users_table",
            "location": 221,
            "return": [
                "None"
            ],
            "arguments": {
                "table": [],
                "_column": [
                    "bool",
                    "typing.Iterable[str]",
                    "None",
                    "str",
                    "typing.Type"
                ]
            }
        },
        "_add_course_and_numbers_to_exercises_table": {
            "name": "_add_course_and_numbers_to_exercises_table",
            "location": 229,
            "return": [
                "None"
            ],
            "arguments": {
                "table": [
                    "list[]"
                ],
                "course": [
                    "str"
                ]
            }
        },
        "_create_usercourses_objects": {
            "name": "_create_usercourses_objects",
            "location": 242,
            "return": [
                "None"
            ],
            "arguments": {
                "table": [
                    "list[dict[str, typing.Any]]",
                    "str",
                    "list[str]"
                ],
                "course": [
                    "str",
                    "typing.Callable[, ]",
                    "int"
                ]
            }
        },
        "_add_uuid_to_users_table": {
            "name": "_add_uuid_to_users_table",
            "location": 250,
            "return": [
                "None"
            ],
            "arguments": {
                "table": [],
                "_column": [
                    "str",
                    "bool"
                ]
            }
        },
        "_api_keys_migration": {
            "name": "_api_keys_migration",
            "location": 258,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "_last_course_viewed_migration": {
            "name": "_last_course_viewed_migration",
            "location": 264,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "_exercise_course_migration": {
            "name": "_exercise_course_migration",
            "location": 270,
            "return": [
                "bool"
            ],
            "arguments": {
                "course": [
                    "dict[str, typing.Any]",
                    "bool"
                ]
            }
        },
        "_add_exercise_course_id_and_number_columns_constraint": {
            "name": "_add_exercise_course_id_and_number_columns_constraint",
            "location": 277,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "_add_user_course_constaint": {
            "name": "_add_user_course_constaint",
            "location": 292,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "_last_status_view_migration": {
            "name": "_last_status_view_migration",
            "location": 306,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "_uuid_migration": {
            "name": "_uuid_migration",
            "location": 313,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "_assessment_migration": {
            "name": "_assessment_migration",
            "location": 319,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "is_tables_exists": {
            "name": "is_tables_exists",
            "location": 325,
            "return": [
                "bool"
            ],
            "arguments": {
                "tables": [
                    "str",
                    "list[tuple[typing.Union[str,str]]]"
                ]
            }
        },
        "get_new_tables": {
            "name": "get_new_tables",
            "location": 335,
            "return": [
                "list[typing.Text]"
            ],
            "arguments": {
                "tables": [
                    "str"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 339,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "lms-master/lms/lmsdb/database_config.py": {
        "get_db_instance": {
            "name": "get_db_instance",
            "location": 40,
            "return": [
                "SqliteDatabase",
                "PostgresqlDatabase"
            ],
            "arguments": {}
        },
        "get_migrator_instance": {
            "name": "get_migrator_instance",
            "location": 44,
            "return": [
                "SqliteMigrator",
                "PostgresqlMigrator"
            ],
            "arguments": {}
        }
    },
    "lms-master/lms/lmsdb/models.py": {
        "on_save_handler": {
            "name": "on_save_handler",
            "location": 248,
            "return": [
                "None"
            ],
            "arguments": {
                "model_class": [],
                "instance": [
                    "str",
                    "bool",
                    "None",
                    "list[str]"
                ],
                "created": [
                    "bool",
                    "tuple[str]"
                ]
            }
        },
        "on_save_user_course": {
            "name": "on_save_user_course",
            "location": 288,
            "return": [
                "None"
            ],
            "arguments": {
                "model_class": [
                    "bool",
                    "typing.Any",
                    "None",
                    "dict[str, typing.Any]",
                    "Exception",
                    "typing.Callable[..., bool]",
                    "str"
                ],
                "instance": [
                    "int",
                    "str",
                    "list[typing.Any]",
                    "None",
                    "dict[, ]"
                ],
                "created": [
                    "bool",
                    "typing.Any",
                    "None",
                    "dict[str, typing.Any]",
                    "Exception",
                    "typing.Callable[..., bool]",
                    "str"
                ]
            }
        },
        "on_delete_user_course": {
            "name": "on_delete_user_course",
            "location": 296,
            "return": [
                "None"
            ],
            "arguments": {
                "model_class": [
                    "typing.Type",
                    "typing.Callable[, ]"
                ],
                "instance": [
                    "int"
                ]
            }
        },
        "on_notification_saved": {
            "name": "on_notification_saved",
            "location": 370,
            "return": [
                "None"
            ],
            "arguments": {
                "model_class": [
                    "bool",
                    "str",
                    "Exception",
                    "typing.Callable[..., bool]",
                    "list[]",
                    "dict[str, typing.Any]",
                    "None"
                ],
                "instance": [
                    "bool",
                    "str",
                    "None"
                ],
                "created": [
                    "bool",
                    "str",
                    "None",
                    "float"
                ]
            }
        },
        "exercise_number_save_handler": {
            "name": "exercise_number_save_handler",
            "location": 470,
            "return": [
                "None"
            ],
            "arguments": {
                "model_class": [
                    "dict[, ]",
                    "bool",
                    "None"
                ],
                "instance": [
                    "dict[, ]",
                    "bool",
                    "None"
                ],
                "created": [
                    "bool",
                    "str",
                    "Exception",
                    "typing.Callable[..., bool]",
                    "list[]",
                    "dict[str, typing.Any]",
                    "None"
                ]
            }
        },
        "assessment_on_save_handler": {
            "name": "assessment_on_save_handler",
            "location": 524,
            "return": [
                "None"
            ],
            "arguments": {
                "_model_class": [
                    "bool",
                    "str",
                    "Exception",
                    "typing.Callable[..., bool]",
                    "list[]",
                    "dict[str, typing.Any]",
                    "None"
                ],
                "instance": [
                    "bool"
                ],
                "created": [
                    "bool",
                    "str",
                    "Exception",
                    "typing.Callable[..., bool]",
                    "list[]",
                    "dict[str, typing.Any]",
                    "None"
                ]
            }
        },
        "generate_string": {
            "name": "generate_string",
            "location": 1123,
            "return": [
                "str"
            ],
            "arguments": {
                "min_len": [
                    "int"
                ],
                "max_len": [
                    "int"
                ],
                "allow_punctuation": [
                    "bool"
                ]
            }
        },
        "create_demo_users": {
            "name": "create_demo_users",
            "location": 1137,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "create_basic_roles": {
            "name": "create_basic_roles",
            "location": 1155,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "create_basic_assessments": {
            "name": "create_basic_assessments",
            "location": 1161,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "create_basic_course": {
            "name": "create_basic_course",
            "location": 1179,
            "return": [],
            "arguments": {}
        },
        "RoleOptions.__str__": {
            "name": "__str__",
            "location": 50,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NotePrivacy.__str__": {
            "name": "__str__",
            "location": 60,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BaseModel.refresh": {
            "name": "refresh",
            "location": 68,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Role.__str__": {
            "name": "__str__",
            "location": 82,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Role.get_banned_role": {
            "name": "get_banned_role",
            "location": 86,
            "return": [],
            "arguments": {
                "cls": [
                    "dict[, ]"
                ]
            }
        },
        "Role.get_unverified_role": {
            "name": "get_unverified_role",
            "location": 90,
            "return": [],
            "arguments": {
                "cls": [
                    "dict[, ]"
                ]
            }
        },
        "Role.get_student_role": {
            "name": "get_student_role",
            "location": 94,
            "return": [],
            "arguments": {
                "cls": [
                    "dict[, ]"
                ]
            }
        },
        "Role.get_staff_role": {
            "name": "get_staff_role",
            "location": 98,
            "return": [],
            "arguments": {
                "cls": [
                    "dict[, ]"
                ]
            }
        },
        "Role.get_admin_role": {
            "name": "get_admin_role",
            "location": 102,
            "return": [],
            "arguments": {
                "cls": [
                    "dict[, ]"
                ]
            }
        },
        "Role.by_name": {
            "name": "by_name",
            "location": 106,
            "return": [],
            "arguments": {
                "cls": [
                    "str",
                    "None",
                    "set[str]"
                ],
                "name": [
                    "str"
                ]
            }
        },
        "Role.is_banned": {
            "name": "is_banned",
            "location": 113,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Role.is_unverified": {
            "name": "is_unverified",
            "location": 117,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Role.is_student": {
            "name": "is_student",
            "location": 121,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Role.is_staff": {
            "name": "is_staff",
            "location": 125,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Role.is_administrator": {
            "name": "is_administrator",
            "location": 129,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Role.is_manager": {
            "name": "is_manager",
            "location": 133,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Role.is_viewer": {
            "name": "is_viewer",
            "location": 137,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Course.has_user": {
            "name": "has_user",
            "location": 149,
            "return": [],
            "arguments": {
                "self": [],
                "user_id": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ]
            }
        },
        "Course.fetch": {
            "name": "fetch",
            "location": 153,
            "return": [],
            "arguments": {
                "cls": [
                    "str"
                ],
                "user": [
                    "str"
                ]
            }
        },
        "Course.public_courses": {
            "name": "public_courses",
            "location": 163,
            "return": [],
            "arguments": {
                "cls": [
                    "typing.Callable[, ]",
                    "typing.IO"
                ]
            }
        },
        "Course.public_course_exists": {
            "name": "public_course_exists",
            "location": 167,
            "return": [],
            "arguments": {
                "cls": [
                    "typing.Type",
                    "float"
                ]
            }
        },
        "Course.__str__": {
            "name": "__str__",
            "location": 170,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "User.get_id": {
            "name": "get_id",
            "location": 184,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "User.is_password_valid": {
            "name": "is_password_valid",
            "location": 187,
            "return": [],
            "arguments": {
                "self": [],
                "password": [
                    "str",
                    "None"
                ]
            }
        },
        "User.has_course": {
            "name": "has_course",
            "location": 190,
            "return": [],
            "arguments": {
                "self": [],
                "course_id": [
                    "int",
                    "typing.Sequence[int]",
                    "str",
                    "None"
                ]
            }
        },
        "User.get_system_user": {
            "name": "get_system_user",
            "location": 194,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "User.random_password": {
            "name": "random_password",
            "location": 207,
            "return": [],
            "arguments": {
                "cls": [
                    "str",
                    "collections.abc.Awaitable[]"
                ],
                "stronger": [
                    "bool"
                ]
            }
        },
        "User.get_notifications": {
            "name": "get_notifications",
            "location": 211,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "User.get_courses": {
            "name": "get_courses",
            "location": 214,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "User.notes": {
            "name": "notes",
            "location": 217,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "User.__str__": {
            "name": "__str__",
            "location": 243,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserCourse.is_user_registered": {
            "name": "is_user_registered",
            "location": 275,
            "return": [],
            "arguments": {
                "cls": [
                    "int",
                    "float"
                ],
                "user_id": [
                    "int",
                    "float"
                ],
                "course_id": [
                    "int",
                    "float"
                ]
            }
        },
        "Notification.read": {
            "name": "read",
            "location": 317,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Notification.fetch": {
            "name": "fetch",
            "location": 322,
            "return": [],
            "arguments": {
                "cls": [
                    "bytes",
                    "bool"
                ],
                "user": [
                    "dict[, ]",
                    "dict[str, str]",
                    "str"
                ]
            }
        },
        "Notification.of": {
            "name": "of",
            "location": 334,
            "return": [],
            "arguments": {
                "cls": [
                    "str",
                    "int",
                    "list[tuple[typing.Union[str,typing.Any]]]",
                    "None"
                ],
                "related_id": [
                    "str",
                    "int",
                    "dict[str, typing.Any]",
                    "dict[str, object]"
                ],
                "user": [
                    "None",
                    "int",
                    "str"
                ]
            }
        },
        "Notification.send": {
            "name": "send",
            "location": 352,
            "return": [],
            "arguments": {
                "cls": [],
                "user": [
                    "str",
                    "int",
                    "None",
                    "dict[str, typing.Any]"
                ],
                "kind": [
                    "str",
                    "int",
                    "None",
                    "dict[str, typing.Any]"
                ],
                "message": [
                    "str",
                    "int",
                    "None",
                    "dict[str, typing.Any]"
                ],
                "related_id": [
                    "None",
                    "str",
                    "int",
                    "dict[str, typing.Any]"
                ],
                "action_url": [
                    "None",
                    "str",
                    "int",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "Exercise.open_for_new_solutions": {
            "name": "open_for_new_solutions",
            "location": 402,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Exercise.get_highest_number": {
            "name": "get_highest_number",
            "location": 408,
            "return": [],
            "arguments": {
                "cls": [
                    "dict[, ]",
                    "bytes",
                    "typing.Type",
                    "list[]"
                ],
                "course": [
                    "dict[, ]",
                    "bytes",
                    "typing.Type",
                    "list[]"
                ]
            }
        },
        "Exercise.is_number_exists": {
            "name": "is_number_exists",
            "location": 418,
            "return": [],
            "arguments": {
                "cls": [
                    "typing.Type",
                    "str",
                    "None"
                ],
                "course": [
                    "typing.Type",
                    "str",
                    "None"
                ],
                "number": [
                    "typing.Type",
                    "str",
                    "None"
                ]
            }
        },
        "Exercise.get_objects": {
            "name": "get_objects",
            "location": 427,
            "return": [],
            "arguments": {
                "cls": [
                    "str",
                    "int"
                ],
                "user_id": [
                    "int"
                ],
                "fetch_archived": [
                    "bool"
                ],
                "from_all_courses": [
                    "bool"
                ]
            }
        },
        "Exercise.as_dict": {
            "name": "as_dict",
            "location": 449,
            "return": [
                "dict[typing.Text, ]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Exercise.as_dicts": {
            "name": "as_dicts",
            "location": 462,
            "return": [
                "dict[, ]"
            ],
            "arguments": {
                "exercises": []
            }
        },
        "Exercise.__str__": {
            "name": "__str__",
            "location": 465,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SolutionState.active_solutions": {
            "name": "active_solutions",
            "location": 483,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "typing.Mapping"
                ]
            }
        },
        "SolutionState.to_choices": {
            "name": "to_choices",
            "location": 491,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "cls": [
                    "tuple[typing.Union[float,float]]"
                ]
            }
        },
        "SolutionStatusView.to_choices": {
            "name": "to_choices",
            "location": 502,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "cls": [
                    "tuple[typing.Union[float,float]]"
                ]
            }
        },
        "SolutionAssessment.get_assessments": {
            "name": "get_assessments",
            "location": 516,
            "return": [],
            "arguments": {
                "cls": [
                    "typing.Callable[, ]",
                    "typing.IO",
                    "Exception",
                    "str",
                    "None"
                ],
                "course": [
                    "typing.Callable[, ]",
                    "typing.IO",
                    "Exception",
                    "str",
                    "None"
                ]
            }
        },
        "SolutionAssessment.__str__": {
            "name": "__str__",
            "location": 519,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Solution.solution_files": {
            "name": "solution_files",
            "location": 566,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Solution.is_shared": {
            "name": "is_shared",
            "location": 572,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Solution.is_checked": {
            "name": "is_checked",
            "location": 576,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Solution.create_hash": {
            "name": "create_hash",
            "location": 580,
            "return": [],
            "arguments": {
                "content": [
                    "str",
                    "typing.Iterable[str]",
                    "typing.Sequence[str]"
                ]
            }
        },
        "Solution.is_duplicate": {
            "name": "is_duplicate",
            "location": 584,
            "return": [
                "bool"
            ],
            "arguments": {
                "cls": [],
                "content": [
                    "str",
                    "None",
                    "typing.Type",
                    "int"
                ],
                "user": [
                    "str",
                    "int",
                    "None",
                    "tuple[typing.Type]",
                    "dict[str, str]"
                ],
                "exercise": [
                    "str",
                    "int",
                    "None",
                    "tuple[typing.Type]",
                    "dict[str, str]"
                ]
            }
        },
        "Solution.view_solution": {
            "name": "view_solution",
            "location": 605,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Solution.start_checking": {
            "name": "start_checking",
            "location": 619,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Solution.set_state": {
            "name": "set_state",
            "location": 622,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "new_state": [
                    "dict[, ]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "Solution.ordered_versions": {
            "name": "ordered_versions",
            "location": 632,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Solution.test_results": {
            "name": "test_results",
            "location": 638,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Solution.of_user": {
            "name": "of_user",
            "location": 642,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "cls": [
                    "list[str]",
                    "None",
                    "int"
                ],
                "user_id": [
                    "bool",
                    "str"
                ],
                "with_archived": [
                    "bool"
                ],
                "from_all_courses": [
                    "bool"
                ]
            }
        },
        "Solution.comments": {
            "name": "comments",
            "location": 672,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Solution.ordered_comments": {
            "name": "ordered_comments",
            "location": 678,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Solution.staff_comments": {
            "name": "staff_comments",
            "location": 682,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Solution.comments_per_file": {
            "name": "comments_per_file",
            "location": 689,
            "return": [
                "Counter"
            ],
            "arguments": {
                "self": []
            }
        },
        "Solution.create_solution": {
            "name": "create_solution",
            "location": 693,
            "return": [],
            "arguments": {
                "cls": [],
                "exercise": [
                    "str",
                    "None",
                    "typing.Iterable[N]"
                ],
                "solver": [
                    "str",
                    "None",
                    "typing.Iterable[N]"
                ],
                "files": [],
                "hash_": [
                    "None",
                    "str",
                    "int",
                    "dict[, ]"
                ]
            }
        },
        "Solution._base_next_unchecked": {
            "name": "_base_next_unchecked",
            "location": 738,
            "return": [],
            "arguments": {
                "cls": [
                    "dict[str, typing.Any]",
                    "typing.Type",
                    "int"
                ]
            }
        },
        "Solution.change_assessment": {
            "name": "change_assessment",
            "location": 769,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "assessment_id": [
                    "None",
                    "str",
                    "int"
                ]
            }
        },
        "Solution.mark_as_checked": {
            "name": "mark_as_checked",
            "location": 778,
            "return": [],
            "arguments": {
                "self": [],
                "by": [
                    "None",
                    "bool",
                    "float",
                    "typing.Pattern"
                ]
            }
        },
        "Solution.next_unchecked": {
            "name": "next_unchecked",
            "location": 785,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "dict[, ]",
                    "typing.Type",
                    "str",
                    "list[str]"
                ]
            }
        },
        "Solution.next_unchecked_of": {
            "name": "next_unchecked_of",
            "location": 792,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "int"
                ],
                "exercise_id": [
                    "str",
                    "int"
                ]
            }
        },
        "Solution.status": {
            "name": "status",
            "location": 801,
            "return": [],
            "arguments": {
                "cls": [
                    "str",
                    "list[]",
                    "bool",
                    "list[R]",
                    "list[L]"
                ],
                "course_id": [
                    "None",
                    "str",
                    "int"
                ]
            }
        },
        "Solution.left_in_exercise": {
            "name": "left_in_exercise",
            "location": 829,
            "return": [
                "int"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "typing.Type",
                    "str"
                ],
                "exercise": [
                    "str",
                    "None",
                    "int"
                ]
            }
        },
        "SolutionFile.is_duplicate": {
            "name": "is_duplicate",
            "location": 850,
            "return": [],
            "arguments": {
                "cls": [
                    "str"
                ],
                "exercise": [
                    "str"
                ],
                "solver": [
                    "str"
                ],
                "code": [
                    "str"
                ]
            }
        },
        "SolutionFile.create_hash": {
            "name": "create_hash",
            "location": 860,
            "return": [],
            "arguments": {
                "content": [
                    "str",
                    "typing.Iterable[str]",
                    "typing.Sequence[str]"
                ]
            }
        },
        "SolutionFile.suffix": {
            "name": "suffix",
            "location": 864,
            "return": [
                "str",
                "list[]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "SharedSolution.create_new": {
            "name": "create_new",
            "location": 874,
            "return": [],
            "arguments": {
                "cls": [],
                "solution": [
                    "str",
                    "dict[str, typing.Any]",
                    "dict[, ]",
                    "Exception",
                    "bool"
                ]
            }
        },
        "ExerciseTest.get_or_create_exercise_test": {
            "name": "get_or_create_exercise_test",
            "location": 906,
            "return": [],
            "arguments": {
                "cls": [],
                "exercise": [
                    "str"
                ],
                "code": [
                    "str",
                    "None",
                    "typing.Callable[, ]"
                ]
            }
        },
        "ExerciseTest.get_by_exercise": {
            "name": "get_by_exercise",
            "location": 918,
            "return": [],
            "arguments": {
                "cls": [],
                "exercise": [
                    "dict[, ]",
                    "None",
                    "str",
                    "list[dict[, ]]",
                    "int"
                ]
            }
        },
        "ExerciseTestName.create_exercise_test_name": {
            "name": "create_exercise_test_name",
            "location": 935,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [],
                "exercise_test": [
                    "str",
                    "None"
                ],
                "test_name": [
                    "str",
                    "None"
                ],
                "pretty_test_name": [
                    "str",
                    "None"
                ]
            }
        },
        "ExerciseTestName.get_exercise_test": {
            "name": "get_exercise_test",
            "location": 952,
            "return": [],
            "arguments": {
                "cls": [],
                "exercise": [
                    "str",
                    "None"
                ],
                "test_name": [
                    "str",
                    "bool"
                ]
            }
        },
        "SolutionExerciseTestExecution.create_execution_result": {
            "name": "create_execution_result",
            "location": 977,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [],
                "solution": [
                    "str",
                    "None"
                ],
                "test_name": [
                    "str",
                    "None"
                ],
                "user_message": [
                    "str"
                ],
                "staff_message": [
                    "str"
                ]
            }
        },
        "SolutionExerciseTestExecution.by_solution": {
            "name": "by_solution",
            "location": 996,
            "return": [],
            "arguments": {
                "cls": [
                    "str",
                    "dict[, ]",
                    "typing.Type",
                    "typing.Mapping"
                ],
                "solution": [
                    "str",
                    "dict[, ]",
                    "typing.Type",
                    "typing.Mapping"
                ]
            }
        },
        "CommentText.create_comment": {
            "name": "create_comment",
            "location": 1011,
            "return": [
                "str"
            ],
            "arguments": {
                "cls": [
                    "list[]",
                    "typing.Any",
                    "None",
                    "str",
                    "bool",
                    "list[str]",
                    "list[tuple[typing.Union[str,str]]]"
                ],
                "text": [
                    "str",
                    "None"
                ],
                "flake_key": [
                    "None",
                    "str"
                ]
            }
        },
        "Note.is_private": {
            "name": "is_private",
            "location": 1035,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Note.is_staff": {
            "name": "is_staff",
            "location": 1039,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Note.is_solver": {
            "name": "is_solver",
            "location": 1043,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Note.is_public": {
            "name": "is_public",
            "location": 1047,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Note.get_note_options": {
            "name": "get_note_options",
            "location": 1051,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "Note.get_privacy_level": {
            "name": "get_privacy_level",
            "location": 1055,
            "return": [],
            "arguments": {
                "level": [
                    "int"
                ]
            }
        },
        "Comment.by_solution": {
            "name": "by_solution",
            "location": 1068,
            "return": [],
            "arguments": {
                "cls": [
                    "dict[str, typing.Any]",
                    "int",
                    "typing.IO",
                    "str",
                    "typing.Callable[, ]"
                ],
                "solution": [
                    "dict[str, typing.Any]",
                    "int",
                    "typing.IO",
                    "str",
                    "typing.Callable[, ]"
                ]
            }
        },
        "Comment.solution": {
            "name": "solution",
            "location": 1077,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Comment.create_comment": {
            "name": "create_comment",
            "location": 1081,
            "return": [],
            "arguments": {
                "cls": [],
                "commenter": [
                    "int",
                    "str",
                    "dict[str, str]"
                ],
                "line_number": [
                    "int",
                    "str",
                    "dict[str, str]"
                ],
                "comment_text": [
                    "int",
                    "str",
                    "dict[str, str]"
                ],
                "file": [
                    "int",
                    "str",
                    "dict[str, str]"
                ],
                "is_auto": [
                    "int",
                    "str",
                    "dict[str, str]"
                ]
            }
        },
        "Comment._by_file": {
            "name": "_by_file",
            "location": 1098,
            "return": [],
            "arguments": {
                "cls": [
                    "str",
                    "None",
                    "typing.Type",
                    "set[I]"
                ],
                "file_id": [
                    "int",
                    "str"
                ]
            }
        },
        "Comment.by_file": {
            "name": "by_file",
            "location": 1119,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "cls": [
                    "int",
                    "str",
                    "None"
                ],
                "file_id": [
                    "int",
                    "str",
                    "None"
                ]
            }
        }
    },
    "lms-master/lms/lmsdb/__init__.py": {},
    "lms-master/lms/lmstests/__init__.py": {},
    "lms-master/lms/lmstests/public/__init__.py": {},
    "lms-master/lms/lmstests/public/config/celery.py": {},
    "lms-master/lms/lmstests/public/config/__init__.py": {},
    "lms-master/lms/lmstests/public/general/tasks.py": {
        "reset_solution_state_if_needed": {
            "name": "reset_solution_state_if_needed",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "solution_pk": [
                    "bool"
                ]
            }
        }
    },
    "lms-master/lms/lmstests/public/general/__init__.py": {},
    "lms-master/lms/lmstests/public/identical_tests/services.py": {
        "IdenticalSolutionSolver.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "solution_check_pk": [
                    "dict[str, typing.Any]",
                    "list[list[str]]",
                    "str",
                    "None",
                    "dict[, ]"
                ],
                "logger": [
                    "str",
                    "list[str]",
                    "tuple[tuple[typing.Union[str,...]]]"
                ]
            }
        },
        "IdenticalSolutionSolver.initialize": {
            "name": "initialize",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IdenticalSolutionSolver.solution": {
            "name": "solution",
            "location": 26,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "IdenticalSolutionSolver.check_identical": {
            "name": "check_identical",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IdenticalSolutionSolver._get_first_identical_solution_file": {
            "name": "_get_first_identical_solution_file",
            "location": 51,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "IdenticalSolutionSolver.check_for_match_solutions_to_solve": {
            "name": "check_for_match_solutions_to_solve",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IdenticalSolutionSolver._clone_solution_comments": {
            "name": "_clone_solution_comments",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "from_solution": [],
                "to_solution": []
            }
        },
        "IdenticalSolutionSolver.check_identical_solutions_per_exercise": {
            "name": "check_identical_solutions_per_exercise",
            "location": 111,
            "return": [],
            "arguments": {}
        }
    },
    "lms-master/lms/lmstests/public/identical_tests/tasks.py": {
        "solve_solution_with_identical_code": {
            "name": "solve_solution_with_identical_code",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "solution_pk": [
                    "str",
                    "int",
                    "typing.Callable[str, None]"
                ]
            }
        },
        "check_if_other_solutions_can_be_solved": {
            "name": "check_if_other_solutions_can_be_solved",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "solution_pk": [
                    "str",
                    "int",
                    "typing.Callable[str, None]"
                ]
            }
        }
    },
    "lms-master/lms/lmstests/public/identical_tests/__init__.py": {},
    "lms-master/lms/lmstests/public/linters/services.py": {
        "LinterChecker.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "solution_check_pk": [
                    "dict[str, typing.Any]",
                    "list[list[str]]",
                    "str",
                    "None",
                    "dict[, ]"
                ],
                "logger": [
                    "str",
                    "list[str]",
                    "tuple[tuple[typing.Union[str,...]]]"
                ]
            }
        },
        "LinterChecker.initialize": {
            "name": "initialize",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LinterChecker.solution": {
            "name": "solution",
            "location": 30,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LinterChecker.run_check": {
            "name": "run_check",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LinterChecker._run_in_sandbox_and_populate_errors": {
            "name": "_run_in_sandbox_and_populate_errors",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LinterChecker._run_in_sandbox": {
            "name": "_run_in_sandbox",
            "location": 51,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "LinterChecker._populate_comments": {
            "name": "_populate_comments",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LinterChecker._fire_notification_if_needed": {
            "name": "_fire_notification_if_needed",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "lms-master/lms/lmstests/public/linters/tasks.py": {
        "run_linter_on_solution": {
            "name": "run_linter_on_solution",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "solution_pk": [
                    "str",
                    "list[str]",
                    "int"
                ]
            }
        }
    },
    "lms-master/lms/lmstests/public/linters/text_fixer.py": {
        "fix_texts": {
            "name": "fix_texts",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "_join_flake8_errors": {
            "name": "_join_flake8_errors",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "flake8_key": [
                    "str"
                ]
            }
        },
        "_fix_text": {
            "name": "_fix_text",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "flake8_key": [
                    "str",
                    "list[str]"
                ],
                "text": [
                    "str"
                ]
            }
        },
        "_delete_comments_by_flake8_key": {
            "name": "_delete_comments_by_flake8_key",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "flake8_key": [
                    "str"
                ]
            }
        }
    },
    "lms-master/lms/lmstests/public/linters/__init__.py": {},
    "lms-master/lms/lmstests/public/unittests/executers.py": {
        "get_executor": {
            "name": "get_executor",
            "location": 117,
            "return": [],
            "arguments": {
                "executor_name": [
                    "None",
                    "str",
                    "dict[, ]"
                ]
            }
        },
        "BaseExecutor.executor_name": {
            "name": "executor_name",
            "location": 13,
            "return": [],
            "arguments": {
                "cls": [
                    "str",
                    "Exception",
                    "typing.Type"
                ]
            }
        },
        "BaseExecutor.__enter__": {
            "name": "__enter__",
            "location": 16,
            "return": [
                "BaseExecutor"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseExecutor.get_file_path": {
            "name": "get_file_path",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "file_path": [
                    "str",
                    "list[str]",
                    "bytes",
                    "set[str]"
                ]
            }
        },
        "BaseExecutor.run_on_executor": {
            "name": "run_on_executor",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "args": []
            }
        },
        "BaseExecutor.write_file": {
            "name": "write_file",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "file_path": [
                    "str",
                    "bool",
                    "typing.Iterable[typing.Optional[typing.Any]]"
                ],
                "content": [
                    "str",
                    "bool",
                    "typing.Iterable[typing.Optional[typing.Any]]"
                ]
            }
        },
        "BaseExecutor.get_file": {
            "name": "get_file",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "file_path": [
                    "str",
                    "bool",
                    "list[str]"
                ]
            }
        },
        "DockerExecutor.__init__": {
            "name": "__init__",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DockerExecutor.__enter__": {
            "name": "__enter__",
            "location": 46,
            "return": [
                "DockerExecutor"
            ],
            "arguments": {
                "self": []
            }
        },
        "DockerExecutor.__exit__": {
            "name": "__exit__",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "exc_type": [
                    "typing.Type",
                    "None",
                    "str",
                    "BaseException",
                    "Exception"
                ],
                "exc_val": [
                    "typing.Type",
                    "None",
                    "str",
                    "BaseException",
                    "Exception"
                ],
                "exc_tb": [
                    "typing.Type",
                    "None",
                    "str",
                    "BaseException",
                    "Exception"
                ]
            }
        },
        "DockerExecutor.get_file_path": {
            "name": "get_file_path",
            "location": 62,
            "return": [],
            "arguments": {
                "self": [],
                "file_path": [
                    "str"
                ]
            }
        },
        "DockerExecutor.run_on_executor": {
            "name": "run_on_executor",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "args": []
            }
        },
        "DockerExecutor.write_file": {
            "name": "write_file",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "file_path": [
                    "str"
                ],
                "content": [
                    "str"
                ]
            }
        },
        "DockerExecutor.get_file": {
            "name": "get_file",
            "location": 80,
            "return": [],
            "arguments": {
                "self": [],
                "file_path": [
                    "str"
                ]
            }
        },
        "SameProcessExecutor.__init__": {
            "name": "__init__",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SameProcessExecutor.__exit__": {
            "name": "__exit__",
            "location": 97,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "exc_type": [
                    "typing.Type",
                    "None",
                    "str",
                    "BaseException",
                    "Exception"
                ],
                "exc_val": [
                    "typing.Type",
                    "None",
                    "str",
                    "BaseException",
                    "Exception"
                ],
                "exc_tb": [
                    "typing.Type",
                    "None",
                    "str",
                    "BaseException",
                    "Exception"
                ]
            }
        },
        "SameProcessExecutor.get_file_path": {
            "name": "get_file_path",
            "location": 100,
            "return": [
                "str",
                "list[str]",
                "bytes",
                "set[str]"
            ],
            "arguments": {
                "self": [],
                "file_path": [
                    "str",
                    "list[str]",
                    "bytes",
                    "set[str]"
                ]
            }
        },
        "SameProcessExecutor.run_on_executor": {
            "name": "run_on_executor",
            "location": 103,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "args": []
            }
        },
        "SameProcessExecutor.write_file": {
            "name": "write_file",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "file_path": [
                    "str"
                ],
                "content": [
                    "str",
                    "bytes"
                ]
            }
        },
        "SameProcessExecutor.get_file": {
            "name": "get_file",
            "location": 110,
            "return": [],
            "arguments": {
                "self": [],
                "file_path": [
                    "str"
                ]
            }
        }
    },
    "lms-master/lms/lmstests/public/unittests/import_tests.py": {
        "register_test_class": {
            "name": "register_test_class",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "file_path": [
                    "str"
                ],
                "test_class": [
                    "str",
                    "list[]",
                    "dict[str, str]",
                    "int",
                    "list[str]"
                ]
            }
        },
        "load_tests_from_path": {
            "name": "load_tests_from_path",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "file_path": [
                    "str"
                ]
            }
        },
        "load_test_from_module": {
            "name": "load_test_from_module",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "file_path": [
                    "str",
                    "typing.BinaryIO"
                ]
            }
        }
    },
    "lms-master/lms/lmstests/public/unittests/services.py": {
        "UnitTestChecker.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "logger": [
                    "str",
                    "None",
                    "bool"
                ],
                "solution_id": [
                    "str",
                    "int"
                ],
                "executor_name": [
                    "str",
                    "bool"
                ]
            }
        },
        "UnitTestChecker.initialize": {
            "name": "initialize",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UnitTestChecker.run_check": {
            "name": "run_check",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UnitTestChecker._run_tests_on_solution": {
            "name": "_run_tests_on_solution",
            "location": 47,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "UnitTestChecker._generate_python_code": {
            "name": "_generate_python_code",
            "location": 69,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "UnitTestChecker._get_test_cases": {
            "name": "_get_test_cases",
            "location": 79,
            "return": [
                "typing.Generator[tuple[]]",
                "None"
            ],
            "arguments": {
                "self": [],
                "raw_results": [
                    "str",
                    "list[str]",
                    "int"
                ]
            }
        },
        "UnitTestChecker._populate_junit_results": {
            "name": "_populate_junit_results",
            "location": 99,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "raw_results": [
                    "dict[, ]",
                    "bool",
                    "str"
                ]
            }
        },
        "UnitTestChecker._handle_failed_to_execute_tests": {
            "name": "_handle_failed_to_execute_tests",
            "location": 135,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "raw_results": [
                    "int",
                    "None"
                ]
            }
        },
        "UnitTestChecker._handle_result": {
            "name": "_handle_result",
            "location": 153,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "case_name": [
                    "str",
                    "None",
                    "int"
                ],
                "result": [
                    "str",
                    "int"
                ]
            }
        },
        "UnitTestChecker._handle_test_case": {
            "name": "_handle_test_case",
            "location": 171,
            "return": [
                "bool",
                "int"
            ],
            "arguments": {
                "self": [],
                "case": [
                    "str",
                    "typing.Sequence['cirq.Qid']",
                    "int",
                    "dict[str, typing.Any]"
                ]
            }
        }
    },
    "lms-master/lms/lmstests/public/unittests/tasks.py": {
        "run_tests_for_solution": {
            "name": "run_tests_for_solution",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "solution_id": [
                    "str",
                    "None"
                ],
                "executor_name": [
                    "None",
                    "str",
                    "int"
                ]
            }
        }
    },
    "lms-master/lms/lmstests/public/unittests/__init__.py": {},
    "lms-master/lms/lmstests/sandbox/__init__.py": {},
    "lms-master/lms/lmstests/sandbox/config/celery.py": {},
    "lms-master/lms/lmstests/sandbox/config/__init__.py": {},
    "lms-master/lms/lmstests/sandbox/linters/base.py": {
        "BaseLinter.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "logger": [
                    "str",
                    "None"
                ],
                "code": [
                    "str",
                    "int",
                    "list[]",
                    "dict[str, typing.Any]",
                    "None"
                ],
                "file_suffix": [
                    "str",
                    "bytes",
                    "typing.TextIO",
                    "typing.BinaryIO",
                    "None"
                ],
                "solution_file_id": [
                    "str",
                    "dict[, ]",
                    "bool",
                    "dict[str, typing.Union[int,typing.Any,bool]]",
                    "float",
                    "None"
                ]
            }
        },
        "BaseLinter._get_errors_from_solution": {
            "name": "_get_errors_from_solution",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseLinter.match_to_file_suffix": {
            "name": "match_to_file_suffix",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "file_suffix": [
                    "typing.IO",
                    "list[str]",
                    "bool"
                ]
            }
        },
        "BaseLinter.initialize": {
            "name": "initialize",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseLinter.get_match_linter": {
            "name": "get_match_linter",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [],
                "logger": [
                    "str",
                    "typing.Any",
                    "None",
                    "typing.TextIO",
                    "int",
                    "dict[str, typing.Any]"
                ],
                "code": [
                    "str",
                    "typing.Any",
                    "None",
                    "typing.TextIO",
                    "int",
                    "dict[str, typing.Any]"
                ],
                "file_suffix": [
                    "str",
                    "dict[str, typing.Any]",
                    "dict[str, str]",
                    "dict[, ]"
                ],
                "solution_file_id": [
                    "str",
                    "typing.Any",
                    "None",
                    "typing.TextIO",
                    "int",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "BaseLinter.get_error_text": {
            "name": "get_error_text",
            "location": 62,
            "return": [],
            "arguments": {
                "self": [],
                "error": [
                    "typing.Type",
                    "str",
                    "typing.Callable[str, bool]",
                    "bool",
                    "dict[str, typing.Union[str,None]]"
                ]
            }
        },
        "BaseLinter._get_run_errors": {
            "name": "_get_run_errors",
            "location": 65,
            "return": [
                "list[LinterError]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseLinter.run_check": {
            "name": "run_check",
            "location": 82,
            "return": [
                "list[LinterError]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "lms-master/lms/lmstests/sandbox/linters/defines.py": {},
    "lms-master/lms/lmstests/sandbox/linters/python.py": {
        "PythonLinter.initialize": {
            "name": "initialize",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PythonLinter.app": {
            "name": "app",
            "location": 16,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PythonLinter.get_error_text": {
            "name": "get_error_text",
            "location": 19,
            "return": [],
            "arguments": {
                "self": [],
                "error": [
                    "str",
                    "dict[str, typing.Any]",
                    "typing.Type"
                ]
            }
        },
        "PythonLinter.match_to_file_suffix": {
            "name": "match_to_file_suffix",
            "location": 24,
            "return": [
                "bool"
            ],
            "arguments": {
                "file_suffix": []
            }
        },
        "PythonLinter._get_errors_from_solution": {
            "name": "_get_errors_from_solution",
            "location": 27,
            "return": [
                "typing.Generator[LinterError]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "lms-master/lms/lmstests/sandbox/linters/sql.py": {
        "SQLLinter.initialize": {
            "name": "initialize",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SQLLinter.app": {
            "name": "app",
            "location": 18,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SQLLinter.get_error_text": {
            "name": "get_error_text",
            "location": 21,
            "return": [],
            "arguments": {
                "self": [],
                "error": [
                    "str",
                    "typing.Mapping",
                    "dict[str, object]"
                ]
            }
        },
        "SQLLinter.match_to_file_suffix": {
            "name": "match_to_file_suffix",
            "location": 25,
            "return": [
                "bool"
            ],
            "arguments": {
                "file_suffix": []
            }
        },
        "SQLLinter._get_errors_from_solution": {
            "name": "_get_errors_from_solution",
            "location": 28,
            "return": [
                "typing.Generator[LinterError]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "lms-master/lms/lmstests/sandbox/linters/tasks.py": {
        "run_linters_in_sandbox": {
            "name": "run_linters_in_sandbox",
            "location": 14,
            "return": [
                "list[]"
            ],
            "arguments": {
                "solution_file_id": [
                    "str"
                ],
                "code": [
                    "str",
                    "bool"
                ],
                "file_suffix": [
                    "str",
                    "bool"
                ]
            }
        }
    },
    "lms-master/lms/lmstests/sandbox/linters/vnu.py": {
        "VNULinter.get_error_text": {
            "name": "get_error_text",
            "location": 19,
            "return": [],
            "arguments": {
                "self": [],
                "error": [
                    "str",
                    "typing.Mapping",
                    "dict[str, object]"
                ]
            }
        },
        "VNULinter.match_to_file_suffix": {
            "name": "match_to_file_suffix",
            "location": 23,
            "return": [
                "bool"
            ],
            "arguments": {
                "file_suffix": [
                    "str"
                ]
            }
        },
        "VNULinter._get_errors_from_solution": {
            "name": "_get_errors_from_solution",
            "location": 26,
            "return": [
                "typing.Generator[LinterError]"
            ],
            "arguments": {
                "self": []
            }
        },
        "VNULinter._execute_vnu_command": {
            "name": "_execute_vnu_command",
            "location": 57,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "VNULinter._build_args": {
            "name": "_build_args",
            "location": 71,
            "return": [
                "list[typing.Union[typing.Text,list[str],typing.Sequence[typing.Any]]]"
            ],
            "arguments": {
                "self": [],
                "temp_file_path": [
                    "list[str]",
                    "str",
                    "typing.Sequence[typing.Any]"
                ]
            }
        }
    },
    "lms-master/lms/lmstests/sandbox/linters/__init__.py": {},
    "lms-master/lms/lmsweb/admin.py": {
        "managers_only": {
            "name": "managers_only",
            "location": 12,
            "return": [],
            "arguments": {
                "func": [
                    "typing.Callable[, ]"
                ]
            }
        },
        "managers_only.wrapper": {
            "name": "wrapper",
            "location": 15,
            "return": [],
            "arguments": {}
        },
        "AccessibleByAdminMixin.is_accessible": {
            "name": "is_accessible",
            "location": 25,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "lms-master/lms/lmsweb/git_service.py": {
        "GitService.__init__": {
            "name": "__init__",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "user": [
                    "int",
                    "str",
                    "tuple[typing.Union[int,int]]",
                    "dict[str, str]"
                ],
                "exercise_number": [
                    "int",
                    "str",
                    "tuple[typing.Union[int,int]]",
                    "dict[str, str]"
                ],
                "course_id": [
                    "dict[str, _]",
                    "str",
                    "dict[_, _]",
                    "int",
                    "dict[, ]"
                ],
                "request": [
                    "int",
                    "str",
                    "tuple[typing.Union[int,int]]",
                    "dict[str, str]"
                ],
                "base_repository_folder": [
                    "str",
                    "bool",
                    "dict[str, typing.Any]",
                    "None"
                ]
            }
        },
        "GitService.project_name": {
            "name": "project_name",
            "location": 48,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "GitService.repository_folder": {
            "name": "repository_folder",
            "location": 52,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GitService.handle_operation": {
            "name": "handle_operation",
            "location": 55,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GitService._execute_command": {
            "name": "_execute_command",
            "location": 84,
            "return": [],
            "arguments": {
                "self": [],
                "args": [],
                "cwd": [
                    "tuple[]",
                    "None",
                    "str",
                    "list[str]"
                ],
                "proc_input": [
                    "None",
                    "int",
                    "list[list[int]]",
                    "dict[, ]"
                ]
            }
        },
        "GitService._execute_git_operation": {
            "name": "_execute_git_operation",
            "location": 107,
            "return": [],
            "arguments": {
                "self": [],
                "git_operation": [
                    "bytes",
                    "bool",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "GitService._initialize_bare_repository": {
            "name": "_initialize_bare_repository",
            "location": 114,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GitService.build_response": {
            "name": "build_response",
            "location": 122,
            "return": [],
            "arguments": {
                "data_out": [
                    "dict[, ]",
                    "str",
                    "dict[str, typing.Any]",
                    "bytes",
                    "None"
                ],
                "git_operation": [
                    "int",
                    "str",
                    "list[list[str]]",
                    "bytes",
                    "dict[, ]",
                    "None"
                ]
            }
        },
        "GitService._extract_git_operation": {
            "name": "_extract_git_operation",
            "location": 132,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GitService._build_refs_operation": {
            "name": "_build_refs_operation",
            "location": 149,
            "return": [
                "_GitOperation"
            ],
            "arguments": {
                "self": []
            }
        },
        "GitService._build_receive_operation": {
            "name": "_build_receive_operation",
            "location": 177,
            "return": [
                "_GitOperation"
            ],
            "arguments": {
                "self": []
            }
        },
        "GitService._build_upload_operation": {
            "name": "_build_upload_operation",
            "location": 190,
            "return": [
                "_GitOperation"
            ],
            "arguments": {
                "self": []
            }
        },
        "GitService._load_files_from_repository": {
            "name": "_load_files_from_repository",
            "location": 203,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "GitService._load_file": {
            "name": "_load_file",
            "location": 225,
            "return": [],
            "arguments": {
                "file_name": [
                    "str",
                    "bytes"
                ],
                "root": [
                    "str",
                    "bytes"
                ],
                "tempdir": [
                    "str",
                    "bool",
                    "bytes"
                ]
            }
        },
        "GitService._build_refs_operation.format_response_callback": {
            "name": "format_response_callback",
            "location": 155,
            "return": [],
            "arguments": {
                "response_bytes": []
            }
        }
    },
    "lms-master/lms/lmsweb/manifest.py": {},
    "lms-master/lms/lmsweb/redirections.py": {
        "is_safe_url": {
            "name": "is_safe_url",
            "location": 24,
            "return": [
                "bool"
            ],
            "arguments": {
                "target": [
                    "dict[str, typing.Any]",
                    "str"
                ]
            }
        },
        "get_next_url": {
            "name": "get_next_url",
            "location": 33,
            "return": [],
            "arguments": {
                "url_next_param": [
                    "str",
                    "list[str]",
                    "bytes",
                    "typing.Container",
                    "tuple[str]"
                ]
            }
        }
    },
    "lms-master/lms/lmsweb/routes.py": {},
    "lms-master/lms/lmsweb/views.py": {
        "get_locale": {
            "name": "get_locale",
            "location": 59,
            "return": [
                "typing.Text"
            ],
            "arguments": {}
        },
        "_db_connect": {
            "name": "_db_connect",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "after_request": {
            "name": "after_request",
            "location": 71,
            "return": [
                "dict[, ]",
                "dict[str, typing.Any]",
                "typing.MutableMapping",
                "None"
            ],
            "arguments": {
                "response": [
                    "dict[, ]",
                    "dict[str, typing.Any]",
                    "typing.MutableMapping",
                    "None"
                ]
            }
        },
        "_db_close": {
            "name": "_db_close",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "exc": []
            }
        },
        "load_user": {
            "name": "load_user",
            "location": 84,
            "return": [],
            "arguments": {
                "uuid": [
                    "str",
                    "int"
                ]
            }
        },
        "ratelimit_handler": {
            "name": "ratelimit_handler",
            "location": 89,
            "return": [],
            "arguments": {
                "e": [
                    "int",
                    "Exception"
                ]
            }
        },
        "login": {
            "name": "login",
            "location": 101,
            "return": [],
            "arguments": {
                "login_message": [
                    "None",
                    "str",
                    "bytes",
                    "typing.Mapping"
                ]
            }
        },
        "signup": {
            "name": "signup",
            "location": 127,
            "return": [],
            "arguments": {}
        },
        "confirm_email": {
            "name": "confirm_email",
            "location": 153,
            "return": [],
            "arguments": {
                "user_id": [
                    "str",
                    "int"
                ],
                "token": [
                    "typing.Callable[[], bool]",
                    "str",
                    "dict[, ]",
                    "list[str]"
                ]
            }
        },
        "change_password": {
            "name": "change_password",
            "location": 196,
            "return": [],
            "arguments": {}
        },
        "reset_password": {
            "name": "reset_password",
            "location": 216,
            "return": [],
            "arguments": {}
        },
        "recover_password": {
            "name": "recover_password",
            "location": 233,
            "return": [],
            "arguments": {
                "user_id": [
                    "str",
                    "int"
                ],
                "token": [
                    "str",
                    "int",
                    "list[dict[, ]]"
                ]
            }
        },
        "recover_password_check": {
            "name": "recover_password_check",
            "location": 256,
            "return": [],
            "arguments": {
                "user": [],
                "token": [
                    "str",
                    "int",
                    "None"
                ]
            }
        },
        "logout": {
            "name": "logout",
            "location": 273,
            "return": [],
            "arguments": {}
        },
        "favicon": {
            "name": "favicon",
            "location": 279,
            "return": [],
            "arguments": {}
        },
        "manifest": {
            "name": "manifest",
            "location": 288,
            "return": [],
            "arguments": {}
        },
        "service_worker": {
            "name": "service_worker",
            "location": 293,
            "return": [],
            "arguments": {}
        },
        "banned_page": {
            "name": "banned_page",
            "location": 302,
            "return": [],
            "arguments": {}
        },
        "try_or_fail": {
            "name": "try_or_fail",
            "location": 307,
            "return": [],
            "arguments": {
                "callback": [
                    "typing.Callable[, ]",
                    "str",
                    "tuple[]",
                    "list[str]",
                    "bool"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 318,
            "return": [],
            "arguments": {}
        },
        "overview_status": {
            "name": "overview_status",
            "location": 323,
            "return": [],
            "arguments": {}
        },
        "status": {
            "name": "status",
            "location": 333,
            "return": [],
            "arguments": {
                "course_id": [
                    "str",
                    "None",
                    "int"
                ]
            }
        },
        "change_last_course_viewed": {
            "name": "change_last_course_viewed",
            "location": 342,
            "return": [],
            "arguments": {
                "course_id": [
                    "int",
                    "str"
                ]
            }
        },
        "exercises_page": {
            "name": "exercises_page",
            "location": 356,
            "return": [],
            "arguments": {}
        },
        "get_notifications": {
            "name": "get_notifications",
            "location": 370,
            "return": [],
            "arguments": {}
        },
        "read_all_notification": {
            "name": "read_all_notification",
            "location": 376,
            "return": [],
            "arguments": {}
        },
        "share": {
            "name": "share",
            "location": 383,
            "return": [],
            "arguments": {}
        },
        "note": {
            "name": "note",
            "location": 410,
            "return": [],
            "arguments": {
                "user_id": [
                    "str",
                    "None"
                ]
            }
        },
        "comment": {
            "name": "comment",
            "location": 444,
            "return": [],
            "arguments": {}
        },
        "send": {
            "name": "send",
            "location": 491,
            "return": [],
            "arguments": {
                "course_id": [
                    "str",
                    "int",
                    "None"
                ],
                "_exercise_number": [
                    "int",
                    "str",
                    "float",
                    "None",
                    "list[]",
                    "bytes"
                ]
            }
        },
        "user": {
            "name": "user",
            "location": 499,
            "return": [],
            "arguments": {
                "user_id": [
                    "int",
                    "str"
                ]
            }
        },
        "public_courses": {
            "name": "public_courses",
            "location": 522,
            "return": [],
            "arguments": {}
        },
        "join_public_course": {
            "name": "join_public_course",
            "location": 531,
            "return": [],
            "arguments": {
                "course_id": [
                    "int",
                    "str"
                ]
            }
        },
        "send_": {
            "name": "send_",
            "location": 549,
            "return": [],
            "arguments": {
                "course_id": [
                    "str",
                    "int",
                    "None"
                ]
            }
        },
        "upload_page": {
            "name": "upload_page",
            "location": 557,
            "return": [],
            "arguments": {
                "course_id": [
                    "str",
                    "list[str]",
                    "int"
                ]
            }
        },
        "download": {
            "name": "download",
            "location": 588,
            "return": [],
            "arguments": {
                "download_id": [
                    "str",
                    "int"
                ]
            }
        },
        "git_handler": {
            "name": "git_handler",
            "location": 614,
            "return": [],
            "arguments": {
                "course_id": [
                    "str",
                    "int"
                ],
                "exercise_number": [
                    "str",
                    "int"
                ]
            }
        },
        "view": {
            "name": "view",
            "location": 628,
            "return": [],
            "arguments": {
                "solution_id": [
                    "str",
                    "int",
                    "None"
                ],
                "file_id": [
                    "None",
                    "str",
                    "dict[str, typing.Union[int,typing.Any,bool]]",
                    "int"
                ],
                "shared_url": [
                    "typing.Text"
                ]
            }
        },
        "shared_solution": {
            "name": "shared_solution",
            "location": 667,
            "return": [],
            "arguments": {
                "shared_url": [
                    "int",
                    "str",
                    "typing.Mapping"
                ],
                "file_id": [
                    "None",
                    "str",
                    "int"
                ]
            }
        },
        "assessment": {
            "name": "assessment",
            "location": 687,
            "return": [],
            "arguments": {
                "solution_id": [
                    "int",
                    "str",
                    "list[str]"
                ]
            }
        },
        "done_checking": {
            "name": "done_checking",
            "location": 696,
            "return": [],
            "arguments": {
                "exercise_id": [
                    "str",
                    "int"
                ],
                "solution_id": [
                    "str"
                ]
            }
        },
        "start_checking": {
            "name": "start_checking",
            "location": 706,
            "return": [],
            "arguments": {
                "exercise_id": [
                    "str",
                    "int"
                ]
            }
        },
        "common_comments": {
            "name": "common_comments",
            "location": 717,
            "return": [],
            "arguments": {
                "exercise_id": [
                    "None",
                    "str"
                ]
            }
        },
        "_jinja2_filter_datetime": {
            "name": "_jinja2_filter_datetime",
            "location": 722,
            "return": [
                "str"
            ],
            "arguments": {
                "date": [
                    "str",
                    "int",
                    "typing.Callable[str, int]"
                ]
            }
        },
        "_jinja2_filter_path_to_language_name": {
            "name": "_jinja2_filter_path_to_language_name",
            "location": 730,
            "return": [],
            "arguments": {
                "filename": [
                    "str"
                ]
            }
        },
        "_jinja2_inject_direction": {
            "name": "_jinja2_inject_direction",
            "location": 736,
            "return": [
                "dict[typing.Text, ]"
            ],
            "arguments": {}
        },
        "_jinja2_filter_path_to_mime_type": {
            "name": "_jinja2_filter_path_to_mime_type",
            "location": 741,
            "return": [],
            "arguments": {
                "filename": [
                    "str",
                    "typing.Pattern",
                    "list[str]",
                    "list[tuple[typing.Union[int,int]]]"
                ]
            }
        }
    },
    "lms-master/lms/lmsweb/__init__.py": {
        "get_password": {
            "name": "get_password",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "username": [
                    "str",
                    "list[str]",
                    "None",
                    "int"
                ]
            }
        },
        "verify_password": {
            "name": "verify_password",
            "location": 68,
            "return": [
                "bool"
            ],
            "arguments": {
                "username": [
                    "str",
                    "list[str]",
                    "None",
                    "bool"
                ],
                "client_password": [
                    "str",
                    "None"
                ]
            }
        }
    },
    "lms-master/lms/lmsweb/forms/change_password.py": {
        "ChangePasswordForm.__init__": {
            "name": "__init__",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "user": [
                    "bool",
                    "str",
                    "None",
                    "bytes"
                ]
            }
        },
        "ChangePasswordForm.validate_current_password": {
            "name": "validate_current_password",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "field": [
                    "str",
                    "bool"
                ]
            }
        }
    },
    "lms-master/lms/lmsweb/forms/register.py": {},
    "lms-master/lms/lmsweb/forms/reset_password.py": {},
    "lms-master/lms/lmsweb/tools/validators.py": {
        "UniqueUsernameRequired": {
            "name": "UniqueUsernameRequired",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "_form": [
                    "bool",
                    "str"
                ],
                "field": [
                    "str"
                ]
            }
        },
        "UniqueEmailRequired": {
            "name": "UniqueEmailRequired",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "_form": [
                    "bool",
                    "str"
                ],
                "field": [
                    "str"
                ]
            }
        },
        "EmailNotExists": {
            "name": "EmailNotExists",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "_form": [
                    "str",
                    "dict[, ]"
                ],
                "field": [
                    "str",
                    "int",
                    "None",
                    "dict[, ]"
                ]
            }
        }
    },
    "lms-master/lms/lmsweb/tools/__init__.py": {},
    "lms-master/lms/models/comments.py": {
        "_create_comment": {
            "name": "_create_comment",
            "location": 17,
            "return": [],
            "arguments": {
                "user": [
                    "str",
                    "None",
                    "typing.Any",
                    "typing.TextIO",
                    "int"
                ],
                "file": [
                    "str",
                    "bytes",
                    "int"
                ],
                "kind": [
                    "str",
                    "int",
                    "float"
                ],
                "line_number": [
                    "int"
                ],
                "comment_text": [
                    "None",
                    "str",
                    "typing.Callable[, ]"
                ],
                "comment_id": [
                    "None",
                    "int",
                    "str"
                ]
            }
        },
        "delete": {
            "name": "delete",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "create": {
            "name": "create",
            "location": 69,
            "return": [],
            "arguments": {
                "file": [
                    "str",
                    "int"
                ],
                "user": [
                    "str",
                    "int"
                ]
            }
        },
        "_common_comments": {
            "name": "_common_comments",
            "location": 90,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "exercise_id": [
                    "None",
                    "str",
                    "dict[str, str]",
                    "bytes"
                ],
                "user_id": [
                    "None",
                    "int",
                    "str",
                    "list[int]"
                ]
            }
        }
    },
    "lms-master/lms/models/errors.py": {
        "fail": {
            "name": "fail",
            "location": 48,
            "return": [],
            "arguments": {
                "status_code": [
                    "int"
                ],
                "error_msg": [
                    "str",
                    "tuple[typing.Union[int,int]]",
                    "dict[, ]",
                    "None"
                ]
            }
        }
    },
    "lms-master/lms/models/notes.py": {
        "delete": {
            "name": "delete",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "note_id": [
                    "int",
                    "str",
                    "list[tuple[typing.Union[str,typing.Any]]]"
                ]
            }
        },
        "create": {
            "name": "create",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "user": [
                    "int",
                    "typing.Sequence[int]"
                ],
                "note_text": [
                    "str",
                    "int",
                    "typing.Sequence[]",
                    "typing.Mapping"
                ],
                "note_exercise": [
                    "int",
                    "typing.Sequence[int]"
                ],
                "privacy": []
            }
        }
    },
    "lms-master/lms/models/notifications.py": {
        "get": {
            "name": "get",
            "location": 14,
            "return": [],
            "arguments": {
                "user": [
                    "int"
                ]
            }
        },
        "read": {
            "name": "read",
            "location": 18,
            "return": [
                "bool"
            ],
            "arguments": {
                "user": [
                    "None",
                    "str",
                    "float",
                    "dict[str, str]"
                ],
                "id_": [
                    "None",
                    "str",
                    "int"
                ]
            }
        },
        "read_related": {
            "name": "read_related",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "related_id": [
                    "int",
                    "tuple[typing.Union[int,int]]",
                    "None",
                    "str"
                ],
                "user": [
                    "int",
                    "tuple[typing.Union[int,int]]",
                    "None",
                    "str"
                ]
            }
        },
        "send": {
            "name": "send",
            "location": 41,
            "return": [],
            "arguments": {
                "user": [
                    "str",
                    "None",
                    "int",
                    "bytes"
                ],
                "kind": [
                    "str",
                    "None",
                    "int",
                    "bytes"
                ],
                "message": [
                    "str",
                    "None",
                    "int",
                    "bytes"
                ],
                "related_id": [
                    "None",
                    "str",
                    "int",
                    "bytes"
                ],
                "action_url": [
                    "None",
                    "str",
                    "int",
                    "bytes"
                ]
            }
        }
    },
    "lms-master/lms/models/share_link.py": {
        "get_or_create": {
            "name": "get_or_create",
            "location": 9,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "solution_id": [
                    "str",
                    "int"
                ]
            }
        },
        "new_visit": {
            "name": "new_visit",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "shared_solution": [
                    "int",
                    "str"
                ]
            }
        }
    },
    "lms-master/lms/models/solutions.py": {
        "notify_comment_after_check": {
            "name": "notify_comment_after_check",
            "location": 22,
            "return": [
                "bool"
            ],
            "arguments": {
                "user": [
                    "dict[str, typing.Any]",
                    "int"
                ],
                "solution": [
                    "dict[str, typing.Any]",
                    "str",
                    "int"
                ]
            }
        },
        "is_last_to_reply": {
            "name": "is_last_to_reply",
            "location": 38,
            "return": [
                "bool"
            ],
            "arguments": {
                "user": [
                    "bytes",
                    "dict[str, typing.Any]",
                    "None",
                    "str",
                    "typing.TextIO"
                ],
                "solution": [
                    "bytes",
                    "dict[str, typing.Any]",
                    "None",
                    "str",
                    "typing.TextIO"
                ]
            }
        },
        "get_message_and_addressee": {
            "name": "get_message_and_addressee",
            "location": 48,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "user": [
                    "int"
                ],
                "solution": [
                    "str",
                    "float",
                    "int"
                ]
            }
        },
        "change_assessment": {
            "name": "change_assessment",
            "location": 68,
            "return": [],
            "arguments": {
                "solution_id": [
                    "int",
                    "list[int]"
                ],
                "assessment_id": [
                    "None",
                    "str",
                    "int"
                ]
            }
        },
        "mark_as_checked": {
            "name": "mark_as_checked",
            "location": 75,
            "return": [],
            "arguments": {
                "solution_id": [
                    "int",
                    "str"
                ],
                "checker_id": [
                    "str",
                    "int",
                    "dict[str, int]"
                ]
            }
        },
        "get_next_unchecked": {
            "name": "get_next_unchecked",
            "location": 96,
            "return": [],
            "arguments": {
                "exercise_id": [
                    "int"
                ]
            }
        },
        "start_checking": {
            "name": "start_checking",
            "location": 102,
            "return": [
                "bool"
            ],
            "arguments": {
                "solution": []
            }
        },
        "get_view_parameters": {
            "name": "get_view_parameters",
            "location": 112,
            "return": [
                "dict[typing.Text, typing.Union[str,dict[str, str],typing.Pattern,None,bool,tuple[typing.Union[str,int]],list[tuple[typing.Union[str,typing.Any]]]]]",
                "dict[typing.Text, dict[typing.Text, typing.Union[str,dict[str, str],typing.Pattern,None,bool,tuple[typing.Union[str,int]],list[tuple[typing.Union[str,typing.Any]]]]]]"
            ],
            "arguments": {
                "solution": [],
                "file_id": [
                    "str",
                    "None",
                    "bool"
                ],
                "shared_url": [
                    "bool",
                    "tuple[typing.Union[str,int]]",
                    "list[tuple[typing.Union[str,typing.Any]]]"
                ],
                "is_manager": [
                    "bool",
                    "tuple[typing.Union[str,int]]",
                    "list[tuple[typing.Union[str,typing.Any]]]"
                ],
                "solution_files": [
                    "bytes",
                    "str"
                ],
                "viewer_is_solver": [
                    "bool",
                    "list[str]",
                    "str"
                ]
            }
        },
        "get_download_data": {
            "name": "get_download_data",
            "location": 154,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "download_id": [
                    "str",
                    "int"
                ]
            }
        },
        "create_zip_from_solution": {
            "name": "create_zip_from_solution",
            "location": 180,
            "return": [],
            "arguments": {
                "files": [
                    "list[str]",
                    "list[typing.Callable[, ]]"
                ]
            }
        },
        "order_files": {
            "name": "order_files",
            "location": 192,
            "return": [
                "tuple[bool]"
            ],
            "arguments": {
                "file": [
                    "str"
                ]
            }
        },
        "get_files_tree": {
            "name": "get_files_tree",
            "location": 199,
            "return": [
                "list[dict[typing.Text, ]]"
            ],
            "arguments": {
                "files": [
                    "str",
                    "frozenset"
                ]
            }
        }
    },
    "lms-master/lms/models/upload.py": {
        "_is_uploaded_before": {
            "name": "_is_uploaded_before",
            "location": 15,
            "return": [],
            "arguments": {
                "user": [
                    "str",
                    "list[str]",
                    "None"
                ],
                "exercise": [
                    "str",
                    "list[str]",
                    "None"
                ],
                "file_hash": [
                    "str",
                    "list[str]",
                    "None"
                ]
            }
        },
        "_upload_to_db": {
            "name": "_upload_to_db",
            "location": 25,
            "return": [],
            "arguments": {
                "exercise_number": [
                    "str",
                    "None",
                    "bool"
                ],
                "course_id": [
                    "str",
                    "None",
                    "dict[str, str]",
                    "list[int]",
                    "int"
                ],
                "user_id": [
                    "str",
                    "int"
                ],
                "files": [
                    "str",
                    "list[str]",
                    "typing.IO",
                    "typing.Callable[str, bool]"
                ],
                "solution_hash": [
                    "None",
                    "float",
                    "str",
                    "int",
                    "typing.Callable[, ]",
                    "typing.IO"
                ]
            }
        },
        "_run_auto_checks": {
            "name": "_run_auto_checks",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "solution": []
            }
        },
        "new": {
            "name": "new",
            "location": 67,
            "return": [
                "tuple[list[]]"
            ],
            "arguments": {
                "user_id": [
                    "str",
                    "None",
                    "bytes",
                    "int",
                    "set[int]"
                ],
                "course_id": [
                    "str",
                    "None",
                    "bytes",
                    "int",
                    "set[int]"
                ],
                "file": [
                    "str",
                    "int",
                    "tuple[int]",
                    "list[str]"
                ]
            }
        },
        "upload_solution": {
            "name": "upload_solution",
            "location": 95,
            "return": [
                "None"
            ],
            "arguments": {
                "course_id": [
                    "int",
                    "str",
                    "None"
                ],
                "exercise_number": [
                    "int",
                    "str",
                    "None"
                ],
                "files": [
                    "int",
                    "str",
                    "None"
                ],
                "solution_hash": [
                    "int",
                    "str",
                    "None"
                ],
                "user_id": [
                    "int",
                    "str",
                    "None"
                ]
            }
        }
    },
    "lms-master/lms/models/users.py": {
        "retrieve_salt": {
            "name": "retrieve_salt",
            "location": 18,
            "return": [],
            "arguments": {
                "user": [
                    "str"
                ]
            }
        },
        "auth": {
            "name": "auth",
            "location": 26,
            "return": [],
            "arguments": {
                "username": [
                    "str",
                    "typing.Sequence[int]"
                ],
                "password": [
                    "str",
                    "None"
                ]
            }
        },
        "generate_user_token": {
            "name": "generate_user_token",
            "location": 40,
            "return": [],
            "arguments": {
                "user": [
                    "list[str]",
                    "int",
                    "typing.Mapping",
                    "list[A]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "join_public_course": {
            "name": "join_public_course",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "course": [
                    "str",
                    "typing.Iterable[str]"
                ],
                "user": [
                    "str",
                    "bool"
                ]
            }
        }
    },
    "lms-master/lms/models/__init__.py": {},
    "lms-master/lms/utils/colors.py": {
        "get_hex_color": {
            "name": "get_hex_color",
            "location": 10,
            "return": [],
            "arguments": {
                "number": []
            }
        }
    },
    "lms-master/lms/utils/config_migrator.py": {
        "extract_assignment": {
            "name": "extract_assignment",
            "location": 9,
            "return": [],
            "arguments": {
                "assignment": []
            }
        },
        "get_config_assignments": {
            "name": "get_config_assignments",
            "location": 17,
            "return": [],
            "arguments": {
                "config": []
            }
        },
        "get_missing_config": {
            "name": "get_missing_config",
            "location": 27,
            "return": [],
            "arguments": {
                "file": [],
                "lines": []
            }
        },
        "migrate": {
            "name": "migrate",
            "location": 33,
            "return": [],
            "arguments": {
                "config": [],
                "template_config": []
            }
        }
    },
    "lms-master/lms/utils/consts.py": {},
    "lms-master/lms/utils/courses.py": {
        "generate_invite_code": {
            "name": "generate_invite_code",
            "location": 5,
            "return": [
                "str"
            ],
            "arguments": {
                "length": [
                    "int"
                ]
            }
        }
    },
    "lms-master/lms/utils/debug.py": {
        "is_enabled": {
            "name": "is_enabled",
            "location": 5,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "start": {
            "name": "start",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "lms-master/lms/utils/files.py": {
        "get_language_name_by_extension": {
            "name": "get_language_name_by_extension",
            "location": 28,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "ext": [
                    "dict[, ]",
                    "dict[str, str]",
                    "str",
                    "list[str]"
                ]
            }
        },
        "get_mime_type_by_extention": {
            "name": "get_mime_type_by_extention",
            "location": 32,
            "return": [],
            "arguments": {
                "ext": [
                    "int",
                    "str",
                    "dict[, ]",
                    "typing.Type",
                    "None"
                ]
            }
        }
    },
    "lms-master/lms/utils/hashing.py": {
        "by_content": {
            "name": "by_content",
            "location": 7,
            "return": [],
            "arguments": {
                "file_content": []
            }
        },
        "by_file": {
            "name": "by_file",
            "location": 18,
            "return": [],
            "arguments": {
                "file": []
            }
        }
    },
    "lms-master/lms/utils/log.py": {},
    "lms-master/lms/utils/mail.py": {
        "send_message": {
            "name": "send_message",
            "location": 12,
            "return": [],
            "arguments": {
                "func": [
                    "typing.Callable[, ]"
                ]
            }
        },
        "send_confirmation_mail": {
            "name": "send_confirmation_mail",
            "location": 23,
            "return": [
                "Message"
            ],
            "arguments": {
                "user": []
            }
        },
        "send_reset_password_mail": {
            "name": "send_reset_password_mail",
            "location": 40,
            "return": [
                "Message"
            ],
            "arguments": {
                "user": [
                    "str"
                ]
            }
        },
        "send_change_password_mail": {
            "name": "send_change_password_mail",
            "location": 57,
            "return": [
                "Message"
            ],
            "arguments": {
                "user": [
                    "dict[, ]",
                    "str",
                    "typing.Callable[, ]"
                ]
            }
        },
        "send_message.wrapper": {
            "name": "wrapper",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "lms-master/lms/utils/__init__.py": {},
    "lms-master/tests/conftest.py": {
        "db_in_memory": {
            "name": "db_in_memory",
            "location": 33,
            "return": [
                "typing.Generator[SqliteDatabase]"
            ],
            "arguments": {}
        },
        "populate_roles": {
            "name": "populate_roles",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "db": {
            "name": "db",
            "location": 53,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "db_in_memory": []
            }
        },
        "client": {
            "name": "client",
            "location": 61,
            "return": [],
            "arguments": {}
        },
        "celery_eager": {
            "name": "celery_eager",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "caplog": {
            "name": "caplog",
            "location": 72,
            "return": [
                "typing.Generator[typing.Union[int,str,typing.Iterable[C]]]"
            ],
            "arguments": {
                "_caplog": [
                    "int",
                    "str",
                    "typing.Iterable[C]"
                ]
            }
        },
        "webapp_configurations": {
            "name": "webapp_configurations",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "disable_mail_sending": {
            "name": "disable_mail_sending",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "enable_registration": {
            "name": "enable_registration",
            "location": 99,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "disable_shareable_solutions": {
            "name": "disable_shareable_solutions",
            "location": 103,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "disable_users_comments": {
            "name": "disable_users_comments",
            "location": 107,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "enable_users_comments": {
            "name": "enable_users_comments",
            "location": 111,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "disable_registration": {
            "name": "disable_registration",
            "location": 115,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "use_limiter": {
            "name": "use_limiter",
            "location": 119,
            "return": [],
            "arguments": {
                "func": [
                    "typing.Iterable[str]",
                    "float",
                    "int"
                ]
            }
        },
        "get_logged_user": {
            "name": "get_logged_user",
            "location": 129,
            "return": [],
            "arguments": {
                "username": [
                    "str",
                    "None",
                    "bool",
                    "typing.Callable[, ]"
                ]
            }
        },
        "logout_user": {
            "name": "logout_user",
            "location": 138,
            "return": [
                "None"
            ],
            "arguments": {
                "client": []
            }
        },
        "signup_client_user": {
            "name": "signup_client_user",
            "location": 142,
            "return": [],
            "arguments": {
                "client": [],
                "email": [
                    "str",
                    "dict[, ]",
                    "None",
                    "int"
                ],
                "username": [
                    "str",
                    "dict[, ]",
                    "None",
                    "int"
                ],
                "fullname": [
                    "str",
                    "dict[, ]",
                    "None",
                    "int"
                ],
                "password": [
                    "str",
                    "dict[, ]",
                    "None",
                    "int"
                ],
                "confirm_password": [
                    "str",
                    "dict[, ]",
                    "None",
                    "int"
                ]
            }
        },
        "login_client_user": {
            "name": "login_client_user",
            "location": 155,
            "return": [],
            "arguments": {
                "client": [],
                "username": [
                    "str"
                ],
                "password": [
                    "str"
                ]
            }
        },
        "change_client_password": {
            "name": "change_client_password",
            "location": 162,
            "return": [],
            "arguments": {
                "client": [],
                "current_password": [
                    "str",
                    "int"
                ],
                "new_password": [
                    "str",
                    "int"
                ],
                "confirm_password": [
                    "str",
                    "int"
                ]
            }
        },
        "reset_client_password": {
            "name": "reset_client_password",
            "location": 173,
            "return": [],
            "arguments": {
                "client": [],
                "email": [
                    "str"
                ]
            }
        },
        "recover_client_password": {
            "name": "recover_client_password",
            "location": 179,
            "return": [],
            "arguments": {
                "client": [],
                "user_id": [
                    "str",
                    "list[str]"
                ],
                "token": [
                    "str",
                    "list[str]"
                ],
                "password": [
                    "str",
                    "list[str]"
                ],
                "confirm_password": [
                    "str",
                    "list[str]"
                ]
            }
        },
        "create_user": {
            "name": "create_user",
            "location": 189,
            "return": [],
            "arguments": {
                "role_name": [],
                "index": [
                    "int"
                ]
            }
        },
        "create_banned_user": {
            "name": "create_banned_user",
            "location": 203,
            "return": [],
            "arguments": {
                "index": [
                    "int"
                ]
            }
        },
        "create_unverified_user": {
            "name": "create_unverified_user",
            "location": 207,
            "return": [],
            "arguments": {
                "index": [
                    "int"
                ]
            }
        },
        "create_student_user": {
            "name": "create_student_user",
            "location": 211,
            "return": [],
            "arguments": {
                "index": [
                    "int"
                ]
            }
        },
        "create_staff_user": {
            "name": "create_staff_user",
            "location": 215,
            "return": [],
            "arguments": {
                "index": [
                    "int"
                ]
            }
        },
        "staff_password": {
            "name": "staff_password",
            "location": 220,
            "return": [
                "typing.Text"
            ],
            "arguments": {}
        },
        "banned_user": {
            "name": "banned_user",
            "location": 225,
            "return": [],
            "arguments": {}
        },
        "staff_user": {
            "name": "staff_user",
            "location": 230,
            "return": [],
            "arguments": {
                "staff_password": [
                    "str",
                    "bool"
                ]
            }
        },
        "unverified_user": {
            "name": "unverified_user",
            "location": 235,
            "return": [],
            "arguments": {}
        },
        "student_user": {
            "name": "student_user",
            "location": 240,
            "return": [],
            "arguments": {}
        },
        "admin_user": {
            "name": "admin_user",
            "location": 245,
            "return": [],
            "arguments": {}
        },
        "captured_templates": {
            "name": "captured_templates",
            "location": 259,
            "return": [
                "typing.Generator[list[]]"
            ],
            "arguments": {}
        },
        "create_notification": {
            "name": "create_notification",
            "location": 272,
            "return": [],
            "arguments": {
                "student_user": [
                    "int",
                    "str",
                    "list[U]"
                ],
                "solution": [
                    "int",
                    "str",
                    "list[U]"
                ],
                "index": [
                    "int"
                ]
            }
        },
        "create_course": {
            "name": "create_course",
            "location": 286,
            "return": [],
            "arguments": {
                "index": [
                    "int"
                ]
            }
        },
        "create_usercourse": {
            "name": "create_usercourse",
            "location": 294,
            "return": [],
            "arguments": {
                "user": [
                    "int",
                    "str",
                    "bytes"
                ],
                "course": [
                    "int",
                    "str",
                    "bytes"
                ]
            }
        },
        "create_exercise": {
            "name": "create_exercise",
            "location": 301,
            "return": [],
            "arguments": {
                "course": [
                    "int",
                    "None",
                    "str"
                ],
                "number": [
                    "int",
                    "None",
                    "str"
                ],
                "index": [
                    "int"
                ],
                "is_archived": [
                    "bool"
                ]
            }
        },
        "create_shared_solution": {
            "name": "create_shared_solution",
            "location": 313,
            "return": [],
            "arguments": {
                "solution": [
                    "dict[int, int]",
                    "float",
                    "str"
                ]
            }
        },
        "create_note": {
            "name": "create_note",
            "location": 317,
            "return": [],
            "arguments": {
                "creator": [
                    "str",
                    "int",
                    "None"
                ],
                "user": [
                    "str",
                    "int",
                    "None"
                ],
                "note_text": [
                    "str",
                    "int"
                ],
                "privacy": [
                    "str",
                    "None"
                ]
            }
        },
        "course": {
            "name": "course",
            "location": 335,
            "return": [],
            "arguments": {}
        },
        "_assessments": {
            "name": "_assessments",
            "location": 340,
            "return": [
                "None"
            ],
            "arguments": {
                "course": [
                    "dict[, ]",
                    "tuple[str]",
                    "dict[str, str]",
                    "typing.Mapping",
                    "str"
                ]
            }
        },
        "exercise": {
            "name": "exercise",
            "location": 357,
            "return": [],
            "arguments": {
                "course": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ]
            }
        },
        "create_solution": {
            "name": "create_solution",
            "location": 361,
            "return": [],
            "arguments": {
                "exercise": [
                    "str",
                    "None",
                    "typing.Callable[, ]",
                    "dict[str, typing.Any]"
                ],
                "student_user": [
                    "str",
                    "None",
                    "typing.Callable[, ]",
                    "dict[str, typing.Any]"
                ],
                "code": [
                    "None",
                    "str",
                    "typing.IO",
                    "dict[str, typing.Any]"
                ],
                "files": [
                    "None",
                    "str",
                    "list[typing.Any]",
                    "typing.Any",
                    "list[str]",
                    "dict[str, typing.Any]"
                ],
                "hash_": [
                    "None",
                    "str",
                    "typing.Callable[, ]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "solution": {
            "name": "solution",
            "location": 383,
            "return": [],
            "arguments": {
                "exercise": [],
                "student_user": []
            }
        },
        "comment": {
            "name": "comment",
            "location": 388,
            "return": [],
            "arguments": {
                "staff_user": [
                    "str"
                ],
                "solution": [
                    "str"
                ]
            }
        },
        "notification": {
            "name": "notification",
            "location": 399,
            "return": [],
            "arguments": {
                "student_user": [],
                "solution": []
            }
        },
        "use_limiter.wrapper": {
            "name": "wrapper",
            "location": 121,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "captured_templates.record": {
            "name": "record",
            "location": 262,
            "return": [
                "None"
            ],
            "arguments": {
                "sender": [],
                "template": [],
                "context": []
            }
        },
        "caplog.PropogateHandler.emit": {
            "name": "emit",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "record": []
            }
        }
    },
    "lms-master/tests/test_auto_solution_solver.py": {
        "TestAutoSolutionSolver.test_solve_solution_with_identical_code": {
            "name": "test_solve_solution_with_identical_code",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "comment": []
            }
        },
        "TestAutoSolutionSolver.test_solve_solution_with_identical_code_not_identical_code": {
            "name": "test_solve_solution_with_identical_code_not_identical_code",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "comment": []
            }
        },
        "TestAutoSolutionSolver.test_check_if_other_solutions_can_be_solved": {
            "name": "test_check_if_other_solutions_can_be_solved",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "comment": [
                    "dict[str, typing.Any]"
                ]
            }
        },
        "TestAutoSolutionSolver.test_check_if_other_solutions_can_be_solved_not_identical_code": {
            "name": "test_check_if_other_solutions_can_be_solved_not_identical_code",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "comment": [
                    "dict[str, typing.Any]"
                ]
            }
        },
        "TestAutoSolutionSolver._duplicate_solution_from_comment": {
            "name": "_duplicate_solution_from_comment",
            "location": 85,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "comment": [
                    "str",
                    "list[str]",
                    "None"
                ],
                "first_solution_code": [
                    "str",
                    "dict[str, typing.Any]",
                    "None"
                ],
                "second_solution_code": [
                    "str",
                    "dict[, ]"
                ]
            }
        },
        "TestAutoSolutionSolver.test_solve_identical_code_expect_exceptions": {
            "name": "test_solve_identical_code_expect_exceptions",
            "location": 105,
            "return": [
                "None"
            ],
            "arguments": {
                "solution": [],
                "caplog": []
            }
        },
        "TestAutoSolutionSolver.test_check_others_can_be_solved_expect_exceptions": {
            "name": "test_check_others_can_be_solved_expect_exceptions",
            "location": 119,
            "return": [
                "None"
            ],
            "arguments": {
                "solution": [],
                "caplog": []
            }
        }
    },
    "lms-master/tests/test_bootstrap.py": {
        "TestBootstrapper.test_has_column_named_true_positive": {
            "name": "test_has_column_named_true_positive",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "db": []
            }
        },
        "TestBootstrapper.test_has_column_named_true_negative": {
            "name": "test_has_column_named_true_negative",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "db": []
            }
        }
    },
    "lms-master/tests/test_config_migrator.py": {
        "TestConfigMigrator.setup": {
            "name": "setup",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "TestConfigMigrator.teardown": {
            "name": "teardown",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "TestConfigMigrator.test_config_migration": {
            "name": "test_config_migration",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "lms-master/tests/test_css_linter.py": {
        "TestCSSLinter.test_invalid_solution": {
            "name": "test_invalid_solution",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "solution": []
            }
        },
        "TestCSSLinter.test_valid_solution": {
            "name": "test_valid_solution",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "solution": []
            }
        }
    },
    "lms-master/tests/test_download_file.py": {
        "TestDownloadSolution.setup": {
            "name": "setup",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDownloadSolution.teardown": {
            "name": "teardown",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDownloadSolution.get_zip_files": {
            "name": "get_zip_files",
            "location": 28,
            "return": [
                "typing.Generator[File]"
            ],
            "arguments": {}
        },
        "TestDownloadSolution.zipfile_file": {
            "name": "zipfile_file",
            "location": 34,
            "return": [
                "typing.IO"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDownloadSolution.create_zipfile_storage": {
            "name": "create_zipfile_storage",
            "location": 37,
            "return": [
                "FileStorage"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDownloadSolution.test_bad_download_id": {
            "name": "test_bad_download_id",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "student_user": [
                    "typing.Callable[List,bool, None]"
                ]
            }
        },
        "TestDownloadSolution.test_download_solution": {
            "name": "test_download_solution",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "exercise": [],
                "student_user": []
            }
        }
    },
    "lms-master/tests/test_exercises.py": {
        "TestExercise.test_due_date": {
            "name": "test_due_date",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "exercise": []
            }
        },
        "TestExercise.test_courses_exercises": {
            "name": "test_courses_exercises",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "course": [
                    "str"
                ],
                "student_user": [
                    "str",
                    "dict[str, typing.Any]",
                    "set[str]"
                ],
                "captured_templates": [
                    "str"
                ]
            }
        }
    },
    "lms-master/tests/test_exercise_unit_tests.py": {
        "TestUTForExercise.test_check_solution_with_exercise_process_stub": {
            "name": "test_check_solution_with_exercise_process_stub",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "solution": []
            }
        },
        "TestUTForExercise.test_check_solution_with_invalid_exercise": {
            "name": "test_check_solution_with_invalid_exercise",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "solution": []
            }
        },
        "TestUTForExercise.test_check_solution_with_exercise_ut_full_docker": {
            "name": "test_check_solution_with_exercise_ut_full_docker",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "solution": []
            }
        },
        "TestUTForExercise._verify_comments": {
            "name": "_verify_comments",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "TestUTForExercise.test_register_two_exercises_with_same_name": {
            "name": "test_register_two_exercises_with_same_name",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "course": []
            }
        },
        "TestUTForExercise._verify_notifications": {
            "name": "_verify_notifications",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {
                "solution": []
            }
        },
        "TestUTForExercise._initialize_solution": {
            "name": "_initialize_solution",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {
                "solution": [],
                "code": [],
                "module_name": []
            }
        },
        "TestUTForExercise._run_unit_tests": {
            "name": "_run_unit_tests",
            "location": 104,
            "return": [
                "None"
            ],
            "arguments": {
                "solution_id": [],
                "executor_name": [
                    "None"
                ]
            }
        }
    },
    "lms-master/tests/test_extractor.py": {
        "TestExtractor.setup": {
            "name": "setup",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestExtractor.teardown": {
            "name": "teardown",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestExtractor.ipynb_file": {
            "name": "ipynb_file",
            "location": 83,
            "return": [
                "typing.IO"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestExtractor.py_files": {
            "name": "py_files",
            "location": 87,
            "return": [
                "typing.Generator[typing.IO]"
            ],
            "arguments": {
                "filenames": []
            }
        },
        "TestExtractor.get_bytes_io_file": {
            "name": "get_bytes_io_file",
            "location": 92,
            "return": [
                "tuple[BytesIO]"
            ],
            "arguments": {
                "file_name": []
            }
        },
        "TestExtractor.zip_files": {
            "name": "zip_files",
            "location": 97,
            "return": [
                "typing.Generator[typing.IO]"
            ],
            "arguments": {
                "filenames": [
                    "list[str]",
                    "list[tuple[typing.Union[str,str,str]]]"
                ]
            }
        },
        "TestExtractor.create_zipfile_storage": {
            "name": "create_zipfile_storage",
            "location": 102,
            "return": [
                "FileStorage"
            ],
            "arguments": {
                "opened_file": [],
                "filename": [
                    "str",
                    "typing.Callable[[], str]",
                    "tuple[str]"
                ]
            }
        },
        "TestExtractor.get_bytes_io_zip_files": {
            "name": "get_bytes_io_zip_files",
            "location": 113,
            "return": [
                "typing.Generator[tuple[BytesIO]]"
            ],
            "arguments": {
                "files": [
                    "str",
                    "typing.IO",
                    "None"
                ],
                "filesnames": [
                    "str",
                    "typing.IO",
                    "None"
                ]
            }
        },
        "TestExtractor.get_zip_filenames": {
            "name": "get_zip_filenames",
            "location": 119,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestExtractor.test_notebook": {
            "name": "test_notebook",
            "location": 123,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestExtractor.test_image": {
            "name": "test_image",
            "location": 135,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestExtractor.test_py": {
            "name": "test_py",
            "location": 145,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestExtractor.test_zip_ignore_files": {
            "name": "test_zip_ignore_files",
            "location": 156,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestExtractor.test_zip": {
            "name": "test_zip",
            "location": 178,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "course": [
                    "str"
                ],
                "student_user": [
                    "bool"
                ]
            }
        },
        "TestExtractor.test_zip_bomb": {
            "name": "test_zip_bomb",
            "location": 204,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "course": [
                    "str"
                ],
                "student_user": [
                    "str",
                    "None"
                ]
            }
        },
        "TestExtractor.test_upload_another_course": {
            "name": "test_upload_another_course",
            "location": 215,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "course": [],
                "student_user": []
            }
        },
        "TestExtractor.test_upload_invalid_exercise": {
            "name": "test_upload_invalid_exercise",
            "location": 230,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "course": [],
                "student_user": []
            }
        },
        "TestExtractor.test_upload_correct_course": {
            "name": "test_upload_correct_course",
            "location": 244,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "course": [],
                "student_user": []
            }
        }
    },
    "lms-master/tests/test_flake8_linter.py": {
        "TestFlake8Linter.setup_class": {
            "name": "setup_class",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": []
            }
        },
        "TestFlake8Linter.teardown_class": {
            "name": "teardown_class",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": []
            }
        },
        "TestFlake8Linter.test_pyflake_wont_execute_code": {
            "name": "test_pyflake_wont_execute_code",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "solution": []
            }
        },
        "TestFlake8Linter.test_invalid_solution": {
            "name": "test_invalid_solution",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "solution": []
            }
        },
        "TestFlake8Linter.test_valid_solution": {
            "name": "test_valid_solution",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "solution": []
            }
        }
    },
    "lms-master/tests/test_flask_limiter.py": {
        "TestLimiter.test_limiter_login_fails": {
            "name": "test_limiter_login_fails",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [],
                "student_user": []
            }
        },
        "TestLimiter.test_limiter_login_refreshes": {
            "name": "test_limiter_login_refreshes",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "client": []
            }
        },
        "TestLimiter.test_limiter_login_success": {
            "name": "test_limiter_login_success",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [],
                "student_user": []
            }
        },
        "TestLimiter.test_limiter_shared_link": {
            "name": "test_limiter_shared_link",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "student_user": [],
                "solution": [
                    "bool"
                ]
            }
        }
    },
    "lms-master/tests/test_generic_linter.py": {
        "TestGenericLinter.test_run_linters_expect_unknown_solution": {
            "name": "test_run_linters_expect_unknown_solution",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "solution": [
                    "dict[str, typing.Any]"
                ],
                "caplog": []
            }
        }
    },
    "lms-master/tests/test_git_solution.py": {
        "TestSendSolutionFromGit.setup_method": {
            "name": "setup_method",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_method": [
                    "str",
                    "dict[, ]",
                    "tuple[]"
                ]
            }
        },
        "TestSendSolutionFromGit.teardown_method": {
            "name": "teardown_method",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_method": [
                    "str",
                    "dict[, ]",
                    "tuple[]"
                ]
            }
        },
        "TestSendSolutionFromGit._get_formatted_git_url": {
            "name": "_get_formatted_git_url",
            "location": 52,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "exercise": [
                    "str"
                ],
                "rel_path": [
                    "str"
                ]
            }
        },
        "TestSendSolutionFromGit._send_git_request": {
            "name": "_send_git_request",
            "location": 55,
            "return": [],
            "arguments": {
                "self": [],
                "username": [
                    "str",
                    "int",
                    "None",
                    "dict[str, str]"
                ],
                "method_name": [
                    "str"
                ],
                "url": [
                    "str"
                ],
                "data": [
                    "None",
                    "str"
                ],
                "service": [
                    "None",
                    "str",
                    "bool"
                ],
                "password": []
            }
        },
        "TestSendSolutionFromGit.test_not_authorized_access": {
            "name": "test_not_authorized_access",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "exercise": [],
                "student_user": []
            }
        },
        "TestSendSolutionFromGit.test_not_existing_user": {
            "name": "test_not_existing_user",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "exercise": []
            }
        },
        "TestSendSolutionFromGit.test_invalid_user_password": {
            "name": "test_invalid_user_password",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "exercise": [
                    "typing.Type"
                ],
                "student_user": [
                    "typing.Type"
                ]
            }
        },
        "TestSendSolutionFromGit.test_push_exercise": {
            "name": "test_push_exercise",
            "location": 97,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "exercise": [],
                "student_user": []
            }
        },
        "TestSendSolutionFromGit.test_get_exercise": {
            "name": "test_get_exercise",
            "location": 120,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "exercise": [],
                "student_user": []
            }
        }
    },
    "lms-master/tests/test_html_escaping.py": {
        "TestHtmlEscaping.test_comment_text_escaping": {
            "name": "test_comment_text_escaping",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "student_user": [
                    "dict[, ]",
                    "str"
                ],
                "solution": []
            }
        }
    },
    "lms-master/tests/test_html_linter.py": {
        "TestHTMLLinter.test_invalid_solution": {
            "name": "test_invalid_solution",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "solution": []
            }
        },
        "TestHTMLLinter.test_valid_solution": {
            "name": "test_valid_solution",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "solution": []
            }
        }
    },
    "lms-master/tests/test_login.py": {
        "TestLogin.test_login_password_fail": {
            "name": "test_login_password_fail",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [],
                "student_user": [
                    "str"
                ]
            }
        },
        "TestLogin.test_login_username_fail": {
            "name": "test_login_username_fail",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [
                    "dict[, ]"
                ]
            }
        },
        "TestLogin.test_login_unverified_user": {
            "name": "test_login_unverified_user",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [],
                "unverified_user": [
                    "str",
                    "list[str]"
                ],
                "captured_templates": [
                    "str"
                ]
            }
        },
        "TestLogin.test_login_success": {
            "name": "test_login_success",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [],
                "student_user": []
            }
        }
    },
    "lms-master/tests/test_notes.py": {
        "TestNotes.test_notes": {
            "name": "test_notes",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "staff_user": [
                    "None"
                ],
                "student_user": [
                    "None"
                ]
            }
        },
        "TestNotes.test_user_notes": {
            "name": "test_user_notes",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {
                "student_user": [
                    "str",
                    "dict[, ]"
                ]
            }
        },
        "TestNotes.test_create_note": {
            "name": "test_create_note",
            "location": 118,
            "return": [
                "None"
            ],
            "arguments": {
                "student_user": [
                    "dict[str, str]",
                    "str"
                ],
                "staff_user": [
                    "bool",
                    "str"
                ],
                "exercise": []
            }
        }
    },
    "lms-master/tests/test_notifications.py": {
        "TestNotification.generate_params": {
            "name": "generate_params",
            "location": 17,
            "return": [
                "dict[typing.Text, str]"
            ],
            "arguments": {
                "cls": [
                    "str"
                ]
            }
        },
        "TestNotification.create_too_many_notifications": {
            "name": "create_too_many_notifications",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "user": [
                    "str",
                    "None",
                    "int"
                ],
                "solut": [
                    "str",
                    "None",
                    "int"
                ]
            }
        },
        "TestNotification.check_full_inbox": {
            "name": "check_full_inbox",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "user": [
                    "str",
                    "int",
                    "dict[str, str]"
                ]
            }
        },
        "TestNotification.check_viewed_inbox": {
            "name": "check_viewed_inbox",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "user": [
                    "dict[str, typing.Any]",
                    "str",
                    "typing.Mapping",
                    "None"
                ]
            }
        },
        "TestNotification.get_unread": {
            "name": "get_unread",
            "location": 43,
            "return": [],
            "arguments": {
                "user": [
                    "dict[str, str]",
                    "None",
                    "dict[, ]"
                ]
            }
        },
        "TestNotification.test_get": {
            "name": "test_get",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "student_user": [
                    "list[dict[str, typing.Any]]"
                ],
                "notification": [
                    "str"
                ],
                "solution": [
                    "collections.abc.Coroutine"
                ]
            }
        },
        "TestNotification.test_read": {
            "name": "test_read",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "student_user": [
                    "str",
                    "list[list[int]]"
                ],
                "solution": [
                    "typing.Sequence[models.characters.character_base.Character]"
                ]
            }
        },
        "TestNotification.test_read_related": {
            "name": "test_read_related",
            "location": 114,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "student_user": [],
                "solution": [],
                "exercise": [
                    "str",
                    "None",
                    "typing.Callable[, ]"
                ]
            }
        },
        "TestNotification.test_send": {
            "name": "test_send",
            "location": 133,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "student_user": []
            }
        },
        "TestNotification.test_auto_deletion": {
            "name": "test_auto_deletion",
            "location": 151,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "student_user": [
                    "str"
                ]
            }
        },
        "TestNotification.test_user_commented_after_check": {
            "name": "test_user_commented_after_check",
            "location": 170,
            "return": [
                "None"
            ],
            "arguments": {
                "solution": [],
                "student_user": [],
                "staff_user": []
            }
        }
    },
    "lms-master/tests/test_registration.py": {
        "TestRegistration.test_invalid_username": {
            "name": "test_invalid_username",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [
                    "dict[str, typing.Any]"
                ],
                "student_user": [
                    "str",
                    "list[str]",
                    "dict[str, typing.Any]"
                ],
                "captured_templates": [
                    "str",
                    "list[str]"
                ]
            }
        },
        "TestRegistration.test_invalid_email": {
            "name": "test_invalid_email",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [],
                "student_user": [
                    "str",
                    "bool"
                ],
                "captured_templates": [
                    "str"
                ]
            }
        },
        "TestRegistration.test_bad_token_or_id": {
            "name": "test_bad_token_or_id",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [
                    "dict[, ]"
                ]
            }
        },
        "TestRegistration.test_use_token_twice": {
            "name": "test_use_token_twice",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "client": []
            }
        },
        "TestRegistration.test_expired_token": {
            "name": "test_expired_token",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [
                    "dict[, ]"
                ]
            }
        },
        "TestRegistration.test_successful_registration": {
            "name": "test_successful_registration",
            "location": 116,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [
                    "dict[, ]"
                ],
                "captured_templates": [
                    "str"
                ]
            }
        },
        "TestRegistration.test_registartion_closed": {
            "name": "test_registartion_closed",
            "location": 136,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [],
                "captured_templates": [
                    "str"
                ]
            }
        },
        "TestRegistration.test_register_public_course": {
            "name": "test_register_public_course",
            "location": 151,
            "return": [
                "None"
            ],
            "arguments": {
                "student_user": [
                    "str",
                    "bool"
                ],
                "course": [],
                "captured_templates": [
                    "str",
                    "list[str]"
                ]
            }
        }
    },
    "lms-master/tests/test_solutions.py": {
        "TestSolutionDb.test_new_solution_override_old_solutions": {
            "name": "test_new_solution_override_old_solutions",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "exercise": [],
                "student_user": []
            }
        },
        "TestSolutionDb.test_next_exercise_with_cleanest_code": {
            "name": "test_next_exercise_with_cleanest_code",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "comment": [
                    "dict[str, typing.Any]"
                ],
                "staff_user": []
            }
        },
        "TestSolutionBridge.test_mark_as_checked": {
            "name": "test_mark_as_checked",
            "location": 126,
            "return": [
                "None"
            ],
            "arguments": {
                "exercise": [],
                "student_user": [],
                "staff_user": [
                    "typing.Callable[, ]"
                ],
                "solution": [],
                "_assessments": []
            }
        },
        "TestSolutionBridge.test_get_next_unchecked": {
            "name": "test_get_next_unchecked",
            "location": 154,
            "return": [
                "None"
            ],
            "arguments": {
                "course": [
                    "str"
                ],
                "student_user": [],
                "exercise": [
                    "str"
                ],
                "staff_user": [
                    "typing.Callable[, ]"
                ],
                "_assessments": []
            }
        },
        "TestSolutionBridge.test_start_checking": {
            "name": "test_start_checking",
            "location": 196,
            "return": [
                "None"
            ],
            "arguments": {
                "course": [
                    "bool"
                ],
                "exercise": [],
                "student_user": []
            }
        },
        "TestSolutionBridge.test_user_comments": {
            "name": "test_user_comments",
            "location": 217,
            "return": [
                "None"
            ],
            "arguments": {
                "exercise": [],
                "student_user": []
            }
        },
        "TestSolutionBridge.test_staff_and_user_comments": {
            "name": "test_staff_and_user_comments",
            "location": 273,
            "return": [
                "None"
            ],
            "arguments": {
                "exercise": [],
                "student_user": [],
                "staff_user": []
            }
        },
        "TestSolutionBridge.test_share_solution_by_another_user": {
            "name": "test_share_solution_by_another_user",
            "location": 340,
            "return": [
                "None"
            ],
            "arguments": {
                "exercise": [],
                "student_user": []
            }
        },
        "TestSolutionBridge.test_share_solution_function": {
            "name": "test_share_solution_function",
            "location": 362,
            "return": [
                "None"
            ],
            "arguments": {
                "exercise": [],
                "student_user": []
            }
        },
        "TestSolutionBridge.test_share_with_disabled_shareable_solutions": {
            "name": "test_share_with_disabled_shareable_solutions",
            "location": 430,
            "return": [
                "None"
            ],
            "arguments": {
                "solution": [
                    "dict[, ]"
                ],
                "student_user": []
            }
        },
        "TestSolutionBridge.test_shared_url_with_disabled_shared_solutions": {
            "name": "test_shared_url_with_disabled_shared_solutions",
            "location": 442,
            "return": [
                "None"
            ],
            "arguments": {
                "solution": [
                    "bool"
                ],
                "student_user": []
            }
        },
        "TestSolutionBridge.test_view_page": {
            "name": "test_view_page",
            "location": 455,
            "return": [
                "None"
            ],
            "arguments": {
                "exercise": [],
                "student_user": []
            }
        },
        "TestSolutionBridge.test_strange_solution_with_no_files": {
            "name": "test_strange_solution_with_no_files",
            "location": 474,
            "return": [
                "None"
            ],
            "arguments": {
                "exercise": [
                    "str",
                    "int"
                ],
                "student_user": [],
                "staff_user": [
                    "str",
                    "None"
                ]
            }
        },
        "TestSolutionBridge.test_manager_can_see_solutions": {
            "name": "test_manager_can_see_solutions",
            "location": 507,
            "return": [
                "None"
            ],
            "arguments": {
                "solution": [],
                "staff_user": []
            }
        },
        "TestSolutionBridge.test_send_page": {
            "name": "test_send_page",
            "location": 516,
            "return": [
                "None"
            ],
            "arguments": {
                "student_user": [
                    "bool"
                ],
                "course": [],
                "exercise": []
            }
        },
        "TestSolutionBridge.test_manager_reset_state_expect_exceptions": {
            "name": "test_manager_reset_state_expect_exceptions",
            "location": 536,
            "return": [
                "None"
            ],
            "arguments": {
                "solution": [
                    "tuple[typing.Union[int,int]]"
                ],
                "caplog": []
            }
        },
        "TestSolutionBridge.test_last_view_status": {
            "name": "test_last_view_status",
            "location": 554,
            "return": [
                "None"
            ],
            "arguments": {
                "solution": [],
                "student_user": [],
                "staff_user": [
                    "typing.Callable[, ]"
                ]
            }
        },
        "TestSolutionBridge.test_invalid_file_solution": {
            "name": "test_invalid_file_solution",
            "location": 574,
            "return": [
                "None"
            ],
            "arguments": {
                "solution": [
                    "bool"
                ],
                "student_user": [
                    "typing.Callable[List,bool, None]",
                    "str"
                ]
            }
        },
        "TestSolutionBridge.test_done_checking": {
            "name": "test_done_checking",
            "location": 586,
            "return": [
                "None"
            ],
            "arguments": {
                "solution": [],
                "staff_user": []
            }
        },
        "TestSolutionBridge.test_solution_assessment_color_on_create": {
            "name": "test_solution_assessment_color_on_create",
            "location": 597,
            "return": [
                "None"
            ],
            "arguments": {
                "course": [],
                "_assessments": []
            }
        },
        "TestSolutionBridge.test_solution_assessment_on_save": {
            "name": "test_solution_assessment_on_save",
            "location": 615,
            "return": [
                "None"
            ],
            "arguments": {
                "course": [],
                "_assessments": []
            }
        },
        "TestSolutionBridge.test_solutions_of_user": {
            "name": "test_solutions_of_user",
            "location": 632,
            "return": [
                "None"
            ],
            "arguments": {
                "staff_user": [
                    "str",
                    "bool"
                ],
                "student_user": [
                    "str"
                ],
                "course": [
                    "str"
                ],
                "solution": [
                    "str"
                ],
                "_assessments": [
                    "bool",
                    "str",
                    "typing.Iterable[str]"
                ]
            }
        }
    },
    "lms-master/tests/test_sql_linter.py": {
        "TestSQLLinter.test_invalid_solution": {
            "name": "test_invalid_solution",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "solution": [
                    "str"
                ]
            }
        },
        "TestSQLLinter.test_valid_solution": {
            "name": "test_valid_solution",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "solution": []
            }
        }
    },
    "lms-master/tests/test_status.py": {
        "TestStatusPage.setup": {
            "name": "setup",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "typing.Callable[, ]",
                    "typing.Type",
                    "typing.IO"
                ]
            }
        },
        "TestStatusPage.test_simple_course": {
            "name": "test_simple_course",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestStatusPage.test_all_together": {
            "name": "test_all_together",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestStatusPage.test_no_submissions": {
            "name": "test_no_submissions",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestStatusPage.test_no_exercises": {
            "name": "test_no_exercises",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "lms-master/tests/test_users.py": {
        "TestUser.test_password_hashed_on_create": {
            "name": "test_password_hashed_on_create",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "staff_user": [
                    "str"
                ],
                "staff_password": [
                    "str"
                ]
            }
        },
        "TestUser.test_password_hashed_on_save": {
            "name": "test_password_hashed_on_save",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "staff_user": []
            }
        },
        "TestUser.test_password_hashed_on_multiple_saves": {
            "name": "test_password_hashed_on_multiple_saves",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "staff_user": []
            }
        },
        "TestUser.assert_password": {
            "name": "assert_password",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "user": [
                    "str",
                    "None"
                ],
                "password": [
                    "str",
                    "None"
                ]
            }
        },
        "TestUser.test_view_user_page": {
            "name": "test_view_user_page",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "student_user": [],
                "staff_user": [
                    "bool",
                    "str"
                ]
            }
        },
        "TestUser.test_logout": {
            "name": "test_logout",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "student_user": []
            }
        },
        "TestUser.test_banned_user": {
            "name": "test_banned_user",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [
                    "bool"
                ],
                "banned_user": [
                    "bool"
                ]
            }
        },
        "TestUser.test_invalid_change_password": {
            "name": "test_invalid_change_password",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "captured_templates": [
                    "str"
                ]
            }
        },
        "TestUser.test_valid_change_password": {
            "name": "test_valid_change_password",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {
                "captured_templates": [
                    "str"
                ]
            }
        },
        "TestUser.test_forgot_my_password_invalid_mail": {
            "name": "test_forgot_my_password_invalid_mail",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [
                    "str"
                ],
                "captured_templates": [
                    "str"
                ]
            }
        },
        "TestUser.test_forgot_my_password_invalid_recover": {
            "name": "test_forgot_my_password_invalid_recover",
            "location": 114,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [
                    "str"
                ],
                "captured_templates": [
                    "str"
                ]
            }
        },
        "TestUser.test_forgot_my_password": {
            "name": "test_forgot_my_password",
            "location": 135,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [
                    "str"
                ],
                "captured_templates": [
                    "list[str]",
                    "str"
                ]
            }
        },
        "TestUser.test_expired_token": {
            "name": "test_expired_token",
            "location": 162,
            "return": [
                "None"
            ],
            "arguments": {
                "client": []
            }
        },
        "TestUser.test_user_registered_to_course": {
            "name": "test_user_registered_to_course",
            "location": 181,
            "return": [
                "None"
            ],
            "arguments": {
                "student_user": [
                    "str"
                ],
                "course": []
            }
        },
        "TestUser.test_usercourse_on_delete": {
            "name": "test_usercourse_on_delete",
            "location": 189,
            "return": [
                "None"
            ],
            "arguments": {
                "student_user": [],
                "course": []
            }
        },
        "TestUser.test_usercourse_on_save": {
            "name": "test_usercourse_on_save",
            "location": 197,
            "return": [
                "None"
            ],
            "arguments": {
                "student_user": [],
                "course": []
            }
        }
    },
    "lms-master/tests/__init__.py": {},
    "lms-master/tests/samples/code1.py": {},
    "lms-master/tests/samples/code2.py": {},
    "lms-master/tests/samples/config_copy.py": {},
    "lms-master/tests/samples/noexercise.py": {
        "get_id": {
            "name": "get_id",
            "location": 1,
            "return": [
                "int"
            ],
            "arguments": {}
        }
    },
    "lms-master/tests/samples/not_working_test_code.py": {
        "TestStudent.__init__": {
            "name": "__init__",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestStudent.test_check_foo_foo": {
            "name": "test_check_foo_foo",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "lms-master/tests/samples/student_test_code.py": {
        "TestStudent.test_check_foo_foo": {
            "name": "test_check_foo_foo",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestStudent.test_check_bar_bar": {
            "name": "test_check_bar_bar",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestStudent.test_check_foo_bar_foo": {
            "name": "test_check_foo_bar_foo",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "lms-master/tests/samples/Upload 1.py": {
        "foo": {
            "name": "foo",
            "location": 1,
            "return": [
                "int"
            ],
            "arguments": {}
        }
    },
    "lms-master/tests/samples/Upload 3141.py": {
        "foo": {
            "name": "foo",
            "location": 1,
            "return": [
                "int"
            ],
            "arguments": {}
        }
    },
    "lms-master/tests/samples/__init__.py": {}
}
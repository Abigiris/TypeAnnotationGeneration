{
    "lokole-master/install.py": {
        "generate_secret": {
            "name": "generate_secret",
            "location": 761,
            "return": [],
            "arguments": {
                "length": [],
                "chars": []
            }
        },
        "_dump_state": {
            "name": "_dump_state",
            "location": 772,
            "return": [],
            "arguments": {
                "args": []
            }
        },
        "main": {
            "name": "main",
            "location": 785,
            "return": [],
            "arguments": {
                "args": [],
                "abort": []
            }
        },
        "cli": {
            "name": "cli",
            "location": 809,
            "return": [],
            "arguments": {}
        },
        "Setup.__init__": {
            "name": "__init__",
            "location": 42,
            "return": [],
            "arguments": {
                "self": [],
                "args": [],
                "abort": []
            }
        },
        "Setup.is_enabled": {
            "name": "is_enabled",
            "location": 47,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Setup.user": {
            "name": "user",
            "location": 51,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Setup.home": {
            "name": "home",
            "location": 63,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Setup.__call__": {
            "name": "__call__",
            "location": 66,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Setup._grant_permissions": {
            "name": "_grant_permissions",
            "location": 89,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Setup._install_dependencies": {
            "name": "_install_dependencies",
            "location": 94,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Setup._run": {
            "name": "_run",
            "location": 99,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Setup._step_name": {
            "name": "_step_name",
            "location": 103,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Setup.__guard_path": {
            "name": "__guard_path",
            "location": 107,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Setup.__stdout_path": {
            "name": "__stdout_path",
            "location": 112,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Setup.__stderr_path": {
            "name": "__stderr_path",
            "location": 117,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Setup.__is_complete": {
            "name": "__is_complete",
            "location": 121,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Setup.__mark_complete": {
            "name": "__mark_complete",
            "location": 124,
            "return": [],
            "arguments": {
                "self": [],
                "result": []
            }
        },
        "Setup.assume_ownership": {
            "name": "assume_ownership",
            "location": 127,
            "return": [],
            "arguments": {
                "self": [],
                "path": []
            }
        },
        "Setup.write_file": {
            "name": "write_file",
            "location": 130,
            "return": [],
            "arguments": {
                "self": [],
                "path": [],
                "content": [],
                "executable": []
            }
        },
        "Setup.create_daemon": {
            "name": "create_daemon",
            "location": 143,
            "return": [],
            "arguments": {
                "self": [],
                "program_name": [],
                "command": [],
                "user": [],
                "env": []
            }
        },
        "Setup.abspath": {
            "name": "abspath",
            "location": 173,
            "return": [],
            "arguments": {
                "self": [],
                "file_path": []
            }
        },
        "Setup.sh": {
            "name": "sh",
            "location": 178,
            "return": [],
            "arguments": {
                "self": [],
                "command": [],
                "user": [],
                "accept_failure": [],
                "retry_attempts": [],
                "retry_interval": []
            }
        },
        "Setup._mkdir": {
            "name": "_mkdir",
            "location": 204,
            "return": [],
            "arguments": {
                "self": [],
                "path": []
            }
        },
        "SystemSetup._run": {
            "name": "_run",
            "location": 216,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SystemSetup._ensure_root": {
            "name": "_ensure_root",
            "location": 223,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SystemSetup._ensure_apt": {
            "name": "_ensure_apt",
            "location": 227,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SystemSetup._set_locale": {
            "name": "_set_locale",
            "location": 230,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SystemSetup._set_timezone": {
            "name": "_set_timezone",
            "location": 245,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SystemSetup._set_password": {
            "name": "_set_password",
            "location": 248,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SystemSetup.is_enabled": {
            "name": "is_enabled",
            "location": 257,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "WifiSetup._run": {
            "name": "_run",
            "location": 269,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "WifiSetup._configure_dns": {
            "name": "_configure_dns",
            "location": 277,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "WifiSetup._configure_wifi": {
            "name": "_configure_wifi",
            "location": 305,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "WifiSetup._disable_system_power_management": {
            "name": "_disable_system_power_management",
            "location": 351,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "WifiSetup.ip": {
            "name": "ip",
            "location": 355,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "WifiSetup.device": {
            "name": "device",
            "location": 359,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "WifiSetup.ht_capab": {
            "name": "ht_capab",
            "location": 363,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "WifiSetup.is_enabled": {
            "name": "is_enabled",
            "location": 373,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ModemSetup._run": {
            "name": "_run",
            "location": 391,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ModemSetup._configure_wvdial": {
            "name": "_configure_wvdial",
            "location": 398,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ModemSetup.is_enabled": {
            "name": "is_enabled",
            "location": 408,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ClientSetup._run": {
            "name": "_run",
            "location": 422,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ClientSetup.client_domain": {
            "name": "client_domain",
            "location": 463,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ClientSetup.client_url_create": {
            "name": "client_url_create",
            "location": 467,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ClientSetup.client_url_details": {
            "name": "client_url_details",
            "location": 471,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ClientSetup.is_enabled": {
            "name": "is_enabled",
            "location": 475,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "WebappSetup.__init__": {
            "name": "__init__",
            "location": 498,
            "return": [],
            "arguments": {
                "self": [],
                "args": [],
                "abort": [],
                "app_config": []
            }
        },
        "WebappSetup._run": {
            "name": "_run",
            "location": 502,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "WebappSetup._create_virtualenv": {
            "name": "_create_virtualenv",
            "location": 515,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "WebappSetup._install_client": {
            "name": "_install_client",
            "location": 523,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "WebappSetup._compile_translations": {
            "name": "_compile_translations",
            "location": 533,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "WebappSetup._setup_secrets": {
            "name": "_setup_secrets",
            "location": 539,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "WebappSetup._create_admin_user": {
            "name": "_create_admin_user",
            "location": 561,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "WebappSetup._install_nginx": {
            "name": "_install_nginx",
            "location": 573,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "WebappSetup._setup_gunicorn": {
            "name": "_setup_gunicorn",
            "location": 648,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "WebappSetup._setup_celery": {
            "name": "_setup_celery",
            "location": 667,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "WebappSetup._setup_cron": {
            "name": "_setup_cron",
            "location": 683,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "WebappSetup._setup_restarter": {
            "name": "_setup_restarter",
            "location": 700,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "WebappSetup._reboot": {
            "name": "_reboot",
            "location": 713,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "WebappSetup._pip_install": {
            "name": "_pip_install",
            "location": 720,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "WebappSetup.webapp_files_root": {
            "name": "webapp_files_root",
            "location": 729,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "WebappSetup.socket_path": {
            "name": "socket_path",
            "location": 738,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "WebappSetup.settings_path": {
            "name": "settings_path",
            "location": 743,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "WebappSetup.cronstate_pid": {
            "name": "cronstate_pid",
            "location": 748,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "WebappSetup.restarter_directory": {
            "name": "restarter_directory",
            "location": 753,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "WebappSetup.venv_path": {
            "name": "venv_path",
            "location": 757,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "lokole-master/manage.py": {
        "devserver": {
            "name": "devserver",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "resetdb": {
            "name": "resetdb",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "restarter": {
            "name": "restarter",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "directory": [
                    "str"
                ]
            }
        },
        "createadmin": {
            "name": "createadmin",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "name": [
                    "int",
                    "str"
                ],
                "password": [
                    "str",
                    "int"
                ]
            }
        },
        "restarter.Restarter.on_created": {
            "name": "on_created",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "event": []
            }
        }
    },
    "lokole-master/setup.py": {
        "requirements_for": {
            "name": "requirements_for",
            "location": 12,
            "return": [
                "list[]"
            ],
            "arguments": {
                "name": [
                    "str"
                ]
            }
        }
    },
    "lokole-master/opwen_email_client/__init__.py": {},
    "lokole-master/opwen_email_client/domain/__init__.py": {},
    "lokole-master/opwen_email_client/domain/email/attachment.py": {
        "AttachmentEncoder.encode": {
            "name": "encode",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "content": [
                    "str",
                    "int",
                    "bytes",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "AttachmentEncoder.decode": {
            "name": "decode",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "encoded": [
                    "int",
                    "str",
                    "typing.Iterable['Context']"
                ]
            }
        },
        "Base64AttachmentEncoder.encode": {
            "name": "encode",
            "location": 20,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "content": [
                    "bytes",
                    "typing.Callable[, ]",
                    "str"
                ]
            }
        },
        "Base64AttachmentEncoder.decode": {
            "name": "decode",
            "location": 24,
            "return": [],
            "arguments": {
                "self": [],
                "encoded": [
                    "str",
                    "bytes"
                ]
            }
        }
    },
    "lokole-master/opwen_email_client/domain/email/client.py": {
        "EmailServerClient.upload": {
            "name": "upload",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "resource_id": [
                    "str",
                    "typing.Type",
                    "list[int]"
                ],
                "container": [
                    "str",
                    "typing.Type",
                    "list[int]"
                ]
            }
        },
        "EmailServerClient.download": {
            "name": "download",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HttpEmailServerClient.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "compression": [
                    "str",
                    "bool",
                    "None"
                ],
                "endpoint": [
                    "str",
                    "bool",
                    "None"
                ],
                "client_id": [
                    "str"
                ]
            }
        },
        "HttpEmailServerClient._base_url": {
            "name": "_base_url",
            "location": 28,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "HttpEmailServerClient._upload_url": {
            "name": "_upload_url",
            "location": 32,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "HttpEmailServerClient._download_url": {
            "name": "_download_url",
            "location": 39,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "HttpEmailServerClient.upload": {
            "name": "upload",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "resource_id": [
                    "str"
                ],
                "container": [
                    "str",
                    "typing.Type",
                    "list[int]"
                ]
            }
        },
        "HttpEmailServerClient.download": {
            "name": "download",
            "location": 56,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LocalEmailServerClient.download": {
            "name": "download",
            "location": 65,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "LocalEmailServerClient.upload": {
            "name": "upload",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "resource_id": [
                    "str",
                    "dict[str, typing.Any]"
                ],
                "container": [
                    "str",
                    "dict[str, typing.Any]"
                ]
            }
        }
    },
    "lokole-master/opwen_email_client/domain/email/sql_store.py": {
        "_can_access": {
            "name": "_can_access",
            "location": 340,
            "return": [],
            "arguments": {
                "email_address": []
            }
        },
        "_match_email_uid": {
            "name": "_match_email_uid",
            "location": 344,
            "return": [],
            "arguments": {
                "uids": []
            }
        },
        "_Attachment.to_dict": {
            "name": "to_dict",
            "location": 83,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_Attachment.from_dict": {
            "name": "from_dict",
            "location": 92,
            "return": [],
            "arguments": {
                "cls": [],
                "db": [],
                "attachment": []
            }
        },
        "_Email.to_dict": {
            "name": "to_dict",
            "location": 132,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_Email.from_dict": {
            "name": "from_dict",
            "location": 156,
            "return": [],
            "arguments": {
                "cls": [],
                "db": [],
                "email": []
            }
        },
        "_Email.is_sent_by": {
            "name": "is_sent_by",
            "location": 179,
            "return": [],
            "arguments": {
                "cls": [],
                "email_address": []
            }
        },
        "_Email.is_received_by": {
            "name": "is_received_by",
            "location": 184,
            "return": [],
            "arguments": {
                "cls": [],
                "email_address": []
            }
        },
        "_SqlalchemyEmailStore.__init__": {
            "name": "__init__",
            "location": 193,
            "return": [],
            "arguments": {
                "self": [],
                "page_size": [],
                "database_uri": [],
                "restricted": []
            }
        },
        "_SqlalchemyEmailStore._dbread": {
            "name": "_dbread",
            "location": 200,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_SqlalchemyEmailStore._dbwrite": {
            "name": "_dbwrite",
            "location": 203,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_SqlalchemyEmailStore._create": {
            "name": "_create",
            "location": 206,
            "return": [],
            "arguments": {
                "self": [],
                "emails_or_attachments": []
            }
        },
        "_SqlalchemyEmailStore._create_email": {
            "name": "_create_email",
            "location": 222,
            "return": [],
            "arguments": {
                "cls": [],
                "db": [],
                "email": []
            }
        },
        "_SqlalchemyEmailStore._create_attachment": {
            "name": "_create_attachment",
            "location": 228,
            "return": [],
            "arguments": {
                "cls": [],
                "db": [],
                "attachment": []
            }
        },
        "_SqlalchemyEmailStore._mark_sent": {
            "name": "_mark_sent",
            "location": 233,
            "return": [],
            "arguments": {
                "self": [],
                "uids": []
            }
        },
        "_SqlalchemyEmailStore._mark_read": {
            "name": "_mark_read",
            "location": 242,
            "return": [],
            "arguments": {
                "self": [],
                "email_address": [],
                "uids": []
            }
        },
        "_SqlalchemyEmailStore._delete": {
            "name": "_delete",
            "location": 250,
            "return": [],
            "arguments": {
                "self": [],
                "email_address": [],
                "uids": []
            }
        },
        "_SqlalchemyEmailStore._delete_orphaned_attachments": {
            "name": "_delete_orphaned_attachments",
            "location": 260,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_SqlalchemyEmailStore._find": {
            "name": "_find",
            "location": 266,
            "return": [],
            "arguments": {
                "self": [],
                "query": [],
                "table": []
            }
        },
        "_SqlalchemyEmailStore._query": {
            "name": "_query",
            "location": 272,
            "return": [],
            "arguments": {
                "self": [],
                "query": [],
                "page": []
            }
        },
        "_SqlalchemyEmailStore.inbox": {
            "name": "inbox",
            "location": 287,
            "return": [],
            "arguments": {
                "self": [],
                "email_address": [],
                "page": []
            }
        },
        "_SqlalchemyEmailStore.outbox": {
            "name": "outbox",
            "location": 290,
            "return": [],
            "arguments": {
                "self": [],
                "email_address": [],
                "page": []
            }
        },
        "_SqlalchemyEmailStore.search": {
            "name": "search",
            "location": 293,
            "return": [],
            "arguments": {
                "self": [],
                "email_address": [],
                "page": [],
                "query": []
            }
        },
        "_SqlalchemyEmailStore.pending": {
            "name": "pending",
            "location": 305,
            "return": [],
            "arguments": {
                "self": [],
                "page": []
            }
        },
        "_SqlalchemyEmailStore.has_unread": {
            "name": "has_unread",
            "location": 308,
            "return": [],
            "arguments": {
                "self": [],
                "email_address": []
            }
        },
        "_SqlalchemyEmailStore.num_pending": {
            "name": "num_pending",
            "location": 314,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_SqlalchemyEmailStore.get": {
            "name": "get",
            "location": 321,
            "return": [],
            "arguments": {
                "self": [],
                "uid": []
            }
        },
        "_SqlalchemyEmailStore.get_attachment": {
            "name": "get_attachment",
            "location": 324,
            "return": [],
            "arguments": {
                "self": [],
                "email_id": [],
                "attachment_id": []
            }
        },
        "_SqlalchemyEmailStore.sent": {
            "name": "sent",
            "location": 327,
            "return": [],
            "arguments": {
                "self": [],
                "email_address": [],
                "page": []
            }
        },
        "SqliteEmailStore.__init__": {
            "name": "__init__",
            "location": 332,
            "return": [],
            "arguments": {
                "self": [],
                "page_size": [],
                "database_path": [],
                "restricted": []
            }
        }
    },
    "lokole-master/opwen_email_client/domain/email/store.py": {
        "_is_restricted": {
            "name": "_is_restricted",
            "location": 84,
            "return": [
                "bool"
            ],
            "arguments": {
                "email": [
                    "dict[, ]",
                    "dict[str, typing.Any]"
                ],
                "restricted": [
                    "dict[str, set[str]]"
                ]
            }
        },
        "_get_uid": {
            "name": "_get_uid",
            "location": 96,
            "return": [
                "str",
                "bytes",
                "list[]",
                "list[str]"
            ],
            "arguments": {
                "email_or_uid": [
                    "str",
                    "bytes",
                    "list[]",
                    "list[str]"
                ]
            }
        },
        "_get_recipients": {
            "name": "_get_recipients",
            "location": 103,
            "return": [
                "dict[str, object]"
            ],
            "arguments": {
                "email": [
                    "dict[, ]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "_add_uid": {
            "name": "_add_uid",
            "location": 111,
            "return": [
                "str"
            ],
            "arguments": {
                "email": [
                    "dict[, ]",
                    "dict[str, str]"
                ]
            }
        },
        "EmailStore.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "restricted": [
                    "None",
                    "int",
                    "float"
                ]
            }
        },
        "EmailStore.create": {
            "name": "create",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "emails_or_attachments": [
                    "str",
                    "list[]"
                ]
            }
        },
        "EmailStore._create": {
            "name": "_create",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "emails_or_attachments": [
                    "typing.Iterable[dict[, ]]",
                    "bool",
                    "typing.Callable[, ]",
                    "typing.Type"
                ]
            }
        },
        "EmailStore.get": {
            "name": "get",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "uid": [
                    "str",
                    "int",
                    "dict[str, typing.Any]",
                    "dict[, ]"
                ]
            }
        },
        "EmailStore.get_attachment": {
            "name": "get_attachment",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "email_id": [
                    "str",
                    "bool"
                ],
                "attachment_id": [
                    "str",
                    "bool"
                ]
            }
        },
        "EmailStore.inbox": {
            "name": "inbox",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "email_address": [
                    "str",
                    "int",
                    "typing.Iterable[str]"
                ],
                "page": [
                    "str",
                    "int",
                    "typing.Iterable[str]"
                ]
            }
        },
        "EmailStore.outbox": {
            "name": "outbox",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "email_address": [
                    "str",
                    "int",
                    "typing.Iterable[str]"
                ],
                "page": [
                    "str",
                    "int",
                    "typing.Iterable[str]"
                ]
            }
        },
        "EmailStore.sent": {
            "name": "sent",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "email_address": [
                    "str",
                    "int",
                    "typing.Iterable[str]"
                ],
                "page": [
                    "str",
                    "int",
                    "typing.Iterable[str]"
                ]
            }
        },
        "EmailStore.search": {
            "name": "search",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "email_address": [
                    "str",
                    "None",
                    "int",
                    "float"
                ],
                "page": [
                    "str",
                    "None",
                    "int",
                    "float"
                ],
                "query": [
                    "str",
                    "None",
                    "int",
                    "float"
                ]
            }
        },
        "EmailStore.pending": {
            "name": "pending",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "page": [
                    "int",
                    "str",
                    "typing.Iterable['Context']"
                ]
            }
        },
        "EmailStore.has_unread": {
            "name": "has_unread",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "email_address": [
                    "str",
                    "int",
                    "typing.Iterable[str]"
                ]
            }
        },
        "EmailStore.num_pending": {
            "name": "num_pending",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EmailStore.mark_sent": {
            "name": "mark_sent",
            "location": 59,
            "return": [],
            "arguments": {
                "self": [],
                "emails_or_uids": [
                    "typing.Iterable[typing.Union[dict[, ],str]]",
                    "typing.Callable[, ]",
                    "bool",
                    "typing.Iterable[T]"
                ]
            }
        },
        "EmailStore.mark_read": {
            "name": "mark_read",
            "location": 63,
            "return": [],
            "arguments": {
                "self": [],
                "email_address": [
                    "str",
                    "tuple[typing.Union[int,int]]",
                    "None",
                    "bool",
                    "dict[, ]"
                ],
                "emails_or_uids": [
                    "typing.Iterable[typing.Union[dict[, ],str]]",
                    "typing.Type"
                ]
            }
        },
        "EmailStore.delete": {
            "name": "delete",
            "location": 67,
            "return": [],
            "arguments": {
                "self": [],
                "email_address": [
                    "str",
                    "None",
                    "int"
                ],
                "emails_or_uids": [
                    "typing.Iterable[typing.Union[dict[, ],str]]",
                    "int",
                    "str"
                ]
            }
        },
        "EmailStore._delete": {
            "name": "_delete",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "email_address": [
                    "str",
                    "typing.Iterable[str]",
                    "None",
                    "bool"
                ],
                "uids": [
                    "str",
                    "typing.Iterable[str]",
                    "None",
                    "bool"
                ]
            }
        },
        "EmailStore._mark_sent": {
            "name": "_mark_sent",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "uids": [
                    "int",
                    "str",
                    "typing.Iterable['Context']"
                ]
            }
        },
        "EmailStore._mark_read": {
            "name": "_mark_read",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "email_address": [
                    "str",
                    "int",
                    "typing.Iterable[str]"
                ],
                "uids": [
                    "str",
                    "int",
                    "typing.Iterable[str]"
                ]
            }
        }
    },
    "lokole-master/opwen_email_client/domain/email/sync.py": {
        "Sync.upload": {
            "name": "upload",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "items": [
                    "typing.Iterable[T]",
                    "typing.Iterable[str]",
                    "str",
                    "None",
                    "bool"
                ],
                "users": [
                    "typing.Iterable[T]",
                    "typing.Iterable[str]",
                    "str",
                    "None",
                    "bool"
                ]
            }
        },
        "Sync.download": {
            "name": "download",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AzureSync.__init__": {
            "name": "__init__",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "container": [
                    "str",
                    "int",
                    "list[str]",
                    "None"
                ],
                "serializer": [
                    "str",
                    "int",
                    "list[str]",
                    "None"
                ],
                "account_name": [
                    "str"
                ],
                "account_key": [
                    "str",
                    "list[str]",
                    "list[]",
                    "dict[, ]",
                    "dict[str, typing.Any]",
                    "None"
                ],
                "account_host": [
                    "str",
                    "bool",
                    "list[T]",
                    "typing.Sequence[str]"
                ],
                "account_secure": [
                    "str",
                    "bool",
                    "list[T]",
                    "typing.Sequence[str]"
                ],
                "email_server_client": [
                    "str",
                    "bool",
                    "None"
                ],
                "provider": [
                    "str",
                    "list[str]"
                ],
                "compression": [
                    "str",
                    "int",
                    "list[str]",
                    "None"
                ]
            }
        },
        "AzureSync._azure_client": {
            "name": "_azure_client",
            "location": 64,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AzureSync._workspace": {
            "name": "_workspace",
            "location": 71,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "cls": [
                    "memoryview",
                    "bool",
                    "str"
                ],
                "suffix": [
                    "bool",
                    "str",
                    "None",
                    "typing.IO"
                ]
            }
        },
        "AzureSync._open": {
            "name": "_open",
            "location": 83,
            "return": [],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ],
                "mode": [
                    "str",
                    "bool",
                    "list[str]"
                ]
            }
        },
        "AzureSync._download_to_stream": {
            "name": "_download_to_stream",
            "location": 94,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "blobname": [
                    "bool",
                    "None"
                ],
                "stream": [
                    "typing.IO",
                    "str",
                    "typing.TextIO"
                ]
            }
        },
        "AzureSync._upload_from_stream": {
            "name": "_upload_from_stream",
            "location": 105,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "blobname": [
                    "str",
                    "None"
                ],
                "stream": [
                    "str",
                    "None"
                ]
            }
        },
        "AzureSync._get_file_from_download": {
            "name": "_get_file_from_download",
            "location": 109,
            "return": [
                "typing.Generator[tuple[]]"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "typing.Type",
                    "dict[str, typing.Any]",
                    "typing.Sequence[typing.Any]",
                    "list[dict[str, typing.Any]]",
                    "list[dict[, ]]",
                    "bytes",
                    "None"
                ],
                "archive": [],
                "downloads": [
                    "dict[str, typing.Any]",
                    "tuple[typing.Union[bytes,bytes]]",
                    "str"
                ]
            }
        },
        "AzureSync.download": {
            "name": "download",
            "location": 133,
            "return": [
                "None",
                "typing.Generator[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "AzureSync._upload_emails": {
            "name": "_upload_emails",
            "location": 150,
            "return": [
                "list[tuple[typing.Union[str,bool]]]"
            ],
            "arguments": {
                "self": [],
                "items": [
                    "dict[int, list[typing.Any]]"
                ],
                "archive": [
                    "typing.Iterable[T]"
                ]
            }
        },
        "AzureSync._upload_users": {
            "name": "_upload_users",
            "location": 169,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "users": [
                    "str"
                ],
                "archive": [
                    "typing.Type",
                    "dict[, ]"
                ]
            }
        },
        "AzureSync.upload": {
            "name": "upload",
            "location": 183,
            "return": [],
            "arguments": {
                "self": [],
                "items": [
                    "bool"
                ],
                "users": [
                    "None",
                    "str"
                ]
            }
        }
    },
    "lokole-master/opwen_email_client/domain/email/user_store.py": {
        "User.id": {
            "name": "id",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "User.email": {
            "name": "email",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "User.password": {
            "name": "password",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "User.roles": {
            "name": "roles",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "User.active": {
            "name": "active",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserStore.__init__": {
            "name": "__init__",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "read": [
                    "str",
                    "typing.TextIO",
                    "list[list[int]]",
                    "dict[str, typing.Any]",
                    "int",
                    "None"
                ],
                "write": [
                    "int",
                    "float"
                ]
            }
        },
        "UserStore.init_app": {
            "name": "init_app",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "app": [
                    "bool"
                ]
            }
        },
        "UserStore.fetch_all": {
            "name": "fetch_all",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "user": [
                    "typing.Iterable[int]",
                    "None",
                    "bool"
                ]
            }
        },
        "UserStore.fetch_pending": {
            "name": "fetch_pending",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "lokole-master/opwen_email_client/domain/email/__init__.py": {},
    "lokole-master/opwen_email_client/domain/modem/e303.py": {},
    "lokole-master/opwen_email_client/domain/modem/e3131.py": {},
    "lokole-master/opwen_email_client/domain/modem/e353.py": {},
    "lokole-master/opwen_email_client/domain/modem/__init__.py": {
        "_find_device": {
            "name": "_find_device",
            "location": 6,
            "return": [
                "bool"
            ],
            "arguments": {
                "stdout": [
                    "bytes",
                    "str"
                ],
                "device_id": [
                    "str"
                ]
            }
        },
        "modem_is_plugged": {
            "name": "modem_is_plugged",
            "location": 16,
            "return": [],
            "arguments": {
                "modem": [
                    "None",
                    "bool",
                    "dict[, ]"
                ]
            }
        },
        "modem_is_setup": {
            "name": "modem_is_setup",
            "location": 21,
            "return": [],
            "arguments": {
                "target_mode": [
                    "str",
                    "list[str]"
                ]
            }
        },
        "setup_modem": {
            "name": "setup_modem",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "config": []
            }
        }
    },
    "lokole-master/opwen_email_client/domain/sim/hologram.py": {},
    "lokole-master/opwen_email_client/domain/sim/__init__.py": {
        "_dialer_is_connected": {
            "name": "_dialer_is_connected",
            "location": 7,
            "return": [],
            "arguments": {
                "log_path": []
            }
        },
        "_start_dialer": {
            "name": "_start_dialer",
            "location": 15,
            "return": [],
            "arguments": {
                "config": [],
                "log_file": []
            }
        },
        "dialup": {
            "name": "dialup",
            "location": 19,
            "return": [],
            "arguments": {
                "config": [],
                "log": [],
                "max_retries": [],
                "poll_seconds": []
            }
        }
    },
    "lokole-master/opwen_email_client/util/network.py": {
        "check_connection": {
            "name": "check_connection",
            "location": 5,
            "return": [
                "bool"
            ],
            "arguments": {
                "hostname": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ],
                "port": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "lokole-master/opwen_email_client/util/os.py": {
        "subdirectories": {
            "name": "subdirectories",
            "location": 13,
            "return": [
                "typing.Generator[]",
                "list[]"
            ],
            "arguments": {
                "root": [
                    "str",
                    "bytes"
                ]
            }
        },
        "replace_line": {
            "name": "replace_line",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "path": [
                    "str",
                    "None"
                ],
                "match": [
                    "typing.Callable[str, bool]",
                    "str",
                    "int"
                ],
                "replacement": [
                    "str"
                ]
            }
        },
        "backup": {
            "name": "backup",
            "location": 35,
            "return": [
                "None",
                "Path"
            ],
            "arguments": {
                "path": [
                    "str",
                    "None"
                ],
                "suffix": [
                    "typing.Text"
                ]
            }
        }
    },
    "lokole-master/opwen_email_client/util/serialization.py": {
        "Serializer.serialize": {
            "name": "serialize",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "typing.Type",
                    "None",
                    "str",
                    "BaseException",
                    "Exception"
                ],
                "type_": [
                    "typing.Text"
                ]
            }
        },
        "Serializer.deserialize": {
            "name": "deserialize",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "serialized": [
                    "typing.Type",
                    "None",
                    "str",
                    "BaseException",
                    "Exception"
                ],
                "type_": [
                    "typing.Text"
                ]
            }
        },
        "JsonSerializer.serialize": {
            "name": "serialize",
            "location": 27,
            "return": [],
            "arguments": {
                "self": [],
                "obj": [
                    "bool",
                    "list[str]",
                    "typing.Mapping",
                    "None"
                ],
                "type_": [
                    "typing.Text"
                ]
            }
        },
        "JsonSerializer.deserialize": {
            "name": "deserialize",
            "location": 36,
            "return": [],
            "arguments": {
                "self": [],
                "serialized": [
                    "str",
                    "bool",
                    "typing.Any",
                    "None"
                ],
                "type_": [
                    "typing.Text"
                ]
            }
        },
        "JsonSerializer._encode_attachments": {
            "name": "_encode_attachments",
            "location": 50,
            "return": [
                "dict[, ]",
                "dict[str, typing.Any]",
                "dict[str, dict[str, typing.Any]]",
                "str",
                "list[]"
            ],
            "arguments": {
                "cls": [],
                "email": [
                    "dict[, ]",
                    "dict[str, typing.Any]",
                    "dict[str, dict[str, typing.Any]]"
                ]
            }
        },
        "JsonSerializer._encode_attachment": {
            "name": "_encode_attachment",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "memoryview",
                    "bool",
                    "str"
                ],
                "attachment": [
                    "dict[, ]",
                    "dict[str, object]"
                ]
            }
        },
        "JsonSerializer._decode_attachments": {
            "name": "_decode_attachments",
            "location": 67,
            "return": [
                "dict[, ]",
                "dict[str, typing.Any]",
                "dict[str, dict[str, typing.Any]]",
                "str",
                "list[]"
            ],
            "arguments": {
                "cls": [],
                "email": [
                    "dict[, ]",
                    "dict[str, typing.Any]",
                    "dict[str, dict[str, typing.Any]]"
                ]
            }
        },
        "JsonSerializer._decode_attachment": {
            "name": "_decode_attachment",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "memoryview",
                    "bool",
                    "str"
                ],
                "attachment": [
                    "dict[, ]",
                    "dict[str, str]"
                ]
            }
        }
    },
    "lokole-master/opwen_email_client/util/sqlalchemy.py": {
        "create_database": {
            "name": "create_database",
            "location": 10,
            "return": [
                "int",
                "list[dict[str, typing.Any]]",
                "str",
                "dict[str, dict[str, int]]",
                "float"
            ],
            "arguments": {
                "uri": [
                    "str",
                    "int"
                ],
                "base": [
                    "str",
                    "typing.Type",
                    "list[tuple[typing.Union[int,int]]]",
                    "int",
                    "list[dict[str, typing.Any]]"
                ]
            }
        },
        "get_or_create": {
            "name": "get_or_create",
            "location": 21,
            "return": [],
            "arguments": {
                "db": [
                    "str",
                    "dict[typing.Hashable, typing.Any]",
                    "int",
                    "None"
                ],
                "model": []
            }
        },
        "session": {
            "name": "session",
            "location": 40,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "session_maker": [
                    "str"
                ],
                "commit": [
                    "bool"
                ]
            }
        }
    },
    "lokole-master/opwen_email_client/util/wtforms.py": {
        "CronSchedule.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "None",
                    "int",
                    "float"
                ]
            }
        },
        "CronSchedule.__call__": {
            "name": "__call__",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "form": [
                    "str"
                ],
                "field": [],
                "message": [
                    "None",
                    "typing.Callable[, ]",
                    "int",
                    "dict[str, typing.Any]",
                    "list[]",
                    "typing.Type"
                ]
            }
        },
        "Emails.__init__": {
            "name": "__init__",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "email_address_delimiter": [
                    "int",
                    "list[str]",
                    "float",
                    "str"
                ],
                "message": [
                    "None",
                    "bool",
                    "str",
                    "list[str]",
                    "typing.Sequence[str]",
                    "tuple[typing.Union[float,float]]"
                ]
            }
        },
        "Emails.__call__": {
            "name": "__call__",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "form": [
                    "dict[str, typing.Any]",
                    "typing.Callable[..., collections.abc.Awaitable[None]]"
                ],
                "field": []
            }
        },
        "HtmlTextAreaField.process_formdata": {
            "name": "process_formdata",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "valuelist": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ]
            }
        },
        "HtmlTextAreaField._value": {
            "name": "_value",
            "location": 62,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HtmlTextAreaField._remove_script_tags": {
            "name": "_remove_script_tags",
            "location": 67,
            "return": [
                "str",
                "typing.Type",
                "bool"
            ],
            "arguments": {
                "cls": [
                    "str"
                ],
                "data": [
                    "typing.Type",
                    "str",
                    "bool"
                ]
            }
        },
        "HtmlTextAreaField._to_safe_html": {
            "name": "_to_safe_html",
            "location": 78,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "cls": [],
                "data": [
                    "dict[, ]",
                    "list[dict[, ]]",
                    "typing.Type",
                    "str",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "SuffixedStringField.__init__": {
            "name": "__init__",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "suffix": [
                    "typing.Text"
                ]
            }
        },
        "SuffixedStringField.process_formdata": {
            "name": "process_formdata",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "valuelist": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ]
            }
        },
        "SuffixedStringField._value": {
            "name": "_value",
            "location": 97,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SuffixedStringField._ensure_suffix": {
            "name": "_ensure_suffix",
            "location": 101,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ]
            }
        }
    },
    "lokole-master/opwen_email_client/util/__init__.py": {},
    "lokole-master/opwen_email_client/webapp/actions.py": {
        "SyncEmails.__init__": {
            "name": "__init__",
            "location": 36,
            "return": [],
            "arguments": {
                "self": [],
                "email_store": [],
                "email_sync": [],
                "user_store": [],
                "log": []
            }
        },
        "SyncEmails._upload": {
            "name": "_upload",
            "location": 42,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SyncEmails._mark_as_synced": {
            "name": "_mark_as_synced",
            "location": 56,
            "return": [],
            "arguments": {
                "self": [],
                "users": []
            }
        },
        "SyncEmails._download": {
            "name": "_download",
            "location": 62,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SyncEmails._sync": {
            "name": "_sync",
            "location": 71,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SyncEmails.__call__": {
            "name": "__call__",
            "location": 75,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UpdateCode.__init__": {
            "name": "__init__",
            "location": 82,
            "return": [],
            "arguments": {
                "self": [],
                "version": [],
                "log": []
            }
        },
        "UpdateCode.__call__": {
            "name": "__call__",
            "location": 86,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RestartApp.__init__": {
            "name": "__init__",
            "location": 100,
            "return": [],
            "arguments": {
                "self": [],
                "restart_paths": []
            }
        },
        "RestartApp.__call__": {
            "name": "__call__",
            "location": 103,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RestartAppComponent.__init__": {
            "name": "__init__",
            "location": 111,
            "return": [],
            "arguments": {
                "self": [],
                "restart_path": []
            }
        },
        "RestartAppComponent.__call__": {
            "name": "__call__",
            "location": 114,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SendWelcomeEmail.__init__": {
            "name": "__init__",
            "location": 132,
            "return": [],
            "arguments": {
                "self": [],
                "to": [],
                "time": [],
                "email_store": []
            }
        },
        "SendWelcomeEmail.__call__": {
            "name": "__call__",
            "location": 137,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "StartInternetConnection.__init__": {
            "name": "__init__",
            "location": 151,
            "return": [],
            "arguments": {
                "self": [],
                "modem_config_dir": [],
                "sim_config_dir": [],
                "sim_type": [],
                "state_dir": []
            }
        },
        "StartInternetConnection._wvdial_config": {
            "name": "_wvdial_config",
            "location": 159,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "StartInternetConnection._wvdial_log": {
            "name": "_wvdial_log",
            "location": 177,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "StartInternetConnection._modem_config_for": {
            "name": "_modem_config_for",
            "location": 185,
            "return": [],
            "arguments": {
                "self": [],
                "modem": []
            }
        },
        "StartInternetConnection._setup_modem": {
            "name": "_setup_modem",
            "location": 196,
            "return": [],
            "arguments": {
                "self": [],
                "poll_seconds": []
            }
        },
        "StartInternetConnection.__call__": {
            "name": "__call__",
            "location": 213,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ClientRegister.__init__": {
            "name": "__init__",
            "location": 234,
            "return": [],
            "arguments": {
                "self": [],
                "client_name": [],
                "access_token": [],
                "path": [],
                "logger": []
            }
        },
        "ClientRegister.client_domain": {
            "name": "client_domain",
            "location": 241,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ClientRegister.server_endpoint": {
            "name": "server_endpoint",
            "location": 245,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ClientRegister.client_url_details": {
            "name": "client_url_details",
            "location": 249,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ClientRegister._format_settings": {
            "name": "_format_settings",
            "location": 252,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ClientRegister._write_settings_to_file": {
            "name": "_write_settings_to_file",
            "location": 271,
            "return": [],
            "arguments": {
                "self": [],
                "client_values": []
            }
        },
        "ClientRegister.__call__": {
            "name": "__call__",
            "location": 277,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "lokole-master/opwen_email_client/webapp/cache.py": {},
    "lokole-master/opwen_email_client/webapp/config.py": {},
    "lokole-master/opwen_email_client/webapp/ioc.py": {
        "_new_ioc": {
            "name": "_new_ioc",
            "location": 71,
            "return": [],
            "arguments": {
                "fqn": [
                    "str"
                ]
            }
        },
        "create_app": {
            "name": "create_app",
            "location": 82,
            "return": [
                "Flask"
            ],
            "arguments": {
                "config": []
            }
        },
        "Ioc.email_store": {
            "name": "email_store",
            "location": 23,
            "return": [
                "SqliteEmailStore"
            ],
            "arguments": {
                "self": []
            }
        },
        "Ioc.email_sync": {
            "name": "email_sync",
            "location": 31,
            "return": [
                "AzureSync"
            ],
            "arguments": {
                "self": []
            }
        },
        "Ioc.user_store": {
            "name": "user_store",
            "location": 63,
            "return": [
                "FlaskLoginUserStore"
            ],
            "arguments": {
                "self": []
            }
        },
        "Ioc.login_form": {
            "name": "login_form",
            "location": 67,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "lokole-master/opwen_email_client/webapp/jinja.py": {
        "asset_url": {
            "name": "asset_url",
            "location": 11,
            "return": [],
            "arguments": {
                "asset_path": [
                    "str",
                    "int"
                ]
            }
        },
        "render_body": {
            "name": "render_body",
            "location": 20,
            "return": [
                "typing.Text",
                "str"
            ],
            "arguments": {
                "email": []
            }
        },
        "_inject_format_last_login": {
            "name": "_inject_format_last_login",
            "location": 50,
            "return": [
                "dict[typing.Text, ]"
            ],
            "arguments": {}
        },
        "_inject_format_last_login.format_last_login": {
            "name": "format_last_login",
            "location": 51,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "user": [],
                "current_user": []
            }
        }
    },
    "lokole-master/opwen_email_client/webapp/login.py": {
        "FlaskLoginUserStore.__init__": {
            "name": "__init__",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FlaskLoginUserStore.init_app": {
            "name": "init_app",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "app": []
            }
        },
        "FlaskLoginUserStore.fetch_all": {
            "name": "fetch_all",
            "location": 75,
            "return": [],
            "arguments": {
                "self": [],
                "user": [
                    "typing.Iterable[int]",
                    "None",
                    "bool"
                ]
            }
        },
        "FlaskLoginUserStore.fetch_pending": {
            "name": "fetch_pending",
            "location": 79,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "lokole-master/opwen_email_client/webapp/mkwvconf.py": {
        "create_mkwvconf": {
            "name": "create_mkwvconf",
            "location": 14,
            "return": [],
            "arguments": {}
        },
        "get_config": {
            "name": "get_config",
            "location": 26,
            "return": [],
            "arguments": {
                "country": [
                    "str",
                    "None",
                    "list[str]"
                ],
                "provider": [
                    "str",
                    "None",
                    "list[str]"
                ],
                "apn": [
                    "str",
                    "None",
                    "list[str]"
                ]
            }
        },
        "list_apns": {
            "name": "list_apns",
            "location": 35,
            "return": [],
            "arguments": {
                "country": [
                    "str",
                    "dict[, ]",
                    "dict[str, set[str]]"
                ],
                "provider": [
                    "str",
                    "dict[, ]",
                    "dict[str, set[str]]"
                ]
            }
        },
        "list_providers": {
            "name": "list_providers",
            "location": 43,
            "return": [],
            "arguments": {
                "country": [
                    "str",
                    "dict[, ]",
                    "dict[str, set[str]]"
                ]
            }
        },
        "list_countries": {
            "name": "list_countries",
            "location": 51,
            "return": [],
            "arguments": {}
        }
    },
    "lokole-master/opwen_email_client/webapp/security.py": {
        "login_required": {
            "name": "login_required",
            "location": 9,
            "return": [
                "typing.Callable[, ]",
                "float"
            ],
            "arguments": {
                "func": [
                    "typing.Callable[, ]",
                    "float"
                ]
            }
        }
    },
    "lokole-master/opwen_email_client/webapp/session.py": {
        "track_history": {
            "name": "track_history",
            "location": 34,
            "return": [],
            "arguments": {
                "func": [
                    "typing.Callable[, ]"
                ]
            }
        },
        "Session._session": {
            "name": "_session",
            "location": 14,
            "return": [],
            "arguments": {
                "cls": [
                    "dict[, ]",
                    "str",
                    "bool",
                    "None"
                ]
            }
        },
        "Session.store_last_visited_url": {
            "name": "store_last_visited_url",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": []
            }
        },
        "Session.get_last_visited_url": {
            "name": "get_last_visited_url",
            "location": 22,
            "return": [],
            "arguments": {
                "cls": [
                    "str",
                    "dict[, ]",
                    "typing.Hashable",
                    "typing.Type",
                    "set[str]",
                    "None"
                ]
            }
        },
        "Session.store_current_language": {
            "name": "store_current_language",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [],
                "language": [
                    "str",
                    "int",
                    "dict[str, str]",
                    "typing.Any",
                    "None"
                ]
            }
        },
        "Session.get_current_language": {
            "name": "get_current_language",
            "location": 30,
            "return": [],
            "arguments": {
                "cls": [
                    "dict[, ]",
                    "typing.Type",
                    "str",
                    "typing.Sequence[]",
                    "set[str]",
                    "typing.Hashable"
                ]
            }
        },
        "track_history.history_tracker": {
            "name": "history_tracker",
            "location": 36,
            "return": [],
            "arguments": {}
        }
    },
    "lokole-master/opwen_email_client/webapp/tasks.py": {
        "setup_periodic_tasks": {
            "name": "setup_periodic_tasks",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "sender": [
                    "float"
                ]
            }
        },
        "sync": {
            "name": "sync",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "update": {
            "name": "update",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "register": {
            "name": "register",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "name": [
                    "str",
                    "None"
                ],
                "token": [
                    "str",
                    "None"
                ],
                "path": [
                    "str",
                    "None"
                ]
            }
        }
    },
    "lokole-master/opwen_email_client/webapp/views.py": {
        "favicon": {
            "name": "favicon",
            "location": 38,
            "return": [],
            "arguments": {}
        },
        "home": {
            "name": "home",
            "location": 49,
            "return": [],
            "arguments": {}
        },
        "about": {
            "name": "about",
            "location": 55,
            "return": [],
            "arguments": {}
        },
        "news": {
            "name": "news",
            "location": 62,
            "return": [],
            "arguments": {
                "page": [
                    "str",
                    "int"
                ]
            }
        },
        "email_inbox": {
            "name": "email_inbox",
            "location": 73,
            "return": [],
            "arguments": {
                "page": [
                    "int",
                    "None"
                ]
            }
        },
        "email_outbox": {
            "name": "email_outbox",
            "location": 84,
            "return": [],
            "arguments": {
                "page": [
                    "int",
                    "None"
                ]
            }
        },
        "email_sent": {
            "name": "email_sent",
            "location": 95,
            "return": [],
            "arguments": {
                "page": [
                    "int",
                    "None"
                ]
            }
        },
        "email_search": {
            "name": "email_search",
            "location": 106,
            "return": [],
            "arguments": {
                "page": [
                    "dict[str, typing.Any]",
                    "dict[str, dict[str, typing.Any]]",
                    "dict[, ]",
                    "str"
                ]
            }
        },
        "email_unread": {
            "name": "email_unread",
            "location": 119,
            "return": [],
            "arguments": {}
        },
        "email_read": {
            "name": "email_read",
            "location": 128,
            "return": [
                "Response"
            ],
            "arguments": {
                "email_uid": [
                    "str",
                    "int",
                    "dict[, ]"
                ]
            }
        },
        "email_delete": {
            "name": "email_delete",
            "location": 139,
            "return": [],
            "arguments": {
                "email_uid": [
                    "str",
                    "typing.Iterable[str]",
                    "bytes"
                ]
            }
        },
        "email_new": {
            "name": "email_new",
            "location": 151,
            "return": [],
            "arguments": {}
        },
        "download_attachment": {
            "name": "download_attachment",
            "location": 169,
            "return": [],
            "arguments": {
                "email_id": [
                    "str",
                    "int"
                ],
                "attachment_id": [
                    "str",
                    "int"
                ]
            }
        },
        "register_complete": {
            "name": "register_complete",
            "location": 185,
            "return": [],
            "arguments": {}
        },
        "login_complete": {
            "name": "login_complete",
            "location": 206,
            "return": [],
            "arguments": {}
        },
        "logout_complete": {
            "name": "logout_complete",
            "location": 220,
            "return": [],
            "arguments": {}
        },
        "sync": {
            "name": "sync",
            "location": 226,
            "return": [],
            "arguments": {}
        },
        "update": {
            "name": "update",
            "location": 238,
            "return": [],
            "arguments": {
                "version": [
                    "dict[, ]",
                    "dict[str, dict[str, typing.Any]]",
                    "dict[str, typing.Union[str,set[]]]",
                    "None"
                ]
            }
        },
        "language": {
            "name": "language",
            "location": 249,
            "return": [],
            "arguments": {
                "locale": [
                    "str",
                    "dict[, ]"
                ]
            }
        },
        "users": {
            "name": "users",
            "location": 264,
            "return": [],
            "arguments": {}
        },
        "settings": {
            "name": "settings",
            "location": 272,
            "return": [],
            "arguments": {}
        },
        "register": {
            "name": "register",
            "location": 289,
            "return": [],
            "arguments": {}
        },
        "suspend": {
            "name": "suspend",
            "location": 303,
            "return": [],
            "arguments": {
                "userid": [
                    "dict[, ]",
                    "int"
                ]
            }
        },
        "unsuspend": {
            "name": "unsuspend",
            "location": 328,
            "return": [],
            "arguments": {
                "userid": [
                    "dict[, ]",
                    "int"
                ]
            }
        },
        "promote": {
            "name": "promote",
            "location": 349,
            "return": [],
            "arguments": {
                "userid": [
                    "dict[, ]",
                    "int"
                ]
            }
        },
        "reset_password": {
            "name": "reset_password",
            "location": 374,
            "return": [],
            "arguments": {
                "userid": []
            }
        },
        "ping": {
            "name": "ping",
            "location": 401,
            "return": [],
            "arguments": {}
        },
        "_on_404": {
            "name": "_on_404",
            "location": 407,
            "return": [],
            "arguments": {
                "status_code": [
                    "int",
                    "None",
                    "str"
                ]
            }
        },
        "_on_exception": {
            "name": "_on_exception",
            "location": 414,
            "return": [],
            "arguments": {
                "exception": [
                    "Exception",
                    "str"
                ]
            }
        },
        "_on_500": {
            "name": "_on_500",
            "location": 424,
            "return": [],
            "arguments": {
                "status_code": [
                    "str",
                    "int"
                ]
            }
        },
        "_inject_config": {
            "name": "_inject_config",
            "location": 431,
            "return": [
                "dict[typing.Text, bool]"
            ],
            "arguments": {}
        },
        "_localeselector": {
            "name": "_localeselector",
            "location": 444,
            "return": [],
            "arguments": {}
        },
        "_emails_view": {
            "name": "_emails_view",
            "location": 453,
            "return": [],
            "arguments": {
                "emails": [
                    "str",
                    "dict[str, typing.Any]",
                    "dict[, ]",
                    "list[]"
                ],
                "page": [
                    "int"
                ],
                "template": [
                    "typing.Text"
                ]
            }
        },
        "_view": {
            "name": "_view",
            "location": 474,
            "return": [],
            "arguments": {
                "template": [
                    "int",
                    "str"
                ]
            }
        }
    },
    "lokole-master/opwen_email_client/webapp/__init__.py": {},
    "lokole-master/opwen_email_client/webapp/forms/email.py": {
        "_attachments_as_dict": {
            "name": "_attachments_as_dict",
            "location": 235,
            "return": [
                "typing.Generator[dict[typing.Union[typing.Text,typing.Text], ]]"
            ],
            "arguments": {
                "filestorages": [
                    "tuple[typing.Union[int,int]]",
                    "str",
                    "list[str]"
                ]
            }
        },
        "_format_attachment": {
            "name": "_format_attachment",
            "location": 248,
            "return": [
                "int",
                "tuple[typing.Union[int,int]]",
                "list[]",
                "list[int]",
                "bytes"
            ],
            "arguments": {
                "filename": [
                    "str",
                    "bool",
                    "typing.Type",
                    "None"
                ],
                "content": [
                    "int",
                    "tuple[typing.Union[int,int]]",
                    "list[]"
                ]
            }
        },
        "_is_already_small": {
            "name": "_is_already_small",
            "location": 260,
            "return": [
                "bool"
            ],
            "arguments": {
                "size": [
                    "tuple[typing.Union[int,int]]",
                    "int"
                ]
            }
        },
        "_change_image_size": {
            "name": "_change_image_size",
            "location": 265,
            "return": [
                "str",
                "int",
                "bytes",
                "bytearray",
                "typing.Type",
                "list[str]",
                "dict[int, tuple[typing.Union[str,str]]]"
            ],
            "arguments": {
                "image_content_bytes": [
                    "str",
                    "int",
                    "bytes",
                    "bytearray",
                    "typing.Type"
                ]
            }
        },
        "_is_local_message": {
            "name": "_is_local_message",
            "location": 282,
            "return": [
                "bool"
            ],
            "arguments": {
                "address": [
                    "str"
                ]
            }
        },
        "_join_emails": {
            "name": "_join_emails",
            "location": 287,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "_split_emails": {
            "name": "_split_emails",
            "location": 292,
            "return": [
                "list[]",
                "list[str]"
            ],
            "arguments": {
                "emails": [
                    "str"
                ]
            }
        },
        "NewEmailForm.as_dict": {
            "name": "as_dict",
            "location": 65,
            "return": [
                "dict[typing.Text, typing.Union[None,int,str,list[list[int]],list[str],bytes,dict[, ],typing.DefaultDict,list[tuple[typing.Union[str,typing.Any]]],list[dict[str, typing.Any]],list[]]]"
            ],
            "arguments": {
                "self": [],
                "email_store": [
                    "str",
                    "bool",
                    "typing.Iterable[tuple[typing.Union[typing.Hashable,typing.Any]]]",
                    "None"
                ]
            }
        },
        "NewEmailForm._populate": {
            "name": "_populate",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "user": [
                    "typing.Callable[[], None]",
                    "str",
                    "bool",
                    "typing.Iterable[str]"
                ],
                "email_store": [
                    "typing.Callable[[], None]",
                    "str",
                    "bool",
                    "typing.Iterable[str]"
                ]
            }
        },
        "NewEmailForm._new_instance_for": {
            "name": "_new_instance_for",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "int"
                ],
                "action_name": [
                    "str",
                    "bool",
                    "tuple[typing.Type]"
                ]
            }
        },
        "NewEmailForm._get_reference_email": {
            "name": "_get_reference_email",
            "location": 105,
            "return": [
                "None",
                "dict[, ]",
                "dict[str, typing.Union[typing.Any,typing.Any,str]]",
                "dict[typing.Any, dict[str, typing.Any]]",
                "dict[typing.Any, list[typing.Any]]",
                "dict[str, dict[str, typing.Any]]",
                "dict[str, dict[, ]]"
            ],
            "arguments": {
                "self": [],
                "email_store": [
                    "dict[, ]"
                ]
            }
        },
        "NewEmailForm._can_access": {
            "name": "_can_access",
            "location": 117,
            "return": [
                "bool"
            ],
            "arguments": {
                "cls": [
                    "typing.Match",
                    "typing.AbstractSet",
                    "dict[str, str]",
                    "bool"
                ],
                "user": [
                    "str",
                    "dict[str, typing.Any]",
                    "dict[str, tuple[typing.Union[typing.Any,typing.Any]]]",
                    "bool"
                ],
                "email": [
                    "dict[, ]"
                ]
            }
        },
        "NewEmailForm.from_request": {
            "name": "from_request",
            "location": 127,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [],
                "user": [
                    "dict[, ]",
                    "str",
                    "None",
                    "list[tuple[typing.Union[int,int]]]",
                    "typing.Callable[, ]"
                ],
                "email_store": [
                    "dict[, ]",
                    "str",
                    "None",
                    "list[tuple[typing.Union[int,int]]]",
                    "typing.Callable[, ]"
                ]
            }
        },
        "ToEmailForm._populate": {
            "name": "_populate",
            "location": 142,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "user": [
                    "typing.Callable[[], None]",
                    "str",
                    "bool",
                    "typing.Iterable[str]"
                ],
                "email_store": [
                    "typing.Callable[[], None]",
                    "str",
                    "bool",
                    "typing.Iterable[str]"
                ]
            }
        },
        "ReplyEmailForm._populate": {
            "name": "_populate",
            "location": 150,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "user": [
                    "typing.Callable[[], None]",
                    "str",
                    "bool",
                    "typing.Iterable[str]"
                ],
                "email_store": [
                    "str",
                    "bool",
                    "typing.Callable[, ]",
                    "dict[str, dict[str, typing.Any]]"
                ]
            }
        },
        "ReplyAllEmailForm._populate": {
            "name": "_populate",
            "location": 168,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "user": [
                    "str",
                    "None"
                ],
                "email_store": [
                    "str",
                    "bool",
                    "typing.Callable[, ]",
                    "dict[str, dict[str, typing.Any]]"
                ]
            }
        },
        "ForwardEmailForm._populate": {
            "name": "_populate",
            "location": 194,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "user": [
                    "typing.Callable[[], None]",
                    "str",
                    "bool",
                    "typing.Iterable[str]"
                ],
                "email_store": [
                    "str",
                    "bool",
                    "typing.Callable[, ]",
                    "dict[str, dict[str, typing.Any]]"
                ]
            }
        },
        "ForwardEmailForm._set_forwarded_attachments": {
            "name": "_set_forwarded_attachments",
            "location": 207,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "email": [
                    "dict[str, tuple[typing.Union[typing.Any,typing.Any]]]",
                    "dict[str, str]"
                ]
            }
        },
        "ForwardEmailForm.as_dict": {
            "name": "as_dict",
            "location": 219,
            "return": [],
            "arguments": {
                "self": [],
                "email_store": [
                    "str",
                    "dict[, ]",
                    "typing.MutableMapping",
                    "dict[str, str]"
                ]
            }
        }
    },
    "lokole-master/opwen_email_client/webapp/forms/login.py": {},
    "lokole-master/opwen_email_client/webapp/forms/register.py": {
        "RegisterForm.register_client": {
            "name": "register_client",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RegisterForm._setup_client": {
            "name": "_setup_client",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "dict[str, str]",
                    "str",
                    "int",
                    "dict[, ]"
                ]
            }
        }
    },
    "lokole-master/opwen_email_client/webapp/forms/settings.py": {
        "_get_wvdial_path": {
            "name": "_get_wvdial_path",
            "location": 101,
            "return": [],
            "arguments": {
                "sim_type": []
            }
        },
        "_read_wvdial": {
            "name": "_read_wvdial",
            "location": 105,
            "return": [],
            "arguments": {
                "path": []
            }
        },
        "SettingsForm.update": {
            "name": "update",
            "location": 31,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SettingsForm._update_wvdial": {
            "name": "_update_wvdial",
            "location": 42,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SettingsForm._update_code_version": {
            "name": "_update_code_version",
            "location": 54,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SettingsForm._update_sim_type": {
            "name": "_update_sim_type",
            "location": 62,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SettingsForm._update_sync_schedule": {
            "name": "_update_sync_schedule",
            "location": 70,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SettingsForm._update_config": {
            "name": "_update_config",
            "location": 79,
            "return": [],
            "arguments": {
                "cls": [],
                "env_key": [],
                "value": []
            }
        },
        "SettingsForm.from_config": {
            "name": "from_config",
            "location": 92,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "SettingsForm._update_config.is_env": {
            "name": "is_env",
            "location": 80,
            "return": [],
            "arguments": {
                "line": []
            }
        }
    },
    "lokole-master/opwen_email_client/webapp/forms/__init__.py": {},
    "lokole-master/opwen_email_server/actions.py": {
        "_Action.__call__": {
            "name": "__call__",
            "location": 38,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_Action._action": {
            "name": "_action",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Ping._action": {
            "name": "_action",
            "location": 51,
            "return": [
                "tuple[typing.Union[typing.Text,int]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SendOutboundEmails.__init__": {
            "name": "__init__",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "email_storage": [
                    "bool",
                    "str"
                ],
                "send_email": [
                    "bool",
                    "str"
                ]
            }
        },
        "SendOutboundEmails._action": {
            "name": "_action",
            "location": 61,
            "return": [
                "tuple[typing.Union[typing.Text,int]]"
            ],
            "arguments": {
                "self": [],
                "resource_id": [
                    "str",
                    "int"
                ]
            }
        },
        "StoreInboundEmails.__init__": {
            "name": "__init__",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "raw_email_storage": [
                    "bool",
                    "str",
                    "None"
                ],
                "email_storage": [
                    "bool",
                    "str",
                    "None",
                    "typing.Callable[, ]"
                ],
                "pending_storage": [
                    "bool",
                    "str",
                    "None",
                    "typing.Callable[, ]"
                ],
                "next_task": [
                    "str",
                    "int",
                    "None"
                ],
                "email_parser": [
                    "None",
                    "bool",
                    "typing.Callable[dict[, ], dict[, ]]",
                    "str"
                ]
            }
        },
        "StoreInboundEmails._action": {
            "name": "_action",
            "location": 86,
            "return": [
                "tuple[typing.Union[typing.Text,int]]"
            ],
            "arguments": {
                "self": [],
                "resource_id": [
                    "str",
                    "int",
                    "None"
                ]
            }
        },
        "StoreInboundEmails._store_inbound_email": {
            "name": "_store_inbound_email",
            "location": 102,
            "return": [
                "tuple[typing.Type]",
                "tuple[typing.Union[typing.Literal,typing.Literal,list[str]]]",
                "tuple[]",
                "typing.Counter",
                "set[]",
                "list[]"
            ],
            "arguments": {
                "self": [],
                "email": []
            }
        },
        "_IndexEmailForMailbox.__init__": {
            "name": "__init__",
            "location": 117,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "email_storage": [
                    "int",
                    "list[str]",
                    "float",
                    "str"
                ],
                "mailbox_storage": [
                    "int",
                    "list[str]",
                    "float",
                    "str"
                ]
            }
        },
        "_IndexEmailForMailbox._action": {
            "name": "_action",
            "location": 121,
            "return": [
                "tuple[typing.Union[typing.Text,int]]"
            ],
            "arguments": {
                "self": [],
                "resource_id": [
                    "str",
                    "int",
                    "None"
                ]
            }
        },
        "_IndexEmailForMailbox._folder": {
            "name": "_folder",
            "location": 135,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "_IndexEmailForMailbox._get_pivot": {
            "name": "_get_pivot",
            "location": 138,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "email": [
                    "dict[, ]",
                    "str",
                    "int",
                    "dict[str, typing.Any]",
                    "list[tuple[typing.Union[str,str]]]"
                ]
            }
        },
        "IndexReceivedEmailForMailbox._get_pivot": {
            "name": "_get_pivot",
            "location": 145,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "self": [],
                "email": [
                    "dict[, ]",
                    "str",
                    "float",
                    "int",
                    "None"
                ]
            }
        },
        "IndexSentEmailForMailbox._get_pivot": {
            "name": "_get_pivot",
            "location": 153,
            "return": [
                "typing.Generator[typing.Union[dict[str, tuple[typing.Union[str,typing.Any]]],dict[, ]]]"
            ],
            "arguments": {
                "self": [],
                "email": [
                    "dict[, ]"
                ]
            }
        },
        "StoreWrittenClientEmails.__init__": {
            "name": "__init__",
            "location": 160,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "client_storage": [
                    "str",
                    "bool",
                    "dict[str, str]",
                    "dict[, ]",
                    "None",
                    "typing.MutableMapping"
                ],
                "email_storage": [
                    "str",
                    "bool",
                    "dict[str, str]",
                    "dict[, ]",
                    "None",
                    "typing.MutableMapping"
                ],
                "user_storage": [
                    "int",
                    "str"
                ],
                "next_task": [
                    "str",
                    "bool",
                    "None"
                ]
            }
        },
        "StoreWrittenClientEmails._action": {
            "name": "_action",
            "location": 168,
            "return": [
                "tuple[typing.Union[typing.Text,int]]"
            ],
            "arguments": {
                "self": [],
                "resource_id": [
                    "str",
                    "typing.IO",
                    "bool",
                    "list[str]"
                ]
            }
        },
        "StoreWrittenClientEmails._store_emails": {
            "name": "_store_emails",
            "location": 175,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "resource_id": [
                    "str",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "StoreWrittenClientEmails._store_users": {
            "name": "_store_users",
            "location": 192,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "resource_id": [
                    "str",
                    "int",
                    "None"
                ]
            }
        },
        "StoreWrittenClientEmails._decode_attachments": {
            "name": "_decode_attachments",
            "location": 207,
            "return": [],
            "arguments": {
                "cls": [
                    "bool",
                    "str",
                    "list[tuple[typing.Union[str,typing.Any]]]",
                    "list[]",
                    "dict[, ]",
                    "typing.Callable[, ]"
                ],
                "email": []
            }
        },
        "ReceiveInboundEmail.__init__": {
            "name": "__init__",
            "location": 218,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "auth": [
                    "bool",
                    "dict[, ]",
                    "None",
                    "dict[str, tuple[typing.Union[str,str]]]",
                    "str"
                ],
                "raw_email_storage": [
                    "bool",
                    "None"
                ],
                "next_task": [
                    "str"
                ]
            }
        },
        "ReceiveInboundEmail._action": {
            "name": "_action",
            "location": 223,
            "return": [
                "tuple[typing.Union[typing.Text,int]]"
            ],
            "arguments": {
                "self": [],
                "client_id": [
                    "None",
                    "str",
                    "list[tuple[typing.Union[str,int]]]",
                    "int"
                ],
                "email": [
                    "None",
                    "str",
                    "int",
                    "float",
                    "list[str]"
                ]
            }
        },
        "ReceiveInboundEmail._new_email_id": {
            "name": "_new_email_id",
            "location": 242,
            "return": [],
            "arguments": {
                "cls": [
                    "str",
                    "dict[str, object]",
                    "bool"
                ],
                "email": [
                    "str"
                ]
            }
        },
        "ProcessServiceEmail.__init__": {
            "name": "__init__",
            "location": 247,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "raw_email_storage": [
                    "bool",
                    "str",
                    "None"
                ],
                "email_storage": [
                    "list[list[str]]",
                    "bool",
                    "str",
                    "None",
                    "typing.Mapping",
                    "typing.MutableMapping"
                ],
                "next_task": [
                    "bool",
                    "None",
                    "str"
                ],
                "registry": [
                    "list[list[str]]",
                    "bool",
                    "str",
                    "None",
                    "typing.Mapping",
                    "typing.MutableMapping"
                ],
                "email_parser": [
                    "None",
                    "bool",
                    "typing.Callable[dict[, ], dict[, ]]",
                    "str"
                ]
            }
        },
        "ProcessServiceEmail._action": {
            "name": "_action",
            "location": 260,
            "return": [
                "tuple[typing.Union[typing.Text,int]]"
            ],
            "arguments": {
                "self": [],
                "resource_id": [
                    "str",
                    "int",
                    "None"
                ]
            }
        },
        "DownloadClientEmails.__init__": {
            "name": "__init__",
            "location": 291,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "auth": [
                    "str",
                    "float",
                    "list[S]"
                ],
                "client_storage": [
                    "str",
                    "float",
                    "list[S]"
                ],
                "email_storage": [
                    "str",
                    "float",
                    "list[S]"
                ],
                "pending_storage": [
                    "str",
                    "float",
                    "list[S]"
                ]
            }
        },
        "DownloadClientEmails._action": {
            "name": "_action",
            "location": 299,
            "return": [
                "tuple[typing.Union[typing.Text,int]]",
                "dict[typing.Text, int]"
            ],
            "arguments": {
                "self": [],
                "client_id": [
                    "str",
                    "int"
                ],
                "compression": [
                    "int",
                    "str",
                    "bytes",
                    "typing.TextIO"
                ]
            }
        },
        "DownloadClientEmails._fetch_pending_emails": {
            "name": "_fetch_pending_emails",
            "location": 328,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "self": [],
                "domain": [
                    "int",
                    "str",
                    "float"
                ]
            }
        },
        "DownloadClientEmails._encode_attachments": {
            "name": "_encode_attachments",
            "location": 333,
            "return": [],
            "arguments": {
                "cls": [
                    "bool",
                    "str",
                    "list[tuple[typing.Union[str,typing.Any]]]",
                    "list[]",
                    "dict[, ]",
                    "typing.Callable[, ]"
                ],
                "email": []
            }
        },
        "DownloadClientEmails._mark_emails_as_delivered": {
            "name": "_mark_emails_as_delivered",
            "location": 343,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "domain": [
                    "str"
                ],
                "email_ids": [
                    "str"
                ]
            }
        },
        "UploadClientEmails.__init__": {
            "name": "__init__",
            "location": 349,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "auth": [
                    "str",
                    "int",
                    "dict[str, typing.Any]",
                    "None"
                ],
                "next_task": [
                    "dict[str, typing.Any]",
                    "str"
                ]
            }
        },
        "UploadClientEmails._action": {
            "name": "_action",
            "location": 353,
            "return": [
                "tuple[typing.Union[typing.Text,int]]"
            ],
            "arguments": {
                "self": [],
                "client_id": [
                    "str",
                    "list[tuple[typing.Union[str,int]]]"
                ],
                "upload_info": [
                    "str"
                ]
            }
        },
        "RegisterClient.__init__": {
            "name": "__init__",
            "location": 368,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "auth": [
                    "int",
                    "str",
                    "None",
                    "dict[str, str]"
                ],
                "client_storage": [
                    "int",
                    "str",
                    "None",
                    "dict[str, str]"
                ],
                "setup_mailbox": [
                    "int",
                    "str",
                    "None",
                    "dict[str, str]"
                ],
                "setup_mx_records": [
                    "int",
                    "str",
                    "None",
                    "dict[str, str]"
                ],
                "client_id_source": [
                    "dict[str, typing.Any]",
                    "str",
                    "dict[str, dict[str, typing.Any]]",
                    "dict[str, dict[str, str]]",
                    "typing.Callable[_, bool]",
                    "bool",
                    "None"
                ]
            }
        },
        "RegisterClient._action": {
            "name": "_action",
            "location": 376,
            "return": [
                "tuple[typing.Union[typing.Text,int]]"
            ],
            "arguments": {
                "self": [],
                "domain": [
                    "str",
                    "dict[, ]"
                ],
                "owner": [
                    "str",
                    "int"
                ]
            }
        },
        "CreateClient.__init__": {
            "name": "__init__",
            "location": 389,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "auth": [
                    "str",
                    "bool"
                ],
                "task": [
                    "str",
                    "typing.Sequence[dict[str, str]]",
                    "typing.Callable[dict[, ], None]",
                    "None",
                    "bool"
                ]
            }
        },
        "CreateClient._action": {
            "name": "_action",
            "location": 393,
            "return": [
                "tuple[typing.Union[typing.Text,int]]"
            ],
            "arguments": {
                "self": [],
                "client": [
                    "str",
                    "list[S]"
                ],
                "user": [
                    "str",
                    "list[dict[str, typing.Any]]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "ListClients.__init__": {
            "name": "__init__",
            "location": 407,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "auth": [
                    "bool",
                    "str",
                    "typing.Mapping"
                ]
            }
        },
        "ListClients._action": {
            "name": "_action",
            "location": 410,
            "return": [
                "dict[typing.Text, list[dict[typing.Text, ]]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "GetClient.__init__": {
            "name": "__init__",
            "location": 420,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "auth": [
                    "int"
                ],
                "client_storage": [
                    "int"
                ]
            }
        },
        "GetClient._action": {
            "name": "_action",
            "location": 424,
            "return": [
                "tuple[typing.Union[typing.Text,int]]",
                "dict[typing.Text, typing.Union[str,dict[str, typing.Any],dict[typing.Union[str,None], str],dict[str, bool],dict[, ],set[str],dict[str, str],typing.DefaultDict,None]]"
            ],
            "arguments": {
                "self": [],
                "domain": [
                    "str"
                ],
                "user": [
                    "str"
                ]
            }
        },
        "DeleteClient.__init__": {
            "name": "__init__",
            "location": 447,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "auth": [
                    "bool",
                    "None",
                    "typing.Mapping",
                    "dict[str, typing.Any]",
                    "typing.Type"
                ],
                "delete_mailbox": [
                    "bool",
                    "None",
                    "typing.Mapping",
                    "dict[str, typing.Any]",
                    "typing.Type"
                ],
                "delete_mx_records": [
                    "bool",
                    "None",
                    "typing.Mapping",
                    "dict[str, typing.Any]",
                    "typing.Type"
                ],
                "mailbox_storage": [
                    "bool",
                    "None",
                    "typing.Mapping",
                    "dict[str, typing.Any]",
                    "typing.Type"
                ],
                "pending_storage": [
                    "bool",
                    "None",
                    "typing.Mapping",
                    "dict[str, typing.Any]",
                    "typing.Type"
                ],
                "user_storage": [
                    "int",
                    "str"
                ]
            }
        },
        "DeleteClient._action": {
            "name": "_action",
            "location": 457,
            "return": [
                "tuple[typing.Union[typing.Text,int]]"
            ],
            "arguments": {
                "self": [],
                "domain": [
                    "str",
                    "dict[, ]"
                ],
                "user": [
                    "str"
                ]
            }
        },
        "DeleteClient._delete_index": {
            "name": "_delete_index",
            "location": 479,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "bool",
                    "typing.Callable[, ]"
                ],
                "storage": [],
                "domain": [
                    "str",
                    "bool",
                    "typing.Pattern",
                    "typing.Callable[, ]"
                ]
            }
        },
        "CalculateNumberOfUsersMetric.__init__": {
            "name": "__init__",
            "location": 485,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "auth": [
                    "str",
                    "bool",
                    "dict[, ]",
                    "typing.Sequence[dict[str, str]]"
                ],
                "user_storage": [
                    "int",
                    "str"
                ]
            }
        },
        "CalculateNumberOfUsersMetric._action": {
            "name": "_action",
            "location": 489,
            "return": [
                "tuple[typing.Union[typing.Text,int]]",
                "dict[typing.Text, int]"
            ],
            "arguments": {
                "self": [],
                "domain": [
                    "bool",
                    "str",
                    "None",
                    "list[]",
                    "typing.Mapping"
                ],
                "user": [
                    "str"
                ]
            }
        },
        "CalculatePendingEmailsMetric.__init__": {
            "name": "__init__",
            "location": 501,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "auth": [
                    "bool",
                    "str",
                    "typing.Mapping"
                ],
                "pending_storage": [
                    "bool",
                    "str",
                    "typing.Mapping"
                ]
            }
        },
        "CalculatePendingEmailsMetric._action": {
            "name": "_action",
            "location": 505,
            "return": [
                "tuple[typing.Union[typing.Text,int]]",
                "dict[typing.Text, int]"
            ],
            "arguments": {
                "self": [],
                "domain": [
                    "str",
                    "typing.Callable[[], None]"
                ],
                "user": [
                    "str"
                ]
            }
        },
        "DownloadClientEmails._action.mark_delivered": {
            "name": "mark_delivered",
            "location": 311,
            "return": [],
            "arguments": {
                "email": []
            }
        }
    },
    "lokole-master/opwen_email_server/config.py": {},
    "lokole-master/opwen_email_server/__init__.py": {},
    "lokole-master/opwen_email_server/constants/events.py": {},
    "lokole-master/opwen_email_server/constants/github.py": {},
    "lokole-master/opwen_email_server/constants/mailbox.py": {},
    "lokole-master/opwen_email_server/constants/sendgrid.py": {},
    "lokole-master/opwen_email_server/constants/sync.py": {},
    "lokole-master/opwen_email_server/constants/__init__.py": {},
    "lokole-master/opwen_email_server/integration/azure.py": {
        "get_no_auth": {
            "name": "get_no_auth",
            "location": 13,
            "return": [
                "NoAuth"
            ],
            "arguments": {}
        },
        "get_guid_source": {
            "name": "get_guid_source",
            "location": 18,
            "return": [
                "NewGuid"
            ],
            "arguments": {}
        },
        "get_auth": {
            "name": "get_auth",
            "location": 23,
            "return": [
                "AzureAuth"
            ],
            "arguments": {}
        },
        "get_client_storage": {
            "name": "get_client_storage",
            "location": 38,
            "return": [
                "AzureObjectsStorage"
            ],
            "arguments": {}
        },
        "get_raw_email_storage": {
            "name": "get_raw_email_storage",
            "location": 53,
            "return": [
                "AzureTextStorage"
            ],
            "arguments": {}
        },
        "get_email_storage": {
            "name": "get_email_storage",
            "location": 65,
            "return": [
                "AzureObjectStorage"
            ],
            "arguments": {}
        },
        "get_user_storage": {
            "name": "get_user_storage",
            "location": 77,
            "return": [
                "AzureObjectStorage"
            ],
            "arguments": {}
        },
        "get_mailbox_storage": {
            "name": "get_mailbox_storage",
            "location": 90,
            "return": [
                "AzureTextStorage"
            ],
            "arguments": {}
        },
        "get_pending_storage": {
            "name": "get_pending_storage",
            "location": 103,
            "return": [
                "AzureTextStorage"
            ],
            "arguments": {}
        }
    },
    "lokole-master/opwen_email_server/integration/celery.py": {
        "register_client": {
            "name": "register_client",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "domain": [
                    "str"
                ],
                "owner": [
                    "str"
                ]
            }
        },
        "index_received_email_for_mailbox": {
            "name": "index_received_email_for_mailbox",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "resource_id": [
                    "str"
                ]
            }
        },
        "index_sent_email_for_mailbox": {
            "name": "index_sent_email_for_mailbox",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "resource_id": [
                    "str"
                ]
            }
        },
        "inbound_store": {
            "name": "inbound_store",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "resource_id": [
                    "str"
                ]
            }
        },
        "send_and_index_email": {
            "name": "send_and_index_email",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "resource_id": [
                    "str",
                    "int",
                    "None"
                ]
            }
        },
        "written_store": {
            "name": "written_store",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {
                "resource_id": [
                    "str"
                ]
            }
        },
        "send": {
            "name": "send",
            "location": 99,
            "return": [
                "None"
            ],
            "arguments": {
                "resource_id": [
                    "str"
                ]
            }
        },
        "process_service_email": {
            "name": "process_service_email",
            "location": 109,
            "return": [
                "None"
            ],
            "arguments": {
                "resource_id": [
                    "str"
                ]
            }
        },
        "_fqn": {
            "name": "_fqn",
            "location": 120,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "task": [
                    "dict[, ]",
                    "collections.abc.Awaitable[]",
                    "str",
                    "dict[str, str]"
                ]
            }
        }
    },
    "lokole-master/opwen_email_server/integration/cli.py": {
        "cli": {
            "name": "cli",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "print_queues": {
            "name": "print_queues",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "separator": [
                    "str"
                ]
            }
        },
        "delete_queues": {
            "name": "delete_queues",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "suffix": [
                    "str"
                ]
            }
        },
        "delete_containers": {
            "name": "delete_containers",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "suffix": [
                    "list[]",
                    "list[str]",
                    "bool"
                ]
            }
        }
    },
    "lokole-master/opwen_email_server/integration/connexion.py": {},
    "lokole-master/opwen_email_server/integration/webapp.py": {
        "AzureRole.__init__": {
            "name": "__init__",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AzureUser.__init__": {
            "name": "__init__",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AzureUser.__getattr__": {
            "name": "__getattr__",
            "location": 43,
            "return": [],
            "arguments": {
                "self": [],
                "item": [
                    "str",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "AzureUser.__setattr__": {
            "name": "__setattr__",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str"
                ],
                "value": [
                    "str"
                ]
            }
        },
        "AzureUser.id": {
            "name": "id",
            "location": 52,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AzureUser.email": {
            "name": "email",
            "location": 56,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AzureUser.password": {
            "name": "password",
            "location": 60,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AzureUser.roles": {
            "name": "roles",
            "location": 64,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "AzureUser.active": {
            "name": "active",
            "location": 68,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "AzureUser.is_admin": {
            "name": "is_admin",
            "location": 72,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "AzureUserStore.__init__": {
            "name": "__init__",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "user_storage": [
                    "int",
                    "None",
                    "list[U]",
                    "str"
                ]
            }
        },
        "AzureUserStore.init_app": {
            "name": "init_app",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "app": [
                    "bool"
                ]
            }
        },
        "AzureUserStore.fetch_all": {
            "name": "fetch_all",
            "location": 86,
            "return": [
                "list[typing.Union[list[],int,dict[, ]]]"
            ],
            "arguments": {
                "self": [],
                "user": [
                    "int"
                ]
            }
        },
        "AzureUserStore.fetch_pending": {
            "name": "fetch_pending",
            "location": 94,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "AzureUserStore.get_user": {
            "name": "get_user",
            "location": 97,
            "return": [
                "None",
                "AzureUser"
            ],
            "arguments": {
                "self": [],
                "id_or_email": [
                    "str",
                    "bool",
                    "dict[str, str]",
                    "list[str]",
                    "None"
                ]
            }
        },
        "AzureUserStore.find_user": {
            "name": "find_user",
            "location": 105,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AzureUserStore.find_role": {
            "name": "find_role",
            "location": 112,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AzureUserStore.put": {
            "name": "put",
            "location": 115,
            "return": [
                "None",
                "typing.Optional[]",
                "str",
                "dict[str, str]"
            ],
            "arguments": {
                "self": [],
                "user": [
                    "None",
                    "typing.Optional[]",
                    "str",
                    "dict[str, str]"
                ]
            }
        },
        "AzureUserStore.commit": {
            "name": "commit",
            "location": 118,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AzureUserStore.delete": {
            "name": "delete",
            "location": 121,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "user": [
                    "str",
                    "bytes",
                    "dict[str, typing.Any]",
                    "None"
                ]
            }
        },
        "AzureUserStore._path_for": {
            "name": "_path_for",
            "location": 125,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "bool",
                    "typing.Iterable[str]"
                ],
                "email": [
                    "str",
                    "dict[str, typing.Any]",
                    "list[str]",
                    "bool"
                ]
            }
        },
        "AzureEmailStore.__init__": {
            "name": "__init__",
            "location": 130,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "email_storage": [
                    "bool",
                    "list[C]"
                ],
                "mailbox_storage": [
                    "bool",
                    "list[C]"
                ],
                "pending_storage": [
                    "bool",
                    "list[C]"
                ],
                "send_email": [
                    "bool",
                    "list[C]"
                ]
            }
        },
        "AzureEmailStore._create": {
            "name": "_create",
            "location": 138,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "emails_or_attachments": []
            }
        },
        "AzureEmailStore.get": {
            "name": "get",
            "location": 154,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "uid": [
                    "str",
                    "bool"
                ]
            }
        },
        "AzureEmailStore.get_attachment": {
            "name": "get_attachment",
            "location": 167,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "email_id": [
                    "str"
                ],
                "attachment_id": []
            }
        },
        "AzureEmailStore.inbox": {
            "name": "inbox",
            "location": 182,
            "return": [],
            "arguments": {
                "self": [],
                "email_address": [
                    "str",
                    "float",
                    "None"
                ],
                "page": [
                    "str",
                    "float",
                    "None"
                ]
            }
        },
        "AzureEmailStore.sent": {
            "name": "sent",
            "location": 185,
            "return": [],
            "arguments": {
                "self": [],
                "email_address": [
                    "str",
                    "float",
                    "None"
                ],
                "page": [
                    "str",
                    "float",
                    "None"
                ]
            }
        },
        "AzureEmailStore._iter_mailbox": {
            "name": "_iter_mailbox",
            "location": 188,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "self": [],
                "email_address": [
                    "str"
                ],
                "page": [
                    "typing.Type",
                    "str"
                ],
                "folder": [
                    "str"
                ]
            }
        },
        "AzureEmailStore.search": {
            "name": "search",
            "location": 200,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": [],
                "email_address": [
                    "str",
                    "None",
                    "int",
                    "float"
                ],
                "page": [
                    "str",
                    "None",
                    "int",
                    "float"
                ],
                "query": [
                    "str",
                    "None",
                    "int",
                    "float"
                ]
            }
        },
        "AzureEmailStore.outbox": {
            "name": "outbox",
            "location": 203,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": [],
                "email_address": [
                    "str",
                    "int",
                    "typing.Iterable[str]"
                ],
                "page": [
                    "str",
                    "int",
                    "typing.Iterable[str]"
                ]
            }
        },
        "AzureEmailStore.pending": {
            "name": "pending",
            "location": 206,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": [],
                "page": [
                    "int",
                    "str",
                    "typing.Iterable[C]"
                ]
            }
        },
        "AzureEmailStore.has_unread": {
            "name": "has_unread",
            "location": 209,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "email_address": [
                    "str",
                    "int",
                    "typing.Iterable[str]"
                ]
            }
        },
        "AzureEmailStore.num_pending": {
            "name": "num_pending",
            "location": 212,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "AzureEmailStore._delete": {
            "name": "_delete",
            "location": 215,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "email_address": [
                    "str",
                    "None"
                ],
                "uids": [
                    "str"
                ]
            }
        },
        "AzureEmailStore._mark_sent": {
            "name": "_mark_sent",
            "location": 234,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "uids": [
                    "int",
                    "str",
                    "typing.Iterable[C]"
                ]
            }
        },
        "AzureEmailStore._mark_read": {
            "name": "_mark_read",
            "location": 237,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "email_address": [
                    "str",
                    "int",
                    "typing.Iterable[str]"
                ],
                "uids": [
                    "str",
                    "int",
                    "typing.Iterable[str]"
                ]
            }
        },
        "NoSync.upload": {
            "name": "upload",
            "location": 242,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": [],
                "items": [
                    "typing.Iterable[T]",
                    "typing.Iterable[str]",
                    "str",
                    "None",
                    "bool"
                ],
                "users": [
                    "typing.Iterable[T]",
                    "typing.Iterable[str]",
                    "str",
                    "None",
                    "bool"
                ]
            }
        },
        "NoSync.download": {
            "name": "download",
            "location": 245,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "AzureIoc.email_store": {
            "name": "email_store",
            "location": 251,
            "return": [
                "AzureEmailStore"
            ],
            "arguments": {
                "self": []
            }
        },
        "AzureIoc.email_sync": {
            "name": "email_sync",
            "location": 260,
            "return": [
                "NoSync"
            ],
            "arguments": {
                "self": []
            }
        },
        "AzureIoc.user_store": {
            "name": "user_store",
            "location": 264,
            "return": [
                "AzureUserStore"
            ],
            "arguments": {
                "self": []
            }
        },
        "AzureIoc.login_form": {
            "name": "login_form",
            "location": 268,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "lokole-master/opwen_email_server/integration/wsgi.py": {
        "build_app": {
            "name": "build_app",
            "location": 17,
            "return": [],
            "arguments": {
                "apis": [],
                "host": [
                    "typing.Text"
                ],
                "port": [
                    "int"
                ],
                "ui": [
                    "bool"
                ]
            }
        },
        "_configure_flask": {
            "name": "_configure_flask",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "app": []
            }
        },
        "_cli": {
            "name": "_cli",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "lokole-master/opwen_email_server/integration/__init__.py": {},
    "lokole-master/opwen_email_server/mailers/echo.py": {
        "EchoEmailFormatter.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "now": []
            }
        },
        "EchoEmailFormatter.__call__": {
            "name": "__call__",
            "location": 13,
            "return": [],
            "arguments": {
                "self": [],
                "email": []
            }
        }
    },
    "lokole-master/opwen_email_server/mailers/wikipedia.py": {
        "WikipediaEmailFormatter.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "languages_getter": [],
                "language_setter": [],
                "page_fetch": [],
                "now": []
            }
        },
        "WikipediaEmailFormatter._get_download_link": {
            "name": "_get_download_link",
            "location": 29,
            "return": [],
            "arguments": {
                "self": [],
                "url": [
                    "str"
                ]
            }
        },
        "WikipediaEmailFormatter.__call__": {
            "name": "__call__",
            "location": 33,
            "return": [],
            "arguments": {
                "self": [],
                "email": []
            }
        }
    },
    "lokole-master/opwen_email_server/mailers/__init__.py": {},
    "lokole-master/opwen_email_server/services/auth.py": {
        "BasicAuth.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "users": [
                    "typing.Mapping",
                    "dict[, ]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "BasicAuth.__call__": {
            "name": "__call__",
            "location": 19,
            "return": [
                "None",
                "dict[typing.Text, dict[typing.Text, typing.Union[str,None,bool,float]]]"
            ],
            "arguments": {
                "self": [],
                "username": [
                    "str",
                    "None",
                    "bool",
                    "float"
                ],
                "password": [
                    "str"
                ],
                "required_scopes": [
                    "None",
                    "str",
                    "bool"
                ]
            }
        },
        "GithubAuth.__init__": {
            "name": "__init__",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "organization": [
                    "int",
                    "str",
                    "list[int]",
                    "float"
                ],
                "page_size": [
                    "int"
                ]
            }
        },
        "GithubAuth.__call__": {
            "name": "__call__",
            "location": 43,
            "return": [
                "None",
                "dict[typing.Text, typing.Union[dict[typing.Text, list[]],list[]]]"
            ],
            "arguments": {
                "self": [],
                "access_token": [
                    "str",
                    "tuple[]",
                    "int"
                ],
                "required_scopes": [
                    "None",
                    "str",
                    "dict[str, typing.Any]",
                    "typing.Mapping"
                ]
            }
        },
        "GithubAuth._query_github": {
            "name": "_query_github",
            "location": 57,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "self": [],
                "access_token": [
                    "str",
                    "typing.Callable[[], bool]",
                    "tuple[typing.Union[int,int]]"
                ]
            }
        },
        "Auth.insert": {
            "name": "insert",
            "location": 110,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "client_id": [
                    "str",
                    "dict[, ]"
                ],
                "domain": [
                    "str",
                    "dict[, ]"
                ],
                "owner": [
                    "str",
                    "dict[, ]"
                ]
            }
        },
        "Auth.delete": {
            "name": "delete",
            "location": 113,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "client_id": [
                    "str",
                    "int"
                ],
                "domain": [
                    "str",
                    "int"
                ]
            }
        },
        "Auth.is_owner": {
            "name": "is_owner",
            "location": 116,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "domain": [
                    "str",
                    "dict[, ]",
                    "bool",
                    "None"
                ],
                "user": [
                    "str",
                    "dict[, ]",
                    "bool",
                    "None"
                ]
            }
        },
        "Auth.client_id_for": {
            "name": "client_id_for",
            "location": 119,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "domain": [
                    "str",
                    "list[str]",
                    "tuple[typing.Union[str,str]]"
                ]
            }
        },
        "Auth.domain_for": {
            "name": "domain_for",
            "location": 122,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "client_id": [
                    "str",
                    "int"
                ]
            }
        },
        "Auth.domains": {
            "name": "domains",
            "location": 125,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AzureAuth.__init__": {
            "name": "__init__",
            "location": 130,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "storage": [
                    "int",
                    "float"
                ],
                "sudo_scope": [
                    "int",
                    "float"
                ]
            }
        },
        "AzureAuth.insert": {
            "name": "insert",
            "location": 134,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "client_id": [
                    "str"
                ],
                "domain": [
                    "str",
                    "int"
                ],
                "owner": [
                    "str"
                ]
            }
        },
        "AzureAuth.is_owner": {
            "name": "is_owner",
            "location": 140,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "domain": [
                    "str"
                ],
                "user": []
            }
        },
        "AzureAuth.delete": {
            "name": "delete",
            "location": 152,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "client_id": [
                    "str",
                    "int",
                    "typing.Callable[, ]"
                ],
                "domain": [
                    "str",
                    "dict[, ]",
                    "bool",
                    "list[str]"
                ]
            }
        },
        "AzureAuth.client_id_for": {
            "name": "client_id_for",
            "location": 157,
            "return": [
                "None",
                "str"
            ],
            "arguments": {
                "self": [],
                "domain": [
                    "str"
                ]
            }
        },
        "AzureAuth.domain_for": {
            "name": "domain_for",
            "location": 169,
            "return": [
                "None",
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "client_id": [
                    "str"
                ]
            }
        },
        "AzureAuth.domains": {
            "name": "domains",
            "location": 180,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AzureAuth._domain_file": {
            "name": "_domain_file",
            "location": 184,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "bool",
                    "list[str]",
                    "Exception"
                ],
                "domain": [
                    "str",
                    "bool",
                    "list[str]",
                    "Exception"
                ]
            }
        },
        "AzureAuth._client_id_file": {
            "name": "_client_id_file",
            "location": 188,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "list[dict[str, typing.Any]]",
                    "list[]",
                    "list[str]",
                    "list[dict[str, str]]",
                    "int",
                    "None"
                ],
                "client_id": [
                    "str",
                    "list[dict[str, typing.Any]]",
                    "list[]",
                    "list[str]",
                    "list[dict[str, str]]",
                    "int",
                    "None"
                ]
            }
        },
        "NoAuth.__init__": {
            "name": "__init__",
            "location": 193,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "client_id": [
                    "typing.Text"
                ],
                "domain": [
                    "typing.Text"
                ]
            }
        },
        "NoAuth.insert": {
            "name": "insert",
            "location": 197,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "client_id": [
                    "str",
                    "dict[, ]"
                ],
                "domain": [
                    "str",
                    "dict[, ]"
                ],
                "owner": [
                    "str",
                    "dict[, ]"
                ]
            }
        },
        "NoAuth.delete": {
            "name": "delete",
            "location": 200,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "client_id": [
                    "str",
                    "int"
                ],
                "domain": [
                    "str",
                    "int"
                ]
            }
        },
        "NoAuth.client_id_for": {
            "name": "client_id_for",
            "location": 203,
            "return": [],
            "arguments": {
                "self": [],
                "domain": [
                    "str",
                    "list[str]",
                    "tuple[typing.Union[str,str]]"
                ]
            }
        },
        "NoAuth.domains": {
            "name": "domains",
            "location": 206,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "NoAuth.is_owner": {
            "name": "is_owner",
            "location": 209,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "domain": [
                    "str",
                    "dict[, ]",
                    "bool",
                    "None"
                ],
                "user": [
                    "str",
                    "dict[, ]",
                    "bool",
                    "None"
                ]
            }
        },
        "NoAuth.domain_for": {
            "name": "domain_for",
            "location": 212,
            "return": [],
            "arguments": {
                "self": [],
                "client_id": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "lokole-master/opwen_email_server/services/dns.py": {
        "_MxRecords.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "account": [
                    "str",
                    "int",
                    "None",
                    "dict[, ]",
                    "dict[str, str]"
                ],
                "secret": [
                    "list[dict[str, typing.Any]]",
                    "str",
                    "int",
                    "list[str]",
                    "typing.Pattern",
                    "typing.Mapping",
                    "None",
                    "typing.Callable[[], bool]"
                ],
                "provider": [
                    "str"
                ]
            }
        },
        "_MxRecords._driver": {
            "name": "_driver",
            "location": 20,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_MxRecords.__call__": {
            "name": "__call__",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "domain": []
            }
        },
        "_MxRecords._run": {
            "name": "_run",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "client_name": [
                    "str",
                    "list[tuple[typing.Union[str,str]]]",
                    "bytes"
                ],
                "zone": [
                    "str",
                    "list[tuple[typing.Union[str,str]]]",
                    "bytes"
                ]
            }
        },
        "DeleteMxRecords._run": {
            "name": "_run",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "client_name": [
                    "str",
                    "float",
                    "None"
                ],
                "zone": [
                    "str",
                    "float",
                    "None"
                ]
            }
        },
        "SetupMxRecords._run": {
            "name": "_run",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "client_name": [
                    "str"
                ],
                "zone": [
                    "str"
                ]
            }
        }
    },
    "lokole-master/opwen_email_server/services/sendgrid.py": {
        "SendSendgridEmail.__init__": {
            "name": "__init__",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "int",
                    "list[str]",
                    "bytes"
                ],
                "sandbox": [
                    "bool"
                ]
            }
        },
        "SendSendgridEmail._client": {
            "name": "_client",
            "location": 33,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SendSendgridEmail.__call__": {
            "name": "__call__",
            "location": 56,
            "return": [],
            "arguments": {
                "self": [],
                "email": [
                    "dict[typing.Hashable, typing.Any]"
                ]
            }
        },
        "SendSendgridEmail._send_email": {
            "name": "_send_email",
            "location": 61,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "email": [
                    "str",
                    "int"
                ],
                "email_id": [
                    "str",
                    "int"
                ]
            }
        },
        "SendSendgridEmail._create_email": {
            "name": "_create_email",
            "location": 77,
            "return": [
                "Mail"
            ],
            "arguments": {
                "self": [],
                "email": [
                    "dict[, ]"
                ],
                "email_id": [
                    "str",
                    "int"
                ]
            }
        },
        "SendSendgridEmail._create_attachment": {
            "name": "_create_attachment",
            "location": 131,
            "return": [
                "Attachment"
            ],
            "arguments": {
                "cls": [
                    "typing.Type",
                    "int",
                    "dict[str, str]",
                    "dict[str, bool]",
                    "str"
                ],
                "attachment": [
                    "dict[str, typing.Any]"
                ]
            }
        },
        "_SendgridManagement.__init__": {
            "name": "__init__",
            "location": 145,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "int",
                    "list[str]",
                    "bytes"
                ]
            }
        },
        "_SendgridManagement.__call__": {
            "name": "__call__",
            "location": 148,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "client_id": [
                    "str",
                    "None",
                    "dict[, ]",
                    "int"
                ],
                "domain": [
                    "str",
                    "int",
                    "None"
                ]
            }
        },
        "_SendgridManagement._run": {
            "name": "_run",
            "location": 155,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "client_id": [
                    "str",
                    "int",
                    "dict[, ]"
                ],
                "domain": [
                    "str",
                    "int",
                    "dict[, ]"
                ]
            }
        },
        "DeleteSendgridMailbox._run": {
            "name": "_run",
            "location": 160,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "client_id": [
                    "str",
                    "int",
                    "dict[, ]"
                ],
                "domain": [
                    "str"
                ]
            }
        },
        "SetupSendgridMailbox.__init__": {
            "name": "__init__",
            "location": 175,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "typing.Callable[[], T]",
                    "typing.Mapping",
                    "list[L]",
                    "int"
                ],
                "max_retries": [
                    "int"
                ],
                "retry_interval_seconds": [
                    "str",
                    "bytes",
                    "int",
                    "None"
                ]
            }
        },
        "SetupSendgridMailbox._run": {
            "name": "_run",
            "location": 180,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "client_id": [
                    "str",
                    "None"
                ],
                "domain": [
                    "str"
                ]
            }
        },
        "SendSendgridEmail._client.send_email": {
            "name": "send_email",
            "location": 44,
            "return": [],
            "arguments": {
                "email": []
            }
        },
        "SendSendgridEmail._client.send_email_fake": {
            "name": "send_email_fake",
            "location": 36,
            "return": [
                "int"
            ],
            "arguments": {
                "email": []
            }
        }
    },
    "lokole-master/opwen_email_server/services/storage.py": {
        "_Container.__init__": {
            "name": "__init__",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "wrapped": [
                    "int",
                    "float"
                ]
            }
        },
        "_Container.get_object": {
            "name": "get_object",
            "location": 42,
            "return": [],
            "arguments": {
                "self": [],
                "object_name": [
                    "str"
                ]
            }
        },
        "_Container.iterate_objects": {
            "name": "iterate_objects",
            "location": 45,
            "return": [],
            "arguments": {
                "self": [],
                "prefix": [
                    "None",
                    "str",
                    "int"
                ]
            }
        },
        "_Container.upload_object": {
            "name": "upload_object",
            "location": 48,
            "return": [],
            "arguments": {
                "self": [],
                "file_path": [
                    "str"
                ],
                "object_name": [
                    "str"
                ]
            }
        },
        "_Container.upload_object_via_stream": {
            "name": "upload_object_via_stream",
            "location": 51,
            "return": [],
            "arguments": {
                "self": [],
                "iterator": [
                    "typing.Iterator",
                    "str",
                    "bool"
                ],
                "object_name": [
                    "typing.Iterator",
                    "str",
                    "bool"
                ]
            }
        },
        "_CaseInsensitiveContainer.get_object": {
            "name": "get_object",
            "location": 56,
            "return": [],
            "arguments": {
                "self": [],
                "object_name": [
                    "str"
                ]
            }
        },
        "_CaseInsensitiveContainer.iterate_objects": {
            "name": "iterate_objects",
            "location": 60,
            "return": [],
            "arguments": {
                "self": [],
                "prefix": [
                    "None",
                    "str",
                    "typing.Callable[typing.Mapping, collections.abc.Awaitable[]]"
                ]
            }
        },
        "_CaseInsensitiveContainer.upload_object": {
            "name": "upload_object",
            "location": 64,
            "return": [],
            "arguments": {
                "self": [],
                "file_path": [
                    "str"
                ],
                "object_name": [
                    "str"
                ]
            }
        },
        "_CaseInsensitiveContainer.upload_object_via_stream": {
            "name": "upload_object_via_stream",
            "location": 68,
            "return": [],
            "arguments": {
                "self": [],
                "iterator": [
                    "typing.Iterator",
                    "str",
                    "bool"
                ],
                "object_name": [
                    "str"
                ]
            }
        },
        "_BaseAzureStorage.__init__": {
            "name": "__init__",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "account": [
                    "str",
                    "bool"
                ],
                "key": [
                    "str"
                ],
                "container": [
                    "str",
                    "bool"
                ],
                "provider": [
                    "str",
                    "None"
                ],
                "host": [
                    "None",
                    "str"
                ],
                "secure": [
                    "bool"
                ],
                "case_sensitive": [
                    "bool"
                ]
            }
        },
        "_BaseAzureStorage._driver": {
            "name": "_driver",
            "location": 91,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_BaseAzureStorage._client": {
            "name": "_client",
            "location": 96,
            "return": [
                "_Container",
                "_CaseInsensitiveContainer"
            ],
            "arguments": {
                "self": []
            }
        },
        "_BaseAzureStorage._generated_suffix": {
            "name": "_generated_suffix",
            "location": 107,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "_BaseAzureStorage.access_info": {
            "name": "access_info",
            "location": 110,
            "return": [
                "AccessInfo"
            ],
            "arguments": {
                "self": []
            }
        },
        "_BaseAzureStorage.ensure_exists": {
            "name": "ensure_exists",
            "location": 117,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "_BaseAzureStorage.delete": {
            "name": "delete",
            "location": 121,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "resource_id": [
                    "str",
                    "int",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "_BaseAzureStorage.iter": {
            "name": "iter",
            "location": 130,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "self": [],
                "prefix": [
                    "None"
                ]
            }
        },
        "AzureFileStorage.store_file": {
            "name": "store_file",
            "location": 147,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "resource_id": [
                    "str"
                ],
                "path": [
                    "str"
                ]
            }
        },
        "AzureFileStorage.fetch_file": {
            "name": "fetch_file",
            "location": 151,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "resource_id": [
                    "str",
                    "None",
                    "bool"
                ]
            }
        },
        "_AzureBytesStorage.store_bytes": {
            "name": "store_bytes",
            "location": 162,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "resource_id": [
                    "str"
                ],
                "content": []
            }
        },
        "_AzureBytesStorage.fetch_bytes": {
            "name": "fetch_bytes",
            "location": 170,
            "return": [],
            "arguments": {
                "self": [],
                "resource_id": [
                    "str",
                    "bytes"
                ]
            }
        },
        "_AzureBytesStorage.delete": {
            "name": "delete",
            "location": 181,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "resource_id": [
                    "str"
                ]
            }
        },
        "_AzureBytesStorage._to_filename": {
            "name": "_to_filename",
            "location": 185,
            "return": [
                "str",
                "typing.Text"
            ],
            "arguments": {
                "self": [],
                "resource_id": [
                    "str"
                ]
            }
        },
        "_AzureBytesStorage._generated_suffix": {
            "name": "_generated_suffix",
            "location": 191,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "_AzureBytesStorage._extension": {
            "name": "_extension",
            "location": 195,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AzureTextStorage.store_text": {
            "name": "store_text",
            "location": 203,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "resource_id": [
                    "str"
                ],
                "text": [
                    "str"
                ]
            }
        },
        "AzureTextStorage.fetch_text": {
            "name": "fetch_text",
            "location": 207,
            "return": [],
            "arguments": {
                "self": [],
                "resource_id": [
                    "str",
                    "None",
                    "bytes",
                    "int"
                ]
            }
        },
        "AzureObjectsStorage.__init__": {
            "name": "__init__",
            "location": 216,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "file_storage": [
                    "str"
                ],
                "resource_id_source": [
                    "bool",
                    "str",
                    "dict[, ]",
                    "None",
                    "list[str]",
                    "list[dict[str, typing.Any]]"
                ]
            }
        },
        "AzureObjectsStorage._open_archive_file": {
            "name": "_open_archive_file",
            "location": 220,
            "return": [
                "str",
                "typing.Type",
                "bool",
                "None"
            ],
            "arguments": {
                "self": [],
                "archive": [],
                "name": [
                    "str",
                    "int"
                ]
            }
        },
        "AzureObjectsStorage._open_archive": {
            "name": "_open_archive",
            "location": 235,
            "return": [],
            "arguments": {
                "cls": [
                    "int",
                    "list[str]",
                    "str",
                    "typing.Callable[, ]",
                    "None",
                    "list[T]"
                ],
                "path": [
                    "str"
                ],
                "mode": [
                    "str",
                    "set[str]"
                ]
            }
        },
        "AzureObjectsStorage.access_info": {
            "name": "access_info",
            "location": 249,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AzureObjectsStorage.ensure_exists": {
            "name": "ensure_exists",
            "location": 252,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AzureObjectsStorage.compression_formats": {
            "name": "compression_formats",
            "location": 256,
            "return": [],
            "arguments": {
                "cls": [
                    "memoryview",
                    "bool",
                    "str"
                ]
            }
        },
        "AzureObjectsStorage.store_objects": {
            "name": "store_objects",
            "location": 259,
            "return": [
                "typing.Text",
                "None"
            ],
            "arguments": {
                "self": [],
                "upload": [
                    "str",
                    "float",
                    "int"
                ],
                "compression": [
                    "None",
                    "str",
                    "bytes",
                    "typing.TextIO"
                ]
            }
        },
        "AzureObjectsStorage.fetch_objects": {
            "name": "fetch_objects",
            "location": 288,
            "return": [
                "typing.Generator[typing.Union[str,dict[str, str],dict[str, float],dict[, ],None]]"
            ],
            "arguments": {
                "self": [],
                "resource_id": [
                    "str",
                    "int"
                ],
                "download": [
                    "int",
                    "str",
                    "set[str]"
                ]
            }
        },
        "AzureObjectsStorage.delete": {
            "name": "delete",
            "location": 304,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "resource_id": [
                    "str",
                    "typing.MutableSequence",
                    "None",
                    "int"
                ]
            }
        },
        "AzureObjectStorage.fetch_object": {
            "name": "fetch_object",
            "location": 311,
            "return": [],
            "arguments": {
                "self": [],
                "resource_id": [
                    "str",
                    "None",
                    "bytes",
                    "int"
                ]
            }
        },
        "AzureObjectStorage.store_object": {
            "name": "store_object",
            "location": 315,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "resource_id": [
                    "str",
                    "int"
                ],
                "obj": [
                    "dict[, ]",
                    "int",
                    "dict[str, int]",
                    "str"
                ]
            }
        }
    },
    "lokole-master/opwen_email_server/services/__init__.py": {},
    "lokole-master/opwen_email_server/utils/collections.py": {
        "to_iterable": {
            "name": "to_iterable",
            "location": 11,
            "return": [
                "typing.Generator[typing.Union[dict[, ],typing.IO,list[str],int,typing.Iterator]]"
            ],
            "arguments": {
                "obj": [
                    "dict[, ]",
                    "typing.IO",
                    "list[str]",
                    "int",
                    "typing.Iterator"
                ]
            }
        },
        "chunks": {
            "name": "chunks",
            "location": 16,
            "return": [
                "None",
                "typing.Generator[tuple[]]"
            ],
            "arguments": {
                "iterable": [
                    "int",
                    "tuple[int]"
                ],
                "chunk_size": [
                    "int",
                    "str",
                    "float",
                    "None"
                ]
            }
        },
        "singleton": {
            "name": "singleton",
            "location": 25,
            "return": [],
            "arguments": {
                "func": [
                    "typing.Callable[, ]",
                    "float"
                ]
            }
        },
        "append": {
            "name": "append",
            "location": 29,
            "return": [
                "typing.Generator[]",
                "typing.Generator[typing.Union[int,typing.Callable[, ],None]]"
            ],
            "arguments": {
                "iterable": [],
                "next_item": [
                    "int",
                    "typing.Callable[, ]",
                    "None"
                ]
            }
        }
    },
    "lokole-master/opwen_email_server/utils/email_parser.py": {
        "_parse_body": {
            "name": "_parse_body",
            "location": 29,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "message": [
                    "int",
                    "str",
                    "None"
                ],
                "default_charset": [
                    "typing.Text"
                ]
            }
        },
        "_parse_attachments": {
            "name": "_parse_attachments",
            "location": 42,
            "return": [
                "typing.Generator[dict[typing.Text, ]]"
            ],
            "arguments": {
                "mailparts": [
                    "str",
                    "dict[, ]",
                    "list[]"
                ]
            }
        },
        "_parse_addresses": {
            "name": "_parse_addresses",
            "location": 55,
            "return": [
                "list[]"
            ],
            "arguments": {
                "message": [],
                "address_type": [
                    "str",
                    "bool",
                    "None"
                ]
            }
        },
        "_parse_address": {
            "name": "_parse_address",
            "location": 59,
            "return": [],
            "arguments": {
                "message": [
                    "str",
                    "dict[, ]",
                    "typing.Type",
                    "int",
                    "typing.Callable[, ]"
                ],
                "address_type": [
                    "str",
                    "dict[, ]",
                    "typing.Type",
                    "int",
                    "typing.Callable[, ]"
                ]
            }
        },
        "_parse_sent_at": {
            "name": "_parse_sent_at",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "message": []
            }
        },
        "parse_mime_email": {
            "name": "parse_mime_email",
            "location": 76,
            "return": [
                "dict[typing.Text, list[]]"
            ],
            "arguments": {
                "mime_email": [
                    "str",
                    "float",
                    "int",
                    "None"
                ]
            }
        },
        "format_attachments": {
            "name": "format_attachments",
            "location": 91,
            "return": [
                "dict[str, typing.Any]",
                "dict[, ]"
            ],
            "arguments": {
                "email": [
                    "dict[str, typing.Any]",
                    "dict[, ]"
                ]
            }
        },
        "_format_attachment": {
            "name": "_format_attachment",
            "location": 117,
            "return": [
                "int",
                "tuple[typing.Union[int,int]]",
                "list[]",
                "list[int]",
                "bytes"
            ],
            "arguments": {
                "filename": [
                    "str",
                    "bool",
                    "typing.Type",
                    "None"
                ],
                "content": [
                    "int",
                    "tuple[typing.Union[int,int]]",
                    "list[]"
                ]
            }
        },
        "get_recipients": {
            "name": "get_recipients",
            "location": 129,
            "return": [],
            "arguments": {
                "email": [
                    "dict[, ]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "get_domains": {
            "name": "get_domains",
            "location": 133,
            "return": [
                "set[]"
            ],
            "arguments": {
                "email": [
                    "dict[, ]",
                    "bool",
                    "str"
                ]
            }
        },
        "get_domain": {
            "name": "get_domain",
            "location": 137,
            "return": [
                "str"
            ],
            "arguments": {
                "address": [
                    "str"
                ]
            }
        },
        "ensure_has_sent_at": {
            "name": "ensure_has_sent_at",
            "location": 141,
            "return": [
                "None"
            ],
            "arguments": {
                "email": [
                    "dict[, ]"
                ]
            }
        },
        "_get_image_type": {
            "name": "_get_image_type",
            "location": 146,
            "return": [
                "dict[str, str]",
                "str",
                "dict[, ]"
            ],
            "arguments": {
                "response": [
                    "dict[str, typing.Any]",
                    "str",
                    "None"
                ],
                "url": [
                    "str"
                ]
            }
        },
        "_is_already_small": {
            "name": "_is_already_small",
            "location": 153,
            "return": [
                "bool"
            ],
            "arguments": {
                "size": [
                    "tuple[typing.Union[int,int]]",
                    "int"
                ]
            }
        },
        "_change_image_size": {
            "name": "_change_image_size",
            "location": 158,
            "return": [
                "str",
                "int",
                "bytes",
                "bytearray",
                "typing.Type",
                "list[str]",
                "dict[int, tuple[typing.Union[str,str]]]"
            ],
            "arguments": {
                "image_content_bytes": [
                    "str",
                    "int",
                    "bytes",
                    "bytearray",
                    "typing.Type"
                ]
            }
        },
        "_fetch_image_to_base64": {
            "name": "_fetch_image_to_base64",
            "location": 175,
            "return": [
                "None",
                "typing.Text"
            ],
            "arguments": {
                "image_url": [
                    "str",
                    "dict[str, str]",
                    "tuple[typing.Union[str,str,str]]"
                ]
            }
        },
        "_is_valid_url": {
            "name": "_is_valid_url",
            "location": 192,
            "return": [
                "bool"
            ],
            "arguments": {
                "url": [
                    "str"
                ]
            }
        },
        "format_inline_images": {
            "name": "format_inline_images",
            "location": 200,
            "return": [
                "dict[str, typing.Any]",
                "dict[object, typing.Any]",
                "dict[, ]"
            ],
            "arguments": {
                "email": [
                    "dict[str, typing.Any]",
                    "dict[object, typing.Any]",
                    "dict[, ]"
                ],
                "on_error": [
                    "typing.Callable[, ]",
                    "str"
                ]
            }
        },
        "descending_timestamp": {
            "name": "descending_timestamp",
            "location": 229,
            "return": [
                "str"
            ],
            "arguments": {
                "email_sent_at": [
                    "str",
                    "int",
                    "None",
                    "float"
                ]
            }
        },
        "MimeEmailParser.__call__": {
            "name": "__call__",
            "location": 234,
            "return": [],
            "arguments": {
                "self": [],
                "mime_email": [
                    "str",
                    "typing.Callable[..., collections.abc.Awaitable[]]",
                    "list[str]"
                ]
            }
        }
    },
    "lokole-master/opwen_email_server/utils/log.py": {
        "_create_telemetry_channel": {
            "name": "_create_telemetry_channel",
            "location": 25,
            "return": [
                "TelemetryChannel"
            ],
            "arguments": {}
        },
        "LogMixin._logger": {
            "name": "_logger",
            "location": 36,
            "return": [
                "getLogger"
            ],
            "arguments": {
                "self": []
            }
        },
        "LogMixin._telemetry_client": {
            "name": "_telemetry_client",
            "location": 40,
            "return": [
                "TelemetryClient"
            ],
            "arguments": {
                "self": []
            }
        },
        "LogMixin.log_debug": {
            "name": "log_debug",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "str",
                    "int"
                ]
            }
        },
        "LogMixin.log_info": {
            "name": "log_info",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "str",
                    "bool",
                    "bytes"
                ]
            }
        },
        "LogMixin.log_warning": {
            "name": "log_warning",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "str",
                    "int"
                ]
            }
        },
        "LogMixin.log_exception": {
            "name": "log_exception",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ex": [
                    "str",
                    "float"
                ],
                "message": [
                    "str"
                ]
            }
        },
        "LogMixin._log": {
            "name": "_log",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "level": [
                    "str",
                    "list[tuple[typing.Union[int,str]]]",
                    "int"
                ],
                "log_message": [
                    "str",
                    "list[tuple[typing.Union[int,str]]]",
                    "int"
                ],
                "log_args": [
                    "str",
                    "list[tuple[typing.Union[int,str]]]",
                    "int"
                ]
            }
        },
        "LogMixin.log_event": {
            "name": "log_event",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "event_name": [
                    "str",
                    "None",
                    "int"
                ],
                "properties": [
                    "None",
                    "str",
                    "int"
                ]
            }
        }
    },
    "lokole-master/opwen_email_server/utils/path.py": {
        "get_extension": {
            "name": "get_extension",
            "location": 5,
            "return": [
                "str"
            ],
            "arguments": {
                "path": [
                    "typing.Sequence[str]",
                    "str",
                    "list[str]"
                ]
            }
        }
    },
    "lokole-master/opwen_email_server/utils/serialization.py": {
        "to_json": {
            "name": "to_json",
            "location": 14,
            "return": [],
            "arguments": {
                "obj": [
                    "float",
                    "dict[, ]",
                    "str",
                    "int"
                ]
            }
        },
        "from_json": {
            "name": "from_json",
            "location": 18,
            "return": [],
            "arguments": {
                "obj": [
                    "str",
                    "typing.Callable[, ]"
                ]
            }
        },
        "to_jsonl_bytes": {
            "name": "to_jsonl_bytes",
            "location": 22,
            "return": [],
            "arguments": {
                "obj": [
                    "str",
                    "list[int]"
                ]
            }
        },
        "from_jsonl_bytes": {
            "name": "from_jsonl_bytes",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "obj": []
            }
        },
        "to_msgpack_bytes": {
            "name": "to_msgpack_bytes",
            "location": 38,
            "return": [],
            "arguments": {
                "obj": [
                    "int",
                    "str",
                    "dict[, ]"
                ]
            }
        },
        "from_msgpack_bytes": {
            "name": "from_msgpack_bytes",
            "location": 43,
            "return": [],
            "arguments": {
                "serialized": [
                    "str"
                ]
            }
        },
        "to_base64": {
            "name": "to_base64",
            "location": 48,
            "return": [],
            "arguments": {
                "content": [
                    "str",
                    "None",
                    "bytes"
                ]
            }
        },
        "from_base64": {
            "name": "from_base64",
            "location": 52,
            "return": [],
            "arguments": {
                "encoded": [
                    "str",
                    "bool",
                    "list[]",
                    "dict[, ]",
                    "None",
                    "complex"
                ]
            }
        },
        "gzip_bytes": {
            "name": "gzip_bytes",
            "location": 56,
            "return": [
                "tuple[typing.Union[list[typing.Any],list[typing.Any],list[typing.Any]]]",
                "tuple[typing.Union[str,str]]",
                "dict[int, typing.Union[typing.Any,typing.Any,typing.Any,typing.Any,typing.Any,typing.Any]]"
            ],
            "arguments": {
                "uncompressed_bytes": [
                    "str",
                    "int",
                    "typing.Callable[, ]",
                    "typing.BinaryIO"
                ]
            }
        },
        "gunzip_bytes": {
            "name": "gunzip_bytes",
            "location": 65,
            "return": [
                "int",
                "list[int]",
                "float",
                "typing.Type"
            ],
            "arguments": {
                "compressed": [
                    "str",
                    "typing.IO",
                    "bytes",
                    "typing.TextIO"
                ]
            }
        }
    },
    "lokole-master/opwen_email_server/utils/string.py": {
        "is_lowercase": {
            "name": "is_lowercase",
            "location": 4,
            "return": [
                "bool"
            ],
            "arguments": {
                "string": [
                    "str"
                ]
            }
        },
        "urlsafe": {
            "name": "urlsafe",
            "location": 8,
            "return": [],
            "arguments": {
                "urlpart": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ]
            }
        }
    },
    "lokole-master/opwen_email_server/utils/temporary.py": {
        "create_tempfilename": {
            "name": "create_tempfilename",
            "location": 13,
            "return": [],
            "arguments": {
                "suffix": [
                    "None",
                    "int",
                    "str"
                ]
            }
        },
        "removing": {
            "name": "removing",
            "location": 19,
            "return": [
                "typing.Generator[typing.Union[str,dict[str, cerulean.path.Path]]]"
            ],
            "arguments": {
                "path": [
                    "str",
                    "dict[str, cerulean.path.Path]"
                ]
            }
        },
        "remove_if_exists": {
            "name": "remove_if_exists",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "path": [
                    "str"
                ]
            }
        }
    },
    "lokole-master/opwen_email_server/utils/unique.py": {
        "new_email_id": {
            "name": "new_email_id",
            "location": 27,
            "return": [],
            "arguments": {
                "email": [
                    "dict[, ]",
                    "str",
                    "typing.Callable[[], bool]"
                ]
            }
        },
        "NewGuid.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "seed": [
                    "None",
                    "int",
                    "float",
                    "typing.Callable[, ]",
                    "typing.Hashable",
                    "str"
                ]
            }
        },
        "NewGuid.__call__": {
            "name": "__call__",
            "location": 18,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "lokole-master/opwen_email_server/utils/__init__.py": {},
    "lokole-master/tests/__init__.py": {},
    "lokole-master/tests/opwen_email_client/__init__.py": {},
    "lokole-master/tests/opwen_email_client/domain/__init__.py": {},
    "lokole-master/tests/opwen_email_client/domain/email/test_sql_store.py": {
        "SqliteEmailStoreTests.create_email_store": {
            "name": "create_email_store",
            "location": 11,
            "return": [
                "SqliteEmailStore"
            ],
            "arguments": {
                "self": [],
                "restricted": [
                    "None",
                    "int",
                    "float",
                    "bytes"
                ]
            }
        },
        "SqliteEmailStoreTests.setUpClass": {
            "name": "setUpClass",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "tuple[]",
                    "typing.Type"
                ]
            }
        },
        "SqliteEmailStoreTests.tearDownClass": {
            "name": "tearDownClass",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "typing.Type"
                ]
            }
        },
        "SqliteEmailStoreTests.tearDown": {
            "name": "tearDown",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "lokole-master/tests/opwen_email_client/domain/email/test_store.py": {
        "Base.EmailStoreTests.create_email_store": {
            "name": "create_email_store",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "restricted": [
                    "None"
                ]
            }
        },
        "Base.EmailStoreTests.setUp": {
            "name": "setUp",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Base.EmailStoreTests.given_emails": {
            "name": "given_emails",
            "location": 21,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Base.EmailStoreTests.assertContainsEmail": {
            "name": "assertContainsEmail",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "expected": [],
                "collection": []
            }
        },
        "Base.EmailStoreTests.test_creates_email_id": {
            "name": "test_creates_email_id",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Base.EmailStoreTests.test_filters_restricted_inboxes": {
            "name": "test_filters_restricted_inboxes",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Base.EmailStoreTests.test_does_not_overwrite_email_id": {
            "name": "test_does_not_overwrite_email_id",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Base.EmailStoreTests.test_create_with_existing_attachment": {
            "name": "test_create_with_existing_attachment",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Base.EmailStoreTests.test_inbox": {
            "name": "test_inbox",
            "location": 107,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Base.EmailStoreTests.test_inbox_paginated": {
            "name": "test_inbox_paginated",
            "location": 126,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Base.EmailStoreTests.test_unread": {
            "name": "test_unread",
            "location": 141,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Base.EmailStoreTests.test_outbox": {
            "name": "test_outbox",
            "location": 161,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Base.EmailStoreTests.test_pending": {
            "name": "test_pending",
            "location": 181,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Base.EmailStoreTests.test_pending_without_pagination": {
            "name": "test_pending_without_pagination",
            "location": 198,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Base.EmailStoreTests.test_num_pending": {
            "name": "test_num_pending",
            "location": 210,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Base.EmailStoreTests.test_sent": {
            "name": "test_sent",
            "location": 227,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Base.EmailStoreTests.test_search_for_sender": {
            "name": "test_search_for_sender",
            "location": 244,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Base.EmailStoreTests.test_search_for_body": {
            "name": "test_search_for_body",
            "location": 257,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Base.EmailStoreTests.test_search_for_subject": {
            "name": "test_search_for_subject",
            "location": 276,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Base.EmailStoreTests.test_search_without_query": {
            "name": "test_search_without_query",
            "location": 295,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Base.EmailStoreTests.test_mark_sent": {
            "name": "test_mark_sent",
            "location": 306,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Base.EmailStoreTests.test_mark_read": {
            "name": "test_mark_read",
            "location": 319,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Base.EmailStoreTests.test_delete": {
            "name": "test_delete",
            "location": 336,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Base.EmailStoreTests.test_get": {
            "name": "test_get",
            "location": 359,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Base.EmailStoreTests.test_get_with_separate_attachments": {
            "name": "test_get_with_separate_attachments",
            "location": 372,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Base.EmailStoreTests.test_get_without_match": {
            "name": "test_get_without_match",
            "location": 405,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Base.EmailStoreTests.test_get_attachment": {
            "name": "test_get_attachment",
            "location": 415,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Base.EmailStoreTests.test_get_attachment_without_match": {
            "name": "test_get_attachment_without_match",
            "location": 433,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Base.EmailStoreTests.assertContainsEmail.cleanup": {
            "name": "cleanup",
            "location": 26,
            "return": [
                "dict[typing.Text, typing.Union[None,list[]]]"
            ],
            "arguments": {
                "email": []
            }
        }
    },
    "lokole-master/tests/opwen_email_client/domain/email/test_sync.py": {
        "AzureSyncTests.setUp": {
            "name": "setUp",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AzureSyncTests.tearDown": {
            "name": "tearDown",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AzureSyncTests.assertUploadIs": {
            "name": "assertUploadIs",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "expected": [
                    "str",
                    "dict[str, str]"
                ],
                "compression": [
                    "typing.Text"
                ]
            }
        },
        "AzureSyncTests.assertNoUpload": {
            "name": "assertNoUpload",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AzureSyncTests.given_download": {
            "name": "given_download",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "payload": [
                    "dict[str, object]",
                    "dict[str, dict[str, int]]",
                    "dict[str, str]"
                ],
                "compression": [
                    "str"
                ]
            }
        },
        "AzureSyncTests.given_download_exception": {
            "name": "given_download_exception",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AzureSyncTests.test_upload": {
            "name": "test_upload",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AzureSyncTests.test_upload_excludes_null_values": {
            "name": "test_upload_excludes_null_values",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AzureSyncTests.test_upload_excludes_internal_values": {
            "name": "test_upload_excludes_internal_values",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AzureSyncTests.test_upload_with_no_content_does_not_hit_network": {
            "name": "test_upload_with_no_content_does_not_hit_network",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AzureSyncTests.test_download": {
            "name": "test_download",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AzureSyncTests.test_download_with_attachments": {
            "name": "test_download_with_attachments",
            "location": 110,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AzureSyncTests.test_download_missing_resource": {
            "name": "test_download_missing_resource",
            "location": 128,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "lokole-master/tests/opwen_email_client/domain/email/__init__.py": {},
    "lokole-master/tests/opwen_email_client/util/test_os.py": {
        "ReplaceLineTests.test_replaces_line": {
            "name": "test_replaces_line",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SubdirectoriesTests.test_handles_missing_directory": {
            "name": "test_handles_missing_directory",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BackupTests.test_backup_without_file": {
            "name": "test_backup_without_file",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BackupTests.test_backup": {
            "name": "test_backup",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "lokole-master/tests/opwen_email_client/util/test_serialization.py": {
        "JsonSerializerTests.create_serializer": {
            "name": "create_serializer",
            "location": 35,
            "return": [
                "JsonSerializer"
            ],
            "arguments": {
                "self": []
            }
        },
        "Base.SerializerTests.create_serializer": {
            "name": "create_serializer",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Base.SerializerTests.serializable_objects": {
            "name": "serializable_objects",
            "location": 19,
            "return": [
                "typing.Generator[tuple[typing.Union[dict[typing.Union[typing.Text,typing.Text], typing.Union[int,list[typing.Text]]],typing.Text]]]",
                "typing.Generator[tuple[typing.Union[dict[typing.Text, list[dict[typing.Text, bytes]]],typing.Text]]]",
                "typing.Generator[tuple[typing.Union[dict[typing.Text, bytes],typing.Text]]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Base.SerializerTests.setUp": {
            "name": "setUp",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Base.SerializerTests.test_serialization_roundtrip": {
            "name": "test_serialization_roundtrip",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "lokole-master/tests/opwen_email_client/util/test_wtforms.py": {
        "make_form": {
            "name": "make_form",
            "location": 152,
            "return": [
                "typing.Type"
            ],
            "arguments": {
                "_name": [
                    "typing.Text"
                ]
            }
        },
        "SuffixedStringFieldTests.create_field": {
            "name": "create_field",
            "location": 34,
            "return": [
                "SuffixedStringField"
            ],
            "arguments": {
                "self": []
            }
        },
        "SuffixedStringFieldTests.test_adds_suffix_when_missing": {
            "name": "test_adds_suffix_when_missing",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SuffixedStringFieldTests.test_does_not_add_suffix_when_existing": {
            "name": "test_does_not_add_suffix_when_existing",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SuffixedStringFieldTests.test_lowercases_value": {
            "name": "test_lowercases_value",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HtmlTextAreaFieldTests.create_field": {
            "name": "create_field",
            "location": 48,
            "return": [
                "HtmlTextAreaField"
            ],
            "arguments": {
                "self": []
            }
        },
        "HtmlTextAreaFieldTests.dangerous_markup": {
            "name": "dangerous_markup",
            "location": 52,
            "return": [
                "typing.Generator[tuple[typing.Union[typing.Text,typing.Text]]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "HtmlTextAreaFieldTests.safe_markup": {
            "name": "safe_markup",
            "location": 58,
            "return": [
                "typing.Generator[tuple[typing.Union[typing.Text,typing.Text]]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "HtmlTextAreaFieldTests.test_is_nullsafe": {
            "name": "test_is_nullsafe",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HtmlTextAreaFieldTests.test_removes_dangerous_markup": {
            "name": "test_removes_dangerous_markup",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HtmlTextAreaFieldTests.test_keeps_safe_markup": {
            "name": "test_keeps_safe_markup",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EscapedHtmlTextAreaFieldTests.safe_markup": {
            "name": "safe_markup",
            "location": 80,
            "return": [
                "typing.Generator[tuple[]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "EscapedHtmlTextAreaFieldTests.dangerous_markup": {
            "name": "dangerous_markup",
            "location": 85,
            "return": [
                "typing.Generator[tuple[]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "EmailsTests.test_verifies_single_email": {
            "name": "test_verifies_single_email",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EmailsTests.test_verifies_multiple_emails": {
            "name": "test_verifies_multiple_emails",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EmailsTests.test_fails_on_bad_emails": {
            "name": "test_fails_on_bad_emails",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EmailsTests.verify": {
            "name": "verify",
            "location": 105,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "bool",
                    "None",
                    "list[]",
                    "typing.IO",
                    "list[str]"
                ],
                "delimiter": [
                    "str",
                    "dict[, ]",
                    "int",
                    "tuple[typing.Union[str,str]]",
                    "dict[str, typing.Any]"
                ],
                "field_value": [
                    "str",
                    "dict[str, typing.Any]",
                    "None",
                    "list[str]",
                    "typing.Mapping",
                    "list[dict[str, typing.Any]]",
                    "Exception"
                ]
            }
        },
        "CronScheduleTests.test_valid_schedule": {
            "name": "test_valid_schedule",
            "location": 111,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CronScheduleTests.test_invalid_schedule_length": {
            "name": "test_invalid_schedule_length",
            "location": 114,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CronScheduleTests.test_invalid_schedule_entry": {
            "name": "test_invalid_schedule_entry",
            "location": 121,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CronScheduleTests.verify": {
            "name": "verify",
            "location": 126,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "dict[, ]",
                    "str",
                    "None"
                ],
                "field_value": [
                    "str",
                    "int",
                    "None",
                    "typing.Callable[, ]"
                ]
            }
        },
        "DummyField.__init__": {
            "name": "__init__",
            "location": 132,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict[str, typing.Any]",
                    "bytes",
                    "dict[str, str]",
                    "list[]",
                    "str",
                    "None"
                ]
            }
        },
        "DummyField.gettext": {
            "name": "gettext",
            "location": 136,
            "return": [
                "int",
                "str",
                "typing.Iterable[C]"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "int",
                    "str",
                    "typing.Iterable[C]"
                ]
            }
        },
        "DummyPostData.getlist": {
            "name": "getlist",
            "location": 145,
            "return": [
                "list[]",
                "list[str]",
                "tuple[]",
                "typing.Iterator",
                "typing.Type",
                "int",
                "list[typing.Union[list[],list[str],tuple[],typing.Iterator,typing.Type,int]]"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "None",
                    "tuple[]",
                    "dict[str, str]",
                    "int",
                    "typing.Callable[T, T]",
                    "typing.Type"
                ]
            }
        },
        "Base.FieldTests.create_field": {
            "name": "create_field",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Base.FieldTests.verify_field": {
            "name": "verify_field",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "given": [],
                "expected": []
            }
        }
    },
    "lokole-master/tests/opwen_email_client/util/__init__.py": {},
    "lokole-master/tests/opwen_email_client/webapp/base.py": {
        "TestConfig.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConfig.close": {
            "name": "close",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Base.AppTests._pre_setup": {
            "name": "_pre_setup",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Base.AppTests._post_teardown": {
            "name": "_post_teardown",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Base.AppTests.create_app": {
            "name": "create_app",
            "location": 35,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "lokole-master/tests/opwen_email_client/webapp/test_mkwvconf.py": {
        "MkwvconfTests.get_json": {
            "name": "get_json",
            "location": 12,
            "return": [],
            "arguments": {
                "self": [],
                "url": [
                    "str"
                ]
            }
        },
        "MkwvconfTests.test_list_countries": {
            "name": "test_list_countries",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MkwvconfTests.test_list_providers": {
            "name": "test_list_providers",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MkwvconfTests.test_list_apns": {
            "name": "test_list_apns",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MkwvconfTests.test_get_config": {
            "name": "test_get_config",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "lokole-master/tests/opwen_email_client/webapp/test_views.py": {
        "ViewTests.test_app_starts": {
            "name": "test_app_starts",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "lokole-master/tests/opwen_email_client/webapp/__init__.py": {},
    "lokole-master/tests/opwen_email_server/helpers.py": {
        "throw": {
            "name": "throw",
            "location": 19,
            "return": [],
            "arguments": {
                "exception": [
                    "typing.Type",
                    "Exception",
                    "None",
                    "bool"
                ]
            }
        },
        "MockResponses.__init__": {
            "name": "__init__",
            "location": 2,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "responses": [
                    "list[dict[, ]]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "MockResponses.__call__": {
            "name": "__call__",
            "location": 6,
            "return": [
                "tuple[typing.Union[int,dict[, ]]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "throw.throws": {
            "name": "throws",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "lokole-master/tests/opwen_email_server/test_actions.py": {
        "ActionTests.test_logs_exception": {
            "name": "test_logs_exception",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_channel": [],
                "mock_client": []
            }
        },
        "PingTests.test_200": {
            "name": "test_200",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SendOutboundEmailsTests.setUp": {
            "name": "setUp",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SendOutboundEmailsTests.test_200": {
            "name": "test_200",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SendOutboundEmailsTests.test_500": {
            "name": "test_500",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SendOutboundEmailsTests._execute_action": {
            "name": "_execute_action",
            "location": 72,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "StoreInboundEmailsTests.setUp": {
            "name": "setUp",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "StoreInboundEmailsTests.test_202": {
            "name": "test_202",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "StoreInboundEmailsTests.test_200": {
            "name": "test_200",
            "location": 103,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "StoreInboundEmailsTests._execute_action": {
            "name": "_execute_action",
            "location": 125,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "IndexReceivedEmailForMailboxTests.setUp": {
            "name": "setUp",
            "location": 138,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IndexReceivedEmailForMailboxTests.test_200": {
            "name": "test_200",
            "location": 142,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IndexReceivedEmailForMailboxTests._execute_action": {
            "name": "_execute_action",
            "location": 161,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "IndexSentEmailForMailboxTests.setUp": {
            "name": "setUp",
            "location": 171,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IndexSentEmailForMailboxTests.test_200": {
            "name": "test_200",
            "location": 175,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IndexSentEmailForMailboxTests._execute_action": {
            "name": "_execute_action",
            "location": 191,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "StoreWrittenClientEmailsTests.setUp": {
            "name": "setUp",
            "location": 201,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "StoreWrittenClientEmailsTests.test_200": {
            "name": "test_200",
            "location": 207,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "StoreWrittenClientEmailsTests.test_200_no_attachments": {
            "name": "test_200_no_attachments",
            "location": 213,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "StoreWrittenClientEmailsTests._test_200": {
            "name": "_test_200",
            "location": 219,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "attachment_content_bytes": [
                    "list[str]",
                    "dict[, ]",
                    "str",
                    "int"
                ],
                "attachment_content_base64": [
                    "str"
                ]
            }
        },
        "StoreWrittenClientEmailsTests._execute_action": {
            "name": "_execute_action",
            "location": 246,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ReceiveInboundEmailTests.setUp": {
            "name": "setUp",
            "location": 258,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ReceiveInboundEmailTests.test_403": {
            "name": "test_403",
            "location": 264,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ReceiveInboundEmailTests.test_200": {
            "name": "test_200",
            "location": 276,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ReceiveInboundEmailTests.test_is_idempotent": {
            "name": "test_is_idempotent",
            "location": 291,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ReceiveInboundEmailTests.assertHasSameCalls": {
            "name": "assertHasSameCalls",
            "location": 306,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mocked_function": [
                    "str",
                    "None",
                    "list[]",
                    "list[P]"
                ],
                "num_calls": [
                    "str",
                    "list[tuple[typing.Union[int,int]]]",
                    "list[str]",
                    "int"
                ]
            }
        },
        "ReceiveInboundEmailTests._execute_action": {
            "name": "_execute_action",
            "location": 311,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ProcessServiceEmailTests.setUp": {
            "name": "setUp",
            "location": 322,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ProcessServiceEmailTests.test_202": {
            "name": "test_202",
            "location": 329,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ProcessServiceEmailTests.test_200": {
            "name": "test_200",
            "location": 336,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ProcessServiceEmailTests._execute_action": {
            "name": "_execute_action",
            "location": 350,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DownloadClientEmailsTests.setUp": {
            "name": "setUp",
            "location": 363,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DownloadClientEmailsTests.test_400": {
            "name": "test_400",
            "location": 369,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DownloadClientEmailsTests.test_403": {
            "name": "test_403",
            "location": 380,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DownloadClientEmailsTests.test_200": {
            "name": "test_200",
            "location": 390,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DownloadClientEmailsTests.test_200_no_attachments": {
            "name": "test_200_no_attachments",
            "location": 396,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DownloadClientEmailsTests._test_200": {
            "name": "_test_200",
            "location": 402,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "attachment_content_bytes": [
                    "list[int]",
                    "str",
                    "list[str]",
                    "dict[str, typing.Any]"
                ],
                "attachment_content_base64": [
                    "list[int]",
                    "str",
                    "list[str]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "DownloadClientEmailsTests._execute_action": {
            "name": "_execute_action",
            "location": 444,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UploadClientEmailsTests.setUp": {
            "name": "setUp",
            "location": 456,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UploadClientEmailsTests.test_403": {
            "name": "test_403",
            "location": 460,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UploadClientEmailsTests.test_200": {
            "name": "test_200",
            "location": 472,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UploadClientEmailsTests._execute_action": {
            "name": "_execute_action",
            "location": 486,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RegisterClientTests.setUp": {
            "name": "setUp",
            "location": 496,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RegisterClientTests.test_200": {
            "name": "test_200",
            "location": 503,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RegisterClientTests._execute_action": {
            "name": "_execute_action",
            "location": 527,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CreateClientTests.setUp": {
            "name": "setUp",
            "location": 540,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CreateClientTests.test_400": {
            "name": "test_400",
            "location": 544,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CreateClientTests.test_409": {
            "name": "test_409",
            "location": 552,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CreateClientTests.test_200": {
            "name": "test_200",
            "location": 563,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CreateClientTests._execute_action": {
            "name": "_execute_action",
            "location": 575,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ListClientsTests.setUp": {
            "name": "setUp",
            "location": 585,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ListClientsTests.test_200": {
            "name": "test_200",
            "location": 588,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ListClientsTests._execute_action": {
            "name": "_execute_action",
            "location": 598,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GetClientTests.setUp": {
            "name": "setUp",
            "location": 605,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GetClientTests.test_400": {
            "name": "test_400",
            "location": 612,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GetClientTests.test_404": {
            "name": "test_404",
            "location": 620,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GetClientTests.test_403": {
            "name": "test_403",
            "location": 631,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GetClientTests.test_200": {
            "name": "test_200",
            "location": 643,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GetClientTests._execute_action": {
            "name": "_execute_action",
            "location": 666,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DeleteClientTests.setUp": {
            "name": "setUp",
            "location": 676,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DeleteClientTests.test_400": {
            "name": "test_400",
            "location": 684,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DeleteClientTests.test_404": {
            "name": "test_404",
            "location": 692,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DeleteClientTests.test_403": {
            "name": "test_403",
            "location": 703,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DeleteClientTests.test_200": {
            "name": "test_200",
            "location": 717,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DeleteClientTests._execute_action": {
            "name": "_execute_action",
            "location": 748,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CalculateNumberOfUsersMetricTests.setUp": {
            "name": "setUp",
            "location": 762,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CalculateNumberOfUsersMetricTests.test_403": {
            "name": "test_403",
            "location": 766,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CalculateNumberOfUsersMetricTests.test_200": {
            "name": "test_200",
            "location": 776,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CalculateNumberOfUsersMetricTests._execute_action": {
            "name": "_execute_action",
            "location": 794,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CalculatePendingEmailsMetricTests.setUp": {
            "name": "setUp",
            "location": 804,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CalculatePendingEmailsMetricTests.test_403": {
            "name": "test_403",
            "location": 808,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CalculatePendingEmailsMetricTests.test_200": {
            "name": "test_200",
            "location": 818,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CalculatePendingEmailsMetricTests._execute_action": {
            "name": "_execute_action",
            "location": 836,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DownloadClientEmailsTests._test_200.store_objects_mock": {
            "name": "store_objects_mock",
            "location": 420,
            "return": [],
            "arguments": {
                "upload": [],
                "compression": []
            }
        },
        "ActionTests.test_logs_exception.TestAction._action": {
            "name": "_action",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "lokole-master/tests/opwen_email_server/test_config.py": {
        "get_constants": {
            "name": "get_constants",
            "location": 46,
            "return": [
                "typing.Generator[tuple[typing.Union[str,str,set[],dict[, ],list[typing.Union[typing.Any,typing.Any,typing.Any,typing.Any]]]]]"
            ],
            "arguments": {
                "container": [
                    "int",
                    "str",
                    "bytes",
                    "typing.IO",
                    "typing.Container"
                ]
            }
        },
        "setenvs": {
            "name": "setenvs",
            "location": 57,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "envs": [
                    "dict[str, object]",
                    "dict[str, dict[str, int]]",
                    "dict[str, str]"
                ]
            }
        },
        "ConfigTests.test_queue_broker": {
            "name": "test_queue_broker",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConfigTests.test_queue_broker_servicebus": {
            "name": "test_queue_broker_servicebus",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConfigTests.test_queue_broker_servicebus_urlsafe": {
            "name": "test_queue_broker_servicebus_urlsafe",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConfigTests.test_container_names_are_valid": {
            "name": "test_container_names_are_valid",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "lokole-master/tests/opwen_email_server/test_swagger.py": {
        "SwaggerTests.test_is_valid": {
            "name": "test_is_valid",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "lokole-master/tests/opwen_email_server/__init__.py": {},
    "lokole-master/tests/opwen_email_server/integration/test_celery.py": {
        "TransportTests.exchange": {
            "name": "exchange",
            "location": 23,
            "return": [
                "Exchange"
            ],
            "arguments": {
                "self": []
            }
        },
        "TransportTests.queue": {
            "name": "queue",
            "location": 27,
            "return": [
                "Queue"
            ],
            "arguments": {
                "self": []
            }
        },
        "TransportTests.test_send_message": {
            "name": "test_send_message",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TransportTests.test_all_celery_tasks_are_routed": {
            "name": "test_all_celery_tasks_are_routed",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "lokole-master/tests/opwen_email_server/integration/__init__.py": {},
    "lokole-master/tests/opwen_email_server/mailers/test_wikipedia.py": {
        "WikipediaServiceTests.setUp": {
            "name": "setUp",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "WikipediaServiceTests.test_no_results": {
            "name": "test_no_results",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "WikipediaServiceTests.test_multiple_results": {
            "name": "test_multiple_results",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "WikipediaServiceTests.test_returned_article": {
            "name": "test_returned_article",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "WikipediaServiceTests._execute_format": {
            "name": "_execute_format",
            "location": 62,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "lokole-master/tests/opwen_email_server/mailers/__init__.py": {},
    "lokole-master/tests/opwen_email_server/services/test_auth.py": {
        "BasicAuthTests.setUp": {
            "name": "setUp",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BasicAuthTests.test_with_bad_user": {
            "name": "test_with_bad_user",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BasicAuthTests.test_with_missing_user": {
            "name": "test_with_missing_user",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BasicAuthTests.test_with_bad_password": {
            "name": "test_with_bad_password",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BasicAuthTests.test_with_correct_password": {
            "name": "test_with_correct_password",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GithubAuthTests.setUp": {
            "name": "setUp",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GithubAuthTests.test_with_bad_arguments": {
            "name": "test_with_bad_arguments",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GithubAuthTests.test_with_missing_team": {
            "name": "test_with_missing_team",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GithubAuthTests.test_with_bad_password": {
            "name": "test_with_bad_password",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GithubAuthTests.test_with_correct_password": {
            "name": "test_with_correct_password",
            "location": 95,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AzureAuthTests.setUp": {
            "name": "setUp",
            "location": 147,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AzureAuthTests.tearDown": {
            "name": "tearDown",
            "location": 157,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AzureAuthTests.test_inserts_and_retrieves_client": {
            "name": "test_inserts_and_retrieves_client",
            "location": 160,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AzureAuthTests.test_lists_domains": {
            "name": "test_lists_domains",
            "location": 170,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AzureAuthTests.test_deletes_client": {
            "name": "test_deletes_client",
            "location": 175,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AzureAuthTests.test_is_owner_with_sudo": {
            "name": "test_is_owner_with_sudo",
            "location": 181,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "NoAuthTests.setUp": {
            "name": "setUp",
            "location": 189,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "NoAuthTests.test_does_not_validate_owner": {
            "name": "test_does_not_validate_owner",
            "location": 192,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "NoAuthTests.test_delete_has_no_effect": {
            "name": "test_delete_has_no_effect",
            "location": 198,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "NoAuthTests.test_lists_no_domains": {
            "name": "test_lists_no_domains",
            "location": 204,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "lokole-master/tests/opwen_email_server/services/test_dns.py": {
        "DeleteMxRecordsTests.test_does_not_make_request_when_key_is_missing": {
            "name": "test_does_not_make_request_when_key_is_missing",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DeleteMxRecordsTests.test_makes_request_when_key_is_set": {
            "name": "test_makes_request_when_key_is_set",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DeleteMxRecordsTests.test_handles_missing_record": {
            "name": "test_handles_missing_record",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SetupMxRecordsTests.test_does_not_make_request_when_key_is_missing": {
            "name": "test_does_not_make_request_when_key_is_missing",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SetupMxRecordsTests.test_makes_request_when_key_is_set": {
            "name": "test_makes_request_when_key_is_set",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SetupMxRecordsTests.test_returns_when_record_already_exists": {
            "name": "test_returns_when_record_already_exists",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SetupMxRecordsTests.test_throws_when_error_is_unknown": {
            "name": "test_throws_when_error_is_unknown",
            "location": 108,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "lokole-master/tests/opwen_email_server/services/test_sendgrid.py": {
        "SendgridEmailSenderTests.test_sends_email": {
            "name": "test_sends_email",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SendgridEmailSenderTests.test_sends_email_with_attachments": {
            "name": "test_sends_email_with_attachments",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SendgridEmailSenderTests.test_sends_email_to_multiple_recipients": {
            "name": "test_sends_email_to_multiple_recipients",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SendgridEmailSenderTests.test_sends_email_to_cc": {
            "name": "test_sends_email_to_cc",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SendgridEmailSenderTests.test_sends_email_to_bcc": {
            "name": "test_sends_email_to_bcc",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SendgridEmailSenderTests.test_client_made_bad_request": {
            "name": "test_client_made_bad_request",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SendgridEmailSenderTests.test_client_had_exception": {
            "name": "test_client_had_exception",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SendgridEmailSenderTests.test_does_not_send_email_without_key": {
            "name": "test_does_not_send_email_without_key",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SendgridEmailSenderTests.assertSendsEmail": {
            "name": "assertSendsEmail",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "email": [
                    "int",
                    "str",
                    "dict[str, typing.Any]",
                    "None"
                ],
                "success": [
                    "bool"
                ],
                "status": [
                    "int"
                ],
                "exception": [
                    "None",
                    "str",
                    "list[str]"
                ]
            }
        },
        "SendgridEmailSenderTests.given_response_status": {
            "name": "given_response_status",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "set[str]",
                    "bool",
                    "typing.Callable[typing.Any, bool]",
                    "None",
                    "dict[str, typing.Any]"
                ],
                "mock_build_opener": [
                    "str",
                    "list[str]"
                ],
                "status": [
                    "str",
                    "dict[, ]",
                    "bool"
                ],
                "exception": [
                    "str",
                    "None",
                    "dict[, ]"
                ]
            }
        },
        "LiveSendgridEmailSenderTests.assertSendsEmail": {
            "name": "assertSendsEmail",
            "location": 101,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "email": [
                    "str",
                    "list[str]",
                    "int"
                ],
                "success": [
                    "bool"
                ]
            }
        },
        "DeleteSendgridMailboxTests.test_does_not_make_request_when_key_is_missing": {
            "name": "test_does_not_make_request_when_key_is_missing",
            "location": 110,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DeleteSendgridMailboxTests.test_makes_request_when_key_is_set": {
            "name": "test_makes_request_when_key_is_set",
            "location": 119,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DeleteSendgridMailboxTests.test_handles_missing_mailbox": {
            "name": "test_handles_missing_mailbox",
            "location": 129,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DeleteSendgridMailboxTests.test_throws_on_errors": {
            "name": "test_throws_on_errors",
            "location": 141,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SetupSendgridMailboxTests.test_does_not_make_request_when_key_is_missing": {
            "name": "test_does_not_make_request_when_key_is_missing",
            "location": 155,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SetupSendgridMailboxTests.test_makes_request_when_key_is_set": {
            "name": "test_makes_request_when_key_is_set",
            "location": 164,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SetupSendgridMailboxTests.test_skips_request_when_domain_already_exists": {
            "name": "test_skips_request_when_domain_already_exists",
            "location": 178,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SetupSendgridMailboxTests.test_retries_request_when_creation_failed": {
            "name": "test_retries_request_when_creation_failed",
            "location": 190,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SetupSendgridMailboxTests.test_fails_request_when_retry_limit_is_exceeded": {
            "name": "test_fails_request_when_retry_limit_is_exceeded",
            "location": 205,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "lokole-master/tests/opwen_email_server/services/test_storage.py": {
        "AzureTextStorageTests.test_stores_fetches_and_deletes_text": {
            "name": "test_stores_fetches_and_deletes_text",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AzureTextStorageTests.test_list": {
            "name": "test_list",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AzureTextStorageTests.test_list_with_prefix": {
            "name": "test_list_with_prefix",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AzureTextStorageTests.test_ensure_exists": {
            "name": "test_ensure_exists",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AzureTextStorageTests.test_handles_race_condition_when_creating_container": {
            "name": "test_handles_race_condition_when_creating_container",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AzureTextStorageTests.setUp": {
            "name": "setUp",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AzureTextStorageTests.tearDown": {
            "name": "tearDown",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AzureTextStorageCaseInsensitiveTests.test_stores_fetches_and_deletes_text": {
            "name": "test_stores_fetches_and_deletes_text",
            "location": 105,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AzureTextStorageCaseInsensitiveTests.test_list_with_prefix": {
            "name": "test_list_with_prefix",
            "location": 115,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AzureTextStorageCaseInsensitiveTests.setUp": {
            "name": "setUp",
            "location": 125,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AzureTextStorageCaseInsensitiveTests.tearDown": {
            "name": "tearDown",
            "location": 136,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AzureFileStorageTests.test_stores_fetches_and_deletes_file": {
            "name": "test_stores_fetches_and_deletes_file",
            "location": 141,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AzureFileStorageTests.assertFileContains": {
            "name": "assertFileContains",
            "location": 155,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ],
                "content": [
                    "str",
                    "int"
                ]
            }
        },
        "AzureFileStorageTests._given_file": {
            "name": "_given_file",
            "location": 159,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "resource_id": [
                    "str"
                ],
                "expected_content": [
                    "str"
                ]
            }
        },
        "AzureFileStorageTests.setUp": {
            "name": "setUp",
            "location": 166,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AzureFileStorageTests.tearDown": {
            "name": "tearDown",
            "location": 177,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AzureObjectsStorageTests.test_fetches_jsonl_objects": {
            "name": "test_fetches_jsonl_objects",
            "location": 184,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AzureObjectsStorageTests.test_fetches_missing_file": {
            "name": "test_fetches_missing_file",
            "location": 194,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AzureObjectsStorageTests.test_fetches_missing_archive_member": {
            "name": "test_fetches_missing_archive_member",
            "location": 198,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AzureObjectsStorageTests.test_fetches_json_objects": {
            "name": "test_fetches_json_objects",
            "location": 207,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AzureObjectsStorageTests.test_handles_corrupted_jsonl_entries": {
            "name": "test_handles_corrupted_jsonl_entries",
            "location": 217,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AzureObjectsStorageTests.test_stores_objects": {
            "name": "test_stores_objects",
            "location": 227,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AzureObjectsStorageTests.test_stores_objects_with_explicit_compression": {
            "name": "test_stores_objects_with_explicit_compression",
            "location": 236,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AzureObjectsStorageTests.test_does_not_create_file_without_objects": {
            "name": "test_does_not_create_file_without_objects",
            "location": 245,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AzureObjectsStorageTests.test_deletes_objects": {
            "name": "test_deletes_objects",
            "location": 254,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AzureObjectsStorageTests.assertContainerHasNumFiles": {
            "name": "assertContainerHasNumFiles",
            "location": 263,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "count": [
                    "int",
                    "str",
                    "list[]"
                ],
                "suffix": [
                    "typing.Text"
                ]
            }
        },
        "AzureObjectsStorageTests._given_resource": {
            "name": "_given_resource",
            "location": 274,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "resource_id": [
                    "str",
                    "dict[str, typing.Any]"
                ],
                "name": [
                    "str",
                    "dict[str, typing.Any]",
                    "list[str]",
                    "None",
                    "bytes",
                    "dict[str, 'LabwareDefinition']",
                    "dict[str, str]",
                    "dict[str, bytes]"
                ],
                "lines": []
            }
        },
        "AzureObjectsStorageTests.setUp": {
            "name": "setUp",
            "location": 284,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AzureObjectsStorageTests.tearDown": {
            "name": "tearDown",
            "location": 298,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AzureObjectStorageTests.test_roundtrip": {
            "name": "test_roundtrip",
            "location": 303,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AzureObjectStorageTests.setUp": {
            "name": "setUp",
            "location": 312,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AzureObjectStorageTests.tearDown": {
            "name": "tearDown",
            "location": 323,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AzureTextStorageTests.test_handles_race_condition_when_creating_container.get_container": {
            "name": "get_container",
            "location": 76,
            "return": [],
            "arguments": {}
        }
    },
    "lokole-master/tests/opwen_email_server/services/__init__.py": {},
    "lokole-master/tests/opwen_email_server/utils/test_collections.py": {
        "ToIterableTests.test_makes_item_iterable": {
            "name": "test_makes_item_iterable",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ToIterableTests.test_ignores_none": {
            "name": "test_ignores_none",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ChunksTests.test_creates_fullsize_chunks": {
            "name": "test_creates_fullsize_chunks",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ChunksTests.test_creates_nonfull_chunks": {
            "name": "test_creates_nonfull_chunks",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SingletonTests.test_creates_object_only_once": {
            "name": "test_creates_object_only_once",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SingletonTests.setUp": {
            "name": "setUp",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SingletonTests.function1": {
            "name": "function1",
            "location": 52,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "SingletonTests.function2": {
            "name": "function2",
            "location": 57,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "AppendTests.test_yields_item_after_items": {
            "name": "test_yields_item_after_items",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "lokole-master/tests/opwen_email_server/utils/test_email_parser.py": {
        "_given_test_image": {
            "name": "_given_test_image",
            "location": 24,
            "return": [],
            "arguments": {
                "size": [
                    "int",
                    "str",
                    "list[str]",
                    "None"
                ]
            }
        },
        "ParseMimeEmailTests.test_parses_email_metadata": {
            "name": "test_parses_email_metadata",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ParseMimeEmailTests.test_prefers_html_body_over_text": {
            "name": "test_prefers_html_body_over_text",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ParseMimeEmailTests.test_parses_email_with_cc_and_bcc": {
            "name": "test_parses_email_with_cc_and_bcc",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ParseMimeEmailTests.test_parses_email_with_attachments": {
            "name": "test_parses_email_with_attachments",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ParseMimeEmailTests.test_cid": {
            "name": "test_cid",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ParseMimeEmailTests._parse": {
            "name": "_parse",
            "location": 79,
            "return": [],
            "arguments": {
                "cls": [
                    "int",
                    "list[float]",
                    "str",
                    "float"
                ],
                "mime_email": [
                    "str",
                    "bool",
                    "list[str]"
                ]
            }
        },
        "ParseMimeEmailTests._given_mime_email": {
            "name": "_given_mime_email",
            "location": 83,
            "return": [],
            "arguments": {
                "cls": [
                    "str",
                    "bool",
                    "typing.Type",
                    "list[str]"
                ],
                "filename": [
                    "str"
                ],
                "directory": []
            }
        },
        "GetDomainsTests.test_gets_domains": {
            "name": "test_gets_domains",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GetDomainsTests.test_gets_domains_with_cc_and_bcc": {
            "name": "test_gets_domains_with_cc_and_bcc",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GetReceipientsTests.test_get_recipients": {
            "name": "test_get_recipients",
            "location": 109,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ResizeImageTests.test_change_image_size": {
            "name": "test_change_image_size",
            "location": 121,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ResizeImageTests.test_change_image_size_when_already_small": {
            "name": "test_change_image_size_when_already_small",
            "location": 126,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConvertImgUrlToBase64Tests.test_format_inline_images_with_img_tag": {
            "name": "test_format_inline_images_with_img_tag",
            "location": 134,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConvertImgUrlToBase64Tests.test_format_inline_images_with_query_string": {
            "name": "test_format_inline_images_with_query_string",
            "location": 143,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConvertImgUrlToBase64Tests.test_handles_exceptions_when_processing_image": {
            "name": "test_handles_exceptions_when_processing_image",
            "location": 154,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_pil": []
            }
        },
        "ConvertImgUrlToBase64Tests.test_format_inline_images_with_img_tag_without_src_attribute": {
            "name": "test_format_inline_images_with_img_tag_without_src_attribute",
            "location": 169,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConvertImgUrlToBase64Tests.test_format_inline_images_with_img_tag_and_invalid_src_attribute": {
            "name": "test_format_inline_images_with_img_tag_and_invalid_src_attribute",
            "location": 176,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConvertImgUrlToBase64Tests.test_format_inline_images_with_bad_request": {
            "name": "test_format_inline_images_with_bad_request",
            "location": 184,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConvertImgUrlToBase64Tests.test_format_inline_images_with_many_img_tags": {
            "name": "test_format_inline_images_with_many_img_tags",
            "location": 193,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConvertImgUrlToBase64Tests.test_format_inline_images_without_img_tags": {
            "name": "test_format_inline_images_without_img_tags",
            "location": 201,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConvertImgUrlToBase64Tests.test_format_inline_images_without_content_type": {
            "name": "test_format_inline_images_without_content_type",
            "location": 209,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConvertImgUrlToBase64Tests.assertStartsWith": {
            "name": "assertStartsWith",
            "location": 217,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "str",
                    "bytes"
                ],
                "prefix": []
            }
        },
        "ConvertImgUrlToBase64Tests.assertHasCount": {
            "name": "assertHasCount",
            "location": 220,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "bytearray"
                ],
                "snippet": [
                    "bytes"
                ],
                "expected_count": [
                    "int",
                    "float"
                ]
            }
        },
        "ConvertImgUrlToBase64Tests.givenTestImage": {
            "name": "givenTestImage",
            "location": 226,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "None",
                    "dict[, ]",
                    "int",
                    "typing.MutableMapping"
                ],
                "content_type": [
                    "typing.Text"
                ],
                "status": [
                    "int"
                ],
                "url": [
                    "typing.Text"
                ]
            }
        },
        "ConvertImgUrlToBase64Tests.fail_if_called": {
            "name": "fail_if_called",
            "location": 238,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "str"
                ]
            }
        },
        "EnsureHasSentAtTests.test_sets_sent_at_if_missing": {
            "name": "test_sets_sent_at_if_missing",
            "location": 243,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EnsureHasSentAtTests.test_sets_sent_at_if_empty": {
            "name": "test_sets_sent_at_if_empty",
            "location": 251,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EnsureHasSentAtTests.test_respects_sent_at_if_existing": {
            "name": "test_respects_sent_at_if_existing",
            "location": 259,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FormatAttachedFilesTests.test_format_attachments_without_attachment": {
            "name": "test_format_attachments_without_attachment",
            "location": 269,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FormatAttachedFilesTests.test_format_attachments_with_image": {
            "name": "test_format_attachments_with_image",
            "location": 276,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DescendingTimestampTests.test_descending_timestamp_correct": {
            "name": "test_descending_timestamp_correct",
            "location": 295,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DescendingTimestampTests.test_descending_timestamp_order_by_year": {
            "name": "test_descending_timestamp_order_by_year",
            "location": 302,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DescendingTimestampTests.test_descending_timestamp_order_by_month": {
            "name": "test_descending_timestamp_order_by_month",
            "location": 312,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DescendingTimestampTests.test_descending_timestamp_order_by_day": {
            "name": "test_descending_timestamp_order_by_day",
            "location": 322,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DescendingTimestampTests.test_descending_timestamp_order_by_hour": {
            "name": "test_descending_timestamp_order_by_hour",
            "location": 332,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DescendingTimestampTests.test_descending_timestamp_order_by_minute": {
            "name": "test_descending_timestamp_order_by_minute",
            "location": 342,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConvertImgUrlToBase64Tests.test_handles_exceptions_when_processing_image.on_error": {
            "name": "on_error",
            "location": 158,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "lokole-master/tests/opwen_email_server/utils/test_path.py": {
        "GetExtensionTests.test_with_simple_extension": {
            "name": "test_with_simple_extension",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GetExtensionTests.test_without_complex_extension": {
            "name": "test_without_complex_extension",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GetExtensionTests.test_without_extension": {
            "name": "test_without_extension",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GetExtensionTests.test_handles_null": {
            "name": "test_handles_null",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "lokole-master/tests/opwen_email_server/utils/test_serialization.py": {
        "JsonTests.test_creates_slim_json": {
            "name": "test_creates_slim_json",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "JsonTests.test_roundtrip": {
            "name": "test_roundtrip",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Base64Tests.test_roundtrip": {
            "name": "test_roundtrip",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MsgpackTests.test_roundtrip": {
            "name": "test_roundtrip",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "JsonlTests.test_roundtrip": {
            "name": "test_roundtrip",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "JsonlTests.test_parses_jsonl_lines": {
            "name": "test_parses_jsonl_lines",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "JsonlTests.test_parses_json_lines": {
            "name": "test_parses_json_lines",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "JsonlTests.test_handles_non_utf8": {
            "name": "test_handles_non_utf8",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GzipTests.test_roundtrip": {
            "name": "test_roundtrip",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GzipTests.test_gunzip": {
            "name": "test_gunzip",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "lokole-master/tests/opwen_email_server/utils/test_string.py": {
        "IsLowercaseTests.test_lowercase": {
            "name": "test_lowercase",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IsLowercaseTests.test_uppercase": {
            "name": "test_uppercase",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UrlsafeTests.test_url_characters": {
            "name": "test_url_characters",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "lokole-master/tests/opwen_email_server/utils/test_temporary.py": {
        "CreateTempFilenameTests.test_creates_new_file": {
            "name": "test_creates_new_file",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CreateTempFilenameTests.test_creates_new_file_preserving_extension": {
            "name": "test_creates_new_file_preserving_extension",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CreateTempFilenameTests.test_creates_new_file_preserving_multi_extension": {
            "name": "test_creates_new_file_preserving_multi_extension",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CreateTempFilenameTests.test_creates_new_file_handling_bad_extension": {
            "name": "test_creates_new_file_handling_bad_extension",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CreateTempFilenameTests.test_creates_different_files": {
            "name": "test_creates_different_files",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CreateTempFilenameTests.assertFileDoesNotExist": {
            "name": "assertFileDoesNotExist",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "str",
                    "None"
                ]
            }
        },
        "CreateTempFilenameTests.assertPathDoesNotContain": {
            "name": "assertPathDoesNotContain",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "str"
                ],
                "part": [
                    "str"
                ]
            }
        },
        "CreateTempFilenameTests.assertHasExtension": {
            "name": "assertHasExtension",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "str"
                ],
                "extension": [
                    "str"
                ]
            }
        },
        "RemovingTests.test_removes_file_when_done": {
            "name": "test_removes_file_when_done",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RemovingTests.test_removes_file_only_if_exists": {
            "name": "test_removes_file_only_if_exists",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RemovingTests.test_removes_file_on_exception": {
            "name": "test_removes_file_on_exception",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RemovingTests.assertFileDoesNotExist": {
            "name": "assertFileDoesNotExist",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "str",
                    "None"
                ]
            }
        }
    },
    "lokole-master/tests/opwen_email_server/utils/test_unique.py": {
        "NewEmailIdTests.test_unique": {
            "name": "test_unique",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "NewGuidTests.test_is_unique": {
            "name": "test_is_unique",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "NewGuidTests.test_is_repeatable": {
            "name": "test_is_repeatable",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "lokole-master/tests/opwen_email_server/utils/__init__.py": {}
}
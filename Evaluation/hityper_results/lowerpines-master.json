{
    "lowerpines-master/fetch_example_json.py": {},
    "lowerpines-master/publish.py": {},
    "lowerpines-master/setup.py": {},
    "lowerpines-master/lowerpines/bot.py": {
        "BotManager.create": {
            "name": "create",
            "location": 13,
            "return": [
                "Bot"
            ],
            "arguments": {
                "self": [],
                "group": [
                    "str"
                ],
                "name": [
                    "str"
                ],
                "callback_url": [
                    "None",
                    "str"
                ],
                "avatar_url": [
                    "None",
                    "str"
                ]
            }
        },
        "BotManager._all": {
            "name": "_all",
            "location": 24,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "lowerpines-master/lowerpines/chat.py": {
        "ChatManager._all": {
            "name": "_all",
            "location": 11,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "lowerpines-master/lowerpines/exceptions.py": {},
    "lowerpines-master/lowerpines/gmi.py": {
        "get_gmi": {
            "name": "get_gmi",
            "location": 10,
            "return": [
                "GMI"
            ],
            "arguments": {
                "access_token": [
                    "str",
                    "list[dict[, ]]",
                    "dict[, ]",
                    "int"
                ]
            }
        },
        "GMI.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "access_token": [
                    "str",
                    "list[str]"
                ]
            }
        },
        "GMI.refresh": {
            "name": "refresh",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GMI.convert_image_url": {
            "name": "convert_image_url",
            "location": 46,
            "return": [],
            "arguments": {
                "self": [],
                "url": [
                    "str"
                ]
            }
        }
    },
    "lowerpines-master/lowerpines/group.py": {
        "GroupManager._all": {
            "name": "_all",
            "location": 10,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GroupManager.former": {
            "name": "former",
            "location": 13,
            "return": [
                "GroupManager"
            ],
            "arguments": {
                "self": []
            }
        },
        "GroupManager.join": {
            "name": "join",
            "location": 16,
            "return": [],
            "arguments": {
                "self": [],
                "group_id": [
                    "str",
                    "bool"
                ],
                "share_token": [
                    "str",
                    "bool"
                ]
            }
        },
        "GroupManager.rejoin": {
            "name": "rejoin",
            "location": 19,
            "return": [],
            "arguments": {
                "self": [],
                "group_id": [
                    "int",
                    "str"
                ]
            }
        }
    },
    "lowerpines-master/lowerpines/manager.py": {
        "AbstractManager.__len__": {
            "name": "__len__",
            "location": 13,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AbstractManager.__getitem__": {
            "name": "__getitem__",
            "location": 17,
            "return": [],
            "arguments": {
                "self": [],
                "key": [
                    "int",
                    "str",
                    "bytes"
                ]
            }
        },
        "AbstractManager.__iter__": {
            "name": "__iter__",
            "location": 21,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AbstractManager.__init__": {
            "name": "__init__",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "gmi": [
                    "str",
                    "bool"
                ],
                "content": [
                    "None",
                    "str",
                    "dict[str, str]",
                    "dict[, ]",
                    "bytes"
                ]
            }
        },
        "AbstractManager._all": {
            "name": "_all",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbstractManager.get": {
            "name": "get",
            "location": 32,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AbstractManager.filter": {
            "name": "filter",
            "location": 41,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AbstractManager.lazy_fill_content": {
            "name": "lazy_fill_content",
            "location": 49,
            "return": [
                "typing.Final",
                "dict[str, list[str]]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "lowerpines-master/lowerpines/message.py": {
        "smart_split_complex_message": {
            "name": "smart_split_complex_message",
            "location": 172,
            "return": [
                "tuple[]",
                "tuple[typing.Union[str,list[]]]"
            ],
            "arguments": {
                "message": [
                    "typing.Mapping"
                ]
            }
        },
        "MessageAttach.__add__": {
            "name": "__add__",
            "location": 6,
            "return": [
                "ComplexMessage"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "typing.Collection",
                    "int",
                    "float"
                ]
            }
        },
        "MessageAttach.__radd__": {
            "name": "__radd__",
            "location": 15,
            "return": [
                "ComplexMessage"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "typing.Collection"
                ]
            }
        },
        "RefAttach.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "user_id": [
                    "int",
                    "str",
                    "None"
                ],
                "display": [
                    "typing.Text"
                ]
            }
        },
        "RefAttach.__str__": {
            "name": "__str__",
            "location": 24,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RefAttach.__repr__": {
            "name": "__repr__",
            "location": 27,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ImageAttach.__init__": {
            "name": "__init__",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "image_url": [
                    "str",
                    "None",
                    "bytes",
                    "list[dict[str, typing.Any]]"
                ]
            }
        },
        "ImageAttach.__str__": {
            "name": "__str__",
            "location": 35,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "ImageAttach.__repr__": {
            "name": "__repr__",
            "location": 38,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "LocationAttach.__init__": {
            "name": "__init__",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "dict[str, typing.Any]",
                    "list[str]",
                    "dict[, ]"
                ],
                "lat": [
                    "int",
                    "str",
                    "typing.Sequence[]",
                    "None"
                ],
                "long": [
                    "int",
                    "str",
                    "typing.Sequence[]",
                    "None"
                ]
            }
        },
        "LocationAttach.__str__": {
            "name": "__str__",
            "location": 48,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LocationAttach.__repr__": {
            "name": "__repr__",
            "location": 51,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "SplitAttach.__init__": {
            "name": "__init__",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "token": [
                    "str",
                    "list[str]"
                ]
            }
        },
        "SplitAttach.__str__": {
            "name": "__str__",
            "location": 60,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SplitAttach.__repr__": {
            "name": "__repr__",
            "location": 63,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "EmojiAttach.__init__": {
            "name": "__init__",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pack_id": [
                    "str",
                    "int",
                    "None"
                ],
                "emoji_id": [
                    "str",
                    "int",
                    "None"
                ]
            }
        },
        "EmojiAttach.__str__": {
            "name": "__str__",
            "location": 75,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "EmojiAttach.__repr__": {
            "name": "__repr__",
            "location": 78,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "QueuedAttach.__init__": {
            "name": "__init__",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str",
                    "bool",
                    "bytes"
                ],
                "queue": [
                    "str",
                    "bool",
                    "bytes"
                ]
            }
        },
        "QueuedAttach.__str__": {
            "name": "__str__",
            "location": 88,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "QueuedAttach.__repr__": {
            "name": "__repr__",
            "location": 91,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "LinkedImageAttach.__init__": {
            "name": "__init__",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str"
                ]
            }
        },
        "ComplexMessage.__init__": {
            "name": "__init__",
            "location": 104,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict[, ]",
                    "dict[typing.AbstractSet, set[typing.Any]]",
                    "dict[str, str]",
                    "list[]",
                    "list[tuple[]]"
                ]
            }
        },
        "ComplexMessage.__add__": {
            "name": "__add__",
            "location": 110,
            "return": [
                "ComplexMessage"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "dict[str, typing.Any]",
                    "list[]",
                    "dict[, ]",
                    "typing.Mapping"
                ]
            }
        },
        "ComplexMessage.__radd__": {
            "name": "__radd__",
            "location": 119,
            "return": [
                "ComplexMessage"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "ComplexMessage.__str__": {
            "name": "__str__",
            "location": 123,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ComplexMessage.get_text": {
            "name": "get_text",
            "location": 126,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ComplexMessage.get_attachments": {
            "name": "get_attachments",
            "location": 129,
            "return": [
                "list[typing.Union[list[list[int]],str]]",
                "list[typing.Union[list[],tuple[]]]",
                "list[dict[typing.Text, typing.Text]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ComplexMessage.just_str": {
            "name": "just_str",
            "location": 168,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "lowerpines-master/lowerpines/user.py": {
        "UserManager._all": {
            "name": "_all",
            "location": 10,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "lowerpines-master/lowerpines/__init__.py": {},
    "lowerpines-master/lowerpines/endpoints/block.py": {
        "Block.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "gmi": [
                    "int",
                    "float"
                ]
            }
        },
        "Block.get_all": {
            "name": "get_all",
            "location": 18,
            "return": [],
            "arguments": {
                "self": [],
                "user_id": [
                    "int",
                    "str"
                ]
            }
        },
        "Block.block_exists": {
            "name": "block_exists",
            "location": 22,
            "return": [],
            "arguments": {
                "gmi": [
                    "str"
                ],
                "user_id": [
                    "str"
                ],
                "other_user_id": [
                    "str"
                ]
            }
        },
        "Block.block": {
            "name": "block",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "gmi": [
                    "str"
                ],
                "user_id": [
                    "str"
                ],
                "other_user_id": [
                    "str"
                ]
            }
        },
        "Block.unblock": {
            "name": "unblock",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "gmi": [
                    "str"
                ],
                "user_id": [
                    "str"
                ],
                "other_user_id": [
                    "str"
                ]
            }
        },
        "BlockIndexRequest.__init__": {
            "name": "__init__",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "gmi": [],
                "user_id": [
                    "str",
                    "int"
                ]
            }
        },
        "BlockIndexRequest.mode": {
            "name": "mode",
            "location": 39,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "BlockIndexRequest.parse": {
            "name": "parse",
            "location": 42,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": [],
                "response": []
            }
        },
        "BlockIndexRequest.args": {
            "name": "args",
            "location": 48,
            "return": [
                "dict[typing.Text, ]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BlockIndexRequest.url": {
            "name": "url",
            "location": 51,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BlockBetweenRequest.__init__": {
            "name": "__init__",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "gmi": [
                    "str"
                ],
                "user_id": [
                    "str",
                    "int"
                ],
                "other_user_id": [
                    "str",
                    "int"
                ]
            }
        },
        "BlockBetweenRequest.mode": {
            "name": "mode",
            "location": 61,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "BlockBetweenRequest.parse": {
            "name": "parse",
            "location": 64,
            "return": [],
            "arguments": {
                "self": [],
                "response": []
            }
        },
        "BlockBetweenRequest.args": {
            "name": "args",
            "location": 67,
            "return": [
                "dict[typing.Text, ]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BlockBetweenRequest.url": {
            "name": "url",
            "location": 70,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BlockCreateRequest.__init__": {
            "name": "__init__",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "gmi": [
                    "str"
                ],
                "user_id": [
                    "str",
                    "int"
                ],
                "other_user_id": [
                    "str",
                    "int"
                ]
            }
        },
        "BlockCreateRequest.mode": {
            "name": "mode",
            "location": 80,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "BlockCreateRequest.parse": {
            "name": "parse",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "response": []
            }
        },
        "BlockCreateRequest.args": {
            "name": "args",
            "location": 86,
            "return": [
                "dict[, ]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BlockCreateRequest.url": {
            "name": "url",
            "location": 89,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BlockUnblockRequest.__init__": {
            "name": "__init__",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "gmi": [
                    "str"
                ],
                "user_id": [
                    "str",
                    "int"
                ],
                "other_user_id": [
                    "str",
                    "int"
                ]
            }
        },
        "BlockUnblockRequest.mode": {
            "name": "mode",
            "location": 105,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "BlockUnblockRequest.parse": {
            "name": "parse",
            "location": 108,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "response": []
            }
        },
        "BlockUnblockRequest.args": {
            "name": "args",
            "location": 111,
            "return": [
                "dict[, ]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BlockUnblockRequest.url": {
            "name": "url",
            "location": 114,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "lowerpines-master/lowerpines/endpoints/bot.py": {
        "Bot.__init__": {
            "name": "__init__",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "gmi": [
                    "str",
                    "bool",
                    "list[str]",
                    "None"
                ],
                "group_id": [
                    "None",
                    "str",
                    "int"
                ],
                "name": [
                    "None",
                    "str"
                ],
                "avatar_url": [
                    "None",
                    "str"
                ],
                "callback_url": [
                    "None",
                    "str"
                ],
                "dm_notification": [
                    "None",
                    "str",
                    "bool",
                    "list[str]"
                ]
            }
        },
        "Bot.group": {
            "name": "group",
            "location": 41,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Bot.save": {
            "name": "save",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Bot.delete": {
            "name": "delete",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Bot.refresh": {
            "name": "refresh",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Bot.post": {
            "name": "post",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "str",
                    "float",
                    "bool"
                ]
            }
        },
        "Bot.get_all": {
            "name": "get_all",
            "location": 83,
            "return": [],
            "arguments": {
                "gmi": [
                    "str"
                ]
            }
        },
        "Bot.get": {
            "name": "get",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {
                "gmi": [
                    "str",
                    "None"
                ],
                "bot_id": [
                    "str",
                    "None"
                ]
            }
        },
        "Bot.__str__": {
            "name": "__str__",
            "location": 90,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BotCreateRequest.__init__": {
            "name": "__init__",
            "location": 95,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "gmi": [
                    "int",
                    "str"
                ],
                "group_id": [
                    "str",
                    "int"
                ],
                "name": [
                    "str",
                    "None"
                ],
                "callback_url": [
                    "None",
                    "str"
                ],
                "avatar_url": [
                    "None",
                    "str"
                ],
                "dm_notification": [
                    "None",
                    "str",
                    "bool",
                    "list[str]"
                ]
            }
        },
        "BotCreateRequest.parse": {
            "name": "parse",
            "location": 111,
            "return": [],
            "arguments": {
                "self": [],
                "response": []
            }
        },
        "BotCreateRequest.mode": {
            "name": "mode",
            "location": 114,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "BotCreateRequest.url": {
            "name": "url",
            "location": 117,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BotCreateRequest.args": {
            "name": "args",
            "location": 120,
            "return": [
                "tuple[]",
                "dict[, ]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BotPostRequest.__init__": {
            "name": "__init__",
            "location": 135,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "gmi": [
                    "bytes",
                    "str",
                    "bool"
                ],
                "bot_id": [
                    "str",
                    "set[int]"
                ],
                "text": [
                    "str",
                    "bytes",
                    "bool"
                ],
                "attachments": [
                    "None",
                    "str",
                    "bytes",
                    "bool"
                ]
            }
        },
        "BotPostRequest.parse": {
            "name": "parse",
            "location": 147,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "response": []
            }
        },
        "BotPostRequest.args": {
            "name": "args",
            "location": 150,
            "return": [
                "dict[typing.Text, str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BotPostRequest.mode": {
            "name": "mode",
            "location": 156,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "BotPostRequest.url": {
            "name": "url",
            "location": 159,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BotIndexRequest.parse": {
            "name": "parse",
            "location": 164,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": [],
                "response": []
            }
        },
        "BotIndexRequest.mode": {
            "name": "mode",
            "location": 170,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "BotIndexRequest.url": {
            "name": "url",
            "location": 173,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BotDestroyRequest.__init__": {
            "name": "__init__",
            "location": 178,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "gmi": [],
                "bot_id": [
                    "str",
                    "set[int]",
                    "int",
                    "None"
                ]
            }
        },
        "BotDestroyRequest.parse": {
            "name": "parse",
            "location": 182,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "response": []
            }
        },
        "BotDestroyRequest.mode": {
            "name": "mode",
            "location": 185,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "BotDestroyRequest.url": {
            "name": "url",
            "location": 188,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BotDestroyRequest.args": {
            "name": "args",
            "location": 191,
            "return": [
                "dict[typing.Text, ]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BotUpdateRequest.__init__": {
            "name": "__init__",
            "location": 199,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "gmi": [
                    "int",
                    "str"
                ],
                "bot_id": [
                    "str",
                    "int"
                ],
                "group_id": [
                    "None",
                    "str",
                    "int"
                ],
                "name": [
                    "None",
                    "str",
                    "bool"
                ],
                "callback_url": [
                    "None",
                    "str"
                ],
                "avatar_url": [
                    "None",
                    "str"
                ],
                "dm_notification": [
                    "None",
                    "str",
                    "bool"
                ]
            }
        },
        "BotUpdateRequest.url": {
            "name": "url",
            "location": 217,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BotUpdateRequest.mode": {
            "name": "mode",
            "location": 220,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "BotUpdateRequest.args": {
            "name": "args",
            "location": 223,
            "return": [
                "str",
                "dict[, ]",
                "dict[int, typing.Any]",
                "dict[str, typing.Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BotUpdateRequest.parse": {
            "name": "parse",
            "location": 245,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "response": []
            }
        }
    },
    "lowerpines-master/lowerpines/endpoints/chat.py": {
        "Chat.__init__": {
            "name": "__init__",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "gmi": [
                    "int",
                    "float"
                ]
            }
        },
        "Chat.get_all": {
            "name": "get_all",
            "location": 32,
            "return": [],
            "arguments": {
                "gmi": [
                    "dict[, ]",
                    "str"
                ]
            }
        },
        "Chat.get": {
            "name": "get",
            "location": 35,
            "return": [],
            "arguments": {
                "self": [],
                "other_user_id": [
                    "int",
                    "str"
                ]
            }
        },
        "Chat.post": {
            "name": "post",
            "location": 38,
            "return": [],
            "arguments": {
                "self": [],
                "message": [
                    "str",
                    "float",
                    "bool"
                ]
            }
        },
        "Chat.on_fields_loaded": {
            "name": "on_fields_loaded",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Chat.__str__": {
            "name": "__str__",
            "location": 52,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "Chat.__repr__": {
            "name": "__repr__",
            "location": 55,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "DirectMessage.get": {
            "name": "get",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "gmi": [
                    "bool",
                    "str",
                    "dict[, ]"
                ]
            }
        },
        "DirectMessage.refresh": {
            "name": "refresh",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DirectMessage.__init__": {
            "name": "__init__",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "gmi": [
                    "str",
                    "bool",
                    "typing.Sequence[dict[str, str]]"
                ],
                "source_guid": [
                    "None",
                    "str",
                    "int",
                    "list[int]",
                    "typing.Any"
                ],
                "recipient_id": [
                    "None",
                    "str"
                ],
                "text": [
                    "None",
                    "str",
                    "bool",
                    "typing.Sequence[dict[str, str]]"
                ],
                "attachments": [
                    "None",
                    "str",
                    "bool",
                    "typing.Sequence[dict[str, str]]"
                ]
            }
        },
        "DirectMessage.save": {
            "name": "save",
            "location": 95,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DirectMessage.__str__": {
            "name": "__str__",
            "location": 110,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DirectMessage.__repr__": {
            "name": "__repr__",
            "location": 113,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "DirectMessageUser.save": {
            "name": "save",
            "location": 118,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DirectMessageUser.get": {
            "name": "get",
            "location": 122,
            "return": [
                "None"
            ],
            "arguments": {
                "gmi": [
                    "bool",
                    "str",
                    "dict[, ]"
                ]
            }
        },
        "DirectMessageUser.refresh": {
            "name": "refresh",
            "location": 125,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DirectMessageUser.__init__": {
            "name": "__init__",
            "location": 132,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "gmi": [
                    "int",
                    "float"
                ]
            }
        },
        "DirectMessageUser.__str__": {
            "name": "__str__",
            "location": 135,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ChatMessagesManager.__init__": {
            "name": "__init__",
            "location": 145,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "chat": [
                    "int",
                    "float"
                ]
            }
        },
        "ChatMessagesManager.all": {
            "name": "all",
            "location": 148,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ChatMessagesManager.recent": {
            "name": "recent",
            "location": 154,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ChatMessagesManager.before": {
            "name": "before",
            "location": 159,
            "return": [],
            "arguments": {
                "self": [],
                "message": [
                    "int",
                    "float"
                ]
            }
        },
        "ChatMessagesManager.since": {
            "name": "since",
            "location": 166,
            "return": [],
            "arguments": {
                "self": [],
                "message": [
                    "int",
                    "float"
                ]
            }
        },
        "DirectMessageChatsRequest.__init__": {
            "name": "__init__",
            "location": 175,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "gmi": [
                    "bool",
                    "dict[str, typing.Any]",
                    "typing.Callable[A, bool]"
                ],
                "page": [
                    "None",
                    "int",
                    "float"
                ],
                "per_page": [
                    "None",
                    "int",
                    "float"
                ]
            }
        },
        "DirectMessageChatsRequest.url": {
            "name": "url",
            "location": 182,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DirectMessageChatsRequest.args": {
            "name": "args",
            "location": 185,
            "return": [
                "dict[typing.Text, ]"
            ],
            "arguments": {
                "self": []
            }
        },
        "DirectMessageChatsRequest.parse": {
            "name": "parse",
            "location": 193,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": [],
                "response": []
            }
        },
        "DirectMessageChatsRequest.mode": {
            "name": "mode",
            "location": 199,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "DirectMessageIndexRequest.__init__": {
            "name": "__init__",
            "location": 204,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "gmi": [
                    "str",
                    "bool"
                ],
                "other_user_id": [
                    "str",
                    "int",
                    "set[int]",
                    "None",
                    "list[str]",
                    "typing.Type"
                ],
                "before_id": [
                    "None",
                    "str",
                    "int",
                    "list[int]"
                ],
                "since_id": [
                    "None",
                    "str",
                    "int"
                ]
            }
        },
        "DirectMessageIndexRequest.url": {
            "name": "url",
            "location": 218,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DirectMessageIndexRequest.args": {
            "name": "args",
            "location": 221,
            "return": [
                "dict[typing.Text, typing.Union[int,str,list[tuple[typing.Union[typing.Any,str]]]]]",
                "dict[typing.Text, typing.Union[str,dict[, ],int]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "DirectMessageIndexRequest.parse": {
            "name": "parse",
            "location": 231,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": [],
                "response": []
            }
        },
        "DirectMessageIndexRequest.mode": {
            "name": "mode",
            "location": 237,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "DirectMessageCreateRequest.__init__": {
            "name": "__init__",
            "location": 242,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "gmi": [
                    "bool"
                ],
                "sender_id": [
                    "str",
                    "int",
                    "set[int]",
                    "None"
                ],
                "recipient_id": [
                    "str",
                    "int",
                    "set[int]",
                    "None"
                ],
                "text": [
                    "str",
                    "None"
                ],
                "attachments": [
                    "None",
                    "str"
                ]
            }
        },
        "DirectMessageCreateRequest.parse": {
            "name": "parse",
            "location": 256,
            "return": [],
            "arguments": {
                "self": [],
                "response": []
            }
        },
        "DirectMessageCreateRequest.url": {
            "name": "url",
            "location": 259,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DirectMessageCreateRequest.args": {
            "name": "args",
            "location": 262,
            "return": [
                "dict[typing.Text, dict[typing.Text, ]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "DirectMessageCreateRequest.mode": {
            "name": "mode",
            "location": 271,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "lowerpines-master/lowerpines/endpoints/group.py": {
        "Group.__init__": {
            "name": "__init__",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "gmi": [
                    "bool"
                ],
                "name": [
                    "None",
                    "str",
                    "dict[str, str]"
                ],
                "description": [
                    "None",
                    "bool",
                    "str"
                ],
                "image_url": [
                    "None",
                    "str"
                ]
            }
        },
        "Group.bots": {
            "name": "bots",
            "location": 61,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Group.on_fields_loaded": {
            "name": "on_fields_loaded",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Group.save": {
            "name": "save",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Group.delete": {
            "name": "delete",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Group.refresh": {
            "name": "refresh",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Group.member_add": {
            "name": "member_add",
            "location": 97,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "int",
                    "float"
                ],
                "user_id": [
                    "str",
                    "int",
                    "float"
                ]
            }
        },
        "Group.member_rm": {
            "name": "member_rm",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "member_id": [
                    "str",
                    "int",
                    "list[str]",
                    "bytes"
                ]
            }
        },
        "Group.post": {
            "name": "post",
            "location": 103,
            "return": [
                "Message"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "str",
                    "float",
                    "bool"
                ]
            }
        },
        "Group.get": {
            "name": "get",
            "location": 110,
            "return": [],
            "arguments": {
                "gmi": [
                    "str",
                    "int",
                    "None"
                ],
                "group_id": [
                    "str",
                    "int",
                    "None"
                ]
            }
        },
        "Group.get_all": {
            "name": "get_all",
            "location": 114,
            "return": [],
            "arguments": {
                "gmi": [
                    "str"
                ]
            }
        },
        "Group.get_former": {
            "name": "get_former",
            "location": 118,
            "return": [],
            "arguments": {
                "gmi": [
                    "str",
                    "int"
                ]
            }
        },
        "Group.join": {
            "name": "join",
            "location": 122,
            "return": [],
            "arguments": {
                "gmi": [
                    "str",
                    "int"
                ],
                "group_id": [
                    "str",
                    "int"
                ],
                "share_token": [
                    "str",
                    "int"
                ]
            }
        },
        "Group.rejoin": {
            "name": "rejoin",
            "location": 126,
            "return": [],
            "arguments": {
                "gmi": [
                    "str",
                    "int"
                ],
                "group_id": [
                    "str",
                    "int"
                ]
            }
        },
        "Group.change_owner": {
            "name": "change_owner",
            "location": 129,
            "return": [],
            "arguments": {
                "self": [],
                "owner_id": [
                    "int",
                    "str",
                    "float",
                    "None",
                    "typing.Mapping"
                ]
            }
        },
        "Group.__str__": {
            "name": "__str__",
            "location": 132,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Group.__repr__": {
            "name": "__repr__",
            "location": 135,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "GroupMessagesManager.__init__": {
            "name": "__init__",
            "location": 145,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "group": [
                    "int",
                    "float"
                ]
            }
        },
        "GroupMessagesManager.all": {
            "name": "all",
            "location": 148,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "GroupMessagesManager.recent": {
            "name": "recent",
            "location": 154,
            "return": [],
            "arguments": {
                "self": [],
                "count": [
                    "int"
                ]
            }
        },
        "GroupMessagesManager.before": {
            "name": "before",
            "location": 161,
            "return": [],
            "arguments": {
                "self": [],
                "message": [],
                "count": [
                    "int"
                ]
            }
        },
        "GroupMessagesManager.since": {
            "name": "since",
            "location": 171,
            "return": [],
            "arguments": {
                "self": [],
                "message": [
                    "str",
                    "bool"
                ],
                "count": [
                    "int"
                ]
            }
        },
        "GroupMessagesManager.after": {
            "name": "after",
            "location": 181,
            "return": [],
            "arguments": {
                "self": [],
                "message": [],
                "count": [
                    "int"
                ]
            }
        },
        "GroupsIndexRequest.__init__": {
            "name": "__init__",
            "location": 193,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "gmi": [
                    "bool",
                    "dict[str, typing.Any]",
                    "typing.Callable[A, bool]"
                ],
                "page": [
                    "int"
                ],
                "per_page": [
                    "int"
                ]
            }
        },
        "GroupsIndexRequest.url": {
            "name": "url",
            "location": 198,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GroupsIndexRequest.args": {
            "name": "args",
            "location": 201,
            "return": [
                "dict[typing.Text, ]"
            ],
            "arguments": {
                "self": []
            }
        },
        "GroupsIndexRequest.mode": {
            "name": "mode",
            "location": 204,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "GroupsIndexRequest.parse": {
            "name": "parse",
            "location": 207,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": [],
                "response": []
            }
        },
        "GroupsFormerRequest.url": {
            "name": "url",
            "location": 215,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GroupsFormerRequest.args": {
            "name": "args",
            "location": 218,
            "return": [
                "dict[, ]"
            ],
            "arguments": {
                "self": []
            }
        },
        "GroupsFormerRequest.mode": {
            "name": "mode",
            "location": 221,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "GroupsFormerRequest.parse": {
            "name": "parse",
            "location": 224,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": [],
                "response": []
            }
        },
        "GroupsShowRequest.__init__": {
            "name": "__init__",
            "location": 232,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "gmi": [],
                "group_id": [
                    "str",
                    "set[int]",
                    "int",
                    "None"
                ]
            }
        },
        "GroupsShowRequest.url": {
            "name": "url",
            "location": 236,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GroupsShowRequest.args": {
            "name": "args",
            "location": 239,
            "return": [
                "dict[, ]"
            ],
            "arguments": {
                "self": []
            }
        },
        "GroupsShowRequest.mode": {
            "name": "mode",
            "location": 242,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "GroupsShowRequest.parse": {
            "name": "parse",
            "location": 245,
            "return": [],
            "arguments": {
                "self": [],
                "response": [
                    "dict[str, typing.Any]",
                    "dict[, ]",
                    "dict[str, float]",
                    "dict[str, typing.Union[str,typing.Any]]"
                ]
            }
        },
        "GroupsCreateRequest.parse": {
            "name": "parse",
            "location": 250,
            "return": [],
            "arguments": {
                "self": [],
                "response": [
                    "dict[str, typing.Any]",
                    "dict[, ]",
                    "dict[str, float]",
                    "dict[str, typing.Union[str,typing.Any]]"
                ]
            }
        },
        "GroupsCreateRequest.__init__": {
            "name": "__init__",
            "location": 253,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "gmi": [
                    "bool"
                ],
                "name": [
                    "str",
                    "None",
                    "dict[str, str]"
                ],
                "description": [
                    "None",
                    "bool",
                    "str"
                ],
                "image_url": [
                    "None",
                    "str"
                ],
                "share": [
                    "None",
                    "bool",
                    "str"
                ]
            }
        },
        "GroupsCreateRequest.url": {
            "name": "url",
            "location": 267,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GroupsCreateRequest.mode": {
            "name": "mode",
            "location": 270,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "GroupsCreateRequest.args": {
            "name": "args",
            "location": 273,
            "return": [
                "dict[typing.Text, typing.Union[str,None,bytes,typing.Final]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "GroupsUpdateRequest.__init__": {
            "name": "__init__",
            "location": 288,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "gmi": [
                    "int",
                    "str"
                ],
                "group_id": [
                    "int",
                    "str",
                    "None"
                ],
                "name": [
                    "None",
                    "str"
                ],
                "description": [
                    "None",
                    "str",
                    "bool",
                    "typing.Iterable[str]"
                ],
                "image_url": [
                    "None",
                    "str",
                    "list[str]"
                ],
                "office_mode": [
                    "None",
                    "bool",
                    "str",
                    "list[]",
                    "bytes",
                    "float"
                ],
                "share": [
                    "None",
                    "str",
                    "bool",
                    "typing.Iterable[str]"
                ]
            }
        },
        "GroupsUpdateRequest.parse": {
            "name": "parse",
            "location": 306,
            "return": [],
            "arguments": {
                "self": [],
                "response": [
                    "dict[str, typing.Any]",
                    "dict[, ]",
                    "dict[str, float]",
                    "dict[str, typing.Union[str,typing.Any]]"
                ]
            }
        },
        "GroupsUpdateRequest.url": {
            "name": "url",
            "location": 309,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GroupsUpdateRequest.mode": {
            "name": "mode",
            "location": 312,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "GroupsUpdateRequest.args": {
            "name": "args",
            "location": 315,
            "return": [
                "dict[typing.Text, ]"
            ],
            "arguments": {
                "self": []
            }
        },
        "GroupsDestroyRequest.__init__": {
            "name": "__init__",
            "location": 331,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "gmi": [],
                "group_id": [
                    "str",
                    "set[int]",
                    "int",
                    "None"
                ]
            }
        },
        "GroupsDestroyRequest.parse": {
            "name": "parse",
            "location": 335,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "response": []
            }
        },
        "GroupsDestroyRequest.url": {
            "name": "url",
            "location": 338,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GroupsDestroyRequest.mode": {
            "name": "mode",
            "location": 341,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "GroupsJoinRequest.__init__": {
            "name": "__init__",
            "location": 346,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "gmi": [],
                "group_id": [
                    "str",
                    "int",
                    "None"
                ],
                "share_token": [
                    "str",
                    "list[str]",
                    "typing.Callable[, ]"
                ]
            }
        },
        "GroupsJoinRequest.parse": {
            "name": "parse",
            "location": 351,
            "return": [],
            "arguments": {
                "self": [],
                "response": [
                    "dict[str, typing.Any]",
                    "dict[, ]",
                    "dict[str, float]",
                    "dict[str, typing.Union[str,typing.Any]]"
                ]
            }
        },
        "GroupsJoinRequest.url": {
            "name": "url",
            "location": 354,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GroupsJoinRequest.mode": {
            "name": "mode",
            "location": 363,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "GroupsRejoinRequest.__init__": {
            "name": "__init__",
            "location": 368,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "gmi": [],
                "group_id": [
                    "str",
                    "set[int]",
                    "int",
                    "None"
                ]
            }
        },
        "GroupsRejoinRequest.parse": {
            "name": "parse",
            "location": 372,
            "return": [],
            "arguments": {
                "self": [],
                "response": [
                    "dict[str, typing.Any]",
                    "dict[, ]",
                    "dict[str, float]",
                    "dict[str, typing.Union[str,typing.Any]]"
                ]
            }
        },
        "GroupsRejoinRequest.url": {
            "name": "url",
            "location": 375,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GroupsRejoinRequest.mode": {
            "name": "mode",
            "location": 378,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "GroupsRejoinRequest.args": {
            "name": "args",
            "location": 381,
            "return": [
                "dict[typing.Text, ]"
            ],
            "arguments": {
                "self": []
            }
        },
        "GroupsChangeOwnersRequest.__init__": {
            "name": "__init__",
            "location": 386,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "gmi": [
                    "int"
                ],
                "group_id": [
                    "str",
                    "int",
                    "None",
                    "set[int]",
                    "bytes"
                ],
                "owner_id": [
                    "str",
                    "int",
                    "None"
                ]
            }
        },
        "GroupsChangeOwnersRequest.mode": {
            "name": "mode",
            "location": 391,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "GroupsChangeOwnersRequest.url": {
            "name": "url",
            "location": 394,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GroupsChangeOwnersRequest.parse": {
            "name": "parse",
            "location": 397,
            "return": [],
            "arguments": {
                "self": [],
                "response": []
            }
        },
        "GroupsChangeOwnersRequest.args": {
            "name": "args",
            "location": 400,
            "return": [
                "dict[typing.Text, list[dict[typing.Text, ]]]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "lowerpines-master/lowerpines/endpoints/image.py": {
        "ImageConvertRequest.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "gmi": [
                    "bool"
                ],
                "data": [
                    "str",
                    "dict[str, typing.Any]",
                    "dict[, ]",
                    "typing.Mapping",
                    "bytes",
                    "list[]"
                ]
            }
        },
        "ImageConvertRequest.url": {
            "name": "url",
            "location": 16,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "ImageConvertRequest.mode": {
            "name": "mode",
            "location": 19,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "ImageConvertRequest.args": {
            "name": "args",
            "location": 22,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ImageConvertRequest.parse": {
            "name": "parse",
            "location": 25,
            "return": [],
            "arguments": {
                "self": [],
                "response": []
            }
        },
        "ImageConvertRequest.extract_response": {
            "name": "extract_response",
            "location": 28,
            "return": [],
            "arguments": {
                "self": [],
                "response": []
            }
        }
    },
    "lowerpines-master/lowerpines/endpoints/leaderboard.py": {
        "Leaderboard.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "gmi": [
                    "str",
                    "dict[str, str]",
                    "bool"
                ],
                "group_id": [
                    "str",
                    "set[int]",
                    "int",
                    "None"
                ]
            }
        },
        "Leaderboard._for_period": {
            "name": "_for_period",
            "location": 16,
            "return": [],
            "arguments": {
                "self": [],
                "period": [
                    "int",
                    "float",
                    "None"
                ]
            }
        },
        "Leaderboard.for_today": {
            "name": "for_today",
            "location": 19,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Leaderboard.for_week": {
            "name": "for_week",
            "location": 22,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Leaderboard.for_month": {
            "name": "for_month",
            "location": 25,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Leaderboard.my_likes": {
            "name": "my_likes",
            "location": 28,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Leaderboard.my_hits": {
            "name": "my_hits",
            "location": 31,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LeaderboardIndexRequest.__init__": {
            "name": "__init__",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "gmi": [],
                "group_id": [
                    "str",
                    "set[int]",
                    "int",
                    "None"
                ],
                "period": [
                    "str",
                    "dict[str, str]",
                    "bool"
                ]
            }
        },
        "LeaderboardIndexRequest.parse": {
            "name": "parse",
            "location": 43,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": [],
                "response": []
            }
        },
        "LeaderboardIndexRequest.url": {
            "name": "url",
            "location": 49,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LeaderboardIndexRequest.mode": {
            "name": "mode",
            "location": 52,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "LeaderboardMyLikesRequest.__init__": {
            "name": "__init__",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "gmi": [],
                "group_id": [
                    "str",
                    "set[int]",
                    "int",
                    "None"
                ]
            }
        },
        "LeaderboardMyLikesRequest.parse": {
            "name": "parse",
            "location": 61,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": [],
                "response": []
            }
        },
        "LeaderboardMyLikesRequest.url": {
            "name": "url",
            "location": 67,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LeaderboardMyLikesRequest.mode": {
            "name": "mode",
            "location": 70,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "LeaderboardMyHitsRequest.__init__": {
            "name": "__init__",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "gmi": [],
                "group_id": [
                    "str",
                    "set[int]",
                    "int",
                    "None"
                ]
            }
        },
        "LeaderboardMyHitsRequest.parse": {
            "name": "parse",
            "location": 79,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": [],
                "response": []
            }
        },
        "LeaderboardMyHitsRequest.url": {
            "name": "url",
            "location": 85,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LeaderboardMyHitsRequest.mode": {
            "name": "mode",
            "location": 88,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "lowerpines-master/lowerpines/endpoints/like.py": {
        "LikeCreateRequest.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "gmi": [
                    "int"
                ],
                "conversation_id": [
                    "str",
                    "int",
                    "None"
                ],
                "message_id": [
                    "str",
                    "int",
                    "None"
                ]
            }
        },
        "LikeCreateRequest.parse": {
            "name": "parse",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "response": []
            }
        },
        "LikeCreateRequest.url": {
            "name": "url",
            "location": 20,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LikeCreateRequest.mode": {
            "name": "mode",
            "location": 30,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "LikeDestroyRequest.__init__": {
            "name": "__init__",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "gmi": [
                    "int"
                ],
                "conversation_id": [
                    "str",
                    "int",
                    "None"
                ],
                "message_id": [
                    "str",
                    "int",
                    "None"
                ]
            }
        },
        "LikeDestroyRequest.parse": {
            "name": "parse",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "response": []
            }
        },
        "LikeDestroyRequest.url": {
            "name": "url",
            "location": 43,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LikeDestroyRequest.mode": {
            "name": "mode",
            "location": 53,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "lowerpines-master/lowerpines/endpoints/member.py": {
        "Member.__init__": {
            "name": "__init__",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "gmi": [
                    "str",
                    "None",
                    "bool",
                    "list[str]"
                ],
                "group_id": [
                    "str",
                    "int"
                ],
                "nickname": [
                    "None",
                    "str",
                    "bool",
                    "list[str]"
                ],
                "user_id": [
                    "None",
                    "int",
                    "set[int]",
                    "list[str]",
                    "typing.Type",
                    "str",
                    "list[]"
                ],
                "phone_number": [
                    "None",
                    "str",
                    "bool",
                    "list[str]"
                ],
                "email": [
                    "None",
                    "str",
                    "bool",
                    "list[str]"
                ]
            }
        },
        "Member.save": {
            "name": "save",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Member.refresh": {
            "name": "refresh",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Member.get": {
            "name": "get",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "gmi": [
                    "str",
                    "None"
                ],
                "member_id": [
                    "str",
                    "None"
                ]
            }
        },
        "Member.__str__": {
            "name": "__str__",
            "location": 74,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Member.__repr__": {
            "name": "__repr__",
            "location": 77,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MembersAddRequest.__init__": {
            "name": "__init__",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "gmi": [
                    "str",
                    "int"
                ],
                "group_id": [
                    "str",
                    "int"
                ],
                "nickname": [
                    "str",
                    "None",
                    "bool",
                    "list[str]"
                ],
                "user_id": [
                    "None",
                    "int",
                    "str"
                ],
                "phone_number": [
                    "None",
                    "str",
                    "list[str]"
                ],
                "email": [
                    "None",
                    "str",
                    "dict[str, str]",
                    "typing.Any"
                ],
                "guid": [
                    "None",
                    "str",
                    "bool",
                    "list[str]"
                ]
            }
        },
        "MembersAddRequest.url": {
            "name": "url",
            "location": 104,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MembersAddRequest.args": {
            "name": "args",
            "location": 107,
            "return": [
                "dict[typing.Text, list[dict[typing.Text, ]]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MembersAddRequest.mode": {
            "name": "mode",
            "location": 111,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "MembersAddRequest.parse": {
            "name": "parse",
            "location": 114,
            "return": [],
            "arguments": {
                "self": [],
                "response": []
            }
        },
        "MembersResultsRequest.__init__": {
            "name": "__init__",
            "location": 120,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "gmi": [
                    "int"
                ],
                "group_id": [
                    "str",
                    "int",
                    "None"
                ],
                "results_id": [
                    "str",
                    "int",
                    "None"
                ]
            }
        },
        "MembersResultsRequest.mode": {
            "name": "mode",
            "location": 125,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "MembersResultsRequest.url": {
            "name": "url",
            "location": 128,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MembersResultsRequest.parse": {
            "name": "parse",
            "location": 137,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": [],
                "response": []
            }
        },
        "MembersRemoveRequest.__init__": {
            "name": "__init__",
            "location": 145,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "gmi": [
                    "int"
                ],
                "group_id": [
                    "str",
                    "None",
                    "list[str]",
                    "int"
                ],
                "member_id": [
                    "str",
                    "int",
                    "None"
                ]
            }
        },
        "MembersRemoveRequest.mode": {
            "name": "mode",
            "location": 150,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "MembersRemoveRequest.url": {
            "name": "url",
            "location": 153,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MembersRemoveRequest.parse": {
            "name": "parse",
            "location": 163,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "response": []
            }
        },
        "MembersUpdateRequest.__init__": {
            "name": "__init__",
            "location": 168,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "gmi": [],
                "group_id": [
                    "str",
                    "set[int]",
                    "int",
                    "None"
                ],
                "nickname": [
                    "str",
                    "dict[str, str]",
                    "bool"
                ]
            }
        },
        "MembersUpdateRequest.mode": {
            "name": "mode",
            "location": 173,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "MembersUpdateRequest.url": {
            "name": "url",
            "location": 176,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MembersUpdateRequest.args": {
            "name": "args",
            "location": 179,
            "return": [
                "dict[typing.Text, dict[typing.Text, ]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MembersUpdateRequest.parse": {
            "name": "parse",
            "location": 182,
            "return": [],
            "arguments": {
                "self": [],
                "response": [
                    "dict[, ]",
                    "str"
                ]
            }
        }
    },
    "lowerpines-master/lowerpines/endpoints/message.py": {
        "Message.__init__": {
            "name": "__init__",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "gmi": [
                    "str",
                    "None",
                    "typing.Iterable[str]"
                ],
                "group_id": [
                    "None",
                    "int",
                    "str"
                ],
                "source_guid": [
                    "None",
                    "bool",
                    "str",
                    "typing.Mapping",
                    "list[str]"
                ],
                "text": [
                    "None",
                    "str",
                    "typing.Iterable[str]"
                ],
                "attachments": [
                    "None",
                    "str",
                    "typing.Iterable[str]"
                ]
            }
        },
        "Message.save": {
            "name": "save",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Message.refresh": {
            "name": "refresh",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Message.on_fields_loaded": {
            "name": "on_fields_loaded",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Message.__repr__": {
            "name": "__repr__",
            "location": 95,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Message.__str__": {
            "name": "__str__",
            "location": 98,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Message.get": {
            "name": "get",
            "location": 102,
            "return": [],
            "arguments": {
                "gmi": [
                    "str"
                ],
                "group_id": [
                    "str"
                ],
                "message_id": [
                    "str"
                ]
            }
        },
        "Message.like": {
            "name": "like",
            "location": 105,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Message.unlike": {
            "name": "unlike",
            "location": 111,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MessagesIndexRequest.__init__": {
            "name": "__init__",
            "location": 119,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "gmi": [],
                "group_id": [
                    "str",
                    "None"
                ],
                "before_id": [
                    "None",
                    "str",
                    "typing.Any",
                    "dict[str, str]",
                    "list[str]"
                ],
                "since_id": [
                    "None",
                    "str",
                    "list[]",
                    "list[str]",
                    "typing.Mapping"
                ],
                "after_id": [
                    "None",
                    "str",
                    "typing.Any",
                    "dict[str, str]",
                    "list[str]"
                ],
                "limit": [
                    "int"
                ]
            }
        },
        "MessagesIndexRequest.mode": {
            "name": "mode",
            "location": 148,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "MessagesIndexRequest.url": {
            "name": "url",
            "location": 151,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MessagesIndexRequest.args": {
            "name": "args",
            "location": 154,
            "return": [
                "dict[typing.Text, ]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MessagesIndexRequest.parse": {
            "name": "parse",
            "location": 166,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": [],
                "response": []
            }
        },
        "MessagesCreateRequest.__init__": {
            "name": "__init__",
            "location": 175,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "gmi": [
                    "int",
                    "str"
                ],
                "group_id": [
                    "int",
                    "str"
                ],
                "source_guid": [
                    "bool",
                    "str",
                    "typing.Mapping",
                    "None",
                    "list[str]"
                ],
                "text": [
                    "str",
                    "None",
                    "typing.Iterable[str]"
                ],
                "attachments": [
                    "None",
                    "str",
                    "typing.Iterable[str]"
                ]
            }
        },
        "MessagesCreateRequest.mode": {
            "name": "mode",
            "location": 189,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "MessagesCreateRequest.url": {
            "name": "url",
            "location": 192,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MessagesCreateRequest.args": {
            "name": "args",
            "location": 195,
            "return": [
                "dict[typing.Text, dict[typing.Text, ]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MessagesCreateRequest.parse": {
            "name": "parse",
            "location": 204,
            "return": [],
            "arguments": {
                "self": [],
                "response": []
            }
        },
        "MessagesShowRequest.__init__": {
            "name": "__init__",
            "location": 212,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "gmi": [
                    "int"
                ],
                "group_id": [
                    "str",
                    "None",
                    "list[str]",
                    "int"
                ],
                "message_id": [
                    "str",
                    "int",
                    "None"
                ]
            }
        },
        "MessagesShowRequest.url": {
            "name": "url",
            "location": 217,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MessagesShowRequest.mode": {
            "name": "mode",
            "location": 226,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "MessagesShowRequest.parse": {
            "name": "parse",
            "location": 229,
            "return": [],
            "arguments": {
                "self": [],
                "response": []
            }
        }
    },
    "lowerpines-master/lowerpines/endpoints/object.py": {
        "Field.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Field.with_api_name": {
            "name": "with_api_name",
            "location": 17,
            "return": [
                "Field"
            ],
            "arguments": {
                "self": [],
                "api_name": [
                    "int",
                    "str",
                    "None"
                ]
            }
        },
        "Field.with_type": {
            "name": "with_type",
            "location": 21,
            "return": [
                "Field"
            ],
            "arguments": {
                "self": [],
                "_": [
                    "typing.Type",
                    "bool"
                ]
            }
        },
        "Field.with_field_name": {
            "name": "with_field_name",
            "location": 26,
            "return": [
                "Field"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "AbstractObjectType.__new__": {
            "name": "__new__",
            "location": 34,
            "return": [],
            "arguments": {
                "mcs": [
                    "str",
                    "None"
                ],
                "name": [
                    "str",
                    "None"
                ],
                "bases": [
                    "str",
                    "None"
                ],
                "attrs": [
                    "dict[, ]",
                    "dict[str, typing.Any]",
                    "dict[str, str]",
                    "dict[str, typing.Type]",
                    "dict[str, dict[str, str]]"
                ]
            }
        },
        "AbstractObject.__init__": {
            "name": "__init__",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_": [
                    "tuple[typing.Union[str,str]]",
                    "int",
                    "str"
                ]
            }
        },
        "AbstractObject._refresh_from_other": {
            "name": "_refresh_from_other",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "str",
                    "typing.Callable[, ]",
                    "typing.Type"
                ]
            }
        },
        "AbstractObject.on_fields_loaded": {
            "name": "on_fields_loaded",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbstractObject.from_json": {
            "name": "from_json",
            "location": 75,
            "return": [],
            "arguments": {
                "cls": [
                    "list[dict[, ]]",
                    "int"
                ],
                "gmi": [
                    "list[dict[, ]]",
                    "int"
                ],
                "json_dict": [
                    "dict[, ]"
                ]
            }
        },
        "RetrievableObject.save": {
            "name": "save",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RetrievableObject.refresh": {
            "name": "refresh",
            "location": 97,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RetrievableObject.get": {
            "name": "get",
            "location": 101,
            "return": [
                "None"
            ],
            "arguments": {
                "gmi": [
                    "bool",
                    "str",
                    "dict[, ]"
                ]
            }
        }
    },
    "lowerpines-master/lowerpines/endpoints/request.py": {
        "Request.__init__": {
            "name": "__init__",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "gmi": [
                    "str"
                ]
            }
        },
        "Request.url": {
            "name": "url",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Request.mode": {
            "name": "mode",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Request.parse": {
            "name": "parse",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "response": []
            }
        },
        "Request.args": {
            "name": "args",
            "location": 48,
            "return": [
                "dict[, ]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Request.execute": {
            "name": "execute",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Request.error_check": {
            "name": "error_check",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "request": []
            }
        },
        "Request.extract_response": {
            "name": "extract_response",
            "location": 107,
            "return": [],
            "arguments": {
                "self": [],
                "response": []
            }
        }
    },
    "lowerpines-master/lowerpines/endpoints/sms.py": {
        "SmsCreateRequest.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "gmi": [],
                "duration": [
                    "int"
                ],
                "registration_id": [
                    "str",
                    "set[int]",
                    "int",
                    "None"
                ]
            }
        },
        "SmsCreateRequest.mode": {
            "name": "mode",
            "location": 19,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "SmsCreateRequest.parse": {
            "name": "parse",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "response": []
            }
        },
        "SmsCreateRequest.args": {
            "name": "args",
            "location": 25,
            "return": [
                "dict[typing.Text, ]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SmsCreateRequest.url": {
            "name": "url",
            "location": 28,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SmsDeleteRequest.mode": {
            "name": "mode",
            "location": 33,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "SmsDeleteRequest.parse": {
            "name": "parse",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "response": []
            }
        },
        "SmsDeleteRequest.url": {
            "name": "url",
            "location": 39,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "lowerpines-master/lowerpines/endpoints/user.py": {
        "User.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "gmi": [
                    "int",
                    "float"
                ]
            }
        },
        "User.save": {
            "name": "save",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "User.refresh": {
            "name": "refresh",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "User.get": {
            "name": "get",
            "location": 36,
            "return": [],
            "arguments": {
                "cls": [
                    "bool",
                    "typing.Type",
                    "str",
                    "None"
                ],
                "gmi": [
                    "bool",
                    "typing.Type",
                    "str",
                    "None"
                ]
            }
        },
        "User.enable_sms": {
            "name": "enable_sms",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "duration": [
                    "str",
                    "int",
                    "bytes"
                ],
                "registration_id": [
                    "str",
                    "int",
                    "bytes"
                ]
            }
        },
        "User.disable_sms": {
            "name": "disable_sms",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserMeRequest.mode": {
            "name": "mode",
            "location": 49,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserMeRequest.parse": {
            "name": "parse",
            "location": 52,
            "return": [],
            "arguments": {
                "self": [],
                "response": [
                    "dict[str, typing.Any]",
                    "dict[, ]",
                    "dict[str, float]",
                    "dict[str, typing.Union[str,typing.Any]]"
                ]
            }
        },
        "UserMeRequest.url": {
            "name": "url",
            "location": 55,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UserUpdateRequest.__init__": {
            "name": "__init__",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "gmi": [
                    "str",
                    "bool"
                ],
                "avatar_url": [
                    "None",
                    "str"
                ],
                "name": [
                    "None",
                    "str",
                    "list[str]"
                ],
                "email": [
                    "None",
                    "str",
                    "int"
                ],
                "zip_code": [
                    "None",
                    "str",
                    "bool"
                ]
            }
        },
        "UserUpdateRequest.mode": {
            "name": "mode",
            "location": 74,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserUpdateRequest.parse": {
            "name": "parse",
            "location": 77,
            "return": [],
            "arguments": {
                "self": [],
                "response": [
                    "dict[str, typing.Any]",
                    "dict[, ]",
                    "dict[str, float]",
                    "dict[str, typing.Union[str,typing.Any]]"
                ]
            }
        },
        "UserUpdateRequest.url": {
            "name": "url",
            "location": 80,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UserUpdateRequest.args": {
            "name": "args",
            "location": 83,
            "return": [
                "dict[, ]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "lowerpines-master/lowerpines/endpoints/__init__.py": {},
    "lowerpines-master/test/dump_json.py": {
        "dump_json": {
            "name": "dump_json",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "json_dump_dir": [
                    "str",
                    "list[str]"
                ],
                "req": [],
                "response": [
                    "None",
                    "str",
                    "int",
                    "dict[, ]"
                ]
            }
        },
        "dump_json.hash_user_keys": {
            "name": "hash_user_keys",
            "location": 24,
            "return": [],
            "arguments": {
                "key": [],
                "value": []
            }
        },
        "dump_json.recursive_descend": {
            "name": "recursive_descend",
            "location": 45,
            "return": [
                "list[]",
                "dict[, ]"
            ],
            "arguments": {
                "tree": []
            }
        }
    },
    "lowerpines-master/test/test_abstract_manager.py": {
        "mm_instance": {
            "name": "mm_instance",
            "location": 24,
            "return": [
                "MockManager"
            ],
            "arguments": {
                "content": [
                    "None",
                    "str"
                ]
            }
        },
        "MockManager._all": {
            "name": "_all",
            "location": 14,
            "return": [
                "list[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MockType.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "val": [
                    "int",
                    "float"
                ]
            }
        },
        "TestAbstractManager.setUp": {
            "name": "setUp",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAbstractManager.test_all_case": {
            "name": "test_all_case",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAbstractManager.test_custom_case": {
            "name": "test_custom_case",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAbstractManager.test_lazy_len_call": {
            "name": "test_lazy_len_call",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAbstractManager.test_lazy_get_item_call": {
            "name": "test_lazy_get_item_call",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAbstractManager.test_get_item": {
            "name": "test_get_item",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAbstractManager.test_get_item_none_found": {
            "name": "test_get_item_none_found",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAbstractManager.test_get_item_multiple_found": {
            "name": "test_get_item_multiple_found",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAbstractManager.test_filter_single": {
            "name": "test_filter_single",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAbstractManager.test_filter_multiple": {
            "name": "test_filter_multiple",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "lowerpines-master/test/test_complex_message.py": {
        "ComplexMessageTest.test_manual_creation": {
            "name": "test_manual_creation",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ComplexMessageTest.test_dynamic_creation": {
            "name": "test_dynamic_creation",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ComplexMessageTest.test_dynamic_creation_reverse_order": {
            "name": "test_dynamic_creation_reverse_order",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ComplexMessageTest.test_str_func": {
            "name": "test_str_func",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ComplexMessageTest.test_forward_add": {
            "name": "test_forward_add",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ComplexMessageTest.test_reverse_add": {
            "name": "test_reverse_add",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SmartSplitComplexMessage.test_complex_message": {
            "name": "test_complex_message",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SmartSplitComplexMessage.test_str_message": {
            "name": "test_str_message",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SmartSplitComplexMessage.test_bad_input": {
            "name": "test_bad_input",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MessageAttachTest.test_mixing_together": {
            "name": "test_mixing_together",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MessageAttachTest.test_forward_add": {
            "name": "test_forward_add",
            "location": 113,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RefAttachTest.test_hidden": {
            "name": "test_hidden",
            "location": 119,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RefAttachTest.test_visible": {
            "name": "test_visible",
            "location": 127,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RefAttachTest.test_multiple_in_order": {
            "name": "test_multiple_in_order",
            "location": 135,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RefAttachTest.test_multiple_split": {
            "name": "test_multiple_split",
            "location": 154,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ImageAttachTest.test_order_independence": {
            "name": "test_order_independence",
            "location": 170,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "lowerpines-master/test/test_gmi.py": {
        "GMITest.test_cache": {
            "name": "test_cache",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GMITest.test_refresh": {
            "name": "test_refresh",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GMITest.test_convert_image_url": {
            "name": "test_convert_image_url",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "request_init": []
            }
        }
    },
    "lowerpines-master/test/__init__.py": {},
    "lowerpines-master/test/endpoints/test_block.py": {
        "TestBlock.test_get_all": {
            "name": "test_get_all",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "request_init": []
            }
        },
        "TestBlock.test_block_exists": {
            "name": "test_block_exists",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "request_init": []
            }
        },
        "TestBlock.test_block": {
            "name": "test_block",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "request_init": []
            }
        },
        "TestBlock.test_unblock": {
            "name": "test_unblock",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "request_init": []
            }
        }
    },
    "lowerpines-master/test/endpoints/test_image.py": {
        "TestImage.setUp": {
            "name": "setUp",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "request_init": [
                    "list[]",
                    "bool",
                    "str"
                ]
            }
        },
        "TestImage.test_url": {
            "name": "test_url",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestImage.test_mode": {
            "name": "test_mode",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestImage.test_args": {
            "name": "test_args",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestImage.test_parse": {
            "name": "test_parse",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestImage.test_extract_response": {
            "name": "test_extract_response",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "lowerpines-master/test/endpoints/test_user.py": {
        "TestUser.test_save": {
            "name": "test_save",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "request_init": []
            }
        },
        "TestUser.test_refresh": {
            "name": "test_refresh",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "request_init": []
            }
        },
        "TestUser.test_get": {
            "name": "test_get",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "request_init": []
            }
        },
        "TestUser.test_enable_sms": {
            "name": "test_enable_sms",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "request_init": []
            }
        },
        "TestUser.test_disable_sms": {
            "name": "test_disable_sms",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "request_init": []
            }
        }
    },
    "lowerpines-master/test/endpoints/__init__.py": {},
    "lowerpines-master/test/endpoints/internals/test_abstract_object.py": {
        "TestField.setUp": {
            "name": "setUp",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestField.test_basic_field": {
            "name": "test_basic_field",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestField.test_api_field": {
            "name": "test_api_field",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAbstractObjectType.setUp": {
            "name": "setUp",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAbstractObjectType.test_object_values": {
            "name": "test_object_values",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAbstractObjectType.test_fields_set": {
            "name": "test_fields_set",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MockAbstractObject.__init__": {
            "name": "__init__",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "gmi": [
                    "int",
                    "float"
                ]
            }
        },
        "MockAbstractObject.on_fields_loaded": {
            "name": "on_fields_loaded",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAbstractObject.setUp": {
            "name": "setUp",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAbstractObject.test_fields": {
            "name": "test_fields",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAbstractObject.test_on_fields_loaded_called": {
            "name": "test_on_fields_loaded_called",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAbstractObject.test_refresh_from_other": {
            "name": "test_refresh_from_other",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "lowerpines-master/test/endpoints/internals/test_error_handling.py": {
        "EndpointErrorHandling.test_sms_create": {
            "name": "test_sms_create",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "lowerpines-master/test/endpoints/internals/test_replay_data.py": {
        "MockRequestsResponse.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "response_json": [
                    "bytes",
                    "str"
                ]
            }
        },
        "MockRequestsResponse.json": {
            "name": "json",
            "location": 19,
            "return": [
                "dict[typing.Text, ]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestReplayAll.setUp": {
            "name": "setUp",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestReplayAll.test_all": {
            "name": "test_all",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestReplayAll.check_file": {
            "name": "check_file",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "recorded_data": [
                    "str",
                    "bytes"
                ]
            }
        },
        "TestReplayAll.check_types": {
            "name": "check_types",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "klass": [
                    "dict[, ]"
                ]
            }
        },
        "TestReplayAll.check_file.mocked_requests_api_call": {
            "name": "mocked_requests_api_call",
            "location": 38,
            "return": [
                "MockRequestsResponse"
            ],
            "arguments": {
                "url": [],
                "params": [],
                "headers": [],
                "data": [
                    "None"
                ]
            }
        }
    },
    "lowerpines-master/test/endpoints/internals/__init__.py": {}
}
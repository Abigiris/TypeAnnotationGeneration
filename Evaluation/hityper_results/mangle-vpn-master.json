{
    "mangle-vpn-master/manage.py": {},
    "mangle-vpn-master/mangle/settings.py": {},
    "mangle-vpn-master/mangle/version.py": {
        "version": {
            "name": "version",
            "location": 13,
            "return": [
                "str"
            ],
            "arguments": {}
        }
    },
    "mangle-vpn-master/mangle/wsgi.py": {},
    "mangle-vpn-master/mangle/__init__.py": {},
    "mangle-vpn-master/mangle/cli/command.py": {
        "BaseCommand.header": {
            "name": "header",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "title": [
                    "str"
                ]
            }
        },
        "BaseCommand.print": {
            "name": "print",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "str"
                ]
            }
        },
        "BaseCommand.bold": {
            "name": "bold",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "typing.MutableMapping",
                    "typing.Type"
                ]
            }
        },
        "BaseCommand.error": {
            "name": "error",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "str",
                    "typing.Type"
                ]
            }
        },
        "BaseCommand.info": {
            "name": "info",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "str"
                ]
            }
        },
        "BaseCommand.ok": {
            "name": "ok",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "str"
                ]
            }
        },
        "BaseCommand.warn": {
            "name": "warn",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "str"
                ]
            }
        },
        "BaseCommand.newline": {
            "name": "newline",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "count": [
                    "int"
                ]
            }
        },
        "BaseCommand.title": {
            "name": "title",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseCommand.exit": {
            "name": "exit",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "None",
                    "bool"
                ]
            }
        },
        "BaseCommand._output": {
            "name": "_output",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "color": [
                    "str",
                    "int"
                ],
                "message": [
                    "str"
                ]
            }
        }
    },
    "mangle-vpn-master/mangle/cli/__init__.py": {},
    "mangle-vpn-master/mangle/cli/management/__init__.py": {},
    "mangle-vpn-master/mangle/cli/management/commands/install.py": {
        "create_tasks_unit": {
            "name": "create_tasks_unit",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "create_vpn_unit": {
            "name": "create_vpn_unit",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "create_web_keys": {
            "name": "create_web_keys",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "create_web_unit": {
            "name": "create_web_unit",
            "location": 97,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "create_web_vhost": {
            "name": "create_web_vhost",
            "location": 115,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "_create_unit_from_template": {
            "name": "_create_unit_from_template",
            "location": 139,
            "return": [
                "None"
            ],
            "arguments": {
                "path": [
                    "str"
                ],
                "template": [
                    "str"
                ],
                "data": [
                    "None",
                    "str"
                ]
            }
        },
        "which": {
            "name": "which",
            "location": 149,
            "return": [],
            "arguments": {
                "name": [
                    "str",
                    "typing.Callable[, ]",
                    "None",
                    "list[str]"
                ]
            }
        },
        "Command.handle": {
            "name": "handle",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "mangle-vpn-master/mangle/cli/management/commands/version.py": {
        "Command.handle": {
            "name": "handle",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "mangle-vpn-master/mangle/cli/management/commands/vpn.py": {
        "vpn_pre_start": {
            "name": "vpn_pre_start",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "vpn_post_start": {
            "name": "vpn_post_start",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "vpn_post_stop": {
            "name": "vpn_post_stop",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "vpn_client_authenticate": {
            "name": "vpn_client_authenticate",
            "location": 105,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "vpn_client_connect": {
            "name": "vpn_client_connect",
            "location": 136,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "vpn_client_disconnect": {
            "name": "vpn_client_disconnect",
            "location": 174,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "render_rules": {
            "name": "render_rules",
            "location": 197,
            "return": [],
            "arguments": {}
        },
        "Command.add_arguments": {
            "name": "add_arguments",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parser": []
            }
        },
        "Command.handle": {
            "name": "handle",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "mangle-vpn-master/mangle/cli/management/commands/web.py": {
        "web_post_start": {
            "name": "web_post_start",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "web_post_stop": {
            "name": "web_post_stop",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "_render_rules": {
            "name": "_render_rules",
            "location": 54,
            "return": [],
            "arguments": {}
        },
        "Command.add_arguments": {
            "name": "add_arguments",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parser": []
            }
        },
        "Command.handle": {
            "name": "handle",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "mangle-vpn-master/mangle/cli/management/commands/__init__.py": {},
    "mangle-vpn-master/mangle/common/config.py": {
        "all": {
            "name": "all",
            "location": 16,
            "return": [
                "dict[, ]"
            ],
            "arguments": {}
        },
        "get": {
            "name": "get",
            "location": 24,
            "return": [],
            "arguments": {
                "name": [
                    "str"
                ],
                "default": [
                    "None",
                    "str"
                ]
            }
        },
        "get_int": {
            "name": "get_int",
            "location": 33,
            "return": [
                "int"
            ],
            "arguments": {
                "name": [
                    "str"
                ],
                "default": [
                    "int"
                ]
            }
        },
        "get_float": {
            "name": "get_float",
            "location": 41,
            "return": [
                "float"
            ],
            "arguments": {
                "name": [
                    "str"
                ],
                "default": [
                    "float"
                ]
            }
        },
        "get_bool": {
            "name": "get_bool",
            "location": 49,
            "return": [
                "bool"
            ],
            "arguments": {
                "name": [
                    "str"
                ],
                "default": [
                    "bool"
                ]
            }
        },
        "get_list": {
            "name": "get_list",
            "location": 65,
            "return": [],
            "arguments": {
                "name": [
                    "str",
                    "set[str]"
                ],
                "sep": [
                    "typing.Text"
                ]
            }
        },
        "has": {
            "name": "has",
            "location": 74,
            "return": [
                "bool"
            ],
            "arguments": {
                "name": [
                    "str",
                    "int"
                ]
            }
        },
        "set": {
            "name": "set",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "name": [
                    "str",
                    "list[str]",
                    "None"
                ],
                "value": [
                    "str",
                    "list[str]",
                    "None"
                ]
            }
        },
        "set_default": {
            "name": "set_default",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {
                "name": [
                    "str",
                    "None",
                    "float",
                    "bool"
                ],
                "value": [
                    "str"
                ]
            }
        },
        "set_list": {
            "name": "set_list",
            "location": 102,
            "return": [
                "None"
            ],
            "arguments": {
                "name": [
                    "str",
                    "set[str]",
                    "None",
                    "dict[str, 'LabwareDefinition']",
                    "list[str]",
                    "bool",
                    "dict[, ]"
                ],
                "value": [
                    "str",
                    "set[str]",
                    "dict[str, 'LabwareDefinition']",
                    "list[str]",
                    "dict[, ]"
                ],
                "sep": [
                    "typing.Text"
                ]
            }
        },
        "delete": {
            "name": "delete",
            "location": 111,
            "return": [
                "None"
            ],
            "arguments": {
                "name": [
                    "str",
                    "None"
                ]
            }
        },
        "reload": {
            "name": "reload",
            "location": 122,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "url": {
            "name": "url",
            "location": 131,
            "return": [
                "str"
            ],
            "arguments": {}
        }
    },
    "mangle-vpn-master/mangle/common/iptables.py": {
        "get_chains": {
            "name": "get_chains",
            "location": 4,
            "return": [
                "list[bytes]"
            ],
            "arguments": {
                "table": [
                    "str"
                ]
            }
        },
        "get_rules": {
            "name": "get_rules",
            "location": 19,
            "return": [],
            "arguments": {
                "table": [
                    "str"
                ],
                "chain": [
                    "typing.Text"
                ]
            }
        },
        "flush": {
            "name": "flush",
            "location": 29,
            "return": [],
            "arguments": {
                "table": [
                    "str",
                    "int"
                ],
                "chain": [
                    "typing.Text"
                ]
            }
        },
        "get_chain_targets": {
            "name": "get_chain_targets",
            "location": 38,
            "return": [
                "list[bytes]"
            ],
            "arguments": {
                "table": [
                    "str"
                ],
                "chain": [
                    "str",
                    "int"
                ]
            }
        },
        "create_chain": {
            "name": "create_chain",
            "location": 53,
            "return": [],
            "arguments": {
                "table": [
                    "str",
                    "typing.Callable[, ]",
                    "int"
                ],
                "chain": [
                    "str",
                    "typing.Callable[, ]",
                    "int"
                ]
            }
        },
        "delete_chain": {
            "name": "delete_chain",
            "location": 61,
            "return": [],
            "arguments": {
                "table": [
                    "str",
                    "float"
                ],
                "chain": [
                    "str",
                    "float"
                ]
            }
        },
        "rename_chain": {
            "name": "rename_chain",
            "location": 70,
            "return": [],
            "arguments": {
                "table": [
                    "str",
                    "None"
                ],
                "chain": [
                    "str",
                    "None"
                ],
                "name": [
                    "str",
                    "None"
                ]
            }
        },
        "chain_exists": {
            "name": "chain_exists",
            "location": 78,
            "return": [
                "bool"
            ],
            "arguments": {
                "table": [
                    "str",
                    "int"
                ],
                "chain": [
                    "str",
                    "int"
                ]
            }
        },
        "append_rule": {
            "name": "append_rule",
            "location": 86,
            "return": [],
            "arguments": {
                "table": [
                    "str",
                    "int"
                ],
                "chain": [
                    "str",
                    "int"
                ]
            }
        },
        "append_unique_rule": {
            "name": "append_unique_rule",
            "location": 94,
            "return": [
                "bool"
            ],
            "arguments": {
                "table": [
                    "typing.Iterable[str]"
                ],
                "chain": [
                    "typing.Iterable[str]"
                ]
            }
        },
        "insert_rule": {
            "name": "insert_rule",
            "location": 105,
            "return": [],
            "arguments": {
                "table": [
                    "str",
                    "int"
                ],
                "chain": [
                    "str",
                    "int"
                ],
                "position": [
                    "str",
                    "int"
                ]
            }
        },
        "insert_unique_rule": {
            "name": "insert_unique_rule",
            "location": 113,
            "return": [
                "bool"
            ],
            "arguments": {
                "table": [
                    "typing.Iterable[str]"
                ],
                "chain": [
                    "typing.Iterable[str]"
                ],
                "position": [
                    "typing.Iterable[str]"
                ]
            }
        },
        "delete_rule": {
            "name": "delete_rule",
            "location": 124,
            "return": [],
            "arguments": {
                "table": [
                    "typing.Iterable[str]",
                    "str"
                ],
                "chain": [
                    "typing.Iterable[str]",
                    "str"
                ]
            }
        },
        "clear_rule": {
            "name": "clear_rule",
            "location": 132,
            "return": [
                "bool"
            ],
            "arguments": {
                "table": [
                    "str",
                    "int"
                ],
                "chain": [
                    "str",
                    "int"
                ]
            }
        },
        "rule_exists": {
            "name": "rule_exists",
            "location": 143,
            "return": [],
            "arguments": {
                "table": [
                    "str",
                    "int"
                ],
                "chain": [
                    "str",
                    "int"
                ]
            }
        },
        "parse_rules": {
            "name": "parse_rules",
            "location": 151,
            "return": [
                "list[str]"
            ],
            "arguments": {
                "output": [
                    "str"
                ]
            }
        },
        "run": {
            "name": "run",
            "location": 166,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "run_output": {
            "name": "run_output",
            "location": 175,
            "return": [
                "tuple[typing.Optional[int]]"
            ],
            "arguments": {}
        }
    },
    "mangle-vpn-master/mangle/common/mail.py": {
        "send": {
            "name": "send",
            "location": 6,
            "return": [
                "bool"
            ],
            "arguments": {
                "recipient": [
                    "str",
                    "list[str]",
                    "None"
                ],
                "subject": [
                    "str",
                    "list[str]",
                    "None"
                ],
                "body": [
                    "str",
                    "list[str]",
                    "None"
                ]
            }
        },
        "send_template": {
            "name": "send_template",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "recipient": [
                    "str",
                    "typing.Callable[, ]",
                    "typing.IO",
                    "int"
                ],
                "subject": [
                    "str",
                    "typing.Callable[, ]",
                    "typing.IO",
                    "int"
                ],
                "template": [
                    "str",
                    "typing.Callable[, ]",
                    "typing.IO",
                    "int"
                ],
                "data": [
                    "None",
                    "str",
                    "typing.Callable[, ]",
                    "typing.IO",
                    "int"
                ]
            }
        },
        "init": {
            "name": "init",
            "location": 24,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "is_configured": {
            "name": "is_configured",
            "location": 44,
            "return": [
                "bool"
            ],
            "arguments": {}
        }
    },
    "mangle-vpn-master/mangle/common/managers.py": {
        "BaseManager.qs": {
            "name": "qs",
            "location": 8,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BaseManager.by_pk": {
            "name": "by_pk",
            "location": 15,
            "return": [],
            "arguments": {
                "self": [],
                "pk": [
                    "float",
                    "int",
                    "tuple[typing.Union[int,int]]"
                ]
            }
        },
        "UserManager.by_email": {
            "name": "by_email",
            "location": 24,
            "return": [],
            "arguments": {
                "self": [],
                "email": [
                    "str",
                    "list[]",
                    "bool"
                ]
            }
        },
        "UserManager.get_by_natural_key": {
            "name": "get_by_natural_key",
            "location": 31,
            "return": [],
            "arguments": {
                "self": [],
                "username": [
                    "str",
                    "int"
                ]
            }
        },
        "PasswordTokenManager.by_user": {
            "name": "by_user",
            "location": 41,
            "return": [],
            "arguments": {
                "self": [],
                "user": [
                    "str"
                ]
            }
        },
        "PasswordTokenManager.by_token": {
            "name": "by_token",
            "location": 48,
            "return": [],
            "arguments": {
                "self": [],
                "value": [
                    "float",
                    "list[]",
                    "int",
                    "list[str]"
                ]
            }
        },
        "PasswordTokenManager.expired": {
            "name": "expired",
            "location": 55,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GroupManager.by_name": {
            "name": "by_name",
            "location": 64,
            "return": [],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "tuple[str]"
                ]
            }
        },
        "DeviceManager.by_fingerprint": {
            "name": "by_fingerprint",
            "location": 73,
            "return": [],
            "arguments": {
                "self": [],
                "fingerprint": [
                    "float",
                    "int",
                    "tuple[typing.Union[int,int]]"
                ]
            }
        },
        "DeviceManager.by_serial": {
            "name": "by_serial",
            "location": 80,
            "return": [],
            "arguments": {
                "self": [],
                "serial": [
                    "float",
                    "int",
                    "tuple[typing.Union[int,int]]"
                ]
            }
        },
        "ClientManager.by_common_name": {
            "name": "by_common_name",
            "location": 89,
            "return": [],
            "arguments": {
                "self": [],
                "common_name": [
                    "str",
                    "int",
                    "None"
                ]
            }
        },
        "ClientManager.by_user": {
            "name": "by_user",
            "location": 96,
            "return": [],
            "arguments": {
                "self": [],
                "user": [
                    "int"
                ]
            }
        },
        "SettingManager.by_name": {
            "name": "by_name",
            "location": 105,
            "return": [],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "tuple[str]"
                ]
            }
        }
    },
    "mangle-vpn-master/mangle/common/models.py": {
        "Model.__init__": {
            "name": "__init__",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Model.exists": {
            "name": "exists",
            "location": 35,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Model.has_changed": {
            "name": "has_changed",
            "location": 42,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "field": [
                    "str",
                    "None"
                ]
            }
        },
        "User.is_active": {
            "name": "is_active",
            "location": 73,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "User.mfa_required": {
            "name": "mfa_required",
            "location": 82,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "User.mfa_url": {
            "name": "mfa_url",
            "location": 91,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "User.reset_password": {
            "name": "reset_password",
            "location": 103,
            "return": [
                "float",
                "dict[str, str]",
                "str",
                "dict[int, str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "User.save": {
            "name": "save",
            "location": 116,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "User.verify_mfa_code": {
            "name": "verify_mfa_code",
            "location": 125,
            "return": [],
            "arguments": {
                "self": [],
                "code": [
                    "str",
                    "int"
                ]
            }
        },
        "User.reset_mfa": {
            "name": "reset_mfa",
            "location": 133,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "length": [
                    "int"
                ]
            }
        },
        "Device.common_name": {
            "name": "common_name",
            "location": 158,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Device.create_keypair": {
            "name": "create_keypair",
            "location": 166,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Client.duration": {
            "name": "duration",
            "location": 201,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Client.group": {
            "name": "group",
            "location": 209,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Client.user": {
            "name": "user",
            "location": 217,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Client.create_firewall_rule": {
            "name": "create_firewall_rule",
            "location": 224,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Client.delete_firewall_rule": {
            "name": "delete_firewall_rule",
            "location": 236,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Group.chain": {
            "name": "chain",
            "location": 264,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Group.clients": {
            "name": "clients",
            "location": 272,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Group.create_firewall_chain": {
            "name": "create_firewall_chain",
            "location": 279,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Group.delete_firewall_chain": {
            "name": "delete_firewall_chain",
            "location": 295,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FirewallRule.args": {
            "name": "args",
            "location": 317,
            "return": [
                "list[typing.Text]"
            ],
            "arguments": {
                "self": []
            }
        },
        "FirewallRule.create_firewall_rule": {
            "name": "create_firewall_rule",
            "location": 344,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FirewallRule.delete_firewall_rule": {
            "name": "delete_firewall_rule",
            "location": 351,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "mangle-vpn-master/mangle/common/openvpn.py": {
        "create_server_keys": {
            "name": "create_server_keys",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "start": {
            "name": "start",
            "location": 25,
            "return": [],
            "arguments": {}
        },
        "stop": {
            "name": "stop",
            "location": 33,
            "return": [],
            "arguments": {}
        },
        "restart": {
            "name": "restart",
            "location": 41,
            "return": [],
            "arguments": {}
        },
        "is_running": {
            "name": "is_running",
            "location": 49,
            "return": [],
            "arguments": {}
        },
        "create_tls_auth_key": {
            "name": "create_tls_auth_key",
            "location": 57,
            "return": [],
            "arguments": {}
        },
        "server_config": {
            "name": "server_config",
            "location": 66,
            "return": [],
            "arguments": {}
        },
        "client_config": {
            "name": "client_config",
            "location": 95,
            "return": [],
            "arguments": {
                "crt": [
                    "str",
                    "bool"
                ],
                "key": [
                    "str",
                    "bool"
                ],
                "os": [
                    "typing.Text"
                ]
            }
        },
        "kill_client": {
            "name": "kill_client",
            "location": 115,
            "return": [
                "None"
            ],
            "arguments": {
                "name": [
                    "str",
                    "int"
                ]
            }
        },
        "management": {
            "name": "management",
            "location": 124,
            "return": [
                "Management"
            ],
            "arguments": {}
        },
        "Management.__init__": {
            "name": "__init__",
            "location": 137,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "int"
                ]
            }
        },
        "Management.__enter__": {
            "name": "__enter__",
            "location": 141,
            "return": [
                "Management"
            ],
            "arguments": {
                "self": []
            }
        },
        "Management.__exit__": {
            "name": "__exit__",
            "location": 150,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "exc_type": [
                    "typing.Type",
                    "None",
                    "str",
                    "BaseException",
                    "Exception"
                ],
                "exc_val": [
                    "typing.Type",
                    "None",
                    "str",
                    "BaseException",
                    "Exception"
                ],
                "exc_tb": [
                    "typing.Type",
                    "None",
                    "str",
                    "BaseException",
                    "Exception"
                ]
            }
        },
        "Management.run": {
            "name": "run",
            "location": 157,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Management.quit": {
            "name": "quit",
            "location": 166,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Management.connect": {
            "name": "connect",
            "location": 174,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Management._recv": {
            "name": "_recv",
            "location": 190,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Management._send": {
            "name": "_send",
            "location": 204,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "mangle-vpn-master/mangle/common/pki.py": {
        "certificate_authority": {
            "name": "certificate_authority",
            "location": 19,
            "return": [],
            "arguments": {}
        },
        "create_certificate_authority": {
            "name": "create_certificate_authority",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "create_client_keypair": {
            "name": "create_client_keypair",
            "location": 40,
            "return": [],
            "arguments": {
                "name": [
                    "str",
                    "None",
                    "bool"
                ],
                "days": [
                    "str",
                    "None",
                    "bool"
                ]
            }
        },
        "create_server_keypair": {
            "name": "create_server_keypair",
            "location": 48,
            "return": [],
            "arguments": {
                "name": [
                    "str",
                    "typing.Callable[[], int]",
                    "dict[str, str]",
                    "int"
                ],
                "days": [
                    "str",
                    "typing.Callable[[], int]",
                    "dict[str, str]",
                    "int"
                ]
            }
        },
        "create_keypair": {
            "name": "create_keypair",
            "location": 56,
            "return": [
                "KeyPair"
            ],
            "arguments": {
                "name": [
                    "int",
                    "typing.Type",
                    "dict[str, typing.Any]",
                    "None"
                ],
                "days": [
                    "int",
                    "typing.Type",
                    "dict[str, typing.Any]",
                    "None"
                ],
                "is_server": [
                    "int",
                    "typing.Type",
                    "dict[str, typing.Any]",
                    "None"
                ],
                "is_ca": [
                    "int",
                    "typing.Type",
                    "dict[str, typing.Any]",
                    "None"
                ]
            }
        },
        "create_dh_params": {
            "name": "create_dh_params",
            "location": 93,
            "return": [],
            "arguments": {
                "size": [
                    "None",
                    "bytes",
                    "bool"
                ]
            }
        },
        "create_crl": {
            "name": "create_crl",
            "location": 106,
            "return": [],
            "arguments": {}
        },
        "_get_certificate_extensions": {
            "name": "_get_certificate_extensions",
            "location": 139,
            "return": [
                "list[]"
            ],
            "arguments": {
                "is_server": [
                    "typing.Callable[[], typing.Any]",
                    "list[list[int]]",
                    "bool",
                    "dict[str, list[]]",
                    "str",
                    "dict[, ]"
                ],
                "is_ca": [
                    "list[float]",
                    "dict[, ]",
                    "str",
                    "int"
                ]
            }
        },
        "parse_certificate": {
            "name": "parse_certificate",
            "location": 198,
            "return": [],
            "arguments": {
                "crt": [
                    "str"
                ]
            }
        },
        "parse_private_key": {
            "name": "parse_private_key",
            "location": 209,
            "return": [],
            "arguments": {
                "key": [
                    "str"
                ],
                "password": [
                    "None",
                    "str",
                    "bytes",
                    "dict[, ]",
                    "int"
                ]
            }
        },
        "encode_certificate": {
            "name": "encode_certificate",
            "location": 222,
            "return": [
                "str"
            ],
            "arguments": {
                "certificate": [
                    "str",
                    "int",
                    "list[str]",
                    "None"
                ]
            }
        },
        "encode_private_key": {
            "name": "encode_private_key",
            "location": 231,
            "return": [
                "str"
            ],
            "arguments": {
                "private_key": [
                    "str",
                    "bytes"
                ]
            }
        },
        "encode_dh_params": {
            "name": "encode_dh_params",
            "location": 244,
            "return": [
                "str"
            ],
            "arguments": {
                "params": []
            }
        },
        "load_keypair": {
            "name": "load_keypair",
            "location": 302,
            "return": [
                "KeyPair"
            ],
            "arguments": {
                "crt": [
                    "str",
                    "dict[, ]",
                    "None",
                    "bytes",
                    "int",
                    "dict[str, str]"
                ],
                "key": [
                    "str",
                    "dict[, ]",
                    "None",
                    "bytes",
                    "int",
                    "dict[str, str]"
                ]
            }
        },
        "KeyPair.__init__": {
            "name": "__init__",
            "location": 265,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "crt": [
                    "typing.Mapping",
                    "int",
                    "str"
                ],
                "key": [
                    "dict[, ]",
                    "dict[str, typing.Any]",
                    "list[dict[str, typing.Any]]",
                    "list[str]",
                    "str",
                    "None"
                ]
            }
        },
        "KeyPair.fingerprint": {
            "name": "fingerprint",
            "location": 270,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "KeyPair.certificate_pem": {
            "name": "certificate_pem",
            "location": 279,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "KeyPair.private_key_pem": {
            "name": "private_key_pem",
            "location": 287,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "KeyPair.pem": {
            "name": "pem",
            "location": 294,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "mangle-vpn-master/mangle/common/signals.py": {
        "user_post_save": {
            "name": "user_post_save",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "instance": []
            }
        },
        "device_post_delete": {
            "name": "device_post_delete",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "instance": []
            }
        },
        "group_post_save": {
            "name": "group_post_save",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "instance": []
            }
        },
        "group_post_delete": {
            "name": "group_post_delete",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "instance": []
            }
        },
        "client_post_delete": {
            "name": "client_post_delete",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "instance": []
            }
        },
        "client_post_save": {
            "name": "client_post_save",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "instance": []
            }
        },
        "firewall_rule_post_save": {
            "name": "firewall_rule_post_save",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "instance": [
                    "int",
                    "tuple[typing.Union[str,int]]",
                    "typing.Callable[T, bool]",
                    "str"
                ]
            }
        },
        "firewall_rule_post_delete": {
            "name": "firewall_rule_post_delete",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {
                "instance": []
            }
        }
    },
    "mangle-vpn-master/mangle/common/tasks.py": {
        "create_crl": {
            "name": "create_crl",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "send_email": {
            "name": "send_email",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "recipient": [
                    "str",
                    "int"
                ],
                "subject": [
                    "str",
                    "int"
                ],
                "body": [
                    "str",
                    "bytes",
                    "dict[, ]",
                    "typing.Callable[, ]"
                ],
                "sender": [
                    "str",
                    "bytes",
                    "dict[, ]",
                    "typing.Callable[, ]"
                ]
            }
        },
        "disconnect_openvpn_client": {
            "name": "disconnect_openvpn_client",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [
                    "str"
                ]
            }
        }
    },
    "mangle-vpn-master/mangle/common/validators.py": {
        "is_cidr": {
            "name": "is_cidr",
            "location": 7,
            "return": [
                "bool"
            ],
            "arguments": {
                "value": [
                    "dict[str, typing.Any]",
                    "typing.Sequence[typing.Mapping]"
                ]
            }
        },
        "is_cidr_network": {
            "name": "is_cidr_network",
            "location": 19,
            "return": [
                "bool"
            ],
            "arguments": {
                "value": [
                    "bool",
                    "typing.Iterator",
                    "str",
                    "float",
                    "None"
                ]
            }
        },
        "is_ipv4": {
            "name": "is_ipv4",
            "location": 30,
            "return": [
                "bool"
            ],
            "arguments": {
                "value": [
                    "str",
                    "Exception",
                    "None",
                    "int"
                ]
            }
        },
        "is_port": {
            "name": "is_port",
            "location": 42,
            "return": [
                "bool"
            ],
            "arguments": {
                "value": []
            }
        },
        "is_email": {
            "name": "is_email",
            "location": 53,
            "return": [
                "bool"
            ],
            "arguments": {
                "value": [
                    "bytes",
                    "bytearray",
                    "str",
                    "int"
                ]
            }
        },
        "is_domain": {
            "name": "is_domain",
            "location": 65,
            "return": [],
            "arguments": {
                "value": [
                    "str"
                ]
            }
        },
        "is_valid_password": {
            "name": "is_valid_password",
            "location": 73,
            "return": [
                "bool"
            ],
            "arguments": {
                "value": [],
                "length": [
                    "int"
                ]
            }
        }
    },
    "mangle-vpn-master/mangle/common/__init__.py": {
        "CommonConfig.ready": {
            "name": "ready",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "mangle-vpn-master/mangle/common/migrations/0001_initial.py": {},
    "mangle-vpn-master/mangle/common/migrations/0002_auto_20190321_2227.py": {},
    "mangle-vpn-master/mangle/common/migrations/0003_auto_20190328_0120.py": {},
    "mangle-vpn-master/mangle/common/migrations/0004_auto_20190331_0945.py": {},
    "mangle-vpn-master/mangle/common/migrations/0005_auto_20190331_1121.py": {},
    "mangle-vpn-master/mangle/common/migrations/__init__.py": {},
    "mangle-vpn-master/mangle/common/utils/bash.py": {
        "run": {
            "name": "run",
            "location": 4,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "run_output": {
            "name": "run_output",
            "location": 14,
            "return": [
                "tuple[]"
            ],
            "arguments": {}
        }
    },
    "mangle-vpn-master/mangle/common/utils/fs.py": {
        "read_file": {
            "name": "read_file",
            "location": 8,
            "return": [],
            "arguments": {
                "path": [
                    "str"
                ],
                "offset": [
                    "int"
                ],
                "size": [
                    "int"
                ]
            }
        },
        "append_file": {
            "name": "append_file",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "path": [
                    "str"
                ],
                "content": [
                    "str",
                    "bytes"
                ],
                "perms": [
                    "None",
                    "str",
                    "list[typing.Union[typing.Any,typing.Any]]"
                ]
            }
        },
        "write_file": {
            "name": "write_file",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "path": [
                    "str"
                ],
                "content": [
                    "str",
                    "bytes"
                ],
                "perms": [
                    "None",
                    "str",
                    "list[typing.Union[typing.Any,typing.Any]]"
                ]
            }
        }
    },
    "mangle-vpn-master/mangle/common/utils/net.py": {
        "ip_addresses": {
            "name": "ip_addresses",
            "location": 13,
            "return": [
                "list[]"
            ],
            "arguments": {}
        },
        "interface_names": {
            "name": "interface_names",
            "location": 24,
            "return": [
                "list[]"
            ],
            "arguments": {}
        },
        "interface_ip": {
            "name": "interface_ip",
            "location": 41,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "iface": [
                    "str",
                    "list[str]"
                ]
            }
        },
        "hostname": {
            "name": "hostname",
            "location": 54,
            "return": [],
            "arguments": {}
        },
        "nameservers": {
            "name": "nameservers",
            "location": 62,
            "return": [
                "list[]"
            ],
            "arguments": {}
        },
        "expand_cidr": {
            "name": "expand_cidr",
            "location": 78,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "value": [
                    "int",
                    "str",
                    "float",
                    "dict[, ]"
                ]
            }
        },
        "get_interface_stats": {
            "name": "get_interface_stats",
            "location": 93,
            "return": [
                "dict[typing.Text, int]",
                "dict[, ]"
            ],
            "arguments": {
                "iface": [
                    "str"
                ]
            }
        }
    },
    "mangle-vpn-master/mangle/common/utils/strings.py": {
        "random_alphanumeric": {
            "name": "random_alphanumeric",
            "location": 18,
            "return": [
                "str"
            ],
            "arguments": {
                "length": [
                    "int",
                    "float"
                ]
            }
        },
        "remove_empty_lines": {
            "name": "remove_empty_lines",
            "location": 26,
            "return": [],
            "arguments": {
                "value": [
                    "str"
                ]
            }
        },
        "secs_to_hhmmss": {
            "name": "secs_to_hhmmss",
            "location": 34,
            "return": [
                "str"
            ],
            "arguments": {
                "value": []
            }
        }
    },
    "mangle-vpn-master/mangle/common/utils/__init__.py": {},
    "mangle-vpn-master/mangle/web/decorators.py": {
        "credentials_required": {
            "name": "credentials_required",
            "location": 5,
            "return": [],
            "arguments": {
                "func": [
                    "typing.Callable[, ]"
                ]
            }
        },
        "mfa_required": {
            "name": "mfa_required",
            "location": 19,
            "return": [],
            "arguments": {
                "func": [
                    "typing.Callable[, ]"
                ]
            }
        },
        "install_required": {
            "name": "install_required",
            "location": 37,
            "return": [],
            "arguments": {
                "func": [
                    "typing.Callable[, ]"
                ]
            }
        },
        "credentials_required.decorator": {
            "name": "decorator",
            "location": 12,
            "return": [],
            "arguments": {
                "request": []
            }
        },
        "mfa_required.decorator": {
            "name": "decorator",
            "location": 27,
            "return": [],
            "arguments": {
                "request": []
            }
        },
        "install_required.decorator": {
            "name": "decorator",
            "location": 43,
            "return": [],
            "arguments": {
                "request": []
            }
        }
    },
    "mangle-vpn-master/mangle/web/forms.py": {
        "InstallForm.clean_admin_email": {
            "name": "clean_admin_email",
            "location": 12,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "InstallForm.clean_app_hostname": {
            "name": "clean_app_hostname",
            "location": 21,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "InstallForm.clean_admin_password": {
            "name": "clean_admin_password",
            "location": 32,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "InstallForm.save": {
            "name": "save",
            "location": 47,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PasswordForm.clean_password": {
            "name": "clean_password",
            "location": 79,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "mangle-vpn-master/mangle/web/middleware.py": {
        "config_middleware": {
            "name": "config_middleware",
            "location": 4,
            "return": [],
            "arguments": {
                "get_response": [
                    "dict[str, str]",
                    "str",
                    "bool"
                ]
            }
        },
        "config_middleware.middleware": {
            "name": "middleware",
            "location": 9,
            "return": [],
            "arguments": {
                "request": []
            }
        }
    },
    "mangle-vpn-master/mangle/web/urls.py": {},
    "mangle-vpn-master/mangle/web/views.py": {
        "show_app": {
            "name": "show_app",
            "location": 18,
            "return": [],
            "arguments": {
                "request": [
                    "typing.Iterable[int]"
                ]
            }
        },
        "show_install": {
            "name": "show_install",
            "location": 33,
            "return": [],
            "arguments": {
                "request": []
            }
        },
        "process_install": {
            "name": "process_install",
            "location": 47,
            "return": [],
            "arguments": {
                "request": []
            }
        },
        "show_google_login": {
            "name": "show_google_login",
            "location": 79,
            "return": [],
            "arguments": {
                "request": [
                    "typing.Callable[, ]"
                ]
            }
        },
        "show_login": {
            "name": "show_login",
            "location": 88,
            "return": [],
            "arguments": {
                "request": [
                    "typing.Callable[, ]"
                ]
            }
        },
        "process_login": {
            "name": "process_login",
            "location": 97,
            "return": [],
            "arguments": {
                "request": []
            }
        },
        "process_oauth": {
            "name": "process_oauth",
            "location": 117,
            "return": [],
            "arguments": {
                "request": []
            }
        },
        "process_logout": {
            "name": "process_logout",
            "location": 134,
            "return": [],
            "arguments": {
                "request": [
                    "typing.Callable[, ]"
                ]
            }
        },
        "show_password_reset": {
            "name": "show_password_reset",
            "location": 145,
            "return": [],
            "arguments": {
                "request": [
                    "bytes",
                    "str"
                ]
            }
        },
        "process_password_reset": {
            "name": "process_password_reset",
            "location": 155,
            "return": [],
            "arguments": {
                "request": []
            }
        },
        "show_mfa": {
            "name": "show_mfa",
            "location": 182,
            "return": [],
            "arguments": {
                "request": []
            }
        },
        "show_mfa_setup": {
            "name": "show_mfa_setup",
            "location": 194,
            "return": [],
            "arguments": {
                "request": []
            }
        },
        "process_mfa": {
            "name": "process_mfa",
            "location": 209,
            "return": [],
            "arguments": {
                "request": []
            }
        },
        "base_context_processor": {
            "name": "base_context_processor",
            "location": 250,
            "return": [
                "dict[typing.Text, ]"
            ],
            "arguments": {
                "request": [
                    "dict[str, typing.Any]",
                    "dict[, ]",
                    "None"
                ]
            }
        },
        "save_form": {
            "name": "save_form",
            "location": 267,
            "return": [
                "None"
            ],
            "arguments": {
                "request": [
                    "int",
                    "str"
                ],
                "form": [
                    "int",
                    "str"
                ]
            }
        },
        "get_client_ip": {
            "name": "get_client_ip",
            "location": 278,
            "return": [
                "bytes"
            ],
            "arguments": {
                "request": [
                    "dict[str, typing.Any]",
                    "dict[, ]",
                    "list[]"
                ]
            }
        }
    },
    "mangle-vpn-master/mangle/web/__init__.py": {},
    "mangle-vpn-master/mangle/web/api/authentication.py": {
        "CredentialAuthentication.authenticate": {
            "name": "authenticate",
            "location": 9,
            "return": [
                "dict[, ]",
                "dict[int, typing.Any]",
                "dict[str, typing.Type]"
            ],
            "arguments": {
                "self": [],
                "request": []
            }
        },
        "ApiSessionAuthentication.authenticate": {
            "name": "authenticate",
            "location": 26,
            "return": [
                "tuple[typing.Optional[dict[str, str]]]"
            ],
            "arguments": {
                "self": [],
                "request": []
            }
        }
    },
    "mangle-vpn-master/mangle/web/api/pagination.py": {},
    "mangle-vpn-master/mangle/web/api/permissions.py": {
        "UserPermission.has_permission": {
            "name": "has_permission",
            "location": 5,
            "return": [],
            "arguments": {
                "self": [],
                "request": [
                    "set[str]",
                    "str"
                ],
                "view": []
            }
        },
        "UserPermission.has_object_permission": {
            "name": "has_object_permission",
            "location": 12,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "str"
                ],
                "view": [
                    "dict[, ]"
                ],
                "obj": [
                    "dict[, ]",
                    "tuple[int]"
                ]
            }
        }
    },
    "mangle-vpn-master/mangle/web/api/serializers.py": {
        "ProfileDeviceSerializer.save": {
            "name": "save",
            "location": 21,
            "return": [],
            "arguments": {
                "self": [],
                "user": [
                    "list[P]"
                ]
            }
        },
        "ProfileDeviceSerializer.validate_name": {
            "name": "validate_name",
            "location": 42,
            "return": [],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "int"
                ]
            }
        },
        "ProfileDeviceSerializer.validate_os": {
            "name": "validate_os",
            "location": 50,
            "return": [
                "int",
                "tuple[typing.Union[str,int]]",
                "complex",
                "list[]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "int",
                    "tuple[typing.Union[str,int]]",
                    "complex",
                    "list[]"
                ]
            }
        }
    },
    "mangle-vpn-master/mangle/web/api/urls.py": {},
    "mangle-vpn-master/mangle/web/api/views.py": {
        "ApiInfoView.get": {
            "name": "get",
            "location": 25,
            "return": [
                "Response"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "dict[str, str]",
                    "dict[, ]"
                ]
            }
        },
        "ApiInfoView.update_available": {
            "name": "update_available",
            "location": 37,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ProfileView.get": {
            "name": "get",
            "location": 52,
            "return": [
                "Response"
            ],
            "arguments": {
                "self": [],
                "request": []
            }
        },
        "DeviceViewSet.create": {
            "name": "create",
            "location": 72,
            "return": [
                "Response"
            ],
            "arguments": {
                "self": [],
                "request": []
            }
        },
        "DeviceViewSet.retrieve": {
            "name": "retrieve",
            "location": 81,
            "return": [
                "Response",
                "HttpResponse"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "int",
                    "typing.Callable[..., collections.abc.Coroutine]",
                    "dict[, ]"
                ],
                "pk": [
                    "None"
                ]
            }
        },
        "DeviceViewSet.get_disposition": {
            "name": "get_disposition",
            "location": 108,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "device": [
                    "bool",
                    "str",
                    "typing.IO"
                ]
            }
        }
    },
    "mangle-vpn-master/mangle/web/api/__init__.py": {},
    "mangle-vpn-master/mangle/web/api/admin/permissions.py": {
        "AdminPermission.has_permission": {
            "name": "has_permission",
            "location": 5,
            "return": [],
            "arguments": {
                "self": [],
                "request": [
                    "dict[, ]"
                ],
                "view": []
            }
        },
        "AdminPermission.has_object_permission": {
            "name": "has_object_permission",
            "location": 12,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "dict[, ]"
                ],
                "view": [
                    "dict[, ]"
                ],
                "obj": [
                    "dict[, ]"
                ]
            }
        }
    },
    "mangle-vpn-master/mangle/web/api/admin/serializers.py": {
        "UserInviteSerializer.validate_email": {
            "name": "validate_email",
            "location": 60,
            "return": [
                "list[str]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ]
            }
        },
        "UserInviteSerializer.validate_group_id": {
            "name": "validate_group_id",
            "location": 74,
            "return": [
                "str",
                "dict[str, str]",
                "None",
                "bool"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "dict[str, str]",
                    "None",
                    "bool"
                ]
            }
        },
        "UserInviteSerializer.save": {
            "name": "save",
            "location": 84,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "FirewallRuleSerializer.validate": {
            "name": "validate",
            "location": 161,
            "return": [],
            "arguments": {
                "self": [],
                "attrs": []
            }
        },
        "FirewallRuleSerializer.validate_action": {
            "name": "validate_action",
            "location": 174,
            "return": [
                "bytes"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "bytes"
                ]
            }
        },
        "FirewallRuleSerializer.validate_destination": {
            "name": "validate_destination",
            "location": 184,
            "return": [
                "str",
                "bool",
                "dict[, ]",
                "float"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "bool",
                    "dict[, ]",
                    "float"
                ]
            }
        },
        "FirewallRuleSerializer.validate_group_id": {
            "name": "validate_group_id",
            "location": 193,
            "return": [
                "str",
                "dict[str, str]",
                "None",
                "bool"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "dict[str, str]",
                    "None",
                    "bool"
                ]
            }
        },
        "FirewallRuleSerializer.validate_port": {
            "name": "validate_port",
            "location": 202,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ]
            }
        },
        "FirewallRuleSerializer.validate_protocol": {
            "name": "validate_protocol",
            "location": 222,
            "return": [
                "bytes"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "bytes"
                ]
            }
        },
        "BaseSettingSerializer.settings": {
            "name": "settings",
            "location": 310,
            "return": [
                "str",
                "list[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseSettingSerializer.save": {
            "name": "save",
            "location": 326,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AppSettingSerializer.validate_app_hostname": {
            "name": "validate_app_hostname",
            "location": 345,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ]
            }
        },
        "AppSettingSerializer.validate_app_http_port": {
            "name": "validate_app_http_port",
            "location": 356,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "AppSettingSerializer.validate_app_https_port": {
            "name": "validate_app_https_port",
            "location": 365,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "AppSettingSerializer.save": {
            "name": "save",
            "location": 374,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AuthSettingSerializer.validate_oauth2_client_id": {
            "name": "validate_oauth2_client_id",
            "location": 421,
            "return": [
                "str",
                "typing.Mapping",
                "typing.Callable[, ]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "typing.Mapping",
                    "typing.Callable[, ]"
                ]
            }
        },
        "AuthSettingSerializer.validate_oauth2_client_secret": {
            "name": "validate_oauth2_client_secret",
            "location": 430,
            "return": [
                "str",
                "dict[, ]",
                "set[str]",
                "bool",
                "dict[str, typing.Any]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "dict[, ]",
                    "set[str]",
                    "bool",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "AuthSettingSerializer.validate": {
            "name": "validate",
            "location": 439,
            "return": [],
            "arguments": {
                "self": [],
                "attrs": []
            }
        },
        "MailSettingSerializer.validate_smtp_host": {
            "name": "validate_smtp_host",
            "location": 457,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "MailSettingSerializer.validate_smtp_port": {
            "name": "validate_smtp_port",
            "location": 468,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "VpnSettingSerializer.save": {
            "name": "save",
            "location": 492,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "VpnSettingSerializer.validate_vpn_hostname": {
            "name": "validate_vpn_hostname",
            "location": 500,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "VpnSettingSerializer.validate_vpn_interface": {
            "name": "validate_vpn_interface",
            "location": 512,
            "return": [
                "str",
                "set[str]",
                "None",
                "dict[str, typing.Any]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "set[str]",
                    "None",
                    "dict[str, typing.Any]",
                    "bool"
                ]
            }
        },
        "VpnSettingSerializer.validate_vpn_nameservers": {
            "name": "validate_vpn_nameservers",
            "location": 521,
            "return": [
                "typing.Text",
                "str"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ]
            }
        },
        "VpnSettingSerializer.validate_vpn_nat_interface": {
            "name": "validate_vpn_nat_interface",
            "location": 536,
            "return": [
                "str",
                "set[str]",
                "None",
                "dict[str, typing.Any]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "set[str]",
                    "None",
                    "dict[str, typing.Any]",
                    "bool"
                ]
            }
        },
        "VpnSettingSerializer.validate_vpn_port": {
            "name": "validate_vpn_port",
            "location": 545,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "VpnSettingSerializer.validate_vpn_protocol": {
            "name": "validate_vpn_protocol",
            "location": 556,
            "return": [
                "bytes"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "bytes"
                ]
            }
        },
        "VpnSettingSerializer.validate_vpn_routes": {
            "name": "validate_vpn_routes",
            "location": 565,
            "return": [
                "typing.Text",
                "str"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ]
            }
        },
        "VpnSettingSerializer.validate_vpn_subnet": {
            "name": "validate_vpn_subnet",
            "location": 580,
            "return": [
                "str",
                "int",
                "bytes",
                "float"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "int",
                    "bytes",
                    "float"
                ]
            }
        }
    },
    "mangle-vpn-master/mangle/web/api/admin/urls.py": {},
    "mangle-vpn-master/mangle/web/api/admin/views.py": {
        "UserAdminViewSet.create": {
            "name": "create",
            "location": 37,
            "return": [
                "Response"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "dict[, ]"
                ]
            }
        },
        "UserAdminViewSet.mfa": {
            "name": "mfa",
            "location": 122,
            "return": [
                "Response"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "bool"
                ],
                "pk": [
                    "None",
                    "bool"
                ]
            }
        },
        "UserAdminViewSet.password": {
            "name": "password",
            "location": 87,
            "return": [
                "Response"
            ],
            "arguments": {
                "self": [],
                "request": [],
                "pk": [
                    "None"
                ]
            }
        },
        "UserAdminViewSet.devices": {
            "name": "devices",
            "location": 112,
            "return": [
                "Response"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "bool"
                ],
                "pk": [
                    "None",
                    "bool"
                ]
            }
        },
        "GroupAdminViewSet.all": {
            "name": "all",
            "location": 143,
            "return": [
                "Response"
            ],
            "arguments": {
                "self": [],
                "request": []
            }
        },
        "GroupAdminViewSet.firewall": {
            "name": "firewall",
            "location": 152,
            "return": [
                "Response"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "bool"
                ]
            }
        },
        "GroupAdminViewSet.users": {
            "name": "users",
            "location": 163,
            "return": [
                "Response"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "int"
                ]
            }
        },
        "OpenVPNViewSet.list": {
            "name": "list",
            "location": 227,
            "return": [
                "Response"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "dict[str, str]",
                    "dict[, ]"
                ]
            }
        },
        "OpenVPNViewSet.toggle": {
            "name": "toggle",
            "location": 238,
            "return": [],
            "arguments": {
                "self": [],
                "request": [
                    "typing.Callable[, ]"
                ]
            }
        },
        "OpenVPNViewSet.restart": {
            "name": "restart",
            "location": 254,
            "return": [],
            "arguments": {
                "self": [],
                "request": [
                    "typing.Callable[, ]"
                ]
            }
        },
        "BaseSettingView.get": {
            "name": "get",
            "location": 271,
            "return": [
                "JsonResponse"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "dict[str, str]",
                    "dict[, ]"
                ]
            }
        },
        "BaseSettingView.put": {
            "name": "put",
            "location": 278,
            "return": [
                "Response"
            ],
            "arguments": {
                "self": [],
                "request": []
            }
        },
        "MailSettingTestView.post": {
            "name": "post",
            "location": 297,
            "return": [
                "Response"
            ],
            "arguments": {
                "self": [],
                "request": []
            }
        },
        "UpdateAppView.post": {
            "name": "post",
            "location": 321,
            "return": [
                "Response"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "int"
                ]
            }
        }
    },
    "mangle-vpn-master/mangle/web/api/admin/__init__.py": {},
    "mangle-vpn-master/mangle/web/authentication/backend.py": {
        "redirect_login": {
            "name": "redirect_login",
            "location": 6,
            "return": [],
            "arguments": {
                "request": [
                    "str",
                    "dict[, ]"
                ]
            }
        }
    },
    "mangle-vpn-master/mangle/web/authentication/__init__.py": {},
    "mangle-vpn-master/mangle/web/authentication/ldap/backend.py": {},
    "mangle-vpn-master/mangle/web/authentication/ldap/__init__.py": {},
    "mangle-vpn-master/mangle/web/authentication/oauth2/backend.py": {
        "OAuth2Backend.authenticate": {
            "name": "authenticate",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "request": []
            }
        },
        "OAuth2Backend.get_user": {
            "name": "get_user",
            "location": 63,
            "return": [],
            "arguments": {
                "self": [],
                "user_id": [
                    "int",
                    "list[int]"
                ]
            }
        }
    },
    "mangle-vpn-master/mangle/web/authentication/oauth2/__init__.py": {
        "get_provider": {
            "name": "get_provider",
            "location": 10,
            "return": [
                "GoogleOAuth2Provider"
            ],
            "arguments": {}
        }
    },
    "mangle-vpn-master/mangle/web/authentication/oauth2/providers/base.py": {
        "OAuth2Provider.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "OAuth2Provider.client_id": {
            "name": "client_id",
            "location": 26,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "OAuth2Provider.client_secret": {
            "name": "client_secret",
            "location": 34,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "OAuth2Provider.redirect_uri": {
            "name": "redirect_uri",
            "location": 42,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "OAuth2Provider.process_response": {
            "name": "process_response",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "resp": [
                    "typing.Callable[, ]",
                    "str",
                    "bool",
                    "list[]"
                ]
            }
        },
        "OAuth2Provider.get_login_url": {
            "name": "get_login_url",
            "location": 59,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "OAuth2Provider.get_session": {
            "name": "get_session",
            "location": 66,
            "return": [
                "OAuth2Session"
            ],
            "arguments": {
                "self": []
            }
        },
        "OAuth2Provider.get_profile": {
            "name": "get_profile",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "code": [
                    "str",
                    "typing.Mapping",
                    "dict[str, typing.Any]"
                ]
            }
        }
    },
    "mangle-vpn-master/mangle/web/authentication/oauth2/providers/google.py": {
        "GoogleOAuth2Provider.get_login_url": {
            "name": "get_login_url",
            "location": 17,
            "return": [
                "tuple[typing.Union[str,dict[str, bool],None]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "GoogleOAuth2Provider.process_response": {
            "name": "process_response",
            "location": 26,
            "return": [
                "tuple[str]"
            ],
            "arguments": {
                "self": [],
                "resp": [
                    "list[str]"
                ]
            }
        }
    },
    "mangle-vpn-master/mangle/web/authentication/oauth2/providers/__init__.py": {}
}
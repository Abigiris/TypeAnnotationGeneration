{
    "medfs-master/acl_service/service/acl_server.py": {
        "session_scope": {
            "name": "session_scope",
            "location": 246,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {}
        },
        "serve": {
            "name": "serve",
            "location": 259,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "AclServicer.__init__": {
            "name": "__init__",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AclServicer._create_permissions_if_not_exist": {
            "name": "_create_permissions_if_not_exist",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AclServicer._has_read_permissions": {
            "name": "_has_read_permissions",
            "location": 47,
            "return": [
                "dict[typing.Union[str,None], str]",
                "dict[, ]"
            ],
            "arguments": {
                "self": [],
                "user_id": [
                    "int",
                    "str",
                    "None"
                ],
                "record_id": [
                    "int",
                    "str",
                    "None"
                ]
            }
        },
        "AclServicer._has_write_permissions": {
            "name": "_has_write_permissions",
            "location": 54,
            "return": [
                "str",
                "dict[str, list[str]]",
                "typing.Generator[typing.Union[str,None,None]]",
                "dict[str, tuple[typing.Union[str,str]]]",
                "typing.Type",
                "dict[, ]"
            ],
            "arguments": {
                "self": [],
                "user_id": [
                    "str",
                    "int"
                ],
                "record_id": [
                    "str",
                    "int"
                ]
            }
        },
        "AclServicer.IsPermissionedForRead": {
            "name": "IsPermissionedForRead",
            "location": 67,
            "return": [],
            "arguments": {
                "self": [],
                "request": [
                    "dict[str, typing.Any]",
                    "None"
                ],
                "context": [
                    "dict[, ]"
                ]
            }
        },
        "AclServicer.IsPermissionedForWrite": {
            "name": "IsPermissionedForWrite",
            "location": 73,
            "return": [],
            "arguments": {
                "self": [],
                "request": [],
                "context": [
                    "dict[, ]"
                ]
            }
        },
        "AclServicer.SetPermissionsForFile": {
            "name": "SetPermissionsForFile",
            "location": 79,
            "return": [],
            "arguments": {
                "self": [],
                "request": [],
                "context": [
                    "dict[, ]",
                    "Exception"
                ]
            }
        },
        "AclServicer.AddRecord": {
            "name": "AddRecord",
            "location": 119,
            "return": [],
            "arguments": {
                "self": [],
                "request": [
                    "str"
                ],
                "context": []
            }
        },
        "AclServicer.GetAllRecordsForUser": {
            "name": "GetAllRecordsForUser",
            "location": 148,
            "return": [],
            "arguments": {
                "self": [],
                "request": [],
                "context": []
            }
        },
        "AclServicer.GetAllUsersForRecord": {
            "name": "GetAllUsersForRecord",
            "location": 168,
            "return": [],
            "arguments": {
                "self": [],
                "request": [
                    "str"
                ],
                "context": [
                    "dict[, ]",
                    "Exception"
                ]
            }
        },
        "AclServicer.CleanDb": {
            "name": "CleanDb",
            "location": 188,
            "return": [],
            "arguments": {
                "self": [],
                "request": [
                    "str",
                    "bool"
                ],
                "context": [
                    "str",
                    "bool"
                ]
            }
        },
        "AclServicer.PopulateDb": {
            "name": "PopulateDb",
            "location": 193,
            "return": [],
            "arguments": {
                "self": [],
                "request": [
                    "str",
                    "bool"
                ],
                "context": [
                    "str",
                    "bool"
                ]
            }
        },
        "AclServicer.FindCommonRecords": {
            "name": "FindCommonRecords",
            "location": 221,
            "return": [],
            "arguments": {
                "self": [],
                "request": [],
                "context": [
                    "list[]",
                    "bool"
                ]
            }
        }
    },
    "medfs-master/acl_service/service/test_acl_client.py": {
        "clear_db": {
            "name": "clear_db",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "get_test_params": {
            "name": "get_test_params",
            "location": 30,
            "return": [
                "tuple[typing.Text]"
            ],
            "arguments": {}
        },
        "test_read_permission": {
            "name": "test_read_permission",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_write_permission": {
            "name": "test_write_permission",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_set_permission": {
            "name": "test_set_permission",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_add_record": {
            "name": "test_add_record",
            "location": 170,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_get_all_records_for_user": {
            "name": "test_get_all_records_for_user",
            "location": 188,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_get_all_users_for_record": {
            "name": "test_get_all_users_for_record",
            "location": 215,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "run": {
            "name": "run",
            "location": 242,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "medfs-master/acl_service/service/__init__.py": {},
    "medfs-master/acl_service/service/database/database.py": {},
    "medfs-master/acl_service/service/database/sql_scripts.py": {},
    "medfs-master/acl_service/service/database/__init__.py": {},
    "medfs-master/acl_service/service/database/models/acl.py": {},
    "medfs-master/acl_service/service/database/models/base.py": {},
    "medfs-master/acl_service/service/database/models/permission.py": {},
    "medfs-master/acl_service/service/database/models/__init__.py": {},
    "medfs-master/benchmarking/acl_bmk.py": {
        "get_test_params": {
            "name": "get_test_params",
            "location": 8,
            "return": [
                "tuple[typing.Text]"
            ],
            "arguments": {}
        },
        "benchmark_read_permission": {
            "name": "benchmark_read_permission",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "run": {
            "name": "run",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "medfs-master/benchmarking/__init__.py": {},
    "medfs-master/config/pre_commit_hook.py": {
        "print_err": {
            "name": "print_err",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "s": [
                    "str"
                ]
            }
        }
    },
    "medfs-master/db_cleaner/db_cleaner.py": {
        "lambda_handler": {
            "name": "lambda_handler",
            "location": 3,
            "return": [
                "dict[typing.Text, int]"
            ],
            "arguments": {
                "event": [
                    "str"
                ],
                "context": [
                    "str"
                ]
            }
        }
    },
    "medfs-master/experimental/justin/ex.py": {},
    "medfs-master/message_service/app.py": {},
    "medfs-master/message_service/config.py": {},
    "medfs-master/message_service/message_service/email.py": {
        "send_notification_email": {
            "name": "send_notification_email",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "to_address": [
                    "str"
                ]
            }
        }
    },
    "medfs-master/message_service/message_service/healthcheck.py": {
        "healthcheck": {
            "name": "healthcheck",
            "location": 4,
            "return": [],
            "arguments": {
                "request": [
                    "bool"
                ]
            }
        }
    },
    "medfs-master/message_service/message_service/queueing_api.py": {
        "_create_queue_name": {
            "name": "_create_queue_name",
            "location": 9,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "uuid": [
                    "str",
                    "bool"
                ]
            }
        },
        "receive_messages": {
            "name": "receive_messages",
            "location": 13,
            "return": [
                "list[]"
            ],
            "arguments": {
                "uuid": [
                    "str",
                    "bool",
                    "dict[str, typing.Any]"
                ]
            }
        }
    },
    "medfs-master/message_service/message_service/stream_api.py": {
        "check_credentials": {
            "name": "check_credentials",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "request": [
                    "str"
                ]
            }
        },
        "ServerSentEvent.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "str"
                ]
            }
        },
        "ServerSentEvent.encode": {
            "name": "encode",
            "location": 23,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "medfs-master/record_service/app.py": {
        "setup_db": {
            "name": "setup_db",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "run": {
            "name": "run",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "medfs-master/record_service/config.py": {},
    "medfs-master/record_service/__init__.py": {},
    "medfs-master/record_service/alembic/env.py": {
        "run_migrations_offline": {
            "name": "run_migrations_offline",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "run_migrations_online": {
            "name": "run_migrations_online",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "medfs-master/record_service/alembic/versions/5bc273ed373f_create_tables.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "medfs-master/record_service/record_service/database/database.py": {},
    "medfs-master/record_service/record_service/database/__init__.py": {},
    "medfs-master/record_service/record_service/endpoints/auth_api.py": {
        "load_user": {
            "name": "load_user",
            "location": 17,
            "return": [],
            "arguments": {
                "user_id": [
                    "str",
                    "int",
                    "None"
                ]
            }
        },
        "login": {
            "name": "login",
            "location": 30,
            "return": [
                "tuple[typing.Union[typing.Text,int]]",
                "JsonResponse"
            ],
            "arguments": {}
        },
        "logout": {
            "name": "logout",
            "location": 62,
            "return": [
                "tuple[typing.Union[typing.Text,int]]"
            ],
            "arguments": {}
        },
        "is_logged_in": {
            "name": "is_logged_in",
            "location": 69,
            "return": [
                "tuple[typing.Union[typing.Text,int]]"
            ],
            "arguments": {}
        }
    },
    "medfs-master/record_service/record_service/endpoints/doctors_api.py": {
        "get_all_doctors": {
            "name": "get_all_doctors",
            "location": 16,
            "return": [
                "JsonResponse"
            ],
            "arguments": {}
        }
    },
    "medfs-master/record_service/record_service/endpoints/healthcheck.py": {
        "check": {
            "name": "check",
            "location": 8,
            "return": [
                "JsonResponse"
            ],
            "arguments": {}
        }
    },
    "medfs-master/record_service/record_service/endpoints/message_api.py": {
        "send": {
            "name": "send",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "uuid": [
                    "str",
                    "list[str]"
                ],
                "message": [
                    "str",
                    "int",
                    "typing.IO"
                ]
            }
        }
    },
    "medfs-master/record_service/record_service/endpoints/patients_api.py": {
        "add_patient": {
            "name": "add_patient",
            "location": 29,
            "return": [
                "JsonResponse"
            ],
            "arguments": {}
        },
        "get_all_patients": {
            "name": "get_all_patients",
            "location": 74,
            "return": [
                "JsonResponse"
            ],
            "arguments": {}
        },
        "update_patient_info": {
            "name": "update_patient_info",
            "location": 112,
            "return": [
                "JsonResponse"
            ],
            "arguments": {}
        },
        "get_patient_info": {
            "name": "get_patient_info",
            "location": 159,
            "return": [
                "JsonResponse"
            ],
            "arguments": {}
        },
        "get_patient_info_as_doctor": {
            "name": "get_patient_info_as_doctor",
            "location": 177,
            "return": [
                "JsonResponse"
            ],
            "arguments": {
                "patient_id": [
                    "int",
                    "str"
                ]
            }
        },
        "_get_patient_info": {
            "name": "_get_patient_info",
            "location": 197,
            "return": [
                "dict[typing.Text, typing.Union[str,list[int],int,None]]"
            ],
            "arguments": {
                "patient_id": [
                    "str",
                    "list[int]",
                    "int"
                ]
            }
        },
        "get_all_records_for_patient": {
            "name": "get_all_records_for_patient",
            "location": 224,
            "return": [
                "JsonResponse"
            ],
            "arguments": {
                "patient_id": [
                    "int",
                    "str"
                ]
            }
        },
        "respond_to_add_patient_request": {
            "name": "respond_to_add_patient_request",
            "location": 283,
            "return": [
                "JsonResponse"
            ],
            "arguments": {}
        }
    },
    "medfs-master/record_service/record_service/endpoints/permission_api.py": {
        "update_permissions": {
            "name": "update_permissions",
            "location": 20,
            "return": [
                "tuple[typing.Union[typing.Text,int]]",
                "JsonResponse"
            ],
            "arguments": {
                "record_id": [
                    "int",
                    "str",
                    "dict[, ]"
                ]
            }
        },
        "get_permissions": {
            "name": "get_permissions",
            "location": 95,
            "return": [
                "JsonResponse"
            ],
            "arguments": {
                "record_id": [
                    "int",
                    "None"
                ]
            }
        }
    },
    "medfs-master/record_service/record_service/endpoints/record_api.py": {
        "get_all_records_for_user": {
            "name": "get_all_records_for_user",
            "location": 41,
            "return": [
                "JsonResponse"
            ],
            "arguments": {}
        },
        "get_record_for_user": {
            "name": "get_record_for_user",
            "location": 87,
            "return": [
                "JsonResponse"
            ],
            "arguments": {
                "record_id": [
                    "int",
                    "None"
                ]
            }
        },
        "_validate_form_request": {
            "name": "_validate_form_request",
            "location": 107,
            "return": [
                "tuple[typing.Union[bool,typing.Text]]"
            ],
            "arguments": {
                "form": [
                    "dict[, ]"
                ],
                "permissions_json": [
                    "str",
                    "bool",
                    "typing.Iterable[str]"
                ]
            }
        },
        "upload_file": {
            "name": "upload_file",
            "location": 129,
            "return": [
                "tuple[typing.Union[typing.Text,int]]",
                "tuple[int]",
                "tuple[typing.Union[str,int]]"
            ],
            "arguments": {}
        },
        "update_record": {
            "name": "update_record",
            "location": 208,
            "return": [
                "tuple[typing.Union[typing.Text,int]]",
                "tuple[int]"
            ],
            "arguments": {
                "record_id": [
                    "str",
                    "None",
                    "int"
                ]
            }
        },
        "delete_record": {
            "name": "delete_record",
            "location": 289,
            "return": [
                "JsonResponse"
            ],
            "arguments": {
                "record_id": [
                    "str"
                ]
            }
        }
    },
    "medfs-master/record_service/record_service/endpoints/record_key_api.py": {
        "get_record_key": {
            "name": "get_record_key",
            "location": 15,
            "return": [
                "JsonResponse"
            ],
            "arguments": {
                "record_id": [
                    "int",
                    "None",
                    "str"
                ]
            }
        }
    },
    "medfs-master/record_service/record_service/endpoints/user_api.py": {
        "test": {
            "name": "test",
            "location": 25,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "create_user": {
            "name": "create_user",
            "location": 30,
            "return": [
                "tuple[typing.Union[typing.Text,int]]"
            ],
            "arguments": {}
        },
        "update_user": {
            "name": "update_user",
            "location": 83,
            "return": [
                "tuple[typing.Union[typing.Text,int]]"
            ],
            "arguments": {}
        },
        "get_keys_for_emails": {
            "name": "get_keys_for_emails",
            "location": 110,
            "return": [
                "tuple[typing.Union[typing.Text,int]]",
                "tuple[int]"
            ],
            "arguments": {}
        },
        "get_notifications": {
            "name": "get_notifications",
            "location": 143,
            "return": [
                "JsonResponse"
            ],
            "arguments": {}
        }
    },
    "medfs-master/record_service/record_service/endpoints/utils_api.py": {
        "_verify": {
            "name": "_verify",
            "location": 19,
            "return": [],
            "arguments": {
                "slack_signature": [
                    "str",
                    "float",
                    "dict[, ]",
                    "bytes"
                ],
                "slack_request_timestamp": [
                    "str",
                    "dict[, ]",
                    "typing.Mapping",
                    "None"
                ],
                "request_body": [
                    "str",
                    "dict[, ]",
                    "typing.Mapping",
                    "None"
                ]
            }
        },
        "clean_record_srv": {
            "name": "clean_record_srv",
            "location": 28,
            "return": [
                "typing.Text"
            ],
            "arguments": {}
        },
        "clean_acl_srv": {
            "name": "clean_acl_srv",
            "location": 34,
            "return": [
                "typing.Text"
            ],
            "arguments": {}
        },
        "populate_rec_db": {
            "name": "populate_rec_db",
            "location": 41,
            "return": [
                "typing.Text"
            ],
            "arguments": {}
        },
        "populate_acl_db": {
            "name": "populate_acl_db",
            "location": 49,
            "return": [
                "typing.Text"
            ],
            "arguments": {}
        },
        "handle_slash_command": {
            "name": "handle_slash_command",
            "location": 73,
            "return": [
                "JsonResponse"
            ],
            "arguments": {}
        }
    },
    "medfs-master/record_service/record_service/endpoints/__init__.py": {},
    "medfs-master/record_service/record_service/external/acl_api.py": {
        "build_client": {
            "name": "build_client",
            "location": 8,
            "return": [],
            "arguments": {
                "server": [
                    "str",
                    "int",
                    "typing.IO",
                    "dict[str, typing.Any]",
                    "typing.Callable[None,None, bool]"
                ],
                "port": [
                    "str",
                    "int",
                    "typing.IO",
                    "dict[str, typing.Any]",
                    "typing.Callable[None,None, bool]"
                ]
            }
        },
        "add_record": {
            "name": "add_record",
            "location": 13,
            "return": [],
            "arguments": {
                "client": [
                    "typing.Callable[, ]",
                    "str"
                ],
                "user_uuid": [],
                "record_uuid": []
            }
        },
        "set_permissions": {
            "name": "set_permissions",
            "location": 22,
            "return": [],
            "arguments": {
                "client": [],
                "user_uuid": [
                    "str"
                ],
                "record_uuid": [
                    "str",
                    "bool"
                ],
                "permissions": []
            }
        },
        "_record_perm_to_string": {
            "name": "_record_perm_to_string",
            "location": 42,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "perm_entry": [
                    "list[int]",
                    "None"
                ]
            }
        },
        "is_user_permissioned_for_read": {
            "name": "is_user_permissioned_for_read",
            "location": 51,
            "return": [],
            "arguments": {
                "client": [],
                "user_uuid": [],
                "record_uuid": []
            }
        },
        "is_user_permissioned_for_write": {
            "name": "is_user_permissioned_for_write",
            "location": 61,
            "return": [],
            "arguments": {
                "client": [],
                "user_uuid": [],
                "record_uuid": []
            }
        },
        "get_records_for_user": {
            "name": "get_records_for_user",
            "location": 76,
            "return": [
                "dict[, ]"
            ],
            "arguments": {
                "client": [
                    "str"
                ],
                "user_uuid": []
            }
        },
        "get_users_for_record": {
            "name": "get_users_for_record",
            "location": 86,
            "return": [
                "list[tuple[]]"
            ],
            "arguments": {
                "client": [],
                "record_uuid": []
            }
        },
        "find_common_records": {
            "name": "find_common_records",
            "location": 94,
            "return": [],
            "arguments": {
                "client": [
                    "str",
                    "bool",
                    "dict[str, typing.Any]"
                ],
                "user_uuid": []
            }
        },
        "_user_id": {
            "name": "_user_id",
            "location": 101,
            "return": [],
            "arguments": {
                "user_uuid": [
                    "str"
                ]
            }
        },
        "_record_id": {
            "name": "_record_id",
            "location": 107,
            "return": [],
            "arguments": {
                "record_uuid": [
                    "int",
                    "str"
                ]
            }
        },
        "_str_to_user_perm": {
            "name": "_str_to_user_perm",
            "location": 113,
            "return": [],
            "arguments": {
                "perm_str": [
                    "str"
                ]
            }
        },
        "_user_perm_to_string": {
            "name": "_user_perm_to_string",
            "location": 121,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "perm_entry": [
                    "bool"
                ]
            }
        }
    },
    "medfs-master/record_service/record_service/external/queueing_api.py": {
        "_create_queue_name": {
            "name": "_create_queue_name",
            "location": 22,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "uuid": [
                    "str",
                    "bool"
                ]
            }
        },
        "send_message": {
            "name": "send_message",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "uuid": [
                    "str",
                    "bool",
                    "dict[str, typing.Any]"
                ],
                "message": [
                    "dict[str, typing.Any]",
                    "bool"
                ]
            }
        },
        "SqsMessage.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "body": [
                    "int",
                    "float"
                ]
            }
        },
        "SqsMessage.serialize": {
            "name": "serialize",
            "location": 14,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "medfs-master/record_service/record_service/external/__init__.py": {},
    "medfs-master/record_service/record_service/models/base.py": {},
    "medfs-master/record_service/record_service/models/doctor.py": {},
    "medfs-master/record_service/record_service/models/notification.py": {
        "Notification.__init__": {
            "name": "__init__",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Notification.to_dict": {
            "name": "to_dict",
            "location": 39,
            "return": [
                "dict[typing.Text, str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Notification.to_json": {
            "name": "to_json",
            "location": 50,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "medfs-master/record_service/record_service/models/patient.py": {
        "BaseEnum.has_value": {
            "name": "has_value",
            "location": 11,
            "return": [
                "bool"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "set[enum.Enum]"
                ],
                "value": [
                    "str",
                    "typing.Type",
                    "set[enum.Enum]"
                ]
            }
        },
        "BaseEnum.get_item": {
            "name": "get_item",
            "location": 15,
            "return": [],
            "arguments": {
                "cls": [
                    "str",
                    "bool",
                    "typing.Type",
                    "dict[, ]"
                ],
                "value": [
                    "str",
                    "bool",
                    "typing.Type",
                    "dict[, ]"
                ]
            }
        }
    },
    "medfs-master/record_service/record_service/models/patient_doctors.py": {},
    "medfs-master/record_service/record_service/models/record.py": {
        "Record.to_dict": {
            "name": "to_dict",
            "location": 18,
            "return": [
                "dict[typing.Text, str]"
            ],
            "arguments": {
                "self": [],
                "uuid_as_str": [
                    "bool"
                ],
                "datetime_as_str": [
                    "bool"
                ]
            }
        }
    },
    "medfs-master/record_service/record_service/models/record_key.py": {},
    "medfs-master/record_service/record_service/models/user.py": {
        "User.hash_password": {
            "name": "hash_password",
            "location": 32,
            "return": [],
            "arguments": {
                "password": [
                    "str"
                ]
            }
        },
        "User.check_password": {
            "name": "check_password",
            "location": 36,
            "return": [],
            "arguments": {
                "hashpw": [
                    "str"
                ],
                "password": [
                    "str"
                ]
            }
        },
        "User.validate_password_for_private_key": {
            "name": "validate_password_for_private_key",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "password": [
                    "str"
                ],
                "private_key": [
                    "str"
                ]
            }
        },
        "User.validate_public_key": {
            "name": "validate_public_key",
            "location": 51,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "None",
                    "typing.Iterable[str]"
                ],
                "public_key": [
                    "str"
                ]
            }
        },
        "User.validate_private_key": {
            "name": "validate_private_key",
            "location": 59,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "None",
                    "typing.Iterable[str]"
                ],
                "private_key": [
                    "str"
                ]
            }
        }
    },
    "medfs-master/record_service/record_service/utils/console.py": {},
    "medfs-master/record_service/record_service/utils/constants.py": {},
    "medfs-master/record_service/record_service/utils/decorators.py": {
        "doctor_required": {
            "name": "doctor_required",
            "location": 10,
            "return": [],
            "arguments": {
                "f": [
                    "typing.Iterable[str]",
                    "typing.Callable[, ]"
                ]
            }
        },
        "patient_required": {
            "name": "patient_required",
            "location": 27,
            "return": [],
            "arguments": {
                "f": [
                    "typing.Iterable[str]",
                    "typing.Callable[, ]"
                ]
            }
        },
        "doctor_required.decorated_function": {
            "name": "decorated_function",
            "location": 12,
            "return": [
                "JsonResponse"
            ],
            "arguments": {}
        },
        "patient_required.decorated_function": {
            "name": "decorated_function",
            "location": 29,
            "return": [
                "JsonResponse"
            ],
            "arguments": {}
        }
    },
    "medfs-master/record_service/record_service/utils/email.py": {
        "send_notification_email": {
            "name": "send_notification_email",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "to_address": [
                    "str"
                ],
                "msg": [
                    "str"
                ]
            }
        }
    },
    "medfs-master/record_service/record_service/utils/exceptions.py": {},
    "medfs-master/record_service/record_service/utils/file_uploader.py": {
        "FsWriter.write": {
            "name": "write",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fp": [
                    "int",
                    "str",
                    "typing.Iterable['Context']"
                ]
            }
        },
        "MockWriter.write": {
            "name": "write",
            "location": 20,
            "return": [
                "dict[typing.Text, ]"
            ],
            "arguments": {
                "self": [],
                "fp": [
                    "int",
                    "str",
                    "typing.Iterable['Context']"
                ]
            }
        },
        "IpfsWriter.__init__": {
            "name": "__init__",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IpfsWriter.client": {
            "name": "client",
            "location": 31,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "IpfsWriter.write": {
            "name": "write",
            "location": 36,
            "return": [],
            "arguments": {
                "self": [],
                "fp": [
                    "int"
                ]
            }
        },
        "FileUploader.__init__": {
            "name": "__init__",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fs_writer": [
                    "int",
                    "float"
                ]
            }
        },
        "FileUploader._save_temp_file": {
            "name": "_save_temp_file",
            "location": 44,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "flask_file": []
            }
        },
        "FileUploader.update": {
            "name": "update",
            "location": 53,
            "return": [
                "dict[typing.Text, typing.Union[str,None]]"
            ],
            "arguments": {
                "self": [],
                "flask_file": [
                    "str",
                    "bool"
                ],
                "filename": [
                    "str",
                    "None"
                ],
                "record_id": [
                    "str",
                    "bool"
                ]
            }
        },
        "FileUploader.upload": {
            "name": "upload",
            "location": 63,
            "return": [
                "Record"
            ],
            "arguments": {
                "self": [],
                "flask_file": [
                    "str",
                    "bool",
                    "dict[str, pypi2nix.utils.NixOption]",
                    "None"
                ],
                "filename": [
                    "str"
                ]
            }
        }
    },
    "medfs-master/record_service/record_service/utils/permissions.py": {
        "parse_uploaded_permissions": {
            "name": "parse_uploaded_permissions",
            "location": 18,
            "return": [
                "dict[str, tuple[typing.Text]]"
            ],
            "arguments": {
                "permissions_json": [
                    "dict[, ]",
                    "str"
                ],
                "db": [
                    "str",
                    "dict[str, typing.Any]",
                    "list[str]"
                ]
            }
        },
        "create_acl_permissions": {
            "name": "create_acl_permissions",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "user_id": [
                    "float",
                    "None",
                    "int",
                    "dict[str, typing.Any]",
                    "str"
                ],
                "record_uuid": [
                    "float",
                    "None",
                    "int",
                    "dict[str, typing.Any]",
                    "str"
                ],
                "permissions_dict": [
                    "int",
                    "str"
                ],
                "acl_client": [
                    "None",
                    "str",
                    "dict[str, str]"
                ]
            }
        },
        "set_permissions": {
            "name": "set_permissions",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "user_id": [
                    "str",
                    "dict[str, typing.Any]",
                    "list[int]"
                ],
                "record_uuid": [
                    "str",
                    "dict[str, typing.Any]"
                ],
                "permissions_dict": [
                    "dict[, ]",
                    "dict[str, typing.Any]"
                ],
                "acl_client": [
                    "None",
                    "str"
                ]
            }
        }
    },
    "medfs-master/record_service/record_service/utils/responses.py": {
        "JsonResponse.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "None",
                    "int",
                    "str",
                    "bytes",
                    "set[str]",
                    "tuple[]"
                ],
                "message": [
                    "None",
                    "int",
                    "str",
                    "bytes",
                    "set[str]",
                    "tuple[]"
                ],
                "status": [
                    "int"
                ]
            }
        }
    },
    "medfs-master/record_service/record_service/utils/sql_scripts.py": {},
    "medfs-master/record_service/record_service/utils/__init__.py": {}
}
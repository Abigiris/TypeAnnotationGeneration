{
    "metalk8s-master/buildchain/dodo.py": {
        "CustomReporter.__init__": {
            "name": "__init__",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "outstream": [
                    "dict[str, typing.Any]",
                    "int",
                    "None",
                    "typing.TextIO"
                ],
                "options": [
                    "dict[str, typing.Any]",
                    "int",
                    "None",
                    "typing.TextIO"
                ]
            }
        },
        "CustomReporter.execute_task": {
            "name": "execute_task",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "task": [
                    "str"
                ]
            }
        },
        "CustomReporter.add_failure": {
            "name": "add_failure",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "task": [
                    "str"
                ],
                "exception": [
                    "str"
                ]
            }
        },
        "CustomReporter.skip_uptodate": {
            "name": "skip_uptodate",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "task": [
                    "str"
                ]
            }
        },
        "CustomReporter.skip_ignore": {
            "name": "skip_ignore",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "task": [
                    "str"
                ]
            }
        },
        "CustomReporter.cleanup_error": {
            "name": "cleanup_error",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "exception": []
            }
        },
        "CustomReporter.runtime_error": {
            "name": "runtime_error",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "msg": [
                    "str",
                    "list[str]",
                    "int"
                ]
            }
        },
        "CustomReporter.complete_run": {
            "name": "complete_run",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CustomReporter._write": {
            "name": "_write",
            "location": 101,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str",
                    "None",
                    "bytes"
                ]
            }
        },
        "CustomReporter._write_failure": {
            "name": "_write_failure",
            "location": 104,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "result": [
                    "str",
                    "list[str]",
                    "list[]"
                ]
            }
        }
    },
    "metalk8s-master/buildchain/buildchain/build.py": {
        "task__build_root": {
            "name": "task__build_root",
            "location": 15,
            "return": [],
            "arguments": {}
        }
    },
    "metalk8s-master/buildchain/buildchain/builder.py": {
        "task__build_builder": {
            "name": "task__build_builder",
            "location": 17,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {}
        },
        "_builder_image": {
            "name": "_builder_image",
            "location": 23,
            "return": [
                "LocalImage"
            ],
            "arguments": {
                "name": [],
                "dockerfile": []
            }
        }
    },
    "metalk8s-master/buildchain/buildchain/codegen.py": {
        "task_codegen": {
            "name": "task_codegen",
            "location": 17,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {}
        },
        "codegen_go": {
            "name": "codegen_go",
            "location": 23,
            "return": [
                "dict[typing.Text, typing.Union[typing.Text,list[typing.Text]]]"
            ],
            "arguments": {}
        }
    },
    "metalk8s-master/buildchain/buildchain/config.py": {
        "ExtCommand.command_name": {
            "name": "command_name",
            "location": 64,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "metalk8s-master/buildchain/buildchain/constants.py": {
        "git_ref": {
            "name": "git_ref",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "metalk8s-master/buildchain/buildchain/coreutils.py": {
        "sha256sum": {
            "name": "sha256sum",
            "location": 20,
            "return": [],
            "arguments": {
                "input_files": [],
                "output_file": []
            }
        },
        "gzip": {
            "name": "gzip",
            "location": 43,
            "return": [],
            "arguments": {
                "input_file": [],
                "keep_input": [],
                "level": []
            }
        },
        "cp_file": {
            "name": "cp_file",
            "location": 60,
            "return": [],
            "arguments": {
                "source": [],
                "destination": []
            }
        },
        "rm_rf": {
            "name": "rm_rf",
            "location": 72,
            "return": [],
            "arguments": {
                "directory": []
            }
        },
        "touch": {
            "name": "touch",
            "location": 83,
            "return": [],
            "arguments": {
                "path": []
            }
        },
        "ls_files_rec": {
            "name": "ls_files_rec",
            "location": 92,
            "return": [],
            "arguments": {
                "root": []
            }
        }
    },
    "metalk8s-master/buildchain/buildchain/deps.py": {
        "task_check_for": {
            "name": "task_check_for",
            "location": 16,
            "return": [
                "typing.Generator[dict[typing.Union[typing.Text,typing.Text,typing.Text,typing.Text,typing.Text,typing.Text,typing.Text], typing.Union[typing.Callable[, ],str,list[tuple[typing.Union[list[None],dict[, ]]]],list[],list[],list[bool]]]]"
            ],
            "arguments": {}
        },
        "task_check_for.get_command_location": {
            "name": "get_command_location",
            "location": 18,
            "return": [
                "TaskError",
                "None"
            ],
            "arguments": {
                "command_name": [],
                "binary_path": []
            }
        },
        "task_check_for.show": {
            "name": "show",
            "location": 44,
            "return": [
                "str"
            ],
            "arguments": {
                "name": []
            }
        }
    },
    "metalk8s-master/buildchain/buildchain/docker_command.py": {
        "default_run_config": {
            "name": "default_run_config",
            "location": 40,
            "return": [
                "dict[typing.Text, typing.Union[typing.Text,list[],dict[typing.Text, typing.Text],bool]]"
            ],
            "arguments": {
                "entrypoint": []
            }
        },
        "default_error_handler": {
            "name": "default_error_handler",
            "location": 58,
            "return": [
                "str"
            ],
            "arguments": {
                "exc": []
            }
        },
        "build_error_handler": {
            "name": "build_error_handler",
            "location": 63,
            "return": [
                "str"
            ],
            "arguments": {
                "build_error": []
            }
        },
        "container_error_handler": {
            "name": "container_error_handler",
            "location": 85,
            "return": [
                "str"
            ],
            "arguments": {
                "container_error": []
            }
        },
        "task_error": {
            "name": "task_error",
            "location": 90,
            "return": [],
            "arguments": {
                "expected_exn": [],
                "handler": []
            }
        },
        "docker_build": {
            "name": "docker_build",
            "location": 117,
            "return": [
                "None"
            ],
            "arguments": {
                "image": []
            }
        },
        "docker_tag": {
            "name": "docker_tag",
            "location": 230,
            "return": [
                "None"
            ],
            "arguments": {
                "repository": [],
                "full_name": [],
                "version": []
            }
        },
        "docker_pull": {
            "name": "docker_pull",
            "location": 245,
            "return": [
                "None"
            ],
            "arguments": {
                "repository": [],
                "name": [],
                "version": [],
                "digest": []
            }
        },
        "docker_save": {
            "name": "docker_save",
            "location": 272,
            "return": [
                "None"
            ],
            "arguments": {
                "tag": [],
                "save_path": []
            }
        },
        "docker_image_exists": {
            "name": "docker_image_exists",
            "location": 287,
            "return": [
                "bool"
            ],
            "arguments": {
                "tag": []
            }
        },
        "task_error.wrapped_task": {
            "name": "wrapped_task",
            "location": 103,
            "return": [],
            "arguments": {
                "task_func": []
            }
        },
        "DockerRun.__init__": {
            "name": "__init__",
            "location": 131,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "command": [],
                "builder": [],
                "run_config": [],
                "environment": [
                    "None"
                ],
                "mounts": [
                    "None"
                ],
                "tmpfs": [
                    "None"
                ],
                "read_only": [
                    "bool"
                ]
            }
        },
        "DockerRun.expand_config": {
            "name": "expand_config",
            "location": 161,
            "return": [
                "dict[typing.Text, ]",
                "list[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "DockerRun.__call__": {
            "name": "__call__",
            "location": 219,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "task_error.wrapped_task.decorated_task": {
            "name": "decorated_task",
            "location": 105,
            "return": [
                "TaskError",
                "None"
            ],
            "arguments": {}
        }
    },
    "metalk8s-master/buildchain/buildchain/docs.py": {
        "task_documentation": {
            "name": "task_documentation",
            "location": 52,
            "return": [
                "dict[typing.Text, typing.Union[None,list[typing.Text]]]"
            ],
            "arguments": {}
        },
        "task__doc_mkdir_root": {
            "name": "task__doc_mkdir_root",
            "location": 63,
            "return": [],
            "arguments": {}
        },
        "task__doc_deploy": {
            "name": "task__doc_deploy",
            "location": 70,
            "return": [
                "dict[typing.Text, typing.Union[list[tuple[tuple[]]],list[typing.Text],bool]]"
            ],
            "arguments": {}
        },
        "task_doc": {
            "name": "task_doc",
            "location": 84,
            "return": [
                "typing.Generator[dict[typing.Union[typing.Text,typing.Text,typing.Text,typing.Text,typing.Text,typing.Text,typing.Text,typing.Text], typing.Union[str,list[DockerRun],list[],list[],list[str],list[]]]]"
            ],
            "arguments": {}
        },
        "task_livedoc": {
            "name": "task_livedoc",
            "location": 126,
            "return": [
                "dict[typing.Text, typing.Union[typing.Callable[, ],list[bool]]]"
            ],
            "arguments": {}
        },
        "task_doc.clean": {
            "name": "clean",
            "location": 86,
            "return": [
                "typing.Callable[, ]"
            ],
            "arguments": {
                "target": []
            }
        }
    },
    "metalk8s-master/buildchain/buildchain/format.py": {
        "task_format": {
            "name": "task_format",
            "location": 18,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {}
        },
        "format_go": {
            "name": "format_go",
            "location": 24,
            "return": [
                "dict[typing.Text, typing.Union[typing.Text,list[typing.Text]]]"
            ],
            "arguments": {}
        }
    },
    "metalk8s-master/buildchain/buildchain/image.py": {
        "task_images": {
            "name": "task_images",
            "location": 44,
            "return": [
                "dict[typing.Text, typing.Union[None,list[typing.Text]]]"
            ],
            "arguments": {}
        },
        "task__image_mkdir_root": {
            "name": "task__image_mkdir_root",
            "location": 57,
            "return": [],
            "arguments": {}
        },
        "task__image_pull": {
            "name": "task__image_pull",
            "location": 64,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {}
        },
        "task__image_build": {
            "name": "task__image_build",
            "location": 70,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {}
        },
        "task__image_dedup_layers": {
            "name": "task__image_dedup_layers",
            "location": 76,
            "return": [],
            "arguments": {}
        },
        "_get_image_info": {
            "name": "_get_image_info",
            "location": 94,
            "return": [],
            "arguments": {
                "name": []
            }
        },
        "_remote_image": {
            "name": "_remote_image",
            "location": 103,
            "return": [],
            "arguments": {
                "name": [],
                "repository": []
            }
        },
        "_local_image": {
            "name": "_local_image",
            "location": 123,
            "return": [],
            "arguments": {
                "name": []
            }
        },
        "_operator_image": {
            "name": "_operator_image",
            "location": 142,
            "return": [],
            "arguments": {
                "name": []
            }
        },
        "task__image_dedup_layers.show": {
            "name": "show",
            "location": 78,
            "return": [
                "str"
            ],
            "arguments": {}
        }
    },
    "metalk8s-master/buildchain/buildchain/iso.py": {
        "task_iso": {
            "name": "task_iso",
            "location": 129,
            "return": [
                "dict[typing.Text, typing.Union[None,list[typing.Text]]]"
            ],
            "arguments": {}
        },
        "task__iso_mkdir_root": {
            "name": "task__iso_mkdir_root",
            "location": 142,
            "return": [],
            "arguments": {}
        },
        "task_populate_iso": {
            "name": "task_populate_iso",
            "location": 149,
            "return": [
                "dict[typing.Text, typing.Union[typing.Text,None,list[typing.Text]]]"
            ],
            "arguments": {}
        },
        "task__iso_add_tree": {
            "name": "task__iso_add_tree",
            "location": 169,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {}
        },
        "task__iso_build": {
            "name": "task__iso_build",
            "location": 176,
            "return": [
                "dict[typing.Text, typing.Union[str,list[typing.Text],bool]]"
            ],
            "arguments": {}
        },
        "task__iso_digest": {
            "name": "task__iso_digest",
            "location": 218,
            "return": [],
            "arguments": {}
        },
        "task__iso_build.mkisofs": {
            "name": "mkisofs",
            "location": 178,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "metalk8s-master/buildchain/buildchain/lint.py": {
        "task_lint": {
            "name": "task_lint",
            "location": 43,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {}
        },
        "lint_python": {
            "name": "lint_python",
            "location": 50,
            "return": [
                "dict[typing.Text, typing.Union[typing.Text,list[]]]"
            ],
            "arguments": {}
        },
        "lint_shell": {
            "name": "lint_shell",
            "location": 71,
            "return": [
                "dict[typing.Text, typing.Union[typing.Text,list[list[typing.Text]]]]"
            ],
            "arguments": {}
        },
        "lint_yaml": {
            "name": "lint_yaml",
            "location": 87,
            "return": [
                "dict[typing.Text, typing.Union[typing.Text,list[list[typing.Text]]]]"
            ],
            "arguments": {}
        },
        "check_go_fmt": {
            "name": "check_go_fmt",
            "location": 103,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "check_go_codegen": {
            "name": "check_go_codegen",
            "location": 118,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "lint_go": {
            "name": "lint_go",
            "location": 136,
            "return": [
                "dict[typing.Text, typing.Union[typing.Text,list[typing.Text]]]"
            ],
            "arguments": {}
        }
    },
    "metalk8s-master/buildchain/buildchain/packaging.py": {
        "_list_packages_to_build": {
            "name": "_list_packages_to_build",
            "location": 48,
            "return": [
                "list[]"
            ],
            "arguments": {
                "pkg_cats": []
            }
        },
        "_list_packages_to_download": {
            "name": "_list_packages_to_download",
            "location": 56,
            "return": [
                "dict[, ]"
            ],
            "arguments": {
                "package_versions": [],
                "packages_to_build": []
            }
        },
        "task_packaging": {
            "name": "task_packaging",
            "location": 69,
            "return": [
                "dict[typing.Text, typing.Union[None,list[typing.Text]]]"
            ],
            "arguments": {}
        },
        "task__package_mkdir_root": {
            "name": "task__package_mkdir_root",
            "location": 85,
            "return": [],
            "arguments": {}
        },
        "task__package_mkdir_rpm_root": {
            "name": "task__package_mkdir_rpm_root",
            "location": 91,
            "return": [],
            "arguments": {}
        },
        "task__package_mkdir_deb_root": {
            "name": "task__package_mkdir_deb_root",
            "location": 97,
            "return": [],
            "arguments": {}
        },
        "task__package_mkdir_iso_root": {
            "name": "task__package_mkdir_iso_root",
            "location": 103,
            "return": [],
            "arguments": {}
        },
        "task__package_mkdir_rpm_iso_root": {
            "name": "task__package_mkdir_rpm_iso_root",
            "location": 109,
            "return": [],
            "arguments": {}
        },
        "task__package_mkdir_deb_iso_root": {
            "name": "task__package_mkdir_deb_iso_root",
            "location": 115,
            "return": [],
            "arguments": {}
        },
        "task__download_rpm_packages": {
            "name": "task__download_rpm_packages",
            "location": 121,
            "return": [
                "dict[typing.Text, typing.Union[list[typing.Text],int]]"
            ],
            "arguments": {}
        },
        "task__download_deb_packages": {
            "name": "task__download_deb_packages",
            "location": 167,
            "return": [
                "dict[typing.Text, typing.Union[list[typing.Text],int]]"
            ],
            "arguments": {}
        },
        "task__build_rpm_packages": {
            "name": "task__build_rpm_packages",
            "location": 223,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {}
        },
        "task__build_deb_packages": {
            "name": "task__build_deb_packages",
            "location": 230,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {}
        },
        "task__build_rpm_repositories": {
            "name": "task__build_rpm_repositories",
            "location": 237,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {}
        },
        "task__build_deb_repositories": {
            "name": "task__build_deb_repositories",
            "location": 244,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {}
        },
        "_rpm_package": {
            "name": "_rpm_package",
            "location": 254,
            "return": [],
            "arguments": {
                "name": [],
                "sources": []
            }
        },
        "_rpm_repository": {
            "name": "_rpm_repository",
            "location": 279,
            "return": [],
            "arguments": {
                "name": [],
                "packages": [
                    "None"
                ]
            }
        },
        "_deb_package": {
            "name": "_deb_package",
            "location": 356,
            "return": [],
            "arguments": {
                "name": [],
                "sources": []
            }
        },
        "_deb_repository": {
            "name": "_deb_repository",
            "location": 378,
            "return": [],
            "arguments": {
                "name": [],
                "packages": [
                    "None"
                ]
            }
        },
        "task__download_rpm_packages.clean": {
            "name": "clean",
            "location": 123,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "task__download_deb_packages.clean": {
            "name": "clean",
            "location": 171,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "task__download_deb_packages.mkdirs": {
            "name": "mkdirs",
            "location": 183,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "metalk8s-master/buildchain/buildchain/salt_tree.py": {
        "task_salt_tree": {
            "name": "task_salt_tree",
            "location": 48,
            "return": [
                "dict[typing.Text, typing.Union[None,list[typing.Text]]]"
            ],
            "arguments": {}
        },
        "task__deploy_salt_tree": {
            "name": "task__deploy_salt_tree",
            "location": 58,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {}
        },
        "_StaticContainerRegistryBase.__init__": {
            "name": "__init__",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "destination": []
            }
        },
        "_StaticContainerRegistryBase.task": {
            "name": "task",
            "location": 84,
            "return": [
                "dict[typing.Text, typing.Union[str,None,list[]]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "_StaticContainerRegistryBase._run": {
            "name": "_run",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "_StaticContainerRegistryBase._get_parts": {
            "name": "_get_parts",
            "location": 102,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CommonStaticContainerRegistry._get_parts": {
            "name": "_get_parts",
            "location": 112,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "StaticContainerRegistry.__init__": {
            "name": "__init__",
            "location": 122,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "root": [],
                "server_root": [],
                "name_prefix": [],
                "destination": []
            }
        },
        "StaticContainerRegistry._get_parts": {
            "name": "_get_parts",
            "location": 146,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "metalk8s-master/buildchain/buildchain/types.py": {},
    "metalk8s-master/buildchain/buildchain/utils.py": {
        "export_only_tasks": {
            "name": "export_only_tasks",
            "location": 20,
            "return": [
                "list[]"
            ],
            "arguments": {
                "module_name": [
                    "str",
                    "typing.Type"
                ]
            }
        },
        "build_relpath": {
            "name": "build_relpath",
            "location": 37,
            "return": [],
            "arguments": {
                "path": [
                    "str"
                ]
            }
        },
        "title_with_target1": {
            "name": "title_with_target1",
            "location": 53,
            "return": [],
            "arguments": {
                "command": [
                    "str",
                    "typing.Callable[..., None]",
                    "bool"
                ]
            }
        },
        "title_with_subtask_name": {
            "name": "title_with_subtask_name",
            "location": 71,
            "return": [],
            "arguments": {
                "command": [
                    "int",
                    "typing.Sequence[C]",
                    "list[]",
                    "list[list[]]"
                ]
            }
        },
        "bind_mount": {
            "name": "bind_mount",
            "location": 89,
            "return": [
                "Mount"
            ],
            "arguments": {
                "source": [
                    "str"
                ],
                "target": [
                    "str"
                ]
            }
        },
        "bind_ro_mount": {
            "name": "bind_ro_mount",
            "location": 103,
            "return": [],
            "arguments": {
                "source": [
                    "str",
                    "bytes",
                    "None"
                ],
                "target": [
                    "str",
                    "bytes",
                    "None"
                ]
            }
        },
        "git_ls": {
            "name": "git_ls",
            "location": 113,
            "return": [],
            "arguments": {
                "directory": [
                    "None",
                    "str"
                ]
            }
        },
        "unlink_if_exist": {
            "name": "unlink_if_exist",
            "location": 129,
            "return": [
                "None"
            ],
            "arguments": {
                "filepath": []
            }
        },
        "title_with_target1.title": {
            "name": "title",
            "location": 63,
            "return": [
                "str"
            ],
            "arguments": {
                "task": []
            }
        },
        "title_with_subtask_name.title": {
            "name": "title",
            "location": 81,
            "return": [
                "str"
            ],
            "arguments": {
                "task": []
            }
        }
    },
    "metalk8s-master/buildchain/buildchain/vagrant.py": {
        "task__vagrantkey": {
            "name": "task__vagrantkey",
            "location": 23,
            "return": [
                "dict[typing.Text, typing.Union[list[list[typing.Text]],list[bool]]]"
            ],
            "arguments": {}
        },
        "task__vagrant_up_noprov": {
            "name": "task__vagrant_up_noprov",
            "location": 43,
            "return": [
                "dict[typing.Text, typing.Union[list[typing.Text],list[bool]]]"
            ],
            "arguments": {}
        },
        "task__vagrant_snapshot": {
            "name": "task__vagrant_snapshot",
            "location": 56,
            "return": [
                "dict[typing.Text, typing.Union[list[list[typing.Text]],list[typing.Text],int]]"
            ],
            "arguments": {}
        },
        "task_vagrant_restore": {
            "name": "task_vagrant_restore",
            "location": 75,
            "return": [
                "dict[typing.Text, typing.Union[list[list[typing.Text]],list[bool],int,list[typing.Text]]]"
            ],
            "arguments": {}
        },
        "task_vagrant_up": {
            "name": "task_vagrant_up",
            "location": 87,
            "return": [
                "dict[typing.Text, typing.Union[list[typing.Text],list[bool],list[list[typing.Text]],int]]"
            ],
            "arguments": {}
        },
        "task__vagrantkey.mkdir_dot_vagrant": {
            "name": "mkdir_dot_vagrant",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "task__vagrant_snapshot.check_snapshot_existence": {
            "name": "check_snapshot_existence",
            "location": 58,
            "return": [
                "bool"
            ],
            "arguments": {}
        }
    },
    "metalk8s-master/buildchain/buildchain/versions.py": {
        "load_version_information": {
            "name": "load_version_information",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "_version_prefix": {
            "name": "_version_prefix",
            "location": 71,
            "return": [
                "str"
            ],
            "arguments": {
                "version": [
                    "str"
                ],
                "prefix": [
                    "typing.Text"
                ]
            }
        },
        "_list_pkgs_for_os_family": {
            "name": "_list_pkgs_for_os_family",
            "location": 353,
            "return": [
                "tuple[PackageVersion]"
            ],
            "arguments": {
                "os_family": [
                    "dict[str, typing.Any]",
                    "str",
                    "None",
                    "list[str]",
                    "typing.Type"
                ]
            }
        },
        "PackageVersion.__init__": {
            "name": "__init__",
            "location": 228,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "None",
                    "dict[str, typing.Any]",
                    "bool",
                    "typing.Sequence[typing.Any]"
                ],
                "version": [
                    "None",
                    "bool",
                    "str",
                    "typing.Sequence[]"
                ],
                "release": [
                    "None",
                    "bool",
                    "str",
                    "typing.Sequence[]"
                ],
                "override": [
                    "None",
                    "bool",
                    "str",
                    "typing.Sequence[]"
                ]
            }
        },
        "PackageVersion.full_version": {
            "name": "full_version",
            "location": 253,
            "return": [
                "None",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "PackageVersion.rpm_full_name": {
            "name": "rpm_full_name",
            "location": 263,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "PackageVersion.deb_full_name": {
            "name": "deb_full_name",
            "location": 270,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "metalk8s-master/buildchain/buildchain/__init__.py": {},
    "metalk8s-master/buildchain/buildchain/targets/base.py": {
        "Target.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "targets": [
                    "None",
                    "bool",
                    "str",
                    "list[]"
                ],
                "file_dep": [
                    "None",
                    "str"
                ],
                "task_dep": [
                    "None",
                    "dict[, ]",
                    "dict[str, typing.Any]"
                ],
                "basename": [
                    "None",
                    "bool",
                    "str",
                    "list[]"
                ],
                "task_name": [
                    "None",
                    "str",
                    "bool"
                ],
                "uptodate": [
                    "None",
                    "bool",
                    "str",
                    "list[]"
                ]
            }
        },
        "Target.basename": {
            "name": "basename",
            "location": 53,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Target.basic_task": {
            "name": "basic_task",
            "location": 58,
            "return": [
                "dict[typing.Text, bool]"
            ],
            "arguments": {
                "self": []
            }
        },
        "AtomicTarget.task": {
            "name": "task",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CompositeTarget.execution_plan": {
            "name": "execution_plan",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "metalk8s-master/buildchain/buildchain/targets/checksum.py": {
        "Sha256Sum.__init__": {
            "name": "__init__",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "input_files": [
                    "typing.Sequence[pathlib.Path]",
                    "str",
                    "int",
                    "None",
                    "list[str]",
                    "typing.TextIO"
                ],
                "output_file": [
                    "str",
                    "typing.Pattern",
                    "set[str]"
                ]
            }
        },
        "Sha256Sum.task": {
            "name": "task",
            "location": 39,
            "return": [
                "dict[typing.Text, list[]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Sha256Sum._show": {
            "name": "_show",
            "location": 48,
            "return": [
                "str"
            ],
            "arguments": {
                "task": [
                    "list[str]",
                    "dict[, ]",
                    "tuple[str]",
                    "bytes",
                    "str",
                    "None"
                ]
            }
        },
        "Sha256Sum._run": {
            "name": "_run",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "dependencies": [
                    "str"
                ],
                "targets": [
                    "str",
                    "list[str]"
                ]
            }
        }
    },
    "metalk8s-master/buildchain/buildchain/targets/directory.py": {
        "Mkdir.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "directory": [
                    "int",
                    "float"
                ]
            }
        },
        "Mkdir.task": {
            "name": "task",
            "location": 32,
            "return": [
                "dict[typing.Text, typing.Union[list[tuple[list[]]],list[bool]]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Mkdir._run": {
            "name": "_run",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "directory": []
            }
        }
    },
    "metalk8s-master/buildchain/buildchain/targets/file_tree.py": {
        "_get_destination": {
            "name": "_get_destination",
            "location": 175,
            "return": [
                "Path"
            ],
            "arguments": {
                "target": []
            }
        },
        "FileTree.__init__": {
            "name": "__init__",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "basename": [],
                "files": [],
                "destination_directory": [],
                "source_prefix": [
                    "None"
                ]
            }
        },
        "FileTree.files": {
            "name": "files",
            "location": 87,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "FileTree.execution_plan": {
            "name": "execution_plan",
            "location": 97,
            "return": [
                "list[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "FileTree.make_directories": {
            "name": "make_directories",
            "location": 111,
            "return": [
                "dict[typing.Text, typing.Union[str,list[bool]]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "FileTree.copy_files": {
            "name": "copy_files",
            "location": 128,
            "return": [
                "dict[typing.Text, str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "FileTree._compute_dir_tree": {
            "name": "_compute_dir_tree",
            "location": 156,
            "return": [
                "list[]"
            ],
            "arguments": {
                "files": []
            }
        },
        "FileTree._get_task_dep_for_copy": {
            "name": "_get_task_dep_for_copy",
            "location": 165,
            "return": [
                "list[]",
                "list[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "FileTree.make_directories.mkdirs": {
            "name": "mkdirs",
            "location": 113,
            "return": [
                "None"
            ],
            "arguments": {
                "targets": []
            }
        },
        "FileTree.copy_files.show": {
            "name": "show",
            "location": 130,
            "return": [
                "str"
            ],
            "arguments": {
                "_task": []
            }
        }
    },
    "metalk8s-master/buildchain/buildchain/targets/image.py": {
        "ContainerImage.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "None"
                ],
                "version": [
                    "bool",
                    "str",
                    "None",
                    "typing.Sequence[]"
                ],
                "destination": [
                    "bool",
                    "str",
                    "None",
                    "typing.Sequence[]"
                ]
            }
        },
        "ContainerImage.dest_dir": {
            "name": "dest_dir",
            "location": 45,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ContainerImage.dirname": {
            "name": "dirname",
            "location": 50,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ContainerImage.tag": {
            "name": "tag",
            "location": 55,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ContainerImage.show": {
            "name": "show",
            "location": 59,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "command": [
                    "list[list[int]]",
                    "str",
                    "list[]",
                    "bool"
                ]
            }
        },
        "ContainerImage.mkdirs": {
            "name": "mkdirs",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ContainerImage.clean": {
            "name": "clean",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "metalk8s-master/buildchain/buildchain/targets/local_image.py": {
        "DockerFileDep.__init__": {
            "name": "__init__",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "line_no": [
                    "str",
                    "None",
                    "int",
                    "typing.BinaryIO",
                    "list[]"
                ],
                "line_contents": [
                    "str",
                    "bytes",
                    "dict[str, typing.Any]",
                    "typing.Any",
                    "None"
                ],
                "line_match": [
                    "str",
                    "bytes",
                    "bool",
                    "dict[, ]"
                ],
                "dockerfile_path": [
                    "str",
                    "None"
                ]
            }
        },
        "DockerFileDep.expand_dep": {
            "name": "expand_dep",
            "location": 47,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "DockerFileDep.format_errors": {
            "name": "format_errors",
            "location": 64,
            "return": [
                "list[str]"
            ],
            "arguments": {
                "self": [],
                "error_paths": [
                    "str"
                ]
            }
        },
        "DockerFileDep.verify": {
            "name": "verify",
            "location": 72,
            "return": [],
            "arguments": {
                "self": [],
                "file_deps": [
                    "str",
                    "typing.IO",
                    "bytes"
                ]
            }
        },
        "LocalImage.__init__": {
            "name": "__init__",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "None",
                    "int",
                    "list[]"
                ],
                "version": [
                    "str",
                    "None",
                    "int",
                    "list[]"
                ],
                "dockerfile": [
                    "bool",
                    "str",
                    "list[str]",
                    "None"
                ],
                "destination": [
                    "str",
                    "None",
                    "int",
                    "list[]"
                ],
                "save_on_disk": [
                    "str",
                    "list[list[str]]",
                    "dict[str, typing.Any]",
                    "None",
                    "bool",
                    "typing.Mapping"
                ],
                "build_context": [
                    "None",
                    "bytes",
                    "bool"
                ],
                "build_args": [
                    "None",
                    "list[str]",
                    "list[]",
                    "dict[, ]",
                    "str",
                    "dict[str, str]"
                ]
            }
        },
        "LocalImage.load_deps_from_dockerfile": {
            "name": "load_deps_from_dockerfile",
            "location": 127,
            "return": [
                "list[DockerFileDep]"
            ],
            "arguments": {
                "self": []
            }
        },
        "LocalImage.check_dockerfile_dependencies": {
            "name": "check_dockerfile_dependencies",
            "location": 153,
            "return": [
                "TaskError",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LocalImage.task": {
            "name": "task",
            "location": 172,
            "return": [
                "dict[typing.Text, typing.Union[typing.Callable[, ],str,list[tuple[typing.Union[list[],dict[, ]]]]]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "LocalImage._build_actions": {
            "name": "_build_actions",
            "location": 187,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "LocalImage._do_build": {
            "name": "_do_build",
            "location": 194,
            "return": [
                "list[tuple[typing.Union[list[LocalImage],dict[, ]]]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "LocalImage._do_save": {
            "name": "_do_save",
            "location": 198,
            "return": [
                "list[tuple[typing.Union[list[],dict[, ]]]]",
                "list[list[typing.Text]]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "metalk8s-master/buildchain/buildchain/targets/operator_image.py": {
        "OperatorImage.__init__": {
            "name": "__init__",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "version": [
                    "str",
                    "None",
                    "typing.Iterable[str]",
                    "typing.Callable[, ]",
                    "bool"
                ],
                "destination": [
                    "str",
                    "None",
                    "typing.Iterable[str]",
                    "typing.Callable[, ]",
                    "bool"
                ]
            }
        },
        "OperatorImage._do_build": {
            "name": "_do_build",
            "location": 49,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "metalk8s-master/buildchain/buildchain/targets/package.py": {
        "_file_from_url": {
            "name": "_file_from_url",
            "location": 326,
            "return": [],
            "arguments": {
                "url": []
            }
        },
        "Package.__init__": {
            "name": "__init__",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "basename": [],
                "name": [],
                "version": [],
                "build_id": [],
                "builder": [],
                "pkg_root": []
            }
        },
        "Package._get_task_name": {
            "name": "_get_task_name",
            "location": 74,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "taskname": [],
                "with_basename": [
                    "bool"
                ]
            }
        },
        "RPMPackage.__init__": {
            "name": "__init__",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "basename": [],
                "name": [],
                "version": [],
                "build_id": [],
                "sources": [],
                "builder": []
            }
        },
        "RPMPackage.rootdir": {
            "name": "rootdir",
            "location": 126,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RPMPackage.srcdir": {
            "name": "srcdir",
            "location": 131,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RPMPackage.spec": {
            "name": "spec",
            "location": 136,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RPMPackage.meta": {
            "name": "meta",
            "location": 141,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RPMPackage.srpm": {
            "name": "srpm",
            "location": 146,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RPMPackage.execution_plan": {
            "name": "execution_plan",
            "location": 152,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "RPMPackage.make_package_directory": {
            "name": "make_package_directory",
            "location": 160,
            "return": [
                "dict[typing.Text, str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "RPMPackage.generate_meta": {
            "name": "generate_meta",
            "location": 174,
            "return": [
                "dict[typing.Text, typing.Union[list[],str]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "RPMPackage.get_source_files": {
            "name": "get_source_files",
            "location": 213,
            "return": [
                "dict[typing.Text, typing.Union[str,list[]]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "RPMPackage.build_srpm": {
            "name": "build_srpm",
            "location": 232,
            "return": [
                "dict[typing.Text, typing.Union[list[],str,int]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "RPMPackage._get_sources": {
            "name": "_get_sources",
            "location": 268,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RPMPackage._get_source_files_urls": {
            "name": "_get_source_files_urls",
            "location": 279,
            "return": [
                "dict[, ]"
            ],
            "arguments": {
                "self": []
            }
        },
        "RPMPackage._get_buildsrpm_mounts": {
            "name": "_get_buildsrpm_mounts",
            "location": 299,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": [],
                "srpm_dir": []
            }
        },
        "DEBPackage.__init__": {
            "name": "__init__",
            "location": 337,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "basename": [],
                "name": [],
                "version": [],
                "sources": [],
                "build_id": [],
                "builder": []
            }
        },
        "DEBPackage.deb": {
            "name": "deb",
            "location": 360,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DEBPackage.debuild_sources": {
            "name": "debuild_sources",
            "location": 366,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DEBPackage.execution_plan": {
            "name": "execution_plan",
            "location": 371,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "DEBPackage.build_package": {
            "name": "build_package",
            "location": 376,
            "return": [
                "dict[typing.Text, typing.Union[list[],str]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "DEBPackage.convert_package": {
            "name": "convert_package",
            "location": 412,
            "return": [
                "dict[typing.Text, typing.Union[list[],str]]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "metalk8s-master/buildchain/buildchain/targets/remote_image.py": {
        "RemoteImage.__init__": {
            "name": "__init__",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "repository": [
                    "str",
                    "None",
                    "int",
                    "dict[str, typing.Any]"
                ],
                "name": [
                    "str",
                    "None",
                    "list[str]",
                    "bool"
                ],
                "version": [
                    "str",
                    "None"
                ],
                "digest": [
                    "str",
                    "None",
                    "int",
                    "dict[str, typing.Any]"
                ],
                "destination": [
                    "str",
                    "None"
                ],
                "save_as": [
                    "None",
                    "str"
                ],
                "remote_name": [
                    "None",
                    "str",
                    "bool",
                    "list[str]"
                ]
            }
        },
        "RemoteImage.remote_fullname": {
            "name": "remote_fullname",
            "location": 71,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "RemoteImage.fullname": {
            "name": "fullname",
            "location": 78,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "RemoteImage.filepaths": {
            "name": "filepaths",
            "location": 83,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "RemoteImage.task": {
            "name": "task",
            "location": 88,
            "return": [
                "dict[typing.Text, typing.Union[typing.Callable[, ],str,list[bool]]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ImageSaveFormat.filepath": {
            "name": "filepath",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "img": [
                    "int",
                    "str",
                    "typing.Iterable['Context']"
                ]
            }
        },
        "ImageSaveFormat.save": {
            "name": "save",
            "location": 110,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "img": [
                    "bool",
                    "dict[, ]",
                    "str",
                    "tuple[tuple[typing.Union[str,...]]]"
                ]
            }
        },
        "ImageSaveFormat.clean": {
            "name": "clean",
            "location": 114,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "img": [
                    "int",
                    "str",
                    "typing.Iterable['Context']"
                ]
            }
        },
        "SaveAsLayers.filepath": {
            "name": "filepath",
            "location": 120,
            "return": [],
            "arguments": {
                "self": [],
                "img": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ]
            }
        },
        "SaveAsLayers.save": {
            "name": "save",
            "location": 123,
            "return": [
                "list[list[typing.Text]]"
            ],
            "arguments": {
                "self": [],
                "img": [
                    "str"
                ]
            }
        },
        "SaveAsLayers.clean": {
            "name": "clean",
            "location": 134,
            "return": [],
            "arguments": {
                "self": [],
                "img": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ]
            }
        },
        "SaveAsTar.filepath": {
            "name": "filepath",
            "location": 141,
            "return": [],
            "arguments": {
                "self": [],
                "img": [
                    "str",
                    "dict[, ]"
                ]
            }
        },
        "SaveAsTar.save": {
            "name": "save",
            "location": 145,
            "return": [
                "list[tuple[typing.Union[list[str],dict[, ]]]]"
            ],
            "arguments": {
                "self": [],
                "img": [
                    "str",
                    "dict[str, str]"
                ]
            }
        },
        "SaveAsTar.clean": {
            "name": "clean",
            "location": 159,
            "return": [],
            "arguments": {
                "self": [],
                "img": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ]
            }
        }
    },
    "metalk8s-master/buildchain/buildchain/targets/repository.py": {
        "Repository.__init__": {
            "name": "__init__",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "basename": [],
                "name": [],
                "builder": [],
                "repo_root": [],
                "packages": [
                    "None"
                ]
            }
        },
        "Repository.fullname": {
            "name": "fullname",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Repository.rootdir": {
            "name": "rootdir",
            "location": 93,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Repository.execution_plan": {
            "name": "execution_plan",
            "location": 98,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Repository.build_repo": {
            "name": "build_repo",
            "location": 105,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Repository.build_packages": {
            "name": "build_packages",
            "location": 109,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Repository._get_task_name": {
            "name": "_get_task_name",
            "location": 112,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "taskname": [],
                "with_basename": [
                    "bool"
                ]
            }
        },
        "Repository._mkdir_repo_root": {
            "name": "_mkdir_repo_root",
            "location": 123,
            "return": [
                "dict[typing.Text, typing.Union[str,list[bool]]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "RPMRepository.__init__": {
            "name": "__init__",
            "location": 146,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "basename": [],
                "name": [],
                "builder": [],
                "packages": [
                    "None"
                ]
            }
        },
        "RPMRepository.fullname": {
            "name": "fullname",
            "location": 159,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "RPMRepository.repodata": {
            "name": "repodata",
            "location": 167,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RPMRepository.build_repo": {
            "name": "build_repo",
            "location": 171,
            "return": [
                "dict[typing.Text, typing.Union[str,list[bool],int]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "RPMRepository.build_packages": {
            "name": "build_packages",
            "location": 203,
            "return": [
                "list[dict[typing.Text, typing.Union[list[],str,int]]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "RPMRepository._mkdir_repo_arch": {
            "name": "_mkdir_repo_arch",
            "location": 245,
            "return": [
                "dict[typing.Text, typing.Union[str,list[bool]]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "RPMRepository.get_rpm_path": {
            "name": "get_rpm_path",
            "location": 263,
            "return": [],
            "arguments": {
                "self": [],
                "pkg": []
            }
        },
        "RPMRepository._get_buildrpm_mounts": {
            "name": "_get_buildrpm_mounts",
            "location": 271,
            "return": [
                "list[]"
            ],
            "arguments": {
                "srpm_path": [],
                "rpm_dir": []
            }
        },
        "RPMRepository._buildrepo_action": {
            "name": "_buildrepo_action",
            "location": 292,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DEBRepository.__init__": {
            "name": "__init__",
            "location": 318,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "basename": [],
                "name": [],
                "builder": []
            }
        },
        "DEBRepository.fullname": {
            "name": "fullname",
            "location": 333,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "DEBRepository.pkgdir": {
            "name": "pkgdir",
            "location": 341,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DEBRepository.build_packages": {
            "name": "build_packages",
            "location": 348,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "DEBRepository.build_repo": {
            "name": "build_repo",
            "location": 352,
            "return": [
                "dict[typing.Text, typing.Union[str,list[Path],list[bool]]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "DEBRepository._buildrepo_action": {
            "name": "_buildrepo_action",
            "location": 378,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RPMRepository.build_repo.clean": {
            "name": "clean",
            "location": 173,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "DEBRepository.build_repo.clean": {
            "name": "clean",
            "location": 353,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "metalk8s-master/buildchain/buildchain/targets/serialize.py": {
        "render_json": {
            "name": "render_json",
            "location": 16,
            "return": [],
            "arguments": {
                "obj": [],
                "filepath": []
            }
        },
        "render_envfile": {
            "name": "render_envfile",
            "location": 22,
            "return": [],
            "arguments": {
                "variables": [],
                "filepath": []
            }
        },
        "SerializedData.__init__": {
            "name": "__init__",
            "location": 46,
            "return": [],
            "arguments": {
                "self": [],
                "data": [],
                "destination": [],
                "renderer": []
            }
        },
        "SerializedData.task": {
            "name": "task",
            "location": 78,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SerializedData._render": {
            "name": "_render",
            "location": 92,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SerializedData._run": {
            "name": "_run",
            "location": 95,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "metalk8s-master/buildchain/buildchain/targets/template.py": {
        "TemplateFile.__init__": {
            "name": "__init__",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "source": [],
                "destination": [],
                "context": []
            }
        },
        "TemplateFile.task": {
            "name": "task",
            "location": 55,
            "return": [
                "dict[typing.Text, typing.Union[str,list[]]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TemplateFile._run": {
            "name": "_run",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "metalk8s-master/buildchain/buildchain/targets/__init__.py": {},
    "metalk8s-master/buildchain/static-container-registry/static-container-registry.py": {
        "find_images": {
            "name": "find_images",
            "location": 42,
            "return": [
                "typing.Generator[tuple[]]"
            ],
            "arguments": {
                "root": [
                    "str",
                    "list[str]"
                ]
            }
        },
        "create_config": {
            "name": "create_config",
            "location": 91,
            "return": [
                "typing.Generator[str]",
                "None"
            ],
            "arguments": {
                "root": [
                    "str",
                    "None",
                    "bool"
                ],
                "server_root": [
                    "str",
                    "None"
                ],
                "name_prefix": [
                    "str"
                ],
                "with_constants": [
                    "bool"
                ],
                "only_constants": [
                    "bool"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 188,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "metalk8s-master/charts/render.py": {
        "fixup_metadata": {
            "name": "fixup_metadata",
            "location": 38,
            "return": [],
            "arguments": {
                "namespace": [
                    "tuple[]",
                    "str",
                    "typing.Callable[, ]"
                ],
                "doc": []
            }
        },
        "maybe_copy": {
            "name": "maybe_copy",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "doc": [],
                "src": [],
                "dest": [
                    "str",
                    "None"
                ]
            }
        },
        "fixup_dict": {
            "name": "fixup_dict",
            "location": 56,
            "return": [],
            "arguments": {
                "doc": []
            }
        },
        "fixup_doc": {
            "name": "fixup_doc",
            "location": 69,
            "return": [
                "list[]",
                "dict[str, typing.Any]",
                "tuple[typing.Union[str,...]]",
                "None"
            ],
            "arguments": {
                "doc": [
                    "dict[, ]",
                    "dict[str, typing.Any]",
                    "tuple[typing.Union[str,...]]",
                    "None"
                ]
            }
        },
        "keep_doc": {
            "name": "keep_doc",
            "location": 78,
            "return": [
                "bool"
            ],
            "arguments": {
                "doc": [
                    "dict[, ]",
                    "str"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "metalk8s-master/docs/conf.py": {},
    "metalk8s-master/docs/_lib/metalk8s_sphinxext_googleanalytics.py": {
        "ga_string": {
            "name": "ga_string",
            "location": 7,
            "return": [
                "str"
            ],
            "arguments": {
                "ua_id": [
                    "str",
                    "int"
                ]
            }
        },
        "add_ga_javascript": {
            "name": "add_ga_javascript",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "app": [],
                "pagename": [],
                "templatename": [],
                "context": [
                    "dict[str, typing.Any]",
                    "dict[, ]"
                ],
                "doctree": []
            }
        },
        "check_config": {
            "name": "check_config",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "app": []
            }
        },
        "setup": {
            "name": "setup",
            "location": 38,
            "return": [
                "dict[typing.Text, typing.Text]"
            ],
            "arguments": {
                "app": []
            }
        },
        "TestExtension.test_ga_string": {
            "name": "test_ga_string",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestExtension.test_ga_string_ua_id": {
            "name": "test_ga_string_ua_id",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "metalk8s-master/examples/metalk8s-solution-example/images/base-server/server.py": {
        "json_response": {
            "name": "json_response",
            "location": 8,
            "return": [],
            "arguments": {
                "handler": []
            }
        },
        "_parse_timezone": {
            "name": "_parse_timezone",
            "location": 62,
            "return": [],
            "arguments": {
                "timezone": []
            }
        },
        "_custom_handler": {
            "name": "_custom_handler",
            "location": 89,
            "return": [],
            "arguments": {
                "version": [],
                "timezone": []
            }
        },
        "run": {
            "name": "run",
            "location": 110,
            "return": [],
            "arguments": {
                "args": []
            }
        },
        "json_response.wrapped": {
            "name": "wrapped",
            "location": 9,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BaseHandler.do_GET": {
            "name": "do_GET",
            "location": 33,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BaseHandler.raise_error": {
            "name": "raise_error",
            "location": 40,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BaseHandler.error_404": {
            "name": "error_404",
            "location": 43,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BaseHandler.error_500": {
            "name": "error_500",
            "location": 49,
            "return": [],
            "arguments": {
                "self": [],
                "exception": []
            }
        },
        "_custom_handler.CustomHandler.print_version": {
            "name": "print_version",
            "location": 101,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_custom_handler.CustomHandler.print_time": {
            "name": "print_time",
            "location": 104,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "metalk8s-master/examples/metalk8s-solution-example/static-container-registry/static-container-registry.py": {
        "find_images": {
            "name": "find_images",
            "location": 42,
            "return": [
                "typing.Generator[tuple[]]"
            ],
            "arguments": {
                "root": [
                    "str",
                    "list[str]"
                ]
            }
        },
        "create_config": {
            "name": "create_config",
            "location": 91,
            "return": [
                "typing.Generator[str]",
                "None"
            ],
            "arguments": {
                "root": [
                    "str",
                    "None",
                    "bool"
                ],
                "server_root": [
                    "str",
                    "None"
                ],
                "name_prefix": [
                    "str"
                ],
                "with_constants": [
                    "bool"
                ],
                "only_constants": [
                    "bool"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 188,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "metalk8s-master/packages/common/metalk8s-sosreport/containerd.py": {
        "containerd.setup": {
            "name": "setup",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "containerd._get_crio_list": {
            "name": "_get_crio_list",
            "location": 64,
            "return": [
                "list[str]"
            ],
            "arguments": {
                "self": [],
                "cmd": [
                    "bool",
                    "str",
                    "typing.Type",
                    "list[dict[, ]]"
                ]
            }
        }
    },
    "metalk8s-master/packages/common/metalk8s-sosreport/metalk8s.py": {
        "metalk8s.check_is_master": {
            "name": "check_is_master",
            "location": 24,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "metalk8s.setup": {
            "name": "setup",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "metalk8s.postproc": {
            "name": "postproc",
            "location": 108,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "metalk8s-master/packages/debian/download_packages.py": {
        "apt_key_add": {
            "name": "apt_key_add",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "key_url": []
            }
        },
        "add_source_list": {
            "name": "add_source_list",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "name": [],
                "url": []
            }
        },
        "select_package_version": {
            "name": "select_package_version",
            "location": 38,
            "return": [],
            "arguments": {
                "package": [],
                "version": []
            }
        },
        "select_package_origin": {
            "name": "select_package_origin",
            "location": 57,
            "return": [
                "str"
            ],
            "arguments": {
                "package": []
            }
        },
        "fetch_binary": {
            "name": "fetch_binary",
            "location": 74,
            "return": [],
            "arguments": {
                "package": [],
                "destdir": []
            }
        },
        "add_external_repositories": {
            "name": "add_external_repositories",
            "location": 99,
            "return": [
                "None"
            ],
            "arguments": {
                "salt_version": []
            }
        },
        "get_package_deps": {
            "name": "get_package_deps",
            "location": 129,
            "return": [
                "dict[, ]"
            ],
            "arguments": {
                "root_package_name": [],
                "cache": []
            }
        },
        "download_package": {
            "name": "download_package",
            "location": 168,
            "return": [],
            "arguments": {
                "package": []
            }
        },
        "main": {
            "name": "main",
            "location": 175,
            "return": [
                "None"
            ],
            "arguments": {
                "packages": [],
                "env": []
            }
        }
    },
    "metalk8s-master/salt/_auth/kubernetes_rbac.py": {
        "__virtual__": {
            "name": "__virtual__",
            "location": 22,
            "return": [
                "tuple[typing.Union[bool,str]]",
                "typing.Text"
            ],
            "arguments": {}
        },
        "_log_exceptions": {
            "name": "_log_exceptions",
            "location": 33,
            "return": [],
            "arguments": {
                "f": [
                    "str",
                    "typing.Iterable[tuple[typing.Union[int,int]]]"
                ]
            }
        },
        "_check_k8s_creds": {
            "name": "_check_k8s_creds",
            "location": 44,
            "return": [
                "bool"
            ],
            "arguments": {
                "kubeconfig": [
                    "str",
                    "bytes",
                    "int",
                    "None"
                ],
                "token": [
                    "typing.Iterable[str]",
                    "str",
                    "bytes"
                ]
            }
        },
        "_auth_basic": {
            "name": "_auth_basic",
            "location": 62,
            "return": [
                "bool"
            ],
            "arguments": {
                "kubeconfig": [
                    "str",
                    "bytes"
                ],
                "username": [
                    "bool",
                    "typing.Sequence[str]"
                ],
                "token": [
                    "str",
                    "bytes",
                    "dict[str, str]"
                ]
            }
        },
        "_groups_basic": {
            "name": "_groups_basic",
            "location": 77,
            "return": [
                "list[typing.Text]"
            ],
            "arguments": {
                "kubeconfig": [
                    "str",
                    "list[]",
                    "list[str]"
                ],
                "username": [
                    "typing.Sequence[str]",
                    "bool"
                ],
                "token": [
                    "str",
                    "typing.Callable[, ]",
                    "bool"
                ]
            }
        },
        "_auth_bearer": {
            "name": "_auth_bearer",
            "location": 118,
            "return": [],
            "arguments": {
                "kubeconfig": [
                    "str",
                    "bytes"
                ],
                "username": [
                    "int",
                    "typing.Mapping",
                    "None",
                    "typing.Callable[[], int]",
                    "str",
                    "list[dict[, ]]"
                ],
                "token": [
                    "str",
                    "bytes"
                ]
            }
        },
        "_load_kubeconfig": {
            "name": "_load_kubeconfig",
            "location": 126,
            "return": [
                "None"
            ],
            "arguments": {
                "opts": [
                    "str",
                    "list[str]"
                ]
            }
        },
        "auth": {
            "name": "auth",
            "location": 151,
            "return": [
                "bool",
                "typing.Counter",
                "dict[, ]",
                "dict[str, str]",
                "tuple[]"
            ],
            "arguments": {
                "username": [
                    "str",
                    "typing.Callable[, ]"
                ],
                "token": [
                    "str",
                    "dict[, ]",
                    "None",
                    "int"
                ],
                "token_type": [
                    "str"
                ]
            }
        },
        "groups": {
            "name": "groups",
            "location": 173,
            "return": [
                "list[]",
                "list[dict[str, typing.Any]]",
                "dict[str, str]",
                "str",
                "dict[str, int]"
            ],
            "arguments": {
                "username": [
                    "str",
                    "int",
                    "float"
                ],
                "token": [
                    "dict[, ]",
                    "typing.Type",
                    "str",
                    "dict[str, typing.Any]"
                ],
                "token_type": [
                    "str"
                ]
            }
        },
        "_log_exceptions.wrapped": {
            "name": "wrapped",
            "location": 34,
            "return": [],
            "arguments": {}
        }
    },
    "metalk8s-master/salt/_modules/containerd.py": {
        "__virtual__": {
            "name": "__virtual__",
            "location": 13,
            "return": [
                "typing.Text"
            ],
            "arguments": {}
        },
        "load_cri_image": {
            "name": "load_cri_image",
            "location": 17,
            "return": [],
            "arguments": {
                "path": [
                    "str"
                ]
            }
        }
    },
    "metalk8s-master/salt/_modules/cri.py": {
        "__virtual__": {
            "name": "__virtual__",
            "location": 18,
            "return": [],
            "arguments": {}
        },
        "list_images": {
            "name": "list_images",
            "location": 22,
            "return": [],
            "arguments": {}
        },
        "available": {
            "name": "available",
            "location": 40,
            "return": [],
            "arguments": {
                "name": []
            }
        },
        "pull_image": {
            "name": "pull_image",
            "location": 68,
            "return": [],
            "arguments": {
                "image": []
            }
        },
        "execute": {
            "name": "execute",
            "location": 102,
            "return": [],
            "arguments": {
                "name": [],
                "command": []
            }
        },
        "wait_container": {
            "name": "wait_container",
            "location": 140,
            "return": [],
            "arguments": {
                "name": [],
                "state": [],
                "timeout": [],
                "delay": []
            }
        },
        "component_is_running": {
            "name": "component_is_running",
            "location": 175,
            "return": [],
            "arguments": {
                "name": []
            }
        }
    },
    "metalk8s-master/salt/_modules/metalk8s.py": {
        "__virtual__": {
            "name": "__virtual__",
            "location": 19,
            "return": [
                "typing.Text"
            ],
            "arguments": {}
        },
        "wait_apiserver": {
            "name": "wait_apiserver",
            "location": 23,
            "return": [
                "list[]",
                "int",
                "list[str]",
                "str",
                "set[int]",
                "list[dict[str, typing.Any]]"
            ],
            "arguments": {
                "retry": [
                    "int"
                ],
                "interval": [
                    "int"
                ]
            }
        },
        "format_san": {
            "name": "format_san",
            "location": 43,
            "return": [
                "str"
            ],
            "arguments": {
                "names": [
                    "str"
                ]
            }
        },
        "minions_by_role": {
            "name": "minions_by_role",
            "location": 80,
            "return": [
                "list[tuple[typing.Union[str,dict[str, typing.Any]]]]"
            ],
            "arguments": {
                "role": [
                    "dict[, ]",
                    "typing.Type"
                ],
                "nodes": [
                    "None",
                    "dict[, ]"
                ]
            }
        },
        "_get_archive_version": {
            "name": "_get_archive_version",
            "location": 97,
            "return": [
                "None"
            ],
            "arguments": {
                "info": [
                    "dict[str, typing.Any]",
                    "str",
                    "dict[str, str]"
                ]
            }
        },
        "_get_archive_name": {
            "name": "_get_archive_name",
            "location": 107,
            "return": [
                "None"
            ],
            "arguments": {
                "info": [
                    "str",
                    "dict[str, typing.Any]",
                    "typing.Type"
                ]
            }
        },
        "_get_archive_info": {
            "name": "_get_archive_info",
            "location": 117,
            "return": [
                "dict[typing.Text, ]"
            ],
            "arguments": {
                "info": [
                    "str",
                    "typing.Callable[, ]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "archive_info_from_tree": {
            "name": "archive_info_from_tree",
            "location": 129,
            "return": [],
            "arguments": {
                "path": [
                    "str"
                ]
            }
        },
        "archive_info_from_iso": {
            "name": "archive_info_from_iso",
            "location": 147,
            "return": [],
            "arguments": {
                "path": [
                    "str"
                ]
            }
        },
        "get_archives": {
            "name": "get_archives",
            "location": 173,
            "return": [
                "dict[str, dict[typing.Text, typing.Union[str,None]]]"
            ],
            "arguments": {
                "archives": [
                    "None",
                    "dict[str, typing.Any]",
                    "bool",
                    "str",
                    "dict[, ]"
                ]
            }
        },
        "check_pillar_keys": {
            "name": "check_pillar_keys",
            "location": 226,
            "return": [
                "bool"
            ],
            "arguments": {
                "keys": [
                    "str",
                    "list[]"
                ],
                "refresh": [
                    "bool"
                ],
                "pillar": [],
                "raise_error": [
                    "bool"
                ]
            }
        },
        "format_san.format_name": {
            "name": "format_name",
            "location": 49,
            "return": [
                "str"
            ],
            "arguments": {
                "name": []
            }
        }
    },
    "metalk8s-master/salt/_modules/metalk8s_cordon.py": {
        "__virtual__": {
            "name": "__virtual__",
            "location": 11,
            "return": [
                "typing.Text"
            ],
            "arguments": {}
        },
        "_check_deps": {
            "name": "_check_deps",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "cordon_node": {
            "name": "cordon_node",
            "location": 27,
            "return": [],
            "arguments": {
                "node_name": [
                    "str",
                    "set[str]"
                ]
            }
        },
        "uncordon_node": {
            "name": "uncordon_node",
            "location": 48,
            "return": [],
            "arguments": {
                "node_name": [
                    "str",
                    "typing.Type"
                ]
            }
        }
    },
    "metalk8s-master/salt/_modules/metalk8s_drain.py": {
        "__virtual__": {
            "name": "__virtual__",
            "location": 35,
            "return": [
                "typing.Text",
                "tuple[typing.Union[bool,typing.Text]]"
            ],
            "arguments": {}
        },
        "_mirrorpod_filter": {
            "name": "_mirrorpod_filter",
            "location": 61,
            "return": [
                "tuple[typing.Union[bool,typing.Text]]"
            ],
            "arguments": {
                "pod": [
                    "str",
                    "bytes"
                ]
            }
        },
        "_has_local_storage": {
            "name": "_has_local_storage",
            "location": 76,
            "return": [
                "bool"
            ],
            "arguments": {
                "pod": [
                    "str"
                ]
            }
        },
        "_get_controller_of": {
            "name": "_get_controller_of",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {
                "pod": [
                    "tuple[]"
                ]
            }
        },
        "_message_from_pods_dict": {
            "name": "_message_from_pods_dict",
            "location": 107,
            "return": [
                "str"
            ],
            "arguments": {
                "errors_dict": [
                    "dict[str, typing.Any]",
                    "dict[str, str]",
                    "dict[, ]"
                ]
            }
        },
        "evict_pod": {
            "name": "evict_pod",
            "location": 443,
            "return": [
                "None"
            ],
            "arguments": {
                "name": [
                    "str"
                ],
                "namespace": [
                    "typing.Text"
                ],
                "grace_period": [
                    "int"
                ]
            }
        },
        "node_drain": {
            "name": "node_drain",
            "location": 497,
            "return": [],
            "arguments": {
                "node_name": [
                    "str",
                    "bool"
                ],
                "force": [
                    "bool"
                ],
                "grace_period": [
                    "int"
                ],
                "ignore_daemonset": [
                    "bool"
                ],
                "timeout": [
                    "int"
                ],
                "delete_local_data": [
                    "bool"
                ],
                "dry_run": [
                    "bool"
                ]
            }
        },
        "DrainException.__init__": {
            "name": "__init__",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "int",
                    "float"
                ]
            }
        },
        "DrainException.__str__": {
            "name": "__str__",
            "location": 52,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Drain.__init__": {
            "name": "__init__",
            "location": 152,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node_name": [
                    "str",
                    "None"
                ],
                "force": [
                    "bool"
                ],
                "grace_period": [
                    "int"
                ],
                "ignore_daemonset": [
                    "bool"
                ],
                "timeout": [
                    "int"
                ],
                "delete_local_data": [
                    "bool"
                ]
            }
        },
        "Drain.localstorage_filter": {
            "name": "localstorage_filter",
            "location": 175,
            "return": [
                "tuple[typing.Union[bool,typing.Text]]",
                "tuple[bool]"
            ],
            "arguments": {
                "self": [],
                "pod": [
                    "str",
                    "dict[, ]",
                    "bytes"
                ]
            }
        },
        "Drain.unreplicated_filter": {
            "name": "unreplicated_filter",
            "location": 189,
            "return": [
                "tuple[typing.Union[bool,typing.Text]]",
                "tuple[bool]"
            ],
            "arguments": {
                "self": [],
                "pod": []
            }
        },
        "Drain.get_controller": {
            "name": "get_controller",
            "location": 215,
            "return": [],
            "arguments": {
                "self": [],
                "namespace": [
                    "str",
                    "bool",
                    "None"
                ],
                "controller_ref": [
                    "str",
                    "bool",
                    "None"
                ]
            }
        },
        "Drain.get_pod_controller": {
            "name": "get_pod_controller",
            "location": 234,
            "return": [
                "None",
                "list[]",
                "tuple[typing.Union[str,str,str,str,str]]",
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "pod": []
            }
        },
        "Drain.daemonset_filter": {
            "name": "daemonset_filter",
            "location": 255,
            "return": [
                "tuple[typing.Union[bool,typing.Text]]",
                "tuple[bool]"
            ],
            "arguments": {
                "self": [],
                "pod": [
                    "str"
                ]
            }
        },
        "Drain.get_pods_for_eviction": {
            "name": "get_pods_for_eviction",
            "location": 294,
            "return": [
                "list[typing.Text]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Drain.run_drain": {
            "name": "run_drain",
            "location": 335,
            "return": [
                "str",
                "typing.Text"
            ],
            "arguments": {
                "self": [],
                "dry_run": [
                    "bool"
                ]
            }
        },
        "Drain.evict_pods": {
            "name": "evict_pods",
            "location": 385,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pods": [
                    "str"
                ]
            }
        },
        "Drain.wait_for_eviction": {
            "name": "wait_for_eviction",
            "location": 410,
            "return": [
                "list[str]",
                "dict[, ]"
            ],
            "arguments": {
                "self": [],
                "pods": [
                    "list[str]",
                    "dict[, ]"
                ]
            }
        }
    },
    "metalk8s-master/salt/_modules/metalk8s_etcd.py": {
        "__virtual__": {
            "name": "__virtual__",
            "location": 26,
            "return": [
                "typing.Text",
                "tuple[typing.Union[bool,typing.Text]]"
            ],
            "arguments": {}
        },
        "_get_endpoint_up": {
            "name": "_get_endpoint_up",
            "location": 33,
            "return": [
                "str"
            ],
            "arguments": {
                "ca_cert": [
                    "str",
                    "None",
                    "list[str]"
                ],
                "cert_key": [
                    "str",
                    "None",
                    "list[str]"
                ],
                "cert_cert": [
                    "str",
                    "None",
                    "list[str]"
                ],
                "nodes": [
                    "None",
                    "tuple[typing.Union[int,int]]",
                    "list[list[int]]",
                    "int",
                    "str",
                    "list[str]"
                ]
            }
        },
        "add_etcd_node": {
            "name": "add_etcd_node",
            "location": 65,
            "return": [],
            "arguments": {
                "peer_urls": [
                    "str",
                    "typing.Iterable[tuple[typing.Union[str,dict[, ]]]]",
                    "int",
                    "typing.Callable[..., typing.Any]",
                    "None"
                ],
                "endpoint": [
                    "None",
                    "str",
                    "typing.Sequence[str]"
                ],
                "ca_cert": [
                    "typing.Text"
                ],
                "cert_key": [
                    "typing.Text"
                ],
                "cert_cert": [
                    "typing.Text"
                ]
            }
        },
        "urls_exist_in_cluster": {
            "name": "urls_exist_in_cluster",
            "location": 98,
            "return": [
                "bool"
            ],
            "arguments": {
                "peer_urls": [
                    "list[str]",
                    "dict[typing.Union[str,str,str,str,str,str,str,str], int]",
                    "str"
                ],
                "endpoint": [
                    "None",
                    "str",
                    "bool"
                ],
                "ca_cert": [
                    "typing.Text"
                ],
                "cert_key": [
                    "typing.Text"
                ],
                "cert_cert": [
                    "typing.Text"
                ]
            }
        },
        "check_etcd_health": {
            "name": "check_etcd_health",
            "location": 125,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "minion_id": [
                    "None",
                    "int",
                    "str"
                ],
                "ca_cert": [
                    "typing.Text"
                ],
                "cert_key": [
                    "typing.Text"
                ],
                "cert_cert": [
                    "typing.Text"
                ]
            }
        },
        "get_etcd_member_list": {
            "name": "get_etcd_member_list",
            "location": 182,
            "return": [
                "list[]",
                "list[dict[typing.Text, list[]]]"
            ],
            "arguments": {
                "endpoint": [
                    "None",
                    "str",
                    "int"
                ],
                "nodes": [
                    "None",
                    "str",
                    "list[typing.Optional[int]]",
                    "set[str]"
                ],
                "ca_cert": [
                    "typing.Text"
                ],
                "cert_key": [
                    "typing.Text"
                ],
                "cert_cert": [
                    "typing.Text"
                ]
            }
        }
    },
    "metalk8s-master/salt/_modules/metalk8s_grafana.py": {
        "__virtual__": {
            "name": "__virtual__",
            "location": 9,
            "return": [
                "typing.Text"
            ],
            "arguments": {}
        },
        "load_dashboard": {
            "name": "load_dashboard",
            "location": 13,
            "return": [
                "dict[, ]"
            ],
            "arguments": {
                "path": [
                    "str",
                    "None",
                    "list[str]",
                    "int"
                ],
                "saltenv": [
                    "typing.Text"
                ],
                "title": [
                    "None",
                    "dict[, ]",
                    "str",
                    "typing.Any"
                ],
                "tags": [
                    "None",
                    "str",
                    "typing.Iterable[str]",
                    "typing.Callable[, ]",
                    "bool"
                ],
                "datasource_variable": [
                    "None",
                    "list[str]",
                    "bool",
                    "typing.Any",
                    "str"
                ]
            }
        }
    },
    "metalk8s-master/salt/_modules/metalk8s_kubernetes.py": {
        "__virtual__": {
            "name": "__virtual__",
            "location": 36,
            "return": [
                "tuple[typing.Union[bool,str]]",
                "tuple[typing.Union[bool,typing.Text]]",
                "typing.Text"
            ],
            "arguments": {}
        },
        "_extract_obj_and_kind_info": {
            "name": "_extract_obj_and_kind_info",
            "location": 47,
            "return": [
                "tuple[typing.Union[str,None,typing.ChainMap]]"
            ],
            "arguments": {
                "manifest": [],
                "force_custom_object": [
                    "bool"
                ]
            }
        },
        "_handle_error": {
            "name": "_handle_error",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "exception": [
                    "str",
                    "dict[str, typing.Any]"
                ],
                "action": [
                    "str",
                    "dict[, ]",
                    "None",
                    "BaseException"
                ]
            }
        },
        "_object_manipulation_function": {
            "name": "_object_manipulation_function",
            "location": 74,
            "return": [],
            "arguments": {
                "action": [
                    "str"
                ]
            }
        },
        "list_objects": {
            "name": "list_objects",
            "location": 300,
            "return": [
                "list[]"
            ],
            "arguments": {
                "kind": [
                    "str",
                    "int",
                    "dict[, ]"
                ],
                "apiVersion": [
                    "str",
                    "int",
                    "dict[, ]"
                ],
                "namespace": [
                    "typing.Text"
                ],
                "all_namespaces": [
                    "bool"
                ],
                "field_selector": [
                    "None",
                    "str",
                    "int",
                    "list[int]",
                    "tuple[typing.Union[float,float]]"
                ]
            }
        },
        "_object_manipulation_function.method": {
            "name": "method",
            "location": 80,
            "return": [],
            "arguments": {
                "manifest": [
                    "None"
                ],
                "name": [
                    "None"
                ],
                "kind": [
                    "None"
                ],
                "apiVersion": [
                    "None"
                ],
                "namespace": [
                    "typing.Text"
                ],
                "patch": [
                    "None"
                ],
                "old_object": [],
                "template": [
                    "typing.Text"
                ],
                "defaults": [
                    "None"
                ],
                "saltenv": [
                    "typing.Text"
                ]
            }
        }
    },
    "metalk8s-master/salt/_modules/metalk8s_kubernetes_utils.py": {
        "__virtual__": {
            "name": "__virtual__",
            "location": 34,
            "return": [
                "tuple[typing.Union[bool,str]]",
                "typing.Text"
            ],
            "arguments": {}
        },
        "get_kubeconfig": {
            "name": "get_kubeconfig",
            "location": 43,
            "return": [
                "tuple[typing.Union[str,dict[, ],dict[str, str],dict[str, int],list[str],None]]"
            ],
            "arguments": {}
        },
        "get_version_info": {
            "name": "get_version_info",
            "location": 78,
            "return": [],
            "arguments": {}
        },
        "ping": {
            "name": "ping",
            "location": 105,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "read_and_render_yaml_file": {
            "name": "read_and_render_yaml_file",
            "location": 120,
            "return": [],
            "arguments": {
                "source": [
                    "str"
                ],
                "template": [
                    "str"
                ],
                "context": [
                    "None",
                    "str",
                    "int",
                    "typing.IO"
                ],
                "saltenv": [
                    "typing.Text"
                ]
            }
        }
    },
    "metalk8s-master/salt/_modules/metalk8s_network.py": {
        "__virtual__": {
            "name": "__virtual__",
            "location": 18,
            "return": [
                "typing.Text"
            ],
            "arguments": {}
        },
        "_pick_nth_service_ip": {
            "name": "_pick_nth_service_ip",
            "location": 22,
            "return": [
                "str"
            ],
            "arguments": {
                "n": [
                    "int",
                    "None"
                ]
            }
        },
        "get_kubernetes_service_ip": {
            "name": "get_kubernetes_service_ip",
            "location": 50,
            "return": [],
            "arguments": {}
        },
        "get_cluster_dns_ip": {
            "name": "get_cluster_dns_ip",
            "location": 63,
            "return": [],
            "arguments": {}
        }
    },
    "metalk8s-master/salt/_modules/metalk8s_package_manager_apt.py": {
        "__virtual__": {
            "name": "__virtual__",
            "location": 18,
            "return": [
                "typing.Text",
                "bool"
            ],
            "arguments": {}
        },
        "_list_dependents": {
            "name": "_list_dependents",
            "location": 24,
            "return": [],
            "arguments": {
                "name": [
                    "str",
                    "bool"
                ],
                "version": [
                    "str",
                    "None",
                    "bool"
                ],
                "fromrepo": [
                    "None",
                    "bool",
                    "str"
                ],
                "allowed_versions": [
                    "None",
                    "bool",
                    "str"
                ]
            }
        },
        "list_pkg_dependents": {
            "name": "list_pkg_dependents",
            "location": 61,
            "return": [
                "None",
                "dict[, ]"
            ],
            "arguments": {
                "name": [
                    "str",
                    "None",
                    "bool",
                    "Exception"
                ],
                "version": [
                    "None",
                    "str"
                ],
                "fromrepo": [
                    "None",
                    "bool",
                    "str"
                ],
                "pkgs_info": [
                    "dict[str, str]",
                    "dict[, ]"
                ],
                "strict_version": [
                    "bool"
                ]
            }
        }
    },
    "metalk8s-master/salt/_modules/metalk8s_package_manager_yum.py": {
        "__virtual__": {
            "name": "__virtual__",
            "location": 22,
            "return": [
                "typing.Text",
                "bool"
            ],
            "arguments": {}
        },
        "_list_dependents": {
            "name": "_list_dependents",
            "location": 28,
            "return": [
                "None",
                "dict[typing.Union[str,dict[int, str]], str]"
            ],
            "arguments": {
                "name": [
                    "str",
                    "dict[, ]",
                    "list[str]"
                ],
                "version": [
                    "str",
                    "dict[, ]",
                    "list[str]"
                ],
                "fromrepo": [
                    "None",
                    "str",
                    "dict[, ]",
                    "list[]",
                    "int"
                ],
                "allowed_versions": [
                    "None",
                    "str",
                    "list[str]",
                    "list[]",
                    "dict[, ]"
                ]
            }
        },
        "list_pkg_dependents": {
            "name": "list_pkg_dependents",
            "location": 75,
            "return": [
                "None",
                "dict[typing.Union[str,bool,typing.Callable[, ],Exception,None], typing.Union[None,str]]"
            ],
            "arguments": {
                "name": [
                    "str",
                    "bool",
                    "typing.Callable[, ]",
                    "Exception",
                    "None"
                ],
                "version": [
                    "None",
                    "str"
                ],
                "fromrepo": [
                    "None",
                    "str",
                    "bool",
                    "typing.Pattern",
                    "typing.Callable[Any,Any, None]",
                    "list[]"
                ],
                "pkgs_info": [
                    "dict[str, str]"
                ]
            }
        },
        "_disable_yum_loggers": {
            "name": "_disable_yum_loggers",
            "location": 158,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "_get_yum_base": {
            "name": "_get_yum_base",
            "location": 173,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {}
        },
        "check_pkg_availability": {
            "name": "check_pkg_availability",
            "location": 182,
            "return": [
                "None"
            ],
            "arguments": {
                "pkgs_info": [
                    "dict[, ]",
                    "dict[str, typing.Any]"
                ]
            }
        }
    },
    "metalk8s-master/salt/_modules/metalk8s_solutions.py": {
        "__virtual__": {
            "name": "__virtual__",
            "location": 27,
            "return": [],
            "arguments": {}
        },
        "list_deployed": {
            "name": "list_deployed",
            "location": 34,
            "return": [],
            "arguments": {
                "context": [],
                "kubeconfig": []
            }
        },
        "list_configured": {
            "name": "list_configured",
            "location": 54,
            "return": [],
            "arguments": {}
        },
        "register_solution_version": {
            "name": "register_solution_version",
            "location": 66,
            "return": [],
            "arguments": {
                "name": [],
                "version": [],
                "archive_path": [],
                "deployed": [],
                "context": [],
                "kubeconfig": []
            }
        },
        "unregister_solution_version": {
            "name": "unregister_solution_version",
            "location": 127,
            "return": [],
            "arguments": {
                "name": [],
                "version": [],
                "context": [],
                "kubeconfig": []
            }
        }
    },
    "metalk8s-master/salt/_modules/metalk8s_volumes.py": {
        "__virtual__": {
            "name": "__virtual__",
            "location": 25,
            "return": [
                "typing.Text"
            ],
            "arguments": {}
        },
        "exists": {
            "name": "exists",
            "location": 29,
            "return": [],
            "arguments": {
                "name": []
            }
        },
        "create": {
            "name": "create",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "name": []
            }
        },
        "is_provisioned": {
            "name": "is_provisioned",
            "location": 62,
            "return": [],
            "arguments": {
                "name": []
            }
        },
        "provision": {
            "name": "provision",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "name": []
            }
        },
        "is_formatted": {
            "name": "is_formatted",
            "location": 95,
            "return": [],
            "arguments": {
                "name": []
            }
        },
        "format": {
            "name": "format",
            "location": 113,
            "return": [
                "None"
            ],
            "arguments": {
                "name": []
            }
        },
        "is_cleaned_up": {
            "name": "is_cleaned_up",
            "location": 128,
            "return": [],
            "arguments": {
                "name": []
            }
        },
        "clean_up": {
            "name": "clean_up",
            "location": 146,
            "return": [
                "None"
            ],
            "arguments": {
                "name": []
            }
        },
        "_get_volume": {
            "name": "_get_volume",
            "location": 363,
            "return": [
                "RawBlockDevice",
                "SparseLoopDevice"
            ],
            "arguments": {
                "name": []
            }
        },
        "_run_cmd": {
            "name": "_run_cmd",
            "location": 376,
            "return": [],
            "arguments": {
                "cmd": []
            }
        },
        "_quantity_to_bytes": {
            "name": "_quantity_to_bytes",
            "location": 395,
            "return": [],
            "arguments": {
                "quantity": []
            }
        },
        "_open_fd": {
            "name": "_open_fd",
            "location": 434,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {}
        },
        "_get_from_blkid": {
            "name": "_get_from_blkid",
            "location": 454,
            "return": [],
            "arguments": {
                "path": []
            }
        },
        "_mkfs": {
            "name": "_mkfs",
            "location": 464,
            "return": [],
            "arguments": {
                "path": [],
                "fs_type": [],
                "uuid": [],
                "force": [
                    "bool"
                ],
                "options": [
                    "None"
                ]
            }
        },
        "_mkfs_ext4": {
            "name": "_mkfs_ext4",
            "location": 484,
            "return": [
                "list[typing.Text]"
            ],
            "arguments": {
                "path": [],
                "uuid": [],
                "force": [
                    "bool"
                ],
                "options": [
                    "None"
                ]
            }
        },
        "_mkfs_xfs": {
            "name": "_mkfs_xfs",
            "location": 494,
            "return": [
                "list[typing.Text]"
            ],
            "arguments": {
                "path": [],
                "uuid": [],
                "force": [
                    "bool"
                ],
                "options": [
                    "None"
                ]
            }
        },
        "Volume.__init__": {
            "name": "__init__",
            "location": 170,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "volume": []
            }
        },
        "Volume.exists": {
            "name": "exists",
            "location": 174,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Volume.create": {
            "name": "create",
            "location": 179,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Volume.is_provisioned": {
            "name": "is_provisioned",
            "location": 184,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Volume.provision": {
            "name": "provision",
            "location": 189,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Volume.is_cleaned_up": {
            "name": "is_cleaned_up",
            "location": 194,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Volume.clean_up": {
            "name": "clean_up",
            "location": 199,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Volume.path": {
            "name": "path",
            "location": 204,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Volume.is_formatted": {
            "name": "is_formatted",
            "location": 209,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Volume.format": {
            "name": "format",
            "location": 214,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "force": [
                    "bool"
                ]
            }
        },
        "Volume.get": {
            "name": "get",
            "location": 242,
            "return": [],
            "arguments": {
                "self": [],
                "path": []
            }
        },
        "SparseLoopDevice.path": {
            "name": "path",
            "location": 253,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "SparseLoopDevice.size": {
            "name": "size",
            "location": 259,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SparseLoopDevice.exists": {
            "name": "exists",
            "location": 263,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "SparseLoopDevice.create": {
            "name": "create",
            "location": 269,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SparseLoopDevice.is_provisioned": {
            "name": "is_provisioned",
            "location": 285,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SparseLoopDevice.provision": {
            "name": "provision",
            "location": 293,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SparseLoopDevice.format": {
            "name": "format",
            "location": 299,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "force": [
                    "bool"
                ]
            }
        },
        "SparseLoopDevice.is_cleaned_up": {
            "name": "is_cleaned_up",
            "location": 304,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "SparseLoopDevice.clean_up": {
            "name": "clean_up",
            "location": 307,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RawBlockDevice.exists": {
            "name": "exists",
            "location": 326,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RawBlockDevice.create": {
            "name": "create",
            "location": 330,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RawBlockDevice.is_provisioned": {
            "name": "is_provisioned",
            "location": 337,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "RawBlockDevice.provision": {
            "name": "provision",
            "location": 340,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RawBlockDevice.path": {
            "name": "path",
            "location": 344,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RawBlockDevice.format": {
            "name": "format",
            "location": 347,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "force": [
                    "bool"
                ]
            }
        },
        "RawBlockDevice.is_cleaned_up": {
            "name": "is_cleaned_up",
            "location": 352,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "RawBlockDevice.clean_up": {
            "name": "clean_up",
            "location": 355,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "metalk8s-master/salt/_pillar/metalk8s.py": {
        "_load_config": {
            "name": "_load_config",
            "location": 14,
            "return": [
                "str",
                "dict[, ]"
            ],
            "arguments": {
                "path": []
            }
        },
        "_load_networks": {
            "name": "_load_networks",
            "location": 37,
            "return": [
                "dict[typing.Text, ]"
            ],
            "arguments": {
                "config_data": [
                    "str",
                    "list[list[str]]",
                    "list[str]"
                ]
            }
        },
        "_load_ca": {
            "name": "_load_ca",
            "location": 58,
            "return": [
                "dict[typing.Text, str]"
            ],
            "arguments": {
                "config_data": [
                    "str",
                    "list[list[str]]",
                    "list[str]"
                ]
            }
        },
        "_load_iso_path": {
            "name": "_load_iso_path",
            "location": 73,
            "return": [
                "tuple[typing.Union[typing.Literal,typing.Literal,typing.Literal,typing.Literal,typing.Literal,typing.Literal,typing.Literal,typing.Literal,typing.Literal]]",
                "str",
                "list[]",
                "set[]",
                "typing.Pattern",
                "list[str]"
            ],
            "arguments": {
                "config_data": [
                    "bytes",
                    "list[dict[str, typing.Any]]"
                ]
            }
        },
        "ext_pillar": {
            "name": "ext_pillar",
            "location": 92,
            "return": [
                "dict[typing.Text, str]"
            ],
            "arguments": {
                "minion_id": [
                    "str",
                    "bool"
                ],
                "pillar": [
                    "str",
                    "bool"
                ],
                "bootstrap_config": [
                    "str",
                    "int",
                    "typing.Type",
                    "typing.Callable[, ]",
                    "tuple[]"
                ]
            }
        }
    },
    "metalk8s-master/salt/_pillar/metalk8s_endpoints.py": {
        "__virtual__": {
            "name": "__virtual__",
            "location": 12,
            "return": [
                "tuple[typing.Union[bool,typing.Text]]",
                "typing.Text"
            ],
            "arguments": {}
        },
        "service_endpoints": {
            "name": "service_endpoints",
            "location": 19,
            "return": [
                "dict[typing.Text, dict[typing.Text, typing.Text]]"
            ],
            "arguments": {
                "service": [
                    "str",
                    "typing.Any",
                    "None",
                    "typing.Type",
                    "bool"
                ],
                "namespace": [
                    "str",
                    "typing.Any",
                    "None",
                    "int"
                ],
                "kubeconfig": [
                    "str",
                    "list[str]",
                    "int",
                    "None"
                ]
            }
        },
        "ext_pillar": {
            "name": "ext_pillar",
            "location": 59,
            "return": [],
            "arguments": {
                "minion_id": [
                    "str",
                    "int",
                    "list[tuple[typing.Union[int,str]]]"
                ],
                "pillar": [
                    "str",
                    "int",
                    "list[tuple[typing.Union[int,str]]]"
                ],
                "kubeconfig": [
                    "str",
                    "int",
                    "list[int]"
                ]
            }
        }
    },
    "metalk8s-master/salt/_pillar/metalk8s_etcd.py": {
        "__virtual__": {
            "name": "__virtual__",
            "location": 8,
            "return": [
                "typing.Text"
            ],
            "arguments": {}
        },
        "_load_members": {
            "name": "_load_members",
            "location": 12,
            "return": [
                "dict[typing.Text, typing.Union[int,dict[int, int],list[]]]"
            ],
            "arguments": {
                "pillar": [
                    "int",
                    "list[int]"
                ]
            }
        },
        "ext_pillar": {
            "name": "ext_pillar",
            "location": 32,
            "return": [
                "dict[typing.Text, dict[typing.Text, ]]"
            ],
            "arguments": {
                "minion_id": [
                    "str",
                    "int",
                    "list[tuple[typing.Union[int,str]]]"
                ],
                "pillar": [
                    "int",
                    "set[str]"
                ]
            }
        }
    },
    "metalk8s-master/salt/_pillar/metalk8s_nodes.py": {
        "__virtual__": {
            "name": "__virtual__",
            "location": 24,
            "return": [
                "typing.Text",
                "tuple[typing.Union[bool,typing.Text]]"
            ],
            "arguments": {}
        },
        "node_info": {
            "name": "node_info",
            "location": 31,
            "return": [
                "dict[typing.Text, typing.Union[None,list[typing.Text]]]"
            ],
            "arguments": {
                "node": [],
                "ca_minion": [
                    "typing.Mapping"
                ]
            }
        },
        "get_cluster_version": {
            "name": "get_cluster_version",
            "location": 56,
            "return": [],
            "arguments": {
                "api_client": [
                    "bool",
                    "float"
                ]
            }
        },
        "iso_timestamp_converter": {
            "name": "iso_timestamp_converter",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "timestamp": [
                    "str",
                    "int",
                    "float"
                ]
            }
        },
        "get_storage_classes": {
            "name": "get_storage_classes",
            "location": 80,
            "return": [
                "dict[, ]"
            ],
            "arguments": {
                "api_client": [
                    "bool"
                ]
            }
        },
        "list_volumes": {
            "name": "list_volumes",
            "location": 98,
            "return": [
                "dict[, ]"
            ],
            "arguments": {
                "api_client": [
                    "bool",
                    "list[]"
                ],
                "minion_id": [
                    "str"
                ]
            }
        },
        "ext_pillar": {
            "name": "ext_pillar",
            "location": 144,
            "return": [
                "dict[typing.Text, dict[typing.Text, str]]"
            ],
            "arguments": {
                "minion_id": [
                    "str"
                ],
                "pillar": [
                    "str"
                ],
                "kubeconfig": [
                    "str",
                    "int",
                    "list[int]"
                ]
            }
        }
    },
    "metalk8s-master/salt/_pillar/metalk8s_private.py": {
        "__virtual__": {
            "name": "__virtual__",
            "location": 13,
            "return": [
                "typing.Text"
            ],
            "arguments": {}
        },
        "_read_private_key": {
            "name": "_read_private_key",
            "location": 17,
            "return": [
                "dict[typing.Text, list[str]]",
                "dict[typing.Union[str,list[str]], ]"
            ],
            "arguments": {
                "key_name": [
                    "str",
                    "list[str]"
                ],
                "key_path": [
                    "str"
                ]
            }
        },
        "_read_sa_private_key": {
            "name": "_read_sa_private_key",
            "location": 31,
            "return": [],
            "arguments": {}
        },
        "_read_apiserver_key": {
            "name": "_read_apiserver_key",
            "location": 40,
            "return": [],
            "arguments": {}
        },
        "ext_pillar": {
            "name": "ext_pillar",
            "location": 48,
            "return": [
                "dict[, ]",
                "dict[typing.Text, dict[typing.Text, typing.Union[None,dict[, ]]]]"
            ],
            "arguments": {
                "minion_id": [
                    "str",
                    "int",
                    "None",
                    "float"
                ],
                "pillar": [
                    "str",
                    "int",
                    "dict[str, typing.Any]",
                    "list[dict[str, typing.Any]]"
                ]
            }
        }
    },
    "metalk8s-master/salt/_pillar/metalk8s_solutions.py": {
        "__virtual__": {
            "name": "__virtual__",
            "location": 9,
            "return": [
                "typing.Text"
            ],
            "arguments": {}
        },
        "_load_solutions": {
            "name": "_load_solutions",
            "location": 13,
            "return": [
                "dict[typing.Text, typing.Union[list[],dict[, ]]]"
            ],
            "arguments": {}
        },
        "ext_pillar": {
            "name": "ext_pillar",
            "location": 49,
            "return": [
                "dict[typing.Text, dict[typing.Text, ]]"
            ],
            "arguments": {
                "minion_id": [
                    "str",
                    "int",
                    "list[tuple[typing.Union[int,str]]]"
                ],
                "pillar": [
                    "str",
                    "int",
                    "list[tuple[typing.Union[int,str]]]"
                ]
            }
        }
    },
    "metalk8s-master/salt/_renderers/metalk8s_kubernetes.py": {
        "__virtual__": {
            "name": "__virtual__",
            "location": 33,
            "return": [
                "typing.Text"
            ],
            "arguments": {}
        },
        "_step_name": {
            "name": "_step_name",
            "location": 37,
            "return": [
                "str"
            ],
            "arguments": {
                "manifest": [
                    "str"
                ],
                "absent": [
                    "bool"
                ]
            }
        },
        "_step": {
            "name": "_step",
            "location": 57,
            "return": [
                "tuple[typing.Union[str,set[],list[str],set[str],tuple[typing.Union[str,str,str,str,str,str,str,str,str,str,str,str,str,str,str]],dict[str, list[typing.Union[dict[typing.Text, typing.Union[str,set[],list[str],set[str],tuple[typing.Union[str,str,str,str,str,str,str,str,str,str,str,str,str,str,str]]]],dict[typing.Text, typing.Union[None,str,typing.Mapping]],dict[typing.Text, typing.Union[typing.Callable[, ],typing.Mapping,str]]]]]]]"
            ],
            "arguments": {
                "manifest": [
                    "typing.Callable[, ]",
                    "typing.Mapping",
                    "str"
                ],
                "kubeconfig": [
                    "None",
                    "str",
                    "typing.Mapping"
                ],
                "context": [
                    "None",
                    "str",
                    "typing.Mapping"
                ],
                "absent": [
                    "bool"
                ]
            }
        },
        "render": {
            "name": "render",
            "location": 73,
            "return": [
                "OrderedDict"
            ],
            "arguments": {
                "source": [],
                "saltenv": [
                    "typing.Text"
                ],
                "sls": [
                    "typing.Text"
                ],
                "argline": [
                    "typing.Text"
                ]
            }
        }
    },
    "metalk8s-master/salt/_roster/kubernetes_nodes.py": {
        "__virtual__": {
            "name": "__virtual__",
            "location": 18,
            "return": [
                "bool",
                "tuple[typing.Union[bool,typing.Text]]"
            ],
            "arguments": {}
        },
        "targets": {
            "name": "targets",
            "location": 27,
            "return": [
                "dict[, ]",
                "dict[, dict[typing.Text, typing.Union[int,dict[typing.Text, list[typing.Text]]]]]"
            ],
            "arguments": {
                "tgt": [
                    "dict[, ]"
                ],
                "tgt_type": [
                    "typing.Text"
                ]
            }
        }
    },
    "metalk8s-master/salt/_runners/metalk8s_saltutil.py": {
        "sync_auth": {
            "name": "sync_auth",
            "location": 11,
            "return": [],
            "arguments": {
                "saltenv": [
                    "typing.Text"
                ],
                "extmod_whitelist": [
                    "None",
                    "bytes",
                    "str"
                ],
                "extmod_blacklist": [
                    "None",
                    "bytes",
                    "str"
                ]
            }
        },
        "wait_minions": {
            "name": "wait_minions",
            "location": 21,
            "return": [
                "dict[typing.Text, typing.Union[bool,str]]"
            ],
            "arguments": {
                "tgt": [
                    "typing.Text"
                ],
                "retry": [
                    "int"
                ]
            }
        },
        "orchestrate_show_sls": {
            "name": "orchestrate_show_sls",
            "location": 119,
            "return": [
                "dict[, typing.Union[int,str]]"
            ],
            "arguments": {
                "mods": [
                    "bool",
                    "dict[str, typing.Any]",
                    "typing.Callable[, ]",
                    "str"
                ],
                "saltenv": [
                    "typing.Text"
                ],
                "test": [
                    "None",
                    "bool",
                    "dict[str, typing.Any]",
                    "typing.Callable[, ]",
                    "str"
                ],
                "queue": [
                    "bool"
                ],
                "pillar": [
                    "None",
                    "float",
                    "list[str]",
                    "typing.AnyStr"
                ],
                "pillarenv": [
                    "None",
                    "bool",
                    "dict[str, typing.Any]",
                    "typing.Callable[, ]",
                    "str"
                ],
                "pillar_enc": [
                    "None",
                    "bool",
                    "dict[str, typing.Any]",
                    "typing.Callable[, ]",
                    "str"
                ]
            }
        },
        "wait_minions.condition_reached": {
            "name": "condition_reached",
            "location": 27,
            "return": [
                "bool"
            ],
            "arguments": {
                "minions": [],
                "attempts": []
            }
        }
    },
    "metalk8s-master/salt/_states/containerd.py": {
        "__virtual__": {
            "name": "__virtual__",
            "location": 14,
            "return": [
                "tuple[typing.Union[bool,typing.Text]]",
                "typing.Text"
            ],
            "arguments": {}
        },
        "image_managed": {
            "name": "image_managed",
            "location": 23,
            "return": [],
            "arguments": {
                "name": [
                    "str",
                    "None",
                    "bool"
                ],
                "archive_path": [
                    "None",
                    "str",
                    "typing.Callable[, ]"
                ]
            }
        }
    },
    "metalk8s-master/salt/_states/kubeconfig.py": {
        "__virtual__": {
            "name": "__virtual__",
            "location": 12,
            "return": [
                "typing.Text"
            ],
            "arguments": {}
        },
        "_validateKubeConfig": {
            "name": "_validateKubeConfig",
            "location": 16,
            "return": [
                "bool"
            ],
            "arguments": {
                "filename": [
                    "str"
                ],
                "expected_ca_data": [
                    "bool",
                    "dict[, ]",
                    "dict[str, bool]"
                ],
                "expected_api_server": [
                    "str",
                    "bool",
                    "typing.Any",
                    "None",
                    "typing.TextIO"
                ],
                "expected_cn": [
                    "int",
                    "str",
                    "float",
                    "dict[, ]"
                ]
            }
        },
        "managed": {
            "name": "managed",
            "location": 107,
            "return": [
                "dict[typing.Text, typing.Union[dict[, ],typing.Text,bool]]"
            ],
            "arguments": {
                "name": [
                    "bool",
                    "str"
                ],
                "ca_server": [
                    "str",
                    "bool"
                ],
                "signing_policy": [
                    "bool",
                    "dict[, ]",
                    "dict['cirq.Qid', int]",
                    "None",
                    "str",
                    "bytes"
                ],
                "client_cert_info": [
                    "dict[str, str]"
                ],
                "apiserver": [
                    "str",
                    "bool"
                ],
                "cluster": [
                    "str",
                    "int",
                    "None",
                    "list[str]"
                ]
            }
        }
    },
    "metalk8s-master/salt/_states/metalk8s.py": {
        "__virtual__": {
            "name": "__virtual__",
            "location": 10,
            "return": [
                "typing.Text"
            ],
            "arguments": {}
        },
        "static_pod_managed": {
            "name": "static_pod_managed",
            "location": 14,
            "return": [],
            "arguments": {
                "name": [
                    "str",
                    "typing.Callable[, ]",
                    "None",
                    "typing.Sequence[str]"
                ],
                "source": [
                    "str",
                    "typing.Callable[, ]",
                    "None",
                    "typing.Sequence[str]"
                ],
                "config_files": [],
                "config_files_opt": [
                    "None",
                    "str",
                    "bool"
                ],
                "context": [
                    "None",
                    "str",
                    "typing.Callable[, ]",
                    "typing.Sequence[str]"
                ]
            }
        },
        "module_run": {
            "name": "module_run",
            "location": 83,
            "return": [
                "list[str]"
            ],
            "arguments": {
                "name": [
                    "str",
                    "int",
                    "bytes",
                    "typing.Iterable[str]",
                    "None"
                ],
                "attemps": [
                    "int"
                ],
                "sleep_time": [
                    "int"
                ]
            }
        }
    },
    "metalk8s-master/salt/_states/metalk8s_cordon.py": {
        "_node_set_unschedulable": {
            "name": "_node_set_unschedulable",
            "location": 4,
            "return": [
                "dict[typing.Text, typing.Union[str,None,dict[, ],bool]]",
                "dict[typing.Text, typing.Union[dict[, ],bool,typing.Text,None]]",
                "dict[typing.Text, typing.Union[str,None,bool,dict[typing.Text, typing.Union[dict[typing.Text, bool],dict[typing.Text, str]]]]]"
            ],
            "arguments": {
                "name": [
                    "str",
                    "None"
                ],
                "value": [
                    "str"
                ]
            }
        },
        "node_cordoned": {
            "name": "node_cordoned",
            "location": 50,
            "return": [],
            "arguments": {
                "name": [
                    "str",
                    "None",
                    "list[str]"
                ]
            }
        },
        "node_uncordoned": {
            "name": "node_uncordoned",
            "location": 60,
            "return": [],
            "arguments": {
                "name": [
                    "str",
                    "None",
                    "bool",
                    "typing.Sequence[typing.Any]"
                ]
            }
        }
    },
    "metalk8s-master/salt/_states/metalk8s_drain.py": {
        "node_drained": {
            "name": "node_drained",
            "location": 9,
            "return": [
                "dict[typing.Text, typing.Union[dict[, ],bool,typing.Text,None]]",
                "dict[str, str]",
                "dict[str, int]",
                "dict[str, typing.Union[int,str]]",
                "dict[str, float]",
                "list[int]",
                "dict[str, typing.Union[int,None]]",
                "str",
                "dict[str, dict[str, str]]"
            ],
            "arguments": {
                "name": [
                    "str"
                ]
            }
        }
    },
    "metalk8s-master/salt/_states/metalk8s_etcd.py": {
        "__virtual__": {
            "name": "__virtual__",
            "location": 10,
            "return": [
                "tuple[typing.Union[bool,typing.Text]]",
                "typing.Text"
            ],
            "arguments": {}
        },
        "member_present": {
            "name": "member_present",
            "location": 17,
            "return": [
                "dict[typing.Text, typing.Union[str,list[str],None,dict[, ],bool]]",
                "dict[typing.Text, typing.Union[str,list[str],None,bool,dict[typing.Text, str]]]"
            ],
            "arguments": {
                "name": [
                    "str",
                    "list[str]",
                    "None"
                ],
                "peer_urls": [
                    "str",
                    "dict[str, str]"
                ]
            }
        }
    },
    "metalk8s-master/salt/_states/metalk8s_kubernetes.py": {
        "__virtual__": {
            "name": "__virtual__",
            "location": 15,
            "return": [
                "tuple[typing.Union[bool,typing.Text]]",
                "typing.Text"
            ],
            "arguments": {}
        },
        "object_absent": {
            "name": "object_absent",
            "location": 21,
            "return": [
                "dict[typing.Text, typing.Union[str,dict[str, typing.Any],None,dict[str, str],dict[, ],bool]]"
            ],
            "arguments": {
                "name": [
                    "str",
                    "dict[str, typing.Any]",
                    "None",
                    "dict[str, str]"
                ],
                "manifest": [
                    "None",
                    "str",
                    "dict[str, str]",
                    "int"
                ],
                "wait": [
                    "str",
                    "list[str]"
                ]
            }
        },
        "object_present": {
            "name": "object_present",
            "location": 105,
            "return": [
                "dict[typing.Text, typing.Union[dict[, ],bool,typing.Text,None]]",
                "dict[typing.Text, typing.Union[bool,typing.Text,None,dict[typing.Text, typing.Text]]]"
            ],
            "arguments": {
                "name": [
                    "str",
                    "bool"
                ],
                "manifest": [
                    "None",
                    "str",
                    "dict[str, str]",
                    "int"
                ]
            }
        },
        "object_updated": {
            "name": "object_updated",
            "location": 156,
            "return": [
                "dict[typing.Text, typing.Union[str,None,dict[, ],bool]]",
                "dict[typing.Text, typing.Union[dict[, ],bool,typing.Text,None]]"
            ],
            "arguments": {
                "name": [
                    "str",
                    "None"
                ],
                "manifest": [
                    "None",
                    "str",
                    "typing.Callable[, ]",
                    "int"
                ]
            }
        }
    },
    "metalk8s-master/salt/_states/metalk8s_package_manager.py": {
        "__virtual__": {
            "name": "__virtual__",
            "location": 14,
            "return": [
                "typing.Text",
                "tuple[typing.Union[bool,typing.Text]]"
            ],
            "arguments": {}
        },
        "installed": {
            "name": "installed",
            "location": 20,
            "return": [
                "dict[typing.Text, typing.Union[str,bool,None,dict[, ]]]"
            ],
            "arguments": {
                "name": [
                    "str",
                    "bool",
                    "None"
                ],
                "version": [
                    "None",
                    "str",
                    "typing.Sequence[typing.Any]",
                    "frozenset",
                    "float"
                ],
                "fromrepo": [
                    "None",
                    "str",
                    "bool"
                ],
                "pkgs_info": [
                    "None",
                    "list[str]",
                    "bool",
                    "dict[str, list[str]]"
                ]
            }
        }
    },
    "metalk8s-master/salt/_states/metalk8s_volumes.py": {
        "__virtual__": {
            "name": "__virtual__",
            "location": 14,
            "return": [
                "typing.Text"
            ],
            "arguments": {}
        },
        "present": {
            "name": "present",
            "location": 18,
            "return": [],
            "arguments": {
                "name": [
                    "str",
                    "typing.Match",
                    "int"
                ]
            }
        },
        "provisioned": {
            "name": "provisioned",
            "location": 54,
            "return": [],
            "arguments": {
                "name": [
                    "str",
                    "typing.Match",
                    "int"
                ]
            }
        },
        "formatted": {
            "name": "formatted",
            "location": 91,
            "return": [],
            "arguments": {
                "name": [
                    "str",
                    "typing.Match",
                    "int"
                ]
            }
        },
        "removed": {
            "name": "removed",
            "location": 125,
            "return": [],
            "arguments": {
                "name": [
                    "str",
                    "typing.Match",
                    "int"
                ]
            }
        }
    },
    "metalk8s-master/salt/_utils/kubernetes_utils.py": {
        "__virtual__": {
            "name": "__virtual__",
            "location": 45,
            "return": [],
            "arguments": {}
        },
        "get_kind_info": {
            "name": "get_kind_info",
            "location": 629,
            "return": [],
            "arguments": {
                "manifest": []
            }
        },
        "convert_manifest_to_object": {
            "name": "convert_manifest_to_object",
            "location": 654,
            "return": [],
            "arguments": {
                "manifest": [],
                "force_custom_object": []
            }
        },
        "_build_standard_object": {
            "name": "_build_standard_object",
            "location": 675,
            "return": [],
            "arguments": {
                "model": [],
                "manifest": []
            }
        },
        "_cast_value": {
            "name": "_cast_value",
            "location": 721,
            "return": [],
            "arguments": {
                "value": [],
                "type_string": []
            }
        },
        "_type_error": {
            "name": "_type_error",
            "location": 808,
            "return": [],
            "arguments": {
                "value": [],
                "expected": []
            }
        },
        "validate_manifest": {
            "name": "validate_manifest",
            "location": 816,
            "return": [],
            "arguments": {
                "manifest": []
            }
        },
        "_cast_dict_keys": {
            "name": "_cast_dict_keys",
            "location": 841,
            "return": [],
            "arguments": {
                "data": [],
                "key_cast": []
            }
        },
        "_convert_attribute_name": {
            "name": "_convert_attribute_name",
            "location": 868,
            "return": [],
            "arguments": {
                "key": []
            }
        },
        "camel_to_snake": {
            "name": "camel_to_snake",
            "location": 905,
            "return": [],
            "arguments": {
                "source": []
            }
        },
        "set_conditions": {
            "name": "set_conditions",
            "location": 20,
            "return": [],
            "arguments": {
                "self": [],
                "conditions": []
            }
        },
        "ObjectScope.__init__": {
            "name": "__init__",
            "location": 59,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "ObjectScope.__eq__": {
            "name": "__eq__",
            "location": 66,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "ObjectScope.__repr__": {
            "name": "__repr__",
            "location": 73,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ApiClient.__init__": {
            "name": "__init__",
            "location": 87,
            "return": [],
            "arguments": {
                "self": [],
                "api_cls": [],
                "name": [],
                "method_names": [],
                "all_namespaces_name": []
            }
        },
        "ApiClient.list": {
            "name": "list",
            "location": 131,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ApiClient.configure": {
            "name": "configure",
            "location": 142,
            "return": [],
            "arguments": {
                "self": [],
                "config_file": [],
                "context": [],
                "persist_config": []
            }
        },
        "ApiClient.api": {
            "name": "api",
            "location": 148,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ApiClient._method_name": {
            "name": "_method_name",
            "location": 156,
            "return": [],
            "arguments": {
                "self": [],
                "verb": []
            }
        },
        "ApiClient._method": {
            "name": "_method",
            "location": 159,
            "return": [],
            "arguments": {
                "self": [],
                "method": []
            }
        },
        "KindInfo.__init__": {
            "name": "__init__",
            "location": 173,
            "return": [],
            "arguments": {
                "self": [],
                "model": [],
                "api_cls": [],
                "name": [],
                "method_names": []
            }
        },
        "CustomApiClient.__init__": {
            "name": "__init__",
            "location": 414,
            "return": [],
            "arguments": {
                "self": [],
                "group": [],
                "version": [],
                "kind": [],
                "plural": [],
                "scope": []
            }
        },
        "CustomApiClient._method": {
            "name": "_method",
            "location": 432,
            "return": [],
            "arguments": {
                "self": [],
                "verb": []
            }
        },
        "CRKindInfo.__init__": {
            "name": "__init__",
            "location": 482,
            "return": [],
            "arguments": {
                "self": [],
                "api_version": [],
                "kind": [],
                "scope": [],
                "plural": []
            }
        },
        "CRKindInfo.key": {
            "name": "key",
            "location": 507,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_DictWrapper.__init__": {
            "name": "__init__",
            "location": 550,
            "return": [],
            "arguments": {
                "self": [],
                "fields": []
            }
        },
        "_DictWrapper.from_value": {
            "name": "from_value",
            "location": 554,
            "return": [],
            "arguments": {
                "cls": [],
                "value": []
            }
        },
        "_DictWrapper.to_dict": {
            "name": "to_dict",
            "location": 561,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_DictWrapper.__repr__": {
            "name": "__repr__",
            "location": 564,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_DictWrapper.__getattribute__": {
            "name": "__getattribute__",
            "location": 567,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "_DictWrapper.__setattr__": {
            "name": "__setattr__",
            "location": 580,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "value": []
            }
        },
        "CustomObject.__init__": {
            "name": "__init__",
            "location": 597,
            "return": [],
            "arguments": {
                "self": [],
                "manifest": []
            }
        },
        "CustomObject.to_dict": {
            "name": "to_dict",
            "location": 600,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CustomObject.to_str": {
            "name": "to_str",
            "location": 603,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CustomObject.__repr__": {
            "name": "__repr__",
            "location": 606,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CustomObject.__eq__": {
            "name": "__eq__",
            "location": 609,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "CustomObject.__getattribute__": {
            "name": "__getattribute__",
            "location": 615,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "CustomObject.__setattr__": {
            "name": "__setattr__",
            "location": 621,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "value": []
            }
        },
        "ApiClient.list._list": {
            "name": "_list",
            "location": 132,
            "return": [],
            "arguments": {
                "all_namespaces": []
            }
        },
        "CustomApiClient._method.method": {
            "name": "method",
            "location": 441,
            "return": [],
            "arguments": {}
        }
    },
    "metalk8s-master/salt/_utils/pillar_utils.py": {
        "assert_equals": {
            "name": "assert_equals",
            "location": 8,
            "return": [
                "list[str]"
            ],
            "arguments": {
                "source_dict": [
                    "dict[str, str]"
                ],
                "expected_dict": [
                    "dict[str, str]"
                ]
            }
        },
        "assert_keys": {
            "name": "assert_keys",
            "location": 32,
            "return": [
                "list[str]"
            ],
            "arguments": {
                "source_dict": [
                    "str",
                    "dict[, ]"
                ],
                "keys": [
                    "str",
                    "list[str]"
                ]
            }
        },
        "promote_errors": {
            "name": "promote_errors",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "source": [
                    "list[dict[, ]]",
                    "bytes",
                    "list[list[]]",
                    "list[str]"
                ],
                "key": []
            }
        },
        "errors_to_dict": {
            "name": "errors_to_dict",
            "location": 69,
            "return": [
                "dict[typing.Text, typing.Union[Exception,bool,None]]"
            ],
            "arguments": {
                "error_list": [
                    "Exception",
                    "bool",
                    "None"
                ]
            }
        }
    },
    "metalk8s-master/salt/_utils/volume_utils.py": {
        "__virtual__": {
            "name": "__virtual__",
            "location": 14,
            "return": [
                "typing.Text"
            ],
            "arguments": {}
        },
        "_check_null_pointer": {
            "name": "_check_null_pointer",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "result": [],
                "func": [],
                "arguments": []
            }
        },
        "_check_error_code": {
            "name": "_check_error_code",
            "location": 65,
            "return": [],
            "arguments": {
                "result": [],
                "func": [],
                "arguments": []
            }
        },
        "_get_flags": {
            "name": "_get_flags",
            "location": 272,
            "return": [],
            "arguments": {
                "klass": [],
                "kind": [],
                "default": []
            }
        },
        "get_blkid_probe": {
            "name": "get_blkid_probe",
            "location": 329,
            "return": [
                "typing.Generator[_Probe]"
            ],
            "arguments": {
                "filepath": [],
                "use_superblocks": [
                    "bool"
                ],
                "superblocks_flags": [],
                "use_partitions": [
                    "bool"
                ],
                "partitions_flags": [
                    "int"
                ]
            }
        },
        "get_superblock_flags": {
            "name": "get_superblock_flags",
            "location": 345,
            "return": [],
            "arguments": {}
        },
        "get_partition_flags": {
            "name": "get_partition_flags",
            "location": 351,
            "return": [],
            "arguments": {}
        },
        "BlkidError.__init__": {
            "name": "__init__",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "funcname": [],
                "arguments": []
            }
        },
        "_Probe.__init__": {
            "name": "__init__",
            "location": 287,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "probe": []
            }
        },
        "_Probe.configure": {
            "name": "configure",
            "location": 290,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "use_superblocks": [],
                "superblocks_flags": [],
                "use_partitions": [],
                "partitions_flags": []
            }
        },
        "_Probe.probe": {
            "name": "probe",
            "location": 308,
            "return": [
                "DeviceInfo"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "metalk8s-master/tests/conftest.py": {
        "pytest_addoption": {
            "name": "pytest_addoption",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "parser": [
                    "str"
                ]
            }
        },
        "version": {
            "name": "version",
            "location": 27,
            "return": [],
            "arguments": {
                "request": [],
                "host": []
            }
        },
        "hostname": {
            "name": "hostname",
            "location": 36,
            "return": [],
            "arguments": {
                "host": []
            }
        },
        "kubeconfig_data": {
            "name": "kubeconfig_data",
            "location": 46,
            "return": [],
            "arguments": {
                "request": [
                    "str"
                ],
                "host": []
            }
        },
        "kubeconfig": {
            "name": "kubeconfig",
            "location": 59,
            "return": [
                "str"
            ],
            "arguments": {
                "kubeconfig_data": [
                    "str",
                    "None",
                    "typing.TextIO"
                ],
                "tmp_path": []
            }
        },
        "k8s_apiclient": {
            "name": "k8s_apiclient",
            "location": 66,
            "return": [],
            "arguments": {
                "kubeconfig": [
                    "str",
                    "None",
                    "bool"
                ]
            }
        },
        "k8s_client": {
            "name": "k8s_client",
            "location": 74,
            "return": [],
            "arguments": {
                "request": [
                    "str",
                    "dict[str, typing.Any]",
                    "dict[, ]",
                    "typing.Callable[, ]",
                    "bytes"
                ],
                "k8s_apiclient": [
                    "bool",
                    "str",
                    "list[]"
                ]
            }
        },
        "bootstrap_config": {
            "name": "bootstrap_config",
            "location": 106,
            "return": [],
            "arguments": {
                "host": []
            }
        },
        "registry_address": {
            "name": "registry_address",
            "location": 115,
            "return": [],
            "arguments": {
                "host": [],
                "version": [
                    "str",
                    "float",
                    "int"
                ]
            }
        },
        "utils_image": {
            "name": "utils_image",
            "location": 127,
            "return": [
                "str"
            ],
            "arguments": {
                "registry_address": [
                    "str",
                    "None",
                    "int"
                ],
                "version": [
                    "str",
                    "None",
                    "int"
                ]
            }
        },
        "ssh_config": {
            "name": "ssh_config",
            "location": 136,
            "return": [],
            "arguments": {
                "request": [
                    "str"
                ]
            }
        },
        "count_running_pods": {
            "name": "count_running_pods",
            "location": 140,
            "return": [
                "None"
            ],
            "arguments": {
                "request": [
                    "bool",
                    "dict[, ]",
                    "None"
                ],
                "k8s_client": [
                    "bool",
                    "dict[, ]",
                    "None"
                ],
                "pods_count": [
                    "str",
                    "typing.Callable[, ]",
                    "bool"
                ],
                "label": [
                    "str",
                    "typing.Callable[, ]",
                    "bool"
                ],
                "namespace": [
                    "str",
                    "typing.Callable[, ]",
                    "bool"
                ],
                "node": [
                    "str",
                    "int"
                ]
            }
        },
        "check_service": {
            "name": "check_service",
            "location": 171,
            "return": [
                "None"
            ],
            "arguments": {
                "host": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ]
            }
        },
        "given_count_running_pods": {
            "name": "given_count_running_pods",
            "location": 176,
            "return": [],
            "arguments": {
                "request": [
                    "str",
                    "int",
                    "None"
                ],
                "k8s_client": [
                    "str",
                    "int",
                    "None"
                ],
                "pods_count": [
                    "str",
                    "int",
                    "None"
                ],
                "label": [
                    "str",
                    "int",
                    "None"
                ],
                "namespace": [
                    "str",
                    "int",
                    "None"
                ],
                "node": [
                    "str",
                    "int",
                    "None"
                ]
            }
        },
        "verify_kubeapi_service": {
            "name": "verify_kubeapi_service",
            "location": 186,
            "return": [
                "None"
            ],
            "arguments": {
                "host": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ]
            }
        },
        "then_count_running_pods": {
            "name": "then_count_running_pods",
            "location": 191,
            "return": [],
            "arguments": {
                "request": [
                    "str",
                    "int",
                    "None"
                ],
                "k8s_client": [
                    "str",
                    "int",
                    "None"
                ],
                "pods_count": [
                    "str",
                    "int",
                    "None"
                ],
                "label": [
                    "str",
                    "int",
                    "None"
                ],
                "namespace": [
                    "str",
                    "int",
                    "None"
                ],
                "node": [
                    "str",
                    "int",
                    "None"
                ]
            }
        },
        "check_resource_list": {
            "name": "check_resource_list",
            "location": 200,
            "return": [
                "None"
            ],
            "arguments": {
                "host": [],
                "resource": [
                    "str",
                    "int"
                ],
                "namespace": [
                    "str",
                    "int"
                ]
            }
        },
        "_verify_kubeapi_service": {
            "name": "_verify_kubeapi_service",
            "location": 216,
            "return": [
                "None"
            ],
            "arguments": {
                "host": []
            }
        },
        "count_running_pods._check_pods_count": {
            "name": "_check_pods_count",
            "location": 144,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "metalk8s-master/tests/kube_utils.py": {
        "get_pods": {
            "name": "get_pods",
            "location": 12,
            "return": [],
            "arguments": {
                "k8s_client": [
                    "bool",
                    "str",
                    "list[str]"
                ],
                "ssh_config": [
                    "bool",
                    "None"
                ],
                "label": [
                    "None",
                    "int",
                    "typing.Mapping",
                    "typing.Type",
                    "dict[str, typing.Any]"
                ],
                "node": [
                    "None",
                    "bool"
                ],
                "namespace": [
                    "None",
                    "str",
                    "bool",
                    "typing.Callable[, ]"
                ],
                "state": [
                    "typing.Text"
                ]
            }
        },
        "check_pod_status": {
            "name": "check_pod_status",
            "location": 41,
            "return": [],
            "arguments": {
                "k8s_client": [
                    "bool",
                    "float",
                    "typing.Sequence[str]",
                    "str",
                    "None"
                ],
                "name": [
                    "bool",
                    "float",
                    "typing.Sequence[str]",
                    "str",
                    "None"
                ],
                "namespace": [
                    "typing.Text"
                ],
                "state": [
                    "typing.Text"
                ]
            }
        },
        "check_pod_status._check_pod_status": {
            "name": "_check_pod_status",
            "location": 49,
            "return": [],
            "arguments": {}
        }
    },
    "metalk8s-master/tests/utils.py": {
        "retry": {
            "name": "retry",
            "location": 14,
            "return": [],
            "arguments": {
                "operation": [],
                "times": [],
                "wait": [],
                "error_msg": [],
                "name": []
            }
        },
        "write_string": {
            "name": "write_string",
            "location": 36,
            "return": [],
            "arguments": {
                "host": [],
                "dest": [],
                "contents": []
            }
        },
        "get_ip_from_cidr": {
            "name": "get_ip_from_cidr",
            "location": 40,
            "return": [],
            "arguments": {
                "host": [],
                "cidr": []
            }
        },
        "resolve_hostname": {
            "name": "resolve_hostname",
            "location": 55,
            "return": [],
            "arguments": {
                "nodename": [],
                "ssh_config": []
            }
        }
    },
    "metalk8s-master/tests/versions.py": {},
    "metalk8s-master/tests/__init__.py": {},
    "metalk8s-master/tests/install/steps/test_expansion.py": {
        "test_cluster_expansion": {
            "name": "test_cluster_expansion",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "host": []
            }
        },
        "declare_node": {
            "name": "declare_node",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "ssh_config": [],
                "version": [],
                "k8s_client": [],
                "node_type": [],
                "hostname": [],
                "bootstrap_config": []
            }
        },
        "deploy_node": {
            "name": "deploy_node",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "host": [],
                "ssh_config": [],
                "version": [],
                "name": []
            }
        },
        "check_node_is_registered": {
            "name": "check_node_is_registered",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "ssh_config": [],
                "k8s_client": [],
                "hostname": []
            }
        },
        "check_node_status": {
            "name": "check_node_status",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "ssh_config": [],
                "k8s_client": [],
                "hostname": [],
                "expected_status": []
            }
        },
        "check_etcd_role": {
            "name": "check_etcd_role",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {
                "ssh_config": [],
                "k8s_client": [],
                "node_name": []
            }
        },
        "kubectl_exec": {
            "name": "kubectl_exec",
            "location": 102,
            "return": [],
            "arguments": {
                "host": [],
                "command": [],
                "pod": [],
                "kubeconfig": [
                    "typing.Text"
                ]
            }
        },
        "get_node_ip": {
            "name": "get_node_ip",
            "location": 129,
            "return": [],
            "arguments": {
                "hostname": [],
                "ssh_config": [],
                "bootstrap_config": []
            }
        },
        "get_node_manifest": {
            "name": "get_node_manifest",
            "location": 138,
            "return": [],
            "arguments": {
                "node_type": [],
                "metalk8s_version": [],
                "node_ip": [],
                "node_name": []
            }
        },
        "node_from_manifest": {
            "name": "node_from_manifest",
            "location": 147,
            "return": [],
            "arguments": {
                "manifest": []
            }
        },
        "run_salt_command": {
            "name": "run_salt_command",
            "location": 153,
            "return": [
                "None"
            ],
            "arguments": {
                "host": [],
                "command": [],
                "ssh_config": []
            }
        },
        "etcdctl": {
            "name": "etcdctl",
            "location": 174,
            "return": [],
            "arguments": {
                "k8s_client": [],
                "command": [],
                "ssh_config": []
            }
        },
        "check_node_status._check_node_status": {
            "name": "_check_node_status",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "metalk8s-master/tests/post/steps/conftest.py": {
        "_check_pods_status": {
            "name": "_check_pods_status",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "k8s_client": [
                    "bool",
                    "str",
                    "dict[str, str]"
                ],
                "expected_status": [
                    "bool",
                    "str",
                    "dict[str, str]"
                ],
                "ssh_config": [
                    "bool",
                    "str",
                    "dict[str, str]"
                ],
                "namespace": [
                    "None",
                    "str",
                    "typing.Callable[str, bool]",
                    "dict[, ]"
                ],
                "label": [
                    "None",
                    "str",
                    "typing.Callable[str, bool]",
                    "dict[, ]"
                ]
            }
        },
        "check_pod_status": {
            "name": "check_pod_status",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "request": [
                    "str",
                    "float",
                    "None"
                ],
                "host": [],
                "k8s_client": [
                    "str",
                    "int"
                ],
                "label": [
                    "str",
                    "int"
                ],
                "expected_status": [
                    "str",
                    "int"
                ]
            }
        },
        "check_all_pods_status": {
            "name": "check_all_pods_status",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "request": [
                    "str"
                ],
                "host": [
                    "str",
                    "None",
                    "bool"
                ],
                "k8s_client": [
                    "str",
                    "None",
                    "int"
                ],
                "expected_status": [
                    "str",
                    "None",
                    "int"
                ]
            }
        },
        "_check_pods_status._wait_for_status": {
            "name": "_wait_for_status",
            "location": 12,
            "return": [],
            "arguments": {}
        }
    },
    "metalk8s-master/tests/post/steps/test_bootstrap.py": {
        "test_bootstrap": {
            "name": "test_bootstrap",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {
                "host": [
                    "str",
                    "typing.Mapping"
                ]
            }
        },
        "rerun_bootstrap": {
            "name": "rerun_bootstrap",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "request": [],
                "host": []
            }
        }
    },
    "metalk8s-master/tests/post/steps/test_dns.py": {
        "utils_pod": {
            "name": "utils_pod",
            "location": 13,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "k8s_client": [
                    "typing.Iterable[str]",
                    "str",
                    "bool",
                    "typing.ClassVar"
                ],
                "utils_image": [
                    "int",
                    "typing.Callable[..., None]",
                    "tuple[]",
                    "str",
                    "float"
                ]
            }
        },
        "test_dns": {
            "name": "test_dns",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "host": [
                    "str",
                    "typing.Mapping"
                ]
            }
        },
        "resolve_hostname": {
            "name": "resolve_hostname",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "utils_pod": [
                    "dict[str, typing.Any]",
                    "bytes",
                    "str",
                    "int",
                    "dict[, ]"
                ],
                "host": [],
                "hostname": [
                    "str",
                    "int",
                    "bytes"
                ]
            }
        }
    },
    "metalk8s-master/tests/post/steps/test_ingress.py": {
        "test_access_http_services": {
            "name": "test_access_http_services",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "host": [
                    "str"
                ]
            }
        },
        "test_access_https_services": {
            "name": "test_access_https_services",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "host": [
                    "str"
                ]
            }
        },
        "test_access_http_services_on_control_plane_ip": {
            "name": "test_access_http_services_on_control_plane_ip",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "host": [
                    "str"
                ]
            }
        },
        "context": {
            "name": "context",
            "location": 27,
            "return": [
                "dict[, ]"
            ],
            "arguments": {}
        },
        "node_control_plane_ip_is_not_equal_to_its_workload_plane_ip": {
            "name": "node_control_plane_ip_is_not_equal_to_its_workload_plane_ip",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "host": []
            }
        },
        "perform_request": {
            "name": "perform_request",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "host": [],
                "context": [],
                "protocol": [],
                "port": [
                    "str",
                    "dict[str, typing.Any]"
                ],
                "plane": [
                    "int"
                ]
            }
        },
        "server_returns": {
            "name": "server_returns",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "host": [
                    "float",
                    "str",
                    "list[str]",
                    "typing.Type",
                    "dict[int, str]",
                    "bool"
                ],
                "context": [
                    "dict[str, typing.Any]"
                ],
                "status_code": [
                    "int",
                    "str",
                    "list[dict[str, typing.Any]]"
                ],
                "reason": [
                    "str",
                    "bytes",
                    "int"
                ]
            }
        },
        "server_does_not_respond": {
            "name": "server_does_not_respond",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {
                "host": [
                    "bool",
                    "typing.Callable[, ]"
                ],
                "context": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "metalk8s-master/tests/post/steps/test_liveness.py": {
        "test_list_pods": {
            "name": "test_list_pods",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "host": []
            }
        },
        "test_exec_in_pods": {
            "name": "test_exec_in_pods",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "host": [
                    "list[str]"
                ]
            }
        },
        "test_expected_pods": {
            "name": "test_expected_pods",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "host": [
                    "str",
                    "dict[str, typing.Sequence[str]]"
                ]
            }
        },
        "check_exec": {
            "name": "check_exec",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "request": [
                    "bytes",
                    "bool",
                    "typing.Mapping"
                ],
                "host": [],
                "k8s_client": [
                    "str"
                ],
                "command": [
                    "str",
                    "int",
                    "dict[str, typing.Any]",
                    "None"
                ],
                "label": [
                    "dict[, ]",
                    "str",
                    "None",
                    "list[]"
                ],
                "namespace": [
                    "str",
                    "bool"
                ]
            }
        },
        "check_exec._wait_for_pods": {
            "name": "_wait_for_pods",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "metalk8s-master/tests/post/steps/test_logs.py": {
        "test_logs": {
            "name": "test_logs",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "host": [
                    "str"
                ]
            }
        },
        "check_logs": {
            "name": "check_logs",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "k8s_client": []
            }
        }
    },
    "metalk8s-master/tests/post/steps/test_monitoring.py": {
        "test_list_pods": {
            "name": "test_list_pods",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "host": []
            }
        },
        "test_expected_pods": {
            "name": "test_expected_pods",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "host": [
                    "str",
                    "dict[str, typing.Sequence[str]]"
                ]
            }
        },
        "test_monitored_components": {
            "name": "test_monitored_components",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "host": [
                    "str",
                    "typing.Mapping"
                ]
            }
        },
        "test_pod_metrics": {
            "name": "test_pod_metrics",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "host": [
                    "str",
                    "typing.Mapping"
                ]
            }
        },
        "test_node_metrics": {
            "name": "test_node_metrics",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "host": []
            }
        },
        "check_prometheus_api": {
            "name": "check_prometheus_api",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "host": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ]
            }
        },
        "apiservice_exists": {
            "name": "apiservice_exists",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "host": [
                    "bool",
                    "typing.Iterable[dict[str, typing.Any]]",
                    "str"
                ],
                "name": [
                    "bool",
                    "typing.Iterable[dict[str, typing.Any]]",
                    "str"
                ],
                "k8s_apiclient": [
                    "bool",
                    "typing.Iterable[dict[str, typing.Any]]",
                    "str"
                ],
                "request": [
                    "bool",
                    "typing.Iterable[dict[str, typing.Any]]",
                    "str"
                ]
            }
        },
        "check_job_health": {
            "name": "check_job_health",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "host": [
                    "int",
                    "str",
                    "typing.Iterable['Context']"
                ],
                "job": [
                    "str",
                    "bool"
                ],
                "namespace": [
                    "str",
                    "bool"
                ],
                "health": [
                    "str",
                    "bool"
                ]
            }
        },
        "apiservice_condition_met": {
            "name": "apiservice_condition_met",
            "location": 102,
            "return": [
                "None"
            ],
            "arguments": {
                "name": [
                    "str",
                    "bool",
                    "tuple[]",
                    "list[]"
                ],
                "condition": [
                    "str",
                    "bool",
                    "tuple[]",
                    "list[]"
                ],
                "k8s_apiclient": [
                    "str",
                    "bool",
                    "tuple[]",
                    "list[]"
                ]
            }
        },
        "pod_has_metrics": {
            "name": "pod_has_metrics",
            "location": 127,
            "return": [
                "None"
            ],
            "arguments": {
                "label": [
                    "str",
                    "list[str]",
                    "bool"
                ],
                "namespace": [
                    "str",
                    "list[str]",
                    "bool"
                ],
                "k8s_apiclient": [
                    "str",
                    "list[str]",
                    "bool"
                ]
            }
        },
        "node_has_metrics": {
            "name": "node_has_metrics",
            "location": 155,
            "return": [
                "None"
            ],
            "arguments": {
                "label": [
                    "str",
                    "bool",
                    "list[str]"
                ],
                "k8s_apiclient": [
                    "str",
                    "bool",
                    "list[str]"
                ]
            }
        },
        "_query_prometheus_api": {
            "name": "_query_prometheus_api",
            "location": 180,
            "return": [],
            "arguments": {
                "host": [
                    "int",
                    "str",
                    "float"
                ],
                "route": [
                    "str"
                ]
            }
        },
        "_get_local_grain": {
            "name": "_get_local_grain",
            "location": 190,
            "return": [],
            "arguments": {
                "host": [],
                "key": [
                    "str"
                ]
            }
        },
        "apiservice_exists._check_object_exists": {
            "name": "_check_object_exists",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "check_job_health._wait_job_status": {
            "name": "_wait_job_status",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "apiservice_condition_met._check_object_exists": {
            "name": "_check_object_exists",
            "location": 105,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "pod_has_metrics._pod_has_metrics": {
            "name": "_pod_has_metrics",
            "location": 128,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "node_has_metrics._node_has_metrics": {
            "name": "_node_has_metrics",
            "location": 156,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "metalk8s-master/tests/post/steps/test_salt_api.py": {
        "test_login_basic_auth_to_salt_api": {
            "name": "test_login_basic_auth_to_salt_api",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "host": [
                    "str"
                ]
            }
        },
        "test_login_bearer_auth_to_salt_api": {
            "name": "test_login_bearer_auth_to_salt_api",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "host": [
                    "str"
                ]
            }
        },
        "test_login_to_salt_api_using_an_incorrect_password": {
            "name": "test_login_to_salt_api_using_an_incorrect_password",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "host": [
                    "bool"
                ],
                "request": [
                    "bool"
                ]
            }
        },
        "test_login_to_salt_api_using_an_incorrect_username": {
            "name": "test_login_to_salt_api_using_an_incorrect_username",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "host": [
                    "bool"
                ],
                "request": [
                    "bool"
                ]
            }
        },
        "context": {
            "name": "context",
            "location": 34,
            "return": [
                "dict[, ]"
            ],
            "arguments": {}
        },
        "login_salt_api_basic": {
            "name": "login_salt_api_basic",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "host": [
                    "str"
                ],
                "username": [
                    "str",
                    "None"
                ],
                "password": [
                    "str",
                    "None"
                ],
                "version": [
                    "str"
                ],
                "context": [
                    "str",
                    "None",
                    "bool"
                ]
            }
        },
        "login_salt_api_token": {
            "name": "login_salt_api_token",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "host": [
                    "str"
                ],
                "k8s_client": [],
                "account_name": [
                    "str",
                    "dict[, ]"
                ],
                "version": [
                    "str"
                ],
                "context": [
                    "str"
                ]
            }
        },
        "ping_all_minions": {
            "name": "ping_all_minions",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "host": [
                    "typing.Sequence[tuple[typing.Union[typing.Any,typing.Any]]]",
                    "list[typing.Callable[, ]]"
                ],
                "context": [
                    "str"
                ]
            }
        },
        "authentication_fails": {
            "name": "authentication_fails",
            "location": 95,
            "return": [
                "None"
            ],
            "arguments": {
                "host": [
                    "int",
                    "str",
                    "typing.Iterable['Context']"
                ],
                "context": [
                    "int",
                    "str",
                    "typing.Iterable['Context']"
                ]
            }
        },
        "invoke_module_on_target": {
            "name": "invoke_module_on_target",
            "location": 99,
            "return": [
                "None"
            ],
            "arguments": {
                "host": [
                    "str",
                    "typing.Type",
                    "dict[str, typing.Any]",
                    "None",
                    "bool",
                    "list[int]",
                    "list[str]"
                ],
                "context": [],
                "modules": [],
                "targets": []
            }
        },
        "have_perms": {
            "name": "have_perms",
            "location": 103,
            "return": [
                "None"
            ],
            "arguments": {
                "host": [
                    "int",
                    "str",
                    "typing.Iterable['Context']"
                ],
                "context": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ],
                "perms": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ]
            }
        },
        "_get_salt_api_address": {
            "name": "_get_salt_api_address",
            "location": 111,
            "return": [
                "str"
            ],
            "arguments": {
                "host": [],
                "version": [
                    "str",
                    "list[str]"
                ]
            }
        },
        "_salt_api_login": {
            "name": "_salt_api_login",
            "location": 135,
            "return": [
                "dict[typing.Text, typing.Union[str,None,list[]]]"
            ],
            "arguments": {
                "address": [
                    "str",
                    "None",
                    "dict[str, str]",
                    "int",
                    "dict[int, dict[, ]]"
                ],
                "username": [
                    "str",
                    "int"
                ],
                "token": [
                    "str",
                    "int"
                ],
                "token_type": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "metalk8s-master/tests/post/steps/test_static_pods.py": {
        "transient_files": {
            "name": "transient_files",
            "location": 24,
            "return": [
                "typing.Generator[list[]]"
            ],
            "arguments": {
                "host": []
            }
        },
        "test_static_pods_restart": {
            "name": "test_static_pods_restart",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "host": [
                    "typing.Iterable[pathlib.Path]"
                ],
                "transient_files": [
                    "typing.Iterable[pathlib.Path]"
                ]
            }
        },
        "set_up_static_pod": {
            "name": "set_up_static_pod",
            "location": 50,
            "return": [],
            "arguments": {
                "host": [],
                "hostname": [
                    "str",
                    "bool"
                ],
                "k8s_client": [],
                "utils_image": [
                    "str",
                    "bool"
                ],
                "transient_files": [
                    "list[str]"
                ]
            }
        },
        "edit_static_pod_config": {
            "name": "edit_static_pod_config",
            "location": 119,
            "return": [
                "None"
            ],
            "arguments": {
                "host": []
            }
        },
        "manage_static_pod": {
            "name": "manage_static_pod",
            "location": 132,
            "return": [
                "None"
            ],
            "arguments": {
                "host": [
                    "str",
                    "int",
                    "None"
                ]
            }
        },
        "check_static_pod_changed": {
            "name": "check_static_pod_changed",
            "location": 140,
            "return": [
                "None"
            ],
            "arguments": {
                "host": [
                    "dict[str, typing.Any]",
                    "str",
                    "None",
                    "bool",
                    "list[str]"
                ],
                "hostname": [
                    "dict[str, typing.Any]",
                    "str",
                    "None",
                    "bool",
                    "list[str]"
                ],
                "k8s_client": [],
                "static_pod_id": [
                    "bool",
                    "None",
                    "str",
                    "dict[tuple[typing.Union[str,str]], Exception]",
                    "dict[str, str]",
                    "typing.Any"
                ]
            }
        },
        "_manage_static_pod": {
            "name": "_manage_static_pod",
            "location": 168,
            "return": [
                "None"
            ],
            "arguments": {
                "host": [],
                "manifest_path": [
                    "str"
                ],
                "template_path": [
                    "str"
                ],
                "config_path": [
                    "str"
                ]
            }
        },
        "check_static_pod_changed.wait_for_pod_reloaded": {
            "name": "wait_for_pod_reloaded",
            "location": 149,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "metalk8s-master/tests/post/steps/test_ui.py": {
        "test_ui": {
            "name": "test_ui",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "host": [
                    "str",
                    "typing.Mapping"
                ]
            }
        },
        "reach_UI": {
            "name": "reach_UI",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "host": []
            }
        }
    },
    "metalk8s-master/tests/post/steps/test_versions.py": {
        "test_cluster_version": {
            "name": "test_cluster_version",
            "location": 10,
            "return": [],
            "arguments": {
                "host": []
            }
        },
        "check_kubernetes_version": {
            "name": "check_kubernetes_version",
            "location": 16,
            "return": [],
            "arguments": {
                "k8s_apiclient": []
            }
        }
    },
    "metalk8s-master/tests/post/steps/test_volume.py": {
        "volume_client": {
            "name": "volume_client",
            "location": 95,
            "return": [
                "VolumeClient"
            ],
            "arguments": {
                "k8s_apiclient": [
                    "None"
                ],
                "ssh_config": [
                    "None"
                ]
            }
        },
        "pv_client": {
            "name": "pv_client",
            "location": 99,
            "return": [
                "PersistentVolumeClient"
            ],
            "arguments": {
                "k8s_client": [
                    "typing.Callable[, ]"
                ]
            }
        },
        "pvc_client": {
            "name": "pvc_client",
            "location": 103,
            "return": [
                "PersistentVolumeClaimClient"
            ],
            "arguments": {
                "k8s_client": [
                    "str",
                    "None",
                    "float"
                ]
            }
        },
        "pod_client": {
            "name": "pod_client",
            "location": 107,
            "return": [
                "PodClient"
            ],
            "arguments": {
                "k8s_client": [
                    "bool",
                    "str",
                    "None"
                ],
                "utils_image": [
                    "bool",
                    "str",
                    "None"
                ]
            }
        },
        "sc_client": {
            "name": "sc_client",
            "location": 111,
            "return": [
                "StorageClassClient"
            ],
            "arguments": {
                "k8s_apiclient": [
                    "int",
                    "dict[str, str]"
                ]
            }
        },
        "teardown": {
            "name": "teardown",
            "location": 115,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "pod_client": [],
                "pvc_client": [],
                "volume_client": [],
                "sc_client": []
            }
        },
        "context": {
            "name": "context",
            "location": 123,
            "return": [
                "dict[, ]"
            ],
            "arguments": {}
        },
        "test_deploy_storage_class": {
            "name": "test_deploy_storage_class",
            "location": 130,
            "return": [
                "None"
            ],
            "arguments": {
                "host": [
                    "str"
                ]
            }
        },
        "test_deploy_operator": {
            "name": "test_deploy_operator",
            "location": 134,
            "return": [
                "None"
            ],
            "arguments": {
                "host": [
                    "str",
                    "typing.Mapping"
                ]
            }
        },
        "test_volume_creation": {
            "name": "test_volume_creation",
            "location": 139,
            "return": [
                "None"
            ],
            "arguments": {
                "host": [
                    "str",
                    "typing.Mapping"
                ],
                "teardown": [
                    "str",
                    "typing.Mapping"
                ]
            }
        },
        "test_volume_deletion": {
            "name": "test_volume_deletion",
            "location": 144,
            "return": [
                "None"
            ],
            "arguments": {
                "host": [
                    "str",
                    "typing.Mapping"
                ],
                "teardown": [
                    "str",
                    "typing.Mapping"
                ]
            }
        },
        "test_pv_protection": {
            "name": "test_pv_protection",
            "location": 148,
            "return": [
                "None"
            ],
            "arguments": {
                "host": [
                    "str",
                    "typing.Mapping"
                ],
                "teardown": [
                    "str",
                    "typing.Mapping"
                ]
            }
        },
        "test_no_volume_type": {
            "name": "test_no_volume_type",
            "location": 152,
            "return": [
                "None"
            ],
            "arguments": {
                "host": [
                    "int",
                    "str"
                ],
                "teardown": [
                    "int",
                    "str"
                ]
            }
        },
        "test_invalid_volume_type": {
            "name": "test_invalid_volume_type",
            "location": 157,
            "return": [
                "None"
            ],
            "arguments": {
                "host": [
                    "int",
                    "dict[str, typing.Sequence[str]]"
                ],
                "teardown": [
                    "int",
                    "dict[str, typing.Sequence[str]]"
                ]
            }
        },
        "test_in_use_protection": {
            "name": "test_in_use_protection",
            "location": 161,
            "return": [
                "None"
            ],
            "arguments": {
                "host": [
                    "str",
                    "bool"
                ],
                "teardown": [
                    "str",
                    "bool"
                ]
            }
        },
        "test_volume_data_persistency": {
            "name": "test_volume_data_persistency",
            "location": 165,
            "return": [
                "None"
            ],
            "arguments": {
                "host": [
                    "str"
                ],
                "teardown": [
                    "str"
                ]
            }
        },
        "test_volume_invalid_fs_type": {
            "name": "test_volume_invalid_fs_type",
            "location": 170,
            "return": [
                "None"
            ],
            "arguments": {
                "host": [
                    "dict[str, typing.Sequence[str]]",
                    "str"
                ],
                "teardown": [
                    "dict[str, typing.Sequence[str]]",
                    "str"
                ]
            }
        },
        "test_volume_invalid_storage_class": {
            "name": "test_volume_invalid_storage_class",
            "location": 180,
            "return": [
                "None"
            ],
            "arguments": {
                "host": [],
                "teardown": []
            }
        },
        "volume_exist": {
            "name": "volume_exist",
            "location": 187,
            "return": [
                "None"
            ],
            "arguments": {
                "context": [
                    "str",
                    "dict[str, typing.Any]",
                    "None"
                ],
                "name": [
                    "str",
                    "dict[str, typing.Any]",
                    "typing.Mapping",
                    "int"
                ],
                "volume_client": []
            }
        },
        "create_pvc_for_volume": {
            "name": "create_pvc_for_volume",
            "location": 194,
            "return": [
                "None"
            ],
            "arguments": {
                "volume_name": [
                    "str",
                    "dict[str, typing.Any]",
                    "dict[str, bytes]",
                    "None"
                ],
                "pvc_client": [],
                "pv_client": [
                    "dict[str, typing.Any]"
                ]
            }
        },
        "pod_exists_for_volume": {
            "name": "pod_exists_for_volume",
            "location": 202,
            "return": [
                "None"
            ],
            "arguments": {
                "volume_name": [
                    "bool",
                    "None",
                    "dict[, ]",
                    "dict[str, typing.Any]",
                    "typing.Mapping",
                    "str",
                    "bytes"
                ],
                "command": [
                    "str"
                ],
                "pod_client": []
            }
        },
        "storage_class_does_not_exist": {
            "name": "storage_class_does_not_exist",
            "location": 208,
            "return": [
                "None"
            ],
            "arguments": {
                "name": [
                    "str",
                    "None",
                    "dict[, ]"
                ],
                "sc_client": [
                    "dict[, ]"
                ]
            }
        },
        "storage_class_exist": {
            "name": "storage_class_exist",
            "location": 215,
            "return": [
                "None"
            ],
            "arguments": {
                "name": [
                    "str",
                    "int",
                    "dict[, ]"
                ],
                "sc_client": []
            }
        },
        "create_volume": {
            "name": "create_volume",
            "location": 223,
            "return": [
                "None"
            ],
            "arguments": {
                "body": [
                    "str",
                    "dict[, ]",
                    "None",
                    "bool",
                    "bytes"
                ],
                "volume_client": []
            }
        },
        "delete_volume": {
            "name": "delete_volume",
            "location": 228,
            "return": [
                "None"
            ],
            "arguments": {
                "name": [
                    "str",
                    "dict[, ]"
                ],
                "volume_client": []
            }
        },
        "delete_pv": {
            "name": "delete_pv",
            "location": 233,
            "return": [
                "None"
            ],
            "arguments": {
                "name": [
                    "bool",
                    "str"
                ],
                "pv_client": []
            }
        },
        "delete_pod": {
            "name": "delete_pod",
            "location": 238,
            "return": [
                "None"
            ],
            "arguments": {
                "volume_name": [
                    "str",
                    "None"
                ],
                "pod_client": []
            }
        },
        "delete_pv_claim": {
            "name": "delete_pv_claim",
            "location": 243,
            "return": [
                "None"
            ],
            "arguments": {
                "volume_name": [
                    "str",
                    "None"
                ],
                "pvc_client": []
            }
        },
        "create_pod_for_volume": {
            "name": "create_pod_for_volume",
            "location": 250,
            "return": [
                "None"
            ],
            "arguments": {
                "volume_name": [
                    "str",
                    "None"
                ],
                "command": [
                    "str",
                    "None"
                ],
                "pod_client": []
            }
        },
        "create_storage_class": {
            "name": "create_storage_class",
            "location": 255,
            "return": [
                "None"
            ],
            "arguments": {
                "body": [
                    "bool",
                    "str",
                    "typing.IO",
                    "None"
                ],
                "sc_client": []
            }
        },
        "delete_storage_class": {
            "name": "delete_storage_class",
            "location": 260,
            "return": [
                "None"
            ],
            "arguments": {
                "name": [
                    "str",
                    "dict[, ]"
                ],
                "sc_client": []
            }
        },
        "check_storage_class": {
            "name": "check_storage_class",
            "location": 267,
            "return": [
                "None"
            ],
            "arguments": {
                "name": [
                    "str",
                    "None"
                ],
                "sc_client": [
                    "str",
                    "None"
                ]
            }
        },
        "check_volume_status": {
            "name": "check_volume_status",
            "location": 273,
            "return": [
                "None"
            ],
            "arguments": {
                "context": [
                    "str",
                    "int",
                    "None"
                ],
                "name": [
                    "str",
                    "list[str]",
                    "dict[, ]",
                    "bool"
                ],
                "status": [
                    "str",
                    "int",
                    "None"
                ],
                "volume_client": [
                    "str",
                    "int",
                    "None"
                ]
            }
        },
        "check_pv_size": {
            "name": "check_pv_size",
            "location": 293,
            "return": [
                "None"
            ],
            "arguments": {
                "name": [
                    "int",
                    "str",
                    "typing.Type",
                    "tuple[str]"
                ],
                "size": [
                    "bool",
                    "list[]",
                    "list[str]",
                    "str"
                ],
                "pv_client": [
                    "bool",
                    "list[]",
                    "list[str]",
                    "str"
                ]
            }
        },
        "check_pv_label": {
            "name": "check_pv_label",
            "location": 311,
            "return": [
                "None"
            ],
            "arguments": {
                "name": [
                    "str",
                    "int"
                ],
                "key": [
                    "str",
                    "bool",
                    "typing.Callable[[], float]",
                    "typing.Iterable[int]"
                ],
                "value": [
                    "str",
                    "bool",
                    "typing.Callable[[], float]",
                    "typing.Iterable[int]"
                ],
                "pv_client": [
                    "str",
                    "bool",
                    "typing.Callable[[], float]",
                    "typing.Iterable[int]"
                ]
            }
        },
        "check_volume_absent": {
            "name": "check_volume_absent",
            "location": 329,
            "return": [
                "None"
            ],
            "arguments": {
                "name": [
                    "str",
                    "bool"
                ],
                "volume_client": []
            }
        },
        "check_pv_absent": {
            "name": "check_pv_absent",
            "location": 334,
            "return": [
                "None"
            ],
            "arguments": {
                "name": [
                    "str",
                    "bool"
                ],
                "pv_client": []
            }
        },
        "check_pv_deletion_marker": {
            "name": "check_pv_deletion_marker",
            "location": 339,
            "return": [
                "None"
            ],
            "arguments": {
                "name": [
                    "str"
                ],
                "pv_client": []
            }
        },
        "check_volume_error": {
            "name": "check_volume_error",
            "location": 345,
            "return": [
                "None"
            ],
            "arguments": {
                "context": [
                    "bool",
                    "str",
                    "None"
                ],
                "name": [
                    "str"
                ],
                "code": [
                    "bool",
                    "str",
                    "None"
                ],
                "pattern": [
                    "bool",
                    "str",
                    "None"
                ],
                "volume_client": [
                    "bool",
                    "str",
                    "None"
                ]
            }
        },
        "check_volume_deletion_marker": {
            "name": "check_volume_deletion_marker",
            "location": 368,
            "return": [
                "None"
            ],
            "arguments": {
                "name": [
                    "str"
                ],
                "volume_client": []
            }
        },
        "check_file_content_inside_pod": {
            "name": "check_file_content_inside_pod",
            "location": 374,
            "return": [
                "None"
            ],
            "arguments": {
                "volume_name": [
                    "bool",
                    "str",
                    "None"
                ],
                "path": [
                    "str",
                    "dict[str, str]",
                    "dict[, ]",
                    "None",
                    "typing.IO"
                ],
                "content": [
                    "bool",
                    "str",
                    "None"
                ],
                "k8s_client": [
                    "bool",
                    "str",
                    "None"
                ]
            }
        },
        "check_storage_is_created": {
            "name": "check_storage_is_created",
            "location": 399,
            "return": [
                "None"
            ],
            "arguments": {
                "context": [],
                "host": [],
                "name": [
                    "str",
                    "dict[str, str]",
                    "list[str]"
                ]
            }
        },
        "check_storage_is_deleted": {
            "name": "check_storage_is_deleted",
            "location": 415,
            "return": [
                "None"
            ],
            "arguments": {
                "context": [],
                "host": [],
                "name": [
                    "str",
                    "list[str]",
                    "dict[str, str]"
                ]
            }
        },
        "_quantity_to_bytes": {
            "name": "_quantity_to_bytes",
            "location": 729,
            "return": [
                "int",
                "str",
                "tuple[int]"
            ],
            "arguments": {
                "quantity": [
                    "int",
                    "str",
                    "float"
                ]
            }
        },
        "check_volume_status._check_volume_status": {
            "name": "_check_volume_status",
            "location": 274,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "check_pv_size._check_pv_size": {
            "name": "_check_pv_size",
            "location": 294,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "check_pv_label._check_pv_label": {
            "name": "_check_pv_label",
            "location": 312,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "check_volume_error._check_error": {
            "name": "_check_error",
            "location": 346,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "check_file_content_inside_pod._check_file_content": {
            "name": "_check_file_content",
            "location": 377,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "Client.__init__": {
            "name": "__init__",
            "location": 432,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "k8s_client": [
                    "bool",
                    "dict[, ]"
                ],
                "kind": [
                    "bool",
                    "dict[, ]"
                ],
                "retry_count": [
                    "bool",
                    "dict[, ]"
                ],
                "retry_delay": [
                    "bool",
                    "dict[, ]"
                ]
            }
        },
        "Client.create_from_yaml": {
            "name": "create_from_yaml",
            "location": 438,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "manifest": [
                    "dict[, ]",
                    "str",
                    "None",
                    "dict[str, typing.Any]",
                    "bytes"
                ]
            }
        },
        "Client.get": {
            "name": "get",
            "location": 442,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "Client.delete": {
            "name": "delete",
            "location": 451,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "list[str]",
                    "None"
                ],
                "sync": [
                    "bool"
                ]
            }
        },
        "Client.delete_all": {
            "name": "delete_all",
            "location": 460,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "prefix": [
                    "None",
                    "str",
                    "bool",
                    "list[typing.Any]"
                ],
                "sync": [
                    "bool"
                ]
            }
        },
        "Client.wait_for_deletion": {
            "name": "wait_for_deletion",
            "location": 475,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "Client.check_deletion_marker": {
            "name": "check_deletion_marker",
            "location": 486,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "bytes"
                ]
            }
        },
        "Client.list": {
            "name": "list",
            "location": 506,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Client._create": {
            "name": "_create",
            "location": 511,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "body": [
                    "int",
                    "str",
                    "None"
                ]
            }
        },
        "Client._get": {
            "name": "_get",
            "location": 516,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "int",
                    "typing.Iterable[str]"
                ]
            }
        },
        "Client._delete": {
            "name": "_delete",
            "location": 521,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "typing.Iterable[str]"
                ]
            }
        },
        "VolumeClient.__init__": {
            "name": "__init__",
            "location": 533,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "k8s_client": [
                    "str",
                    "int",
                    "typing.Callable[, ]"
                ],
                "ssh_config": [
                    "bool",
                    "list[int]",
                    "typing.Mapping"
                ]
            }
        },
        "VolumeClient.list": {
            "name": "list",
            "location": 542,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "VolumeClient._create": {
            "name": "_create",
            "location": 547,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "body": []
            }
        },
        "VolumeClient._get": {
            "name": "_get",
            "location": 557,
            "return": [],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "list[str]",
                    "None"
                ]
            }
        },
        "VolumeClient._delete": {
            "name": "_delete",
            "location": 563,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "bool",
                    "list[str]",
                    "None",
                    "tuple[typing.Union[str,str,str]]"
                ]
            }
        },
        "VolumeClient.compute_phase": {
            "name": "compute_phase",
            "location": 571,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "volume_status": [
                    "dict[str, typing.Any]"
                ]
            }
        },
        "VolumeClient.get_error": {
            "name": "get_error",
            "location": 588,
            "return": [
                "tuple[]",
                "tuple[typing.Text]"
            ],
            "arguments": {
                "volume_status": []
            }
        },
        "PersistentVolumeClient.__init__": {
            "name": "__init__",
            "location": 600,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "k8s_client": [
                    "int",
                    "list[int]",
                    "float",
                    "str"
                ]
            }
        },
        "PersistentVolumeClient.list": {
            "name": "list",
            "location": 606,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PersistentVolumeClient._create": {
            "name": "_create",
            "location": 609,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "body": [
                    "str",
                    "list['Query']"
                ]
            }
        },
        "PersistentVolumeClient._get": {
            "name": "_get",
            "location": 612,
            "return": [],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "bool"
                ]
            }
        },
        "PersistentVolumeClient._delete": {
            "name": "_delete",
            "location": 615,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "PersistentVolumeClaimClient.__init__": {
            "name": "__init__",
            "location": 625,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "k8s_client": [
                    "int",
                    "list[int]",
                    "float",
                    "str"
                ],
                "namespace": [
                    "typing.Text"
                ]
            }
        },
        "PersistentVolumeClaimClient.create_for_volume": {
            "name": "create_for_volume",
            "location": 632,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "volume": [
                    "str",
                    "None",
                    "int"
                ],
                "pv": [
                    "str",
                    "None",
                    "int"
                ]
            }
        },
        "PersistentVolumeClaimClient.list": {
            "name": "list",
            "location": 643,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PersistentVolumeClaimClient._create": {
            "name": "_create",
            "location": 648,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "body": [
                    "str"
                ]
            }
        },
        "PersistentVolumeClaimClient._get": {
            "name": "_get",
            "location": 653,
            "return": [],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "PersistentVolumeClaimClient._delete": {
            "name": "_delete",
            "location": 658,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "bool"
                ]
            }
        },
        "PodClient.__init__": {
            "name": "__init__",
            "location": 667,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "k8s_client": [
                    "float",
                    "int",
                    "str"
                ],
                "image": [
                    "bool",
                    "tuple[]",
                    "typing.Callable[..., None]",
                    "str",
                    "dict[str, typing.Any]",
                    "None"
                ],
                "namespace": [
                    "typing.Text"
                ]
            }
        },
        "PodClient.create_with_volume": {
            "name": "create_with_volume",
            "location": 674,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "volume_name": [
                    "str"
                ],
                "command": [
                    "str",
                    "float",
                    "int",
                    "None"
                ]
            }
        },
        "PodClient.list": {
            "name": "list",
            "location": 690,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PodClient._create": {
            "name": "_create",
            "location": 693,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "body": [
                    "str",
                    "None"
                ]
            }
        },
        "PodClient._get": {
            "name": "_get",
            "location": 696,
            "return": [],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "None"
                ]
            }
        },
        "PodClient._delete": {
            "name": "_delete",
            "location": 701,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "bool",
                    "None"
                ]
            }
        },
        "StorageClassClient.__init__": {
            "name": "__init__",
            "location": 710,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "k8s_client": [
                    "int",
                    "list[int]",
                    "float",
                    "str"
                ]
            }
        },
        "StorageClassClient.list": {
            "name": "list",
            "location": 715,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "StorageClassClient._create": {
            "name": "_create",
            "location": 718,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "body": [
                    "str",
                    "typing.Callable[, ]",
                    "typing.Any",
                    "None",
                    "list[str]",
                    "int"
                ]
            }
        },
        "StorageClassClient._get": {
            "name": "_get",
            "location": 721,
            "return": [],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "int",
                    "None",
                    "dict[, ]",
                    "list[str]"
                ]
            }
        },
        "StorageClassClient._delete": {
            "name": "_delete",
            "location": 724,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "None",
                    "tuple[typing.Union[int,int]]"
                ]
            }
        },
        "Client.wait_for_deletion._check_absence": {
            "name": "_check_absence",
            "location": 477,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "Client.check_deletion_marker._check_deletion_marker": {
            "name": "_check_deletion_marker",
            "location": 487,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    }
}
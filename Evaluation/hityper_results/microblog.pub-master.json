{
    "microblog.pub-master/app.py": {
        "inject_config": {
            "name": "inject_config",
            "location": 116,
            "return": [],
            "arguments": {}
        },
        "generate_request_id": {
            "name": "generate_request_id",
            "location": 181,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "set_x_powered_by": {
            "name": "set_x_powered_by",
            "location": 186,
            "return": [
                "dict[, ]",
                "typing.Iterator"
            ],
            "arguments": {
                "response": [
                    "dict[, ]",
                    "typing.Iterator"
                ]
            }
        },
        "handle_value_error": {
            "name": "handle_value_error",
            "location": 193,
            "return": [
                "dict[str, typing.Any]"
            ],
            "arguments": {
                "error": [
                    "Exception",
                    "list[A]",
                    "str",
                    "BaseException",
                    "None"
                ]
            }
        },
        "handle_activitypub_error": {
            "name": "handle_activitypub_error",
            "location": 203,
            "return": [
                "int",
                "dict[str, int]",
                "dict[int, str]",
                "dict[str, str]"
            ],
            "arguments": {
                "error": []
            }
        },
        "handle_task_error": {
            "name": "handle_task_error",
            "location": 213,
            "return": [
                "list[]"
            ],
            "arguments": {
                "error": [
                    "str",
                    "Exception",
                    "list[A]",
                    "bool",
                    "dict[, ]"
                ]
            }
        },
        "handle_500": {
            "name": "handle_500",
            "location": 223,
            "return": [],
            "arguments": {
                "e": [
                    "str",
                    "tuple[]",
                    "typing.Sequence[T]",
                    "typing.Callable[, ]"
                ]
            }
        },
        "_log_sig": {
            "name": "_log_sig",
            "location": 244,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "robots_txt": {
            "name": "robots_txt",
            "location": 271,
            "return": [
                "Response"
            ],
            "arguments": {}
        },
        "microblogpub_jsonld": {
            "name": "microblogpub_jsonld",
            "location": 276,
            "return": [
                "Response"
            ],
            "arguments": {}
        },
        "proxy": {
            "name": "proxy",
            "location": 286,
            "return": [
                "Response"
            ],
            "arguments": {
                "scheme": [
                    "str",
                    "dict[str, typing.Any]"
                ],
                "url": [
                    "str",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "serve_media": {
            "name": "serve_media",
            "location": 321,
            "return": [],
            "arguments": {
                "media_id": [
                    "str",
                    "int"
                ]
            }
        },
        "serve_uploads": {
            "name": "serve_uploads",
            "location": 339,
            "return": [],
            "arguments": {
                "oid": [
                    "dict[, ]",
                    "bool"
                ],
                "fname": [
                    "int",
                    "str",
                    "typing.Iterable['Context']"
                ]
            }
        },
        "remote_follow": {
            "name": "remote_follow",
            "location": 357,
            "return": [],
            "arguments": {}
        },
        "index": {
            "name": "index",
            "location": 374,
            "return": [],
            "arguments": {}
        },
        "all": {
            "name": "all",
            "location": 421,
            "return": [],
            "arguments": {}
        },
        "note_by_id": {
            "name": "note_by_id",
            "location": 442,
            "return": [],
            "arguments": {
                "note_id": [
                    "int",
                    "str"
                ]
            }
        },
        "outbox": {
            "name": "outbox",
            "location": 506,
            "return": [
                "Response"
            ],
            "arguments": {}
        },
        "ap_emoji": {
            "name": "ap_emoji",
            "location": 547,
            "return": [],
            "arguments": {
                "name": [
                    "str",
                    "typing.Sequence[str]"
                ]
            }
        },
        "outbox_detail": {
            "name": "outbox_detail",
            "location": 554,
            "return": [],
            "arguments": {
                "item_id": [
                    "str",
                    "int",
                    "float"
                ]
            }
        },
        "outbox_activity": {
            "name": "outbox_activity",
            "location": 577,
            "return": [],
            "arguments": {
                "item_id": [
                    "str",
                    "int",
                    "dict[, ]"
                ]
            }
        },
        "outbox_activity_replies": {
            "name": "outbox_activity_replies",
            "location": 598,
            "return": [],
            "arguments": {
                "item_id": [
                    "str",
                    "int",
                    "None",
                    "typing.Mapping"
                ]
            }
        },
        "outbox_activity_likes": {
            "name": "outbox_activity_likes",
            "location": 636,
            "return": [],
            "arguments": {
                "item_id": [
                    "str",
                    "int",
                    "bytes"
                ]
            }
        },
        "outbox_activity_shares": {
            "name": "outbox_activity_shares",
            "location": 676,
            "return": [],
            "arguments": {
                "item_id": [
                    "str",
                    "dict[, ]",
                    "int"
                ]
            }
        },
        "inbox": {
            "name": "inbox",
            "location": 715,
            "return": [
                "Response"
            ],
            "arguments": {}
        },
        "followers": {
            "name": "followers",
            "location": 871,
            "return": [],
            "arguments": {}
        },
        "following": {
            "name": "following",
            "location": 899,
            "return": [],
            "arguments": {}
        },
        "tags": {
            "name": "tags",
            "location": 947,
            "return": [],
            "arguments": {
                "tag": [
                    "str",
                    "list[str]",
                    "list[]",
                    "tuple[typing.Union[int,int]]"
                ]
            }
        },
        "featured": {
            "name": "featured",
            "location": 991,
            "return": [],
            "arguments": {}
        },
        "liked": {
            "name": "liked",
            "location": 1011,
            "return": [],
            "arguments": {}
        },
        "json_feed": {
            "name": "json_feed",
            "location": 1045,
            "return": [
                "Response"
            ],
            "arguments": {}
        },
        "atom_feed": {
            "name": "atom_feed",
            "location": 1053,
            "return": [
                "Response"
            ],
            "arguments": {}
        },
        "rss_feed": {
            "name": "rss_feed",
            "location": 1061,
            "return": [
                "Response"
            ],
            "arguments": {}
        },
        "proxy.data": {
            "name": "data",
            "location": 298,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {}
        }
    },
    "microblog.pub-master/config.py": {
        "_drop_db": {
            "name": "_drop_db",
            "location": 112,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "_admin_jwt_token": {
            "name": "_admin_jwt_token",
            "location": 126,
            "return": [],
            "arguments": {}
        }
    },
    "microblog.pub-master/startup.py": {},
    "microblog.pub-master/blueprints/admin.py": {
        "verify_pass": {
            "name": "verify_pass",
            "location": 56,
            "return": [],
            "arguments": {
                "pwd": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ]
            }
        },
        "admin_update_actor": {
            "name": "admin_update_actor",
            "location": 62,
            "return": [
                "typing.Text"
            ],
            "arguments": {}
        },
        "admin_logout": {
            "name": "admin_logout",
            "location": 78,
            "return": [],
            "arguments": {}
        },
        "admin_login": {
            "name": "admin_login",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "admin_index": {
            "name": "admin_index",
            "location": 136,
            "return": [],
            "arguments": {}
        },
        "admin_indieauth": {
            "name": "admin_indieauth",
            "location": 172,
            "return": [],
            "arguments": {}
        },
        "admin_tasks": {
            "name": "admin_tasks",
            "location": 183,
            "return": [],
            "arguments": {}
        },
        "admin_lookup": {
            "name": "admin_lookup",
            "location": 197,
            "return": [],
            "arguments": {}
        },
        "admin_profile": {
            "name": "admin_profile",
            "location": 245,
            "return": [],
            "arguments": {}
        },
        "admin_thread": {
            "name": "admin_thread",
            "location": 295,
            "return": [],
            "arguments": {}
        },
        "admin_new": {
            "name": "admin_new",
            "location": 323,
            "return": [],
            "arguments": {}
        },
        "admin_direct_messages": {
            "name": "admin_direct_messages",
            "location": 384,
            "return": [],
            "arguments": {}
        },
        "admin_lists": {
            "name": "admin_lists",
            "location": 442,
            "return": [],
            "arguments": {}
        },
        "admin_notifications": {
            "name": "admin_notifications",
            "location": 450,
            "return": [],
            "arguments": {}
        },
        "admin_stream": {
            "name": "admin_stream",
            "location": 539,
            "return": [],
            "arguments": {}
        },
        "admin_list": {
            "name": "admin_list",
            "location": 561,
            "return": [],
            "arguments": {
                "name": [
                    "dict[str, str]",
                    "str",
                    "typing.Type"
                ]
            }
        },
        "admin_bookmarks": {
            "name": "admin_bookmarks",
            "location": 595,
            "return": [],
            "arguments": {}
        },
        "u2f_register": {
            "name": "u2f_register",
            "location": 617,
            "return": [],
            "arguments": {}
        },
        "authorize_follow": {
            "name": "authorize_follow",
            "location": 634,
            "return": [],
            "arguments": {}
        }
    },
    "microblog.pub-master/blueprints/api.py": {
        "without_id": {
            "name": "without_id",
            "location": 60,
            "return": [
                "list[str]"
            ],
            "arguments": {
                "l": [
                    "list[str]",
                    "str"
                ]
            }
        },
        "_api_required": {
            "name": "_api_required",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "api_required": {
            "name": "api_required",
            "location": 88,
            "return": [],
            "arguments": {
                "f": [
                    "typing.Iterable[str]",
                    "typing.Callable[, ]"
                ]
            }
        },
        "_user_api_arg": {
            "name": "_user_api_arg",
            "location": 101,
            "return": [
                "dict[str, typing.Any]",
                "str",
                "dict[str, typing.Union[float,str]]"
            ],
            "arguments": {
                "key": [
                    "str",
                    "int"
                ]
            }
        },
        "_user_api_get_note": {
            "name": "_user_api_get_note",
            "location": 119,
            "return": [
                "str",
                "float",
                "dict[str, float]",
                "set[str]"
            ],
            "arguments": {
                "from_outbox": [
                    "bool"
                ]
            }
        },
        "_user_api_response": {
            "name": "_user_api_response",
            "location": 131,
            "return": [],
            "arguments": {}
        },
        "api_user_key": {
            "name": "api_user_key",
            "location": 143,
            "return": [],
            "arguments": {}
        },
        "api_delete": {
            "name": "api_delete",
            "location": 149,
            "return": [],
            "arguments": {}
        },
        "api_boost": {
            "name": "api_boost",
            "location": 170,
            "return": [],
            "arguments": {}
        },
        "api_ack_reply": {
            "name": "api_ack_reply",
            "location": 192,
            "return": [],
            "arguments": {}
        },
        "api_mark_notification_as_read": {
            "name": "api_mark_notification_as_read",
            "location": 217,
            "return": [],
            "arguments": {}
        },
        "api_vote": {
            "name": "api_vote",
            "location": 230,
            "return": [],
            "arguments": {}
        },
        "api_like": {
            "name": "api_like",
            "location": 256,
            "return": [],
            "arguments": {}
        },
        "api_bookmark": {
            "name": "api_bookmark",
            "location": 289,
            "return": [],
            "arguments": {}
        },
        "api_pin": {
            "name": "api_pin",
            "location": 308,
            "return": [],
            "arguments": {}
        },
        "api_unpin": {
            "name": "api_unpin",
            "location": 321,
            "return": [],
            "arguments": {}
        },
        "api_undo": {
            "name": "api_undo",
            "location": 334,
            "return": [],
            "arguments": {}
        },
        "api_accept_follow": {
            "name": "api_accept_follow",
            "location": 364,
            "return": [],
            "arguments": {}
        },
        "api_new_list": {
            "name": "api_new_list",
            "location": 382,
            "return": [],
            "arguments": {}
        },
        "api_delete_list": {
            "name": "api_delete_list",
            "location": 395,
            "return": [],
            "arguments": {}
        },
        "api_add_to_list": {
            "name": "api_add_to_list",
            "location": 410,
            "return": [],
            "arguments": {}
        },
        "api_remove_from_list": {
            "name": "api_remove_from_list",
            "location": 429,
            "return": [],
            "arguments": {}
        },
        "api_new_note": {
            "name": "api_new_note",
            "location": 448,
            "return": [],
            "arguments": {}
        },
        "api_new_question": {
            "name": "api_new_question",
            "location": 619,
            "return": [],
            "arguments": {}
        },
        "api_block": {
            "name": "api_block",
            "location": 696,
            "return": [],
            "arguments": {}
        },
        "api_follow": {
            "name": "api_follow",
            "location": 718,
            "return": [],
            "arguments": {}
        },
        "api_debug": {
            "name": "api_debug",
            "location": 747,
            "return": [],
            "arguments": {}
        },
        "api_stream": {
            "name": "api_stream",
            "location": 767,
            "return": [],
            "arguments": {}
        },
        "api_required.decorated_function": {
            "name": "decorated_function",
            "location": 90,
            "return": [],
            "arguments": {}
        }
    },
    "microblog.pub-master/blueprints/indieauth.py": {
        "build_auth_resp": {
            "name": "build_auth_resp",
            "location": 28,
            "return": [
                "Response"
            ],
            "arguments": {
                "payload": [
                    "dict[, ]",
                    "typing.Mapping",
                    "bool",
                    "list[str]",
                    "None"
                ]
            }
        },
        "_get_prop": {
            "name": "_get_prop",
            "location": 38,
            "return": [
                "str",
                "dict[str, list[typing.Any]]",
                "dict[typing.Any, str]",
                "list[]",
                "None",
                "list[str]",
                "bool"
            ],
            "arguments": {
                "props": [
                    "dict[, ]",
                    "dict[str, typing.Any]"
                ],
                "name": [
                    "dict[, ]",
                    "str",
                    "None",
                    "list[str]",
                    "dict[str, typing.Any]"
                ],
                "default": [
                    "None",
                    "list[str]",
                    "bool",
                    "str"
                ]
            }
        },
        "get_client_id_data": {
            "name": "get_client_id_data",
            "location": 47,
            "return": [],
            "arguments": {
                "url": [
                    "str",
                    "tuple[str]",
                    "None",
                    "dict[str, typing.Any]",
                    "dict[, ]"
                ]
            }
        },
        "indieauth_flow": {
            "name": "indieauth_flow",
            "location": 64,
            "return": [],
            "arguments": {}
        },
        "indieauth_endpoint": {
            "name": "indieauth_endpoint",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "token_endpoint": {
            "name": "token_endpoint",
            "location": 162,
            "return": [],
            "arguments": {}
        }
    },
    "microblog.pub-master/blueprints/tasks.py": {
        "task_update_question": {
            "name": "task_update_question",
            "location": 68,
            "return": [
                "typing.Text"
            ],
            "arguments": {}
        },
        "task_send_actor_update": {
            "name": "task_send_actor_update",
            "location": 109,
            "return": [
                "typing.Text"
            ],
            "arguments": {}
        },
        "task_fetch_og_meta": {
            "name": "task_fetch_og_meta",
            "location": 131,
            "return": [
                "typing.Text"
            ],
            "arguments": {}
        },
        "task_cache_object": {
            "name": "task_cache_object",
            "location": 170,
            "return": [
                "typing.Text"
            ],
            "arguments": {}
        },
        "task_finish_post_to_outbox": {
            "name": "task_finish_post_to_outbox",
            "location": 208,
            "return": [
                "typing.Text"
            ],
            "arguments": {}
        },
        "task_finish_post_to_inbox": {
            "name": "task_finish_post_to_inbox",
            "location": 237,
            "return": [
                "typing.Text"
            ],
            "arguments": {}
        },
        "select_video_to_cache": {
            "name": "select_video_to_cache",
            "location": 256,
            "return": [
                "None",
                "dict[typing.Text, typing.Text]"
            ],
            "arguments": {
                "links": [
                    "str",
                    "tuple[typing.Union[int,int]]"
                ]
            }
        },
        "task_cache_attachments": {
            "name": "task_cache_attachments",
            "location": 278,
            "return": [
                "typing.Text"
            ],
            "arguments": {}
        },
        "task_cache_attachment": {
            "name": "task_cache_attachment",
            "location": 326,
            "return": [
                "typing.Text"
            ],
            "arguments": {}
        },
        "task_send_webmention": {
            "name": "task_send_webmention",
            "location": 345,
            "return": [
                "typing.Text"
            ],
            "arguments": {}
        },
        "task_cache_actor": {
            "name": "task_cache_actor",
            "location": 380,
            "return": [
                "typing.Text"
            ],
            "arguments": {}
        },
        "task_cache_actor_icon": {
            "name": "task_cache_actor_icon",
            "location": 439,
            "return": [
                "typing.Text"
            ],
            "arguments": {}
        },
        "task_cache_emoji": {
            "name": "task_cache_emoji",
            "location": 455,
            "return": [
                "typing.Text"
            ],
            "arguments": {}
        },
        "task_forward_activity": {
            "name": "task_forward_activity",
            "location": 471,
            "return": [
                "typing.Text"
            ],
            "arguments": {}
        },
        "task_post_to_remote_inbox": {
            "name": "task_post_to_remote_inbox",
            "location": 492,
            "return": [
                "typing.Text"
            ],
            "arguments": {}
        },
        "task_fetch_remote_question": {
            "name": "task_fetch_remote_question",
            "location": 540,
            "return": [
                "typing.Text"
            ],
            "arguments": {}
        },
        "task_cleanup": {
            "name": "task_cleanup",
            "location": 605,
            "return": [
                "typing.Text"
            ],
            "arguments": {}
        },
        "_is_local_reply": {
            "name": "_is_local_reply",
            "location": 612,
            "return": [
                "bool"
            ],
            "arguments": {
                "activity": [
                    "int"
                ]
            }
        },
        "task_process_reply": {
            "name": "task_process_reply",
            "location": 625,
            "return": [
                "typing.Text"
            ],
            "arguments": {}
        },
        "task_process_new_activity": {
            "name": "task_process_new_activity",
            "location": 736,
            "return": [
                "typing.Text"
            ],
            "arguments": {}
        },
        "TaskError.__init__": {
            "name": "__init__",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "microblog.pub-master/blueprints/well_known.py": {
        "wellknown_webfinger": {
            "name": "wellknown_webfinger",
            "location": 18,
            "return": [],
            "arguments": {}
        },
        "wellknown_nodeinfo": {
            "name": "wellknown_nodeinfo",
            "location": 51,
            "return": [],
            "arguments": {}
        },
        "nodeinfo": {
            "name": "nodeinfo",
            "location": 66,
            "return": [],
            "arguments": {}
        }
    },
    "microblog.pub-master/blueprints/__init__.py": {},
    "microblog.pub-master/core/activitypub.py": {
        "is_from_outbox": {
            "name": "is_from_outbox",
            "location": 59,
            "return": [],
            "arguments": {
                "activity": [
                    "BaseException",
                    "None",
                    "float",
                    "str"
                ]
            }
        },
        "is_local_url": {
            "name": "is_local_url",
            "location": 63,
            "return": [
                "bool"
            ],
            "arguments": {
                "url": [
                    "str",
                    "typing.Callable[str, str]",
                    "dict[str, typing.Union[str,int]]"
                ]
            }
        },
        "_remove_id": {
            "name": "_remove_id",
            "location": 67,
            "return": [],
            "arguments": {
                "doc": []
            }
        },
        "_answer_key": {
            "name": "_answer_key",
            "location": 75,
            "return": [],
            "arguments": {
                "choice": [
                    "str"
                ]
            }
        },
        "_actor_url": {
            "name": "_actor_url",
            "location": 81,
            "return": [
                "str"
            ],
            "arguments": {
                "actor": [
                    "str",
                    "dict[, ]"
                ]
            }
        },
        "_actor_hash": {
            "name": "_actor_hash",
            "location": 99,
            "return": [],
            "arguments": {
                "actor": [],
                "local": [
                    "bool"
                ]
            }
        },
        "_is_local_reply": {
            "name": "_is_local_reply",
            "location": 122,
            "return": [
                "bool"
            ],
            "arguments": {
                "create": [
                    "list[int]",
                    "list[typing.Type]",
                    "int"
                ]
            }
        },
        "_meta": {
            "name": "_meta",
            "location": 134,
            "return": [
                "dict[, typing.Union[bool,None]]"
            ],
            "arguments": {
                "activity": []
            }
        },
        "save": {
            "name": "save",
            "location": 168,
            "return": [
                "None"
            ],
            "arguments": {
                "box": [
                    "float"
                ],
                "activity": []
            }
        },
        "outbox_is_blocked": {
            "name": "outbox_is_blocked",
            "location": 197,
            "return": [
                "bool"
            ],
            "arguments": {
                "actor_id": [
                    "str",
                    "bool",
                    "None"
                ]
            }
        },
        "activity_url": {
            "name": "activity_url",
            "location": 210,
            "return": [],
            "arguments": {
                "item_id": [
                    "str",
                    "int"
                ]
            }
        },
        "post_to_inbox": {
            "name": "post_to_inbox",
            "location": 214,
            "return": [
                "None"
            ],
            "arguments": {
                "activity": []
            }
        },
        "save_reply": {
            "name": "save_reply",
            "location": 275,
            "return": [
                "None"
            ],
            "arguments": {
                "activity": [],
                "meta": [
                    "dict[, ]"
                ]
            }
        },
        "new_context": {
            "name": "new_context",
            "location": 301,
            "return": [
                "str"
            ],
            "arguments": {
                "parent": [
                    "None",
                    "str",
                    "typing.Sequence[core.ICanonicalSource]"
                ]
            }
        },
        "post_to_outbox": {
            "name": "post_to_outbox",
            "location": 318,
            "return": [],
            "arguments": {
                "activity": []
            }
        },
        "embed_collection": {
            "name": "embed_collection",
            "location": 520,
            "return": [
                "dict[typing.Text, typing.Text]"
            ],
            "arguments": {
                "total_items": [
                    "str"
                ],
                "first_page_id": [
                    "str"
                ]
            }
        },
        "simple_build_ordered_collection": {
            "name": "simple_build_ordered_collection",
            "location": 530,
            "return": [
                "dict[typing.Text, int]"
            ],
            "arguments": {
                "col_name": [
                    "str",
                    "bool",
                    "dict[str, int]"
                ],
                "data": []
            }
        },
        "build_ordered_collection": {
            "name": "build_ordered_collection",
            "location": 540,
            "return": [
                "dict[typing.Text, typing.Union[int,list[]]]"
            ],
            "arguments": {
                "col": [
                    "dict[str, str]",
                    "str",
                    "bool",
                    "typing.Callable[, ]",
                    "tuple[bool]",
                    "list[dict[str, typing.Any]]"
                ],
                "q": [
                    "None",
                    "dict[, ]",
                    "str",
                    "dict[str, typing.Any]",
                    "typing.Callable[, ]"
                ],
                "cursor": [
                    "None",
                    "bool",
                    "str",
                    "typing.Callable[str, str]",
                    "dict[str, str]"
                ],
                "map_func": [
                    "None",
                    "str",
                    "dict[str, str]",
                    "list[str]"
                ],
                "limit": [
                    "int"
                ],
                "col_name": [
                    "None",
                    "str",
                    "typing.Sequence[typing.Any]",
                    "typing.Callable[, ]"
                ],
                "first_page": [
                    "bool"
                ]
            }
        },
        "_add_answers_to_question": {
            "name": "_add_answers_to_question",
            "location": 625,
            "return": [
                "None"
            ],
            "arguments": {
                "raw_doc": []
            }
        },
        "add_extra_collection": {
            "name": "add_extra_collection",
            "location": 644,
            "return": [],
            "arguments": {
                "raw_doc": []
            }
        },
        "remove_context": {
            "name": "remove_context",
            "location": 666,
            "return": [
                "str"
            ],
            "arguments": {
                "activity": [
                    "str"
                ]
            }
        },
        "activity_from_doc": {
            "name": "activity_from_doc",
            "location": 672,
            "return": [
                "str",
                "bool",
                "dict[str, str]",
                "dict[str, tuple[typing.Union[str,bool]]]"
            ],
            "arguments": {
                "raw_doc": [
                    "str",
                    "bool",
                    "list[str]",
                    "dict[, ]"
                ],
                "embed": [
                    "bool"
                ]
            }
        },
        "_cache_actor_icon": {
            "name": "_cache_actor_icon",
            "location": 684,
            "return": [
                "None"
            ],
            "arguments": {
                "actor": [
                    "typing.Iterable[T]"
                ]
            }
        },
        "update_cached_actor": {
            "name": "update_cached_actor",
            "location": 692,
            "return": [
                "None"
            ],
            "arguments": {
                "actor": []
            }
        },
        "handle_question_reply": {
            "name": "handle_question_reply",
            "location": 732,
            "return": [
                "None"
            ],
            "arguments": {
                "create": [
                    "str",
                    "float",
                    "dict[str, float]"
                ],
                "question": [
                    "str",
                    "dict[, ]",
                    "float",
                    "int"
                ]
            }
        },
        "handle_replies": {
            "name": "handle_replies",
            "location": 783,
            "return": [
                "None"
            ],
            "arguments": {
                "create": []
            }
        },
        "accept_follow": {
            "name": "accept_follow",
            "location": 849,
            "return": [],
            "arguments": {
                "activity": []
            }
        },
        "MicroblogPubBackend.ap_context": {
            "name": "ap_context",
            "location": 345,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MicroblogPubBackend.base_url": {
            "name": "base_url",
            "location": 348,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MicroblogPubBackend.debug_mode": {
            "name": "debug_mode",
            "location": 351,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MicroblogPubBackend.user_agent": {
            "name": "user_agent",
            "location": 354,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MicroblogPubBackend.followers": {
            "name": "followers",
            "location": 358,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MicroblogPubBackend.followers_as_recipients": {
            "name": "followers_as_recipients",
            "location": 366,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MicroblogPubBackend.following": {
            "name": "following",
            "location": 380,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MicroblogPubBackend.parse_collection": {
            "name": "parse_collection",
            "location": 388,
            "return": [],
            "arguments": {
                "self": [],
                "payload": [
                    "None",
                    "dict[str, typing.Any]",
                    "str",
                    "bool"
                ],
                "url": [
                    "None",
                    "str"
                ]
            }
        },
        "MicroblogPubBackend._fetch_iri": {
            "name": "_fetch_iri",
            "location": 400,
            "return": [
                "dict[typing.Text, typing.Union[typing.Text,list[]]]",
                "dict[str, typing.Any]",
                "int",
                "typing.Any",
                "str",
                "dict[, ]"
            ],
            "arguments": {
                "self": [],
                "iri": [
                    "str"
                ]
            }
        },
        "MicroblogPubBackend.fetch_iri": {
            "name": "fetch_iri",
            "location": 507,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "iri": [
                    "dict[str, typing.Any]",
                    "Exception"
                ]
            }
        }
    },
    "microblog.pub-master/core/db.py": {
        "find_one_activity": {
            "name": "find_one_activity",
            "location": 21,
            "return": [],
            "arguments": {
                "q": [
                    "dict[, ]",
                    "dict[str, typing.Any]",
                    "typing.Mapping"
                ]
            }
        },
        "find_activities": {
            "name": "find_activities",
            "location": 25,
            "return": [],
            "arguments": {
                "q": [
                    "dict[, ]",
                    "str",
                    "typing.Type"
                ]
            }
        },
        "update_one_activity": {
            "name": "update_one_activity",
            "location": 29,
            "return": [
                "bool"
            ],
            "arguments": {
                "q": [
                    "dict[, ]"
                ],
                "update": [
                    "dict[, ]"
                ]
            }
        },
        "update_many_activities": {
            "name": "update_many_activities",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "q": [
                    "dict[, ]",
                    "str",
                    "typing.Type",
                    "dict[str, typing.Any]"
                ],
                "update": [
                    "dict[, ]",
                    "str",
                    "typing.Type",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "update_one_remote": {
            "name": "update_one_remote",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "filter_": [
                    "bool",
                    "dict[str, set[str]]",
                    "typing.Hashable",
                    "typing.Type"
                ],
                "update": [
                    "bool",
                    "dict[str, set[str]]",
                    "typing.Hashable",
                    "typing.Type"
                ],
                "upsert": [
                    "bool"
                ]
            }
        }
    },
    "microblog.pub-master/core/feed.py": {
        "gen_feed": {
            "name": "gen_feed",
            "location": 16,
            "return": [],
            "arguments": {}
        },
        "json_feed": {
            "name": "json_feed",
            "location": 42,
            "return": [],
            "arguments": {
                "path": []
            }
        },
        "build_inbox_json_feed": {
            "name": "build_inbox_json_feed",
            "location": 82,
            "return": [],
            "arguments": {
                "path": [],
                "request_cursor": []
            }
        }
    },
    "microblog.pub-master/core/gc.py": {
        "threads_of_interest": {
            "name": "threads_of_interest",
            "location": 33,
            "return": [
                "list[]"
            ],
            "arguments": {}
        },
        "_keep": {
            "name": "_keep",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "data": []
            }
        },
        "perform": {
            "name": "perform",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "microblog.pub-master/core/inbox.py": {
        "process_inbox": {
            "name": "process_inbox",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "activity": [
                    "str"
                ],
                "new_meta": [
                    "str",
                    "None",
                    "list[float]"
                ]
            }
        },
        "_delete_process_inbox": {
            "name": "_delete_process_inbox",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "delete": [],
                "new_meta": [
                    "str",
                    "bool",
                    "list[str]"
                ]
            }
        },
        "_update_process_inbox": {
            "name": "_update_process_inbox",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "update": [],
                "new_meta": [
                    "str",
                    "typing.Type"
                ]
            }
        },
        "_create_process_inbox": {
            "name": "_create_process_inbox",
            "location": 109,
            "return": [
                "None"
            ],
            "arguments": {
                "create": [],
                "new_meta": [
                    "int",
                    "str",
                    "typing.Sequence[str]"
                ]
            }
        },
        "_announce_process_inbox": {
            "name": "_announce_process_inbox",
            "location": 123,
            "return": [
                "None"
            ],
            "arguments": {
                "announce": [],
                "new_meta": [
                    "str",
                    "None",
                    "list[float]"
                ]
            }
        },
        "_like_process_inbox": {
            "name": "_like_process_inbox",
            "location": 167,
            "return": [
                "None"
            ],
            "arguments": {
                "like": [],
                "new_meta": [
                    "str",
                    "None",
                    "list[float]"
                ]
            }
        },
        "_emoji_reaction_process_inbox": {
            "name": "_emoji_reaction_process_inbox",
            "location": 178,
            "return": [
                "None"
            ],
            "arguments": {
                "emoji_reaction": [],
                "new_meta": [
                    "bool",
                    "list[]"
                ]
            }
        },
        "_follow_process_inbox": {
            "name": "_follow_process_inbox",
            "location": 207,
            "return": [
                "None"
            ],
            "arguments": {
                "activity": [
                    "str",
                    "list[M]",
                    "typing.MutableMapping",
                    "typing.Callable[, ]",
                    "dict[str, typing.Any]",
                    "int"
                ],
                "new_meta": [
                    "str",
                    "None",
                    "list[float]"
                ]
            }
        },
        "_update_follow_status": {
            "name": "_update_follow_status",
            "location": 219,
            "return": [
                "None"
            ],
            "arguments": {
                "follow_id": [
                    "str",
                    "int",
                    "dict[, ]"
                ],
                "status": [
                    "str",
                    "int",
                    "dict[, ]"
                ]
            }
        },
        "_accept_process_inbox": {
            "name": "_accept_process_inbox",
            "location": 227,
            "return": [
                "None"
            ],
            "arguments": {
                "activity": [],
                "new_meta": [
                    "str",
                    "None",
                    "list[float]"
                ]
            }
        },
        "_reject_process_inbox": {
            "name": "_reject_process_inbox",
            "location": 235,
            "return": [
                "None"
            ],
            "arguments": {
                "activity": [],
                "new_meta": [
                    "str",
                    "None",
                    "list[float]"
                ]
            }
        },
        "_undo_process_inbox": {
            "name": "_undo_process_inbox",
            "location": 242,
            "return": [
                "None"
            ],
            "arguments": {
                "activity": [],
                "new_meta": [
                    "str",
                    "None",
                    "list[float]"
                ]
            }
        }
    },
    "microblog.pub-master/core/indexes.py": {
        "create_indexes": {
            "name": "create_indexes",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "microblog.pub-master/core/jsonld.py": {},
    "microblog.pub-master/core/meta.py": {
        "_meta": {
            "name": "_meta",
            "location": 76,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "mk": [
                    "typing.DefaultDict",
                    "typing.OrderedDict",
                    "str",
                    "int"
                ]
            }
        },
        "flag": {
            "name": "flag",
            "location": 80,
            "return": [
                "dict[, typing.Union[int,str,None]]"
            ],
            "arguments": {
                "mk": [
                    "int",
                    "str",
                    "None"
                ],
                "val": [
                    "int",
                    "str",
                    "None"
                ]
            }
        },
        "by_remote_id": {
            "name": "by_remote_id",
            "location": 84,
            "return": [
                "dict[typing.Text, typing.Union[str,list[str],int]]"
            ],
            "arguments": {
                "remote_id": [
                    "str",
                    "list[str]",
                    "int"
                ]
            }
        },
        "in_inbox": {
            "name": "in_inbox",
            "location": 88,
            "return": [
                "dict[typing.Text, ]"
            ],
            "arguments": {}
        },
        "in_outbox": {
            "name": "in_outbox",
            "location": 92,
            "return": [
                "dict[typing.Text, ]"
            ],
            "arguments": {}
        },
        "by_type": {
            "name": "by_type",
            "location": 96,
            "return": [
                "dict[typing.Text, dict[typing.Text, list[]]]",
                "dict[typing.Text, ]"
            ],
            "arguments": {
                "type_": [
                    "dict[str, typing.Any]"
                ]
            }
        },
        "follow_request_accepted": {
            "name": "follow_request_accepted",
            "location": 103,
            "return": [],
            "arguments": {}
        },
        "not_poll_answer": {
            "name": "not_poll_answer",
            "location": 107,
            "return": [],
            "arguments": {}
        },
        "not_in_reply_to": {
            "name": "not_in_reply_to",
            "location": 111,
            "return": [
                "dict[typing.Text, None]"
            ],
            "arguments": {}
        },
        "not_undo": {
            "name": "not_undo",
            "location": 115,
            "return": [],
            "arguments": {}
        },
        "not_deleted": {
            "name": "not_deleted",
            "location": 119,
            "return": [],
            "arguments": {}
        },
        "pinned": {
            "name": "pinned",
            "location": 123,
            "return": [],
            "arguments": {}
        },
        "by_actor": {
            "name": "by_actor",
            "location": 127,
            "return": [],
            "arguments": {
                "actor": [
                    "str",
                    "typing.Type",
                    "typing.TextIO"
                ]
            }
        },
        "by_actor_id": {
            "name": "by_actor_id",
            "location": 131,
            "return": [],
            "arguments": {
                "actor_id": [
                    "str",
                    "int"
                ]
            }
        },
        "by_object_id": {
            "name": "by_object_id",
            "location": 135,
            "return": [],
            "arguments": {
                "object_id": [
                    "str",
                    "int"
                ]
            }
        },
        "is_public": {
            "name": "is_public",
            "location": 139,
            "return": [],
            "arguments": {}
        },
        "by_visibility": {
            "name": "by_visibility",
            "location": 143,
            "return": [],
            "arguments": {
                "vis": [
                    "bool",
                    "str",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "by_object_visibility": {
            "name": "by_object_visibility",
            "location": 147,
            "return": [],
            "arguments": {
                "vis": [
                    "str",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "by_hashtag": {
            "name": "by_hashtag",
            "location": 151,
            "return": [],
            "arguments": {
                "ht": [
                    "str",
                    "list[int]"
                ]
            }
        },
        "inc": {
            "name": "inc",
            "location": 155,
            "return": [
                "dict[typing.Text, ]"
            ],
            "arguments": {
                "mk": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ],
                "val": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ]
            }
        },
        "upsert": {
            "name": "upsert",
            "location": 159,
            "return": [
                "dict[typing.Text, dict[, tuple[typing.Union[str,typing.Any]]]]"
            ],
            "arguments": {
                "data": [
                    "dict[, ]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "published_after": {
            "name": "published_after",
            "location": 168,
            "return": [],
            "arguments": {
                "dt": [
                    "str",
                    "None",
                    "dict[str, str]"
                ]
            }
        }
    },
    "microblog.pub-master/core/migrations.py": {
        "_1_MetaMigration.__guess_visibility": {
            "name": "__guess_visibility",
            "location": 36,
            "return": [],
            "arguments": {
                "self": [],
                "data": [
                    "dict[, ]"
                ]
            }
        },
        "_1_MetaMigration.migrate": {
            "name": "migrate",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "_2_FollowMigration.migrate": {
            "name": "migrate",
            "location": 133,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "_20190830_MetaPublishedMigration.migrate": {
            "name": "migrate",
            "location": 175,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "_20190830_FollowFollowBackMigration.migrate": {
            "name": "migrate",
            "location": 199,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "_20190901_FollowFollowBackMigrationFix.migrate": {
            "name": "migrate",
            "location": 251,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "_20190901_MetaHashtagsAndMentions.migrate": {
            "name": "migrate",
            "location": 300,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "_20190906_InReplyToMigration.migrate": {
            "name": "migrate",
            "location": 328,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "_20191020_ManuallyApprovesFollowerSupportMigrationn.migrate": {
            "name": "migrate",
            "location": 355,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "_20191106_PlaceTagToLocation.migrate": {
            "name": "migrate",
            "location": 367,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "microblog.pub-master/core/notifications.py": {
        "_flag_as_notification": {
            "name": "_flag_as_notification",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "activity": [
                    "list[list[typing.Any]]",
                    "int",
                    "list[]",
                    "str"
                ],
                "new_meta": [
                    "dict[, ]"
                ]
            }
        },
        "_set_flag": {
            "name": "_set_flag",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "meta": [
                    "dict[, ]"
                ],
                "meta_key": [
                    "str",
                    "dict[, ]"
                ],
                "value": [
                    "bool"
                ]
            }
        },
        "set_inbox_flags": {
            "name": "set_inbox_flags",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "activity": [
                    "str",
                    "bool"
                ],
                "new_meta": [
                    "str",
                    "bool"
                ]
            }
        },
        "_accept_set_inbox_flags": {
            "name": "_accept_set_inbox_flags",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "activity": [],
                "new_meta": [
                    "str"
                ]
            }
        },
        "_reject_set_inbox_flags": {
            "name": "_reject_set_inbox_flags",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "activity": [
                    "str",
                    "typing.Callable[, ]",
                    "typing.Mapping",
                    "bytes"
                ],
                "new_meta": [
                    "float",
                    "None",
                    "bytes",
                    "str"
                ]
            }
        },
        "_follow_set_inbox_flags": {
            "name": "_follow_set_inbox_flags",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "activity": [],
                "new_meta": [
                    "str"
                ]
            }
        },
        "_like_set_inbox_flags": {
            "name": "_like_set_inbox_flags",
            "location": 115,
            "return": [
                "None"
            ],
            "arguments": {
                "activity": [],
                "new_meta": [
                    "float",
                    "None",
                    "bytes",
                    "str"
                ]
            }
        },
        "_announce_set_inbox_flags": {
            "name": "_announce_set_inbox_flags",
            "location": 132,
            "return": [
                "None"
            ],
            "arguments": {
                "activity": [],
                "new_meta": [
                    "str"
                ]
            }
        },
        "_undo_set_inbox_flags": {
            "name": "_undo_set_inbox_flags",
            "location": 160,
            "return": [
                "None"
            ],
            "arguments": {
                "activity": [],
                "new_meta": [
                    "float",
                    "None",
                    "bytes",
                    "str"
                ]
            }
        },
        "_create_set_inbox_flags": {
            "name": "_create_set_inbox_flags",
            "location": 175,
            "return": [
                "None"
            ],
            "arguments": {
                "activity": [],
                "new_meta": [
                    "str",
                    "list[str]"
                ]
            }
        }
    },
    "microblog.pub-master/core/outbox.py": {
        "process_outbox": {
            "name": "process_outbox",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "activity": [
                    "str"
                ],
                "new_meta": [
                    "str",
                    "None",
                    "list[float]"
                ]
            }
        },
        "_delete_process_outbox": {
            "name": "_delete_process_outbox",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "delete": [],
                "new_meta": [
                    "str",
                    "bool",
                    "list[str]"
                ]
            }
        },
        "_update_process_outbox": {
            "name": "_update_process_outbox",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "update": [
                    "str",
                    "int",
                    "tuple[typing.Union[int,int]]",
                    "None",
                    "typing.Callable[typing.Any, str]"
                ],
                "new_meta": [
                    "str",
                    "typing.Type"
                ]
            }
        },
        "_create_process_outbox": {
            "name": "_create_process_outbox",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {
                "create": [
                    "str",
                    "typing.Callable[, ]",
                    "BaseException"
                ],
                "new_meta": [
                    "int",
                    "str",
                    "typing.Sequence[str]"
                ]
            }
        },
        "_announce_process_outbox": {
            "name": "_announce_process_outbox",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {
                "announce": [],
                "new_meta": [
                    "str",
                    "None",
                    "list[float]"
                ]
            }
        },
        "_like_process_outbox": {
            "name": "_like_process_outbox",
            "location": 109,
            "return": [
                "None"
            ],
            "arguments": {
                "like": [],
                "new_meta": [
                    "str",
                    "None",
                    "list[float]"
                ]
            }
        },
        "_undo_process_outbox": {
            "name": "_undo_process_outbox",
            "location": 126,
            "return": [
                "None"
            ],
            "arguments": {
                "undo": [],
                "new_meta": [
                    "str",
                    "None",
                    "list[float]"
                ]
            }
        }
    },
    "microblog.pub-master/core/remote.py": {
        "server": {
            "name": "server",
            "location": 8,
            "return": [],
            "arguments": {
                "url": [
                    "str"
                ]
            }
        },
        "_update": {
            "name": "_update",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "url": [
                    "str",
                    "int"
                ],
                "replace": [
                    "str",
                    "int"
                ]
            }
        },
        "track_successful_send": {
            "name": "track_successful_send",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "url": [
                    "str",
                    "list[str]",
                    "typing.AnyStr"
                ]
            }
        },
        "track_failed_send": {
            "name": "track_failed_send",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "url": [
                    "str"
                ]
            }
        }
    },
    "microblog.pub-master/core/shared.py": {
        "build_resp": {
            "name": "build_resp",
            "location": 50,
            "return": [
                "tuple[dict[typing.Text, typing.Union[dict[typing.Text, typing.Text],typing.Text]]]",
                "tuple[typing.Union[str,dict[typing.Text, typing.Text]]]"
            ],
            "arguments": {
                "resp": [
                    "str"
                ]
            }
        },
        "jsonify": {
            "name": "jsonify",
            "location": 63,
            "return": [
                "Response"
            ],
            "arguments": {
                "data": [
                    "str",
                    "dict[, ]",
                    "int",
                    "bytes",
                    "None",
                    "typing.MutableMapping"
                ],
                "content_type": [
                    "typing.Text"
                ]
            }
        },
        "htmlify": {
            "name": "htmlify",
            "location": 68,
            "return": [
                "Response"
            ],
            "arguments": {
                "data": [
                    "str",
                    "bytes",
                    "list[str]",
                    "int",
                    "typing.Mapping",
                    "typing.Callable[, ]"
                ]
            }
        },
        "activitypubify": {
            "name": "activitypubify",
            "location": 75,
            "return": [
                "Response"
            ],
            "arguments": {}
        },
        "is_api_request": {
            "name": "is_api_request",
            "location": 84,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "add_response_headers": {
            "name": "add_response_headers",
            "location": 94,
            "return": [],
            "arguments": {
                "headers": [
                    "dict[, ]"
                ]
            }
        },
        "noindex": {
            "name": "noindex",
            "location": 111,
            "return": [],
            "arguments": {
                "f": [
                    "list[tuple[]]",
                    "bytes",
                    "str",
                    "dict[, ]"
                ]
            }
        },
        "login_required": {
            "name": "login_required",
            "location": 116,
            "return": [],
            "arguments": {
                "f": [
                    "typing.Iterable[str]",
                    "typing.Callable[, ]"
                ]
            }
        },
        "_get_ip": {
            "name": "_get_ip",
            "location": 126,
            "return": [
                "tuple[typing.Union[str,dict[, ],dict[str, typing.Any],typing.Pattern,dict[bytes, bytes],None,list[],dict[str, str],set[str]]]"
            ],
            "arguments": {}
        },
        "_build_thread": {
            "name": "_build_thread",
            "location": 143,
            "return": [
                "list[]"
            ],
            "arguments": {
                "data": [],
                "include_children": [
                    "bool"
                ],
                "query": [
                    "None",
                    "int",
                    "list[]",
                    "str"
                ]
            }
        },
        "paginated_query": {
            "name": "paginated_query",
            "location": 234,
            "return": [
                "tuple[typing.Union[list[],None,str]]"
            ],
            "arguments": {
                "db": [
                    "dict[str, typing.Any]",
                    "bytes",
                    "dict[, ]",
                    "None"
                ],
                "q": [],
                "limit": [
                    "int"
                ],
                "sort_key": [
                    "typing.Text"
                ]
            }
        },
        "add_response_headers.decorator": {
            "name": "decorator",
            "location": 97,
            "return": [],
            "arguments": {
                "f": []
            }
        },
        "login_required.decorated_function": {
            "name": "decorated_function",
            "location": 118,
            "return": [],
            "arguments": {}
        },
        "_build_thread._flatten": {
            "name": "_flatten",
            "location": 216,
            "return": [
                "None"
            ],
            "arguments": {
                "node": [],
                "level": [
                    "int"
                ]
            }
        },
        "add_response_headers.decorator.decorated_function": {
            "name": "decorated_function",
            "location": 99,
            "return": [],
            "arguments": {}
        }
    },
    "microblog.pub-master/core/tasks.py": {
        "Tasks.cache_object": {
            "name": "cache_object",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "iri": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ]
            }
        },
        "Tasks.cache_actor": {
            "name": "cache_actor",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "iri": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ],
                "also_cache_attachments": [
                    "bool"
                ]
            }
        },
        "Tasks.cache_actor_icon": {
            "name": "cache_actor_icon",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "icon_url": [
                    "str",
                    "int",
                    "None"
                ],
                "actor_iri": [
                    "str",
                    "int",
                    "None",
                    "typing.Callable[str, typing.Any]"
                ]
            }
        },
        "Tasks.cache_emoji": {
            "name": "cache_emoji",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "url": [
                    "str"
                ],
                "iri": [
                    "str",
                    "list[str]"
                ]
            }
        },
        "Tasks.send_webmentions": {
            "name": "send_webmentions",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "activity": [
                    "dict[, ]"
                ],
                "links": [
                    "set[str]",
                    "str",
                    "list[int]"
                ]
            }
        },
        "Tasks.cache_emojis": {
            "name": "cache_emojis",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "activity": []
            }
        },
        "Tasks.post_to_remote_inbox": {
            "name": "post_to_remote_inbox",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "payload": [
                    "str",
                    "dict[str, list[str]]",
                    "typing.Sequence[tuple[typing.Union[float,float]]]",
                    "int"
                ],
                "recp": [
                    "str",
                    "dict[str, list[str]]",
                    "typing.Sequence[tuple[typing.Union[float,float]]]",
                    "int"
                ]
            }
        },
        "Tasks.forward_activity": {
            "name": "forward_activity",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "iri": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ]
            }
        },
        "Tasks.fetch_og_meta": {
            "name": "fetch_og_meta",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "iri": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ]
            }
        },
        "Tasks.process_reply": {
            "name": "process_reply",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {
                "iri": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ]
            }
        },
        "Tasks.process_new_activity": {
            "name": "process_new_activity",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "iri": [
                    "str",
                    "typing.Iterable[T]",
                    "typing.Callable[T, bool]"
                ]
            }
        },
        "Tasks.cache_attachments": {
            "name": "cache_attachments",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {
                "iri": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ]
            }
        },
        "Tasks.cache_attachment": {
            "name": "cache_attachment",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {
                "attachment": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ],
                "iri": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ]
            }
        },
        "Tasks.finish_post_to_inbox": {
            "name": "finish_post_to_inbox",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {
                "iri": [
                    "str",
                    "int",
                    "dict[str, str]",
                    "bytes",
                    "typing.Sequence[tuple[typing.Union[float,float]]]"
                ]
            }
        },
        "Tasks.finish_post_to_outbox": {
            "name": "finish_post_to_outbox",
            "location": 104,
            "return": [
                "None"
            ],
            "arguments": {
                "iri": [
                    "str",
                    "int",
                    "dict[str, str]",
                    "bytes",
                    "typing.Sequence[tuple[typing.Union[float,float]]]"
                ]
            }
        },
        "Tasks.send_actor_update": {
            "name": "send_actor_update",
            "location": 108,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "Tasks.update_question_outbox": {
            "name": "update_question_outbox",
            "location": 112,
            "return": [
                "None"
            ],
            "arguments": {
                "iri": [
                    "int",
                    "str",
                    "tuple[]"
                ],
                "open_for": [
                    "int",
                    "str",
                    "tuple[]"
                ]
            }
        },
        "Tasks.fetch_remote_question": {
            "name": "fetch_remote_question",
            "location": 118,
            "return": [
                "None"
            ],
            "arguments": {
                "question": [
                    "bool",
                    "None",
                    "str",
                    "float"
                ]
            }
        }
    },
    "microblog.pub-master/core/__init__.py": {},
    "microblog.pub-master/setup_wizard/wizard.py": {
        "main": {
            "name": "main",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "microblog.pub-master/tests/federation_test.py": {
        "resp2plaintext": {
            "name": "resp2plaintext",
            "location": 11,
            "return": [],
            "arguments": {
                "resp": [
                    "str",
                    "typing.Sequence[str]",
                    "None",
                    "bool"
                ]
            }
        },
        "_instances": {
            "name": "_instances",
            "location": 206,
            "return": [
                "tuple[Instance]"
            ],
            "arguments": {}
        },
        "test_follow": {
            "name": "test_follow",
            "location": 221,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_follow_unfollow": {
            "name": "test_follow_unfollow",
            "location": 238,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_post_content": {
            "name": "test_post_content",
            "location": 268,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_block_and_post_content": {
            "name": "test_block_and_post_content",
            "location": 291,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_post_content_and_delete": {
            "name": "test_post_content_and_delete",
            "location": 317,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_post_content_and_like": {
            "name": "test_post_content_and_like",
            "location": 351,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_post_content_and_like_unlike": {
            "name": "test_post_content_and_like_unlike",
            "location": 380,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_post_content_and_boost": {
            "name": "test_post_content_and_boost",
            "location": 419,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_post_content_and_boost_unboost": {
            "name": "test_post_content_and_boost_unboost",
            "location": 448,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_post_content_and_post_reply": {
            "name": "test_post_content_and_post_reply",
            "location": 487,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_post_content_and_post_reply_and_delete": {
            "name": "test_post_content_and_post_reply_and_delete",
            "location": 541,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "Instance.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "None",
                    "dict[str, str]"
                ],
                "host_url": [
                    "str"
                ],
                "docker_url": [
                    "None",
                    "str",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "Instance._do_req": {
            "name": "_do_req",
            "location": 32,
            "return": [],
            "arguments": {
                "self": [],
                "url": [
                    "str",
                    "typing.IO"
                ]
            }
        },
        "Instance._parse_collection": {
            "name": "_parse_collection",
            "location": 39,
            "return": [],
            "arguments": {
                "self": [],
                "payload": [
                    "None",
                    "str",
                    "typing.Iterable[str]"
                ],
                "url": [
                    "None",
                    "str",
                    "typing.Iterable[str]"
                ]
            }
        },
        "Instance.ping": {
            "name": "ping",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Instance.debug": {
            "name": "debug",
            "location": 49,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Instance.drop_db": {
            "name": "drop_db",
            "location": 59,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Instance.block": {
            "name": "block",
            "location": 69,
            "return": [],
            "arguments": {
                "self": [],
                "actor_url": [
                    "str"
                ]
            }
        },
        "Instance.follow": {
            "name": "follow",
            "location": 83,
            "return": [],
            "arguments": {
                "self": [],
                "instance": [
                    "str",
                    "float",
                    "tuple[typing.Union[str,int]]",
                    "int"
                ]
            }
        },
        "Instance.new_note": {
            "name": "new_note",
            "location": 97,
            "return": [],
            "arguments": {
                "self": [],
                "content": [
                    "str",
                    "bytes",
                    "dict[str, typing.Any]"
                ],
                "reply": [
                    "None",
                    "bool",
                    "str",
                    "set[]"
                ]
            }
        },
        "Instance.boost": {
            "name": "boost",
            "location": 111,
            "return": [],
            "arguments": {
                "self": [],
                "oid": [
                    "str",
                    "dict[, ]",
                    "tuple[typing.Union[str,int]]",
                    "int"
                ]
            }
        },
        "Instance.like": {
            "name": "like",
            "location": 121,
            "return": [],
            "arguments": {
                "self": [],
                "oid": [
                    "str",
                    "dict[, ]",
                    "tuple[typing.Union[str,int]]",
                    "int"
                ]
            }
        },
        "Instance.delete": {
            "name": "delete",
            "location": 131,
            "return": [],
            "arguments": {
                "self": [],
                "oid": [
                    "str"
                ]
            }
        },
        "Instance.undo": {
            "name": "undo",
            "location": 143,
            "return": [],
            "arguments": {
                "self": [],
                "oid": [
                    "str",
                    "dict[, ]",
                    "tuple[typing.Union[str,int]]",
                    "int"
                ]
            }
        },
        "Instance.followers": {
            "name": "followers",
            "location": 154,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Instance.following": {
            "name": "following",
            "location": 166,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Instance.outbox": {
            "name": "outbox",
            "location": 178,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Instance.outbox_get": {
            "name": "outbox_get",
            "location": 187,
            "return": [],
            "arguments": {
                "self": [],
                "aid": [
                    "str",
                    "int"
                ]
            }
        },
        "Instance.stream_jsonfeed": {
            "name": "stream_jsonfeed",
            "location": 196,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "microblog.pub-master/tests/integration_test.py": {
        "config": {
            "name": "config",
            "location": 9,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {}
        },
        "resp2plaintext": {
            "name": "resp2plaintext",
            "location": 19,
            "return": [],
            "arguments": {
                "resp": [
                    "str",
                    "typing.Sequence[str]",
                    "None",
                    "bool"
                ]
            }
        },
        "test_ping_homepage": {
            "name": "test_ping_homepage",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "config": [
                    "dict[, ]"
                ]
            }
        }
    },
    "microblog.pub-master/utils/blacklist.py": {
        "is_url_blacklisted": {
            "name": "is_url_blacklisted",
            "location": 11,
            "return": [
                "bool"
            ],
            "arguments": {
                "url": [
                    "str"
                ]
            }
        },
        "is_blacklisted": {
            "name": "is_blacklisted",
            "location": 19,
            "return": [
                "bool"
            ],
            "arguments": {
                "data": []
            }
        }
    },
    "microblog.pub-master/utils/emojis.py": {
        "_load_emojis": {
            "name": "_load_emojis",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "root_dir": [],
                "base_url": [
                    "str"
                ]
            }
        },
        "tags": {
            "name": "tags",
            "location": 40,
            "return": [
                "list[]"
            ],
            "arguments": {
                "content": [
                    "str"
                ]
            }
        }
    },
    "microblog.pub-master/utils/highlight.py": {
        "highlight": {
            "name": "highlight",
            "location": 19,
            "return": [
                "str"
            ],
            "arguments": {
                "html": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ]
            }
        }
    },
    "microblog.pub-master/utils/key.py": {
        "_new_key": {
            "name": "_new_key",
            "location": 10,
            "return": [],
            "arguments": {}
        },
        "get_secret_key": {
            "name": "get_secret_key",
            "location": 14,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "name": [
                    "str",
                    "None"
                ],
                "new_key": []
            }
        },
        "get_key": {
            "name": "get_key",
            "location": 27,
            "return": [
                "Key"
            ],
            "arguments": {
                "owner": [
                    "str",
                    "int",
                    "dict[, ]"
                ],
                "_id": [
                    "str",
                    "int",
                    "dict[, ]"
                ],
                "user": [
                    "str"
                ],
                "domain": [
                    "str",
                    "bytes"
                ]
            }
        }
    },
    "microblog.pub-master/utils/local_actor_cache.py": {
        "is_actor_updated": {
            "name": "is_actor_updated",
            "location": 6,
            "return": [
                "bool"
            ],
            "arguments": {
                "actor_hash": [
                    "str"
                ]
            }
        }
    },
    "microblog.pub-master/utils/lookup.py": {
        "lookup": {
            "name": "lookup",
            "location": 9,
            "return": [],
            "arguments": {
                "url": [
                    "str"
                ]
            }
        }
    },
    "microblog.pub-master/utils/media.py": {
        "_is_img": {
            "name": "_is_img",
            "location": 21,
            "return": [
                "bool"
            ],
            "arguments": {
                "filename": [
                    "str"
                ]
            }
        },
        "is_video": {
            "name": "is_video",
            "location": 29,
            "return": [
                "bool"
            ],
            "arguments": {
                "filename": [
                    "str"
                ]
            }
        },
        "_load": {
            "name": "_load",
            "location": 36,
            "return": [
                "tuple[BytesIO]"
            ],
            "arguments": {
                "url": [
                    "str",
                    "dict[, ]",
                    "None",
                    "dict[str, typing.Any]",
                    "dict[str, str]"
                ],
                "user_agent": [
                    "str",
                    "dict[, ]",
                    "None",
                    "dict[str, typing.Any]",
                    "dict[str, str]"
                ]
            }
        },
        "load": {
            "name": "load",
            "location": 52,
            "return": [],
            "arguments": {
                "url": [
                    "str",
                    "typing.Callable[str, None]"
                ],
                "user_agent": [
                    "str",
                    "typing.Callable[str, None]"
                ]
            }
        },
        "to_data_uri": {
            "name": "to_data_uri",
            "location": 58,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "img": []
            }
        },
        "MediaCache.__init__": {
            "name": "__init__",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "gridfs_db": [
                    "str"
                ],
                "user_agent": [
                    "int",
                    "None",
                    "str"
                ]
            }
        },
        "MediaCache.cache_og_image": {
            "name": "cache_og_image",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str",
                    "dict[, ]"
                ],
                "remote_id": [
                    "str",
                    "int"
                ]
            }
        },
        "MediaCache.cache_attachment": {
            "name": "cache_attachment",
            "location": 99,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "attachment": [],
                "remote_id": [
                    "str",
                    "None",
                    "int"
                ]
            }
        },
        "MediaCache.is_actor_icon_cached": {
            "name": "is_actor_icon_cached",
            "location": 170,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str"
                ]
            }
        },
        "MediaCache.cache_actor_icon": {
            "name": "cache_actor_icon",
            "location": 173,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str"
                ]
            }
        },
        "MediaCache.is_emoji_cached": {
            "name": "is_emoji_cached",
            "location": 192,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str",
                    "None"
                ]
            }
        },
        "MediaCache.cache_emoji": {
            "name": "cache_emoji",
            "location": 195,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str",
                    "None",
                    "typing.Callable[str, typing.Any]"
                ],
                "iri": [
                    "str",
                    "typing.Callable[, ]"
                ]
            }
        },
        "MediaCache.save_upload": {
            "name": "save_upload",
            "location": 215,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "obuf": [],
                "filename": [
                    "str"
                ]
            }
        },
        "MediaCache.get_actor_icon": {
            "name": "get_actor_icon",
            "location": 239,
            "return": [],
            "arguments": {
                "self": [],
                "url": [
                    "str",
                    "int",
                    "bytes",
                    "dict[, ]",
                    "tuple[typing.Union[int,int,int,int]]"
                ],
                "size": [
                    "str",
                    "int",
                    "bytes",
                    "dict[, ]",
                    "tuple[typing.Union[int,int,int,int]]"
                ]
            }
        },
        "MediaCache.get_attachment": {
            "name": "get_attachment",
            "location": 242,
            "return": [],
            "arguments": {
                "self": [],
                "url": [
                    "str",
                    "int",
                    "bytes",
                    "dict[, ]",
                    "tuple[typing.Union[int,int,int,int]]"
                ],
                "size": [
                    "str",
                    "int",
                    "bytes",
                    "dict[, ]",
                    "tuple[typing.Union[int,int,int,int]]"
                ]
            }
        },
        "MediaCache.get_file": {
            "name": "get_file",
            "location": 245,
            "return": [],
            "arguments": {
                "self": [],
                "url": [
                    "str",
                    "dict[str, typing.Any]",
                    "bool",
                    "bytes",
                    "dict[, ]"
                ],
                "size": [
                    "str",
                    "dict[str, typing.Any]",
                    "bool",
                    "bytes",
                    "dict[, ]"
                ],
                "kind": [
                    "str",
                    "dict[str, typing.Any]",
                    "bool",
                    "bytes",
                    "dict[, ]"
                ]
            }
        }
    },
    "microblog.pub-master/utils/migrations.py": {
        "perform": {
            "name": "perform",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "Migration.__init__": {
            "name": "__init__",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Migration.__init_subclass__": {
            "name": "__init_subclass__",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "typing.Callable[, ]",
                    "int",
                    "float",
                    "list[bytes]"
                ]
            }
        },
        "Migration._apply": {
            "name": "_apply",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Migration._reset": {
            "name": "_reset",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Migration._is_applied": {
            "name": "_is_applied",
            "location": 39,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Migration.migrate": {
            "name": "migrate",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Migration.perform": {
            "name": "perform",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "microblog.pub-master/utils/nodeinfo.py": {
        "_get_nodeinfo_url": {
            "name": "_get_nodeinfo_url",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "server": [
                    "str",
                    "dict[, ]"
                ]
            }
        },
        "_try_mastodon_api": {
            "name": "_try_mastodon_api",
            "location": 39,
            "return": [
                "bool"
            ],
            "arguments": {
                "server": [
                    "str",
                    "dict[, ]"
                ]
            }
        },
        "get_software_name": {
            "name": "get_software_name",
            "location": 55,
            "return": [
                "dict[str, str]",
                "str",
                "dict[str, dict[str, str]]",
                "dict[str, dict[str, typing.Any]]",
                "list[]"
            ],
            "arguments": {
                "server": [
                    "str",
                    "dict[str, str]",
                    "bool"
                ]
            }
        }
    },
    "microblog.pub-master/utils/opengraph.py": {
        "links_from_note": {
            "name": "links_from_note",
            "location": 21,
            "return": [
                "set[]"
            ],
            "arguments": {
                "note": []
            }
        },
        "fetch_og_metadata": {
            "name": "fetch_og_metadata",
            "location": 42,
            "return": [
                "list[dict[, ]]"
            ],
            "arguments": {
                "user_agent": [
                    "str",
                    "typing.Callable[, ]"
                ],
                "links": []
            }
        }
    },
    "microblog.pub-master/utils/template_filters.py": {
        "get_visibility": {
            "name": "get_visibility",
            "location": 41,
            "return": [],
            "arguments": {
                "meta": []
            }
        },
        "visibility": {
            "name": "visibility",
            "location": 48,
            "return": [
                "str",
                "list[T]",
                "int",
                "bytes",
                "list[str]"
            ],
            "arguments": {
                "v": [
                    "str",
                    "list[T]",
                    "int",
                    "bytes",
                    "list[str]"
                ]
            }
        },
        "visibility_is_public": {
            "name": "visibility_is_public",
            "location": 56,
            "return": [
                "bool"
            ],
            "arguments": {
                "v": [
                    "str",
                    "typing.Mapping"
                ]
            }
        },
        "code_highlight": {
            "name": "code_highlight",
            "location": 61,
            "return": [],
            "arguments": {
                "content": [
                    "str",
                    "bytes",
                    "list[str]",
                    "list[superseutils.core.DatasourceName]",
                    "int",
                    "float"
                ]
            }
        },
        "emojify": {
            "name": "emojify",
            "location": 66,
            "return": [],
            "arguments": {
                "text": [
                    "str"
                ]
            }
        },
        "replace_custom_emojis": {
            "name": "replace_custom_emojis",
            "location": 121,
            "return": [
                "str",
                "dict[str, typing.Any]",
                "None"
            ],
            "arguments": {
                "content": [
                    "str",
                    "dict[str, typing.Any]",
                    "None"
                ],
                "note": [
                    "dict[, ]",
                    "dict[str, str]"
                ]
            }
        },
        "clean_html": {
            "name": "clean_html",
            "location": 137,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "html": [
                    "str",
                    "int"
                ]
            }
        },
        "gtone": {
            "name": "gtone",
            "location": 147,
            "return": [
                "bool"
            ],
            "arguments": {
                "n": [
                    "int"
                ]
            }
        },
        "gtnow": {
            "name": "gtnow",
            "location": 152,
            "return": [
                "bool"
            ],
            "arguments": {
                "dtstr": [
                    "int",
                    "str",
                    "float"
                ]
            }
        },
        "clean": {
            "name": "clean",
            "location": 157,
            "return": [],
            "arguments": {
                "html": [
                    "bool",
                    "str",
                    "float",
                    "typing.Sequence[int]"
                ]
            }
        },
        "permalink_id": {
            "name": "permalink_id",
            "location": 165,
            "return": [
                "str"
            ],
            "arguments": {
                "val": []
            }
        },
        "quote_plus": {
            "name": "quote_plus",
            "location": 170,
            "return": [],
            "arguments": {
                "t": [
                    "int",
                    "float"
                ]
            }
        },
        "is_from_outbox": {
            "name": "is_from_outbox",
            "location": 175,
            "return": [
                "bool"
            ],
            "arguments": {
                "t": [
                    "str"
                ]
            }
        },
        "html2plaintext": {
            "name": "html2plaintext",
            "location": 180,
            "return": [],
            "arguments": {
                "body": [
                    "bytes",
                    "str",
                    "int",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "domain": {
            "name": "domain",
            "location": 185,
            "return": [],
            "arguments": {
                "url": [
                    "str"
                ]
            }
        },
        "format_time": {
            "name": "format_time",
            "location": 190,
            "return": [
                "str",
                "bytes",
                "int"
            ],
            "arguments": {
                "val": [
                    "str",
                    "bytes",
                    "int"
                ]
            }
        },
        "format_ts": {
            "name": "format_ts",
            "location": 198,
            "return": [],
            "arguments": {
                "val": [
                    "str",
                    "float",
                    "dict[, ]"
                ]
            }
        },
        "gt_ts": {
            "name": "gt_ts",
            "location": 203,
            "return": [
                "bool"
            ],
            "arguments": {
                "val": [
                    "int",
                    "float"
                ]
            }
        },
        "format_timeago": {
            "name": "format_timeago",
            "location": 208,
            "return": [
                "str",
                "typing.AbstractSet",
                "int",
                "None"
            ],
            "arguments": {
                "val": [
                    "str",
                    "typing.AbstractSet",
                    "int",
                    "None"
                ]
            }
        },
        "url_or_id": {
            "name": "url_or_id",
            "location": 216,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "d": [
                    "str",
                    "typing.Mapping"
                ]
            }
        },
        "get_url": {
            "name": "get_url",
            "location": 226,
            "return": [
                "str",
                "tuple[typing.Union[typing.Any,typing.Any]]",
                "tuple[typing.Union[str,str,str]]",
                "list[]",
                "list[str]",
                "list[tuple[typing.Union[typing.Any,typing.Any]]]",
                "list[tuple[typing.Union[str,str,str]]]"
            ],
            "arguments": {
                "u": [
                    "str",
                    "list[]",
                    "list[str]"
                ]
            }
        },
        "get_actor": {
            "name": "get_actor",
            "location": 240,
            "return": [
                "None",
                "typing.Text"
            ],
            "arguments": {
                "url": [
                    "str",
                    "typing.Mapping",
                    "dict[, ]"
                ]
            }
        },
        "has_place": {
            "name": "has_place",
            "location": 256,
            "return": [
                "bool"
            ],
            "arguments": {
                "note": []
            }
        },
        "get_place": {
            "name": "get_place",
            "location": 263,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "note": []
            }
        },
        "poll_answer_key": {
            "name": "poll_answer_key",
            "location": 289,
            "return": [],
            "arguments": {
                "choice": [
                    "str",
                    "bool"
                ]
            }
        },
        "get_answer_count": {
            "name": "get_answer_count",
            "location": 294,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "choice": [
                    "str",
                    "None",
                    "dict[, ]",
                    "dict[str, typing.Type]"
                ],
                "obj": [],
                "meta": [
                    "str",
                    "tuple[typing.Union[str,...]]"
                ]
            }
        },
        "get_total_answers_count": {
            "name": "get_total_answers_count",
            "location": 307,
            "return": [
                "dict[str, typing.Any]",
                "str",
                "dict[, ]",
                "list[list[typing.Any]]",
                "tuple[typing.Union[typing.Type,typing.Type]]",
                "int"
            ],
            "arguments": {
                "obj": [],
                "meta": [
                    "dict[, ]"
                ]
            }
        },
        "_get_file_url": {
            "name": "_get_file_url",
            "location": 320,
            "return": [
                "str",
                "frozenset",
                "dict[str, str]",
                "dict[str, int]",
                "dict[, ]",
                "list[str]",
                "typing.Type",
                "typing.Text",
                "int",
                "tuple[typing.Union[int,int]]"
            ],
            "arguments": {
                "url": [
                    "int",
                    "str",
                    "tuple[typing.Union[int,int]]"
                ],
                "size": [
                    "str"
                ],
                "kind": [
                    "str"
                ]
            }
        },
        "get_actor_icon_url": {
            "name": "get_actor_icon_url",
            "location": 341,
            "return": [],
            "arguments": {
                "url": [
                    "str",
                    "int",
                    "dict[, ]"
                ],
                "size": [
                    "str",
                    "int",
                    "dict[, ]"
                ]
            }
        },
        "get_attachment_url": {
            "name": "get_attachment_url",
            "location": 346,
            "return": [],
            "arguments": {
                "url": [
                    "str",
                    "dict[, ]",
                    "list[typing.Optional[typing.Any]]",
                    "list[str]",
                    "None",
                    "bytes"
                ],
                "size": [
                    "str",
                    "dict[, ]",
                    "list[typing.Optional[typing.Any]]",
                    "list[str]",
                    "None",
                    "bytes"
                ]
            }
        },
        "update_inline_imgs": {
            "name": "update_inline_imgs",
            "location": 352,
            "return": [
                "str",
                "list[str]",
                "int"
            ],
            "arguments": {
                "content": [
                    "str",
                    "list[str]",
                    "int"
                ]
            }
        },
        "get_video_url": {
            "name": "get_video_url",
            "location": 367,
            "return": [],
            "arguments": {
                "url": [
                    "str",
                    "dict[, ]",
                    "None",
                    "list[str]",
                    "typing.Callable[str, str]"
                ]
            }
        },
        "get_og_image_url": {
            "name": "get_og_image_url",
            "location": 377,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "url": [
                    "str",
                    "int",
                    "dict[, ]",
                    "None"
                ],
                "size": [
                    "int"
                ]
            }
        },
        "remove_mongo_id": {
            "name": "remove_mongo_id",
            "location": 385,
            "return": [
                "list[]",
                "str",
                "list[str]"
            ],
            "arguments": {
                "dat": [
                    "str",
                    "list[str]"
                ]
            }
        },
        "get_video_link": {
            "name": "get_video_link",
            "location": 397,
            "return": [
                "str",
                "None"
            ],
            "arguments": {
                "data": [
                    "dict[, ]",
                    "typing.Mapping",
                    "dict[str, typing.Any]",
                    "float"
                ]
            }
        },
        "get_text": {
            "name": "get_text",
            "location": 408,
            "return": [
                "bytes",
                "str",
                "typing.Text"
            ],
            "arguments": {
                "data": [
                    "bytes",
                    "list[]",
                    "str"
                ]
            }
        },
        "has_type": {
            "name": "has_type",
            "location": 417,
            "return": [
                "bool"
            ],
            "arguments": {
                "doc": [
                    "str",
                    "list[typing.Type]",
                    "tuple[str]"
                ],
                "_types": [
                    "str",
                    "typing.Type",
                    "int"
                ]
            }
        },
        "has_actor_type": {
            "name": "has_actor_type",
            "location": 425,
            "return": [
                "bool"
            ],
            "arguments": {
                "doc": [
                    "str",
                    "list[str]"
                ]
            }
        },
        "_get_inlined_imgs": {
            "name": "_get_inlined_imgs",
            "location": 435,
            "return": [
                "list[]",
                "list[typing.Union[dict[typing.Any, list[typing.Any]],list[]]]"
            ],
            "arguments": {
                "content": [
                    "int",
                    "None",
                    "str"
                ]
            }
        },
        "iter_note_attachments": {
            "name": "iter_note_attachments",
            "location": 450,
            "return": [
                "list[str]"
            ],
            "arguments": {
                "note": [
                    "dict[, ]"
                ]
            }
        },
        "not_only_imgs": {
            "name": "not_only_imgs",
            "location": 457,
            "return": [
                "bool"
            ],
            "arguments": {
                "attachment": [
                    "str"
                ]
            }
        },
        "is_img": {
            "name": "is_img",
            "location": 467,
            "return": [],
            "arguments": {
                "filename": [
                    "str"
                ]
            }
        }
    },
    "microblog.pub-master/utils/webmentions.py": {
        "_make_abs": {
            "name": "_make_abs",
            "location": 12,
            "return": [
                "None",
                "str",
                "dict[str, str]"
            ],
            "arguments": {
                "url": [
                    "str",
                    "dict[str, str]"
                ],
                "parent": [
                    "str",
                    "dict[, ]"
                ]
            }
        },
        "_discover_webmention_endoint": {
            "name": "_discover_webmention_endoint",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "url": [
                    "str",
                    "None",
                    "dict[, ]"
                ]
            }
        },
        "discover_webmention_endpoint": {
            "name": "discover_webmention_endpoint",
            "location": 43,
            "return": [
                "None",
                "tuple[typing.Union[typing.Literal,typing.Any,typing.Any,typing.Any,typing.Any,typing.Any,typing.Any]]",
                "typing.Pattern",
                "dict[, ]",
                "dict[str, dict[str, typing.Any]]",
                "str",
                "typing.Type"
            ],
            "arguments": {
                "url": [
                    "str",
                    "float",
                    "list[tuple[typing.Union[int,int]]]"
                ]
            }
        }
    },
    "microblog.pub-master/utils/__init__.py": {
        "strtobool": {
            "name": "strtobool",
            "location": 11,
            "return": [
                "bool"
            ],
            "arguments": {
                "s": [
                    "str"
                ]
            }
        },
        "parse_datetime": {
            "name": "parse_datetime",
            "location": 20,
            "return": [],
            "arguments": {
                "s": [
                    "str",
                    "int"
                ]
            }
        },
        "now": {
            "name": "now",
            "location": 31,
            "return": [],
            "arguments": {}
        }
    }
}
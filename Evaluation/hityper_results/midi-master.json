{
    "midi-master/setup.py": {},
    "midi-master/__init__.py": {},
    "midi-master/docs/conf.py": {},
    "midi-master/midisnake/errors.py": {},
    "midi-master/midisnake/events.py": {
        "_decode_leftright": {
            "name": "_decode_leftright",
            "location": 45,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "data": [
                    "int"
                ]
            }
        },
        "get_note_name": {
            "name": "get_note_name",
            "location": 151,
            "return": [],
            "arguments": {
                "data": []
            }
        },
        "NoteOn._process": {
            "name": "_process",
            "location": 202,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "NoteOff._process": {
            "name": "_process",
            "location": 238,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "PolyphonicAftertouch._process": {
            "name": "_process",
            "location": 271,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "PitchBend._process": {
            "name": "_process",
            "location": 302,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "MetaFactory.__new__": {
            "name": "__new__",
            "location": 310,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "str",
                    "list[dict[str, typing.Any]]"
                ],
                "midi_file": []
            }
        }
    },
    "midi-master/midisnake/integers.py": {
        "IntBuilder.__init__": {
            "name": "__init__",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "input_bytes": []
            }
        },
        "IntBuilder.__repr__": {
            "name": "__repr__",
            "location": 69,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "IntBuilder.__str__": {
            "name": "__str__",
            "location": 80,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "IntBuilder.__int__": {
            "name": "__int__",
            "location": 84,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "IntBuilder.__add__": {
            "name": "__add__",
            "location": 91,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "IntBuilder.__sub__": {
            "name": "__sub__",
            "location": 98,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "IntBuilder.__abs__": {
            "name": "__abs__",
            "location": 105,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "midi-master/midisnake/meta_events.py": {
        "sequence_number": {
            "name": "sequence_number",
            "location": 169,
            "return": [
                "tuple[int]"
            ],
            "arguments": {
                "data": []
            }
        },
        "text_event": {
            "name": "text_event",
            "location": 179,
            "return": [
                "tuple[typing.Union[str,bytearray]]"
            ],
            "arguments": {
                "data": [
                    "dict[, ]"
                ]
            }
        },
        "copyright_notice": {
            "name": "copyright_notice",
            "location": 190,
            "return": [
                "tuple[typing.Union[str,bytearray]]"
            ],
            "arguments": {
                "data": [
                    "bytes",
                    "dict[, ]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "chunk_name": {
            "name": "chunk_name",
            "location": 201,
            "return": [
                "tuple[typing.Union[str,bytearray]]"
            ],
            "arguments": {
                "data": [
                    "bool",
                    "None",
                    "bytes",
                    "dict[str, typing.Any]",
                    "dict[, ]",
                    "list[]"
                ]
            }
        },
        "instrument_name": {
            "name": "instrument_name",
            "location": 212,
            "return": [
                "tuple[typing.Union[str,bytearray]]"
            ],
            "arguments": {
                "data": [
                    "bool",
                    "None",
                    "bytes",
                    "dict[str, typing.Any]",
                    "dict[, ]",
                    "list[]"
                ]
            }
        },
        "lyric": {
            "name": "lyric",
            "location": 223,
            "return": [
                "tuple[typing.Union[str,bytearray]]"
            ],
            "arguments": {
                "data": [
                    "bytes",
                    "dict[, ]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "marker": {
            "name": "marker",
            "location": 234,
            "return": [
                "tuple[typing.Union[str,bytearray]]"
            ],
            "arguments": {
                "data": [
                    "bytes",
                    "dict[, ]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "cue_point": {
            "name": "cue_point",
            "location": 245,
            "return": [
                "tuple[typing.Union[str,bytearray]]"
            ],
            "arguments": {
                "data": [
                    "bytes",
                    "dict[, ]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "channel_prefix": {
            "name": "channel_prefix",
            "location": 256,
            "return": [
                "tuple[int]"
            ],
            "arguments": {
                "data": []
            }
        },
        "end_of_track": {
            "name": "end_of_track",
            "location": 267,
            "return": [
                "tuple[typing.Optional[int]]"
            ],
            "arguments": {
                "data": []
            }
        },
        "set_tempo": {
            "name": "set_tempo",
            "location": 275,
            "return": [
                "tuple[int]"
            ],
            "arguments": {
                "data": []
            }
        },
        "smpte_offset": {
            "name": "smpte_offset",
            "location": 286,
            "return": [
                "tuple[typing.Union[int,SMPTE_Format,list[typing.Union[int,tuple[typing.Union[int,int]]]]]]"
            ],
            "arguments": {
                "data": []
            }
        },
        "time_signature": {
            "name": "time_signature",
            "location": 335,
            "return": [
                "tuple[typing.Union[int,tuple[bytearray],bytearray]]"
            ],
            "arguments": {
                "data": []
            }
        },
        "key_signature": {
            "name": "key_signature",
            "location": 351,
            "return": [
                "tuple[typing.Union[int,tuple[bytearray],bytearray]]"
            ],
            "arguments": {
                "data": []
            }
        },
        "MetaTextEvent.__init__": {
            "name": "__init__",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "event_info": [],
                "variant": [
                    "bytes",
                    "None",
                    "str",
                    "float",
                    "list[str]",
                    "typing.Sequence[str]"
                ],
                "data": [
                    "list[dict[str, typing.Any]]",
                    "tuple[typing.Union[int,str,bytearray]]",
                    "bytes",
                    "str"
                ]
            }
        },
        "MetaSequenceNumber.__init__": {
            "name": "__init__",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict[, ]",
                    "dict[str, set[str]]",
                    "list[int]",
                    "bytes",
                    "bytearray",
                    "memoryview"
                ]
            }
        },
        "MetaKeySignature.__init__": {
            "name": "__init__",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "bytes"
                ]
            }
        },
        "MetaTimeSignature.__init__": {
            "name": "__init__",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "bytes"
                ]
            }
        },
        "MetaTimeSignature.parsed_signature": {
            "name": "parsed_signature",
            "location": 117,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MetaSMPTEOffset.__init__": {
            "name": "__init__",
            "location": 132,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "str",
                    "tuple[typing.Union[int,int,bytearray]]",
                    "bytes"
                ]
            }
        },
        "MetaSetTempo.__init__": {
            "name": "__init__",
            "location": 145,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict[, ]",
                    "bytes",
                    "bytearray",
                    "memoryview"
                ]
            }
        },
        "MetaSetTempo.get_tempo": {
            "name": "get_tempo",
            "location": 148,
            "return": [
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "MetaChannelPrefix.__init__": {
            "name": "__init__",
            "location": 158,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict[, ]",
                    "bool",
                    "bytes",
                    "dict[str, set[str]]",
                    "list[int]"
                ]
            }
        },
        "EndOfTrack.__init__": {
            "name": "__init__",
            "location": 165,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "list[int]",
                    "bytes",
                    "bytearray"
                ]
            }
        }
    },
    "midi-master/midisnake/parser.py": {
        "Parser.__init__": {
            "name": "__init__",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "midi_file": [
                    "str",
                    "None",
                    "typing.IO"
                ]
            }
        },
        "Parser._read_track": {
            "name": "_read_track",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "midi-master/midisnake/structure.py": {
        "ParsedMIDI.__init__": {
            "name": "__init__",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Header.__init__": {
            "name": "__init__",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "Event.__init__": {
            "name": "__init__",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "Event.__repr__": {
            "name": "__repr__",
            "location": 100,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Event.__str__": {
            "name": "__str__",
            "location": 103,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Event.valid": {
            "name": "valid",
            "location": 107,
            "return": [
                "bool"
            ],
            "arguments": {
                "cls": [
                    "int",
                    "bytes",
                    "dict[, ]"
                ],
                "data": [
                    "int"
                ]
            }
        },
        "Event._process": {
            "name": "_process",
            "location": 119,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "int",
                    "bytes",
                    "dict[, ]"
                ]
            }
        },
        "Track.__init__": {
            "name": "__init__",
            "location": 149,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "Track._parse": {
            "name": "_parse",
            "location": 156,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "bool"
                ]
            }
        },
        "VariableLengthValue.__init__": {
            "name": "__init__",
            "location": 173,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "file_io": []
            }
        }
    },
    "midi-master/midisnake/__init__.py": {},
    "midi-master/tests/test_events.py": {
        "TestNoteOn.test_validate": {
            "name": "test_validate",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestNoteOn.test_constructor": {
            "name": "test_constructor",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestNoteOn.tearDown": {
            "name": "tearDown",
            "location": 146,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestNoteOff.test_validate": {
            "name": "test_validate",
            "location": 151,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestNoteOff.test_constructor": {
            "name": "test_constructor",
            "location": 162,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestNoteOff.tearDown": {
            "name": "tearDown",
            "location": 261,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPolyphonicAftertouch.setUp": {
            "name": "setUp",
            "location": 266,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPolyphonicAftertouch.test_validate": {
            "name": "test_validate",
            "location": 269,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPolyphonicAftertouch.test_constructor": {
            "name": "test_constructor",
            "location": 283,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPitchBench.setUp": {
            "name": "setUp",
            "location": 389,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPitchBench.test_validate": {
            "name": "test_validate",
            "location": 392,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPitchBench.test_constructor": {
            "name": "test_constructor",
            "location": 406,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestHelpers.setUp": {
            "name": "setUp",
            "location": 473,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestHelpers.test_get_note_name": {
            "name": "test_get_note_name",
            "location": 476,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestHelpers.test_decode_leftright": {
            "name": "test_decode_leftright",
            "location": 503,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "midi-master/tests/test_intbuilder.py": {
        "TestIntBuilder.setUp": {
            "name": "setUp",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestIntBuilder.test_repr": {
            "name": "test_repr",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestIntBuilder.test_str": {
            "name": "test_str",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestIntBuilder.test_int": {
            "name": "test_int",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestIntBuilder.test_sub": {
            "name": "test_sub",
            "location": 109,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestIntBuilder.test_add": {
            "name": "test_add",
            "location": 242,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestIntBuilder.test_nullbyte": {
            "name": "test_nullbyte",
            "location": 375,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestIntBuilder.test_init": {
            "name": "test_init",
            "location": 379,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "midi-master/tests/test_track.py": {
        "TestTrack.setUp": {
            "name": "setUp",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "midi-master/tests/test_vlv.py": {
        "TestVLV.setUp": {
            "name": "setUp",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestVLV.tearDown": {
            "name": "tearDown",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestVLV.test_multi_byte_vlv": {
            "name": "test_multi_byte_vlv",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestVLV.test_zero_value": {
            "name": "test_zero_value",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestVLV.test_single_byte_vlv": {
            "name": "test_single_byte_vlv",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "midi-master/tests/__init__.py": {
        "ExceptionFilter.filter": {
            "name": "filter",
            "location": 41,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "record": [
                    "int",
                    "None",
                    "str",
                    "list[]"
                ]
            }
        }
    }
}
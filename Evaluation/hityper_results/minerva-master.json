{
    "minerva-master/setup.py": {
        "UploadCommand.status": {
            "name": "status",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "s": []
            }
        },
        "UploadCommand.initialize_options": {
            "name": "initialize_options",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UploadCommand.finalize_options": {
            "name": "finalize_options",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UploadCommand.run": {
            "name": "run",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "minerva-master/minerva/config.py": {},
    "minerva-master/minerva/__init__.py": {},
    "minerva-master/minerva/__version__.py": {},
    "minerva-master/minerva/nlp/__init__.py": {},
    "minerva-master/minerva/nlp/wrappers/nltk.py": {
        "sent_tokenize": {
            "name": "sent_tokenize",
            "location": 7,
            "return": [],
            "arguments": {
                "txt": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ],
                "language": [
                    "typing.Text"
                ]
            }
        },
        "word_tokenize": {
            "name": "word_tokenize",
            "location": 12,
            "return": [],
            "arguments": {
                "txt": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ],
                "language": [
                    "typing.Text"
                ]
            }
        },
        "pos_tag": {
            "name": "pos_tag",
            "location": 22,
            "return": [],
            "arguments": {
                "txt": [
                    "str"
                ],
                "language": [
                    "typing.Text"
                ]
            }
        }
    },
    "minerva-master/minerva/nlp/wrappers/__init__.py": {},
    "minerva-master/minerva/text/base.py": {
        "Annotation.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "float",
                    "int",
                    "dict[str, typing.Any]"
                ],
                "score": [
                    "None",
                    "int",
                    "list[tuple[typing.Union[int,float]]]",
                    "tuple[str]",
                    "str",
                    "float"
                ]
            }
        },
        "Annotation.__setitem__": {
            "name": "__setitem__",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str"
                ],
                "value": [
                    "str"
                ]
            }
        },
        "Annotation.__getitem__": {
            "name": "__getitem__",
            "location": 45,
            "return": [],
            "arguments": {
                "self": [],
                "item": [
                    "str"
                ]
            }
        },
        "TokenSpan.__init__": {
            "name": "__init__",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "typing.Any",
                    "None",
                    "bool",
                    "typing.Sequence[str]",
                    "bytes"
                ],
                "start_token": [
                    "int"
                ],
                "end_token": [
                    "None",
                    "int",
                    "float",
                    "tuple[typing.Union[int,int]]"
                ],
                "score": [
                    "None",
                    "float",
                    "bool",
                    "str"
                ]
            }
        },
        "TokenSpan.start_token": {
            "name": "start_token",
            "location": 96,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TokenSpan.end_token": {
            "name": "end_token",
            "location": 106,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TokenSpan.start_index": {
            "name": "start_index",
            "location": 116,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TokenSpan.end_index": {
            "name": "end_index",
            "location": 125,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TokenSpan.text": {
            "name": "text",
            "location": 134,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BaseEntity.__init__": {
            "name": "__init__",
            "location": 156,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str",
                    "bool",
                    "typing.Mapping"
                ],
                "language": [
                    "typing.Text"
                ]
            }
        },
        "BaseEntity.__str__": {
            "name": "__str__",
            "location": 166,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BaseTextualEntity.__init__": {
            "name": "__init__",
            "location": 184,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "text": [],
                "index": [
                    "int"
                ],
                "char_index": [
                    "int"
                ],
                "language": [
                    "typing.Text"
                ],
                "parent": [
                    "None",
                    "str",
                    "typing.Type"
                ]
            }
        },
        "Token.__init__": {
            "name": "__init__",
            "location": 210,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str",
                    "int",
                    "float",
                    "dict[str, str]",
                    "None"
                ],
                "index": [
                    "int"
                ],
                "parent": [
                    "None",
                    "str",
                    "int",
                    "float",
                    "dict[str, str]"
                ],
                "char_index": [
                    "int"
                ],
                "language": [
                    "typing.Text"
                ]
            }
        },
        "Token.__contains__": {
            "name": "__contains__",
            "location": 222,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "dict[, ]",
                    "str"
                ]
            }
        },
        "Token.__setitem__": {
            "name": "__setitem__",
            "location": 225,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str"
                ],
                "value": [
                    "str"
                ]
            }
        },
        "Token.__getitem__": {
            "name": "__getitem__",
            "location": 228,
            "return": [],
            "arguments": {
                "self": [],
                "item": [
                    "list[str]"
                ]
            }
        },
        "Token.__iter__": {
            "name": "__iter__",
            "location": 231,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Token.__len__": {
            "name": "__len__",
            "location": 234,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Token.__str__": {
            "name": "__str__",
            "location": 237,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "Sentence.__init__": {
            "name": "__init__",
            "location": 248,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str",
                    "list[str]"
                ],
                "index": [
                    "int"
                ],
                "parent": [
                    "None",
                    "str",
                    "typing.Iterable[str]",
                    "bool"
                ]
            }
        },
        "Sentence.add_annotation": {
            "name": "add_annotation",
            "location": 263,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "list[]",
                    "dict[, ]",
                    "dict[str, str]"
                ],
                "value": [
                    "str"
                ],
                "begin": [
                    "None",
                    "int",
                    "typing.Callable[, ]",
                    "str",
                    "float",
                    "set[int]"
                ],
                "end": [
                    "int",
                    "float"
                ],
                "score": [
                    "None",
                    "str"
                ]
            }
        },
        "Sentence.get_annotation": {
            "name": "get_annotation",
            "location": 280,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "int"
                ]
            }
        },
        "Sentence.token_at_char": {
            "name": "token_at_char",
            "location": 303,
            "return": [
                "None",
                "tuple[typing.Union[int,typing.Any]]",
                "typing.Type",
                "typing.Callable[[], typing.Any]"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "int"
                ]
            }
        },
        "Sentence.__getitem__": {
            "name": "__getitem__",
            "location": 345,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "idx": [
                    "str",
                    "tuple[int]",
                    "list[T]",
                    "list[str]",
                    "int"
                ]
            }
        },
        "Sentence.__iter__": {
            "name": "__iter__",
            "location": 348,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Sentence.__len__": {
            "name": "__len__",
            "location": 351,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Sentence.__str__": {
            "name": "__str__",
            "location": 354,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "Document.__init__": {
            "name": "__init__",
            "location": 360,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str"
                ],
                "_id": [
                    "None",
                    "str",
                    "list[int]"
                ],
                "language": [
                    "typing.Text"
                ]
            }
        },
        "Document.__getitem__": {
            "name": "__getitem__",
            "location": 374,
            "return": [],
            "arguments": {
                "self": [],
                "idx": [
                    "str",
                    "tuple[int]",
                    "list[T]",
                    "list[str]",
                    "int"
                ]
            }
        },
        "Document.__iter__": {
            "name": "__iter__",
            "location": 377,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Document.__len__": {
            "name": "__len__",
            "location": 380,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Document.__str__": {
            "name": "__str__",
            "location": 383,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "Corpus.__init__": {
            "name": "__init__",
            "location": 388,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_id": [
                    "None",
                    "str"
                ],
                "items": [
                    "None",
                    "str"
                ]
            }
        },
        "Corpus.add": {
            "name": "add",
            "location": 397,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "int",
                    "list[typing.Deque]",
                    "str",
                    "typing.Callable[, ]"
                ]
            }
        },
        "Corpus.__add__": {
            "name": "__add__",
            "location": 400,
            "return": [
                "Corpus"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "float",
                    "None",
                    "int",
                    "typing.Type"
                ]
            }
        },
        "Corpus.__getitem__": {
            "name": "__getitem__",
            "location": 404,
            "return": [],
            "arguments": {
                "self": [],
                "idx": [
                    "str",
                    "tuple[int]",
                    "list[T]",
                    "list[str]",
                    "int"
                ]
            }
        },
        "Corpus.__iter__": {
            "name": "__iter__",
            "location": 407,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Corpus.__len__": {
            "name": "__len__",
            "location": 410,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Corpus.__str__": {
            "name": "__str__",
            "location": 413,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "minerva-master/minerva/text/__init__.py": {},
    "minerva-master/minerva/utils/lazy.py": {
        "LazyLoader.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "typing.Iterable[]",
                    "bool",
                    "None"
                ],
                "local_name": [
                    "None",
                    "str",
                    "bool",
                    "typing.Sequence[typing.Any]",
                    "list[str]"
                ],
                "parent_module_globals": [
                    "dict[, ]"
                ],
                "warning": [
                    "None",
                    "str",
                    "list[str]",
                    "int"
                ]
            }
        },
        "LazyLoader._load": {
            "name": "_load",
            "location": 27,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LazyLoader.__getattr__": {
            "name": "__getattr__",
            "location": 46,
            "return": [],
            "arguments": {
                "self": [],
                "item": [
                    "typing.Type"
                ]
            }
        },
        "LazyLoader.__dir__": {
            "name": "__dir__",
            "location": 50,
            "return": [
                "list[str]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "minerva-master/test/test_base.py": {
        "quotes_template": {
            "name": "quotes_template",
            "location": 6,
            "return": [
                "list[tuple[typing.Union[typing.Text,list[typing.Text]]]]"
            ],
            "arguments": {}
        },
        "contractions_template_en": {
            "name": "contractions_template_en",
            "location": 28,
            "return": [
                "list[tuple[typing.Union[typing.Text,list[typing.Text]]]]"
            ],
            "arguments": {}
        },
        "sample_text": {
            "name": "sample_text",
            "location": 45,
            "return": [],
            "arguments": {
                "request": [
                    "bool",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "sample_tokens": {
            "name": "sample_tokens",
            "location": 50,
            "return": [
                "list[typing.Text]"
            ],
            "arguments": {}
        },
        "sample_pos_tags": {
            "name": "sample_pos_tags",
            "location": 55,
            "return": [
                "list[typing.Text]"
            ],
            "arguments": {}
        },
        "lipsum_array": {
            "name": "lipsum_array",
            "location": 60,
            "return": [
                "list[typing.Text]"
            ],
            "arguments": {}
        },
        "lipsum_txt": {
            "name": "lipsum_txt",
            "location": 69,
            "return": [
                "typing.Text"
            ],
            "arguments": {}
        },
        "sentence": {
            "name": "sentence",
            "location": 78,
            "return": [],
            "arguments": {
                "sample_text": [
                    "str"
                ]
            }
        },
        "test_tokenization": {
            "name": "test_tokenization",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "sentence": [
                    "str",
                    "list[str]"
                ],
                "sample_text": [
                    "bool",
                    "typing.Callable[, ]",
                    "None",
                    "BaseException"
                ],
                "sample_tokens": [
                    "typing.Callable[, ]",
                    "str",
                    "typing.Sequence[str]"
                ]
            }
        },
        "test_document": {
            "name": "test_document",
            "location": 110,
            "return": [
                "None"
            ],
            "arguments": {
                "lipsum_array": [
                    "str",
                    "int"
                ],
                "lipsum_txt": [
                    "str",
                    "int"
                ]
            }
        },
        "test_corpus": {
            "name": "test_corpus",
            "location": 126,
            "return": [
                "None"
            ],
            "arguments": {
                "lipsum_array": [
                    "str"
                ]
            }
        },
        "test_tags": {
            "name": "test_tags",
            "location": 144,
            "return": [
                "None"
            ],
            "arguments": {
                "sentence": [],
                "sample_pos_tags": [
                    "list[str]",
                    "None",
                    "typing.Callable[, ]"
                ]
            }
        },
        "test_quotes_and_contraptions_en": {
            "name": "test_quotes_and_contraptions_en",
            "location": 173,
            "return": [
                "None"
            ],
            "arguments": {
                "quotes_template": [
                    "str",
                    "list[dict[str, typing.Any]]"
                ],
                "contractions_template_en": [
                    "str",
                    "list[dict[str, typing.Any]]"
                ]
            }
        }
    }
}
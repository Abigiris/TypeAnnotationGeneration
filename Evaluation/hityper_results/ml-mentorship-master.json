{
    "ml-mentorship-master/tasks.py": {
        "download_emails": {
            "name": "download_emails",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "download_labels": {
            "name": "download_labels",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "run_pipeline": {
            "name": "run_pipeline",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "ml-mentorship-master/mentorship/engine.py": {
        "run_pipeline": {
            "name": "run_pipeline",
            "location": 12,
            "return": [
                "list[]",
                "list[str]",
                "dict[str, None]",
                "int",
                "dict[, ]",
                "dict[str, str]",
                "dict[str, dict[str, str]]",
                "str",
                "typing.Sequence[str]"
            ],
            "arguments": {
                "input_data": [
                    "dict[, ]",
                    "str",
                    "typing.Sequence[str]"
                ],
                "steps": [
                    "str",
                    "dict[, ]"
                ]
            }
        },
        "osemn_pipeline": {
            "name": "osemn_pipeline",
            "location": 25,
            "return": [],
            "arguments": {
                "input_data": [
                    "dict[, ]"
                ],
                "obtain_step": [
                    "dict[, ]"
                ],
                "scrub_step": [
                    "dict[, ]"
                ],
                "explore_step": [
                    "dict[, ]"
                ],
                "model_step": [
                    "dict[, ]"
                ],
                "interpret_step": [
                    "dict[, ]"
                ]
            }
        }
    },
    "ml-mentorship-master/mentorship/__init__.py": {},
    "ml-mentorship-master/mentorship/email_classification/pipeline.py": {
        "identity": {
            "name": "identity",
            "location": 26,
            "return": [
                "int",
                "str",
                "typing.Iterable['Context']"
            ],
            "arguments": {
                "dataframe": [
                    "int",
                    "str",
                    "typing.Iterable['Context']"
                ]
            }
        },
        "obtain_emails": {
            "name": "obtain_emails",
            "location": 32,
            "return": [
                "DataFrame"
            ],
            "arguments": {
                "dataframe": [
                    "int",
                    "typing.Callable[[], T]",
                    "list[int]",
                    "list[str]",
                    "str"
                ]
            }
        },
        "scrub_emails": {
            "name": "scrub_emails",
            "location": 60,
            "return": [],
            "arguments": {
                "dataframe": [
                    "str",
                    "typing.Deque",
                    "int",
                    "list[]"
                ]
            }
        },
        "get_pipeline_steps": {
            "name": "get_pipeline_steps",
            "location": 65,
            "return": [
                "list[]"
            ],
            "arguments": {}
        }
    },
    "ml-mentorship-master/mentorship/email_classification/utils.py": {
        "extract_subject": {
            "name": "extract_subject",
            "location": 1,
            "return": [],
            "arguments": {
                "row": [
                    "dict[str, str]",
                    "dict[str, typing.Union[str,set[]]]"
                ]
            }
        }
    },
    "ml-mentorship-master/mentorship/email_classification/__init__.py": {},
    "ml-mentorship-master/mentorship/gmail/api.py": {
        "as_date": {
            "name": "as_date",
            "location": 153,
            "return": [],
            "arguments": {
                "date": []
            }
        },
        "GmailApi.initialize": {
            "name": "initialize",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GmailApi.get_labels": {
            "name": "get_labels",
            "location": 37,
            "return": [
                "list[]",
                "str",
                "None",
                "dict[str, dict[str, str]]",
                "dict[str, int]",
                "dict[typing.Any, str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "GmailApi.get_messages_for_page": {
            "name": "get_messages_for_page",
            "location": 41,
            "return": [
                "list[]",
                "str",
                "None",
                "dict[str, dict[str, str]]",
                "dict[str, int]",
                "dict[typing.Any, str]"
            ],
            "arguments": {
                "self": [],
                "after": [
                    "None",
                    "bool",
                    "typing.Callable[str,str, float]"
                ],
                "before": [
                    "None",
                    "bool",
                    "typing.Callable[str,str, float]"
                ],
                "includeSpamTrash": [
                    "bool"
                ],
                "limit": [
                    "int"
                ],
                "page_token": [
                    "None",
                    "str",
                    "dict[str, str]",
                    "typing.Callable[typing.Any, bool]"
                ]
            }
        },
        "GmailApi.get_messages": {
            "name": "get_messages",
            "location": 65,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": [],
                "after": [
                    "None",
                    "list[int]",
                    "int"
                ],
                "before": [
                    "None",
                    "list[int]",
                    "int"
                ],
                "includeSpamTrash": [
                    "bool"
                ],
                "limit": [
                    "int"
                ]
            }
        },
        "GmailApi.get_message": {
            "name": "get_message",
            "location": 100,
            "return": [],
            "arguments": {
                "self": [],
                "id": [
                    "str",
                    "int"
                ],
                "user_id": [
                    "typing.Text"
                ]
            }
        },
        "GmailApi.build_query": {
            "name": "build_query",
            "location": 113,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "after": [
                    "None",
                    "int",
                    "typing.Callable[..., bool]"
                ],
                "before": [
                    "None",
                    "int",
                    "typing.Callable[..., bool]"
                ]
            }
        },
        "GmailApi.get_service": {
            "name": "get_service",
            "location": 123,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GmailApi.authenticate": {
            "name": "authenticate",
            "location": 128,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GmailApi.get_or_create_credentials": {
            "name": "get_or_create_credentials",
            "location": 135,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "ml-mentorship-master/mentorship/gmail/data.py": {},
    "ml-mentorship-master/mentorship/gmail/factory.py": {
        "MessageHeaderFactory.build": {
            "name": "build",
            "location": 9,
            "return": [
                "Header"
            ],
            "arguments": {
                "self": [],
                "header": [
                    "str"
                ]
            }
        },
        "MessagePartFactory.build": {
            "name": "build",
            "location": 15,
            "return": [
                "MessagePart"
            ],
            "arguments": {
                "cls": [
                    "typing.Callable[, ]",
                    "dict[, ]",
                    "dict[str, typing.Any]",
                    "typing.Type"
                ],
                "part": []
            }
        },
        "MessageFactory.build": {
            "name": "build",
            "location": 31,
            "return": [
                "Message"
            ],
            "arguments": {
                "cls": [
                    "list[str]",
                    "dict[str, typing.Any]",
                    "dict[int, str]",
                    "bool"
                ],
                "message": []
            }
        },
        "MessageIdFactory.build": {
            "name": "build",
            "location": 55,
            "return": [
                "MessageId"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "list[]"
                ],
                "message_id": [
                    "str",
                    "bytes"
                ]
            }
        }
    },
    "ml-mentorship-master/mentorship/gmail/__init__.py": {},
    "ml-mentorship-master/mentorship/tests/test_engine.py": {
        "multiply_by_two": {
            "name": "multiply_by_two",
            "location": 6,
            "return": [
                "int",
                "str",
                "typing.Iterable['Context']"
            ],
            "arguments": {
                "dataframe": [
                    "int",
                    "str",
                    "typing.Iterable['Context']"
                ]
            }
        },
        "multiply_by_three": {
            "name": "multiply_by_three",
            "location": 10,
            "return": [
                "int",
                "str",
                "typing.Iterable['Context']"
            ],
            "arguments": {
                "dataframe": [
                    "int",
                    "str",
                    "typing.Iterable['Context']"
                ]
            }
        },
        "test_pipeline": {
            "name": "test_pipeline",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "ml-mentorship-master/mentorship/tests/__init__.py": {}
}
{
    "mnj-master/setup.py": {
        "PyTest.initialize_options": {
            "name": "initialize_options",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PyTest.finalize_options": {
            "name": "finalize_options",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PyTest.run_tests": {
            "name": "run_tests",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "mnj-master/docs/conf.py": {},
    "mnj-master/nj/__init__.py": {},
    "mnj-master/nj/compat/regex.py": {},
    "mnj-master/nj/compat/__init__.py": {},
    "mnj-master/nj/core/base.py": {
        "MongoObject.__init__": {
            "name": "__init__",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MongoObject.__str__": {
            "name": "__str__",
            "location": 17,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "mnj-master/nj/core/client.py": {
        "create_client": {
            "name": "create_client",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "db_name": [
                    "str",
                    "typing.Type"
                ],
                "name": [
                    "typing.Text"
                ],
                "document_class": []
            }
        },
        "get_client": {
            "name": "get_client",
            "location": 36,
            "return": [],
            "arguments": {
                "name": [
                    "typing.Text"
                ]
            }
        },
        "get_entry": {
            "name": "get_entry",
            "location": 43,
            "return": [],
            "arguments": {
                "client_name": [
                    "typing.Text"
                ]
            }
        },
        "get_db": {
            "name": "get_db",
            "location": 50,
            "return": [],
            "arguments": {
                "client_name": [
                    "typing.Text"
                ]
            }
        }
    },
    "mnj-master/nj/core/document.py": {
        "DocumentType.__new__": {
            "name": "__new__",
            "location": 20,
            "return": [],
            "arguments": {
                "cls": [
                    "str",
                    "dict[str, typing.Any]",
                    "tuple[typing.Type]",
                    "dict[str, object]"
                ],
                "name": [
                    "str",
                    "dict[str, typing.Any]",
                    "tuple[typing.Type]",
                    "dict[str, object]"
                ],
                "bases": [
                    "str",
                    "dict[str, typing.Any]",
                    "tuple[typing.Type]",
                    "dict[str, object]"
                ],
                "namespace": [
                    "str",
                    "dict[str, typing.Any]",
                    "tuple[typing.Type]",
                    "dict[str, object]"
                ]
            }
        },
        "DocumentType.__call__": {
            "name": "__call__",
            "location": 33,
            "return": [],
            "arguments": {
                "cls": [
                    "typing.Callable[, ]",
                    "typing.Iterable[str]"
                ]
            }
        },
        "DocumentType._col": {
            "name": "_col",
            "location": 39,
            "return": [],
            "arguments": {
                "cls": [
                    "str",
                    "None",
                    "dict[, ]"
                ]
            }
        },
        "Document.__init_subclass__": {
            "name": "__init_subclass__",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "dict[, ]",
                    "str",
                    "typing.Callable[, ]"
                ]
            }
        },
        "Document.__str__": {
            "name": "__str__",
            "location": 72,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Document.__getitem__": {
            "name": "__getitem__",
            "location": 75,
            "return": [],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "None",
                    "tuple[]",
                    "dict[str, str]",
                    "int",
                    "typing.Callable[KT, VT]",
                    "typing.Type"
                ]
            }
        },
        "Document.__setitem__": {
            "name": "__setitem__",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str"
                ],
                "value": [
                    "str"
                ]
            }
        },
        "Document.__delitem__": {
            "name": "__delitem__",
            "location": 81,
            "return": [],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "float",
                    "int"
                ]
            }
        },
        "Document.__iter__": {
            "name": "__iter__",
            "location": 84,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Document.__len__": {
            "name": "__len__",
            "location": 87,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Document.query": {
            "name": "query",
            "location": 91,
            "return": [],
            "arguments": {
                "cls": [
                    "dict[, ]",
                    "dict[str, typing.Any]",
                    "typing.Mapping"
                ]
            }
        }
    },
    "mnj-master/nj/core/exceptions.py": {},
    "mnj-master/nj/core/query.py": {
        "Q.__and__": {
            "name": "__and__",
            "location": 11,
            "return": [],
            "arguments": {
                "self": [],
                "other": [
                    "tuple[typing.Union[int,int]]"
                ]
            }
        },
        "Q.__or__": {
            "name": "__or__",
            "location": 16,
            "return": [],
            "arguments": {
                "self": [],
                "other": [
                    "tuple[typing.Union[int,int]]"
                ]
            }
        },
        "Query.__init__": {
            "name": "__init__",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Query.__getattribute__": {
            "name": "__getattribute__",
            "location": 34,
            "return": [],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        }
    },
    "mnj-master/nj/core/registry.py": {
        "Registry.__init__": {
            "name": "__init__",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Registry.register_class": {
            "name": "register_class",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "document_class": [
                    "str",
                    "Exception"
                ]
            }
        },
        "Registry.get_candidates": {
            "name": "get_candidates",
            "location": 46,
            "return": [
                "dict[, ]"
            ],
            "arguments": {
                "self": [],
                "ns": [
                    "str"
                ]
            }
        },
        "DocumentFactory.__new__": {
            "name": "__new__",
            "location": 68,
            "return": [],
            "arguments": {
                "cls": [
                    "str",
                    "bool",
                    "float",
                    "list[str]",
                    "list[dict[str, str]]"
                ],
                "bson_bytes": [
                    "bytes",
                    "int",
                    "str"
                ],
                "codec_options": [
                    "None",
                    "str",
                    "dict[, ]",
                    "dict[str, typing.Any]",
                    "dict[str, str]",
                    "list[tuple[typing.Union[str,bytes]]]"
                ]
            }
        }
    },
    "mnj-master/nj/core/types.py": {},
    "mnj-master/nj/core/__init__.py": {},
    "mnj-master/nj/operators/base.py": {
        "OperatorMeta.__new__": {
            "name": "__new__",
            "location": 7,
            "return": [],
            "arguments": {
                "cls": [
                    "tuple[typing.Type]",
                    "str",
                    "bool"
                ],
                "name": [
                    "str",
                    "typing.Type"
                ],
                "bases": [
                    "tuple[typing.Type]",
                    "str",
                    "bool"
                ],
                "attrs": []
            }
        },
        "Operator.__init__": {
            "name": "__init__",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Operator.prepare": {
            "name": "prepare",
            "location": 30,
            "return": [
                "int",
                "tuple[typing.Union[str,int]]",
                "complex",
                "list[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "UnaryOperator.__init__": {
            "name": "__init__",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "float",
                    "str",
                    "int"
                ]
            }
        },
        "UnaryOperator.prepare": {
            "name": "prepare",
            "location": 40,
            "return": [
                "int",
                "tuple[typing.Union[str,int]]",
                "complex",
                "list[]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "int",
                    "tuple[typing.Union[str,int]]",
                    "complex",
                    "list[]"
                ]
            }
        },
        "ArgsOperator.prepare": {
            "name": "prepare",
            "location": 45,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "mnj-master/nj/operators/exceptions.py": {},
    "mnj-master/nj/operators/__init__.py": {},
    "mnj-master/nj/operators/query/array.py": {
        "all_.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "elem_match_.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "query": [
                    "str",
                    "int",
                    "float"
                ]
            }
        },
        "elem_match_.prepare": {
            "name": "prepare",
            "location": 18,
            "return": [],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "bool",
                    "complex",
                    "float",
                    "typing.Sequence[str]"
                ]
            }
        },
        "size_.__init__": {
            "name": "__init__",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "size": [
                    "int",
                    "str"
                ]
            }
        },
        "size_.prepare": {
            "name": "prepare",
            "location": 26,
            "return": [],
            "arguments": {
                "self": [],
                "value": [
                    "int",
                    "None",
                    "float",
                    "typing.Sequence[a]",
                    "str"
                ]
            }
        }
    },
    "mnj-master/nj/operators/query/bitwise.py": {
        "BitwiseOperator.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "bitmask": [
                    "bool",
                    "dict[str, typing.Any]",
                    "typing.Callable[b, bool]"
                ]
            }
        },
        "BitwiseOperator.prepare": {
            "name": "prepare",
            "location": 19,
            "return": [
                "int",
                "typing.Sequence[str]",
                "str",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "int",
                    "typing.Sequence[str]",
                    "str"
                ]
            }
        }
    },
    "mnj-master/nj/operators/query/comparison.py": {},
    "mnj-master/nj/operators/query/element.py": {
        "exists_.prepare": {
            "name": "prepare",
            "location": 10,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "list[float]",
                    "bool",
                    "typing.Any",
                    "float"
                ]
            }
        },
        "type_.prepare": {
            "name": "prepare",
            "location": 15,
            "return": [
                "str",
                "int",
                "float"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "int",
                    "float",
                    "tuple[typing.Union[str,str,str]]"
                ]
            }
        }
    },
    "mnj-master/nj/operators/query/evaluation.py": {
        "mod_.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "divisor": [
                    "bool",
                    "dict[str, typing.Any]",
                    "typing.Callable[r, bool]"
                ],
                "remainder": [
                    "bool",
                    "dict[str, typing.Any]",
                    "typing.Callable[m, bool]"
                ]
            }
        },
        "regex_.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "regex": [
                    "dict[str, typing.Any]",
                    "int",
                    "None",
                    "typing.TextIO"
                ],
                "options": [
                    "None",
                    "dict[str, typing.Any]",
                    "int",
                    "typing.TextIO"
                ]
            }
        },
        "regex_.prepare": {
            "name": "prepare",
            "location": 27,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "regex": [
                    "typing.Callable[, ]",
                    "dict[, ]"
                ],
                "options": [
                    "int",
                    "None",
                    "typing.Iterable[t]",
                    "typing.Callable[, ]",
                    "str"
                ]
            }
        },
        "text_.__init__": {
            "name": "__init__",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "search": [
                    "bool",
                    "None",
                    "str",
                    "float",
                    "list[]"
                ],
                "language": [
                    "None",
                    "bool",
                    "str",
                    "float",
                    "list[]"
                ],
                "caseSensitive": [
                    "None",
                    "bool",
                    "str",
                    "float",
                    "list[]"
                ],
                "diacriticSensitive": [
                    "None",
                    "bool",
                    "str",
                    "float",
                    "list[]"
                ]
            }
        },
        "text_.prepare": {
            "name": "prepare",
            "location": 55,
            "return": [],
            "arguments": {
                "self": [],
                "search": [
                    "str",
                    "bool",
                    "typing.Any",
                    "None",
                    "list[dict[str, str]]"
                ],
                "language": [
                    "None",
                    "str",
                    "bool"
                ],
                "caseSensitive": [
                    "None",
                    "bool",
                    "str"
                ],
                "diacriticSensitive": [
                    "None",
                    "bool",
                    "str"
                ]
            }
        }
    },
    "mnj-master/nj/operators/query/logical.py": {
        "not_.prepare": {
            "name": "prepare",
            "location": 16,
            "return": [],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ]
            }
        }
    },
    "mnj-master/nj/operators/query/__init__.py": {},
    "mnj-master/tests/conftest.py": {
        "mongo_host": {
            "name": "mongo_host",
            "location": 12,
            "return": [],
            "arguments": {}
        },
        "mongo_client": {
            "name": "mongo_client",
            "location": 17,
            "return": [
                "MongoClient"
            ],
            "arguments": {
                "mongo_host": [
                    "str"
                ]
            }
        },
        "db": {
            "name": "db",
            "location": 25,
            "return": [],
            "arguments": {
                "mongo_client": []
            }
        },
        "data": {
            "name": "data",
            "location": 31,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "db": [
                    "dict[str, typing.Any]"
                ]
            }
        },
        "clean": {
            "name": "clean",
            "location": 48,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "mongo_client": [
                    "typing.Callable[, ]",
                    "str"
                ],
                "db": [
                    "typing.Callable[, ]",
                    "str"
                ]
            }
        },
        "mnj_client": {
            "name": "mnj_client",
            "location": 54,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "mongo_host": [
                    "typing.Callable[, ]",
                    "str"
                ]
            }
        },
        "doc_registry": {
            "name": "doc_registry",
            "location": 63,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {}
        }
    },
    "mnj-master/tests/core/test_base.py": {
        "test_mongo_client_uses_mongo_object": {
            "name": "test_mongo_client_uses_mongo_object",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {
                "data": [
                    "str",
                    "dict[str, typing.Any]"
                ],
                "mnj_client": [
                    "bytes",
                    "None",
                    "str",
                    "dict[, ]"
                ]
            }
        },
        "test_mongo_object_keeps_order": {
            "name": "test_mongo_object_keeps_order",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "mnj-master/tests/core/test_client.py": {
        "test_001_create_default_client": {
            "name": "test_001_create_default_client",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "mongo_host": []
            }
        },
        "test_002_create_named_client": {
            "name": "test_002_create_named_client",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "mongo_host": [
                    "str"
                ]
            }
        },
        "test_003_recreating_client_is_forbidden": {
            "name": "test_003_recreating_client_is_forbidden",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "mongo_host": []
            }
        },
        "test_004_mongo_client_gets_any_kwargs": {
            "name": "test_004_mongo_client_gets_any_kwargs",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "mongo_host": []
            }
        },
        "test_005_default_document_class_is_mnj_factory": {
            "name": "test_005_default_document_class_is_mnj_factory",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "mongo_host": []
            }
        },
        "test_006_document_class_could_be_overrided": {
            "name": "test_006_document_class_could_be_overrided",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "mongo_host": []
            }
        }
    },
    "mnj-master/tests/core/test_document.py": {
        "test_001_default_collection_name": {
            "name": "test_001_default_collection_name",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_002_explicit_collection_name": {
            "name": "test_002_explicit_collection_name",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_003_keep_collection_name_when_subclassing": {
            "name": "test_003_keep_collection_name_when_subclassing",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_004_allow_to_override_collection_name_when_subclassing": {
            "name": "test_004_allow_to_override_collection_name_when_subclassing",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_005_document_col_property": {
            "name": "test_005_document_col_property",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "mnj_client": [
                    "bool",
                    "typing.Callable[[], int]"
                ]
            }
        },
        "test_006_document_python_to_mongo": {
            "name": "test_006_document_python_to_mongo",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "db": [
                    "str"
                ],
                "mnj_client": [
                    "list[]",
                    "dict[, ]"
                ],
                "clean": [
                    "list[]",
                    "dict[, ]"
                ]
            }
        },
        "test_007_document_mongo_to_python": {
            "name": "test_007_document_mongo_to_python",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "db": [],
                "mnj_client": [
                    "list[]",
                    "dict[, ]"
                ],
                "clean": [
                    "list[]",
                    "dict[, ]"
                ]
            }
        }
    },
    "mnj-master/tests/core/test_q.py": {
        "test_query_empty": {
            "name": "test_query_empty",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_query_dict": {
            "name": "test_query_dict",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_query_kwargs": {
            "name": "test_query_kwargs",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_query_illegal_value": {
            "name": "test_query_illegal_value",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_query_from_query": {
            "name": "test_query_from_query",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_query_and_query": {
            "name": "test_query_and_query",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_query_or_query": {
            "name": "test_query_or_query",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_query_from_query_arguments": {
            "name": "test_query_from_query_arguments",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "mnj-master/tests/core/test_query.py": {
        "test_001_query_method_return_query_instance": {
            "name": "test_001_query_method_return_query_instance",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_002_query_document_class_property": {
            "name": "test_002_query_document_class_property",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "db": [
                    "bool"
                ]
            }
        }
    },
    "mnj-master/tests/query/test_array.py": {
        "test_all": {
            "name": "test_all",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_elem_match": {
            "name": "test_elem_match",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_size": {
            "name": "test_size",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "mnj-master/tests/query/test_bitwise.py": {
        "test_bitwise": {
            "name": "test_bitwise",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "func": [
                    "int",
                    "list[str]"
                ],
                "op": [
                    "set[frozenset]"
                ]
            }
        }
    },
    "mnj-master/tests/query/test_comparison.py": {
        "test_gt": {
            "name": "test_gt",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_gte": {
            "name": "test_gte",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_in": {
            "name": "test_in",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_lt": {
            "name": "test_lt",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_lte": {
            "name": "test_lte",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_ne": {
            "name": "test_ne",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_nin": {
            "name": "test_nin",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "mnj-master/tests/query/test_element.py": {
        "test_exists": {
            "name": "test_exists",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_type": {
            "name": "test_type",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "mnj-master/tests/query/test_evaluation.py": {
        "test_mod": {
            "name": "test_mod",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_regex": {
            "name": "test_regex",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_text": {
            "name": "test_text",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_where": {
            "name": "test_where",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "mnj-master/tests/query/test_logical.py": {
        "test_and": {
            "name": "test_and",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_nor": {
            "name": "test_nor",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_not": {
            "name": "test_not",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_or": {
            "name": "test_or",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "mnj-master/tests/sample_queries/test_simple_queries.py": {
        "test_simple_001": {
            "name": "test_simple_001",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {
                "data": [
                    "dict[str, typing.Any]",
                    "list[dict[, ]]",
                    "None",
                    "bytes"
                ]
            }
        },
        "test_simple_002": {
            "name": "test_simple_002",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "data": [
                    "bytes",
                    "list[str]",
                    "str"
                ]
            }
        },
        "test_simple_003": {
            "name": "test_simple_003",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "data": [
                    "str",
                    "bytes",
                    "dict[, ]",
                    "dict[str, typing.Any]",
                    "bool"
                ]
            }
        },
        "test_simple_004": {
            "name": "test_simple_004",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "data": [
                    "bytes",
                    "list[str]",
                    "str"
                ]
            }
        },
        "test_simple_005": {
            "name": "test_simple_005",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "data": [
                    "dict[, ]"
                ]
            }
        }
    },
    "mnj-master/tests/sample_queries/test_various_queries.py": {
        "test_various_001": {
            "name": "test_various_001",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {
                "data": [
                    "dict[, ]",
                    "dict[str, typing.Any]",
                    "str"
                ]
            }
        },
        "test_various_002": {
            "name": "test_various_002",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "data": [
                    "str",
                    "bytes",
                    "dict[, ]",
                    "dict[str, typing.Any]",
                    "bool"
                ]
            }
        },
        "test_various_003": {
            "name": "test_various_003",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "data": [
                    "bytes",
                    "dict[, ]",
                    "str",
                    "bool"
                ]
            }
        }
    }
}
{
    "molehill-master/setup.py": {},
    "molehill-master/molehill/evaluation.py": {
        "_build_evaluate_clause": {
            "name": "_build_evaluate_clause",
            "location": 14,
            "return": [
                "list[str]"
            ],
            "arguments": {
                "metrics": [
                    "list[str]",
                    "str"
                ],
                "scoring_template": [
                    "str"
                ],
                "inv_template": [
                    "str"
                ],
                "predicted_column": [
                    "list[]",
                    "list[list[int]]",
                    "str",
                    "int",
                    "range",
                    "list[str]"
                ],
                "target_column": [
                    "list[]",
                    "list[list[int]]",
                    "str",
                    "int",
                    "range",
                    "list[str]"
                ]
            }
        },
        "evaluate": {
            "name": "evaluate",
            "location": 48,
            "return": [],
            "arguments": {
                "metrics": [
                    "str",
                    "int",
                    "dict[str, str]",
                    "typing.Iterator",
                    "dict[, ]",
                    "None"
                ],
                "target_column": [
                    "int",
                    "str",
                    "typing.Sequence[str]",
                    "None",
                    "typing.Iterable[str]"
                ],
                "predicted_column": [
                    "int",
                    "str",
                    "typing.Sequence[str]",
                    "None",
                    "typing.Iterable[str]"
                ],
                "target_table": [
                    "typing.Text"
                ],
                "prediction_table": [
                    "typing.Text"
                ],
                "id_column": [
                    "typing.Text"
                ]
            }
        }
    },
    "molehill-master/molehill/generate_workflow.py": {
        "main": {
            "name": "main",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "molehill-master/molehill/pipeline.py": {
        "_represent_odict": {
            "name": "_represent_odict",
            "location": 17,
            "return": [],
            "arguments": {
                "dumper": [
                    "str",
                    "bool",
                    "None",
                    "list[int]"
                ],
                "instance": []
            }
        },
        "construct_odict": {
            "name": "construct_odict",
            "location": 21,
            "return": [
                "OrderedDict"
            ],
            "arguments": {
                "loader": [],
                "node": [
                    "bool",
                    "dict[, ]",
                    "None",
                    "typing.Mapping"
                ]
            }
        },
        "Pipeline.__init__": {
            "name": "__init__",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Pipeline.save_query": {
            "name": "save_query",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "file_path": [
                    "str"
                ],
                "query": [
                    "str",
                    "int",
                    "typing.IO"
                ]
            }
        },
        "Pipeline._set_columns": {
            "name": "_set_columns",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "dict[str, typing.Any]",
                    "dict[, ]"
                ]
            }
        },
        "Pipeline._build_shuffle_and_split_task": {
            "name": "_build_shuffle_and_split_task",
            "location": 100,
            "return": [
                "typing.Counter",
                "dict[str, typing.Any]"
            ],
            "arguments": {
                "self": [],
                "stratify": [
                    "None",
                    "dict[str, str]",
                    "tuple[typing.Union[float,None,float,None]]"
                ]
            }
        },
        "Pipeline._build_task_with_stats": {
            "name": "_build_task_with_stats",
            "location": 137,
            "return": [
                "tuple[typing.Union[dict[, ],tuple[typing.Union[str,str]],dict[str, dict[str, str]],list[tuple[typing.Union[str,typing.Any]]],typing.Text]]"
            ],
            "arguments": {
                "self": [],
                "query_basename": [
                    "str",
                    "None",
                    "typing.IO"
                ],
                "source": [
                    "int",
                    "list['cirq.Circuit']",
                    "str"
                ],
                "source_whole": [
                    "bool",
                    "list[]",
                    "tuple[int]"
                ],
                "output_prefix": [
                    "str",
                    "bool"
                ],
                "target_columns": [
                    "list[str]",
                    "int",
                    "str",
                    "float",
                    "None"
                ],
                "target_clauses": [
                    "list[str]"
                ],
                "target_clauses_whole": [
                    "list[str]"
                ],
                "hive": [
                    "None",
                    "str"
                ]
            }
        },
        "Pipeline._build_cardinality_task": {
            "name": "_build_cardinality_task",
            "location": 205,
            "return": [],
            "arguments": {
                "self": [],
                "source": [
                    "str"
                ]
            }
        },
        "Pipeline._build_vectorize_task": {
            "name": "_build_vectorize_task",
            "location": 220,
            "return": [
                "tuple[str]"
            ],
            "arguments": {
                "self": [],
                "conf": [],
                "source": [
                    "str"
                ],
                "source_train": [
                    "str"
                ],
                "source_test": [
                    "str"
                ],
                "require_dense": [
                    "bool"
                ]
            }
        },
        "Pipeline._build_train_task": {
            "name": "_build_train_task",
            "location": 299,
            "return": [],
            "arguments": {
                "self": [],
                "config": [
                    "dict[str, typing.Any]",
                    "dict[, ]"
                ],
                "mod": [
                    "dict[, ]",
                    "str"
                ],
                "train_table": [
                    "str"
                ]
            }
        },
        "Pipeline._build_downsampling_task": {
            "name": "_build_downsampling_task",
            "location": 327,
            "return": [],
            "arguments": {
                "self": [],
                "source": [
                    "str",
                    "tuple[pathlib.Path]"
                ],
                "target_column": [
                    "str",
                    "tuple[pathlib.Path]"
                ]
            }
        },
        "Pipeline._build_predict_and_eval_task": {
            "name": "_build_predict_and_eval_task",
            "location": 344,
            "return": [],
            "arguments": {
                "self": [],
                "config": [
                    "dict[str, typing.Any]"
                ],
                "mod": [
                    "str",
                    "int",
                    "typing.Callable[, ]"
                ],
                "pred_idx": [
                    "int",
                    "float"
                ],
                "test_table": [],
                "metrics": [
                    "str",
                    "list[]",
                    "list[str]",
                    "dict[str, typing.Any]"
                ],
                "multiple_predictors": [
                    "bool"
                ]
            }
        },
        "Pipeline._require_dense_vector": {
            "name": "_require_dense_vector",
            "location": 390,
            "return": [
                "bool"
            ],
            "arguments": {
                "config": [
                    "dict[str, typing.Any]",
                    "dict[, ]"
                ]
            }
        },
        "Pipeline.dump_pipeline": {
            "name": "dump_pipeline",
            "location": 398,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config_file": [
                    "str"
                ],
                "dest_file": [
                    "None",
                    "str"
                ],
                "overwrite": [
                    "bool"
                ]
            }
        }
    },
    "molehill-master/molehill/stats.py": {
        "compute_stats": {
            "name": "compute_stats",
            "location": 7,
            "return": [],
            "arguments": {
                "source": [
                    "bool",
                    "str",
                    "None",
                    "list[\"DeliveryItem\"]",
                    "list[str]",
                    "float",
                    "list[list[str]]"
                ],
                "numerical_columns": [
                    "list[str]",
                    "str",
                    "list[]"
                ]
            }
        },
        "combine_train_test_stats": {
            "name": "combine_train_test_stats",
            "location": 28,
            "return": [],
            "arguments": {
                "source": [
                    "str",
                    "list[str]",
                    "None",
                    "bool"
                ],
                "numerical_columns": [
                    "list[str]",
                    "float",
                    "int",
                    "str"
                ]
            }
        }
    },
    "molehill-master/molehill/utils.py": {
        "build_query": {
            "name": "build_query",
            "location": 7,
            "return": [],
            "arguments": {
                "select_clauses": [
                    "list[str]",
                    "set[str]",
                    "list[]",
                    "str"
                ],
                "source": [
                    "str",
                    "None",
                    "int",
                    "list[tuple[typing.Union[int,int]]]"
                ],
                "condition": [
                    "None",
                    "str",
                    "int",
                    "list[tuple[typing.Union[int,int]]]"
                ],
                "without_semicolon": [
                    "bool"
                ],
                "with_clauses": []
            }
        }
    },
    "molehill-master/molehill/__init__.py": {},
    "molehill-master/molehill/model/base.py": {
        "base_model": {
            "name": "base_model",
            "location": 7,
            "return": [
                "str",
                "set[]",
                "list[str]",
                "list[]",
                "typing.Pattern"
            ],
            "arguments": {
                "function": [
                    "bool",
                    "typing.Callable[, ]"
                ],
                "storage_format": [
                    "None",
                    "str",
                    "float"
                ],
                "target": [
                    "typing.Text"
                ],
                "source_table": [
                    "typing.Text"
                ],
                "option": [
                    "None",
                    "str",
                    "typing.Callable[, ]",
                    "list[str]",
                    "dict[, ]"
                ],
                "bias": [
                    "bool"
                ],
                "hashing": [
                    "bool"
                ],
                "with_clause": [
                    "bool"
                ],
                "oversample_pos_n_times": [
                    "None",
                    "int",
                    "str",
                    "tuple[typing.Union[int,int]]",
                    "list[typing.Optional[str]]"
                ],
                "oversample_n_times": [
                    "None",
                    "int",
                    "str",
                    "tuple[typing.Union[int,int]]",
                    "list[typing.Optional[str]]"
                ]
            }
        }
    },
    "molehill-master/molehill/model/linear_model.py": {
        "train_classifier": {
            "name": "train_classifier",
            "location": 7,
            "return": [],
            "arguments": {
                "source_table": [
                    "typing.Text"
                ],
                "target": [
                    "typing.Text"
                ],
                "option": [
                    "None",
                    "int",
                    "str"
                ],
                "bias": [
                    "bool"
                ],
                "hashing": [
                    "bool"
                ],
                "oversample_pos_n_times": [
                    "None",
                    "int",
                    "str"
                ],
                "oversample_n_times": [
                    "None",
                    "int",
                    "str"
                ]
            }
        },
        "train_regressor": {
            "name": "train_regressor",
            "location": 52,
            "return": [],
            "arguments": {
                "source_table": [
                    "typing.Text"
                ],
                "target": [
                    "typing.Text"
                ],
                "option": [
                    "None",
                    "int",
                    "str"
                ],
                "bias": [
                    "bool"
                ],
                "hashing": [
                    "bool"
                ],
                "oversample_pos_n_times": [
                    "None",
                    "int",
                    "str"
                ],
                "oversample_n_times": [
                    "None",
                    "int",
                    "str"
                ]
            }
        },
        "_build_prediction_query": {
            "name": "_build_prediction_query",
            "location": 97,
            "return": [],
            "arguments": {
                "predicted_column": [
                    "str",
                    "typing.Callable[, ]",
                    "None",
                    "list[str]",
                    "bool"
                ],
                "target_table": [
                    "dict[, ]",
                    "bool",
                    "str",
                    "dict[str, typing.Any]",
                    "None"
                ],
                "id_column": [
                    "bool",
                    "dict[, ]",
                    "str",
                    "dict[str, typing.Any]",
                    "None"
                ],
                "model_table": [
                    "str",
                    "typing.Callable[..., typing.Any]",
                    "None",
                    "bool",
                    "typing.Any"
                ],
                "bias": [
                    "bool"
                ],
                "hashing": [
                    "bool"
                ],
                "sigmoid": [
                    "bool"
                ],
                "pos_oversampling": [
                    "bool"
                ]
            }
        },
        "predict_classifier": {
            "name": "predict_classifier",
            "location": 144,
            "return": [
                "tuple[typing.Text]"
            ],
            "arguments": {
                "target_table": [
                    "typing.Text"
                ],
                "id_column": [
                    "typing.Text"
                ],
                "model_table": [
                    "typing.Text"
                ],
                "sigmoid": [
                    "bool"
                ],
                "bias": [
                    "bool"
                ],
                "hashing": [
                    "bool"
                ],
                "oversample_pos_n_times": [
                    "None",
                    "str",
                    "bool"
                ]
            }
        },
        "predict_regressor": {
            "name": "predict_regressor",
            "location": 189,
            "return": [
                "tuple[typing.Text]"
            ],
            "arguments": {
                "target_table": [
                    "typing.Text"
                ],
                "id_column": [
                    "typing.Text"
                ],
                "model_table": [
                    "typing.Text"
                ],
                "predicted_column": [
                    "typing.Text"
                ],
                "bias": [
                    "bool"
                ],
                "hashing": [
                    "bool"
                ],
                "oversample_pos_n_times": [
                    "None",
                    "str",
                    "bool"
                ]
            }
        }
    },
    "molehill-master/molehill/model/tree_model.py": {
        "_extract_attrs": {
            "name": "_extract_attrs",
            "location": 11,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "categorical_columns": [],
                "numerical_columns": []
            }
        },
        "_ensure_attrs": {
            "name": "_ensure_attrs",
            "location": 16,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "option": [],
                "categorical_columns": [
                    "bool"
                ],
                "numerical_columns": [
                    "bool"
                ]
            }
        },
        "_base_train_query": {
            "name": "_base_train_query",
            "location": 27,
            "return": [],
            "arguments": {
                "func_name": [
                    "str",
                    "None"
                ],
                "source_table": [
                    "str",
                    "None"
                ],
                "target": [
                    "str",
                    "None"
                ],
                "option": [
                    "str",
                    "None"
                ],
                "hashing": [
                    "bool"
                ],
                "oversample_pos_n_times": [
                    "None",
                    "str"
                ],
                "sparse": [
                    "bool"
                ],
                "categorical_columns": [
                    "None",
                    "str",
                    "bool"
                ],
                "numerical_columns": [
                    "None",
                    "str",
                    "bool"
                ]
            }
        },
        "train_randomforest_classifier": {
            "name": "train_randomforest_classifier",
            "location": 80,
            "return": [],
            "arguments": {
                "source_table": [
                    "typing.Text"
                ],
                "target": [
                    "typing.Text"
                ],
                "option": [
                    "None",
                    "bool",
                    "str"
                ],
                "hashing": [
                    "bool"
                ],
                "oversample_pos_n_times": [
                    "None",
                    "bool",
                    "str"
                ],
                "sparse": [
                    "bool"
                ],
                "categorical_columns": [
                    "None",
                    "bool",
                    "str"
                ],
                "numerical_columns": [
                    "None",
                    "bool",
                    "str"
                ]
            }
        },
        "train_randomforest_regressor": {
            "name": "train_randomforest_regressor",
            "location": 130,
            "return": [],
            "arguments": {
                "source_table": [
                    "typing.Text"
                ],
                "target": [
                    "typing.Text"
                ],
                "option": [
                    "None",
                    "bool",
                    "str"
                ],
                "hashing": [
                    "bool"
                ],
                "oversample_pos_n_times": [
                    "None",
                    "bool",
                    "str"
                ],
                "sparse": [
                    "bool"
                ],
                "categorical_columns": [
                    "None",
                    "bool",
                    "str"
                ],
                "numerical_columns": [
                    "None",
                    "bool",
                    "str"
                ]
            }
        },
        "_build_prediction_query": {
            "name": "_build_prediction_query",
            "location": 180,
            "return": [
                "list[str]",
                "str",
                "list[]",
                "dict[, ]",
                "set[]",
                "None"
            ],
            "arguments": {
                "target_table": [
                    "bool",
                    "str",
                    "dict[str, typing.Any]",
                    "None",
                    "typing.Callable[[], str]"
                ],
                "id_column": [
                    "str",
                    "None",
                    "bool",
                    "typing.Callable[[], str]",
                    "dict[str, typing.Any]"
                ],
                "model_table": [
                    "str",
                    "bool",
                    "dict[, ]"
                ],
                "classification": [
                    "bool"
                ],
                "hashing": [
                    "bool"
                ]
            }
        },
        "predict_randomforest_classifier": {
            "name": "predict_randomforest_classifier",
            "location": 211,
            "return": [
                "tuple[typing.Text]"
            ],
            "arguments": {
                "target_table": [
                    "typing.Text"
                ],
                "id_column": [
                    "typing.Text"
                ],
                "model_table": [
                    "typing.Text"
                ],
                "hashing": [
                    "bool"
                ]
            }
        },
        "predict_randomforest_regressor": {
            "name": "predict_randomforest_regressor",
            "location": 241,
            "return": [
                "tuple[typing.Text]"
            ],
            "arguments": {
                "target_table": [
                    "typing.Text"
                ],
                "id_column": [
                    "typing.Text"
                ],
                "model_table": [
                    "typing.Text"
                ],
                "hashing": [
                    "bool"
                ]
            }
        }
    },
    "molehill-master/molehill/model/__init__.py": {},
    "molehill-master/molehill/preprocessing/cardinality.py": {
        "cardinality": {
            "name": "cardinality",
            "location": 5,
            "return": [],
            "arguments": {
                "source": [
                    "str",
                    "bool",
                    "None",
                    "list[]",
                    "list[str]"
                ],
                "categorical_columns": [
                    "list[str]",
                    "str"
                ]
            }
        }
    },
    "molehill-master/molehill/preprocessing/downsample_rate.py": {
        "downsampling_rate": {
            "name": "downsampling_rate",
            "location": 5,
            "return": [],
            "arguments": {
                "source": [
                    "str",
                    "None",
                    "typing.Sequence[str]",
                    "list[str]",
                    "dict[str, typing.Any]"
                ],
                "target_column": [
                    "str",
                    "None",
                    "dict[str, dict[, ]]",
                    "bool",
                    "typing.Sequence[str]",
                    "dict[, ]"
                ]
            }
        }
    },
    "molehill-master/molehill/preprocessing/impute.py": {
        "Imputer.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "strategy": [
                    "typing.Text"
                ],
                "phase": [
                    "typing.Text"
                ],
                "fill_value": [
                    "None",
                    "list[str]",
                    "typing.Sequence[str]",
                    "str",
                    "frozenset",
                    "set[str]",
                    "bool"
                ],
                "categorical": [
                    "None",
                    "int",
                    "str",
                    "float"
                ]
            }
        },
        "Imputer._build_partial_query": {
            "name": "_build_partial_query",
            "location": 32,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "template": [
                    "str"
                ],
                "statistics": [
                    "list[]",
                    "list[str]",
                    "str",
                    "list[float]",
                    "bool"
                ],
                "_columns": [
                    "list[]",
                    "list[str]",
                    "str",
                    "list[float]"
                ]
            }
        },
        "Imputer.transform": {
            "name": "transform",
            "location": 45,
            "return": [],
            "arguments": {
                "self": [],
                "columns": [
                    "bool",
                    "tuple[typing.Union[int,int]]",
                    "None",
                    "float"
                ]
            }
        }
    },
    "molehill-master/molehill/preprocessing/normalization.py": {
        "Normalizer.__init__": {
            "name": "__init__",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "strategy": [
                    "typing.Text"
                ],
                "phase": [
                    "typing.Text"
                ]
            }
        },
        "Normalizer._build_partial_query": {
            "name": "_build_partial_query",
            "location": 29,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "template": [],
                "_columns": [
                    "list[str]"
                ]
            }
        },
        "Normalizer.transform": {
            "name": "transform",
            "location": 41,
            "return": [],
            "arguments": {
                "self": [],
                "columns": [
                    "bool",
                    "tuple[typing.Union[int,int]]",
                    "None",
                    "float"
                ]
            }
        },
        "Normalizer.invert_transform": {
            "name": "invert_transform",
            "location": 70,
            "return": [],
            "arguments": {
                "self": [],
                "columns": [
                    "bool",
                    "tuple[typing.Union[int,int]]",
                    "None",
                    "float"
                ]
            }
        }
    },
    "molehill-master/molehill/preprocessing/shuffle.py": {
        "shuffle": {
            "name": "shuffle",
            "location": 5,
            "return": [],
            "arguments": {
                "columns": [],
                "target_column": [
                    "str",
                    "None",
                    "list[]",
                    "dict[str, list[str]]",
                    "int"
                ],
                "source": [
                    "typing.Text"
                ],
                "id_column": [
                    "typing.Text"
                ],
                "stratify": [
                    "None",
                    "bool",
                    "str",
                    "list[str]"
                ],
                "rnd_seed": [
                    "int"
                ],
                "cluster_seed": [
                    "int"
                ]
            }
        },
        "train_test_split": {
            "name": "train_test_split",
            "location": 53,
            "return": [
                "tuple[typing.Union[list[],dict[str, list[typing.Any]],dict[, ],str,list[str]]]"
            ],
            "arguments": {
                "source": [
                    "typing.Text"
                ],
                "train_sample_rate": [
                    "typing.Text"
                ],
                "stratify": [
                    "None",
                    "bool",
                    "str",
                    "bytes"
                ]
            }
        }
    },
    "molehill-master/molehill/preprocessing/vectorization.py": {
        "vectorize": {
            "name": "vectorize",
            "location": 9,
            "return": [
                "str",
                "tuple[str]",
                "typing.Callable[list[str], typing.Iterable[str]]",
                "list[str]"
            ],
            "arguments": {
                "source": [
                    "str",
                    "bool",
                    "None",
                    "float"
                ],
                "target_column": [
                    "str",
                    "bool",
                    "None",
                    "float"
                ],
                "categorical_columns": [
                    "None",
                    "str",
                    "bool"
                ],
                "numerical_columns": [
                    "None",
                    "str",
                    "bool"
                ],
                "id_column": [
                    "typing.Text"
                ],
                "features": [
                    "typing.Text"
                ],
                "bias": [
                    "bool"
                ],
                "hashing": [
                    "bool"
                ],
                "emit_null": [
                    "bool"
                ],
                "force_value": [
                    "bool"
                ],
                "dense": [
                    "bool"
                ],
                "feature_cardinality": [
                    "None",
                    "bool",
                    "str",
                    "list[str]",
                    "list[tuple[typing.Union[typing.Any,str]]]"
                ]
            }
        },
        "_build_feature_array": {
            "name": "_build_feature_array",
            "location": 97,
            "return": [
                "str"
            ],
            "arguments": {
                "columns": [
                    "list[str]",
                    "list[int]",
                    "list[]"
                ],
                "ctype": [
                    "str",
                    "dict[int, dict[int, typing.Any]]",
                    "bool"
                ],
                "emit_null": [
                    "bool"
                ],
                "force_value": [
                    "bool"
                ]
            }
        },
        "_build_feature_array_dense": {
            "name": "_build_feature_array_dense",
            "location": 145,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "categorical_columns": [
                    "list[str]"
                ],
                "numerical_columns": [],
                "hashing": [
                    "bool"
                ],
                "feature_cardinality": [
                    "None",
                    "int",
                    "tuple[int]",
                    "str"
                ]
            }
        },
        "_feature_column_query": {
            "name": "_feature_column_query",
            "location": 164,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "categorical_columns": [],
                "numerical_columns": [],
                "emit_null": [
                    "bool"
                ],
                "force_value": [
                    "bool"
                ]
            }
        }
    },
    "molehill-master/molehill/preprocessing/__init__.py": {},
    "molehill-master/tests/test_evaluation.py": {
        "test_evaluate_with_auc": {
            "name": "test_evaluate_with_auc",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_evaluate_with_logloss": {
            "name": "test_evaluate_with_logloss",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_evaluate_fmeasure": {
            "name": "test_evaluate_fmeasure",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_evaluate_with_accuracy_precision_recall": {
            "name": "test_evaluate_with_accuracy_precision_recall",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_evaluate_unknown_measure": {
            "name": "test_evaluate_unknown_measure",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "molehill-master/tests/test_pipeline.py": {
        "change_dir": {
            "name": "change_dir",
            "location": 11,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "tmp_path": [
                    "str"
                ]
            }
        },
        "test_dump_yaml": {
            "name": "test_dump_yaml",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_dump_yaml_oversample": {
            "name": "test_dump_yaml_oversample",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_dump_yaml_pos_oversample": {
            "name": "test_dump_yaml_pos_oversample",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_dump_yaml_randomforest": {
            "name": "test_dump_yaml_randomforest",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "molehill-master/tests/test_stats.py": {
        "test_compute_stats": {
            "name": "test_compute_stats",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_combine_train_test_stats": {
            "name": "test_combine_train_test_stats",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "molehill-master/tests/test_utils.py": {
        "test_build_query": {
            "name": "test_build_query",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_build_query_without_semicolon": {
            "name": "test_build_query_without_semicolon",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_build_query_with_condition": {
            "name": "test_build_query_with_condition",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_build_query_with_clause": {
            "name": "test_build_query_with_clause",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "molehill-master/tests/model/test_linear_model.py": {
        "test_train_regressor": {
            "name": "test_train_regressor",
            "location": 152,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "TestTrainClassifier.test_train_classifier": {
            "name": "test_train_classifier",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTrainClassifier.test_train_classifier_pos_oversampling": {
            "name": "test_train_classifier_pos_oversampling",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTrainClassifier.test_train_classifier_oversampling": {
            "name": "test_train_classifier_oversampling",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTrainClassifier.test_train_classifier_bias": {
            "name": "test_train_classifier_bias",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTrainClassifier.test_train_classifier_hashing": {
            "name": "test_train_classifier_hashing",
            "location": 121,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTrainClassifier.test_train_classifier_bias_hashing": {
            "name": "test_train_classifier_bias_hashing",
            "location": 136,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPredictClassifier.test_predict_classifier": {
            "name": "test_predict_classifier",
            "location": 169,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPredictClassifier.test_predict_classifier_bias": {
            "name": "test_predict_classifier_bias",
            "location": 197,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPredictClassifier.test_predict_classifier_hashing": {
            "name": "test_predict_classifier_hashing",
            "location": 225,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPredictClassifier.test_predict_classifier_bias_hashing": {
            "name": "test_predict_classifier_bias_hashing",
            "location": 253,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPredictClassifier.test_predict_classifier_wo_sigmoid": {
            "name": "test_predict_classifier_wo_sigmoid",
            "location": 281,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPredictRegressor.test_predict_regressor": {
            "name": "test_predict_regressor",
            "location": 311,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPredictRegressor.test_predict_regressor_bias": {
            "name": "test_predict_regressor_bias",
            "location": 339,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPredictRegressor.test_predict_regressor_hashing": {
            "name": "test_predict_regressor_hashing",
            "location": 367,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPredictRegressor.test_predict_regressor_bias_hashing": {
            "name": "test_predict_regressor_bias_hashing",
            "location": 395,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "molehill-master/tests/model/test_tree_model.py": {
        "categorical_cols": {
            "name": "categorical_cols",
            "location": 9,
            "return": [
                "list[typing.Text]"
            ],
            "arguments": {}
        },
        "numerical_cols": {
            "name": "numerical_cols",
            "location": 14,
            "return": [
                "list[typing.Text]"
            ],
            "arguments": {}
        },
        "test_extract_attrs": {
            "name": "test_extract_attrs",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "categorical_cols": [
                    "str"
                ],
                "numerical_cols": [
                    "str"
                ]
            }
        },
        "TestSparseTrainModel.test_train_randomforest_classifier": {
            "name": "test_train_randomforest_classifier",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSparseTrainModel.test_train_randomforest_regressor": {
            "name": "test_train_randomforest_regressor",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDenseTrainModel.test_train_randomforest_classifier": {
            "name": "test_train_randomforest_classifier",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "categorical_cols": [
                    "int",
                    "list[str]",
                    "str"
                ],
                "numerical_cols": [
                    "int",
                    "list[str]",
                    "str"
                ]
            }
        },
        "TestDenseTrainModel.test_train_randomforest_regressor": {
            "name": "test_train_randomforest_regressor",
            "location": 104,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "categorical_cols": [
                    "int",
                    "list[str]",
                    "str"
                ],
                "numerical_cols": [
                    "int",
                    "list[str]",
                    "str"
                ]
            }
        },
        "TestPredictClassifier.test_predict_randomforest_classifier": {
            "name": "test_predict_randomforest_classifier",
            "location": 124,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPredictClassifier.test_predict_randomforest_classifier_hashing": {
            "name": "test_predict_randomforest_classifier_hashing",
            "location": 168,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPredictRegressor.test_predict_randomforest_regressor": {
            "name": "test_predict_randomforest_regressor",
            "location": 213,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPredictRegressor.test_predict_regressor_hashing": {
            "name": "test_predict_regressor_hashing",
            "location": 256,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "molehill-master/tests/preprocessing/test_downsample_rate.py": {
        "test_downsampling_rate": {
            "name": "test_downsampling_rate",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "molehill-master/tests/preprocessing/test_impute.py": {
        "num_cols": {
            "name": "num_cols",
            "location": 6,
            "return": [
                "list[typing.Text]"
            ],
            "arguments": {}
        },
        "cat_cols": {
            "name": "cat_cols",
            "location": 11,
            "return": [
                "list[typing.Text]"
            ],
            "arguments": {}
        },
        "test_numeric_imputer": {
            "name": "test_numeric_imputer",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "num_cols": [
                    "str",
                    "int"
                ]
            }
        },
        "test_categorical_imputer": {
            "name": "test_categorical_imputer",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "cat_cols": [
                    "str"
                ]
            }
        },
        "test_numeric_imputer_without_phase": {
            "name": "test_numeric_imputer_without_phase",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "num_cols": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "molehill-master/tests/preprocessing/test_normalization.py": {
        "num_cols": {
            "name": "num_cols",
            "location": 6,
            "return": [
                "list[typing.Text]"
            ],
            "arguments": {}
        },
        "test_normalizer_minmax": {
            "name": "test_normalizer_minmax",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "num_cols": [
                    "str",
                    "int"
                ]
            }
        },
        "test_normalizer_minmax_without_phase": {
            "name": "test_normalizer_minmax_without_phase",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "num_cols": [
                    "str",
                    "int"
                ]
            }
        },
        "test_normalizer_standardize": {
            "name": "test_normalizer_standardize",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "num_cols": [
                    "str",
                    "int"
                ]
            }
        },
        "test_normalize_log1p": {
            "name": "test_normalize_log1p",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "num_cols": [
                    "int",
                    "str",
                    "tuple[typing.Union[typing.Literal,typing.Literal]]",
                    "float"
                ]
            }
        }
    },
    "molehill-master/tests/preprocessing/test_shuffle.py": {
        "test_shuffle": {
            "name": "test_shuffle",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_stratified_shuffle": {
            "name": "test_stratified_shuffle",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_train_test_split": {
            "name": "test_train_test_split",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_train_test_split_stratify": {
            "name": "test_train_test_split_stratify",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "molehill-master/tests/preprocessing/test_vectorization.py": {
        "num_cols": {
            "name": "num_cols",
            "location": 7,
            "return": [
                "list[typing.Text]"
            ],
            "arguments": {}
        },
        "cat_cols": {
            "name": "cat_cols",
            "location": 12,
            "return": [
                "list[typing.Text]"
            ],
            "arguments": {}
        },
        "test_vectorize": {
            "name": "test_vectorize",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "num_cols": [
                    "int",
                    "str",
                    "dict[str, tuple[typing.Union[str,int,int]]]"
                ],
                "cat_cols": [
                    "int",
                    "str",
                    "dict[str, tuple[typing.Union[str,int,int]]]"
                ]
            }
        },
        "test_vectorize_without_cols": {
            "name": "test_vectorize_without_cols",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_vectorize_with_num_cols": {
            "name": "test_vectorize_with_num_cols",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "num_cols": [
                    "str",
                    "int"
                ]
            }
        },
        "test_vectorize_with_cat_cols": {
            "name": "test_vectorize_with_cat_cols",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "cat_cols": [
                    "str"
                ]
            }
        },
        "test_vectorize_with_bias": {
            "name": "test_vectorize_with_bias",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "cat_cols": [
                    "bool",
                    "str",
                    "dict[str, tuple[typing.Union[str,int,int]]]",
                    "typing.TextIO"
                ],
                "num_cols": [
                    "bool",
                    "str",
                    "dict[str, tuple[typing.Union[str,int,int]]]",
                    "typing.TextIO"
                ]
            }
        },
        "test_vectorize_with_hashing": {
            "name": "test_vectorize_with_hashing",
            "location": 115,
            "return": [
                "None"
            ],
            "arguments": {
                "cat_cols": [
                    "str",
                    "int",
                    "tuple[typing.Union[float,float,float,float]]",
                    "typing.Callable[, ]",
                    "None"
                ],
                "num_cols": [
                    "str",
                    "int",
                    "tuple[typing.Union[float,float,float,float]]",
                    "typing.Callable[, ]",
                    "None"
                ]
            }
        },
        "test_vectorize_with_hashing_cardinality": {
            "name": "test_vectorize_with_hashing_cardinality",
            "location": 144,
            "return": [
                "None"
            ],
            "arguments": {
                "cat_cols": [
                    "int",
                    "str",
                    "None"
                ],
                "num_cols": [
                    "int",
                    "str",
                    "None"
                ]
            }
        },
        "test_vectorize_with_bias_hashing": {
            "name": "test_vectorize_with_bias_hashing",
            "location": 174,
            "return": [
                "None"
            ],
            "arguments": {
                "cat_cols": [
                    "str",
                    "None",
                    "int",
                    "tuple[int]",
                    "list[int]"
                ],
                "num_cols": [
                    "str",
                    "None",
                    "int",
                    "tuple[int]",
                    "list[int]"
                ]
            }
        },
        "test_vectorize_with_emit_null": {
            "name": "test_vectorize_with_emit_null",
            "location": 205,
            "return": [
                "None"
            ],
            "arguments": {
                "cat_cols": [
                    "str",
                    "dict[str, tuple[typing.Union[str,int,int]]]",
                    "bool",
                    "None"
                ],
                "num_cols": [
                    "str",
                    "dict[str, tuple[typing.Union[str,int,int]]]",
                    "bool",
                    "None"
                ]
            }
        },
        "test_vectorize_with_force_value": {
            "name": "test_vectorize_with_force_value",
            "location": 234,
            "return": [
                "None"
            ],
            "arguments": {
                "cat_cols": [
                    "int",
                    "None",
                    "float",
                    "list[]"
                ],
                "num_cols": [
                    "int",
                    "None",
                    "float",
                    "list[]"
                ]
            }
        },
        "test_vectorize_with_emit_null_force_value": {
            "name": "test_vectorize_with_emit_null_force_value",
            "location": 262,
            "return": [
                "None"
            ],
            "arguments": {
                "cat_cols": [
                    "str",
                    "None",
                    "tuple[int]",
                    "int"
                ],
                "num_cols": [
                    "str",
                    "None",
                    "tuple[int]",
                    "int"
                ]
            }
        },
        "test_vectorize_dense": {
            "name": "test_vectorize_dense",
            "location": 291,
            "return": [
                "None"
            ],
            "arguments": {
                "cat_cols": [
                    "bool",
                    "str",
                    "dict[str, tuple[typing.Union[str,int,int]]]",
                    "typing.TextIO"
                ],
                "num_cols": [
                    "bool",
                    "str",
                    "dict[str, tuple[typing.Union[str,int,int]]]",
                    "typing.TextIO"
                ]
            }
        },
        "test_vectorize_dense_with_hashing": {
            "name": "test_vectorize_dense_with_hashing",
            "location": 306,
            "return": [
                "None"
            ],
            "arguments": {
                "cat_cols": [
                    "str",
                    "None",
                    "int",
                    "tuple[int]",
                    "list[int]"
                ],
                "num_cols": [
                    "str",
                    "None",
                    "int",
                    "tuple[int]",
                    "list[int]"
                ]
            }
        },
        "test_vectorize_dense_with_hashing_cardinality": {
            "name": "test_vectorize_dense_with_hashing_cardinality",
            "location": 321,
            "return": [
                "None"
            ],
            "arguments": {
                "cat_cols": [
                    "str",
                    "None",
                    "int",
                    "tuple[int]"
                ],
                "num_cols": [
                    "str",
                    "None",
                    "int",
                    "tuple[int]"
                ]
            }
        }
    }
}
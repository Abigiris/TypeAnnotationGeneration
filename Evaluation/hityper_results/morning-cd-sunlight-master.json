{
    "morning-cd-sunlight-master/faasport.py": {
        "port": {
            "name": "port",
            "location": 11,
            "return": [],
            "arguments": {
                "request": [
                    "str"
                ]
            }
        },
        "_pluck_response": {
            "name": "_pluck_response",
            "location": 17,
            "return": [
                "Response"
            ],
            "arguments": {
                "aws_response": []
            }
        },
        "_build_aws_event": {
            "name": "_build_aws_event",
            "location": 30,
            "return": [
                "dict[typing.Text, dict[, ]]"
            ],
            "arguments": {
                "request": [
                    "str"
                ]
            }
        }
    },
    "morning-cd-sunlight-master/features/steps/sunlight_steps.py": {
        "step_impl": {
            "name": "step_impl",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "context": [
                    "bytes",
                    "str",
                    "dict[str, typing.Any]"
                ]
            }
        }
    },
    "morning-cd-sunlight-master/sunlight/context.py": {},
    "morning-cd-sunlight-master/sunlight/use_sunlight_windows.py": {
        "get_sunlight_window": {
            "name": "get_sunlight_window",
            "location": 7,
            "return": [],
            "arguments": {
                "context": [
                    "int"
                ],
                "iana_timezone": [
                    "str",
                    "None",
                    "int",
                    "dict[str, typing.Any]"
                ],
                "on_date": [
                    "str",
                    "set[str]"
                ]
            }
        }
    },
    "morning-cd-sunlight-master/sunlight/__init__.py": {},
    "morning-cd-sunlight-master/sunlight/definitions/coordinates.py": {},
    "morning-cd-sunlight-master/sunlight/definitions/exceptions.py": {},
    "morning-cd-sunlight-master/sunlight/definitions/sunlight_window.py": {},
    "morning-cd-sunlight-master/sunlight/definitions/__init__.py": {},
    "morning-cd-sunlight-master/sunlight/delivery/__init__.py": {},
    "morning-cd-sunlight-master/sunlight/delivery/aws_lambda/get_sunlight_window.py": {
        "handler": {
            "name": "handler",
            "location": 28,
            "return": [
                "dict[typing.Text, int]"
            ],
            "arguments": {
                "event": [
                    "str"
                ],
                "context": [
                    "str"
                ]
            }
        }
    },
    "morning-cd-sunlight-master/sunlight/delivery/aws_lambda/util.py": {
        "create_default_context": {
            "name": "create_default_context",
            "location": 6,
            "return": [
                "Context"
            ],
            "arguments": {}
        }
    },
    "morning-cd-sunlight-master/sunlight/delivery/aws_lambda/__init__.py": {},
    "morning-cd-sunlight-master/sunlight/gateways/__init__.py": {},
    "morning-cd-sunlight-master/sunlight/gateways/geo_timezone/abc.py": {
        "GeoTimezoneGatewayABC.fetch_timezone_coordinates": {
            "name": "fetch_timezone_coordinates",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "iana_name": [
                    "str",
                    "bool",
                    "list[str]",
                    "tuple[typing.Union[str,str]]"
                ]
            }
        }
    },
    "morning-cd-sunlight-master/sunlight/gateways/geo_timezone/geo_timezone.py": {
        "GeoTimezoneGateway.fetch_timezone_coordinates": {
            "name": "fetch_timezone_coordinates",
            "location": 9,
            "return": [
                "Coordinates"
            ],
            "arguments": {
                "self": [],
                "iana_name": [
                    "str"
                ]
            }
        }
    },
    "morning-cd-sunlight-master/sunlight/gateways/geo_timezone/geo_timezone_test.py": {
        "test_can_ignore_extra_iana_prefix": {
            "name": "test_can_ignore_extra_iana_prefix",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_can_fetch_montreal": {
            "name": "test_can_fetch_montreal",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_can_fetch_kolkata_as_calcutta": {
            "name": "test_can_fetch_kolkata_as_calcutta",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "morning-cd-sunlight-master/sunlight/gateways/geo_timezone/__init__.py": {},
    "morning-cd-sunlight-master/sunlight/gateways/sunlight/abc.py": {
        "SunlightGatewayABC.fetch_sunlight_window": {
            "name": "fetch_sunlight_window",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "coordinates": [
                    "bool",
                    "str"
                ],
                "on_date": [
                    "bool",
                    "str"
                ]
            }
        }
    },
    "morning-cd-sunlight-master/sunlight/gateways/sunlight/sunrise_sunset.py": {
        "SunriseSunsetApiGateway.fetch_sunlight_window": {
            "name": "fetch_sunlight_window",
            "location": 13,
            "return": [],
            "arguments": {
                "self": [],
                "coordinates": [
                    "dict[, ]",
                    "dict[str, typing.Any]",
                    "bool"
                ],
                "on_day": [
                    "dict[, ]",
                    "dict[str, typing.Any]",
                    "bool"
                ]
            }
        },
        "SunriseSunsetApiGateway._pluck_sunlight_info": {
            "name": "_pluck_sunlight_info",
            "location": 26,
            "return": [
                "SunlightWindow"
            ],
            "arguments": {
                "raw_sunlight_response": []
            }
        },
        "SunriseSunsetApiGateway._pluck_datetime": {
            "name": "_pluck_datetime",
            "location": 36,
            "return": [],
            "arguments": {
                "dt_str": [
                    "str"
                ]
            }
        }
    },
    "morning-cd-sunlight-master/sunlight/gateways/sunlight/__init__.py": {}
}
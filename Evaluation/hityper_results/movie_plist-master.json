{
    "movie_plist-master/movie_plist.py": {
        "main": {
            "name": "main",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "movie_plist-master/setup.py": {
        "read": {
            "name": "read",
            "location": 19,
            "return": [],
            "arguments": {
                "fname": [
                    "str",
                    "int",
                    "float"
                ]
            }
        },
        "find_package_data": {
            "name": "find_package_data",
            "location": 36,
            "return": [
                "dict[, ]"
            ],
            "arguments": {
                "where": [
                    "typing.Text"
                ],
                "package": [
                    "typing.Text"
                ],
                "exclude": [
                    "list[typing.Text]"
                ],
                "exclude_directories": [
                    "list[typing.Text]"
                ],
                "only_in_packages": [
                    "bool"
                ],
                "show_ignored": [
                    "bool"
                ]
            }
        }
    },
    "movie_plist-master/movie_plist/__init__.py": {},
    "movie_plist-master/movie_plist/conf/global_conf.py": {
        "check_movie_plist_dirs": {
            "name": "check_movie_plist_dirs",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "load_from_json": {
            "name": "load_from_json",
            "location": 24,
            "return": [
                "dict[, ]"
            ],
            "arguments": {
                "json_file": [
                    "str"
                ]
            }
        },
        "dump_json_movie": {
            "name": "dump_json_movie",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "movie_dic": [
                    "bool",
                    "typing.Callable[, ]"
                ],
                "json_file": [
                    "str"
                ]
            }
        },
        "read_path": {
            "name": "read_path",
            "location": 45,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "write_path": {
            "name": "write_path",
            "location": 54,
            "return": [
                "str"
            ],
            "arguments": {
                "cfg_file_path": [
                    "str"
                ]
            }
        }
    },
    "movie_plist-master/movie_plist/conf/__init__.py": {},
    "movie_plist-master/movie_plist/data/check_dir.py": {
        "get_desktopf_path": {
            "name": "get_desktopf_path",
            "location": 13,
            "return": [],
            "arguments": {}
        },
        "has_stat": {
            "name": "has_stat",
            "location": 29,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "scan_dir": [
                    "str"
                ]
            }
        },
        "new_desktop_files": {
            "name": "new_desktop_files",
            "location": 45,
            "return": [
                "int",
                "list[]",
                "list[str]",
                "typing.DefaultDict",
                "dict[str, int]"
            ],
            "arguments": {
                "scan_dir": [
                    "str",
                    "typing.IO"
                ],
                "last_scan_dir_state": []
            }
        },
        "glob_desktop_file": {
            "name": "glob_desktop_file",
            "location": 59,
            "return": [
                "str"
            ],
            "arguments": {
                "scan_dir": [
                    "str",
                    "bool"
                ]
            }
        },
        "abort_movie_plist": {
            "name": "abort_movie_plist",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "scan_dir": [
                    "str"
                ]
            }
        }
    },
    "movie_plist-master/movie_plist/data/create_dict.py": {
        "create_dicts": {
            "name": "create_dicts",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "_new_data": {
            "name": "_new_data",
            "location": 31,
            "return": [
                "typing.Generator[tuple[]]",
                "None"
            ],
            "arguments": {}
        },
        "_unknow_dirs": {
            "name": "_unknow_dirs",
            "location": 44,
            "return": [
                "typing.Generator[tuple[typing.Union[str,dict[, ],typing.Pattern,dict[str, dict[str, typing.Any]],int,str,str]]]",
                "None"
            ],
            "arguments": {}
        },
        "_open_right_file": {
            "name": "_open_right_file",
            "location": 62,
            "return": [],
            "arguments": {
                "file_with_url": [
                    "str",
                    "bytes"
                ]
            }
        },
        "mk_title_year": {
            "name": "mk_title_year",
            "location": 75,
            "return": [
                "str"
            ],
            "arguments": {
                "root_path": [
                    "str"
                ]
            }
        }
    },
    "movie_plist-master/movie_plist/data/data_manager.py": {
        "ImdbDataManager.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str",
                    "bool",
                    "bytes"
                ],
                "title": [
                    "str",
                    "bool",
                    "bytes"
                ]
            }
        },
        "ImdbDataManager.run": {
            "name": "run",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ImdbDataManager.make_poster_name": {
            "name": "make_poster_name",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ImdbDataManager.synopsis_exists": {
            "name": "synopsis_exists",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "movie_plist-master/movie_plist/data/fetch_data.py": {
        "add_synopsis": {
            "name": "add_synopsis",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {
                "title": [
                    "int",
                    "dict[, ]",
                    "dict[str, typing.Any]"
                ],
                "synopsis": [
                    "str",
                    "int",
                    "Exception",
                    "None"
                ]
            }
        },
        "FetchImdbData.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str",
                    "bool",
                    "bytes"
                ],
                "title": [
                    "str",
                    "bool",
                    "bytes"
                ],
                "cache_poster": [
                    "str",
                    "bool",
                    "bytes"
                ]
            }
        },
        "FetchImdbData.fetch": {
            "name": "fetch",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cache_poster": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ]
            }
        },
        "FetchImdbData._save_poster_png_file": {
            "name": "_save_poster_png_file",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FetchImdbData._poster_file": {
            "name": "_poster_file",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FetchImdbData._poster_url": {
            "name": "_poster_url",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FetchImdbData._get_html": {
            "name": "_get_html",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "movie_plist-master/movie_plist/data/__init__.py": {},
    "movie_plist-master/movie_plist/html_file/htmltags.py": {
        "HtmlTags.__init__": {
            "name": "__init__",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str",
                    "bool",
                    "bytes"
                ],
                "title": [
                    "str",
                    "bool",
                    "bytes"
                ]
            }
        },
        "HtmlTags._retrieve_data": {
            "name": "_retrieve_data",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HtmlTags._build_html": {
            "name": "_build_html",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HtmlTags._get_synopsis": {
            "name": "_get_synopsis",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HtmlTags._wrap_synopsis": {
            "name": "_wrap_synopsis",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HtmlTags._top_header": {
            "name": "_top_header",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HtmlTags._inside_table": {
            "name": "_inside_table",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HtmlTags._bottom_tags": {
            "name": "_bottom_tags",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "movie_plist-master/movie_plist/html_file/__init__.py": {},
    "movie_plist-master/movie_plist/pyqt_gui/main_window.py": {
        "Window.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Window.init_ui": {
            "name": "init_ui",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Window.unseenmovies": {
            "name": "unseenmovies",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Window.seenmovies": {
            "name": "seenmovies",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Window.update_statusbar": {
            "name": "update_statusbar",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Window.unseen_status": {
            "name": "unseen_status",
            "location": 72,
            "return": [
                "typing.Text"
            ],
            "arguments": {}
        },
        "Window.seen_status": {
            "name": "seen_status",
            "location": 77,
            "return": [
                "typing.Text"
            ],
            "arguments": {}
        }
    },
    "movie_plist-master/movie_plist/pyqt_gui/right_click_menu.py": {
        "RightClickMenu.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "current_dict": [
                    "dict[str, typing.Any]",
                    "dict[str, int]",
                    "dict[str, dict[str, str]]",
                    "dict[, ]"
                ],
                "qt_list": [
                    "str",
                    "list[str]",
                    "None"
                ]
            }
        },
        "RightClickMenu.right_click": {
            "name": "right_click",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RightClickMenu.m_seen_movies": {
            "name": "m_seen_movies",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RightClickMenu.m_rm_from_dict": {
            "name": "m_rm_from_dict",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "movie_plist-master/movie_plist/pyqt_gui/splitter.py": {
        "TwoLines.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TwoLines.init_ui": {
            "name": "init_ui",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TwoLines.set_tabs": {
            "name": "set_tabs",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TwoLines.data_to_show": {
            "name": "data_to_show",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TwoLines.ls_current_dir": {
            "name": "ls_current_dir",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TwoLines.right_click": {
            "name": "right_click",
            "location": 115,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TwoLines.clicked_movie": {
            "name": "clicked_movie",
            "location": 118,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TwoLines.on_changed": {
            "name": "on_changed",
            "location": 124,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str"
                ]
            }
        },
        "TwoLines.init_ui.changed_item": {
            "name": "changed_item",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "movie_plist-master/movie_plist/pyqt_gui/__init__.py": {},
    "movie_plist-master/movie_plist/tests/test_check_dir.py": {
        "test_cfg_file": {
            "name": "test_cfg_file",
            "location": 14,
            "return": [
                "typing.Generator[tuple[str]]"
            ],
            "arguments": {}
        },
        "test_whole_success_process": {
            "name": "test_whole_success_process",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "test_cfg_file": []
            }
        },
        "test_fail_write_path": {
            "name": "test_fail_write_path",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_fail_scan": {
            "name": "test_fail_scan",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "message": [],
                "app": [],
                "exit": []
            }
        },
        "test_stat_nothingnew": {
            "name": "test_stat_nothingnew",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "test_cfg_file": [],
                "mocker": [
                    "str",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "test_stat_differ": {
            "name": "test_stat_differ",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {
                "test_cfg_file": [],
                "mocker": [
                    "str",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "test_no_stat_file": {
            "name": "test_no_stat_file",
            "location": 99,
            "return": [
                "None"
            ],
            "arguments": {
                "test_cfg_file": [],
                "mocker": [
                    "bool",
                    "str"
                ]
            }
        },
        "test_json": {
            "name": "test_json",
            "location": 108,
            "return": [
                "None"
            ],
            "arguments": {
                "test_cfg_file": [
                    "list[str]",
                    "dict[, ]",
                    "bool"
                ]
            }
        }
    },
    "movie_plist-master/movie_plist/tests/test_fetch_data.py": {
        "test_init_mocked_attrs": {
            "name": "test_init_mocked_attrs",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "e": [
                    "list[]",
                    "str",
                    "bool"
                ]
            }
        },
        "run_fetch": {
            "name": "run_fetch",
            "location": 32,
            "return": [
                "FetchImdbData"
            ],
            "arguments": {
                "mocker": [
                    "str",
                    "bool"
                ]
            }
        },
        "test_init_poster_url": {
            "name": "test_init_poster_url",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "run_fetch": [
                    "dict[, ]",
                    "typing.Mapping"
                ]
            }
        },
        "test_synopsys": {
            "name": "test_synopsys",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "run_fetch": [
                    "str"
                ]
            }
        },
        "test_add_synopsis_attr": {
            "name": "test_add_synopsis_attr",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "add": [
                    "str",
                    "int",
                    "dict[str, typing.Any]",
                    "tuple[typing.Union[list[str],str,None]]"
                ],
                "mocker": [
                    "typing.Callable[, ]",
                    "str",
                    "None"
                ]
            }
        },
        "test_description_content": {
            "name": "test_description_content",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "bs4": [
                    "list[str]",
                    "bool",
                    "typing.Mapping"
                ],
                "html": [
                    "list[str]",
                    "bool",
                    "typing.Mapping"
                ],
                "img": [
                    "list[str]",
                    "bool",
                    "typing.Mapping"
                ]
            }
        },
        "test_url": {
            "name": "test_url",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {
                "bs4": [
                    "list[str]",
                    "tuple[typing.Union[int,int]]",
                    "int"
                ],
                "html": [
                    "list[str]",
                    "tuple[typing.Union[int,int]]",
                    "int"
                ],
                "img": [
                    "list[str]",
                    "tuple[typing.Union[int,int]]",
                    "int"
                ]
            }
        },
        "test_do_poster_steps": {
            "name": "test_do_poster_steps",
            "location": 105,
            "return": [
                "None"
            ],
            "arguments": {
                "save_img": [
                    "str",
                    "dict[, ]"
                ],
                "run_fetch": [],
                "mocker": [
                    "dict[str, typing.Any]",
                    "int"
                ]
            }
        }
    },
    "movie_plist-master/movie_plist/tests/test_global_conf.py": {
        "test_attrs": {
            "name": "test_attrs",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "a": [
                    "int",
                    "dict[, ]"
                ]
            }
        },
        "mock_attrs": {
            "name": "mock_attrs",
            "location": 28,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {}
        },
        "test_movie_plist_conf_files": {
            "name": "test_movie_plist_conf_files",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "mock_attrs": []
            }
        },
        "test_movies_attrs": {
            "name": "test_movies_attrs",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_cache_dir": {
            "name": "test_cache_dir",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "mock_attrs": [
                    "typing.Generator[typing.Union[None,typing.Any,None]]"
                ]
            }
        },
        "test_config_dir": {
            "name": "test_config_dir",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "mock_attrs": [
                    "list[T]",
                    "typing.Callable[, ]"
                ]
            }
        },
        "test_invalid_path": {
            "name": "test_invalid_path",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "mock_attrs": [],
                "mocker": []
            }
        },
        "test_write_path": {
            "name": "test_write_path",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "mock_attrs": []
            }
        }
    },
    "movie_plist-master/movie_plist/tests/test_htmltags.py": {
        "test_htmltags_class": {
            "name": "test_htmltags_class",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "str"
                ]
            }
        },
        "build_obj": {
            "name": "build_obj",
            "location": 25,
            "return": [
                "HtmlTags"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_htlmtags_attrs": {
            "name": "test_htlmtags_attrs",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "build_obj": [
                    "list[str]",
                    "dict[str, typing.Any]",
                    "bool"
                ]
            }
        },
        "test_context_has_img_html_tag": {
            "name": "test_context_has_img_html_tag",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "build_obj": [
                    "dict[, ]",
                    "typing.Callable[, ]"
                ]
            }
        },
        "test_context_has_url": {
            "name": "test_context_has_url",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "build_obj": [
                    "typing.Iterable[typing.Any]"
                ]
            }
        },
        "test_context_has_synopsys": {
            "name": "test_context_has_synopsys",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "build_obj": [
                    "dict[, ]",
                    "dict[str, typing.Any]"
                ]
            }
        }
    },
    "movie_plist-master/movie_plist/tests/test_pimdbdata.py": {
        "test_init_mocked_attrs": {
            "name": "test_init_mocked_attrs",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "e": [
                    "list[]",
                    "str",
                    "bool"
                ]
            }
        },
        "init_mocked": {
            "name": "init_mocked",
            "location": 28,
            "return": [
                "ImdbDataManager"
            ],
            "arguments": {
                "mocker": [
                    "dict[str, typing.Any]",
                    "bool",
                    "dict[int, dict[, ]]"
                ]
            }
        },
        "test_synopsis": {
            "name": "test_synopsis",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "init_mocked": []
            }
        },
        "test_poster_url": {
            "name": "test_poster_url",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "init_mocked": []
            }
        },
        "test_synopsis_exists": {
            "name": "test_synopsis_exists",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_choice_unseen": {
            "name": "test_choice_unseen",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "str"
                ]
            }
        },
        "test_choice_seen": {
            "name": "test_choice_seen",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "str"
                ]
            }
        },
        "run_init": {
            "name": "run_init",
            "location": 107,
            "return": [
                "ImdbDataManager"
            ],
            "arguments": {}
        },
        "test_init_synopsys": {
            "name": "test_init_synopsys",
            "location": 119,
            "return": [
                "None"
            ],
            "arguments": {
                "run_init": [
                    "str"
                ]
            }
        },
        "test_poster_name": {
            "name": "test_poster_name",
            "location": 128,
            "return": [
                "None"
            ],
            "arguments": {
                "run_init": [
                    "typing.Type",
                    "str",
                    "int",
                    "dict[str, typing.Any]",
                    "list[str]"
                ]
            }
        },
        "test_choice_no_made": {
            "name": "test_choice_no_made",
            "location": 133,
            "return": [
                "None"
            ],
            "arguments": {
                "run_init": []
            }
        }
    },
    "movie_plist-master/movie_plist/tests/test_pyscan.py": {
        "test_attrs": {
            "name": "test_attrs",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "e": [
                    "bool",
                    "str"
                ]
            }
        },
        "test_all": {
            "name": "test_all",
            "location": 32,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_all_key": {
            "name": "test_all_key",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "test_all": [
                    "str",
                    "list[str]"
                ]
            }
        },
        "test_all_url": {
            "name": "test_all_url",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "test_all": [
                    "bool",
                    "str"
                ]
            }
        },
        "test_all_path_to": {
            "name": "test_all_path_to",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "test_all": [
                    "str",
                    "bool"
                ]
            }
        },
        "test_all_movie_seen_len": {
            "name": "test_all_movie_seen_len",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "test_all": [
                    "str",
                    "bool"
                ]
            }
        }
    },
    "movie_plist-master/movie_plist/tests/test_right_click_menu.py": {
        "create_obj": {
            "name": "create_obj",
            "location": 13,
            "return": [
                "RightClickMenu"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_mark_as_seen": {
            "name": "test_mark_as_seen",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "create_obj": []
            }
        },
        "test_rm_from_dict": {
            "name": "test_rm_from_dict",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "rm": [
                    "str",
                    "bool",
                    "float"
                ],
                "create_obj": [],
                "mocker": [
                    "str",
                    "bool",
                    "bytes"
                ]
            }
        },
        "test_rm_from_cache": {
            "name": "test_rm_from_cache",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "rm": [
                    "str"
                ],
                "create_obj": [],
                "mocker": [
                    "str",
                    "typing.Callable[T, list[T]]",
                    "bool",
                    "list[str]"
                ]
            }
        },
        "test_menu": {
            "name": "test_menu",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "qaction": [],
                "qmenu": []
            }
        }
    },
    "movie_plist-master/movie_plist/tests/__init__.py": {}
}
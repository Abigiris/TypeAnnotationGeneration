{
    "mtgjson-master/setup.py": {},
    "mtgjson-master/mtgjson5/arg_parser.py": {
        "parse_args": {
            "name": "parse_args",
            "location": 12,
            "return": [],
            "arguments": {}
        }
    },
    "mtgjson-master/mtgjson5/compress_generator.py": {
        "compress_mtgjson_contents": {
            "name": "compress_mtgjson_contents",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "directory": []
            }
        },
        "_compress_mtgjson_directory": {
            "name": "_compress_mtgjson_directory",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "files": [
                    "str",
                    "list[str]"
                ],
                "directory": [],
                "output_file": [
                    "str",
                    "bool"
                ]
            }
        },
        "_compress_mtgjson_file": {
            "name": "_compress_mtgjson_file",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {
                "file": [
                    "str",
                    "None"
                ]
            }
        },
        "_compressor": {
            "name": "_compressor",
            "location": 114,
            "return": [
                "None"
            ],
            "arguments": {
                "compression_commands": [
                    "list[list[str]]",
                    "str"
                ]
            }
        }
    },
    "mtgjson-master/mtgjson5/constants.py": {},
    "mtgjson-master/mtgjson5/mtgjson_config.py": {
        "MtgjsonConfig.__init__": {
            "name": "__init__",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "aws_ssm_config_name": [
                    "None",
                    "str"
                ]
            }
        },
        "MtgjsonConfig.__load_config_from_aws_ssm": {
            "name": "__load_config_from_aws_ssm",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config_name": [
                    "str",
                    "None",
                    "list[str]"
                ]
            }
        },
        "MtgjsonConfig.__load_config_from_local_file": {
            "name": "__load_config_from_local_file",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "file_path": [
                    "str"
                ]
            }
        },
        "MtgjsonConfig.get": {
            "name": "get",
            "location": 82,
            "return": [],
            "arguments": {
                "self": [],
                "section": [
                    "str",
                    "dict[str, typing.Any]",
                    "None",
                    "dict[, ]"
                ],
                "option": [
                    "str",
                    "dict[str, typing.Any]",
                    "None",
                    "dict[, ]"
                ],
                "fallback": [
                    "typing.Text"
                ]
            }
        },
        "MtgjsonConfig.get_boolean": {
            "name": "get_boolean",
            "location": 92,
            "return": [],
            "arguments": {
                "self": [],
                "section": [
                    "str",
                    "bool",
                    "None"
                ],
                "option": [
                    "str",
                    "bool",
                    "None"
                ],
                "fallback": [
                    "bool"
                ]
            }
        },
        "MtgjsonConfig.has_section": {
            "name": "has_section",
            "location": 102,
            "return": [],
            "arguments": {
                "self": [],
                "section": [
                    "str",
                    "int",
                    "None"
                ]
            }
        },
        "MtgjsonConfig.has_option": {
            "name": "has_option",
            "location": 110,
            "return": [],
            "arguments": {
                "self": [],
                "section": [
                    "str",
                    "tuple[str]"
                ],
                "option": [
                    "str",
                    "tuple[str]"
                ]
            }
        }
    },
    "mtgjson-master/mtgjson5/mtgjson_s3_handler.py": {
        "MtgjsonS3Handler.__init__": {
            "name": "__init__",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MtgjsonS3Handler.download_file": {
            "name": "download_file",
            "location": 25,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "bucket_name": [
                    "str",
                    "None",
                    "bool"
                ],
                "bucket_object_path": [
                    "str",
                    "None",
                    "bool"
                ],
                "local_save_file_path": [
                    "str",
                    "None",
                    "bool"
                ]
            }
        },
        "MtgjsonS3Handler.upload_file": {
            "name": "upload_file",
            "location": 46,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "local_file_path": [
                    "str",
                    "None"
                ],
                "bucket_name": [
                    "str",
                    "None"
                ],
                "bucket_object_path": [
                    "str",
                    "None"
                ],
                "tags": [
                    "None",
                    "str"
                ],
                "cache_ttl_sec": [
                    "int"
                ]
            }
        },
        "MtgjsonS3Handler.upload_directory": {
            "name": "upload_directory",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "directory_path": [],
                "bucket_name": [
                    "str",
                    "None",
                    "list[str]",
                    "dict[str, str]"
                ],
                "tags": [
                    "None",
                    "bool"
                ]
            }
        }
    },
    "mtgjson-master/mtgjson5/output_generator.py": {
        "generate_compiled_prices_output": {
            "name": "generate_compiled_prices_output",
            "location": 32,
            "return": [],
            "arguments": {
                "price_data": [],
                "pretty_print": []
            }
        },
        "build_format_specific_files": {
            "name": "build_format_specific_files",
            "location": 46,
            "return": [],
            "arguments": {
                "all_printings": [],
                "pretty_print": []
            }
        },
        "build_atomic_specific_files": {
            "name": "build_atomic_specific_files",
            "location": 93,
            "return": [],
            "arguments": {
                "pretty_print": []
            }
        },
        "build_all_printings_files": {
            "name": "build_all_printings_files",
            "location": 144,
            "return": [],
            "arguments": {
                "pretty_print": []
            }
        },
        "generate_compiled_output_files": {
            "name": "generate_compiled_output_files",
            "location": 170,
            "return": [],
            "arguments": {
                "pretty_print": []
            }
        },
        "create_compiled_output": {
            "name": "create_compiled_output",
            "location": 261,
            "return": [],
            "arguments": {
                "compiled_name": [],
                "compiled_object": [],
                "pretty_print": [],
                "sort_keys": []
            }
        },
        "construct_format_map": {
            "name": "construct_format_map",
            "location": 276,
            "return": [],
            "arguments": {
                "all_printings_path": [],
                "normal_sets_only": []
            }
        },
        "construct_atomic_cards_format_map": {
            "name": "construct_atomic_cards_format_map",
            "location": 319,
            "return": [],
            "arguments": {
                "all_printings_path": []
            }
        },
        "generate_output_file_hashes": {
            "name": "generate_output_file_hashes",
            "location": 364,
            "return": [],
            "arguments": {
                "directory": []
            }
        },
        "write_to_file": {
            "name": "write_to_file",
            "location": 389,
            "return": [],
            "arguments": {
                "file_name": [],
                "file_contents": [],
                "pretty_print": [],
                "sort_keys": []
            }
        }
    },
    "mtgjson-master/mtgjson5/price_builder.py": {
        "prune_prices_archive": {
            "name": "prune_prices_archive",
            "location": 30,
            "return": [],
            "arguments": {
                "content": [],
                "months": []
            }
        },
        "build_today_prices": {
            "name": "build_today_prices",
            "location": 63,
            "return": [],
            "arguments": {}
        },
        "_generate_prices": {
            "name": "_generate_prices",
            "location": 88,
            "return": [],
            "arguments": {
                "provider": []
            }
        },
        "get_price_archive_data": {
            "name": "get_price_archive_data",
            "location": 111,
            "return": [],
            "arguments": {
                "bucket_name": [],
                "bucket_object_path": []
            }
        },
        "write_price_archive_data": {
            "name": "write_price_archive_data",
            "location": 138,
            "return": [],
            "arguments": {
                "local_save_path": [],
                "price_data": []
            }
        },
        "download_old_all_printings": {
            "name": "download_old_all_printings",
            "location": 163,
            "return": [],
            "arguments": {}
        },
        "build_prices": {
            "name": "build_prices",
            "location": 183,
            "return": [],
            "arguments": {}
        },
        "prune_prices_archive.prune_recursive": {
            "name": "prune_recursive",
            "location": 41,
            "return": [],
            "arguments": {
                "obj": [],
                "depth": []
            }
        }
    },
    "mtgjson-master/mtgjson5/referral_builder.py": {
        "build_and_write_referral_map": {
            "name": "build_and_write_referral_map",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "mtgjson_set": [
                    "list[str]",
                    "dict[str, typing.Any]",
                    "str",
                    "bytes"
                ]
            }
        },
        "build_referral_map": {
            "name": "build_referral_map",
            "location": 24,
            "return": [
                "list[]"
            ],
            "arguments": {
                "mtgjson_set": [
                    "typing.Iterable[T]",
                    "typing.Iterable[typing.Iterable[str]]",
                    "typing.MutableMapping"
                ]
            }
        },
        "build_referral_map_helper": {
            "name": "build_referral_map_helper",
            "location": 41,
            "return": [
                "list[tuple[]]"
            ],
            "arguments": {
                "mtgjson_object": [
                    "str",
                    "None"
                ],
                "string_regex": [
                    "list[str]",
                    "str",
                    "list[]",
                    "typing.Callable[, ]",
                    "list[dict[str, typing.Any]]"
                ]
            }
        },
        "write_referral_map": {
            "name": "write_referral_map",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "single_set_referral_map": [
                    "list[tuple[typing.Union[str,str]]]",
                    "bytes"
                ]
            }
        },
        "fixup_referral_map": {
            "name": "fixup_referral_map",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "mtgjson-master/mtgjson5/set_builder.py": {
        "parse_foreign": {
            "name": "parse_foreign",
            "location": 40,
            "return": [
                "list[]",
                "list[MtgjsonForeignDataObject]"
            ],
            "arguments": {
                "sf_prints_url": [],
                "card_name": [],
                "card_number": [],
                "set_name": []
            }
        },
        "parse_card_types": {
            "name": "parse_card_types",
            "location": 117,
            "return": [
                "tuple[list[]]"
            ],
            "arguments": {
                "card_type": []
            }
        },
        "get_card_colors": {
            "name": "get_card_colors",
            "location": 151,
            "return": [
                "list[typing.Text]"
            ],
            "arguments": {
                "mana_cost": []
            }
        },
        "get_scryfall_set_data": {
            "name": "get_scryfall_set_data",
            "location": 167,
            "return": [
                "None"
            ],
            "arguments": {
                "set_code": []
            }
        },
        "is_number": {
            "name": "is_number",
            "location": 184,
            "return": [
                "bool"
            ],
            "arguments": {
                "string": []
            }
        },
        "get_card_cmc": {
            "name": "get_card_cmc",
            "location": 201,
            "return": [
                "float",
                "int"
            ],
            "arguments": {
                "mana_cost": []
            }
        },
        "parse_printings": {
            "name": "parse_printings",
            "location": 229,
            "return": [
                "list[]"
            ],
            "arguments": {
                "sf_prints_url": []
            }
        },
        "parse_legalities": {
            "name": "parse_legalities",
            "location": 255,
            "return": [
                "MtgjsonLegalitiesObject"
            ],
            "arguments": {
                "sf_card_legalities": []
            }
        },
        "parse_rulings": {
            "name": "parse_rulings",
            "location": 269,
            "return": [
                "list[]",
                "list[MtgjsonRulingObject]"
            ],
            "arguments": {
                "rulings_url": []
            }
        },
        "add_rebalanced_to_original_linkage": {
            "name": "add_rebalanced_to_original_linkage",
            "location": 289,
            "return": [
                "None"
            ],
            "arguments": {
                "mtgjson_set": []
            }
        },
        "relocate_miscellaneous_tokens": {
            "name": "relocate_miscellaneous_tokens",
            "location": 315,
            "return": [
                "None"
            ],
            "arguments": {
                "mtgjson_set": []
            }
        },
        "mark_duel_decks": {
            "name": "mark_duel_decks",
            "location": 345,
            "return": [
                "None"
            ],
            "arguments": {
                "set_code": [],
                "mtgjson_cards": []
            }
        },
        "parse_keyrune_code": {
            "name": "parse_keyrune_code",
            "location": 371,
            "return": [],
            "arguments": {
                "url": []
            }
        },
        "build_mtgjson_set": {
            "name": "build_mtgjson_set",
            "location": 387,
            "return": [
                "None",
                "MtgjsonSetObject"
            ],
            "arguments": {
                "set_code": []
            }
        },
        "build_base_mtgjson_tokens": {
            "name": "build_base_mtgjson_tokens",
            "location": 472,
            "return": [],
            "arguments": {
                "set_code": [],
                "added_tokens": []
            }
        },
        "add_sealed_uuid": {
            "name": "add_sealed_uuid",
            "location": 484,
            "return": [
                "None"
            ],
            "arguments": {
                "mtgjson_set": []
            }
        },
        "add_sealed_purchase_url": {
            "name": "add_sealed_purchase_url",
            "location": 493,
            "return": [
                "None"
            ],
            "arguments": {
                "mtgjson_set": []
            }
        },
        "build_base_mtgjson_cards": {
            "name": "build_base_mtgjson_cards",
            "location": 505,
            "return": [],
            "arguments": {
                "set_code": [],
                "additional_cards": [
                    "None"
                ],
                "is_token": [
                    "bool"
                ],
                "set_release_date": [
                    "typing.Text"
                ]
            }
        },
        "add_is_starter_option": {
            "name": "add_is_starter_option",
            "location": 537,
            "return": [
                "None"
            ],
            "arguments": {
                "set_code": [],
                "search_url": [],
                "mtgjson_cards": []
            }
        },
        "add_leadership_skills": {
            "name": "add_leadership_skills",
            "location": 568,
            "return": [
                "None"
            ],
            "arguments": {
                "mtgjson_card": []
            }
        },
        "add_uuid": {
            "name": "add_uuid",
            "location": 603,
            "return": [
                "None"
            ],
            "arguments": {
                "mtgjson_object": []
            }
        },
        "build_mtgjson_card": {
            "name": "build_mtgjson_card",
            "location": 668,
            "return": [],
            "arguments": {
                "scryfall_object": [],
                "face_id": [
                    "int"
                ],
                "is_token": [
                    "bool"
                ],
                "set_release_date": [
                    "typing.Text"
                ]
            }
        },
        "add_variations_and_alternative_fields": {
            "name": "add_variations_and_alternative_fields",
            "location": 1088,
            "return": [
                "None"
            ],
            "arguments": {
                "mtgjson_set": []
            }
        },
        "add_other_face_ids": {
            "name": "add_other_face_ids",
            "location": 1154,
            "return": [
                "None"
            ],
            "arguments": {
                "cards_to_act_on": []
            }
        },
        "add_card_kingdom_details": {
            "name": "add_card_kingdom_details",
            "location": 1190,
            "return": [
                "None"
            ],
            "arguments": {
                "mtgjson_set": []
            }
        },
        "add_token_signatures": {
            "name": "add_token_signatures",
            "location": 1242,
            "return": [
                "None"
            ],
            "arguments": {
                "mtgjson_set": []
            }
        },
        "add_multiverse_bridge_ids": {
            "name": "add_multiverse_bridge_ids",
            "location": 1276,
            "return": [
                "None"
            ],
            "arguments": {
                "mtgjson_set": []
            }
        },
        "add_mcm_details": {
            "name": "add_mcm_details",
            "location": 1300,
            "return": [
                "None"
            ],
            "arguments": {
                "mtgjson_set": []
            }
        },
        "get_base_and_total_set_sizes": {
            "name": "get_base_and_total_set_sizes",
            "location": 1365,
            "return": [
                "tuple[int]"
            ],
            "arguments": {
                "mtgjson_set": []
            }
        },
        "get_signature_from_number": {
            "name": "get_signature_from_number",
            "location": 1413,
            "return": [
                "None"
            ],
            "arguments": {
                "mtgjson_card": []
            }
        },
        "add_meld_face_parts": {
            "name": "add_meld_face_parts",
            "location": 1434,
            "return": [
                "None"
            ],
            "arguments": {
                "mtgjson_set": []
            }
        },
        "add_token_signatures.add_signature": {
            "name": "add_signature",
            "location": 1249,
            "return": [
                "None"
            ],
            "arguments": {
                "card": [],
                "sig": []
            }
        }
    },
    "mtgjson-master/mtgjson5/singleton.py": {
        "Singleton.__call__": {
            "name": "__call__",
            "location": 14,
            "return": [],
            "arguments": {
                "cls": [
                    "typing.Type",
                    "set[str]",
                    "str"
                ]
            }
        }
    },
    "mtgjson-master/mtgjson5/utils.py": {
        "init_logger": {
            "name": "init_logger",
            "location": 27,
            "return": [],
            "arguments": {}
        },
        "url_keygen": {
            "name": "url_keygen",
            "location": 50,
            "return": [],
            "arguments": {
                "unique_seed": [],
                "with_leading": []
            }
        },
        "to_camel_case": {
            "name": "to_camel_case",
            "location": 61,
            "return": [],
            "arguments": {
                "snake_str": []
            }
        },
        "parse_magic_rules_subset": {
            "name": "parse_magic_rules_subset",
            "location": 71,
            "return": [],
            "arguments": {
                "magic_rules": [],
                "start_header": [],
                "end_header": []
            }
        },
        "retryable_session": {
            "name": "retryable_session",
            "location": 91,
            "return": [],
            "arguments": {
                "retries": []
            }
        },
        "parallel_call": {
            "name": "parallel_call",
            "location": 126,
            "return": [],
            "arguments": {
                "function": [],
                "args": [],
                "repeatable_args": [],
                "fold_list": [],
                "fold_dict": [],
                "force_starmap": [],
                "pool_size": []
            }
        },
        "sort_internal_lists": {
            "name": "sort_internal_lists",
            "location": 165,
            "return": [],
            "arguments": {
                "data": []
            }
        },
        "get_file_hash": {
            "name": "get_file_hash",
            "location": 180,
            "return": [],
            "arguments": {
                "file_to_hash": [],
                "block_size": []
            }
        },
        "get_str_or_none": {
            "name": "get_str_or_none",
            "location": 204,
            "return": [],
            "arguments": {
                "value": []
            }
        },
        "send_push_notification": {
            "name": "send_push_notification",
            "location": 217,
            "return": [],
            "arguments": {
                "message": []
            }
        },
        "get_all_cards_and_tokens_from_content": {
            "name": "get_all_cards_and_tokens_from_content",
            "location": 256,
            "return": [],
            "arguments": {
                "all_printings_content": []
            }
        },
        "get_all_cards_and_tokens": {
            "name": "get_all_cards_and_tokens",
            "location": 271,
            "return": [],
            "arguments": {
                "all_printings_path": []
            }
        },
        "generate_card_mapping": {
            "name": "generate_card_mapping",
            "location": 291,
            "return": [],
            "arguments": {
                "all_printings_path": [],
                "left_side_components": [],
                "right_side_components": []
            }
        }
    },
    "mtgjson-master/mtgjson5/__init__.py": {},
    "mtgjson-master/mtgjson5/__main__.py": {
        "build_mtgjson_sets": {
            "name": "build_mtgjson_sets",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "sets_to_build": [],
                "output_pretty": [
                    "str",
                    "dict[str, typing.Any]",
                    "dict[str, bytes]",
                    "None"
                ],
                "include_referrals": [
                    "bool",
                    "str",
                    "None"
                ]
            }
        },
        "validate_config_file_in_place": {
            "name": "validate_config_file_in_place",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "dispatcher": {
            "name": "dispatcher",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "args": []
            }
        },
        "main": {
            "name": "main",
            "location": 118,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "mtgjson-master/mtgjson5/classes/mtgjson_card.py": {
        "MtgjsonCardObject.__init__": {
            "name": "__init__",
            "location": 183,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "is_token": [
                    "bool"
                ]
            }
        },
        "MtgjsonCardObject.__eq__": {
            "name": "__eq__",
            "location": 201,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "tuple[typing.Union[float,float]]"
                ]
            }
        },
        "MtgjsonCardObject.__lt__": {
            "name": "__lt__",
            "location": 213,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "str",
                    "typing.Mapping",
                    "typing.MutableMapping",
                    "int"
                ]
            }
        },
        "MtgjsonCardObject.set_illustration_ids": {
            "name": "set_illustration_ids",
            "location": 252,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "illustration_ids": [
                    "int",
                    "str"
                ]
            }
        },
        "MtgjsonCardObject.get_illustration_ids": {
            "name": "get_illustration_ids",
            "location": 261,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MtgjsonCardObject.get_names": {
            "name": "get_names",
            "location": 268,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MtgjsonCardObject.set_names": {
            "name": "set_names",
            "location": 275,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "names": [
                    "str",
                    "None",
                    "tuple[]",
                    "dict[, ]",
                    "typing.Sequence[tuple[typing.Union[str,str,typing.Any]]]"
                ]
            }
        },
        "MtgjsonCardObject.append_names": {
            "name": "append_names",
            "location": 282,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "int",
                    "typing.Sequence[str]"
                ]
            }
        },
        "MtgjsonCardObject.set_watermark": {
            "name": "set_watermark",
            "location": 292,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "watermark": [
                    "str",
                    "int"
                ]
            }
        },
        "MtgjsonCardObject.get_atomic_keys": {
            "name": "get_atomic_keys",
            "location": 318,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MtgjsonCardObject.build_keys_to_skip": {
            "name": "build_keys_to_skip",
            "location": 326,
            "return": [
                "set[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MtgjsonCardObject.to_json": {
            "name": "to_json",
            "location": 345,
            "return": [
                "dict[, ]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "mtgjson-master/mtgjson5/classes/mtgjson_deck.py": {
        "MtgjsonDeckObject.set_sanitized_name": {
            "name": "set_sanitized_name",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "MtgjsonDeckObject.to_json": {
            "name": "to_json",
            "location": 36,
            "return": [
                "dict[, ]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "mtgjson-master/mtgjson5/classes/mtgjson_deck_header.py": {
        "MtgjsonDeckHeaderObject.__init__": {
            "name": "__init__",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "output_deck": [
                    "str",
                    "dict[str, typing.Any]",
                    "list[str]",
                    "None"
                ]
            }
        },
        "MtgjsonDeckHeaderObject.to_json": {
            "name": "to_json",
            "location": 31,
            "return": [
                "dict[, ]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "mtgjson-master/mtgjson5/classes/mtgjson_foreign_data.py": {
        "MtgjsonForeignDataObject.__init__": {
            "name": "__init__",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MtgjsonForeignDataObject.to_json": {
            "name": "to_json",
            "location": 31,
            "return": [
                "dict[, ]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "mtgjson-master/mtgjson5/classes/mtgjson_game_formats.py": {
        "MtgjsonGameFormatsObject.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MtgjsonGameFormatsObject.to_json": {
            "name": "to_json",
            "location": 25,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "mtgjson-master/mtgjson5/classes/mtgjson_identifiers.py": {
        "MtgjsonIdentifiersObject.__init__": {
            "name": "__init__",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MtgjsonIdentifiersObject.to_json": {
            "name": "to_json",
            "location": 37,
            "return": [
                "dict[, ]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "mtgjson-master/mtgjson5/classes/mtgjson_leadership_skills.py": {
        "MtgjsonLeadershipSkillsObject.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "brawl": [
                    "int",
                    "float"
                ],
                "commander": [
                    "int",
                    "float"
                ],
                "oathbreaker": [
                    "int",
                    "float"
                ]
            }
        },
        "MtgjsonLeadershipSkillsObject.to_json": {
            "name": "to_json",
            "location": 23,
            "return": [
                "dict[, ]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "mtgjson-master/mtgjson5/classes/mtgjson_legalities.py": {
        "MtgjsonLegalitiesObject.to_json": {
            "name": "to_json",
            "location": 27,
            "return": [
                "dict[, ]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "mtgjson-master/mtgjson5/classes/mtgjson_meta.py": {
        "MtgjsonMetaObject.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "date": [],
                "version": []
            }
        },
        "MtgjsonMetaObject.to_json": {
            "name": "to_json",
            "location": 28,
            "return": [
                "dict[, ]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "mtgjson-master/mtgjson5/classes/mtgjson_prices.py": {
        "MtgjsonPricesObject.__init__": {
            "name": "__init__",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "source": [
                    "str",
                    "int",
                    "float",
                    "bytes",
                    "dict[str, typing.Any]"
                ],
                "provider": [
                    "int",
                    "float"
                ],
                "date": [
                    "str",
                    "list[int]",
                    "tuple[typing.Union[int,int]]"
                ],
                "currency": [
                    "int",
                    "float"
                ]
            }
        },
        "MtgjsonPricesObject.to_json": {
            "name": "to_json",
            "location": 34,
            "return": [
                "dict[, dict[, dict[typing.Text, ]]]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "mtgjson-master/mtgjson5/classes/mtgjson_purchase_urls.py": {
        "MtgjsonPurchaseUrlsObject.build_keys_to_skip": {
            "name": "build_keys_to_skip",
            "location": 21,
            "return": [
                "set[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MtgjsonPurchaseUrlsObject.to_json": {
            "name": "to_json",
            "location": 34,
            "return": [
                "dict[, ]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "mtgjson-master/mtgjson5/classes/mtgjson_rulings.py": {
        "MtgjsonRulingObject.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "date": [
                    "str",
                    "float"
                ],
                "text": [
                    "bool",
                    "str"
                ]
            }
        },
        "MtgjsonRulingObject.to_json": {
            "name": "to_json",
            "location": 24,
            "return": [
                "dict[, ]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "mtgjson-master/mtgjson5/classes/mtgjson_sealed_product.py": {
        "MtgjsonSealedProductObject.__init__": {
            "name": "__init__",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MtgjsonSealedProductObject.to_json": {
            "name": "to_json",
            "location": 31,
            "return": [
                "dict[, ]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "mtgjson-master/mtgjson5/classes/mtgjson_set.py": {
        "MtgjsonSetObject.__init__": {
            "name": "__init__",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MtgjsonSetObject.__str__": {
            "name": "__str__",
            "location": 65,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MtgjsonSetObject.build_keys_to_skip": {
            "name": "build_keys_to_skip",
            "location": 72,
            "return": [
                "set[typing.Text]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MtgjsonSetObject.get_windows_safe_set_code": {
            "name": "get_windows_safe_set_code",
            "location": 90,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MtgjsonSetObject.to_json": {
            "name": "to_json",
            "location": 102,
            "return": [
                "dict[, ]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "mtgjson-master/mtgjson5/classes/mtgjson_translations.py": {
        "MtgjsonTranslationsObject.__init__": {
            "name": "__init__",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "active_dict": [
                    "dict[, ]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "MtgjsonTranslationsObject.parse_key": {
            "name": "parse_key",
            "location": 42,
            "return": [
                "str"
            ],
            "arguments": {
                "key": [
                    "str"
                ]
            }
        },
        "MtgjsonTranslationsObject.to_json": {
            "name": "to_json",
            "location": 52,
            "return": [
                "dict[, ]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "mtgjson-master/mtgjson5/classes/__init__.py": {},
    "mtgjson-master/mtgjson5/compiled_classes/mtgjson_all_identifiers.py": {
        "MtgjsonAllIdentifiersObject.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "all_printings": [
                    "dict[str, typing.Any]",
                    "bool",
                    "str"
                ]
            }
        },
        "MtgjsonAllIdentifiersObject.to_json": {
            "name": "to_json",
            "location": 36,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "mtgjson-master/mtgjson5/compiled_classes/mtgjson_all_printings.py": {
        "MtgjsonAllPrintingsObject.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MtgjsonAllPrintingsObject.get_set_contents": {
            "name": "get_set_contents",
            "location": 30,
            "return": [],
            "arguments": {
                "self": [],
                "sets": []
            }
        },
        "MtgjsonAllPrintingsObject.get_files_to_build": {
            "name": "get_files_to_build",
            "location": 46,
            "return": [],
            "arguments": {
                "files_to_ignore": []
            }
        },
        "MtgjsonAllPrintingsObject.iterate_all_sets": {
            "name": "iterate_all_sets",
            "location": 58,
            "return": [],
            "arguments": {
                "self": [],
                "files_to_build": []
            }
        },
        "MtgjsonAllPrintingsObject.to_json": {
            "name": "to_json",
            "location": 75,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "mtgjson-master/mtgjson5/compiled_classes/mtgjson_atomic_cards.py": {
        "MtgjsonAtomicCardsObject.__init__": {
            "name": "__init__",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cards_to_parse": [
                    "None",
                    "str",
                    "float",
                    "list[dict[str, typing.Any]]",
                    "int"
                ]
            }
        },
        "MtgjsonAtomicCardsObject.iterate_all_cards": {
            "name": "iterate_all_cards",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "files_to_ignore": [
                    "list[str]",
                    "str"
                ],
                "cards_to_load": [
                    "None",
                    "list[list[int]]",
                    "list[]",
                    "list[float]",
                    "list[int]"
                ]
            }
        },
        "MtgjsonAtomicCardsObject.update_global_card_list": {
            "name": "update_global_card_list",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "card_list": [
                    "list[dict[str, typing.Any]]",
                    "str",
                    "dict[, ]"
                ],
                "valid_keys": [
                    "list[str]",
                    "str",
                    "dict[str, typing.Any]",
                    "dict[str, str]",
                    "list[tuple[typing.Union[str,typing.Any]]]"
                ]
            }
        },
        "MtgjsonAtomicCardsObject.to_json": {
            "name": "to_json",
            "location": 125,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "mtgjson-master/mtgjson5/compiled_classes/mtgjson_card_types.py": {
        "regex_str_to_list": {
            "name": "regex_str_to_list",
            "location": 101,
            "return": [
                "list[]",
                "list[str]"
            ],
            "arguments": {
                "regex_match": [
                    "typing.Type",
                    "str"
                ]
            }
        },
        "MtgjsonCardTypesObject.__init__": {
            "name": "__init__",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MtgjsonCardTypesObject.to_json": {
            "name": "to_json",
            "location": 89,
            "return": [
                "dict[, ]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MtgjsonCardTypesObject.MtgjsonCardTypesInnerObject.__init__": {
            "name": "__init__",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "magic_rules": []
            }
        },
        "MtgjsonCardTypesObject.MtgjsonCardTypesInnerObject.to_json": {
            "name": "to_json",
            "location": 60,
            "return": [
                "dict[, ]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "mtgjson-master/mtgjson5/compiled_classes/mtgjson_compiled_list.py": {
        "MtgjsonCompiledListObject.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MtgjsonCompiledListObject.to_json": {
            "name": "to_json",
            "location": 22,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "mtgjson-master/mtgjson5/compiled_classes/mtgjson_deck_list.py": {
        "MtgjsonDeckListObject.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "deck_headers": [
                    "str",
                    "int",
                    "float",
                    "bytes",
                    "list[str]"
                ]
            }
        },
        "MtgjsonDeckListObject.to_json": {
            "name": "to_json",
            "location": 22,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "mtgjson-master/mtgjson5/compiled_classes/mtgjson_enum_values.py": {
        "MtgjsonEnumValuesObject.__init__": {
            "name": "__init__",
            "location": 51,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MtgjsonEnumValuesObject.construct_deck_enums": {
            "name": "construct_deck_enums",
            "location": 76,
            "return": [],
            "arguments": {
                "self": [],
                "decks_directory": []
            }
        },
        "MtgjsonEnumValuesObject.construct_set_and_card_enums": {
            "name": "construct_set_and_card_enums",
            "location": 98,
            "return": [],
            "arguments": {
                "self": [],
                "all_printing_content": []
            }
        },
        "MtgjsonEnumValuesObject.to_json": {
            "name": "to_json",
            "location": 153,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "mtgjson-master/mtgjson5/compiled_classes/mtgjson_keywords.py": {
        "MtgjsonKeywordsObject.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MtgjsonKeywordsObject.to_json": {
            "name": "to_json",
            "location": 29,
            "return": [
                "dict[, ]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "mtgjson-master/mtgjson5/compiled_classes/mtgjson_set_list.py": {
        "MtgjsonSetListObject.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MtgjsonSetListObject.get_all_set_list": {
            "name": "get_all_set_list",
            "location": 27,
            "return": [
                "list[dict[str, typing.Any]]"
            ],
            "arguments": {
                "files_to_ignore": [
                    "list[str]",
                    "str"
                ]
            }
        },
        "MtgjsonSetListObject.to_json": {
            "name": "to_json",
            "location": 56,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "mtgjson-master/mtgjson5/compiled_classes/mtgjson_structures.py": {
        "MtgjsonStructuresObject.__init__": {
            "name": "__init__",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MtgjsonStructuresObject.get_all_compiled_file_names": {
            "name": "get_all_compiled_file_names",
            "location": 82,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MtgjsonStructuresObject.get_compiled_list_files": {
            "name": "get_compiled_list_files",
            "location": 89,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MtgjsonStructuresObject.to_json": {
            "name": "to_json",
            "location": 96,
            "return": [
                "dict[, ]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "mtgjson-master/mtgjson5/compiled_classes/mtgjson_tcgplayer_skus.py": {
        "MtgjsonTcgplayerSkusObject.__init__": {
            "name": "__init__",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "all_printings_path": [
                    "str",
                    "dict[, ]",
                    "bool",
                    "typing.Sequence[str]"
                ]
            }
        },
        "MtgjsonTcgplayerSkusObject.to_json": {
            "name": "to_json",
            "location": 52,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "mtgjson-master/mtgjson5/compiled_classes/__init__.py": {},
    "mtgjson-master/mtgjson5/providers/abstract.py": {
        "AbstractProvider.__init__": {
            "name": "__init__",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "headers": [
                    "str",
                    "dict[, ]",
                    "None",
                    "typing.MutableMapping",
                    "bytes"
                ]
            }
        },
        "AbstractProvider._build_http_header": {
            "name": "_build_http_header",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbstractProvider.download": {
            "name": "download",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "dict[str, typing.Union[str,int]]",
                    "str",
                    "None"
                ],
                "params": [
                    "None",
                    "dict[str, typing.Union[str,int]]",
                    "str"
                ]
            }
        },
        "AbstractProvider.get_class_name": {
            "name": "get_class_name",
            "location": 52,
            "return": [],
            "arguments": {
                "cls": [
                    "str"
                ]
            }
        },
        "AbstractProvider.get_class_id": {
            "name": "get_class_id",
            "location": 60,
            "return": [],
            "arguments": {
                "cls": [
                    "str",
                    "dict[, ]",
                    "int"
                ]
            }
        },
        "AbstractProvider.log_download": {
            "name": "log_download",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "response": [
                    "dict[str, typing.Any]",
                    "list[dict[str, typing.Any]]"
                ]
            }
        },
        "AbstractProvider.__install_cache": {
            "name": "__install_cache",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbstractProvider.generic_generate_today_price_dict": {
            "name": "generic_generate_today_price_dict",
            "location": 90,
            "return": [
                "dict[, ]"
            ],
            "arguments": {
                "third_party_to_mtgjson": [],
                "price_data_rows": [
                    "list[int]",
                    "str",
                    "dict[str, dict[str, typing.Any]]"
                ],
                "card_platform_id_key": [],
                "default_prices_object": [
                    "dict[str, typing.Any]",
                    "float",
                    "None",
                    "dict[, ]",
                    "bytes",
                    "bool",
                    "str"
                ],
                "foil_key": [
                    "int"
                ],
                "retail_key": [],
                "buy_key": []
            }
        }
    },
    "mtgjson-master/mtgjson5/providers/cardhoarder.py": {
        "CardHoarderProvider.__init__": {
            "name": "__init__",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CardHoarderProvider._build_http_header": {
            "name": "_build_http_header",
            "location": 33,
            "return": [
                "dict[, ]"
            ],
            "arguments": {
                "self": []
            }
        },
        "CardHoarderProvider.download": {
            "name": "download",
            "location": 59,
            "return": [],
            "arguments": {
                "self": [],
                "url": [
                    "str"
                ],
                "params": [
                    "None",
                    "dict[str, typing.Union[str,int]]",
                    "str"
                ]
            }
        },
        "CardHoarderProvider.convert_cardhoarder_to_mtgjson": {
            "name": "convert_cardhoarder_to_mtgjson",
            "location": 74,
            "return": [
                "dict[typing.Union[typing.Text,int], float]"
            ],
            "arguments": {
                "self": [],
                "url_to_parse": [
                    "str",
                    "Exception",
                    "dict[str, typing.Any]",
                    "int"
                ],
                "mtgo_to_mtgjson_map": [
                    "dict[str, typing.Any]",
                    "dict[str, str]"
                ]
            }
        },
        "CardHoarderProvider.generate_today_price_dict": {
            "name": "generate_today_price_dict",
            "location": 109,
            "return": [
                "dict[, ]"
            ],
            "arguments": {
                "self": [],
                "all_printings_path": [
                    "str"
                ]
            }
        },
        "CardHoarderProvider._construct_for_cards": {
            "name": "_construct_for_cards",
            "location": 135,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "semi_completed_data": [],
                "cards": [
                    "dict[str, float]",
                    "dict[, ]",
                    "dict[str, dict[str, typing.Any]]",
                    "dict[str, dict[, ]]",
                    "dict[str, str]"
                ],
                "is_mtgo_normal": [
                    "bool"
                ]
            }
        },
        "CardHoarderProvider.get_mtgo_to_mtgjson_map": {
            "name": "get_mtgo_to_mtgjson_map",
            "location": 158,
            "return": [
                "dict[str, set[str]]",
                "dict[str, dict[, ]]"
            ],
            "arguments": {
                "all_printings_path": [
                    "str"
                ]
            }
        }
    },
    "mtgjson-master/mtgjson5/providers/cardkingdom.py": {
        "CardKingdomProvider.__init__": {
            "name": "__init__",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CardKingdomProvider._build_http_header": {
            "name": "_build_http_header",
            "location": 31,
            "return": [
                "dict[, ]"
            ],
            "arguments": {
                "self": []
            }
        },
        "CardKingdomProvider.download": {
            "name": "download",
            "location": 38,
            "return": [],
            "arguments": {
                "self": [],
                "url": [
                    "str"
                ],
                "params": [
                    "None",
                    "dict[str, typing.Union[str,int]]",
                    "str"
                ]
            }
        },
        "CardKingdomProvider.generate_today_price_dict": {
            "name": "generate_today_price_dict",
            "location": 53,
            "return": [],
            "arguments": {
                "self": [],
                "all_printings_path": [
                    "str",
                    "list[str]",
                    "bool"
                ]
            }
        }
    },
    "mtgjson-master/mtgjson5/providers/cardmarket.py": {
        "CardMarketProvider.__init__": {
            "name": "__init__",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "headers": [
                    "None",
                    "bool",
                    "typing.BinaryIO"
                ]
            }
        },
        "CardMarketProvider._get_card_market_data": {
            "name": "_get_card_market_data",
            "location": 69,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CardMarketProvider.generate_today_price_dict": {
            "name": "generate_today_price_dict",
            "location": 86,
            "return": [
                "dict[, ]"
            ],
            "arguments": {
                "self": [],
                "all_printings_path": [
                    "str",
                    "list[str]",
                    "None"
                ]
            }
        },
        "CardMarketProvider.__init_set_map": {
            "name": "__init_set_map",
            "location": 137,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CardMarketProvider.get_set_id": {
            "name": "get_set_id",
            "location": 181,
            "return": [
                "None",
                "int"
            ],
            "arguments": {
                "self": [],
                "set_name": [
                    "str"
                ]
            }
        },
        "CardMarketProvider.get_extras_set_id": {
            "name": "get_extras_set_id",
            "location": 194,
            "return": [
                "None",
                "int"
            ],
            "arguments": {
                "self": [],
                "set_name": [
                    "str"
                ]
            }
        },
        "CardMarketProvider.get_set_name": {
            "name": "get_set_name",
            "location": 209,
            "return": [
                "None",
                "str"
            ],
            "arguments": {
                "self": [],
                "set_name": [
                    "str"
                ]
            }
        },
        "CardMarketProvider._build_http_header": {
            "name": "_build_http_header",
            "location": 222,
            "return": [
                "dict[, ]"
            ],
            "arguments": {
                "self": []
            }
        },
        "CardMarketProvider.download": {
            "name": "download",
            "location": 229,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "dict[str, typing.Union[str,int]]",
                    "str",
                    "None"
                ],
                "params": [
                    "None",
                    "dict[str, typing.Union[str,int]]",
                    "str"
                ]
            }
        },
        "CardMarketProvider.get_mkm_cards": {
            "name": "get_mkm_cards",
            "location": 238,
            "return": [
                "dict[, ]",
                "dict[typing.Union[str,typing.Type], ]"
            ],
            "arguments": {
                "self": [],
                "mcm_id": [
                    "int",
                    "str",
                    "None"
                ]
            }
        }
    },
    "mtgjson-master/mtgjson5/providers/gatherer.py": {
        "GathererProvider.__init__": {
            "name": "__init__",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GathererProvider._build_http_header": {
            "name": "_build_http_header",
            "location": 48,
            "return": [
                "dict[, ]"
            ],
            "arguments": {
                "self": []
            }
        },
        "GathererProvider.download": {
            "name": "download",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "url": [],
                "params": [
                    "None"
                ]
            }
        },
        "GathererProvider.get_cards": {
            "name": "get_cards",
            "location": 87,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": [],
                "multiverse_id": [],
                "set_code": [
                    "typing.Text"
                ]
            }
        },
        "GathererProvider.parse_cards": {
            "name": "parse_cards",
            "location": 106,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": [],
                "gatherer_data": [],
                "strip_parentheses": [
                    "bool"
                ]
            }
        },
        "GathererProvider._parse_column": {
            "name": "_parse_column",
            "location": 119,
            "return": [
                "GathererCard"
            ],
            "arguments": {
                "self": [],
                "gatherer_column": [],
                "strip_parentheses": []
            }
        },
        "GathererProvider._replace_symbols": {
            "name": "_replace_symbols",
            "location": 175,
            "return": [],
            "arguments": {
                "tag": []
            }
        },
        "GathererProvider.strip_parentheses_from_text": {
            "name": "strip_parentheses_from_text",
            "location": 190,
            "return": [],
            "arguments": {
                "text": []
            }
        }
    },
    "mtgjson-master/mtgjson5/providers/github_boosters.py": {
        "GitHubBoostersProvider.__init__": {
            "name": "__init__",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GitHubBoostersProvider._build_http_header": {
            "name": "_build_http_header",
            "location": 31,
            "return": [
                "dict[, ]"
            ],
            "arguments": {
                "self": []
            }
        },
        "GitHubBoostersProvider.download": {
            "name": "download",
            "location": 38,
            "return": [
                "dict[, ]"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str"
                ],
                "params": [
                    "None",
                    "dict[str, typing.Union[str,int]]",
                    "str"
                ]
            }
        },
        "GitHubBoostersProvider.get_set_booster_data": {
            "name": "get_set_booster_data",
            "location": 56,
            "return": [],
            "arguments": {
                "self": [],
                "set_code": [
                    "str"
                ]
            }
        }
    },
    "mtgjson-master/mtgjson5/providers/github_decks.py": {
        "build_single_card": {
            "name": "build_single_card",
            "location": 106,
            "return": [
                "list[]"
            ],
            "arguments": {
                "card": [
                    "str"
                ]
            }
        },
        "GitHubDecksProvider.__init__": {
            "name": "__init__",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GitHubDecksProvider._build_http_header": {
            "name": "_build_http_header",
            "location": 39,
            "return": [
                "dict[, ]"
            ],
            "arguments": {
                "self": []
            }
        },
        "GitHubDecksProvider.download": {
            "name": "download",
            "location": 46,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str"
                ],
                "params": [
                    "None",
                    "dict[str, typing.Union[str,int]]",
                    "str"
                ]
            }
        },
        "GitHubDecksProvider.iterate_precon_decks": {
            "name": "iterate_precon_decks",
            "location": 62,
            "return": [
                "None",
                "typing.Generator[MtgjsonDeckObject]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "mtgjson-master/mtgjson5/providers/github_mtgsqlite.py": {
        "GitHubMTGSqliteProvider.__init__": {
            "name": "__init__",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GitHubMTGSqliteProvider._build_http_header": {
            "name": "_build_http_header",
            "location": 42,
            "return": [
                "dict[, ]"
            ],
            "arguments": {
                "self": []
            }
        },
        "GitHubMTGSqliteProvider.download": {
            "name": "download",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str"
                ],
                "params": [
                    "None",
                    "dict[str, typing.Union[str,int]]",
                    "str"
                ]
            }
        },
        "GitHubMTGSqliteProvider.build_sql_and_csv_files": {
            "name": "build_sql_and_csv_files",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "mtgjson-master/mtgjson5/providers/mtgban.py": {
        "MTGBanProvider.__init__": {
            "name": "__init__",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MTGBanProvider._build_http_header": {
            "name": "_build_http_header",
            "location": 32,
            "return": [
                "dict[, ]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MTGBanProvider.download": {
            "name": "download",
            "location": 56,
            "return": [],
            "arguments": {
                "self": [],
                "url": [
                    "str"
                ],
                "params": [
                    "None",
                    "dict[str, typing.Union[str,int]]",
                    "str"
                ]
            }
        },
        "MTGBanProvider.get_mtgjson_to_card_kingdom": {
            "name": "get_mtgjson_to_card_kingdom",
            "location": 70,
            "return": [
                "dict[, ]",
                "dict[str, list[typing.Any]]",
                "dict[int, typing.Any]",
                "dict[str, typing.Union[None,bool,str]]",
                "dict[str, typing.Union[dict[, ],typing.Any,typing.Any]]",
                "typing.Pattern",
                "dict[typing.Any, tuple[typing.Union[int,str]]]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "mtgjson-master/mtgjson5/providers/multiversebridge.py": {
        "MultiverseBridgeProvider.__init__": {
            "name": "__init__",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MultiverseBridgeProvider._build_http_header": {
            "name": "_build_http_header",
            "location": 37,
            "return": [
                "dict[, ]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MultiverseBridgeProvider.download": {
            "name": "download",
            "location": 40,
            "return": [],
            "arguments": {
                "self": [],
                "url": [
                    "str",
                    "dict[, ]",
                    "int"
                ],
                "params": [
                    "None",
                    "str"
                ]
            }
        },
        "MultiverseBridgeProvider.parse_rosetta_stone_cards": {
            "name": "parse_rosetta_stone_cards",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "rosetta_rows": []
            }
        },
        "MultiverseBridgeProvider.parse_rosetta_stone_sets": {
            "name": "parse_rosetta_stone_sets",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "rosetta_rows": [
                    "str",
                    "list[]",
                    "list[str]"
                ]
            }
        },
        "MultiverseBridgeProvider.get_rosetta_stone_cards": {
            "name": "get_rosetta_stone_cards",
            "location": 69,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MultiverseBridgeProvider.get_rosetta_stone_sets": {
            "name": "get_rosetta_stone_sets",
            "location": 78,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MultiverseBridgeProvider.generate_today_price_dict": {
            "name": "generate_today_price_dict",
            "location": 87,
            "return": [],
            "arguments": {
                "self": [],
                "all_printings_path": [
                    "dict[str, typing.Any]",
                    "str",
                    "set[str]",
                    "tuple[typing.Union[str,str]]"
                ]
            }
        }
    },
    "mtgjson-master/mtgjson5/providers/scryfall.py": {
        "ScryfallProvider.__init__": {
            "name": "__init__",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ScryfallProvider._build_http_header": {
            "name": "_build_http_header",
            "location": 44,
            "return": [
                "dict[, ]",
                "dict[typing.Text, typing.Text]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ScryfallProvider.download_all_pages": {
            "name": "download_all_pages",
            "location": 67,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": [],
                "starting_url": [
                    "str",
                    "None"
                ],
                "params": [
                    "None",
                    "dict[str, typing.Any]",
                    "str"
                ]
            }
        },
        "ScryfallProvider.download": {
            "name": "download",
            "location": 106,
            "return": [],
            "arguments": {
                "self": [],
                "url": [
                    "str",
                    "dict[str, str]"
                ],
                "params": [
                    "None",
                    "str"
                ]
            }
        },
        "ScryfallProvider.download_cards": {
            "name": "download_cards",
            "location": 130,
            "return": [
                "list[str]"
            ],
            "arguments": {
                "self": [],
                "set_code": [
                    "str",
                    "int",
                    "float"
                ]
            }
        },
        "ScryfallProvider.generate_cards_without_limits": {
            "name": "generate_cards_without_limits",
            "location": 146,
            "return": [
                "set[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ScryfallProvider.get_catalog_entry": {
            "name": "get_catalog_entry",
            "location": 158,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": [],
                "catalog_key": [
                    "str"
                ]
            }
        },
        "ScryfallProvider.get_all_scryfall_sets": {
            "name": "get_all_scryfall_sets",
            "location": 171,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ScryfallProvider.get_sets_already_built": {
            "name": "get_sets_already_built",
            "location": 197,
            "return": [
                "list[]"
            ],
            "arguments": {}
        },
        "ScryfallProvider.get_sets_to_build": {
            "name": "get_sets_to_build",
            "location": 220,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": [],
                "args": []
            }
        }
    },
    "mtgjson-master/mtgjson5/providers/tcgplayer.py": {
        "get_tcgplayer_sku_data": {
            "name": "get_tcgplayer_sku_data",
            "location": 284,
            "return": [
                "list[]"
            ],
            "arguments": {
                "group_id_and_name": [
                    "str"
                ]
            }
        },
        "get_tcgplayer_sealed_data": {
            "name": "get_tcgplayer_sealed_data",
            "location": 320,
            "return": [
                "list[]"
            ],
            "arguments": {
                "group_id": [
                    "int",
                    "BaseException",
                    "None",
                    "str",
                    "bytes"
                ]
            }
        },
        "get_tcgplayer_sku_map": {
            "name": "get_tcgplayer_sku_map",
            "location": 361,
            "return": [
                "dict[str, dict[typing.Text, ]]"
            ],
            "arguments": {
                "tcgplayer_set_sku_data": [
                    "list[dict[str, typing.Any]]",
                    "list[typing.Sequence[int]]",
                    "dict[, ]"
                ]
            }
        },
        "get_tcgplayer_buylist_prices_map": {
            "name": "get_tcgplayer_buylist_prices_map",
            "location": 394,
            "return": [
                "dict[, ]",
                "dict[, MtgjsonPricesObject]"
            ],
            "arguments": {
                "group_id_and_name": [
                    "str"
                ],
                "tcg_to_mtgjson_map": []
            }
        },
        "get_tcgplayer_prices_map": {
            "name": "get_tcgplayer_prices_map",
            "location": 451,
            "return": [
                "dict[, ]"
            ],
            "arguments": {
                "group_id_and_name": [
                    "str"
                ],
                "tcg_to_mtgjson_map": [
                    "dict[, ]"
                ]
            }
        },
        "get_card_finish": {
            "name": "get_card_finish",
            "location": 494,
            "return": [
                "typing.Generator[typing.Union[typing.Any,None,None]]",
                "tuple[typing.Union[typing.Any,typing.Any]]",
                "None"
            ],
            "arguments": {
                "card_name": [
                    "str"
                ]
            }
        },
        "convert_sku_data_enum": {
            "name": "convert_sku_data_enum",
            "location": 516,
            "return": [
                "list[dict[typing.Text, typing.Text]]"
            ],
            "arguments": {
                "product": [
                    "list[typing.Callable[, ]]",
                    "str"
                ]
            }
        },
        "CardFinish.has_value": {
            "name": "has_value",
            "location": 31,
            "return": [
                "bool"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "list[typing.Union[typing.Any,typing.Any]]",
                    "typing.Pattern",
                    "bool"
                ],
                "value": [
                    "str",
                    "list[]",
                    "int",
                    "tuple[]",
                    "list[str]",
                    "list[int]"
                ]
            }
        },
        "TCGPlayerProvider.__init__": {
            "name": "__init__",
            "location": 104,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TCGPlayerProvider._build_http_header": {
            "name": "_build_http_header",
            "location": 110,
            "return": [
                "dict[typing.Text, typing.Text]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TCGPlayerProvider._request_tcgplayer_bearer": {
            "name": "_request_tcgplayer_bearer",
            "location": 118,
            "return": [
                "typing.Text",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TCGPlayerProvider.download": {
            "name": "download",
            "location": 158,
            "return": [],
            "arguments": {
                "self": [],
                "url": [
                    "str",
                    "dict[, ]"
                ],
                "params": [
                    "None",
                    "str",
                    "dict[, ]"
                ]
            }
        },
        "TCGPlayerProvider.get_tcgplayer_magic_set_ids": {
            "name": "get_tcgplayer_magic_set_ids",
            "location": 173,
            "return": [
                "list[tuple[]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TCGPlayerProvider.generate_today_price_dict": {
            "name": "generate_today_price_dict",
            "location": 203,
            "return": [
                "dict[, ]"
            ],
            "arguments": {
                "self": [],
                "all_printings_path": [
                    "str"
                ]
            }
        },
        "TCGPlayerProvider.generate_mtgjson_sealed_product_objects": {
            "name": "generate_mtgjson_sealed_product_objects",
            "location": 249,
            "return": [
                "list[]",
                "list[MtgjsonSealedProductObject]"
            ],
            "arguments": {
                "self": [],
                "group_id": [
                    "str",
                    "None",
                    "int"
                ]
            }
        }
    },
    "mtgjson-master/mtgjson5/providers/whats_in_standard.py": {
        "WhatsInStandardProvider.__init__": {
            "name": "__init__",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "WhatsInStandardProvider._build_http_header": {
            "name": "_build_http_header",
            "location": 35,
            "return": [
                "dict[, ]"
            ],
            "arguments": {
                "self": []
            }
        },
        "WhatsInStandardProvider.download": {
            "name": "download",
            "location": 42,
            "return": [],
            "arguments": {
                "self": [],
                "url": [
                    "str",
                    "dict[, ]",
                    "int"
                ],
                "params": [
                    "None",
                    "str"
                ]
            }
        },
        "WhatsInStandardProvider.standard_legal_set_codes": {
            "name": "standard_legal_set_codes",
            "location": 61,
            "return": [
                "frozenset",
                "dict[int, str]",
                "Exception",
                "typing.Pattern",
                "int",
                "tuple[typing.Union[str,str,str]]",
                "set[str]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "mtgjson-master/mtgjson5/providers/wizards.py": {
        "build_single_set_code": {
            "name": "build_single_set_code",
            "location": 267,
            "return": [
                "dict[, ]"
            ],
            "arguments": {
                "key": [],
                "value": []
            }
        },
        "WizardsProvider.__init__": {
            "name": "__init__",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "WizardsProvider._build_http_header": {
            "name": "_build_http_header",
            "location": 43,
            "return": [
                "dict[, ]"
            ],
            "arguments": {
                "self": []
            }
        },
        "WizardsProvider.download": {
            "name": "download",
            "location": 50,
            "return": [],
            "arguments": {
                "self": [],
                "url": [],
                "params": [
                    "None"
                ]
            }
        },
        "WizardsProvider.get_translation_for_set": {
            "name": "get_translation_for_set",
            "location": 65,
            "return": [
                "MtgjsonTranslationsObject"
            ],
            "arguments": {
                "self": [],
                "set_code": []
            }
        },
        "WizardsProvider.build_single_language": {
            "name": "build_single_language",
            "location": 88,
            "return": [],
            "arguments": {
                "self": [],
                "short_lang_code": [],
                "long_lang_name": [],
                "translation_table": []
            }
        },
        "WizardsProvider.convert_keys_to_set_names": {
            "name": "convert_keys_to_set_names",
            "location": 136,
            "return": [
                "dict[, ]"
            ],
            "arguments": {
                "self": [],
                "table": []
            }
        },
        "WizardsProvider.load_translation_table": {
            "name": "load_translation_table",
            "location": 158,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "WizardsProvider.build_translation_table": {
            "name": "build_translation_table",
            "location": 166,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "WizardsProvider.override_set_translations": {
            "name": "override_set_translations",
            "location": 195,
            "return": [],
            "arguments": {
                "table": []
            }
        },
        "WizardsProvider.set_names_to_set_codes": {
            "name": "set_names_to_set_codes",
            "location": 219,
            "return": [],
            "arguments": {
                "table": []
            }
        },
        "WizardsProvider.get_magic_rules": {
            "name": "get_magic_rules",
            "location": 246,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "mtgjson-master/mtgjson5/providers/__init__.py": {},
    "mtgjson-master/tests/mtgjson5/test_all_cards_downloaded.py": {
        "test": {
            "name": "test",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "card_name_to_find": [
                    "dict[str, str]",
                    "str"
                ],
                "card_number_to_find": [
                    "str",
                    "bool",
                    "dict[str, str]",
                    "list[str]"
                ],
                "set_code": [
                    "str",
                    "None",
                    "dict[, ]",
                    "int"
                ]
            }
        }
    },
    "mtgjson-master/tests/mtgjson5/test_card_sorting.py": {
        "test_card_sorting": {
            "name": "test_card_sorting",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "mtgjson-master/tests/mtgjson5/test_name_parts_match_expected.py": {
        "test": {
            "name": "test",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "card_name": [
                    "str",
                    "None",
                    "bool"
                ],
                "scryfall_uuid": [
                    "str"
                ]
            }
        }
    },
    "mtgjson-master/tests/mtgjson5/test_nothing.py": {
        "test_nothing": {
            "name": "test_nothing",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "mtgjson-master/tests/mtgjson5/providers/test_cardmarket.py": {
        "test_get_extras_set_id": {
            "name": "test_get_extras_set_id",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "keys_found": [
                    "str",
                    "int"
                ],
                "set_map": [
                    "str",
                    "float",
                    "None",
                    "int"
                ],
                "expected": [
                    "str",
                    "int",
                    "None",
                    "dict[str, typing.Any]"
                ],
                "mocker": []
            }
        }
    }
}
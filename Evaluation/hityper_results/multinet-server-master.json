{
    "multinet-server-master/profile_app.py": {},
    "multinet-server-master/setup.py": {},
    "multinet-server-master/data/boston/script/table2csv.py": {
        "namify_member": {
            "name": "namify_member",
            "location": 8,
            "return": [
                "str"
            ],
            "arguments": {
                "name": [
                    "str"
                ]
            }
        },
        "namify_club": {
            "name": "namify_club",
            "location": 14,
            "return": [
                "str"
            ],
            "arguments": {
                "name": [
                    "str"
                ]
            }
        },
        "namify_club.split_on": {
            "name": "split_on",
            "location": 17,
            "return": [
                "list[]"
            ],
            "arguments": {
                "s": [],
                "splitters": []
            }
        }
    },
    "multinet-server-master/data/eurovis-2019/script/process.py": {
        "add_key": {
            "name": "add_key",
            "location": 8,
            "return": [],
            "arguments": {
                "rec": [],
                "idx": [
                    "str",
                    "bool"
                ]
            }
        },
        "convert_link": {
            "name": "convert_link",
            "location": 21,
            "return": [
                "dict[typing.Text, str]"
            ],
            "arguments": {
                "link": [
                    "str"
                ],
                "idx": [
                    "set[str]",
                    "str",
                    "dict[str, typing.Any]",
                    "int",
                    "None"
                ]
            }
        },
        "write_csv": {
            "name": "write_csv",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "data": [
                    "str"
                ],
                "fields": [
                    "bool",
                    "list[int]"
                ],
                "filename": [
                    "str",
                    "bytes"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 42,
            "return": [
                "int"
            ],
            "arguments": {}
        }
    },
    "multinet-server-master/data/miserables/scripts/process.py": {
        "add_key": {
            "name": "add_key",
            "location": 8,
            "return": [],
            "arguments": {
                "rec": [],
                "idx": [
                    "str",
                    "bool",
                    "None",
                    "list[str]"
                ]
            }
        },
        "convert_link": {
            "name": "convert_link",
            "location": 15,
            "return": [
                "dict[typing.Text, typing.Text]"
            ],
            "arguments": {
                "link": [
                    "str"
                ]
            }
        },
        "write_csv": {
            "name": "write_csv",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "data": [
                    "str"
                ],
                "fields": [
                    "bool",
                    "list[int]"
                ],
                "filename": [
                    "str",
                    "bytes"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 36,
            "return": [
                "int"
            ],
            "arguments": {}
        }
    },
    "multinet-server-master/data/openflights/script/process.py": {
        "main": {
            "name": "main",
            "location": 7,
            "return": [
                "int"
            ],
            "arguments": {}
        }
    },
    "multinet-server-master/devops/scripts/ensure_workspace_metadata.py": {
        "analyze_host": {
            "name": "analyze_host",
            "location": 13,
            "return": [
                "dict[typing.Text, typing.Union[typing.Text,bytes,int]]"
            ],
            "arguments": {
                "host": [
                    "str",
                    "bytes"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 36,
            "return": [
                "int"
            ],
            "arguments": {}
        }
    },
    "multinet-server-master/multinet/api.py": {
        "get_workspaces": {
            "name": "get_workspaces",
            "location": 33,
            "return": [],
            "arguments": {}
        },
        "get_workspace_permissions": {
            "name": "get_workspace_permissions",
            "location": 48,
            "return": [],
            "arguments": {
                "workspace": [
                    "str",
                    "int"
                ]
            }
        },
        "set_workspace_permissions": {
            "name": "set_workspace_permissions",
            "location": 57,
            "return": [],
            "arguments": {
                "workspace": [
                    "str",
                    "int"
                ]
            }
        },
        "get_workspace_tables": {
            "name": "get_workspace_tables",
            "location": 76,
            "return": [],
            "arguments": {
                "workspace": [
                    "str",
                    "int"
                ],
                "type": [
                    "typing.Text"
                ]
            }
        },
        "create_aql_table": {
            "name": "create_aql_table",
            "location": 86,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "workspace": [
                    "str",
                    "bool"
                ],
                "table": [
                    "str",
                    "bool"
                ]
            }
        },
        "get_table_rows": {
            "name": "get_table_rows",
            "location": 98,
            "return": [],
            "arguments": {
                "workspace": [
                    "str",
                    "int"
                ],
                "table": [
                    "str",
                    "int"
                ],
                "offset": [
                    "int"
                ],
                "limit": [
                    "int"
                ]
            }
        },
        "get_table_metadata": {
            "name": "get_table_metadata",
            "location": 106,
            "return": [],
            "arguments": {
                "workspace": [
                    "str",
                    "float",
                    "int",
                    "bytes"
                ],
                "table": [
                    "str",
                    "float",
                    "int",
                    "bytes"
                ]
            }
        },
        "set_table_metadata": {
            "name": "set_table_metadata",
            "location": 114,
            "return": [],
            "arguments": {
                "workspace": [
                    "dict[, ]",
                    "str"
                ],
                "table": [
                    "dict[, ]",
                    "str"
                ]
            }
        },
        "get_workspace_graphs": {
            "name": "get_workspace_graphs",
            "location": 122,
            "return": [],
            "arguments": {
                "workspace": [
                    "str",
                    "typing.TextIO",
                    "typing.IO",
                    "bytes"
                ]
            }
        },
        "get_workspace_graph": {
            "name": "get_workspace_graph",
            "location": 130,
            "return": [
                "dict[typing.Text, typing.Union[int,tuple[typing.Union[str,str,str,str,str]],str,list[int],set[]]]"
            ],
            "arguments": {
                "workspace": [
                    "str",
                    "int",
                    "collections.abc.AsyncGenerator"
                ],
                "graph": [
                    "str",
                    "int",
                    "collections.abc.AsyncGenerator"
                ]
            }
        },
        "get_graph_nodes": {
            "name": "get_graph_nodes",
            "location": 141,
            "return": [],
            "arguments": {
                "workspace": [
                    "int",
                    "str"
                ],
                "graph": [
                    "int",
                    "str"
                ],
                "offset": [
                    "int"
                ],
                "limit": [
                    "int"
                ]
            }
        },
        "get_node_data": {
            "name": "get_node_data",
            "location": 154,
            "return": [],
            "arguments": {
                "workspace": [
                    "str",
                    "int"
                ],
                "graph": [
                    "str",
                    "int"
                ],
                "table": [
                    "str",
                    "int"
                ],
                "node": [
                    "str",
                    "int"
                ]
            }
        },
        "get_node_edges": {
            "name": "get_node_edges",
            "location": 165,
            "return": [],
            "arguments": {
                "workspace": [
                    "str",
                    "int",
                    "dict[, ]"
                ],
                "graph": [
                    "str",
                    "int",
                    "dict[, ]"
                ],
                "table": [
                    "str",
                    "int",
                    "dict[, ]"
                ],
                "node": [
                    "str",
                    "int",
                    "dict[, ]"
                ],
                "direction": [
                    "typing.Text"
                ],
                "offset": [
                    "int"
                ],
                "limit": [
                    "int"
                ]
            }
        },
        "create_workspace": {
            "name": "create_workspace",
            "location": 189,
            "return": [
                "bool",
                "float"
            ],
            "arguments": {
                "workspace": [
                    "bool",
                    "float"
                ]
            }
        },
        "aql": {
            "name": "aql",
            "location": 202,
            "return": [],
            "arguments": {
                "workspace": [
                    "str",
                    "list[str]",
                    "int",
                    "float",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "delete_workspace": {
            "name": "delete_workspace",
            "location": 215,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "workspace": [
                    "str",
                    "int"
                ]
            }
        },
        "rename_workspace": {
            "name": "rename_workspace",
            "location": 225,
            "return": [
                "str",
                "typing.Pattern"
            ],
            "arguments": {
                "workspace": [
                    "str",
                    "typing.Pattern"
                ],
                "name": [
                    "str",
                    "typing.Pattern"
                ]
            }
        },
        "create_graph": {
            "name": "create_graph",
            "location": 235,
            "return": [
                "str"
            ],
            "arguments": {
                "workspace": [
                    "str",
                    "None",
                    "int",
                    "typing.Callable[, ]"
                ],
                "graph": [
                    "str"
                ],
                "edge_table": [
                    "None",
                    "str",
                    "typing.Callable[, ]",
                    "dict[str, typing.Any]",
                    "dict[str, str]",
                    "int"
                ]
            }
        },
        "delete_graph": {
            "name": "delete_graph",
            "location": 251,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "workspace": [
                    "str",
                    "int"
                ],
                "graph": [
                    "str",
                    "int"
                ]
            }
        },
        "delete_table": {
            "name": "delete_table",
            "location": 260,
            "return": [
                "str",
                "dict[, ]",
                "set[]",
                "int"
            ],
            "arguments": {
                "workspace": [
                    "str",
                    "dict[, ]",
                    "set[]",
                    "int"
                ],
                "table": [
                    "str",
                    "dict[, ]",
                    "set[]",
                    "int"
                ]
            }
        }
    },
    "multinet-server-master/multinet/app.py": {},
    "multinet-server-master/multinet/errors.py": {
        "ServerError.flask_response": {
            "name": "flask_response",
            "location": 13,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "InternalServerError.__init__": {
            "name": "__init__",
            "location": 29,
            "return": [],
            "arguments": {
                "self": [],
                "message": []
            }
        },
        "InternalServerError.flask_response": {
            "name": "flask_response",
            "location": 33,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SecretKeyNotSet.__init__": {
            "name": "__init__",
            "location": 41,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DatabaseCorrupted.flask_response": {
            "name": "flask_response",
            "location": 49,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Unauthorized.__init__": {
            "name": "__init__",
            "location": 57,
            "return": [],
            "arguments": {
                "self": [],
                "reason": []
            }
        },
        "Unauthorized.flask_response": {
            "name": "flask_response",
            "location": 61,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NotFound.__init__": {
            "name": "__init__",
            "location": 69,
            "return": [],
            "arguments": {
                "self": [],
                "item_type": [],
                "item": []
            }
        },
        "NotFound.flask_response": {
            "name": "flask_response",
            "location": 79,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "WorkspaceNotFound.__init__": {
            "name": "__init__",
            "location": 87,
            "return": [],
            "arguments": {
                "self": [],
                "workspace": []
            }
        },
        "TableNotFound.__init__": {
            "name": "__init__",
            "location": 95,
            "return": [],
            "arguments": {
                "self": [],
                "workspace": [],
                "table": []
            }
        },
        "NetworkNotFound.__init__": {
            "name": "__init__",
            "location": 103,
            "return": [],
            "arguments": {
                "self": [],
                "workspace": [],
                "graph": []
            }
        },
        "NodeNotFound.__init__": {
            "name": "__init__",
            "location": 111,
            "return": [],
            "arguments": {
                "self": [],
                "table": [],
                "node": []
            }
        },
        "BadQueryArgument.__init__": {
            "name": "__init__",
            "location": 119,
            "return": [],
            "arguments": {
                "self": [],
                "argument": [],
                "value": []
            }
        },
        "BadQueryArgument.flask_response": {
            "name": "flask_response",
            "location": 124,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AlreadyExists.__init__": {
            "name": "__init__",
            "location": 133,
            "return": [],
            "arguments": {
                "self": [],
                "item_type": [],
                "item": []
            }
        },
        "AlreadyExists.flask_response": {
            "name": "flask_response",
            "location": 138,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MalformedRequestBody.__init__": {
            "name": "__init__",
            "location": 146,
            "return": [],
            "arguments": {
                "self": [],
                "body": []
            }
        },
        "MalformedRequestBody.flask_response": {
            "name": "flask_response",
            "location": 150,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "InvalidMetadata.__init__": {
            "name": "__init__",
            "location": 158,
            "return": [],
            "arguments": {
                "self": [],
                "metadata": []
            }
        },
        "InvalidMetadata.flask_response": {
            "name": "flask_response",
            "location": 162,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RequiredParamsMissing.__init__": {
            "name": "__init__",
            "location": 170,
            "return": [],
            "arguments": {
                "self": [],
                "missing": []
            }
        },
        "RequiredParamsMissing.flask_response": {
            "name": "flask_response",
            "location": 174,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "InvalidName.__init__": {
            "name": "__init__",
            "location": 182,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "InvalidName.flask_response": {
            "name": "flask_response",
            "location": 186,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ValidationFailed.__init__": {
            "name": "__init__",
            "location": 194,
            "return": [],
            "arguments": {
                "self": [],
                "errors": []
            }
        },
        "ValidationFailed.flask_response": {
            "name": "flask_response",
            "location": 198,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DatabaseNotLive.flask_response": {
            "name": "flask_response",
            "location": 206,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DecodeFailed.__init__": {
            "name": "__init__",
            "location": 214,
            "return": [],
            "arguments": {
                "self": [],
                "error": []
            }
        },
        "DecodeFailed.flask_response": {
            "name": "flask_response",
            "location": 218,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GraphCreationError.__init__": {
            "name": "__init__",
            "location": 226,
            "return": [],
            "arguments": {
                "self": [],
                "message": []
            }
        },
        "GraphCreationError.flask_response": {
            "name": "flask_response",
            "location": 230,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AQLValidationError.__init__": {
            "name": "__init__",
            "location": 238,
            "return": [],
            "arguments": {
                "self": [],
                "message": []
            }
        },
        "AQLValidationError.flask_response": {
            "name": "flask_response",
            "location": 242,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AQLExecutionError.__init__": {
            "name": "__init__",
            "location": 250,
            "return": [],
            "arguments": {
                "self": [],
                "message": []
            }
        },
        "AQLExecutionError.flask_response": {
            "name": "flask_response",
            "location": 254,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UploadNotFound.__init__": {
            "name": "__init__",
            "location": 262,
            "return": [],
            "arguments": {
                "self": [],
                "upload_id": []
            }
        }
    },
    "multinet-server-master/multinet/types.py": {
        "ArangoEntityDocument.dict": {
            "name": "dict",
            "location": 40,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "multinet-server-master/multinet/util.py": {
        "expand_user_permissions": {
            "name": "expand_user_permissions",
            "location": 23,
            "return": [],
            "arguments": {
                "permissons": []
            }
        },
        "contract_user_permissions": {
            "name": "contract_user_permissions",
            "location": 59,
            "return": [],
            "arguments": {
                "expanded_user_permissions": []
            }
        },
        "filter_unwanted_keys": {
            "name": "filter_unwanted_keys",
            "location": 78,
            "return": [],
            "arguments": {
                "row": []
            }
        },
        "generate_filtered_docs": {
            "name": "generate_filtered_docs",
            "location": 83,
            "return": [],
            "arguments": {
                "rows": []
            }
        },
        "generate": {
            "name": "generate",
            "location": 90,
            "return": [],
            "arguments": {
                "iterator": []
            }
        },
        "stream": {
            "name": "stream",
            "location": 102,
            "return": [],
            "arguments": {
                "iterator": []
            }
        },
        "require_db": {
            "name": "require_db",
            "location": 107,
            "return": [],
            "arguments": {}
        },
        "decode_data": {
            "name": "decode_data",
            "location": 113,
            "return": [],
            "arguments": {
                "data": []
            }
        },
        "data_path": {
            "name": "data_path",
            "location": 123,
            "return": [],
            "arguments": {
                "file_name": []
            }
        },
        "generate_arango_workspace_name": {
            "name": "generate_arango_workspace_name",
            "location": 130,
            "return": [],
            "arguments": {}
        },
        "get_allowed_origins": {
            "name": "get_allowed_origins",
            "location": 135,
            "return": [],
            "arguments": {}
        },
        "regex_allowed_origins": {
            "name": "regex_allowed_origins",
            "location": 144,
            "return": [],
            "arguments": {
                "origins": []
            }
        },
        "load_secret_key": {
            "name": "load_secret_key",
            "location": 151,
            "return": [],
            "arguments": {}
        },
        "get_secret_key": {
            "name": "get_secret_key",
            "location": 156,
            "return": [],
            "arguments": {}
        }
    },
    "multinet-server-master/multinet/wsgi.py": {},
    "multinet-server-master/multinet/__init__.py": {
        "create_app": {
            "name": "create_app",
            "location": 24,
            "return": [
                "Flask"
            ],
            "arguments": {
                "config": [
                    "None",
                    "dict[, ]",
                    "bool",
                    "list[str]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "create_app.handle_error": {
            "name": "handle_error",
            "location": 66,
            "return": [],
            "arguments": {
                "error": []
            }
        },
        "create_app.about": {
            "name": "about",
            "location": 70,
            "return": [
                "typing.Text"
            ],
            "arguments": {}
        }
    },
    "multinet-server-master/multinet/auth/google.py": {
        "default_return_url": {
            "name": "default_return_url",
            "location": 46,
            "return": [],
            "arguments": {}
        },
        "parse_id_token": {
            "name": "parse_id_token",
            "location": 55,
            "return": [
                "GoogleUserInfo"
            ],
            "arguments": {
                "token": [
                    "str"
                ]
            }
        },
        "ensure_external_url": {
            "name": "ensure_external_url",
            "location": 68,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "url": [
                    "str"
                ]
            }
        },
        "google_oauth2_info": {
            "name": "google_oauth2_info",
            "location": 78,
            "return": [],
            "arguments": {}
        },
        "init_oauth": {
            "name": "init_oauth",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "app": [
                    "str"
                ]
            }
        },
        "login": {
            "name": "login",
            "location": 105,
            "return": [],
            "arguments": {
                "return_url": [
                    "None",
                    "str",
                    "typing.Any",
                    "int"
                ]
            }
        },
        "authorized": {
            "name": "authorized",
            "location": 133,
            "return": [],
            "arguments": {
                "state": [
                    "str",
                    "int"
                ],
                "code": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "multinet-server-master/multinet/auth/types.py": {},
    "multinet-server-master/multinet/auth/util.py": {
        "require_login": {
            "name": "require_login",
            "location": 25,
            "return": [],
            "arguments": {
                "f": [
                    "typing.Iterable[str]",
                    "typing.Callable[, ]"
                ]
            }
        },
        "is_reader": {
            "name": "is_reader",
            "location": 39,
            "return": [
                "bool"
            ],
            "arguments": {
                "user": [
                    "bool",
                    "dict[str, typing.Any]",
                    "typing.Type"
                ],
                "workspace": [
                    "str",
                    "None"
                ]
            }
        },
        "require_reader": {
            "name": "require_reader",
            "location": 59,
            "return": [],
            "arguments": {
                "f": [
                    "typing.Iterable[str]",
                    "typing.Callable[, ]"
                ]
            }
        },
        "is_writer": {
            "name": "is_writer",
            "location": 73,
            "return": [
                "bool"
            ],
            "arguments": {
                "user": [
                    "bool",
                    "dict[str, typing.Any]",
                    "typing.Type"
                ],
                "workspace": [
                    "str",
                    "None"
                ]
            }
        },
        "require_writer": {
            "name": "require_writer",
            "location": 85,
            "return": [],
            "arguments": {
                "f": [
                    "typing.Iterable[str]",
                    "typing.Callable[, ]"
                ]
            }
        },
        "is_maintainer": {
            "name": "is_maintainer",
            "location": 99,
            "return": [
                "bool"
            ],
            "arguments": {
                "user": [
                    "bool",
                    "dict[str, typing.Any]",
                    "typing.Type"
                ],
                "workspace": [
                    "str",
                    "None"
                ]
            }
        },
        "require_maintainer": {
            "name": "require_maintainer",
            "location": 111,
            "return": [],
            "arguments": {
                "f": [
                    "typing.Iterable[str]",
                    "typing.Callable[, ]"
                ]
            }
        },
        "is_owner": {
            "name": "is_owner",
            "location": 126,
            "return": [
                "bool"
            ],
            "arguments": {
                "user": [
                    "bool",
                    "dict[str, typing.Any]",
                    "str",
                    "None"
                ],
                "workspace": [
                    "str",
                    "None"
                ]
            }
        },
        "require_owner": {
            "name": "require_owner",
            "location": 138,
            "return": [],
            "arguments": {
                "f": [
                    "typing.Iterable[str]",
                    "typing.Callable[, ]"
                ]
            }
        },
        "current_login_token": {
            "name": "current_login_token",
            "location": 152,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "encode_auth_token": {
            "name": "encode_auth_token",
            "location": 161,
            "return": [],
            "arguments": {
                "token_dict": [
                    "str",
                    "None",
                    "dict[, ]"
                ]
            }
        },
        "decode_auth_token": {
            "name": "decode_auth_token",
            "location": 167,
            "return": [
                "None"
            ],
            "arguments": {
                "token": [
                    "str",
                    "list[str]"
                ]
            }
        },
        "create_login_token": {
            "name": "create_login_token",
            "location": 185,
            "return": [
                "dict[typing.Text, typing.Union[str,None,int]]"
            ],
            "arguments": {
                "session_str": [
                    "str",
                    "None",
                    "int"
                ]
            }
        },
        "current_user": {
            "name": "current_user",
            "location": 198,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "require_login.wrapper": {
            "name": "wrapper",
            "location": 29,
            "return": [],
            "arguments": {}
        },
        "require_reader.wrapper": {
            "name": "wrapper",
            "location": 63,
            "return": [],
            "arguments": {
                "workspace": []
            }
        },
        "require_writer.wrapper": {
            "name": "wrapper",
            "location": 89,
            "return": [],
            "arguments": {
                "workspace": []
            }
        },
        "require_maintainer.wrapper": {
            "name": "wrapper",
            "location": 115,
            "return": [],
            "arguments": {
                "workspace": []
            }
        },
        "require_owner.wrapper": {
            "name": "wrapper",
            "location": 142,
            "return": [],
            "arguments": {
                "workspace": []
            }
        }
    },
    "multinet-server-master/multinet/auth/__init__.py": {
        "user_info": {
            "name": "user_info",
            "location": 19,
            "return": [],
            "arguments": {}
        },
        "logout": {
            "name": "logout",
            "location": 38,
            "return": [],
            "arguments": {}
        },
        "search": {
            "name": "search",
            "location": 58,
            "return": [],
            "arguments": {
                "query": [
                    "str"
                ]
            }
        }
    },
    "multinet-server-master/multinet/db/__init__.py": {
        "db": {
            "name": "db",
            "location": 38,
            "return": [],
            "arguments": {
                "name": [],
                "readonly": []
            }
        },
        "system_db": {
            "name": "system_db",
            "location": 52,
            "return": [],
            "arguments": {
                "readonly": []
            }
        },
        "check_db": {
            "name": "check_db",
            "location": 57,
            "return": [],
            "arguments": {}
        },
        "register_legacy_workspaces": {
            "name": "register_legacy_workspaces",
            "location": 66,
            "return": [],
            "arguments": {}
        },
        "workspace_mapping_collection": {
            "name": "workspace_mapping_collection",
            "location": 82,
            "return": [],
            "arguments": {
                "readonly": []
            }
        },
        "workspace_mapping": {
            "name": "workspace_mapping",
            "location": 94,
            "return": [],
            "arguments": {
                "name": []
            }
        },
        "user_collection": {
            "name": "user_collection",
            "location": 109,
            "return": [],
            "arguments": {}
        },
        "_run_aql_query": {
            "name": "_run_aql_query",
            "location": 119,
            "return": [],
            "arguments": {
                "aql": [],
                "query": [],
                "bind_vars": []
            }
        },
        "uploads_database": {
            "name": "uploads_database",
            "location": 136,
            "return": [],
            "arguments": {
                "readonly": []
            }
        },
        "create_upload_collection": {
            "name": "create_upload_collection",
            "location": 145,
            "return": [],
            "arguments": {}
        },
        "insert_file_chunk": {
            "name": "insert_file_chunk",
            "location": 153,
            "return": [],
            "arguments": {
                "upload_id": [],
                "sequence": [],
                "chunk": []
            }
        },
        "delete_upload_collection": {
            "name": "delete_upload_collection",
            "location": 169,
            "return": [],
            "arguments": {
                "upload_id": []
            }
        }
    },
    "multinet-server-master/multinet/db/models/graph.py": {
        "Graph.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "workspace": [],
                "handle": [],
                "aql": []
            }
        },
        "Graph.nodes": {
            "name": "nodes",
            "location": 36,
            "return": [],
            "arguments": {
                "self": [],
                "offset": [],
                "limit": []
            }
        },
        "Graph.node_tables": {
            "name": "node_tables",
            "location": 61,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Graph.edge_table": {
            "name": "edge_table",
            "location": 65,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Graph.node_attributes": {
            "name": "node_attributes",
            "location": 72,
            "return": [],
            "arguments": {
                "self": [],
                "table": [],
                "node": []
            }
        },
        "Graph.node_edges": {
            "name": "node_edges",
            "location": 89,
            "return": [],
            "arguments": {
                "self": [],
                "table": [],
                "node": [],
                "direction": [],
                "offset": [],
                "limit": []
            }
        }
    },
    "multinet-server-master/multinet/db/models/table.py": {
        "table_metadata_from_dict": {
            "name": "table_metadata_from_dict",
            "location": 21,
            "return": [],
            "arguments": {
                "raw_data": []
            }
        },
        "NotAnEdgeTable.__init__": {
            "name": "__init__",
            "location": 32,
            "return": [],
            "arguments": {
                "self": [],
                "table": []
            }
        },
        "NotAnEdgeTable.flask_response": {
            "name": "flask_response",
            "location": 36,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Table.__init__": {
            "name": "__init__",
            "location": 44,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "workspace": []
            }
        },
        "Table.rows": {
            "name": "rows",
            "location": 62,
            "return": [],
            "arguments": {
                "self": [],
                "offset": [],
                "limit": []
            }
        },
        "Table.row": {
            "name": "row",
            "location": 69,
            "return": [],
            "arguments": {
                "self": [],
                "doc": []
            }
        },
        "Table.row_count": {
            "name": "row_count",
            "location": 73,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Table.keys": {
            "name": "keys",
            "location": 77,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Table.headers": {
            "name": "headers",
            "location": 81,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Table.get_metadata": {
            "name": "get_metadata",
            "location": 92,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Table.set_metadata": {
            "name": "set_metadata",
            "location": 105,
            "return": [],
            "arguments": {
                "self": [],
                "raw_data": []
            }
        },
        "Table.rename": {
            "name": "rename",
            "location": 116,
            "return": [],
            "arguments": {
                "self": [],
                "new_name": []
            }
        },
        "Table.insert": {
            "name": "insert",
            "location": 121,
            "return": [],
            "arguments": {
                "self": [],
                "rows": []
            }
        },
        "Table.edge_properties": {
            "name": "edge_properties",
            "location": 129,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "multinet-server-master/multinet/db/models/user.py": {
        "generate_user_session": {
            "name": "generate_user_session",
            "location": 34,
            "return": [],
            "arguments": {}
        },
        "User.__init__": {
            "name": "__init__",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "family_name": [
                    "str",
                    "None",
                    "bool"
                ],
                "given_name": [
                    "str",
                    "None",
                    "bool"
                ],
                "name": [
                    "str",
                    "None"
                ],
                "sub": [
                    "str",
                    "typing.Iterable[str]",
                    "bool",
                    "None"
                ],
                "email": [
                    "str",
                    "typing.Iterable[str]",
                    "bool",
                    "None"
                ],
                "picture": [
                    "None",
                    "str",
                    "typing.Iterable[str]",
                    "bool"
                ]
            }
        },
        "User.exists": {
            "name": "exists",
            "location": 64,
            "return": [],
            "arguments": {
                "sub": [
                    "dict[, ]",
                    "int",
                    "list[dict[str, typing.Any]]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "User.get": {
            "name": "get",
            "location": 69,
            "return": [
                "None",
                "int",
                "dict[, ]",
                "list[int]",
                "list[list[int]]",
                "str"
            ],
            "arguments": {
                "sub": [
                    "str",
                    "bool"
                ]
            }
        },
        "User.register": {
            "name": "register",
            "location": 81,
            "return": [
                "User"
            ],
            "arguments": {}
        },
        "User.from_id": {
            "name": "from_id",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {
                "sub": [
                    "int",
                    "dict[str, bool]",
                    "str",
                    "Exception"
                ]
            }
        },
        "User.from_session": {
            "name": "from_session",
            "location": 95,
            "return": [
                "None"
            ],
            "arguments": {
                "session_id": [
                    "str",
                    "int",
                    "None"
                ]
            }
        },
        "User.from_token": {
            "name": "from_token",
            "location": 107,
            "return": [],
            "arguments": {
                "token": [
                    "str"
                ]
            }
        },
        "User.from_dict": {
            "name": "from_dict",
            "location": 112,
            "return": [
                "User"
            ],
            "arguments": {
                "d": []
            }
        },
        "User.search": {
            "name": "search",
            "location": 123,
            "return": [],
            "arguments": {
                "query": [
                    "str",
                    "dict[, ]",
                    "typing.Type"
                ]
            }
        },
        "User.save": {
            "name": "save",
            "location": 141,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "User.delete": {
            "name": "delete",
            "location": 153,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "User.ensure_session": {
            "name": "ensure_session",
            "location": 160,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "User.get_session": {
            "name": "get_session",
            "location": 170,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "User.set_session": {
            "name": "set_session",
            "location": 179,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "session": [
                    "str"
                ]
            }
        },
        "User.delete_session": {
            "name": "delete_session",
            "location": 188,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "User.asjson": {
            "name": "asjson",
            "location": 194,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "User.asdict": {
            "name": "asdict",
            "location": 198,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "User.available_workspaces": {
            "name": "available_workspaces",
            "location": 205,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "multinet-server-master/multinet/db/models/workspace.py": {
        "Workspace.__init__": {
            "name": "__init__",
            "location": 55,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "Workspace.exists": {
            "name": "exists",
            "location": 77,
            "return": [],
            "arguments": {
                "name": []
            }
        },
        "Workspace.create": {
            "name": "create",
            "location": 82,
            "return": [],
            "arguments": {
                "name": [],
                "owner": []
            }
        },
        "Workspace.list_all": {
            "name": "list_all",
            "location": 108,
            "return": [],
            "arguments": {}
        },
        "Workspace.list_public": {
            "name": "list_public",
            "location": 114,
            "return": [],
            "arguments": {}
        },
        "Workspace.from_dict": {
            "name": "from_dict",
            "location": 120,
            "return": [],
            "arguments": {
                "d": []
            }
        },
        "Workspace.save": {
            "name": "save",
            "location": 126,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Workspace.set_permissions": {
            "name": "set_permissions",
            "location": 139,
            "return": [],
            "arguments": {
                "self": [],
                "permissions": []
            }
        },
        "Workspace.asdict": {
            "name": "asdict",
            "location": 151,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Workspace.rename": {
            "name": "rename",
            "location": 160,
            "return": [],
            "arguments": {
                "self": [],
                "new_name": []
            }
        },
        "Workspace.delete": {
            "name": "delete",
            "location": 176,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Workspace.get_metadata": {
            "name": "get_metadata",
            "location": 189,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Workspace.entity_metadata_collection": {
            "name": "entity_metadata_collection",
            "location": 198,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Workspace.graphs": {
            "name": "graphs",
            "location": 205,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Workspace.graph": {
            "name": "graph",
            "location": 209,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "Workspace.has_graph": {
            "name": "has_graph",
            "location": 216,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "Workspace.validate_edge_table": {
            "name": "validate_edge_table",
            "location": 220,
            "return": [],
            "arguments": {
                "self": [],
                "edge_table": []
            }
        },
        "Workspace.create_graph": {
            "name": "create_graph",
            "location": 248,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "edge_table": []
            }
        },
        "Workspace.delete_graph": {
            "name": "delete_graph",
            "location": 271,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "Workspace.tables": {
            "name": "tables",
            "location": 278,
            "return": [],
            "arguments": {
                "self": [],
                "table_type": []
            }
        },
        "Workspace.table": {
            "name": "table",
            "location": 308,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "Workspace.has_table": {
            "name": "has_table",
            "location": 315,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "Workspace.create_table": {
            "name": "create_table",
            "location": 319,
            "return": [],
            "arguments": {
                "self": [],
                "table": [],
                "edge": [],
                "sync": []
            }
        },
        "Workspace.create_aql_table": {
            "name": "create_aql_table",
            "location": 324,
            "return": [],
            "arguments": {
                "self": [],
                "table": [],
                "aql_query": []
            }
        },
        "Workspace.delete_table": {
            "name": "delete_table",
            "location": 342,
            "return": [],
            "arguments": {
                "self": [],
                "table": []
            }
        },
        "Workspace.run_query": {
            "name": "run_query",
            "location": 349,
            "return": [],
            "arguments": {
                "self": [],
                "query": [],
                "bind_vars": []
            }
        },
        "Workspace.tables.pass_all": {
            "name": "pass_all",
            "location": 281,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "Workspace.tables.is_edge": {
            "name": "is_edge",
            "location": 284,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "Workspace.tables.is_node": {
            "name": "is_node",
            "location": 287,
            "return": [],
            "arguments": {
                "x": []
            }
        }
    },
    "multinet-server-master/multinet/db/models/__init__.py": {},
    "multinet-server-master/multinet/downloaders/csv.py": {
        "download": {
            "name": "download",
            "location": 22,
            "return": [
                "Response"
            ],
            "arguments": {
                "workspace": [
                    "str",
                    "bool"
                ],
                "table": [
                    "str"
                ]
            }
        },
        "download.csv_row_generator": {
            "name": "csv_row_generator",
            "location": 38,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {}
        }
    },
    "multinet-server-master/multinet/downloaders/d3_json.py": {
        "node_generator": {
            "name": "node_generator",
            "location": 21,
            "return": [
                "typing.Generator[typing.Text]"
            ],
            "arguments": {
                "loaded_workspace": [
                    "list[set[graph.UniqueId]]",
                    "typing.Sequence[float]"
                ],
                "loaded_graph": []
            }
        },
        "link_generator": {
            "name": "link_generator",
            "location": 39,
            "return": [
                "typing.Generator[typing.Text]"
            ],
            "arguments": {
                "loaded_workspace": [
                    "bool",
                    "str",
                    "float",
                    "None"
                ],
                "loaded_graph": []
            }
        },
        "download": {
            "name": "download",
            "location": 76,
            "return": [
                "Response"
            ],
            "arguments": {
                "workspace": [
                    "int",
                    "str",
                    "typing.Iterable['Context']"
                ],
                "graph": [
                    "str"
                ]
            }
        },
        "download.d3_json_generator": {
            "name": "d3_json_generator",
            "location": 89,
            "return": [
                "typing.Generator[typing.Text]",
                "typing.Generator[]"
            ],
            "arguments": {}
        }
    },
    "multinet-server-master/multinet/downloaders/__init__.py": {},
    "multinet-server-master/multinet/processing/processors.py": {
        "process_boolean_entry": {
            "name": "process_boolean_entry",
            "location": 10,
            "return": [],
            "arguments": {
                "entry": [
                    "int",
                    "tuple[int]",
                    "typing.Hashable"
                ]
            }
        },
        "process_date_entry": {
            "name": "process_date_entry",
            "location": 43,
            "return": [],
            "arguments": {
                "entry": [
                    "int",
                    "float",
                    "tuple[typing.Union[float,float]]",
                    "str"
                ]
            }
        },
        "process_number_entry": {
            "name": "process_number_entry",
            "location": 54,
            "return": [
                "int",
                "float"
            ],
            "arguments": {
                "entry": []
            }
        },
        "process_boolean_entry.from_int": {
            "name": "from_int",
            "location": 13,
            "return": [
                "bool",
                "None"
            ],
            "arguments": {
                "x": []
            }
        },
        "process_boolean_entry.from_json_bool": {
            "name": "from_json_bool",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "x": []
            }
        },
        "process_boolean_entry.from_yaml_bool": {
            "name": "from_yaml_bool",
            "location": 23,
            "return": [
                "bool",
                "None"
            ],
            "arguments": {
                "x": []
            }
        },
        "process_boolean_entry.cast_col_entry": {
            "name": "cast_col_entry",
            "location": 31,
            "return": [],
            "arguments": {
                "x": []
            }
        }
    },
    "multinet-server-master/multinet/processing/types.py": {},
    "multinet-server-master/multinet/processing/__init__.py": {
        "process_row": {
            "name": "process_row",
            "location": 27,
            "return": [
                "tuple[typing.Union[list[dict[str, typing.Any]],list[tuple[typing.Union[str,str,str]]],dict[typing.Type, typing.Union[typing.Any,typing.Any]],list[str],set[str],dict[, ],str,list[typing.Union[MissingColumn,TypeConversionFailure]]]]"
            ],
            "arguments": {
                "row_index": [
                    "dict[, ]",
                    "typing.Type",
                    "tuple[]",
                    "str"
                ],
                "row": [
                    "dict[, ]",
                    "int",
                    "list[]",
                    "dict[str, typing.Any]",
                    "None"
                ],
                "columns": [
                    "str"
                ]
            }
        },
        "process_rows": {
            "name": "process_rows",
            "location": 70,
            "return": [
                "tuple[list[]]"
            ],
            "arguments": {
                "initial_rows": [
                    "list[]",
                    "list[slice]"
                ],
                "col_metadata": [
                    "int",
                    "typing.Sequence[int]",
                    "list[int]"
                ]
            }
        }
    },
    "multinet-server-master/multinet/test/test_uploaders/test_csv.py": {},
    "multinet-server-master/multinet/uploaders/csv.py": {
        "set_table_key": {
            "name": "set_table_key",
            "location": 44,
            "return": [
                "list[]"
            ],
            "arguments": {
                "rows": [
                    "list[dict[str, str]]",
                    "str",
                    "set[str]"
                ],
                "key": [
                    "int"
                ]
            }
        },
        "upload": {
            "name": "upload",
            "location": 65,
            "return": [
                "dict[typing.Text, int]"
            ],
            "arguments": {
                "workspace": [
                    "str",
                    "list[]",
                    "set[str]"
                ],
                "table": [
                    "bool",
                    "list[str]",
                    "None",
                    "list[]"
                ],
                "key": [
                    "typing.Text"
                ],
                "overwrite": [
                    "bool"
                ],
                "metadata": [
                    "None",
                    "str"
                ]
            }
        },
        "CSVReadError.flask_response": {
            "name": "flask_response",
            "location": 39,
            "return": [
                "tuple[typing.Text]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "multinet-server-master/multinet/uploaders/d3_json.py": {
        "validate_d3_json": {
            "name": "validate_d3_json",
            "location": 39,
            "return": [
                "list[typing.Union[InvalidStructure,InvalidLinkKeys,InconsistentLinkKeys,NodeDuplicates]]"
            ],
            "arguments": {
                "data": []
            }
        },
        "upload": {
            "name": "upload",
            "location": 68,
            "return": [
                "dict[typing.Text, int]"
            ],
            "arguments": {
                "workspace": [
                    "str",
                    "None",
                    "int"
                ],
                "graph": [
                    "str"
                ]
            }
        }
    },
    "multinet-server-master/multinet/uploaders/multipart_upload.py": {
        "create_upload": {
            "name": "create_upload",
            "location": 22,
            "return": [],
            "arguments": {}
        },
        "chunk_upload": {
            "name": "chunk_upload",
            "location": 30,
            "return": [
                "str",
                "int",
                "None"
            ],
            "arguments": {
                "upload_id": [
                    "str",
                    "int",
                    "None"
                ],
                "sequence": [
                    "str",
                    "int",
                    "None"
                ]
            }
        },
        "delete_upload_collection": {
            "name": "delete_upload_collection",
            "location": 46,
            "return": [],
            "arguments": {
                "upload_id": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "multinet-server-master/multinet/uploaders/nested_json.py": {
        "analyze_nested_json": {
            "name": "analyze_nested_json",
            "location": 19,
            "return": [
                "tuple[list[list[]]]"
            ],
            "arguments": {
                "raw_data": [
                    "str",
                    "list[str]"
                ],
                "int_table_name": [
                    "str",
                    "list[str]"
                ],
                "leaf_table_name": [
                    "str",
                    "list[str]"
                ]
            }
        },
        "upload": {
            "name": "upload",
            "location": 82,
            "return": [
                "dict[typing.Text, int]"
            ],
            "arguments": {
                "workspace": [
                    "str",
                    "None",
                    "int"
                ],
                "graph": [
                    "str",
                    "dict[str, typing.Any]",
                    "dict[str, int]"
                ]
            }
        },
        "analyze_nested_json.keyed": {
            "name": "keyed",
            "location": 31,
            "return": [],
            "arguments": {
                "rec": []
            }
        },
        "analyze_nested_json.helper": {
            "name": "helper",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "tree": []
            }
        }
    },
    "multinet-server-master/multinet/uploaders/newick.py": {
        "validate_newick": {
            "name": "validate_newick",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "tree": [
                    "list[str]"
                ]
            }
        },
        "upload": {
            "name": "upload",
            "location": 67,
            "return": [
                "dict[typing.Text, int]"
            ],
            "arguments": {
                "workspace": [
                    "str",
                    "list[str]",
                    "dict[str, object]",
                    "bool"
                ],
                "graph": [
                    "str"
                ]
            }
        },
        "validate_newick.read_tree": {
            "name": "read_tree",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "parent": [],
                "node": []
            }
        },
        "upload.read_tree": {
            "name": "read_tree",
            "location": 103,
            "return": [
                "None"
            ],
            "arguments": {
                "parent": [],
                "node": []
            }
        }
    },
    "multinet-server-master/multinet/uploaders/__init__.py": {},
    "multinet-server-master/multinet/validation/csv.py": {
        "is_edge_table": {
            "name": "is_edge_table",
            "location": 32,
            "return": [
                "bool"
            ],
            "arguments": {
                "rows": [
                    "tuple[]"
                ]
            }
        },
        "is_node_table": {
            "name": "is_node_table",
            "location": 38,
            "return": [
                "bool"
            ],
            "arguments": {
                "rows": [
                    "str"
                ],
                "key_field": [
                    "str",
                    "bool",
                    "dict[, ]"
                ]
            }
        },
        "validate_edge_table": {
            "name": "validate_edge_table",
            "location": 44,
            "return": [
                "list[InvalidRow]"
            ],
            "arguments": {
                "rows": [
                    "dict[str, str]",
                    "list[str]"
                ]
            }
        },
        "validate_node_table": {
            "name": "validate_node_table",
            "location": 65,
            "return": [
                "list[DuplicateKey]",
                "list[KeyFieldAlreadyExists]",
                "list[KeyFieldDoesNotExist]"
            ],
            "arguments": {
                "rows": [
                    "str",
                    "list[str]"
                ],
                "key_field": [
                    "int"
                ],
                "overwrite": [
                    "bool",
                    "str"
                ]
            }
        },
        "validate_csv": {
            "name": "validate_csv",
            "location": 89,
            "return": [
                "list[MissingBody]",
                "list[UnsupportedTable]"
            ],
            "arguments": {
                "rows": [
                    "typing.Sequence[typing.MutableMapping]",
                    "str",
                    "typing.Type"
                ],
                "key_field": [
                    "str",
                    "None"
                ],
                "overwrite": [
                    "bool",
                    "str",
                    "bytes",
                    "typing.Mapping"
                ]
            }
        }
    },
    "multinet-server-master/multinet/validation/__init__.py": {
        "ValidationFailure.dict": {
            "name": "dict",
            "location": 9,
            "return": [
                "dict[typing.Text, ]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "multinet-server-master/scripts/data.py": {
        "root_api_endpoint": {
            "name": "root_api_endpoint",
            "location": 21,
            "return": [
                "typing.Text"
            ],
            "arguments": {}
        },
        "check_server_connection": {
            "name": "check_server_connection",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "get_edge_tables": {
            "name": "get_edge_tables",
            "location": 37,
            "return": [
                "list[]"
            ],
            "arguments": {
                "workspace": [
                    "str"
                ]
            }
        },
        "get_table_rows": {
            "name": "get_table_rows",
            "location": 50,
            "return": [
                "list[]"
            ],
            "arguments": {
                "workspace": [
                    "str",
                    "None"
                ],
                "table": [
                    "str",
                    "None"
                ]
            }
        },
        "check_workspace_exists": {
            "name": "check_workspace_exists",
            "location": 63,
            "return": [
                "bool"
            ],
            "arguments": {
                "workspace": [
                    "str",
                    "dict[, ]",
                    "int",
                    "None"
                ]
            }
        },
        "create_workspace": {
            "name": "create_workspace",
            "location": 74,
            "return": [
                "bool"
            ],
            "arguments": {
                "workspace": [
                    "str",
                    "None",
                    "dict[str, typing.Any]",
                    "list[str]"
                ]
            }
        },
        "create_graph": {
            "name": "create_graph",
            "location": 88,
            "return": [
                "bool"
            ],
            "arguments": {
                "workspace": [
                    "str",
                    "float"
                ],
                "graph_name": [
                    "str",
                    "float"
                ],
                "edge_table": [
                    "str",
                    "float"
                ]
            }
        },
        "table_exists": {
            "name": "table_exists",
            "location": 101,
            "return": [
                "bool"
            ],
            "arguments": {
                "workspace": [
                    "str",
                    "bytes"
                ],
                "table": [
                    "str",
                    "bytes"
                ]
            }
        },
        "create_table": {
            "name": "create_table",
            "location": 110,
            "return": [
                "bool"
            ],
            "arguments": {
                "workspace": [
                    "str"
                ],
                "table": [
                    "str"
                ],
                "data": [
                    "str"
                ]
            }
        },
        "log": {
            "name": "log",
            "location": 125,
            "return": [
                "None"
            ],
            "arguments": {
                "text": [
                    "bool",
                    "str",
                    "None"
                ],
                "indent": [
                    "int"
                ],
                "error": [
                    "bool"
                ],
                "success": [
                    "bool"
                ]
            }
        },
        "fatal": {
            "name": "fatal",
            "location": 138,
            "return": [
                "None"
            ],
            "arguments": {
                "text": [
                    "str",
                    "int",
                    "None"
                ],
                "indent": [
                    "int"
                ]
            }
        },
        "cli": {
            "name": "cli",
            "location": 145,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "populate": {
            "name": "populate",
            "location": 152,
            "return": [
                "None"
            ],
            "arguments": {
                "address": [
                    "str",
                    "dict[str, typing.Any]",
                    "None",
                    "tuple[typing.Union[typing.Any,typing.Any]]",
                    "bool"
                ]
            }
        }
    },
    "multinet-server-master/test/conftest.py": {
        "login": {
            "name": "login",
            "location": 22,
            "return": [
                "typing.Generator[None]"
            ],
            "arguments": {
                "user": [
                    "bool",
                    "dict[, ]",
                    "list[typing.Any]",
                    "None",
                    "list[str]",
                    "str"
                ],
                "server": [
                    "None"
                ]
            }
        },
        "app": {
            "name": "app",
            "location": 39,
            "return": [
                "typing.Generator[dict[str, str]]"
            ],
            "arguments": {}
        },
        "server": {
            "name": "server",
            "location": 46,
            "return": [],
            "arguments": {
                "app": []
            }
        },
        "data_directory": {
            "name": "data_directory",
            "location": 53,
            "return": [],
            "arguments": {}
        },
        "managed_user": {
            "name": "managed_user",
            "location": 59,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {}
        },
        "generated_workspace": {
            "name": "generated_workspace",
            "location": 80,
            "return": [],
            "arguments": {
                "managed_user": [
                    "str",
                    "list[str]"
                ]
            }
        },
        "managed_workspace": {
            "name": "managed_workspace",
            "location": 87,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "generated_workspace": []
            }
        },
        "populated_workspace": {
            "name": "populated_workspace",
            "location": 98,
            "return": [
                "tuple[typing.Union[str,dict[str, typing.Any],bool,dict[str, str]]]"
            ],
            "arguments": {
                "managed_workspace": [
                    "str",
                    "dict[str, typing.Any]",
                    "bool",
                    "dict[str, str]"
                ],
                "data_directory": [
                    "str",
                    "bool",
                    "None"
                ],
                "server": [
                    "str",
                    "bool",
                    "None",
                    "typing.BinaryIO"
                ],
                "managed_user": [
                    "bool",
                    "list[str]",
                    "str"
                ]
            }
        }
    },
    "multinet-server-master/test/test_aql_table_creation.py": {
        "test_malformed_aql": {
            "name": "test_malformed_aql",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {
                "managed_workspace": [
                    "str"
                ],
                "managed_user": [
                    "typing.Callable[, ]"
                ],
                "server": []
            }
        },
        "test_mutating_aql": {
            "name": "test_mutating_aql",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "populated_workspace": [
                    "float"
                ],
                "managed_user": [
                    "typing.Callable[, ]"
                ],
                "server": []
            }
        },
        "test_existing_table": {
            "name": "test_existing_table",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "populated_workspace": [],
                "managed_user": [],
                "server": []
            }
        },
        "test_create_node_table": {
            "name": "test_create_node_table",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "populated_workspace": [
                    "bool",
                    "typing.Any",
                    "None"
                ],
                "managed_user": [
                    "typing.Callable[, ]"
                ],
                "server": []
            }
        },
        "test_create_edge_table": {
            "name": "test_create_edge_table",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "populated_workspace": [],
                "managed_user": [],
                "server": []
            }
        },
        "test_unsupported_table": {
            "name": "test_unsupported_table",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {
                "populated_workspace": [],
                "managed_user": [],
                "server": []
            }
        }
    },
    "multinet-server-master/test/test_cors.py": {
        "test_cors_matching": {
            "name": "test_cors_matching",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "app": [
                    "str",
                    "typing.Callable[, ]"
                ],
                "server": [],
                "managed_workspace": [
                    "str"
                ],
                "allowed": [
                    "str",
                    "typing.Callable[, ]"
                ],
                "origin": [
                    "str"
                ],
                "expected": [
                    "str"
                ]
            }
        }
    },
    "multinet-server-master/test/test_csv_uploader.py": {
        "read_csv": {
            "name": "read_csv",
            "location": 21,
            "return": [
                "list[]"
            ],
            "arguments": {
                "filename": [
                    "str"
                ]
            }
        },
        "test_edge_table_with_key_field": {
            "name": "test_edge_table_with_key_field",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "server": [],
                "managed_workspace": [],
                "managed_user": [
                    "list[str]",
                    "str",
                    "bool"
                ],
                "data_directory": []
            }
        },
        "test_missing_key_field": {
            "name": "test_missing_key_field",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_invalid_key_field": {
            "name": "test_invalid_key_field",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_key_field_already_exists_a": {
            "name": "test_key_field_already_exists_a",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_key_field_already_exists_b": {
            "name": "test_key_field_already_exists_b",
            "location": 97,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_duplicate_keys": {
            "name": "test_duplicate_keys",
            "location": 108,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_invalid_headers": {
            "name": "test_invalid_headers",
            "location": 117,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_decode_failed": {
            "name": "test_decode_failed",
            "location": 133,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "multinet-server-master/test/test_d3_json_uploader.py": {
        "test_validate_d3_json": {
            "name": "test_validate_d3_json",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "multinet-server-master/test/test_meta.py": {
        "test_generated_workspace": {
            "name": "test_generated_workspace",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {
                "managed_workspace": [],
                "managed_user": [
                    "typing.Callable[, ]"
                ],
                "server": []
            }
        },
        "test_user_context": {
            "name": "test_user_context",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "managed_workspace": [
                    "dict[str, typing.Any]"
                ],
                "managed_user": [],
                "server": []
            }
        },
        "test_populated_workspace": {
            "name": "test_populated_workspace",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "populated_workspace": [
                    "str"
                ],
                "managed_user": [
                    "typing.Callable[, ]"
                ],
                "server": [
                    "dict[, ]"
                ]
            }
        }
    },
    "multinet-server-master/test/test_metadata.py": {
        "test_set_valid_table_metadata": {
            "name": "test_set_valid_table_metadata",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "populated_workspace": [],
                "managed_user": [],
                "server": []
            }
        },
        "test_set_invalid_table_metadata": {
            "name": "test_set_invalid_table_metadata",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "populated_workspace": [],
                "managed_user": [
                    "typing.Callable[, ]",
                    "list[str]"
                ],
                "server": [],
                "metadata": [],
                "expected": [
                    "int",
                    "float",
                    "typing.Callable[, ]"
                ]
            }
        },
        "test_csv_upload_with_invalid_metadata_format": {
            "name": "test_csv_upload_with_invalid_metadata_format",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "managed_workspace": [
                    "str"
                ],
                "managed_user": [
                    "str",
                    "list[str]",
                    "typing.Callable[, ]",
                    "int"
                ],
                "server": [],
                "data_directory": []
            }
        },
        "test_csv_upload_with_compatible_metadata": {
            "name": "test_csv_upload_with_compatible_metadata",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "managed_workspace": [],
                "managed_user": [
                    "typing.Callable[, ]",
                    "int"
                ],
                "server": [],
                "data_directory": []
            }
        },
        "test_csv_upload_with_incompatible_metadata": {
            "name": "test_csv_upload_with_incompatible_metadata",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {
                "managed_workspace": [],
                "managed_user": [
                    "typing.Callable[, ]",
                    "int"
                ],
                "server": [],
                "data_directory": []
            }
        }
    },
    "multinet-server-master/test/test_newick_uploader.py": {
        "test_validate_newick": {
            "name": "test_validate_newick",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "multinet-server-master/test/test_permissions.py": {
        "test_require_reader": {
            "name": "test_require_reader",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {
                "server": [],
                "managed_workspace": [],
                "managed_user": []
            }
        },
        "test_logout": {
            "name": "test_logout",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "server": [],
                "managed_workspace": [],
                "managed_user": [
                    "typing.Callable[, ]"
                ]
            }
        }
    },
    "multinet-server-master/test/test_workspace.py": {
        "test_present_workspace": {
            "name": "test_present_workspace",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "managed_workspace": []
            }
        },
        "test_absent_workspace": {
            "name": "test_absent_workspace",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_workspace_create": {
            "name": "test_workspace_create",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "managed_user": [
                    "str"
                ]
            }
        },
        "test_workspace_delete": {
            "name": "test_workspace_delete",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "generated_workspace": []
            }
        },
        "test_workspace_rename": {
            "name": "test_workspace_rename",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "generated_workspace": []
            }
        }
    }
}
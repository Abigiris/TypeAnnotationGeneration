{
    "musictaxonomy-master/server.py": {
        "make_app": {
            "name": "make_app",
            "location": 12,
            "return": [
                "Application"
            ],
            "arguments": {}
        }
    },
    "musictaxonomy-master/settings.py": {},
    "musictaxonomy-master/musictaxonomy/database.py": {},
    "musictaxonomy-master/musictaxonomy/handlers.py": {
        "BaseAPIHandler.set_default_headers": {
            "name": "set_default_headers",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseAPIHandler.write_error": {
            "name": "write_error",
            "location": 13,
            "return": [],
            "arguments": {
                "self": [],
                "status_code": [
                    "int"
                ]
            }
        },
        "BaseAPIHandler.get_access_token": {
            "name": "get_access_token",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "StatusHandler.get": {
            "name": "get",
            "location": 49,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "musictaxonomy-master/musictaxonomy/__init__.py": {},
    "musictaxonomy-master/musictaxonomy/auth/handlers.py": {},
    "musictaxonomy-master/musictaxonomy/auth/models.py": {},
    "musictaxonomy-master/musictaxonomy/auth/service.py": {
        "generate_spotify_authorize_url": {
            "name": "generate_spotify_authorize_url",
            "location": 20,
            "return": [
                "str"
            ],
            "arguments": {
                "redirect_base_url": [
                    "str"
                ]
            }
        },
        "_does_spotify_user_exist": {
            "name": "_does_spotify_user_exist",
            "location": 67,
            "return": [
                "bool"
            ],
            "arguments": {
                "session": [
                    "int"
                ],
                "spotify_user": [
                    "int"
                ]
            }
        },
        "_create_user_from_spotify_user": {
            "name": "_create_user_from_spotify_user",
            "location": 79,
            "return": [
                "User"
            ],
            "arguments": {
                "session": [],
                "spotify_user": [
                    "str"
                ],
                "should_commit": [
                    "bool"
                ]
            }
        }
    },
    "musictaxonomy-master/musictaxonomy/auth/__init__.py": {},
    "musictaxonomy-master/musictaxonomy/graph/constants.py": {},
    "musictaxonomy-master/musictaxonomy/graph/handlers.py": {},
    "musictaxonomy-master/musictaxonomy/graph/models.py": {
        "TaxonomyGraph.__init__": {
            "name": "__init__",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "user_display_name": [
                    "str",
                    "bool",
                    "dict[str, str]"
                ]
            }
        },
        "TaxonomyGraph.get_root_node": {
            "name": "get_root_node",
            "location": 40,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TaxonomyGraph.get_nodes": {
            "name": "get_nodes",
            "location": 43,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TaxonomyGraph.get_edges": {
            "name": "get_edges",
            "location": 46,
            "return": [
                "list[tuple[]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TaxonomyGraph.add_genre_node": {
            "name": "add_genre_node",
            "location": 53,
            "return": [
                "GenreNode"
            ],
            "arguments": {
                "self": [],
                "id": [
                    "str",
                    "int"
                ]
            }
        },
        "TaxonomyGraph.add_subgenre_node": {
            "name": "add_subgenre_node",
            "location": 62,
            "return": [
                "SubgenreNode"
            ],
            "arguments": {
                "self": [],
                "id": [
                    "str"
                ],
                "name": [
                    "str",
                    "None"
                ]
            }
        },
        "TaxonomyGraph.add_artist_node": {
            "name": "add_artist_node",
            "location": 71,
            "return": [
                "ArtistNode"
            ],
            "arguments": {
                "self": [],
                "id": [
                    "str"
                ],
                "name": [
                    "str",
                    "None"
                ]
            }
        },
        "TaxonomyGraph.get_node": {
            "name": "get_node",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "id": [
                    "int",
                    "str"
                ]
            }
        },
        "TaxonomyGraph.add_edge": {
            "name": "add_edge",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "first_node": [],
                "second_node": [
                    "None",
                    "list[tuple[typing.Union[int,int]]]",
                    "list[str]"
                ]
            }
        },
        "TaxonomyGraph.add_genre_to_subgenre_edge": {
            "name": "add_genre_to_subgenre_edge",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "genre_node": [
                    "int",
                    "typing.Iterable[typing.Any]",
                    "str",
                    "None"
                ],
                "subgenre_node": [
                    "int",
                    "typing.Iterable[typing.Any]",
                    "str",
                    "None"
                ]
            }
        },
        "TaxonomyGraph.add_subgenre_to_artist_edge": {
            "name": "add_subgenre_to_artist_edge",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "subgenre_node": [
                    "str",
                    "None"
                ],
                "artist_node": [
                    "str",
                    "None"
                ]
            }
        },
        "TaxonomyGraph.render_as_json": {
            "name": "render_as_json",
            "location": 94,
            "return": [
                "dict[typing.Text, list[]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TaxonomyGraph._render_edge_as_json": {
            "name": "_render_edge_as_json",
            "location": 100,
            "return": [
                "dict[typing.Text, ]"
            ],
            "arguments": {
                "self": [],
                "edge": [
                    "str",
                    "int"
                ]
            }
        },
        "TaxonomyGraph.__contains__": {
            "name": "__contains__",
            "location": 110,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "node_id": [
                    "int",
                    "str"
                ]
            }
        },
        "Node.__init__": {
            "name": "__init__",
            "location": 118,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "id": [
                    "str",
                    "int",
                    "typing.Sequence[str]"
                ]
            }
        },
        "Node.add_neighbor": {
            "name": "add_neighbor",
            "location": 122,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "other_node": [
                    "typing.Callable[, ]",
                    "dict[str, typing.Any]",
                    "str",
                    "list[]"
                ]
            }
        },
        "Node.get_neighbors": {
            "name": "get_neighbors",
            "location": 125,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Node.render_as_json": {
            "name": "render_as_json",
            "location": 128,
            "return": [
                "dict[typing.Text, ]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Node.__str__": {
            "name": "__str__",
            "location": 131,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "RootNode.__init__": {
            "name": "__init__",
            "location": 141,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "id": [
                    "int",
                    "str",
                    "None"
                ],
                "name": [
                    "str",
                    "list[str]"
                ]
            }
        },
        "RootNode.number_of_artists_in_graph": {
            "name": "number_of_artists_in_graph",
            "location": 146,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "RootNode.render_as_json": {
            "name": "render_as_json",
            "location": 149,
            "return": [
                "dict[typing.Text, typing.Union[typing.Text,float]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "GenreNode.__init__": {
            "name": "__init__",
            "location": 166,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "id": [
                    "int",
                    "typing.Type",
                    "str",
                    "None"
                ]
            }
        },
        "GenreNode.number_of_artists_in_genre": {
            "name": "number_of_artists_in_genre",
            "location": 172,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "GenreNode.render_as_json": {
            "name": "render_as_json",
            "location": 181,
            "return": [
                "dict[typing.Text, int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SubgenreNode.__init__": {
            "name": "__init__",
            "location": 197,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "id": [
                    "int",
                    "str",
                    "None"
                ],
                "name": [
                    "str",
                    "list[str]"
                ]
            }
        },
        "SubgenreNode.number_of_artists_in_subgenre": {
            "name": "number_of_artists_in_subgenre",
            "location": 203,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "SubgenreNode.set_main_genre": {
            "name": "set_main_genre",
            "location": 206,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "main_genre": [
                    "str",
                    "bool",
                    "dict[, ]",
                    "None"
                ]
            }
        },
        "SubgenreNode.render_as_json": {
            "name": "render_as_json",
            "location": 209,
            "return": [
                "dict[typing.Text, int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ArtistNode.__init__": {
            "name": "__init__",
            "location": 225,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "id": [
                    "int",
                    "str",
                    "None"
                ],
                "name": [
                    "str",
                    "list[str]"
                ]
            }
        },
        "ArtistNode.set_main_genre": {
            "name": "set_main_genre",
            "location": 230,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "main_genre": [
                    "str",
                    "bool",
                    "dict[, ]",
                    "None"
                ]
            }
        },
        "ArtistNode.render_as_json": {
            "name": "render_as_json",
            "location": 233,
            "return": [
                "dict[typing.Text, int]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "musictaxonomy-master/musictaxonomy/graph/service.py": {
        "build_taxonomy_graph": {
            "name": "build_taxonomy_graph",
            "location": 9,
            "return": [
                "TaxonomyGraph"
            ],
            "arguments": {
                "session": [],
                "spotify_user": [
                    "str",
                    "dict[, ]",
                    "bool"
                ],
                "spotify_artists": [
                    "str"
                ]
            }
        },
        "_get_all_main_genres": {
            "name": "_get_all_main_genres",
            "location": 46,
            "return": [],
            "arguments": {
                "session": []
            }
        },
        "_get_spotify_genre_popularity_map": {
            "name": "_get_spotify_genre_popularity_map",
            "location": 55,
            "return": [
                "typing.Type",
                "str",
                "list[]",
                "int",
                "dict[str, str]",
                "list[str]"
            ],
            "arguments": {
                "spotify_artists": [
                    "str",
                    "dict[, ]"
                ]
            }
        },
        "_filter_out_duplicate_spotify_artists": {
            "name": "_filter_out_duplicate_spotify_artists",
            "location": 65,
            "return": [
                "list[list[app.models.Question]]"
            ],
            "arguments": {
                "spotify_artists": [
                    "list[app.models.Question]"
                ]
            }
        },
        "_filter_out_spotify_artists_without_genres": {
            "name": "_filter_out_spotify_artists_without_genres",
            "location": 77,
            "return": [
                "list[typing.Union['cirq.Qid',typing.Mapping]]"
            ],
            "arguments": {
                "spotify_artists": [
                    "tuple['cirq.Qid']",
                    "list[typing.Mapping]"
                ]
            }
        },
        "_add_spotify_artist_to_taxonomy_graph": {
            "name": "_add_spotify_artist_to_taxonomy_graph",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {
                "session": [
                    "bool",
                    "dict[, ]"
                ],
                "spotify_artist": [
                    "str",
                    "int"
                ],
                "taxonomy_graph": [],
                "main_genres": [
                    "str",
                    "int"
                ],
                "spotify_genre_popularity_map": [
                    "bool",
                    "str",
                    "typing.Iterable[str]"
                ]
            }
        },
        "_choose_best_main_genre_name_for_artist": {
            "name": "_choose_best_main_genre_name_for_artist",
            "location": 113,
            "return": [
                "str",
                "list[str]",
                "None",
                "set[]"
            ],
            "arguments": {
                "spotify_artist": [
                    "str",
                    "list[]",
                    "bytes"
                ],
                "main_genres": [
                    "str",
                    "int",
                    "dict[, ]"
                ]
            }
        },
        "_exact_match": {
            "name": "_exact_match",
            "location": 127,
            "return": [
                "None"
            ],
            "arguments": {
                "spotify_genres": [
                    "str"
                ],
                "main_genres": [
                    "str"
                ]
            }
        },
        "_best_substring_match": {
            "name": "_best_substring_match",
            "location": 136,
            "return": [
                "int",
                "None"
            ],
            "arguments": {
                "spotify_genres": [
                    "list[str]",
                    "str"
                ],
                "main_genres": [
                    "list[str]",
                    "str"
                ]
            }
        },
        "_subgenre_alias_match": {
            "name": "_subgenre_alias_match",
            "location": 154,
            "return": [
                "None"
            ],
            "arguments": {
                "spotify_genres": [
                    "str",
                    "list[\"Block\"]",
                    "dict[, ]"
                ],
                "_": [
                    "int",
                    "str",
                    "list[\"Block\"]",
                    "dict[, ]"
                ]
            }
        },
        "_choose_best_subgenre_name_for_artist": {
            "name": "_choose_best_subgenre_name_for_artist",
            "location": 166,
            "return": [],
            "arguments": {
                "spotify_artist": [
                    "str",
                    "dict[, ]"
                ],
                "main_genre_name": [
                    "str",
                    "list[str]",
                    "bool"
                ],
                "main_genres": [
                    "str",
                    "dict[, ]"
                ],
                "spotify_genre_popularity_map": [
                    "str",
                    "list[str]",
                    "bool"
                ]
            }
        },
        "_filter_out_main_genres": {
            "name": "_filter_out_main_genres",
            "location": 177,
            "return": [
                "list[str]"
            ],
            "arguments": {
                "spotify_arist_genres": [
                    "dict[str, typing.Any]",
                    "str"
                ],
                "main_genres": [
                    "str",
                    "dict[, ]",
                    "bytes"
                ]
            }
        },
        "_choose_subgenre_name_from_spotify_genres": {
            "name": "_choose_subgenre_name_from_spotify_genres",
            "location": 184,
            "return": [
                "None"
            ],
            "arguments": {
                "main_genre": [
                    "bool",
                    "typing.Iterable[str]"
                ],
                "spotify_genres": [],
                "spotify_genre_popularity_map": [
                    "int",
                    "dict[str, typing.Any]",
                    "float",
                    "str"
                ]
            }
        },
        "_get_or_create_main_genre_node": {
            "name": "_get_or_create_main_genre_node",
            "location": 197,
            "return": [],
            "arguments": {
                "main_genre_name": [
                    "str",
                    "int"
                ],
                "taxonomy_graph": []
            }
        },
        "_get_or_create_subgenre_node": {
            "name": "_get_or_create_subgenre_node",
            "location": 211,
            "return": [],
            "arguments": {
                "subgenre_name": [
                    "str"
                ],
                "taxonomy_graph": [],
                "main_genre_node": [
                    "str",
                    "bool",
                    "None",
                    "typing.Iterable[tuple[typing.Union[str,dict[, ]]]]"
                ]
            }
        }
    },
    "musictaxonomy-master/musictaxonomy/graph/__init__.py": {},
    "musictaxonomy-master/musictaxonomy/spotify/client.py": {},
    "musictaxonomy-master/musictaxonomy/spotify/constants.py": {},
    "musictaxonomy-master/musictaxonomy/spotify/models.py": {
        "SpotifyUser.__init__": {
            "name": "__init__",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "id": [
                    "str",
                    "int",
                    "None"
                ],
                "display_name": [
                    "str",
                    "None",
                    "bool"
                ]
            }
        },
        "SpotifyUser.__str__": {
            "name": "__str__",
            "location": 9,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "SpotifyArtist.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "id": [
                    "str",
                    "list[str]"
                ],
                "name": [
                    "str",
                    "list[str]"
                ],
                "genres": [
                    "str",
                    "None",
                    "bool"
                ]
            }
        },
        "SpotifyArtist.__str__": {
            "name": "__str__",
            "location": 22,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "musictaxonomy-master/musictaxonomy/spotify/service.py": {
        "_parse_spotify_artists_from_top_artists_response": {
            "name": "_parse_spotify_artists_from_top_artists_response",
            "location": 35,
            "return": [
                "list[]"
            ],
            "arguments": {
                "response": [
                    "list[dict[, ]]",
                    "list[dict[str, typing.Any]]"
                ]
            }
        },
        "_parse_spotify_artist_from_artist_document": {
            "name": "_parse_spotify_artist_from_artist_document",
            "location": 45,
            "return": [
                "SpotifyArtist"
            ],
            "arguments": {
                "artist_document": []
            }
        }
    },
    "musictaxonomy-master/musictaxonomy/spotify/__init__.py": {},
    "musictaxonomy-master/scripts/initialize_database.py": {
        "main": {
            "name": "main",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "musictaxonomy-master/scripts/__init__.py": {},
    "musictaxonomy-master/test/test_handlers.py": {
        "StatusHandlerTest.get_app": {
            "name": "get_app",
            "location": 11,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "StatusHandlerTest.test_get": {
            "name": "test_get",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IndexHandlerTest.get_app": {
            "name": "get_app",
            "location": 26,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "IndexHandlerTest.test_get": {
            "name": "test_get",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_": [
                    "str",
                    "bool"
                ]
            }
        },
        "IndexHandlerTest.test_get_without_access_token": {
            "name": "test_get_without_access_token",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "musictaxonomy-master/test/__init__.py": {},
    "musictaxonomy-master/test/auth/test_handlers.py": {
        "LoginHandlerTest.get_app": {
            "name": "get_app",
            "location": 13,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LoginHandlerTest.test_get_without_access_token": {
            "name": "test_get_without_access_token",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LoginHandlerTest.test_get_with_valid_access_token": {
            "name": "test_get_with_valid_access_token",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_": [
                    "bool"
                ]
            }
        },
        "LoginHandlerTest.test_get_with_invalid_access_token": {
            "name": "test_get_with_invalid_access_token",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_": [
                    "str"
                ]
            }
        },
        "OauthCallbackHandlerTest.setUp": {
            "name": "setUp",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "OauthCallbackHandlerTest.tearDown": {
            "name": "tearDown",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "OauthCallbackHandlerTest.get_app": {
            "name": "get_app",
            "location": 96,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "OauthCallbackHandlerTest.test_get_with_new_user": {
            "name": "test_get_with_new_user",
            "location": 103,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "OauthCallbackHandlerTest.test_get_with_existing_user": {
            "name": "test_get_with_existing_user",
            "location": 127,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "musictaxonomy-master/test/auth/__init__.py": {},
    "musictaxonomy-master/test/graph/test_handlers.py": {
        "TaxonomyGraphHandlerTest.get_app": {
            "name": "get_app",
            "location": 11,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TaxonomyGraphHandlerTest.test_get": {
            "name": "test_get",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_": [
                    "str",
                    "bool"
                ]
            }
        },
        "TaxonomyGraphHandlerTest.test_get_without_access_token": {
            "name": "test_get_without_access_token",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "musictaxonomy-master/test/graph/test_models.py": {
        "TaxonomyGraphTest.test_add_genre_node_with_duplicate_id": {
            "name": "test_add_genre_node_with_duplicate_id",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TaxonomyGraphTest.test_add_subgenre_node_with_duplicate_id": {
            "name": "test_add_subgenre_node_with_duplicate_id",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TaxonomyGraphTest.test_add_artist_node_with_duplicate_id": {
            "name": "test_add_artist_node_with_duplicate_id",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "NodeTest.test_conversion_to_string": {
            "name": "test_conversion_to_string",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "NodeTest.test_render_as_json": {
            "name": "test_render_as_json",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "musictaxonomy-master/test/graph/test_service.py": {
        "BuildTaxonomyGraphTest.test_build_taxonomy_graph_with_unknown_main_genre": {
            "name": "test_build_taxonomy_graph_with_unknown_main_genre",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "musictaxonomy-master/test/graph/__init__.py": {},
    "musictaxonomy-master/test/responses/__init__.py": {},
    "musictaxonomy-master/test/spotify/test_models.py": {
        "SpotifyArtistTest.test_conversion_to_string": {
            "name": "test_conversion_to_string",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SpotifyUserTest.test_conversion_to_string": {
            "name": "test_conversion_to_string",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "musictaxonomy-master/test/spotify/__init__.py": {}
}
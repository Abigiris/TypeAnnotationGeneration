{
    "mypy_playground-master/examples/classes_and_some_beers.py": {
        "drink": {
            "name": "drink",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "b": []
            }
        },
        "enjoy": {
            "name": "enjoy",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "b": []
            }
        }
    },
    "mypy_playground-master/examples/classes_generics.py": {
        "Stack.pop": {
            "name": "pop",
            "location": 25,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Stack.__init__": {
            "name": "__init__",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Stack.push": {
            "name": "push",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "item": []
            }
        },
        "Stack.empty": {
            "name": "empty",
            "location": 35,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "mypy_playground-master/examples/classes_structural_subtyping_and_some_more_beers.py": {
        "print_song": {
            "name": "print_song",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "items": [
                    "dict[str, typing.Any]",
                    "list[str]"
                ]
            }
        },
        "print_time_to_sing": {
            "name": "print_time_to_sing",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "items": []
            }
        },
        "BeerCrate.__init__": {
            "name": "__init__",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "nb_bottles": [
                    "int",
                    "float"
                ]
            }
        },
        "BeerCrate.__iter__": {
            "name": "__iter__",
            "location": 31,
            "return": [
                "typing.Generator[typing.Text]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BeerCrate.__len__": {
            "name": "__len__",
            "location": 39,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "mypy_playground-master/examples/collections_covariance_buit_ins.py": {
        "len_list": {
            "name": "len_list",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "ll": []
            }
        },
        "len_list_int": {
            "name": "len_list_int",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "ll": []
            }
        },
        "len_list_float": {
            "name": "len_list_float",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "ll": []
            }
        },
        "len_list_sequence_float": {
            "name": "len_list_sequence_float",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "ll": []
            }
        }
    },
    "mypy_playground-master/examples/collections_covariance_classes.py": {
        "my_eclectic_function": {
            "name": "my_eclectic_function",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "groups": [
                    "str"
                ],
                "cars": [
                    "str"
                ]
            }
        },
        "MusicBand.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "dict[str, typing.Any]",
                    "list[str]",
                    "dict[, ]"
                ]
            }
        },
        "MusicBand.__str__": {
            "name": "__str__",
            "location": 12,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Orchestra.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "None"
                ]
            }
        },
        "CarModel.__str__": {
            "name": "__str__",
            "location": 22,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "CarModel.__init__": {
            "name": "__init__",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "maker": [
                    "bool",
                    "str",
                    "None"
                ],
                "name": [
                    "list[str]",
                    "str",
                    "dict[, ]"
                ],
                "year": [
                    "bool",
                    "str",
                    "None"
                ]
            }
        }
    },
    "mypy_playground-master/examples/generators.py": {
        "iter_primes": {
            "name": "iter_primes",
            "location": 15,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {}
        }
    },
    "mypy_playground-master/examples/ignoring_stuff.py": {},
    "mypy_playground-master/examples/linting_1.py": {
        "i_see_things": {
            "name": "i_see_things",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "obj1": [
                    "int",
                    "typing.IO",
                    "typing.Callable[[], None]",
                    "str"
                ],
                "obj2": [
                    "int",
                    "typing.IO",
                    "typing.Callable[[], None]",
                    "str"
                ]
            }
        },
        "i_keep_forgetting": {
            "name": "i_keep_forgetting",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "is_it_tgif": {
            "name": "is_it_tgif",
            "location": 46,
            "return": [
                "bool"
            ],
            "arguments": {
                "day": [
                    "float",
                    "typing.Sequence[typing.Any]"
                ]
            }
        },
        "day_score": {
            "name": "day_score",
            "location": 50,
            "return": [
                "float"
            ],
            "arguments": {
                "day": [
                    "int",
                    "None",
                    "float",
                    "tuple[typing.Union[float,float]]"
                ]
            }
        }
    },
    "mypy_playground-master/examples/linting_2.py": {
        "printer": {
            "name": "printer",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "mypy_playground-master/examples/none.py": {
        "get_citation": {
            "name": "get_citation",
            "location": 14,
            "return": [
                "Citation",
                "None"
            ],
            "arguments": {
                "should": []
            }
        },
        "bring_it_on": {
            "name": "bring_it_on",
            "location": 53,
            "return": [
                "Something",
                "None"
            ],
            "arguments": {
                "i_should": []
            }
        },
        "Citation.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "text": []
            }
        }
    },
    "mypy_playground-master/examples/protocols.py": {
        "SupportsApply.apply": {
            "name": "apply",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "img": [
                    "int",
                    "str",
                    "typing.Iterable['Context']"
                ]
            }
        },
        "MyClass.apply": {
            "name": "apply",
            "location": 16,
            "return": [
                "dict[, ]"
            ],
            "arguments": {
                "self": [],
                "img": [
                    "int",
                    "str",
                    "typing.Iterable['Context']"
                ]
            }
        },
        "MyClassWithWrongApplySignature.apply": {
            "name": "apply",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "mypy_playground-master/examples/reveal_type.py": {
        "f": {
            "name": "f",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "obj1": [
                    "int",
                    "list[str]",
                    "str"
                ],
                "obj2": [
                    "int",
                    "list[str]",
                    "str"
                ]
            }
        }
    },
    "mypy_playground-master/examples/type_inference.py": {
        "name": {
            "name": "name",
            "location": 7,
            "return": [
                "typing.Text"
            ],
            "arguments": {}
        }
    },
    "mypy_playground-master/ipython_magic_script/checktypes.py": {
        "checktypes": {
            "name": "checktypes",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "line": [
                    "str"
                ],
                "cell": [
                    "str"
                ]
            }
        }
    }
}
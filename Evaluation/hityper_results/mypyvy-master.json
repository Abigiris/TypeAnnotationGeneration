{
    "mypyvy-master/examples/paxos/abstract_cex/post_process.py": {
        "parse_trace": {
            "name": "parse_trace",
            "location": 36,
            "return": [],
            "arguments": {
                "itr": []
            }
        },
        "filter_negative_facts": {
            "name": "filter_negative_facts",
            "location": 63,
            "return": [],
            "arguments": {
                "state": []
            }
        },
        "remove_equalities": {
            "name": "remove_equalities",
            "location": 66,
            "return": [],
            "arguments": {
                "state": []
            }
        },
        "substitute_constants": {
            "name": "substitute_constants",
            "location": 82,
            "return": [],
            "arguments": {
                "state": []
            }
        },
        "find_relational_facts": {
            "name": "find_relational_facts",
            "location": 89,
            "return": [],
            "arguments": {
                "rel": [],
                "conjuncts": []
            }
        },
        "rename": {
            "name": "rename",
            "location": 103,
            "return": [],
            "arguments": {
                "s": [],
                "renaming": []
            }
        },
        "rename_state": {
            "name": "rename_state",
            "location": 117,
            "return": [],
            "arguments": {
                "state": [],
                "renaming": []
            }
        },
        "filter_total_order_facts": {
            "name": "filter_total_order_facts",
            "location": 121,
            "return": [],
            "arguments": {
                "rel": [],
                "state": []
            }
        },
        "filter_trace": {
            "name": "filter_trace",
            "location": 161,
            "return": [],
            "arguments": {
                "trace": []
            }
        },
        "pretty_state": {
            "name": "pretty_state",
            "location": 167,
            "return": [],
            "arguments": {
                "state": [],
                "old_news": []
            }
        },
        "pretty_trace": {
            "name": "pretty_trace",
            "location": 178,
            "return": [],
            "arguments": {
                "trace": []
            }
        },
        "main": {
            "name": "main",
            "location": 194,
            "return": [],
            "arguments": {}
        },
        "State.sort_for_elt": {
            "name": "sort_for_elt",
            "location": 11,
            "return": [],
            "arguments": {
                "self": [],
                "elt": []
            }
        },
        "State.from_lines": {
            "name": "from_lines",
            "location": 22,
            "return": [],
            "arguments": {
                "lines": []
            }
        },
        "Trace.__post_init__": {
            "name": "__post_init__",
            "location": 32,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "State.sort_for_elt.base_name": {
            "name": "base_name",
            "location": 12,
            "return": [],
            "arguments": {
                "s": []
            }
        }
    },
    "mypyvy-master/script/nightly.py": {
        "parse_args": {
            "name": "parse_args",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "format_datetime": {
            "name": "format_datetime",
            "location": 77,
            "return": [],
            "arguments": {
                "d": []
            }
        },
        "get_mypyvy_sha": {
            "name": "get_mypyvy_sha",
            "location": 170,
            "return": [],
            "arguments": {}
        },
        "analyze_results": {
            "name": "analyze_results",
            "location": 184,
            "return": [
                "None"
            ],
            "arguments": {
                "output_dir": [
                    "bool",
                    "bytes",
                    "str"
                ]
            }
        },
        "publish_results": {
            "name": "publish_results",
            "location": 246,
            "return": [
                "None"
            ],
            "arguments": {
                "output_dir": [
                    "str"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 251,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "JobRunner.__init__": {
            "name": "__init__",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "output_dir_name": [
                    "None",
                    "str",
                    "bool"
                ]
            }
        },
        "JobRunner.collect_jobs": {
            "name": "collect_jobs",
            "location": 105,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "JobRunner.log": {
            "name": "log",
            "location": 123,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "msg": [
                    "bytes",
                    "dict[, ]",
                    "str"
                ],
                "logfile": [
                    "bytes",
                    "dict[, ]",
                    "str"
                ]
            }
        },
        "JobRunner.log_global": {
            "name": "log_global",
            "location": 126,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "msg": [
                    "str",
                    "bytes",
                    "list[str]"
                ]
            }
        },
        "JobRunner.run_job": {
            "name": "run_job",
            "location": 129,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "job": [
                    "int",
                    "list[str]",
                    "typing.Sequence[str]"
                ]
            }
        },
        "JobRunner.run_jobs": {
            "name": "run_jobs",
            "location": 152,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Result.__str__": {
            "name": "__str__",
            "location": 181,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "mypyvy-master/src/logic.py": {
        "check_solver": {
            "name": "check_solver",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "s": [],
                "num_states": [
                    "int",
                    "None",
                    "float"
                ],
                "minimize": [
                    "None",
                    "int",
                    "float"
                ]
            }
        },
        "check_unsat": {
            "name": "check_unsat",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "errmsgs": [
                    "list[tuple[typing.Union[typing.Any,str]]]",
                    "dict[str, typing.Any]",
                    "list[str]"
                ],
                "s": [
                    "int",
                    "None",
                    "list[float]",
                    "list[int]"
                ],
                "num_states": [
                    "int",
                    "None",
                    "list[float]",
                    "list[int]"
                ],
                "minimize": [
                    "None",
                    "int",
                    "list[float]",
                    "list[int]"
                ],
                "verbose": [
                    "bool"
                ]
            }
        },
        "check_init": {
            "name": "check_init",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {
                "s": [],
                "safety_only": [
                    "bool"
                ],
                "minimize": [
                    "None",
                    "bool",
                    "str",
                    "list[str]"
                ],
                "verbose": [
                    "bool"
                ]
            }
        },
        "check_transitions": {
            "name": "check_transitions",
            "location": 132,
            "return": [
                "None"
            ],
            "arguments": {
                "s": [],
                "minimize": [
                    "None",
                    "bool",
                    "str",
                    "list[str]",
                    "typing.Callable[str, None]"
                ],
                "verbose": [
                    "bool"
                ]
            }
        },
        "check_implication": {
            "name": "check_implication",
            "location": 205,
            "return": [
                "None"
            ],
            "arguments": {
                "s": [],
                "hyps": [
                    "bytes",
                    "bytearray",
                    "str"
                ],
                "concs": [
                    "bytes",
                    "bytearray",
                    "str"
                ],
                "minimize": [
                    "None",
                    "bool",
                    "str"
                ]
            }
        },
        "check_two_state_implication_all_transitions": {
            "name": "check_two_state_implication_all_transitions",
            "location": 223,
            "return": [
                "tuple[]",
                "None"
            ],
            "arguments": {
                "s": [],
                "old_hyps": [
                    "str"
                ],
                "new_conc": [
                    "dict[, ]"
                ],
                "minimize": [
                    "None",
                    "bool",
                    "str",
                    "typing.Callable[, ]"
                ]
            }
        },
        "get_transition_indicator": {
            "name": "get_transition_indicator",
            "location": 244,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "uid": [
                    "str"
                ],
                "name": [
                    "str"
                ]
            }
        },
        "assert_any_transition": {
            "name": "assert_any_transition",
            "location": 247,
            "return": [
                "None"
            ],
            "arguments": {
                "s": [
                    "list[list[int]]",
                    "int"
                ],
                "t": [
                    "list[list[int]]",
                    "int"
                ],
                "state_index": [
                    "str",
                    "typing.Match"
                ],
                "allow_stutter": [
                    "bool"
                ]
            }
        },
        "check_theorem": {
            "name": "check_theorem",
            "location": 267,
            "return": [],
            "arguments": {
                "th": [
                    "list[]",
                    "int",
                    "tuple[typing.Union[int,int]]"
                ],
                "s": [],
                "errmsgs": [
                    "list[]"
                ],
                "verbose": [
                    "bool"
                ]
            }
        },
        "check_bmc": {
            "name": "check_bmc",
            "location": 285,
            "return": [
                "None"
            ],
            "arguments": {
                "s": [],
                "safety": [],
                "depth": [
                    "int"
                ],
                "preconds": [
                    "None",
                    "str",
                    "bytes",
                    "typing.AnyStr",
                    "typing.Type"
                ],
                "minimize": [
                    "None",
                    "str",
                    "dict[str, object]",
                    "int"
                ]
            }
        },
        "reorder": {
            "name": "reorder",
            "location": 630,
            "return": [
                "str",
                "list[list[typing.Any]]",
                "list[]"
            ],
            "arguments": {
                "lst": [
                    "str",
                    "list[list[typing.Any]]"
                ],
                "order": [
                    "int",
                    "None",
                    "list[int]",
                    "list[float]",
                    "set[int]",
                    "list[str]"
                ]
            }
        },
        "parse_and_typecheck_expr": {
            "name": "parse_and_typecheck_expr",
            "location": 642,
            "return": [],
            "arguments": {
                "input": [
                    "bool",
                    "str",
                    "None"
                ],
                "n_states": [
                    "int"
                ],
                "close_free_vars": [
                    "bool"
                ]
            }
        },
        "Diagram.__init__": {
            "name": "__init__",
            "location": 329,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "struct": [
                    "str",
                    "typing.IO",
                    "int"
                ]
            }
        },
        "Diagram._read_first_order_structure": {
            "name": "_read_first_order_structure",
            "location": 348,
            "return": [
                "tuple[typing.Union[list[],dict[, list[]]]]"
            ],
            "arguments": {
                "struct": [
                    "str",
                    "dict[, ]"
                ]
            }
        },
        "Diagram.ineq_conjuncts": {
            "name": "ineq_conjuncts",
            "location": 395,
            "return": [
                "typing.Generator[tuple[]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Diagram.rel_conjuncts": {
            "name": "rel_conjuncts",
            "location": 403,
            "return": [
                "typing.Generator[tuple[]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Diagram.func_conjuncts": {
            "name": "func_conjuncts",
            "location": 411,
            "return": [
                "typing.Generator[tuple[]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Diagram.const_conjuncts": {
            "name": "const_conjuncts",
            "location": 419,
            "return": [
                "typing.Generator[tuple[int]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Diagram.const_subst": {
            "name": "const_subst",
            "location": 425,
            "return": [
                "dict[, ]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Diagram.conjuncts": {
            "name": "conjuncts",
            "location": 433,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Diagram.simplify_consts": {
            "name": "simplify_consts",
            "location": 443,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Diagram.__str__": {
            "name": "__str__",
            "location": 472,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "Diagram._typecheck": {
            "name": "_typecheck",
            "location": 478,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "scope": []
            }
        },
        "Diagram.get_vs": {
            "name": "get_vs",
            "location": 486,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Diagram.to_z3": {
            "name": "to_z3",
            "location": 489,
            "return": [],
            "arguments": {
                "self": [],
                "t": [
                    "list[]",
                    "str",
                    "typing.Hashable",
                    "bool"
                ],
                "new": [
                    "bool"
                ]
            }
        },
        "Diagram.to_ast": {
            "name": "to_ast",
            "location": 508,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Diagram.minimize_from_core": {
            "name": "minimize_from_core",
            "location": 514,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "core": [
                    "typing.Iterable[int]",
                    "int",
                    "Exception"
                ]
            }
        },
        "Diagram.remove_clause": {
            "name": "remove_clause",
            "location": 550,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "d": [
                    "list[str]",
                    "int",
                    "None",
                    "float"
                ],
                "i": [
                    "None",
                    "dict[str, list[float]]"
                ]
            }
        },
        "Diagram.prune_unused_vars": {
            "name": "prune_unused_vars",
            "location": 564,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Diagram.without": {
            "name": "without",
            "location": 569,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "self": [],
                "d": [
                    "typing.Any",
                    "None"
                ],
                "j": [
                    "None",
                    "int",
                    "list[int]",
                    "typing.Callable[str, int]",
                    "typing.Mapping"
                ]
            }
        },
        "Diagram.generalize": {
            "name": "generalize",
            "location": 588,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "s": [
                    "typing.AnyStr",
                    "bytes",
                    "bytearray",
                    "typing.Iterable[T]",
                    "bool",
                    "str"
                ],
                "constraint": [
                    "str",
                    "int",
                    "float",
                    "bytes"
                ],
                "order": [
                    "None",
                    "int",
                    "str"
                ]
            }
        },
        "Diagram.simplify_consts.apply_subst1": {
            "name": "apply_subst1",
            "location": 450,
            "return": [],
            "arguments": {
                "e": []
            }
        },
        "Diagram.simplify_consts.apply_subst": {
            "name": "apply_subst",
            "location": 453,
            "return": [
                "list[]"
            ],
            "arguments": {
                "l": []
            }
        },
        "Diagram.simplify_consts.is_trivial_eq": {
            "name": "is_trivial_eq",
            "location": 456,
            "return": [
                "bool"
            ],
            "arguments": {
                "eq": []
            }
        }
    },
    "mypyvy-master/src/mypyvy.py": {
        "get_safety": {
            "name": "get_safety",
            "location": 31,
            "return": [],
            "arguments": {}
        },
        "do_updr": {
            "name": "do_updr",
            "location": 60,
            "return": [],
            "arguments": {
                "s": []
            }
        },
        "debug_tokens": {
            "name": "debug_tokens",
            "location": 79,
            "return": [],
            "arguments": {
                "filename": []
            }
        },
        "json_counterexample": {
            "name": "json_counterexample",
            "location": 92,
            "return": [],
            "arguments": {
                "res": []
            }
        },
        "json_verify_result": {
            "name": "json_verify_result",
            "location": 169,
            "return": [],
            "arguments": {
                "res": []
            }
        },
        "verify": {
            "name": "verify",
            "location": 181,
            "return": [],
            "arguments": {
                "s": []
            }
        },
        "bmc": {
            "name": "bmc",
            "location": 194,
            "return": [],
            "arguments": {
                "s": []
            }
        },
        "theorem": {
            "name": "theorem",
            "location": 220,
            "return": [],
            "arguments": {
                "s": []
            }
        },
        "nop": {
            "name": "nop",
            "location": 237,
            "return": [],
            "arguments": {
                "s": []
            }
        },
        "ipython": {
            "name": "ipython",
            "location": 240,
            "return": [],
            "arguments": {
                "s": []
            }
        },
        "load_relaxed_trace_from_updr_cex": {
            "name": "load_relaxed_trace_from_updr_cex",
            "location": 246,
            "return": [],
            "arguments": {
                "prog": [],
                "s": []
            }
        },
        "sandbox": {
            "name": "sandbox",
            "location": 303,
            "return": [],
            "arguments": {
                "s": []
            }
        },
        "trace": {
            "name": "trace",
            "location": 398,
            "return": [],
            "arguments": {
                "s": []
            }
        },
        "check_one_bounded_width_invariant": {
            "name": "check_one_bounded_width_invariant",
            "location": 420,
            "return": [],
            "arguments": {
                "s": []
            }
        },
        "relax": {
            "name": "relax",
            "location": 459,
            "return": [],
            "arguments": {
                "s": []
            }
        },
        "parse_args": {
            "name": "parse_args",
            "location": 462,
            "return": [],
            "arguments": {
                "args": []
            }
        },
        "parse_program": {
            "name": "parse_program",
            "location": 632,
            "return": [],
            "arguments": {
                "input": [],
                "forbid_rebuild": [],
                "filename": []
            }
        },
        "main": {
            "name": "main",
            "location": 639,
            "return": [],
            "arguments": {}
        },
        "json_counterexample.state_json": {
            "name": "state_json",
            "location": 123,
            "return": [],
            "arguments": {
                "r": [],
                "c": [],
                "f": []
            }
        },
        "check_one_bounded_width_invariant.check": {
            "name": "check",
            "location": 426,
            "return": [],
            "arguments": {}
        },
        "MyFormatter.__init__": {
            "name": "__init__",
            "location": 618,
            "return": [],
            "arguments": {
                "self": [],
                "fmt": []
            }
        },
        "MyFormatter.format": {
            "name": "format",
            "location": 623,
            "return": [],
            "arguments": {
                "self": [],
                "record": []
            }
        },
        "MyFormatter.formatTime": {
            "name": "formatTime",
            "location": 629,
            "return": [],
            "arguments": {
                "self": [],
                "record": [],
                "datefmt": []
            }
        },
        "bmc.bmc_normal": {
            "name": "bmc_normal",
            "location": 203,
            "return": [],
            "arguments": {
                "bound": []
            }
        },
        "bmc.bmc_relaxed": {
            "name": "bmc_relaxed",
            "location": 207,
            "return": [],
            "arguments": {
                "bound": []
            }
        },
        "trace.bool_to_sat": {
            "name": "bool_to_sat",
            "location": 412,
            "return": [],
            "arguments": {
                "b": []
            }
        },
        "main.p": {
            "name": "p",
            "location": 701,
            "return": [],
            "arguments": {
                "prog": []
            }
        }
    },
    "mypyvy-master/src/parser.py": {
        "t_ID": {
            "name": "t_ID",
            "location": 81,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "t": [
                    "str",
                    "bool"
                ]
            }
        },
        "t_ANNOT": {
            "name": "t_ANNOT",
            "location": 86,
            "return": [
                "float",
                "list[]",
                "bool",
                "typing.Type"
            ],
            "arguments": {
                "t": [
                    "float",
                    "list[]",
                    "bool",
                    "typing.Type"
                ]
            }
        },
        "t_INTLIT": {
            "name": "t_INTLIT",
            "location": 90,
            "return": [
                "float",
                "list[]",
                "bool",
                "typing.Type"
            ],
            "arguments": {
                "t": [
                    "float",
                    "list[]",
                    "bool",
                    "typing.Type"
                ]
            }
        },
        "t_newline": {
            "name": "t_newline",
            "location": 127,
            "return": [
                "None"
            ],
            "arguments": {
                "t": []
            }
        },
        "t_error": {
            "name": "t_error",
            "location": 134,
            "return": [
                "None"
            ],
            "arguments": {
                "t": [
                    "typing.Type"
                ]
            }
        },
        "get_lexer": {
            "name": "get_lexer",
            "location": 139,
            "return": [
                "None",
                "str",
                "tuple[typing.Union[typing.Literal,typing.Literal]]",
                "bool"
            ],
            "arguments": {
                "forbid_rebuild": [
                    "bool"
                ]
            }
        },
        "loc_list": {
            "name": "loc_list",
            "location": 161,
            "return": [
                "tuple[typing.Union[typing.Type,None,list[typing.Any],str,typing.Callable[typing.Any, typing.Any],bool]]",
                "None"
            ],
            "arguments": {
                "locs": [
                    "list[int]",
                    "list[str]",
                    "bytes",
                    "str"
                ]
            }
        },
        "p_program": {
            "name": "p_program",
            "location": 183,
            "return": [
                "None"
            ],
            "arguments": {
                "p": []
            }
        },
        "p_decls_empty": {
            "name": "p_decls_empty",
            "location": 188,
            "return": [
                "None"
            ],
            "arguments": {
                "p": []
            }
        },
        "p_decls_decl": {
            "name": "p_decls_decl",
            "location": 192,
            "return": [
                "None"
            ],
            "arguments": {
                "p": [
                    "str"
                ]
            }
        },
        "p_id": {
            "name": "p_id",
            "location": 196,
            "return": [
                "None"
            ],
            "arguments": {
                "p": [
                    "str"
                ]
            }
        },
        "p_optional_annotation_args_empty": {
            "name": "p_optional_annotation_args_empty",
            "location": 200,
            "return": [
                "None"
            ],
            "arguments": {
                "p": []
            }
        },
        "p_optional_annotation_args_nonempty": {
            "name": "p_optional_annotation_args_nonempty",
            "location": 204,
            "return": [
                "None"
            ],
            "arguments": {
                "p": []
            }
        },
        "p_annotation_args_one": {
            "name": "p_annotation_args_one",
            "location": 208,
            "return": [
                "None"
            ],
            "arguments": {
                "p": []
            }
        },
        "p_annotation_args_more": {
            "name": "p_annotation_args_more",
            "location": 212,
            "return": [
                "None"
            ],
            "arguments": {
                "p": [
                    "list[str]"
                ]
            }
        },
        "span_from_loc": {
            "name": "span_from_loc",
            "location": 222,
            "return": [
                "None"
            ],
            "arguments": {
                "loc": [
                    "str",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "span_from_tok": {
            "name": "span_from_tok",
            "location": 227,
            "return": [
                "tuple[bool]"
            ],
            "arguments": {
                "tok": [
                    "bool"
                ]
            }
        },
        "tok_min": {
            "name": "tok_min",
            "location": 230,
            "return": [
                "tuple[typing.Union[int,int]]",
                "str",
                "int"
            ],
            "arguments": {
                "t1": [
                    "tuple[typing.Union[int,int]]",
                    "str",
                    "int"
                ],
                "t2": [
                    "tuple[typing.Union[int,int]]",
                    "str",
                    "int"
                ]
            }
        },
        "tok_max": {
            "name": "tok_max",
            "location": 236,
            "return": [
                "tuple[typing.Union[int,int]]",
                "str",
                "int"
            ],
            "arguments": {
                "t1": [
                    "tuple[typing.Union[int,int]]",
                    "str",
                    "int"
                ],
                "t2": [
                    "tuple[typing.Union[int,int]]",
                    "str",
                    "int"
                ]
            }
        },
        "loc_join": {
            "name": "loc_join",
            "location": 251,
            "return": [
                "None"
            ],
            "arguments": {
                "s1": [
                    "bool",
                    "set[int]",
                    "typing.Callable[, ]"
                ],
                "s2": [
                    "bool",
                    "set[int]",
                    "typing.Callable[, ]"
                ]
            }
        },
        "p_annotation": {
            "name": "p_annotation",
            "location": 261,
            "return": [
                "None"
            ],
            "arguments": {
                "p": [
                    "str"
                ]
            }
        },
        "p_annotations_empty": {
            "name": "p_annotations_empty",
            "location": 270,
            "return": [
                "None"
            ],
            "arguments": {
                "p": []
            }
        },
        "p_annotations_one": {
            "name": "p_annotations_one",
            "location": 274,
            "return": [
                "None"
            ],
            "arguments": {
                "p": [
                    "str"
                ]
            }
        },
        "p_decl_sort": {
            "name": "p_decl_sort",
            "location": 278,
            "return": [
                "None"
            ],
            "arguments": {
                "p": [
                    "tuple[str]",
                    "list[]"
                ]
            }
        },
        "p_decl_mut": {
            "name": "p_decl_mut",
            "location": 288,
            "return": [
                "None"
            ],
            "arguments": {
                "p": []
            }
        },
        "p_arity_empty": {
            "name": "p_arity_empty",
            "location": 293,
            "return": [
                "None"
            ],
            "arguments": {
                "p": []
            }
        },
        "p_arity_paren_empty": {
            "name": "p_arity_paren_empty",
            "location": 297,
            "return": [
                "None"
            ],
            "arguments": {
                "p": []
            }
        },
        "p_arity_nonempty": {
            "name": "p_arity_nonempty",
            "location": 301,
            "return": [
                "None"
            ],
            "arguments": {
                "p": []
            }
        },
        "p_arity_nonempty_one": {
            "name": "p_arity_nonempty_one",
            "location": 305,
            "return": [
                "None"
            ],
            "arguments": {
                "p": []
            }
        },
        "p_arity_nonempty_more": {
            "name": "p_arity_nonempty_more",
            "location": 309,
            "return": [
                "None"
            ],
            "arguments": {
                "p": [
                    "str"
                ]
            }
        },
        "p_sort_bool": {
            "name": "p_sort_bool",
            "location": 313,
            "return": [
                "None"
            ],
            "arguments": {
                "p": [
                    "str",
                    "list[]"
                ]
            }
        },
        "p_sort_int": {
            "name": "p_sort_int",
            "location": 318,
            "return": [
                "None"
            ],
            "arguments": {
                "p": [
                    "list[]",
                    "int"
                ]
            }
        },
        "p_sort_uninterp": {
            "name": "p_sort_uninterp",
            "location": 323,
            "return": [
                "None"
            ],
            "arguments": {
                "p": []
            }
        },
        "p_decl_relation": {
            "name": "p_decl_relation",
            "location": 328,
            "return": [
                "None"
            ],
            "arguments": {
                "p": []
            }
        },
        "p_decl_relation_derived": {
            "name": "p_decl_relation_derived",
            "location": 345,
            "return": [
                "None"
            ],
            "arguments": {
                "p": []
            }
        },
        "p_constant_decl": {
            "name": "p_constant_decl",
            "location": 358,
            "return": [
                "None"
            ],
            "arguments": {
                "p": [
                    "list[dict[typing.Any, typing.Any]]"
                ]
            }
        },
        "p_decl_constant_decl": {
            "name": "p_decl_constant_decl",
            "location": 369,
            "return": [
                "None"
            ],
            "arguments": {
                "p": []
            }
        },
        "p_decl_function": {
            "name": "p_decl_function",
            "location": 373,
            "return": [
                "None"
            ],
            "arguments": {
                "p": []
            }
        },
        "p_axiom_decl": {
            "name": "p_axiom_decl",
            "location": 385,
            "return": [
                "None"
            ],
            "arguments": {
                "p": [
                    "str"
                ]
            }
        },
        "p_decl_axiom_decl": {
            "name": "p_decl_axiom_decl",
            "location": 392,
            "return": [
                "None"
            ],
            "arguments": {
                "p": []
            }
        },
        "p_decl_init": {
            "name": "p_decl_init",
            "location": 396,
            "return": [
                "None"
            ],
            "arguments": {
                "p": [
                    "str"
                ]
            }
        },
        "p_safety_or_invariant_keyword_safety": {
            "name": "p_safety_or_invariant_keyword_safety",
            "location": 403,
            "return": [
                "None"
            ],
            "arguments": {
                "p": []
            }
        },
        "p_safety_or_invariant_keyword_invariant": {
            "name": "p_safety_or_invariant_keyword_invariant",
            "location": 407,
            "return": [
                "None"
            ],
            "arguments": {
                "p": []
            }
        },
        "p_safety_or_invariant_keyword_sketch_invariant": {
            "name": "p_safety_or_invariant_keyword_sketch_invariant",
            "location": 411,
            "return": [
                "None"
            ],
            "arguments": {
                "p": []
            }
        },
        "p_invariant_decl": {
            "name": "p_invariant_decl",
            "location": 415,
            "return": [
                "None"
            ],
            "arguments": {
                "p": [
                    "str"
                ]
            }
        },
        "p_decl_invariant": {
            "name": "p_decl_invariant",
            "location": 426,
            "return": [
                "None"
            ],
            "arguments": {
                "p": []
            }
        },
        "p_opt_name_none": {
            "name": "p_opt_name_none",
            "location": 430,
            "return": [
                "None"
            ],
            "arguments": {
                "p": [
                    "list[]",
                    "bool",
                    "list[list[]]"
                ]
            }
        },
        "p_opt_name_some": {
            "name": "p_opt_name_some",
            "location": 434,
            "return": [
                "None"
            ],
            "arguments": {
                "p": [
                    "str"
                ]
            }
        },
        "p_quant": {
            "name": "p_quant",
            "location": 438,
            "return": [
                "None"
            ],
            "arguments": {
                "p": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ]
            }
        },
        "p_expr_quantifier": {
            "name": "p_expr_quantifier",
            "location": 443,
            "return": [
                "None"
            ],
            "arguments": {
                "p": []
            }
        },
        "p_sortedvar": {
            "name": "p_sortedvar",
            "location": 451,
            "return": [
                "None"
            ],
            "arguments": {
                "p": []
            }
        },
        "p_sortedvar_nosort": {
            "name": "p_sortedvar_nosort",
            "location": 457,
            "return": [
                "None"
            ],
            "arguments": {
                "p": [
                    "str"
                ]
            }
        },
        "p_sortedvars0_one": {
            "name": "p_sortedvars0_one",
            "location": 462,
            "return": [
                "None"
            ],
            "arguments": {
                "p": []
            }
        },
        "p_sortedvars0_zero": {
            "name": "p_sortedvars0_zero",
            "location": 466,
            "return": [
                "None"
            ],
            "arguments": {
                "p": []
            }
        },
        "p_sortedvars_one": {
            "name": "p_sortedvars_one",
            "location": 470,
            "return": [
                "None"
            ],
            "arguments": {
                "p": []
            }
        },
        "p_sortedvars_more": {
            "name": "p_sortedvars_more",
            "location": 474,
            "return": [
                "None"
            ],
            "arguments": {
                "p": [
                    "str"
                ]
            }
        },
        "p_expr_intlit": {
            "name": "p_expr_intlit",
            "location": 478,
            "return": [
                "None"
            ],
            "arguments": {
                "p": [
                    "str"
                ]
            }
        },
        "p_expr_true": {
            "name": "p_expr_true",
            "location": 482,
            "return": [
                "None"
            ],
            "arguments": {
                "p": [
                    "typing.Callable[..., None]",
                    "bool"
                ]
            }
        },
        "p_expr_false": {
            "name": "p_expr_false",
            "location": 486,
            "return": [
                "None"
            ],
            "arguments": {
                "p": [
                    "int",
                    "str"
                ]
            }
        },
        "p_expr_not": {
            "name": "p_expr_not",
            "location": 490,
            "return": [
                "None"
            ],
            "arguments": {
                "p": [
                    "str"
                ]
            }
        },
        "p_primes_empty": {
            "name": "p_primes_empty",
            "location": 496,
            "return": [
                "None"
            ],
            "arguments": {
                "p": []
            }
        },
        "p_primes_prime": {
            "name": "p_primes_prime",
            "location": 500,
            "return": [
                "None"
            ],
            "arguments": {
                "p": [
                    "str"
                ]
            }
        },
        "p_expr_app": {
            "name": "p_expr_app",
            "location": 504,
            "return": [
                "None"
            ],
            "arguments": {
                "p": []
            }
        },
        "p_expr_and1": {
            "name": "p_expr_and1",
            "location": 511,
            "return": [
                "None"
            ],
            "arguments": {
                "p": []
            }
        },
        "p_expr_and": {
            "name": "p_expr_and",
            "location": 515,
            "return": [
                "None"
            ],
            "arguments": {
                "p": [
                    "str"
                ]
            }
        },
        "p_expr_or1": {
            "name": "p_expr_or1",
            "location": 525,
            "return": [
                "None"
            ],
            "arguments": {
                "p": []
            }
        },
        "p_expr_or": {
            "name": "p_expr_or",
            "location": 529,
            "return": [
                "None"
            ],
            "arguments": {
                "p": [
                    "str"
                ]
            }
        },
        "p_expr_distinct": {
            "name": "p_expr_distinct",
            "location": 540,
            "return": [
                "None"
            ],
            "arguments": {
                "p": [
                    "str"
                ]
            }
        },
        "p_expr_iff": {
            "name": "p_expr_iff",
            "location": 544,
            "return": [
                "None"
            ],
            "arguments": {
                "p": []
            }
        },
        "p_expr_implies": {
            "name": "p_expr_implies",
            "location": 551,
            "return": [
                "None"
            ],
            "arguments": {
                "p": []
            }
        },
        "p_expr_eq": {
            "name": "p_expr_eq",
            "location": 558,
            "return": [
                "None"
            ],
            "arguments": {
                "p": []
            }
        },
        "p_expr_noteq": {
            "name": "p_expr_noteq",
            "location": 565,
            "return": [
                "None"
            ],
            "arguments": {
                "p": []
            }
        },
        "p_expr_ge": {
            "name": "p_expr_ge",
            "location": 573,
            "return": [
                "None"
            ],
            "arguments": {
                "p": []
            }
        },
        "p_expr_gt": {
            "name": "p_expr_gt",
            "location": 580,
            "return": [
                "None"
            ],
            "arguments": {
                "p": []
            }
        },
        "p_expr_le": {
            "name": "p_expr_le",
            "location": 587,
            "return": [
                "None"
            ],
            "arguments": {
                "p": []
            }
        },
        "p_expr_lt": {
            "name": "p_expr_lt",
            "location": 594,
            "return": [
                "None"
            ],
            "arguments": {
                "p": []
            }
        },
        "p_expr_plus": {
            "name": "p_expr_plus",
            "location": 601,
            "return": [
                "None"
            ],
            "arguments": {
                "p": []
            }
        },
        "p_expr_sub": {
            "name": "p_expr_sub",
            "location": 608,
            "return": [
                "None"
            ],
            "arguments": {
                "p": []
            }
        },
        "p_expr_mult": {
            "name": "p_expr_mult",
            "location": 615,
            "return": [
                "None"
            ],
            "arguments": {
                "p": []
            }
        },
        "p_expr_new": {
            "name": "p_expr_new",
            "location": 622,
            "return": [
                "None"
            ],
            "arguments": {
                "p": []
            }
        },
        "p_args_empty": {
            "name": "p_args_empty",
            "location": 627,
            "return": [
                "None"
            ],
            "arguments": {
                "p": []
            }
        },
        "p_args_at_least_one": {
            "name": "p_args_at_least_one",
            "location": 631,
            "return": [
                "None"
            ],
            "arguments": {
                "p": []
            }
        },
        "p_args1_one": {
            "name": "p_args1_one",
            "location": 635,
            "return": [
                "None"
            ],
            "arguments": {
                "p": []
            }
        },
        "p_args1_more": {
            "name": "p_args1_more",
            "location": 639,
            "return": [
                "None"
            ],
            "arguments": {
                "p": []
            }
        },
        "p_expr_id": {
            "name": "p_expr_id",
            "location": 643,
            "return": [
                "None"
            ],
            "arguments": {
                "p": [
                    "str"
                ]
            }
        },
        "p_expr_paren": {
            "name": "p_expr_paren",
            "location": 649,
            "return": [
                "None"
            ],
            "arguments": {
                "p": []
            }
        },
        "p_expr_if": {
            "name": "p_expr_if",
            "location": 653,
            "return": [
                "None"
            ],
            "arguments": {
                "p": []
            }
        },
        "p_expr_let": {
            "name": "p_expr_let",
            "location": 660,
            "return": [
                "None"
            ],
            "arguments": {
                "p": [
                    "str"
                ]
            }
        },
        "p_params": {
            "name": "p_params",
            "location": 667,
            "return": [
                "None"
            ],
            "arguments": {
                "p": []
            }
        },
        "p_mod": {
            "name": "p_mod",
            "location": 671,
            "return": [
                "None"
            ],
            "arguments": {
                "p": [
                    "bytes",
                    "str"
                ]
            }
        },
        "p_modlist_one": {
            "name": "p_modlist_one",
            "location": 676,
            "return": [
                "None"
            ],
            "arguments": {
                "p": []
            }
        },
        "p_modlist_more": {
            "name": "p_modlist_more",
            "location": 680,
            "return": [
                "None"
            ],
            "arguments": {
                "p": [
                    "str"
                ]
            }
        },
        "p_mods": {
            "name": "p_mods",
            "location": 684,
            "return": [
                "None"
            ],
            "arguments": {
                "p": []
            }
        },
        "p_decl_transition": {
            "name": "p_decl_transition",
            "location": 688,
            "return": [
                "None"
            ],
            "arguments": {
                "p": [
                    "str"
                ]
            }
        },
        "p_decl_definition_body_mods_expr": {
            "name": "p_decl_definition_body_mods_expr",
            "location": 698,
            "return": [
                "None"
            ],
            "arguments": {
                "p": []
            }
        },
        "p_decl_definition_body_expr": {
            "name": "p_decl_definition_body_expr",
            "location": 702,
            "return": [
                "None"
            ],
            "arguments": {
                "p": []
            }
        },
        "kstate_int": {
            "name": "kstate_int",
            "location": 706,
            "return": [
                "int"
            ],
            "arguments": {
                "kstate": [
                    "str",
                    "int",
                    "float",
                    "typing.Iterable[typing.Optional[typing.Any]]"
                ]
            }
        },
        "p_kstate": {
            "name": "p_kstate",
            "location": 716,
            "return": [
                "None"
            ],
            "arguments": {
                "p": []
            }
        },
        "p_decl_theorem": {
            "name": "p_decl_theorem",
            "location": 726,
            "return": [
                "None"
            ],
            "arguments": {
                "p": []
            }
        },
        "p_decl_definition": {
            "name": "p_decl_definition",
            "location": 733,
            "return": [
                "None"
            ],
            "arguments": {
                "p": []
            }
        },
        "p_trace_transition_any": {
            "name": "p_trace_transition_any",
            "location": 749,
            "return": [
                "None"
            ],
            "arguments": {
                "p": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ]
            }
        },
        "p_optional_tcall_args_none": {
            "name": "p_optional_tcall_args_none",
            "location": 753,
            "return": [
                "None"
            ],
            "arguments": {
                "p": []
            }
        },
        "p_tcall_args_empty": {
            "name": "p_tcall_args_empty",
            "location": 757,
            "return": [
                "None"
            ],
            "arguments": {
                "p": []
            }
        },
        "p_tcall_args_nonempty": {
            "name": "p_tcall_args_nonempty",
            "location": 761,
            "return": [
                "None"
            ],
            "arguments": {
                "p": []
            }
        },
        "p_tcall_arg_star": {
            "name": "p_tcall_arg_star",
            "location": 765,
            "return": [
                "None"
            ],
            "arguments": {
                "p": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ]
            }
        },
        "p_tcall_arg_expr": {
            "name": "p_tcall_arg_expr",
            "location": 769,
            "return": [
                "None"
            ],
            "arguments": {
                "p": []
            }
        },
        "p_tcall_args1_arg": {
            "name": "p_tcall_args1_arg",
            "location": 773,
            "return": [
                "None"
            ],
            "arguments": {
                "p": []
            }
        },
        "p_tcall_args1_more": {
            "name": "p_tcall_args1_more",
            "location": 777,
            "return": [
                "None"
            ],
            "arguments": {
                "p": []
            }
        },
        "p_optional_tcall_args_some": {
            "name": "p_optional_tcall_args_some",
            "location": 781,
            "return": [
                "None"
            ],
            "arguments": {
                "p": []
            }
        },
        "p_trace_transition_calls": {
            "name": "p_trace_transition_calls",
            "location": 785,
            "return": [
                "None"
            ],
            "arguments": {
                "p": [
                    "str"
                ]
            }
        },
        "p_trace_transition_calls_one": {
            "name": "p_trace_transition_calls_one",
            "location": 789,
            "return": [
                "None"
            ],
            "arguments": {
                "p": []
            }
        },
        "p_trace_transition_calls_more": {
            "name": "p_trace_transition_calls_more",
            "location": 793,
            "return": [
                "None"
            ],
            "arguments": {
                "p": [
                    "str"
                ]
            }
        },
        "p_trace_transition_call": {
            "name": "p_trace_transition_call",
            "location": 797,
            "return": [
                "None"
            ],
            "arguments": {
                "p": []
            }
        },
        "p_trace_component_assert": {
            "name": "p_trace_component_assert",
            "location": 802,
            "return": [
                "None"
            ],
            "arguments": {
                "p": []
            }
        },
        "p_trace_component_assert_init": {
            "name": "p_trace_component_assert_init",
            "location": 807,
            "return": [
                "None"
            ],
            "arguments": {
                "p": [
                    "list[str]",
                    "bool",
                    "dict[str, str]"
                ]
            }
        },
        "p_trace_component_transition": {
            "name": "p_trace_component_transition",
            "location": 811,
            "return": [
                "None"
            ],
            "arguments": {
                "p": [
                    "str"
                ]
            }
        },
        "p_trace_components_empty": {
            "name": "p_trace_components_empty",
            "location": 815,
            "return": [
                "None"
            ],
            "arguments": {
                "p": []
            }
        },
        "p_trace_components_component": {
            "name": "p_trace_components_component",
            "location": 819,
            "return": [
                "None"
            ],
            "arguments": {
                "p": [
                    "str"
                ]
            }
        },
        "p_satunsat": {
            "name": "p_satunsat",
            "location": 823,
            "return": [
                "None"
            ],
            "arguments": {
                "p": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ]
            }
        },
        "p_decl_trace": {
            "name": "p_decl_trace",
            "location": 828,
            "return": [
                "None"
            ],
            "arguments": {
                "p": []
            }
        },
        "p_empty": {
            "name": "p_empty",
            "location": 833,
            "return": [
                "None"
            ],
            "arguments": {
                "p": [
                    "int",
                    "str",
                    "typing.Iterable['Context']"
                ]
            }
        },
        "p_error": {
            "name": "p_error",
            "location": 837,
            "return": [
                "None"
            ],
            "arguments": {
                "t": [
                    "float",
                    "str",
                    "bool"
                ]
            }
        },
        "get_parser": {
            "name": "get_parser",
            "location": 850,
            "return": [
                "None",
                "dict[, ]",
                "str",
                "dict[str, typing.Any]"
            ],
            "arguments": {
                "forbid_rebuild": [
                    "bool"
                ]
            }
        },
        "get_expr_parser": {
            "name": "get_expr_parser",
            "location": 860,
            "return": [
                "None",
                "int",
                "list[]",
                "dict[str, bool]"
            ],
            "arguments": {}
        },
        "parse_expr": {
            "name": "parse_expr",
            "location": 867,
            "return": [],
            "arguments": {
                "input": [
                    "str",
                    "bytes",
                    "list[int]"
                ]
            }
        }
    },
    "mypyvy-master/src/pd.py": {
        "powerset": {
            "name": "powerset",
            "location": 36,
            "return": [],
            "arguments": {
                "iterable": []
            }
        },
        "unpack_cti": {
            "name": "unpack_cti",
            "location": 46,
            "return": [],
            "arguments": {
                "z3model": []
            }
        },
        "dump_caches": {
            "name": "dump_caches",
            "location": 67,
            "return": [],
            "arguments": {}
        },
        "load_caches": {
            "name": "load_caches",
            "location": 83,
            "return": [],
            "arguments": {}
        },
        "handler": {
            "name": "handler",
            "location": 108,
            "return": [],
            "arguments": {
                "signum": [],
                "frame": []
            }
        },
        "get_solver": {
            "name": "get_solver",
            "location": 201,
            "return": [],
            "arguments": {}
        },
        "cheap_check_implication": {
            "name": "cheap_check_implication",
            "location": 208,
            "return": [],
            "arguments": {
                "hyps": [],
                "concs": []
            }
        },
        "eval_in_state": {
            "name": "eval_in_state",
            "location": 226,
            "return": [],
            "arguments": {
                "s": [],
                "m": [],
                "p": []
            }
        },
        "check_initial": {
            "name": "check_initial",
            "location": 259,
            "return": [],
            "arguments": {
                "solver": [],
                "p": []
            }
        },
        "is_substructure": {
            "name": "is_substructure",
            "location": 284,
            "return": [],
            "arguments": {
                "s": [],
                "t": []
            }
        },
        "isomorphic_states": {
            "name": "isomorphic_states",
            "location": 301,
            "return": [],
            "arguments": {
                "solver": [],
                "s": [],
                "t": []
            }
        },
        "check_two_state_implication_multiprocessing_helper": {
            "name": "check_two_state_implication_multiprocessing_helper",
            "location": 309,
            "return": [],
            "arguments": {
                "seed": [],
                "s": [],
                "old_hyps": [],
                "new_conc": [],
                "minimize": []
            }
        },
        "check_two_state_implication_multiprocessing": {
            "name": "check_two_state_implication_multiprocessing",
            "location": 334,
            "return": [],
            "arguments": {
                "s": [],
                "old_hyps": [],
                "new_conc": [],
                "minimize": []
            }
        },
        "check_two_state_implication": {
            "name": "check_two_state_implication",
            "location": 361,
            "return": [],
            "arguments": {
                "s": [],
                "precondition": [],
                "p": [],
                "msg": [],
                "minimize": []
            }
        },
        "check_dual_edge_old": {
            "name": "check_dual_edge_old",
            "location": 471,
            "return": [],
            "arguments": {
                "s": [],
                "ps": [],
                "qs": [],
                "msg": []
            }
        },
        "check_dual_edge_multiprocessing_helper": {
            "name": "check_dual_edge_multiprocessing_helper",
            "location": 568,
            "return": [],
            "arguments": {
                "ps": [],
                "qs": [],
                "i_transition": [],
                "i_q": [],
                "minimize": [],
                "save_smt2": []
            }
        },
        "check_dual_edge_multiprocessing": {
            "name": "check_dual_edge_multiprocessing",
            "location": 610,
            "return": [],
            "arguments": {
                "ps": [],
                "qs": [],
                "minimize": []
            }
        },
        "check_dual_edge_multiprocessing_seeds_helper": {
            "name": "check_dual_edge_multiprocessing_seeds_helper",
            "location": 651,
            "return": [],
            "arguments": {
                "ps": [],
                "qs": [],
                "i_transition": [],
                "i_q": [],
                "minimize": [],
                "save_smt2": [],
                "result_queue": []
            }
        },
        "luby": {
            "name": "luby",
            "location": 663,
            "return": [],
            "arguments": {
                "i": []
            }
        },
        "check_dual_edge_multiprocessing_seeds": {
            "name": "check_dual_edge_multiprocessing_seeds",
            "location": 670,
            "return": [],
            "arguments": {
                "ps": [],
                "qs": [],
                "minimize": []
            }
        },
        "check_dual_edge": {
            "name": "check_dual_edge",
            "location": 756,
            "return": [],
            "arguments": {
                "s": [],
                "ps": [],
                "qs": [],
                "msg": []
            }
        },
        "assert_valid_hq": {
            "name": "assert_valid_hq",
            "location": 1033,
            "return": [],
            "arguments": {
                "ps": [],
                "top_clauses": [],
                "hq": []
            }
        },
        "check_dual_edge_optimize_multiprocessing_helper": {
            "name": "check_dual_edge_optimize_multiprocessing_helper",
            "location": 1046,
            "return": [],
            "arguments": {
                "ps": [],
                "top_clauses": [],
                "hq": [],
                "produce_cti": [],
                "optimize": [],
                "whole_clauses": [],
                "use_cvc4": [],
                "save_smt2": [],
                "q1": [],
                "q2": [],
                "join_q1": []
            }
        },
        "check_dual_edge_optimize_find_cti": {
            "name": "check_dual_edge_optimize_find_cti",
            "location": 1323,
            "return": [],
            "arguments": {
                "ps": [],
                "top_clauses": [],
                "q_seed": [],
                "whole_clauses": []
            }
        },
        "check_dual_edge_optimize_minimize_ps": {
            "name": "check_dual_edge_optimize_minimize_ps",
            "location": 1579,
            "return": [],
            "arguments": {
                "ps": [],
                "top_clauses": [],
                "q_seed": []
            }
        },
        "check_dual_edge_optimize": {
            "name": "check_dual_edge_optimize",
            "location": 1790,
            "return": [],
            "arguments": {
                "ps": [],
                "top_clauses": [],
                "q_seed": [],
                "whole_clauses": []
            }
        },
        "check_k_state_implication": {
            "name": "check_k_state_implication",
            "location": 1863,
            "return": [],
            "arguments": {
                "s": [],
                "precondition": [],
                "p": [],
                "k": [],
                "msg": []
            }
        },
        "marco": {
            "name": "marco",
            "location": 1943,
            "return": [],
            "arguments": {
                "n": [],
                "f": []
            }
        },
        "alpha_from_clause_marco": {
            "name": "alpha_from_clause_marco",
            "location": 1979,
            "return": [],
            "arguments": {
                "solver": [],
                "states": [],
                "top_clause": []
            }
        },
        "subclauses": {
            "name": "subclauses",
            "location": 2012,
            "return": [],
            "arguments": {
                "top_clause": []
            }
        },
        "alpha_from_clause": {
            "name": "alpha_from_clause",
            "location": 2024,
            "return": [],
            "arguments": {
                "solver": [],
                "states": [],
                "top_clause": []
            }
        },
        "alpha_from_predicates": {
            "name": "alpha_from_predicates",
            "location": 2054,
            "return": [],
            "arguments": {
                "s": [],
                "states": [],
                "predicates": []
            }
        },
        "_map_clause_state_interaction_helper": {
            "name": "_map_clause_state_interaction_helper",
            "location": 2061,
            "return": [],
            "arguments": {
                "vls": []
            }
        },
        "multiprocessing_map_clause_state_interaction": {
            "name": "multiprocessing_map_clause_state_interaction",
            "location": 2073,
            "return": [],
            "arguments": {
                "work": []
            }
        },
        "_map_clause_state_size_interaction_helper": {
            "name": "_map_clause_state_size_interaction_helper",
            "location": 2113,
            "return": [],
            "arguments": {
                "workitem": []
            }
        },
        "multiprocessing_map_clause_state_size_interaction": {
            "name": "multiprocessing_map_clause_state_size_interaction",
            "location": 2125,
            "return": [],
            "arguments": {
                "work": []
            }
        },
        "map_clause_state_interaction": {
            "name": "map_clause_state_interaction",
            "location": 2155,
            "return": [],
            "arguments": {
                "variables": [],
                "literals": [],
                "state_or_predicate": []
            }
        },
        "map_clause_state_interaction_instantiate": {
            "name": "map_clause_state_interaction_instantiate",
            "location": 2266,
            "return": [],
            "arguments": {
                "variables": [],
                "literals": [],
                "state": []
            }
        },
        "map_clause_state_interaction_z3": {
            "name": "map_clause_state_interaction_z3",
            "location": 2340,
            "return": [],
            "arguments": {
                "variables": [],
                "literals": [],
                "state": []
            }
        },
        "map_clause_state_size_interaction": {
            "name": "map_clause_state_size_interaction",
            "location": 2537,
            "return": [],
            "arguments": {
                "variables": [],
                "literals": [],
                "state": [],
                "size": [],
                "known_mss": [],
                "block_mss": [],
                "timeout": []
            }
        },
        "forward_explore_marco_turbo": {
            "name": "forward_explore_marco_turbo",
            "location": 3557,
            "return": [],
            "arguments": {
                "solver": [],
                "clauses": [],
                "_states": []
            }
        },
        "forward_explore_marco": {
            "name": "forward_explore_marco",
            "location": 3663,
            "return": [],
            "arguments": {
                "solver": [],
                "clauses": [],
                "_states": []
            }
        },
        "forward_explore": {
            "name": "forward_explore",
            "location": 3971,
            "return": [],
            "arguments": {
                "s": [],
                "alpha": [],
                "states": []
            }
        },
        "forward_explore_inv": {
            "name": "forward_explore_inv",
            "location": 4100,
            "return": [],
            "arguments": {
                "s": []
            }
        },
        "dedup_equivalent_predicates": {
            "name": "dedup_equivalent_predicates",
            "location": 4133,
            "return": [],
            "arguments": {
                "s": [],
                "itr": []
            }
        },
        "repeated_houdini": {
            "name": "repeated_houdini",
            "location": 4147,
            "return": [],
            "arguments": {
                "s": []
            }
        },
        "repeated_houdini_bounds": {
            "name": "repeated_houdini_bounds",
            "location": 4237,
            "return": [],
            "arguments": {
                "solver": []
            }
        },
        "cdcl_state_bounds": {
            "name": "cdcl_state_bounds",
            "location": 4802,
            "return": [],
            "arguments": {
                "solver": []
            }
        },
        "cdcl_predicate_bounds": {
            "name": "cdcl_predicate_bounds",
            "location": 5420,
            "return": [],
            "arguments": {
                "solver": []
            }
        },
        "primal_dual_houdini": {
            "name": "primal_dual_houdini",
            "location": 5899,
            "return": [],
            "arguments": {
                "solver": []
            }
        },
        "destruct_clause": {
            "name": "destruct_clause",
            "location": 8004,
            "return": [],
            "arguments": {
                "clause": []
            }
        },
        "is_strict_subclause": {
            "name": "is_strict_subclause",
            "location": 8026,
            "return": [],
            "arguments": {
                "c1": [],
                "c2": []
            }
        },
        "minimize_clause": {
            "name": "minimize_clause",
            "location": 8036,
            "return": [],
            "arguments": {
                "p": [],
                "states": []
            }
        },
        "cdcl_invariant": {
            "name": "cdcl_invariant",
            "location": 8280,
            "return": [],
            "arguments": {
                "solver": []
            }
        },
        "enumerate_reachable_states": {
            "name": "enumerate_reachable_states",
            "location": 8802,
            "return": [],
            "arguments": {
                "s": []
            }
        },
        "incremental_induction_graph": {
            "name": "incremental_induction_graph",
            "location": 8890,
            "return": [],
            "arguments": {
                "solver": []
            }
        },
        "test": {
            "name": "test",
            "location": 9014,
            "return": [],
            "arguments": {
                "solver": []
            }
        },
        "add_argparsers": {
            "name": "add_argparsers",
            "location": 9131,
            "return": [],
            "arguments": {
                "subparsers": []
            }
        },
        "check_dual_edge_old.check": {
            "name": "check",
            "location": 494,
            "return": [],
            "arguments": {
                "ps_i": [],
                "minimize": []
            }
        },
        "HoareQuery.__post_init__": {
            "name": "__post_init__",
            "location": 914,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HoareQuery.__str__": {
            "name": "__str__",
            "location": 917,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HoareQuery.__le__": {
            "name": "__le__",
            "location": 922,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "HoareQuery.__ge__": {
            "name": "__ge__",
            "location": 937,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "HoareQuery.__lt__": {
            "name": "__lt__",
            "location": 939,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "HoareQuery.__gt__": {
            "name": "__gt__",
            "location": 941,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "HoareQuery.strengthen_p": {
            "name": "strengthen_p",
            "location": 943,
            "return": [],
            "arguments": {
                "self": [],
                "d": []
            }
        },
        "HoareQuery.weaken_p": {
            "name": "weaken_p",
            "location": 951,
            "return": [],
            "arguments": {
                "self": [],
                "d": []
            }
        },
        "HoareQuery.strengthen_q_pre": {
            "name": "strengthen_q_pre",
            "location": 959,
            "return": [],
            "arguments": {
                "self": [],
                "k": [],
                "d": []
            }
        },
        "HoareQuery.weaken_q_pre": {
            "name": "weaken_q_pre",
            "location": 969,
            "return": [],
            "arguments": {
                "self": [],
                "k": [],
                "d": []
            }
        },
        "HoareQuery.strengthen_q_post": {
            "name": "strengthen_q_post",
            "location": 979,
            "return": [],
            "arguments": {
                "self": [],
                "k": [],
                "d": []
            }
        },
        "HoareQuery.weaken_q_post": {
            "name": "weaken_q_post",
            "location": 989,
            "return": [],
            "arguments": {
                "self": [],
                "k": [],
                "d": []
            }
        },
        "HoareQuery.replace_cardinality": {
            "name": "replace_cardinality",
            "location": 999,
            "return": [],
            "arguments": {
                "self": [],
                "k": [],
                "n": []
            }
        },
        "HoareQuery.replace_transition": {
            "name": "replace_transition",
            "location": 1009,
            "return": [],
            "arguments": {
                "self": [],
                "i_transition": []
            }
        },
        "RunningProcess.terminate": {
            "name": "terminate",
            "location": 1302,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "check_dual_edge_optimize_find_cti.known_to_be_unsat": {
            "name": "known_to_be_unsat",
            "location": 1347,
            "return": [],
            "arguments": {
                "hq": []
            }
        },
        "check_dual_edge_optimize_minimize_ps.hoare_queries_for_p": {
            "name": "hoare_queries_for_p",
            "location": 1607,
            "return": [],
            "arguments": {
                "p": []
            }
        },
        "check_dual_edge_optimize_minimize_ps.known_to_be_unsat": {
            "name": "known_to_be_unsat",
            "location": 1622,
            "return": [],
            "arguments": {
                "hq": []
            }
        },
        "check_dual_edge_optimize_minimize_ps.known_to_be_sat": {
            "name": "known_to_be_sat",
            "location": 1628,
            "return": [],
            "arguments": {
                "hq": []
            }
        },
        "check_dual_edge_optimize_minimize_ps.known_to_be_valid": {
            "name": "known_to_be_valid",
            "location": 1633,
            "return": [],
            "arguments": {
                "p": []
            }
        },
        "check_dual_edge_optimize_minimize_ps.known_to_be_invalid": {
            "name": "known_to_be_invalid",
            "location": 1635,
            "return": [],
            "arguments": {
                "p": []
            }
        },
        "MapSolver.__init__": {
            "name": "__init__",
            "location": 1910,
            "return": [],
            "arguments": {
                "self": [],
                "n": []
            }
        },
        "MapSolver.next_seed": {
            "name": "next_seed",
            "location": 1919,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MapSolver.block_down": {
            "name": "block_down",
            "location": 1933,
            "return": [],
            "arguments": {
                "self": [],
                "frompoint": []
            }
        },
        "MapSolver.block_up": {
            "name": "block_up",
            "location": 1938,
            "return": [],
            "arguments": {
                "self": [],
                "frompoint": []
            }
        },
        "marco.shrink": {
            "name": "shrink",
            "location": 1945,
            "return": [],
            "arguments": {
                "seed": []
            }
        },
        "marco.grow": {
            "name": "grow",
            "location": 1956,
            "return": [],
            "arguments": {
                "seed": []
            }
        },
        "alpha_from_clause_marco.to_clause": {
            "name": "to_clause",
            "location": 1991,
            "return": [],
            "arguments": {
                "s": []
            }
        },
        "alpha_from_clause_marco.f": {
            "name": "f",
            "location": 1999,
            "return": [],
            "arguments": {
                "s": []
            }
        },
        "map_clause_state_interaction.to_clause": {
            "name": "to_clause",
            "location": 2166,
            "return": [],
            "arguments": {
                "s": []
            }
        },
        "map_clause_state_interaction_instantiate.ev": {
            "name": "ev",
            "location": 2276,
            "return": [],
            "arguments": {
                "values": [],
                "lit": []
            }
        },
        "map_clause_state_interaction_z3.p": {
            "name": "p",
            "location": 2369,
            "return": [],
            "arguments": {
                "st": [],
                "must_be_new": []
            }
        },
        "map_clause_state_interaction_z3.e": {
            "name": "e",
            "location": 2382,
            "return": [],
            "arguments": {
                "i": []
            }
        },
        "map_clause_state_interaction_z3.is_e": {
            "name": "is_e",
            "location": 2387,
            "return": [],
            "arguments": {
                "i": []
            }
        },
        "map_clause_state_interaction_z3.ee": {
            "name": "ee",
            "location": 2389,
            "return": [],
            "arguments": {
                "i": []
            }
        },
        "map_clause_state_interaction_z3.lit": {
            "name": "lit",
            "location": 2401,
            "return": [],
            "arguments": {
                "e": [],
                "polarity": []
            }
        },
        "map_clause_state_interaction_z3.to_z3": {
            "name": "to_z3",
            "location": 2444,
            "return": [],
            "arguments": {
                "e": []
            }
        },
        "map_clause_state_size_interaction.p": {
            "name": "p",
            "location": 2576,
            "return": [],
            "arguments": {
                "st": [],
                "must_be_new": []
            }
        },
        "map_clause_state_size_interaction.e": {
            "name": "e",
            "location": 2589,
            "return": [],
            "arguments": {
                "i": []
            }
        },
        "map_clause_state_size_interaction.is_e": {
            "name": "is_e",
            "location": 2594,
            "return": [],
            "arguments": {
                "i": []
            }
        },
        "map_clause_state_size_interaction.ee": {
            "name": "ee",
            "location": 2596,
            "return": [],
            "arguments": {
                "i": []
            }
        },
        "map_clause_state_size_interaction.lit": {
            "name": "lit",
            "location": 2608,
            "return": [],
            "arguments": {
                "e": [],
                "polarity": []
            }
        },
        "map_clause_state_size_interaction.to_z3": {
            "name": "to_z3",
            "location": 2651,
            "return": [],
            "arguments": {
                "e": []
            }
        },
        "SubclausesMapTurbo.__init__": {
            "name": "__init__",
            "location": 2736,
            "return": [],
            "arguments": {
                "self": [],
                "top_clause": [],
                "states": [],
                "predicates": [],
                "optimize": []
            }
        },
        "SubclausesMapTurbo._new_states": {
            "name": "_new_states",
            "location": 2758,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SubclausesMapTurbo._new_predicates": {
            "name": "_new_predicates",
            "location": 2813,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SubclausesMapTurbo.separate": {
            "name": "separate",
            "location": 2863,
            "return": [],
            "arguments": {
                "self": [],
                "pos": [],
                "neg": [],
                "ps": [],
                "soft_pos": [],
                "soft_neg": [],
                "soft_ps": []
            }
        },
        "SubclausesMapTurbo.to_clause": {
            "name": "to_clause",
            "location": 2926,
            "return": [],
            "arguments": {
                "self": [],
                "s": []
            }
        },
        "MultiSubclausesMapICE.__init__": {
            "name": "__init__",
            "location": 2938,
            "return": [],
            "arguments": {
                "self": [],
                "top_clauses": [],
                "states": [],
                "predicates": []
            }
        },
        "MultiSubclausesMapICE._constrain_variables": {
            "name": "_constrain_variables",
            "location": 2969,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MultiSubclausesMapICE._constrain_domain_independence": {
            "name": "_constrain_domain_independence",
            "location": 2980,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MultiSubclausesMapICE._new_states": {
            "name": "_new_states",
            "location": 3014,
            "return": [],
            "arguments": {
                "self": [],
                "to_map": []
            }
        },
        "MultiSubclausesMapICE._new_predicates": {
            "name": "_new_predicates",
            "location": 3048,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MultiSubclausesMapICE.separate": {
            "name": "separate",
            "location": 3077,
            "return": [],
            "arguments": {
                "self": [],
                "pos": [],
                "neg": [],
                "imp": [],
                "pos_ps": [],
                "neg_ps": []
            }
        },
        "MultiSubclausesMapICE.to_clause": {
            "name": "to_clause",
            "location": 3208,
            "return": [],
            "arguments": {
                "self": [],
                "k": [],
                "s": []
            }
        },
        "MultiSubclausesMapBySizeSep.__init__": {
            "name": "__init__",
            "location": 3227,
            "return": [],
            "arguments": {
                "self": [],
                "top_clauses": [],
                "states": [],
                "predicates": []
            }
        },
        "MultiSubclausesMapBySizeSep.state_v": {
            "name": "state_v",
            "location": 3260,
            "return": [],
            "arguments": {
                "self": [],
                "k": [],
                "i": []
            }
        },
        "MultiSubclausesMapBySizeSep._constrain_size": {
            "name": "_constrain_size",
            "location": 3266,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MultiSubclausesMapBySizeSep._constrain_variables": {
            "name": "_constrain_variables",
            "location": 3271,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MultiSubclausesMapBySizeSep._constrain_domain_independence": {
            "name": "_constrain_domain_independence",
            "location": 3282,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MultiSubclausesMapBySizeSep._new_states_size": {
            "name": "_new_states_size",
            "location": 3316,
            "return": [],
            "arguments": {
                "self": [],
                "size": [],
                "states_to_map": []
            }
        },
        "MultiSubclausesMapBySizeSep._new_permanent_pos_size": {
            "name": "_new_permanent_pos_size",
            "location": 3355,
            "return": [],
            "arguments": {
                "self": [],
                "size": [],
                "permanent_pos": []
            }
        },
        "MultiSubclausesMapBySizeSep._new_predicates": {
            "name": "_new_predicates",
            "location": 3403,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MultiSubclausesMapBySizeSep.separate": {
            "name": "separate",
            "location": 3432,
            "return": [],
            "arguments": {
                "self": [],
                "size": [],
                "pos": [],
                "neg": [],
                "imp": [],
                "permanent_pos": [],
                "pos_ps": [],
                "neg_ps": []
            }
        },
        "MultiSubclausesMapBySizeSep.to_clause": {
            "name": "to_clause",
            "location": 3547,
            "return": [],
            "arguments": {
                "self": [],
                "k": [],
                "s": []
            }
        },
        "forward_explore_marco_turbo.alpha_live": {
            "name": "alpha_live",
            "location": 3570,
            "return": [],
            "arguments": {
                "states": []
            }
        },
        "forward_explore_marco_turbo.valid": {
            "name": "valid",
            "location": 3573,
            "return": [],
            "arguments": {
                "clause": []
            }
        },
        "forward_explore_marco_turbo.wp_valid": {
            "name": "wp_valid",
            "location": 3585,
            "return": [],
            "arguments": {
                "clause": []
            }
        },
        "forward_explore_marco.valid": {
            "name": "valid",
            "location": 3750,
            "return": [],
            "arguments": {
                "clause": []
            }
        },
        "forward_explore_marco.wp_valid": {
            "name": "wp_valid",
            "location": 3762,
            "return": [],
            "arguments": {
                "mp": [],
                "s": []
            }
        },
        "forward_explore_marco.get_a": {
            "name": "get_a",
            "location": 3877,
            "return": [],
            "arguments": {}
        },
        "forward_explore_inv.alpha_inv": {
            "name": "alpha_inv",
            "location": 4111,
            "return": [],
            "arguments": {
                "states": []
            }
        },
        "repeated_houdini.alpha_clauses": {
            "name": "alpha_clauses",
            "location": 4169,
            "return": [],
            "arguments": {
                "states": []
            }
        },
        "repeated_houdini.alpha_sharp": {
            "name": "alpha_sharp",
            "location": 4174,
            "return": [],
            "arguments": {
                "states": []
            }
        },
        "repeated_houdini.forward_explore_clauses": {
            "name": "forward_explore_clauses",
            "location": 4179,
            "return": [],
            "arguments": {
                "states": []
            }
        },
        "repeated_houdini_bounds.add_state": {
            "name": "add_state",
            "location": 4264,
            "return": [],
            "arguments": {
                "s": []
            }
        },
        "repeated_houdini_bounds.alpha_sharp": {
            "name": "alpha_sharp",
            "location": 4302,
            "return": [],
            "arguments": {
                "states": []
            }
        },
        "repeated_houdini_bounds.close_forward": {
            "name": "close_forward",
            "location": 4312,
            "return": [],
            "arguments": {
                "s": []
            }
        },
        "repeated_houdini_bounds.forward_explore_from_state": {
            "name": "forward_explore_from_state",
            "location": 4328,
            "return": [],
            "arguments": {
                "src": []
            }
        },
        "repeated_houdini_bounds.houdini": {
            "name": "houdini",
            "location": 4381,
            "return": [],
            "arguments": {}
        },
        "repeated_houdini_bounds.houdini_frames": {
            "name": "houdini_frames",
            "location": 4457,
            "return": [],
            "arguments": {}
        },
        "repeated_houdini_bounds.houdini_with_existing": {
            "name": "houdini_with_existing",
            "location": 4532,
            "return": [],
            "arguments": {
                "ps": []
            }
        },
        "repeated_houdini_bounds.new_reachable_states": {
            "name": "new_reachable_states",
            "location": 4557,
            "return": [],
            "arguments": {}
        },
        "repeated_houdini_bounds.assert_invariants": {
            "name": "assert_invariants",
            "location": 4579,
            "return": [],
            "arguments": {}
        },
        "cdcl_state_bounds.add_state": {
            "name": "add_state",
            "location": 4831,
            "return": [],
            "arguments": {
                "s": []
            }
        },
        "cdcl_state_bounds.add_predicate": {
            "name": "add_predicate",
            "location": 4864,
            "return": [],
            "arguments": {
                "p": [],
                "reason": []
            }
        },
        "cdcl_state_bounds.alpha_sharp": {
            "name": "alpha_sharp",
            "location": 4887,
            "return": [],
            "arguments": {
                "states": []
            }
        },
        "cdcl_state_bounds.close_forward": {
            "name": "close_forward",
            "location": 4894,
            "return": [],
            "arguments": {
                "s": []
            }
        },
        "cdcl_state_bounds.forward_explore_from_state": {
            "name": "forward_explore_from_state",
            "location": 4910,
            "return": [],
            "arguments": {
                "src": []
            }
        },
        "cdcl_state_bounds.houdini_frames": {
            "name": "houdini_frames",
            "location": 4965,
            "return": [],
            "arguments": {}
        },
        "cdcl_state_bounds.compute_step_frames": {
            "name": "compute_step_frames",
            "location": 5052,
            "return": [],
            "arguments": {}
        },
        "cdcl_state_bounds.get_invariant": {
            "name": "get_invariant",
            "location": 5075,
            "return": [],
            "arguments": {
                "states_to_exclude": []
            }
        },
        "cdcl_state_bounds.restart_states_and_predicates": {
            "name": "restart_states_and_predicates",
            "location": 5127,
            "return": [],
            "arguments": {}
        },
        "cdcl_state_bounds.new_reachable_states": {
            "name": "new_reachable_states",
            "location": 5154,
            "return": [],
            "arguments": {}
        },
        "cdcl_state_bounds.new_inductive_invariants": {
            "name": "new_inductive_invariants",
            "location": 5167,
            "return": [],
            "arguments": {}
        },
        "cdcl_state_bounds.assert_invariants": {
            "name": "assert_invariants",
            "location": 5188,
            "return": [],
            "arguments": {}
        },
        "cdcl_predicate_bounds.add_state": {
            "name": "add_state",
            "location": 5445,
            "return": [],
            "arguments": {
                "s": []
            }
        },
        "cdcl_predicate_bounds.add_predicate": {
            "name": "add_predicate",
            "location": 5475,
            "return": [],
            "arguments": {
                "p": [],
                "reason": []
            }
        },
        "cdcl_predicate_bounds.alpha_sharp": {
            "name": "alpha_sharp",
            "location": 5498,
            "return": [],
            "arguments": {
                "states": []
            }
        },
        "cdcl_predicate_bounds.close_forward": {
            "name": "close_forward",
            "location": 5505,
            "return": [],
            "arguments": {
                "s": []
            }
        },
        "cdcl_predicate_bounds.forward_explore_from_states": {
            "name": "forward_explore_from_states",
            "location": 5521,
            "return": [],
            "arguments": {
                "src": []
            }
        },
        "cdcl_predicate_bounds.houdini_frames": {
            "name": "houdini_frames",
            "location": 5570,
            "return": [],
            "arguments": {}
        },
        "cdcl_predicate_bounds.get_invariant": {
            "name": "get_invariant",
            "location": 5666,
            "return": [],
            "arguments": {
                "top_clauses": [],
                "states_to_exclude": []
            }
        },
        "cdcl_predicate_bounds.new_reachable_states": {
            "name": "new_reachable_states",
            "location": 5700,
            "return": [],
            "arguments": {}
        },
        "cdcl_predicate_bounds.assert_invariants": {
            "name": "assert_invariants",
            "location": 5711,
            "return": [],
            "arguments": {}
        },
        "primal_dual_houdini.save_algorithm_state": {
            "name": "save_algorithm_state",
            "location": 5949,
            "return": [],
            "arguments": {}
        },
        "primal_dual_houdini.restart_from_file": {
            "name": "restart_from_file",
            "location": 5973,
            "return": [],
            "arguments": {
                "fn": []
            }
        },
        "primal_dual_houdini.get_map": {
            "name": "get_map",
            "location": 6029,
            "return": [],
            "arguments": {
                "top_clauses": []
            }
        },
        "primal_dual_houdini.add_state": {
            "name": "add_state",
            "location": 6034,
            "return": [],
            "arguments": {
                "s": [],
                "internal_cti": []
            }
        },
        "primal_dual_houdini.add_transition": {
            "name": "add_transition",
            "location": 6135,
            "return": [],
            "arguments": {
                "i": [],
                "j": []
            }
        },
        "primal_dual_houdini._add_predicate": {
            "name": "_add_predicate",
            "location": 6150,
            "return": [],
            "arguments": {
                "p": []
            }
        },
        "primal_dual_houdini.add_predicate_and_subclauses": {
            "name": "add_predicate_and_subclauses",
            "location": 6191,
            "return": [],
            "arguments": {
                "top_p": []
            }
        },
        "primal_dual_houdini.close_forward": {
            "name": "close_forward",
            "location": 6201,
            "return": [],
            "arguments": {
                "s": [],
                "include_internal_ctis": []
            }
        },
        "primal_dual_houdini.dual_close_forward": {
            "name": "dual_close_forward",
            "location": 6218,
            "return": [],
            "arguments": {
                "s": []
            }
        },
        "primal_dual_houdini.forward_explore_from_states": {
            "name": "forward_explore_from_states",
            "location": 6234,
            "return": [],
            "arguments": {
                "src": []
            }
        },
        "primal_dual_houdini.houdini_frames": {
            "name": "houdini_frames",
            "location": 6284,
            "return": [],
            "arguments": {}
        },
        "primal_dual_houdini.compute_step_frames": {
            "name": "compute_step_frames",
            "location": 6387,
            "return": [],
            "arguments": {}
        },
        "primal_dual_houdini.dual_houdini_frames": {
            "name": "dual_houdini_frames",
            "location": 6411,
            "return": [],
            "arguments": {}
        },
        "primal_dual_houdini.compute_roots": {
            "name": "compute_roots",
            "location": 6595,
            "return": [],
            "arguments": {
                "s": [],
                "pos": [],
                "ps": [],
                "a": []
            }
        },
        "primal_dual_houdini.forward_explore_from_predicates": {
            "name": "forward_explore_from_predicates",
            "location": 6647,
            "return": [],
            "arguments": {
                "src": []
            }
        },
        "primal_dual_houdini.find_dual_edge": {
            "name": "find_dual_edge",
            "location": 6763,
            "return": [],
            "arguments": {
                "pos": [],
                "r": [],
                "goal": [],
                "soft_goals": [],
                "n_ps": []
            }
        },
        "primal_dual_houdini.find_dual_backward_transition": {
            "name": "find_dual_backward_transition",
            "location": 7115,
            "return": [],
            "arguments": {
                "pos": [],
                "r": [],
                "goals": []
            }
        },
        "primal_dual_houdini.new_reachable_states": {
            "name": "new_reachable_states",
            "location": 7333,
            "return": [],
            "arguments": {}
        },
        "primal_dual_houdini.new_inductive_invariants": {
            "name": "new_inductive_invariants",
            "location": 7346,
            "return": [],
            "arguments": {}
        },
        "primal_dual_houdini.assert_invariants": {
            "name": "assert_invariants",
            "location": 7366,
            "return": [],
            "arguments": {}
        },
        "primal_dual_houdini.print_status_and_check_termination": {
            "name": "print_status_and_check_termination",
            "location": 7386,
            "return": [],
            "arguments": {}
        },
        "MonotoneFunction.__init__": {
            "name": "__init__",
            "location": 7677,
            "return": [],
            "arguments": {
                "self": [],
                "dms": []
            }
        },
        "MonotoneFunction.assert_points": {
            "name": "assert_points",
            "location": 7689,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MonotoneFunction.leq": {
            "name": "leq",
            "location": 7703,
            "return": [],
            "arguments": {
                "self": [],
                "xs": [],
                "ys": []
            }
        },
        "MonotoneFunction.__getitem__": {
            "name": "__getitem__",
            "location": 7712,
            "return": [],
            "arguments": {
                "self": [],
                "xs": []
            }
        },
        "MonotoneFunction.__setitem__": {
            "name": "__setitem__",
            "location": 7721,
            "return": [],
            "arguments": {
                "self": [],
                "xs": [],
                "v": []
            }
        },
        "MonotoneFunction.seed": {
            "name": "seed",
            "location": 7731,
            "return": [],
            "arguments": {
                "self": [],
                "constraints": []
            }
        },
        "MonotoneFunction.to_elems": {
            "name": "to_elems",
            "location": 7850,
            "return": [],
            "arguments": {
                "self": [],
                "xs": []
            }
        },
        "minimize_clause.to_clause": {
            "name": "to_clause",
            "location": 8045,
            "return": [],
            "arguments": {
                "s": []
            }
        },
        "minimize_clause.f": {
            "name": "f",
            "location": 8051,
            "return": [],
            "arguments": {
                "s": []
            }
        },
        "SeparabilityMap.__init__": {
            "name": "__init__",
            "location": 8196,
            "return": [],
            "arguments": {
                "self": [],
                "states": [],
                "predicates": []
            }
        },
        "SeparabilityMap._new_states": {
            "name": "_new_states",
            "location": 8205,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SeparabilityMap.separate": {
            "name": "separate",
            "location": 8213,
            "return": [],
            "arguments": {
                "self": [],
                "pos": [],
                "neg": [],
                "ps": []
            }
        },
        "SeparabilityMap._new_separator": {
            "name": "_new_separator",
            "location": 8260,
            "return": [],
            "arguments": {
                "self": [],
                "pos": [],
                "neg": [],
                "ps": []
            }
        },
        "cdcl_invariant.safe": {
            "name": "safe",
            "location": 8294,
            "return": [],
            "arguments": {
                "s": []
            }
        },
        "cdcl_invariant.add_state": {
            "name": "add_state",
            "location": 8303,
            "return": [],
            "arguments": {
                "s": []
            }
        },
        "cdcl_invariant.find_inv": {
            "name": "find_inv",
            "location": 8320,
            "return": [],
            "arguments": {
                "k": []
            }
        },
        "cdcl_invariant.alpha_sharp": {
            "name": "alpha_sharp",
            "location": 8409,
            "return": [],
            "arguments": {
                "states": []
            }
        },
        "cdcl_invariant.close_forward": {
            "name": "close_forward",
            "location": 8419,
            "return": [],
            "arguments": {
                "s": []
            }
        },
        "cdcl_invariant.forward_explore_relaxed": {
            "name": "forward_explore_relaxed",
            "location": 8448,
            "return": [],
            "arguments": {
                "a": []
            }
        },
        "cdcl_invariant.check_inductive": {
            "name": "check_inductive",
            "location": 8497,
            "return": [],
            "arguments": {
                "a": []
            }
        },
        "incremental_induction_graph.get_from_cache": {
            "name": "get_from_cache",
            "location": 8907,
            "return": [],
            "arguments": {
                "ps": [],
                "qs": []
            }
        },
        "incremental_induction_graph.check_dual_edge": {
            "name": "check_dual_edge",
            "location": 8917,
            "return": [],
            "arguments": {
                "ps": [],
                "qs": []
            }
        },
        "HoareQuery.__str__.str_seed": {
            "name": "str_seed",
            "location": 918,
            "return": [],
            "arguments": {
                "seed": []
            }
        },
        "check_dual_edge_optimize_multiprocessing_helper.send_result": {
            "name": "send_result",
            "location": 1068,
            "return": [],
            "arguments": {
                "hq": [],
                "valid": [],
                "cti": []
            }
        },
        "check_dual_edge_optimize_multiprocessing_helper.validate_cti": {
            "name": "validate_cti",
            "location": 1073,
            "return": [],
            "arguments": {
                "prestate": [],
                "poststate": []
            }
        },
        "check_dual_edge_optimize_multiprocessing_helper.recv_unsats": {
            "name": "recv_unsats",
            "location": 1081,
            "return": [],
            "arguments": {}
        },
        "check_dual_edge_optimize_multiprocessing_helper.known_to_be_unsat": {
            "name": "known_to_be_unsat",
            "location": 1089,
            "return": [],
            "arguments": {
                "hq": []
            }
        },
        "check_dual_edge_optimize_multiprocessing_helper.get_solver": {
            "name": "get_solver",
            "location": 1101,
            "return": [],
            "arguments": {
                "hq": []
            }
        },
        "map_clause_state_interaction_instantiate.ev.get_term": {
            "name": "get_term",
            "location": 2289,
            "return": [],
            "arguments": {
                "t": []
            }
        },
        "MultiSubclausesMapICE._constrain_domain_independence.destruct_variable_equality": {
            "name": "destruct_variable_equality",
            "location": 2982,
            "return": [],
            "arguments": {
                "lit": []
            }
        },
        "MultiSubclausesMapICE._constrain_domain_independence.domain_independent_literals_for_var": {
            "name": "domain_independent_literals_for_var",
            "location": 3002,
            "return": [],
            "arguments": {
                "lits": [],
                "v": []
            }
        },
        "MultiSubclausesMapBySizeSep._constrain_domain_independence.destruct_variable_equality": {
            "name": "destruct_variable_equality",
            "location": 3284,
            "return": [],
            "arguments": {
                "lit": []
            }
        },
        "MultiSubclausesMapBySizeSep._constrain_domain_independence.domain_independent_literals_for_var": {
            "name": "domain_independent_literals_for_var",
            "location": 3304,
            "return": [],
            "arguments": {
                "lits": [],
                "v": []
            }
        },
        "forward_explore_marco.SubclausesMap.__init__": {
            "name": "__init__",
            "location": 3675,
            "return": [],
            "arguments": {
                "self": [],
                "top_clause": []
            }
        },
        "forward_explore_marco.SubclausesMap.reset_solver": {
            "name": "reset_solver",
            "location": 3692,
            "return": [],
            "arguments": {
                "self": [],
                "up": [],
                "down": []
            }
        },
        "forward_explore_marco.SubclausesMap.next_seed": {
            "name": "next_seed",
            "location": 3703,
            "return": [],
            "arguments": {
                "self": [],
                "bias": []
            }
        },
        "forward_explore_marco.SubclausesMap.block_down": {
            "name": "block_down",
            "location": 3733,
            "return": [],
            "arguments": {
                "self": [],
                "frompoint": []
            }
        },
        "forward_explore_marco.SubclausesMap.block_up": {
            "name": "block_up",
            "location": 3739,
            "return": [],
            "arguments": {
                "self": [],
                "frompoint": []
            }
        },
        "forward_explore_marco.SubclausesMap.to_clause": {
            "name": "to_clause",
            "location": 3744,
            "return": [],
            "arguments": {
                "self": [],
                "s": []
            }
        },
        "forward_explore.label": {
            "name": "label",
            "location": 4029,
            "return": [],
            "arguments": {
                "s": []
            }
        },
        "repeated_houdini_bounds.forward_explore_from_state.alpha_a": {
            "name": "alpha_a",
            "location": 4348,
            "return": [],
            "arguments": {
                "states": []
            }
        },
        "cdcl_state_bounds.forward_explore_from_state.alpha_a": {
            "name": "alpha_a",
            "location": 4931,
            "return": [],
            "arguments": {
                "states": []
            }
        },
        "cdcl_state_bounds.get_invariant.check_sep": {
            "name": "check_sep",
            "location": 5085,
            "return": [],
            "arguments": {
                "s": [],
                "pos": []
            }
        },
        "cdcl_predicate_bounds.forward_explore_from_states.alpha_a": {
            "name": "alpha_a",
            "location": 5538,
            "return": [],
            "arguments": {
                "states": []
            }
        },
        "cdcl_predicate_bounds.get_invariant.check_sep": {
            "name": "check_sep",
            "location": 5678,
            "return": [],
            "arguments": {
                "s": []
            }
        },
        "primal_dual_houdini.forward_explore_from_states.alpha_a": {
            "name": "alpha_a",
            "location": 6247,
            "return": [],
            "arguments": {
                "states": []
            }
        },
        "primal_dual_houdini.compute_roots.v": {
            "name": "v",
            "location": 6609,
            "return": [],
            "arguments": {
                "i": []
            }
        },
        "primal_dual_houdini.compute_roots.f": {
            "name": "f",
            "location": 6630,
            "return": [],
            "arguments": {
                "r": []
            }
        },
        "primal_dual_houdini.find_dual_backward_transition.find_fixpoint": {
            "name": "find_fixpoint",
            "location": 7138,
            "return": [],
            "arguments": {
                "s": []
            }
        },
        "primal_dual_houdini.find_dual_backward_transition.add_p": {
            "name": "add_p",
            "location": 7168,
            "return": [],
            "arguments": {
                "p": []
            }
        },
        "primal_dual_houdini.find_dual_backward_transition.check_qs": {
            "name": "check_qs",
            "location": 7175,
            "return": [],
            "arguments": {
                "qs_seed": [],
                "ps_seed": [],
                "optimize": []
            }
        },
        "cdcl_invariant.forward_explore_relaxed.alpha_a": {
            "name": "alpha_a",
            "location": 8460,
            "return": [],
            "arguments": {
                "states": []
            }
        },
        "enumerate_reachable_states.block_state": {
            "name": "block_state",
            "location": 8822,
            "return": [],
            "arguments": {
                "t": [],
                "m": []
            }
        },
        "incremental_induction_graph.check_dual_edge.check": {
            "name": "check",
            "location": 8918,
            "return": [],
            "arguments": {
                "ps": [],
                "qs": []
            }
        },
        "check_dual_edge.check": {
            "name": "check",
            "location": 810,
            "return": [],
            "arguments": {
                "ps_seed": [],
                "minimize": []
            }
        },
        "check_dual_edge_optimize.check_old": {
            "name": "check_old",
            "location": 1844,
            "return": [],
            "arguments": {
                "ps_seed": []
            }
        },
        "MultiSubclausesMapICE._constrain_domain_independence.destruct_variable_equality.is_var": {
            "name": "is_var",
            "location": 2990,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "MultiSubclausesMapBySizeSep._constrain_domain_independence.destruct_variable_equality.is_var": {
            "name": "is_var",
            "location": 3292,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "primal_dual_houdini.find_dual_edge.check_sep": {
            "name": "check_sep",
            "location": 6816,
            "return": [],
            "arguments": {
                "s": []
            }
        },
        "primal_dual_houdini.find_dual_edge.cti_solver_add_p": {
            "name": "cti_solver_add_p",
            "location": 6875,
            "return": [],
            "arguments": {
                "p": []
            }
        },
        "primal_dual_houdini.find_dual_edge.add_p": {
            "name": "add_p",
            "location": 6883,
            "return": [],
            "arguments": {
                "p": []
            }
        },
        "primal_dual_houdini.find_dual_edge.check_q": {
            "name": "check_q",
            "location": 6887,
            "return": [],
            "arguments": {
                "q_seed": [],
                "ps_seed": [],
                "optimize": []
            }
        },
        "SubclausesMapTurbo._new_states.f": {
            "name": "f",
            "location": 2799,
            "return": [],
            "arguments": {
                "s": []
            }
        },
        "SubclausesMapTurbo._new_predicates.f": {
            "name": "f",
            "location": 2848,
            "return": [],
            "arguments": {
                "s": []
            }
        }
    },
    "mypyvy-master/src/printers.py": {
        "get_sort": {
            "name": "get_sort",
            "location": 13,
            "return": [
                "str"
            ],
            "arguments": {
                "name": [
                    "str"
                ]
            }
        },
        "get_constant": {
            "name": "get_constant",
            "location": 19,
            "return": [
                "dict[, ]",
                "dict[int, int]"
            ],
            "arguments": {
                "name": [
                    "str",
                    "typing.IO",
                    "None"
                ]
            }
        },
        "is_relation": {
            "name": "is_relation",
            "location": 25,
            "return": [
                "bool"
            ],
            "arguments": {
                "name": [
                    "str",
                    "typing.Type"
                ]
            }
        },
        "get_relation": {
            "name": "get_relation",
            "location": 30,
            "return": [
                "dict[typing.Any, str]",
                "dict[, ]",
                "typing.Type",
                "dict[str, str]",
                "list[str]",
                "str"
            ],
            "arguments": {
                "name": [
                    "str"
                ]
            }
        },
        "is_function": {
            "name": "is_function",
            "location": 36,
            "return": [
                "bool"
            ],
            "arguments": {
                "name": [
                    "str",
                    "typing.Type",
                    "dict[, ]"
                ]
            }
        },
        "get_function": {
            "name": "get_function",
            "location": 41,
            "return": [
                "dict[, ]",
                "dict[str, dict[str, str]]"
            ],
            "arguments": {
                "name": [
                    "str",
                    "typing.Any",
                    "None",
                    "dict[, ]",
                    "dict[str, str]"
                ]
            }
        },
        "get_ordinal": {
            "name": "get_ordinal",
            "location": 47,
            "return": [
                "int"
            ],
            "arguments": {
                "order": [
                    "dict[str, typing.Any]",
                    "dict[str, dict[str, typing.Any]]",
                    "dict[str, float]",
                    "dict[, ]"
                ],
                "elt": [
                    "str",
                    "bool",
                    "list[]",
                    "None",
                    "typing.Sequence[str]"
                ]
            }
        },
        "ordered_by_printer": {
            "name": "ordered_by_printer",
            "location": 57,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "struct": [
                    "str",
                    "int",
                    "list[]"
                ],
                "sortdecl": [
                    "dict[str, typing.Any]",
                    "typing.Mapping"
                ],
                "elt": [
                    "str",
                    "int",
                    "list[]"
                ],
                "args": []
            }
        },
        "set_printer": {
            "name": "set_printer",
            "location": 86,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "struct": [
                    "set[T]",
                    "int",
                    "dict[, ]"
                ],
                "s": [
                    "str",
                    "int",
                    "typing.Sequence[str]"
                ],
                "elt": [
                    "str",
                    "None",
                    "list[str]",
                    "dict[str, dict[str, str]]",
                    "int"
                ],
                "args": []
            }
        },
        "const_printer": {
            "name": "const_printer",
            "location": 106,
            "return": [
                "bytes"
            ],
            "arguments": {
                "struct": [
                    "bytes"
                ],
                "s": [
                    "bytes"
                ],
                "elt": [
                    "bytes"
                ],
                "args": []
            }
        },
        "option_printer": {
            "name": "option_printer",
            "location": 114,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "struct": [
                    "str",
                    "None",
                    "dict[, ]"
                ],
                "s": [
                    "str",
                    "int"
                ],
                "elt": [
                    "str",
                    "None",
                    "float"
                ],
                "args": []
            }
        },
        "log_printer": {
            "name": "log_printer",
            "location": 165,
            "return": [],
            "arguments": {
                "struct": [
                    "str",
                    "int",
                    "typing.Callable[, ]"
                ],
                "s": [
                    "str",
                    "int",
                    "typing.Callable[, ]"
                ],
                "elt": [
                    "str",
                    "int",
                    "typing.Callable[, ]"
                ],
                "args": []
            }
        },
        "log_printer.default_values": {
            "name": "default_values",
            "location": 176,
            "return": [
                "list[list[]]"
            ],
            "arguments": {}
        },
        "log_printer.assert_valid_rel_or_func": {
            "name": "assert_valid_rel_or_func",
            "location": 179,
            "return": [
                "None"
            ],
            "arguments": {
                "rel_or_func": []
            }
        },
        "log_printer.value_to_str": {
            "name": "value_to_str",
            "location": 234,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "vs": [],
                "sort": []
            }
        },
        "log_printer.entry_to_str": {
            "name": "entry_to_str",
            "location": 240,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "e": [],
                "wf": []
            }
        }
    },
    "mypyvy-master/src/relaxed_traces.py": {
        "relaxed_program": {
            "name": "relaxed_program",
            "location": 20,
            "return": [],
            "arguments": {
                "prog": []
            }
        },
        "relativize_decl": {
            "name": "relativize_decl",
            "location": 72,
            "return": [],
            "arguments": {
                "d": [
                    "bytes"
                ],
                "actives": [
                    "str",
                    "typing.Type"
                ],
                "scope": [
                    "typing.Callable[, ]",
                    "int"
                ],
                "inline_relax_actives": [
                    "typing.Mapping",
                    "bool",
                    "dict[, ]",
                    "typing.Deque"
                ]
            }
        },
        "relaxation_action_def": {
            "name": "relaxation_action_def",
            "location": 90,
            "return": [],
            "arguments": {
                "prog": [],
                "actives": [
                    "None",
                    "int",
                    "float"
                ],
                "fresh": [
                    "bool"
                ]
            }
        },
        "relax_actives_action_chunk": {
            "name": "relax_actives_action_chunk",
            "location": 153,
            "return": [
                "tuple[typing.Union[tuple[],list[]]]"
            ],
            "arguments": {
                "scope": [
                    "str",
                    "typing.Callable[..., collections.abc.Awaitable[]]"
                ],
                "actives": []
            }
        },
        "dict_val_from_rel_name": {
            "name": "dict_val_from_rel_name",
            "location": 230,
            "return": [],
            "arguments": {
                "name": [
                    "str",
                    "typing.Sequence[str]"
                ],
                "m": []
            }
        },
        "first_relax_step_idx": {
            "name": "first_relax_step_idx",
            "location": 237,
            "return": [
                "list[dict[str, typing.Any]]",
                "dict[, ]",
                "int",
                "set[int]",
                "list[]"
            ],
            "arguments": {
                "trns": [
                    "float",
                    "list[str]",
                    "bool",
                    "tuple[int]",
                    "dict[str, int]"
                ]
            }
        },
        "all_relax_step_idx": {
            "name": "all_relax_step_idx",
            "location": 243,
            "return": [
                "list[]"
            ],
            "arguments": {
                "trns": [
                    "int",
                    "list[int]"
                ]
            }
        },
        "active_rel": {
            "name": "active_rel",
            "location": 249,
            "return": [
                "str",
                "tuple[typing.Union[typing.Type,typing.Type]]",
                "int",
                "typing.Pattern"
            ],
            "arguments": {
                "sort": [
                    "typing.Callable[, ]"
                ]
            }
        },
        "active_rel_by_sort": {
            "name": "active_rel_by_sort",
            "location": 254,
            "return": [],
            "arguments": {
                "prog": []
            }
        },
        "active_var": {
            "name": "active_var",
            "location": 257,
            "return": [],
            "arguments": {
                "name": [
                    "str",
                    "list[str]"
                ],
                "sort_name": [
                    "str",
                    "list[str]"
                ]
            }
        },
        "closing_qa_cycle": {
            "name": "closing_qa_cycle",
            "location": 260,
            "return": [
                "bool"
            ],
            "arguments": {
                "prog": [
                    "int",
                    "None",
                    "dict[int, tuple[typing.Union[int,int]]]"
                ],
                "free_vars_sorts": [
                    "list[syntax.SortDecl]",
                    "list[int]"
                ],
                "existentially_quantified_sorts": [
                    "list[syntax.SortDecl]",
                    "list[int]"
                ]
            }
        },
        "is_rel_blocking_relax": {
            "name": "is_rel_blocking_relax",
            "location": 273,
            "return": [
                "bool"
            ],
            "arguments": {
                "trns": [],
                "derived_rel": [
                    "float",
                    "str"
                ]
            }
        },
        "is_rel_blocking_relax_step": {
            "name": "is_rel_blocking_relax_step",
            "location": 280,
            "return": [],
            "arguments": {
                "trns": [
                    "str",
                    "typing.Type"
                ],
                "idx": [
                    "str",
                    "typing.Type"
                ],
                "derived_rel": [
                    "str",
                    "dict[str, typing.Any]",
                    "typing.Type",
                    "bool"
                ]
            }
        },
        "derived_rels_candidates_from_trace": {
            "name": "derived_rels_candidates_from_trace",
            "location": 302,
            "return": [],
            "arguments": {
                "trns": [],
                "more_traces": [
                    "bool",
                    "str"
                ],
                "max_conj_size": [
                    "int",
                    "None"
                ],
                "max_free_vars": [
                    "int",
                    "float"
                ]
            }
        },
        "replace_relaxation_action": {
            "name": "replace_relaxation_action",
            "location": 394,
            "return": [],
            "arguments": {
                "prog": [
                    "dict[, ]",
                    "bytes",
                    "typing.MutableMapping",
                    "bool"
                ],
                "new_relax_action": [
                    "list[]",
                    "list[float]",
                    "str",
                    "list[int]",
                    "int"
                ]
            }
        },
        "transition_decl_from_name": {
            "name": "transition_decl_from_name",
            "location": 401,
            "return": [],
            "arguments": {
                "transition_name": [
                    "str",
                    "float"
                ]
            }
        },
        "relativized_assert_decl": {
            "name": "relativized_assert_decl",
            "location": 406,
            "return": [],
            "arguments": {
                "formula": [
                    "int",
                    "list[]",
                    "str",
                    "None"
                ]
            }
        },
        "active_rels_mapping": {
            "name": "active_rels_mapping",
            "location": 414,
            "return": [
                "dict[, ]"
            ],
            "arguments": {}
        },
        "diagram_trace_to_explicitly_relaxed_trace_decl": {
            "name": "diagram_trace_to_explicitly_relaxed_trace_decl",
            "location": 427,
            "return": [],
            "arguments": {
                "trace": [
                    "list[typing.Union[int,float]]",
                    "int",
                    "list[str]",
                    "list[tuple[typing.Union[str,int]]]"
                ],
                "ending_property": [
                    "list[str]",
                    "bytes",
                    "list[T]"
                ]
            }
        },
        "diagram_trace_to_explicitly_relaxed_trace": {
            "name": "diagram_trace_to_explicitly_relaxed_trace",
            "location": 455,
            "return": [
                "None"
            ],
            "arguments": {
                "trace": [
                    "str"
                ],
                "safety": [
                    "set[str]",
                    "list[]"
                ]
            }
        },
        "consts_exist_axioms": {
            "name": "consts_exist_axioms",
            "location": 513,
            "return": [
                "list[]"
            ],
            "arguments": {
                "prog": []
            }
        },
        "functions_total_axioms": {
            "name": "functions_total_axioms",
            "location": 526,
            "return": [
                "list[]"
            ],
            "arguments": {
                "prog": []
            }
        },
        "relaxed_semantics_solver": {
            "name": "relaxed_semantics_solver",
            "location": 554,
            "return": [],
            "arguments": {
                "prog": [
                    "tuple[]"
                ]
            }
        },
        "check_relaxed_bmc": {
            "name": "check_relaxed_bmc",
            "location": 563,
            "return": [],
            "arguments": {
                "safety": [
                    "str",
                    "int",
                    "None"
                ],
                "depth": [
                    "str",
                    "int",
                    "None"
                ],
                "preconds": [
                    "None",
                    "str",
                    "int"
                ],
                "minimize": [
                    "None",
                    "str",
                    "int"
                ]
            }
        },
        "RelationFact.__init__": {
            "name": "__init__",
            "location": 170,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "rel": [
                    "int",
                    "float"
                ],
                "els": [
                    "int",
                    "float"
                ],
                "polarity": [
                    "int",
                    "float"
                ]
            }
        },
        "RelationFact.as_expr": {
            "name": "as_expr",
            "location": 175,
            "return": [],
            "arguments": {
                "self": [],
                "els_trans": [
                    "typing.Callable[str, str]",
                    "str",
                    "None"
                ]
            }
        },
        "RelationFact.involved_elms": {
            "name": "involved_elms",
            "location": 181,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RelationFact._is_positive": {
            "name": "_is_positive",
            "location": 184,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RelationFact.__repr__": {
            "name": "__repr__",
            "location": 187,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "RelationFact.__str__": {
            "name": "__str__",
            "location": 190,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "FunctionFact.__init__": {
            "name": "__init__",
            "location": 194,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "func": [
                    "bool",
                    "str",
                    "None"
                ],
                "param_els": [
                    "bool",
                    "str",
                    "None"
                ],
                "res_elm": [
                    "bool",
                    "str",
                    "None"
                ]
            }
        },
        "FunctionFact.as_expr": {
            "name": "as_expr",
            "location": 199,
            "return": [],
            "arguments": {
                "self": [],
                "els_trans": [
                    "typing.Callable[str, str]"
                ]
            }
        },
        "FunctionFact.involved_elms": {
            "name": "involved_elms",
            "location": 203,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FunctionFact.__repr__": {
            "name": "__repr__",
            "location": 206,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "FunctionFact.__str__": {
            "name": "__str__",
            "location": 209,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "InequalityFact.__init__": {
            "name": "__init__",
            "location": 213,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "lhs": [
                    "int",
                    "float"
                ],
                "rhs": [
                    "int",
                    "float"
                ]
            }
        },
        "InequalityFact.as_expr": {
            "name": "as_expr",
            "location": 217,
            "return": [],
            "arguments": {
                "self": [],
                "els_trans": [
                    "typing.Callable[str, str]"
                ]
            }
        },
        "InequalityFact.involved_elms": {
            "name": "involved_elms",
            "location": 221,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "InequalityFact.__repr__": {
            "name": "__repr__",
            "location": 224,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "InequalityFact.__str__": {
            "name": "__str__",
            "location": 227,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "Z3RelaxedSemanticsTranslator.__init__": {
            "name": "__init__",
            "location": 478,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "scope": [
                    "int",
                    "set[]",
                    "list[dict[str, str]]",
                    "dict[, ]",
                    "list[str]"
                ],
                "num_states": [
                    "int",
                    "tuple[typing.Union[int,int]]",
                    "list[str]"
                ]
            }
        },
        "Z3RelaxedSemanticsTranslator._generate_active_rels": {
            "name": "_generate_active_rels",
            "location": 489,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "scope": []
            }
        },
        "Z3RelaxedSemanticsTranslator.translate_expr": {
            "name": "translate_expr",
            "location": 498,
            "return": [
                "typing.Pattern"
            ],
            "arguments": {
                "self": [],
                "expr": [
                    "str",
                    "dict[str, typing.Any]",
                    "typing.Callable[None, None]"
                ]
            }
        },
        "Z3RelaxedSemanticsTranslator.translate_transition": {
            "name": "translate_transition",
            "location": 505,
            "return": [
                "dict[str, typing.Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "t": [
                    "str",
                    "dict[str, typing.Any]",
                    "float",
                    "typing.Type"
                ],
                "index": [
                    "int"
                ]
            }
        }
    },
    "mypyvy-master/src/rethink.py": {
        "get_cti": {
            "name": "get_cti",
            "location": 14,
            "return": [
                "None",
                "tuple[Diagram]"
            ],
            "arguments": {
                "s": [
                    "str",
                    "typing.Iterable[str]",
                    "typing.Callable[..., T]",
                    "bool"
                ],
                "candidate": [
                    "str",
                    "typing.Iterable[str]",
                    "typing.Callable[..., T]",
                    "bool"
                ]
            }
        },
        "bmc_upto_bound": {
            "name": "bmc_upto_bound",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "s": [
                    "str"
                ],
                "post": [
                    "bool"
                ],
                "bound": [
                    "bool"
                ],
                "preconds": [
                    "None",
                    "bool"
                ],
                "minimize": [
                    "None",
                    "bool"
                ],
                "relaxed_semantics": [
                    "bool"
                ]
            }
        },
        "itp_gen": {
            "name": "itp_gen",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "s": []
            }
        },
        "valid_in_initial_frame": {
            "name": "valid_in_initial_frame",
            "location": 68,
            "return": [
                "bool"
            ],
            "arguments": {
                "s": [
                    "list[syntax.Expr]",
                    "str",
                    "dict[str, bool]",
                    "None",
                    "int"
                ],
                "inits": [
                    "list[syntax.Expr]",
                    "str",
                    "dict[str, bool]",
                    "None",
                    "int"
                ],
                "e": [
                    "list[syntax.Expr]",
                    "str",
                    "dict[str, bool]",
                    "None",
                    "int"
                ]
            }
        },
        "brat": {
            "name": "brat",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "s": [
                    "str"
                ]
            }
        },
        "brat_next_frame": {
            "name": "brat_next_frame",
            "location": 109,
            "return": [
                "list[syntax.Expr]",
                "list[]"
            ],
            "arguments": {
                "s": [
                    "list[syntax.Expr]",
                    "int"
                ],
                "prev_frame": [
                    "list[syntax.Expr]",
                    "int"
                ],
                "bound": [
                    "int",
                    "str",
                    "None"
                ],
                "inits": [
                    "list[syntax.Expr]",
                    "int",
                    "str",
                    "tuple[]",
                    "list[]",
                    "list[int]"
                ],
                "safety": [
                    "int",
                    "str",
                    "None"
                ],
                "bad_cache": [],
                "minimize": [
                    "int",
                    "str",
                    "None"
                ]
            }
        },
        "new_frame": {
            "name": "new_frame",
            "location": 134,
            "return": [
                "list[]",
                "list[syntax.Expr]"
            ],
            "arguments": {
                "s": [
                    "list[syntax.Expr]",
                    "bytes",
                    "bool",
                    "tuple[]",
                    "list[]"
                ],
                "prev_frame": [
                    "list[syntax.Expr]",
                    "bytes",
                    "tuple[]",
                    "list[]"
                ]
            }
        },
        "post_image_prime_consequence": {
            "name": "post_image_prime_consequence",
            "location": 151,
            "return": [],
            "arguments": {
                "s": [
                    "int",
                    "None",
                    "str"
                ],
                "prev_frame": [
                    "list[syntax.Expr]",
                    "int",
                    "None",
                    "dict[, ]",
                    "str"
                ],
                "inits": [
                    "list[syntax.Expr]",
                    "int",
                    "None",
                    "dict[, ]",
                    "str"
                ],
                "bad_model": [
                    "str",
                    "typing.Iterable[str]",
                    "bool"
                ],
                "gen_order": [
                    "None",
                    "int",
                    "str"
                ]
            }
        },
        "oneshot_compute_inv": {
            "name": "oneshot_compute_inv",
            "location": 168,
            "return": [
                "list[]"
            ],
            "arguments": {
                "s": [
                    "bool"
                ],
                "bound": [
                    "bool"
                ],
                "inits": [
                    "list[syntax.Expr]",
                    "BaseException"
                ],
                "safety": [
                    "bool"
                ],
                "minimize": [
                    "bool"
                ]
            }
        },
        "bmc_prime_consequence": {
            "name": "bmc_prime_consequence",
            "location": 185,
            "return": [],
            "arguments": {
                "s": [
                    "int",
                    "None"
                ],
                "bound": [
                    "int",
                    "list[syntax.Expr]",
                    "typing.Sequence[str]",
                    "str"
                ],
                "inits": [
                    "int",
                    "list[syntax.Expr]",
                    "typing.Sequence[str]",
                    "str"
                ],
                "bad_model": [
                    "str"
                ],
                "relaxed_semantics": [
                    "int",
                    "list[syntax.Expr]",
                    "typing.Sequence[str]",
                    "str"
                ],
                "generalization_order": [
                    "None",
                    "int"
                ]
            }
        },
        "oneshot": {
            "name": "oneshot",
            "location": 196,
            "return": [
                "None"
            ],
            "arguments": {
                "s": [
                    "str",
                    "list[syntax.Expr]",
                    "typing.Callable[, ]"
                ]
            }
        },
        "verify_inductive_invariant": {
            "name": "verify_inductive_invariant",
            "location": 210,
            "return": [
                "None"
            ],
            "arguments": {
                "s": [
                    "str",
                    "typing.AnyStr",
                    "None"
                ],
                "inv": []
            }
        },
        "add_argparsers": {
            "name": "add_argparsers",
            "location": 220,
            "return": [
                "list[]"
            ],
            "arguments": {
                "subparsers": []
            }
        },
        "post_image_prime_consequence.prev_frame_constraint": {
            "name": "prev_frame_constraint",
            "location": 154,
            "return": [
                "bool"
            ],
            "arguments": {
                "diag": []
            }
        },
        "bmc_prime_consequence.bmc_constraint": {
            "name": "bmc_constraint",
            "location": 187,
            "return": [
                "bool"
            ],
            "arguments": {
                "diag": []
            }
        }
    },
    "mypyvy-master/src/semantics.py": {
        "histogram": {
            "name": "histogram",
            "location": 22,
            "return": [],
            "arguments": {
                "d": [
                    "dict[str, str]"
                ]
            }
        },
        "try_printed_by": {
            "name": "try_printed_by",
            "location": 462,
            "return": [
                "None"
            ],
            "arguments": {
                "struct": [
                    "str",
                    "float",
                    "int"
                ],
                "s": [
                    "bool"
                ],
                "elt": [
                    "str",
                    "float",
                    "int"
                ]
            }
        },
        "print_element": {
            "name": "print_element",
            "location": 481,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "struct": [
                    "str",
                    "int"
                ],
                "s": [
                    "list[list[]]",
                    "int",
                    "typing.Mapping",
                    "dict[str, str]"
                ],
                "elt": [
                    "str",
                    "int"
                ]
            }
        },
        "print_tuple": {
            "name": "print_tuple",
            "location": 490,
            "return": [
                "str"
            ],
            "arguments": {
                "struct": [
                    "list[]",
                    "str",
                    "typing.Sequence['cirq.Qid']",
                    "int"
                ],
                "arity": [
                    "list[int]",
                    "list[]",
                    "bool",
                    "list[float]",
                    "str"
                ],
                "tup": [
                    "list[int]",
                    "list[]",
                    "bool",
                    "list[float]",
                    "str"
                ]
            }
        },
        "_univ_str": {
            "name": "_univ_str",
            "location": 499,
            "return": [
                "list[str]"
            ],
            "arguments": {
                "struct": [
                    "set[str]",
                    "typing.Callable[, ]",
                    "list[typing.Optional[float]]",
                    "list[tuple[typing.Union[int,int]]]"
                ]
            }
        },
        "_struct_str": {
            "name": "_struct_str",
            "location": 518,
            "return": [
                "str"
            ],
            "arguments": {
                "struct": [
                    "dict[, ]",
                    "dict[str, typing.Any]"
                ],
                "print_immutable": [
                    "bool"
                ],
                "print_negative_tuples": [
                    "None",
                    "bool",
                    "typing.Callable[dict[, ], None]",
                    "list[str]",
                    "str",
                    "BaseException"
                ]
            }
        },
        "FirstOrderStructure.univs": {
            "name": "univs",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FirstOrderStructure.rel_interps": {
            "name": "rel_interps",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FirstOrderStructure.const_interps": {
            "name": "const_interps",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FirstOrderStructure.func_interps": {
            "name": "func_interps",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BareFirstOrderStructure.univs": {
            "name": "univs",
            "location": 90,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BareFirstOrderStructure.rel_interps": {
            "name": "rel_interps",
            "location": 94,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BareFirstOrderStructure.const_interps": {
            "name": "const_interps",
            "location": 98,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BareFirstOrderStructure.func_interps": {
            "name": "func_interps",
            "location": 102,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Trace.__init__": {
            "name": "__init__",
            "location": 107,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "num_states": [
                    "int"
                ]
            }
        },
        "Trace._as_trace": {
            "name": "_as_trace",
            "location": 127,
            "return": [
                "Trace"
            ],
            "arguments": {
                "self": [],
                "indices": []
            }
        },
        "Trace.__str__": {
            "name": "__str__",
            "location": 141,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Trace.as_onestate_formula": {
            "name": "as_onestate_formula",
            "location": 154,
            "return": [],
            "arguments": {
                "self": [],
                "index": [
                    "None",
                    "typing.Type",
                    "str",
                    "int",
                    "typing.Any"
                ]
            }
        },
        "Trace.as_state": {
            "name": "as_state",
            "location": 215,
            "return": [
                "State"
            ],
            "arguments": {
                "self": [],
                "i": [
                    "int",
                    "str"
                ]
            }
        },
        "Trace.eval": {
            "name": "eval",
            "location": 219,
            "return": [],
            "arguments": {
                "self": [],
                "full_expr": [
                    "int",
                    "None",
                    "str"
                ],
                "starting_index": [
                    "int",
                    "None",
                    "str"
                ]
            }
        },
        "State.univs": {
            "name": "univs",
            "location": 334,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "State.immut_rel_interps": {
            "name": "immut_rel_interps",
            "location": 338,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "State.immut_const_interps": {
            "name": "immut_const_interps",
            "location": 342,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "State.immut_func_interps": {
            "name": "immut_func_interps",
            "location": 346,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "State.mut_rel_interps": {
            "name": "mut_rel_interps",
            "location": 350,
            "return": [
                "dict[, ]"
            ],
            "arguments": {
                "self": []
            }
        },
        "State.mut_const_interps": {
            "name": "mut_const_interps",
            "location": 354,
            "return": [
                "dict[, ]"
            ],
            "arguments": {
                "self": []
            }
        },
        "State.mut_func_interps": {
            "name": "mut_func_interps",
            "location": 358,
            "return": [
                "dict[, ]"
            ],
            "arguments": {
                "self": []
            }
        },
        "State.rel_interps": {
            "name": "rel_interps",
            "location": 365,
            "return": [
                "dict[, ]"
            ],
            "arguments": {
                "self": []
            }
        },
        "State.const_interps": {
            "name": "const_interps",
            "location": 369,
            "return": [
                "dict[, ]"
            ],
            "arguments": {
                "self": []
            }
        },
        "State.func_interps": {
            "name": "func_interps",
            "location": 373,
            "return": [
                "dict[, ]"
            ],
            "arguments": {
                "self": []
            }
        },
        "State.__repr__": {
            "name": "__repr__",
            "location": 376,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "State.__str__": {
            "name": "__str__",
            "location": 379,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "State.eval": {
            "name": "eval",
            "location": 382,
            "return": [],
            "arguments": {
                "self": [],
                "e": [
                    "str",
                    "bool",
                    "float",
                    "None"
                ]
            }
        },
        "State.as_onestate_formula": {
            "name": "as_onestate_formula",
            "location": 386,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "State.element_sort": {
            "name": "element_sort",
            "location": 389,
            "return": [],
            "arguments": {
                "self": [],
                "element_name": [
                    "str",
                    "None"
                ]
            }
        },
        "State.fingerprint": {
            "name": "fingerprint",
            "location": 404,
            "return": [
                "tuple[set[]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "State.maybe_substructure": {
            "name": "maybe_substructure",
            "location": 433,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "str",
                    "tuple[typing.Union[float,float]]",
                    "typing.Type"
                ]
            }
        },
        "Trace.eval.go": {
            "name": "go",
            "location": 221,
            "return": [
                "bool"
            ],
            "arguments": {
                "expr": [],
                "index": []
            }
        },
        "_univ_str.key": {
            "name": "key",
            "location": 507,
            "return": [
                "tuple[int]"
            ],
            "arguments": {
                "x": []
            }
        },
        "Trace.eval.go.get_rel": {
            "name": "get_rel",
            "location": 224,
            "return": [],
            "arguments": {
                "d": []
            }
        },
        "Trace.eval.go.get_const": {
            "name": "get_const",
            "location": 231,
            "return": [],
            "arguments": {
                "d": []
            }
        },
        "Trace.eval.go.get_func": {
            "name": "get_func",
            "location": 238,
            "return": [],
            "arguments": {
                "d": []
            }
        },
        "Trace.eval.go.one": {
            "name": "one",
            "location": 292,
            "return": [],
            "arguments": {
                "q": [],
                "tup": []
            }
        }
    },
    "mypyvy-master/src/sep.py": {
        "z3_full_print": {
            "name": "z3_full_print",
            "location": 37,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "max_width": [
                    "int"
                ]
            }
        },
        "sep_main": {
            "name": "sep_main",
            "location": 284,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "solver": []
            }
        },
        "add_argparsers": {
            "name": "add_argparsers",
            "location": 365,
            "return": [
                "list[]"
            ],
            "arguments": {
                "subparsers": []
            }
        },
        "UniversalFixedPrefixSep.__init__": {
            "name": "__init__",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "prefix_sorts": [
                    "list[dict[str, typing.Any]]",
                    "list[int]"
                ],
                "states": [
                    "list[dict[str, typing.Any]]",
                    "list[int]"
                ]
            }
        },
        "UniversalFixedPrefixSep.separate": {
            "name": "separate",
            "location": 129,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pos": [
                    "tuple[]"
                ],
                "neg": [
                    "tuple[]"
                ]
            }
        },
        "UniversalFixedPrefixSep.state_v": {
            "name": "state_v",
            "location": 154,
            "return": [],
            "arguments": {
                "self": [],
                "i": [
                    "int",
                    "list[str]",
                    "list[float]",
                    "list[int]"
                ]
            }
        },
        "UniversalFixedPrefixSep._eval_sep": {
            "name": "_eval_sep",
            "location": 162,
            "return": [],
            "arguments": {
                "self": [],
                "state": [
                    "str",
                    "bool"
                ],
                "st_prefix": [
                    "str",
                    "bool"
                ]
            }
        },
        "UniversalFixedPrefixSep.__init__.print_terms": {
            "name": "print_terms",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "msg": [
                    "typing.Text"
                ]
            }
        },
        "UniversalFixedPrefixSep._eval_sep.p": {
            "name": "p",
            "location": 166,
            "return": [],
            "arguments": {
                "st": [],
                "must_be_new": [
                    "bool"
                ]
            }
        },
        "UniversalFixedPrefixSep._eval_sep.e": {
            "name": "e",
            "location": 180,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "i": []
            }
        },
        "UniversalFixedPrefixSep._eval_sep.is_e": {
            "name": "is_e",
            "location": 185,
            "return": [],
            "arguments": {
                "i": []
            }
        },
        "UniversalFixedPrefixSep._eval_sep.ee": {
            "name": "ee",
            "location": 187,
            "return": [],
            "arguments": {
                "i": []
            }
        },
        "UniversalFixedPrefixSep._eval_sep.lit": {
            "name": "lit",
            "location": 199,
            "return": [],
            "arguments": {
                "e": [],
                "polarity": []
            }
        },
        "UniversalFixedPrefixSep._eval_sep.to_z3": {
            "name": "to_z3",
            "location": 242,
            "return": [
                "bool"
            ],
            "arguments": {
                "e": []
            }
        }
    },
    "mypyvy-master/src/sexp.py": {
        "subst": {
            "name": "subst",
            "location": 48,
            "return": [
                "Comment",
                "str",
                "SList"
            ],
            "arguments": {
                "assignment": [],
                "e": []
            }
        },
        "symbols_used": {
            "name": "symbols_used",
            "location": 60,
            "return": [
                "set[]",
                "set[str]"
            ],
            "arguments": {
                "e": [
                    "dict[str, typing.Any]"
                ],
                "into": [
                    "None",
                    "str",
                    "set[int]",
                    "tuple[typing.Union[float,float]]",
                    "int"
                ]
            }
        },
        "get_parser": {
            "name": "get_parser",
            "location": 210,
            "return": [
                "SexpParser"
            ],
            "arguments": {
                "input": [
                    "str",
                    "bool"
                ]
            }
        },
        "parse": {
            "name": "parse",
            "location": 213,
            "return": [
                "None",
                "typing.Generator[]"
            ],
            "arguments": {
                "input": [
                    "str",
                    "int",
                    "None"
                ]
            }
        },
        "parse_one": {
            "name": "parse_one",
            "location": 220,
            "return": [],
            "arguments": {
                "input": [
                    "list[str]"
                ]
            }
        },
        "SList.__str__": {
            "name": "__str__",
            "location": 14,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "SList.__iter__": {
            "name": "__iter__",
            "location": 17,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SList.__len__": {
            "name": "__len__",
            "location": 20,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "SList.__getitem__": {
            "name": "__getitem__",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "i": [
                    "int"
                ]
            }
        },
        "Atom.__str__": {
            "name": "__str__",
            "location": 34,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Comment.__str__": {
            "name": "__str__",
            "location": 41,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "CharBuffer.add_input": {
            "name": "add_input",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "new_input": [
                    "tuple[str]",
                    "bool"
                ]
            }
        },
        "SexpLexer.add_input": {
            "name": "add_input",
            "location": 99,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "new_input": [
                    "str",
                    "bool",
                    "list[int]"
                ]
            }
        },
        "SexpLexer.skip_whitespace": {
            "name": "skip_whitespace",
            "location": 102,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SexpLexer.tokens": {
            "name": "tokens",
            "location": 110,
            "return": [
                "typing.Generator[EOF]",
                "typing.Generator[Atom]",
                "typing.Generator[Comment]",
                "typing.Generator[typing.Text]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SexpParser.add_input": {
            "name": "add_input",
            "location": 174,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "new_input": [
                    "str",
                    "bool",
                    "list[int]"
                ]
            }
        },
        "SexpParser.parse": {
            "name": "parse",
            "location": 177,
            "return": [
                "typing.Generator[]",
                "typing.Generator[SList]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "mypyvy-master/src/solver.py": {
        "result_from_z3": {
            "name": "result_from_z3",
            "location": 46,
            "return": [],
            "arguments": {
                "res": [
                    "str",
                    "list[]",
                    "bool",
                    "None"
                ]
            }
        },
        "Solver.__init__": {
            "name": "__init__",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "include_program": [
                    "bool"
                ],
                "use_cvc4": [
                    "bool"
                ],
                "translator_factory": [
                    "None",
                    "int",
                    "list[int]",
                    "bytes"
                ],
                "reassert_axioms": [
                    "bool"
                ],
                "additional_mutable_axioms": [
                    "list[]"
                ]
            }
        },
        "Solver._init_axioms": {
            "name": "_init_axioms",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "prog": [],
                "include_program": [
                    "int",
                    "dict[str, typing.Any]",
                    "str"
                ],
                "reassert_axioms": [
                    "int",
                    "dict[str, typing.Any]",
                    "str"
                ],
                "additional_mutable_axioms": []
            }
        },
        "Solver.get_cvc4_proc": {
            "name": "get_cvc4_proc",
            "location": 108,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Solver.debug_recent": {
            "name": "debug_recent",
            "location": 113,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Solver.restart": {
            "name": "restart",
            "location": 116,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Solver.register_mutable_axioms": {
            "name": "register_mutable_axioms",
            "location": 125,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "axioms": [
                    "list[str]",
                    "list[]",
                    "str",
                    "None"
                ]
            }
        },
        "Solver.add_states": {
            "name": "add_states",
            "location": 131,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "num_states": [
                    "int"
                ]
            }
        },
        "Solver.get_translator": {
            "name": "get_translator",
            "location": 143,
            "return": [],
            "arguments": {
                "self": [],
                "num_states": [
                    "int"
                ]
            }
        },
        "Solver.mark_assumptions_necessary": {
            "name": "mark_assumptions_necessary",
            "location": 153,
            "return": [
                "typing.Generator[None]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Solver.push": {
            "name": "push",
            "location": 159,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Solver.pop": {
            "name": "pop",
            "location": 163,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Solver.new_frame": {
            "name": "new_frame",
            "location": 168,
            "return": [
                "typing.Generator[None]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Solver.add": {
            "name": "add",
            "location": 173,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "e": [
                    "typing.Type",
                    "list[list[]]",
                    "list[float]",
                    "list[int]",
                    "int"
                ]
            }
        },
        "Solver.check": {
            "name": "check",
            "location": 180,
            "return": [],
            "arguments": {
                "self": [],
                "assumptions": [
                    "None",
                    "bool",
                    "float",
                    "typing.Mapping",
                    "str",
                    "list[]"
                ]
            }
        },
        "Solver.model": {
            "name": "model",
            "location": 285,
            "return": [],
            "arguments": {
                "self": [],
                "assumptions": [
                    "None",
                    "float",
                    "int",
                    "str"
                ],
                "minimize": [
                    "None",
                    "bool",
                    "typing.Mapping",
                    "typing.Callable[, ]",
                    "str",
                    "float",
                    "typing.Sequence[str]"
                ],
                "sorts_to_minimize": [
                    "None"
                ],
                "relations_to_minimize": [
                    "None",
                    "int",
                    "dict[, ]",
                    "str"
                ]
            }
        },
        "Solver._cardinality_constraint": {
            "name": "_cardinality_constraint",
            "location": 327,
            "return": [],
            "arguments": {
                "self": [],
                "x": [
                    "float",
                    "int"
                ],
                "n": [
                    "float",
                    "int"
                ]
            }
        },
        "Solver._sort_cardinality_constraint": {
            "name": "_sort_cardinality_constraint",
            "location": 333,
            "return": [],
            "arguments": {
                "self": [],
                "s": [],
                "n": [
                    "int",
                    "float"
                ]
            }
        },
        "Solver._relational_cardinality_constraint": {
            "name": "_relational_cardinality_constraint",
            "location": 342,
            "return": [
                "list[float]",
                "list[str]",
                "list[tuple[typing.Union[typing.Any,typing.Any]]]",
                "list[int]",
                "float"
            ],
            "arguments": {
                "self": [],
                "relation": [],
                "n": [
                    "int",
                    "str"
                ]
            }
        },
        "Solver._minimal_model": {
            "name": "_minimal_model",
            "location": 360,
            "return": [],
            "arguments": {
                "self": [],
                "assumptions": [
                    "typing.Sequence[z3.ExprRef]",
                    "None",
                    "bool",
                    "Exception"
                ],
                "sorts_to_minimize": [
                    "float",
                    "dict[, ]",
                    "bool",
                    "str",
                    "dict[str, bool]"
                ],
                "relations_to_minimize": [
                    "float",
                    "dict[, ]",
                    "bool",
                    "str",
                    "dict[str, bool]"
                ]
            }
        },
        "Solver.assertions": {
            "name": "assertions",
            "location": 382,
            "return": [
                "list[typing.Union[int,str,tuple[typing.Union[str,str]]]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Solver.unsat_core": {
            "name": "unsat_core",
            "location": 386,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Solver.reason_unknown": {
            "name": "reason_unknown",
            "location": 389,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Solver.check.luby": {
            "name": "luby",
            "location": 193,
            "return": [
                "typing.Generator[int]"
            ],
            "arguments": {}
        }
    },
    "mypyvy-master/src/solver_cvc4.py": {
        "new_cvc4_process": {
            "name": "new_cvc4_process",
            "location": 29,
            "return": [],
            "arguments": {}
        },
        "check_with_cvc4": {
            "name": "check_with_cvc4",
            "location": 44,
            "return": [],
            "arguments": {
                "cvc4_proc": [],
                "smt2": []
            }
        },
        "cvc4_preprocess": {
            "name": "cvc4_preprocess",
            "location": 96,
            "return": [],
            "arguments": {
                "z3str": []
            }
        },
        "cvc4_postprocess": {
            "name": "cvc4_postprocess",
            "location": 111,
            "return": [],
            "arguments": {
                "cvc4line": []
            }
        },
        "CVC4Sort.__str__": {
            "name": "__str__",
            "location": 123,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CVC4UniverseElement.__str__": {
            "name": "__str__",
            "location": 131,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CVC4UniverseElement.decl": {
            "name": "decl",
            "location": 134,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CVC4Int.__str__": {
            "name": "__str__",
            "location": 141,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CVC4Int.as_long": {
            "name": "as_long",
            "location": 144,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CVC4UniverseElementDecl.name": {
            "name": "name",
            "location": 151,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CVC4FuncDecl.__post_init__": {
            "name": "__post_init__",
            "location": 171,
            "return": [],
            "arguments": {
                "self": [],
                "var_decls": []
            }
        },
        "CVC4FuncDecl.__str__": {
            "name": "__str__",
            "location": 181,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CVC4FuncDecl.arity": {
            "name": "arity",
            "location": 184,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CVC4FuncDecl.domain": {
            "name": "domain",
            "location": 187,
            "return": [],
            "arguments": {
                "self": [],
                "i": []
            }
        },
        "CVC4FuncDecl.__call__": {
            "name": "__call__",
            "location": 191,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CVC4Model.__post_init__": {
            "name": "__post_init__",
            "location": 198,
            "return": [],
            "arguments": {
                "self": [],
                "sexpr": []
            }
        },
        "CVC4Model.sorts": {
            "name": "sorts",
            "location": 202,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CVC4Model.eval_in_scope": {
            "name": "eval_in_scope",
            "location": 211,
            "return": [],
            "arguments": {
                "self": [],
                "scope": [],
                "e": []
            }
        },
        "CVC4Model.eval": {
            "name": "eval",
            "location": 275,
            "return": [],
            "arguments": {
                "self": [],
                "e": [],
                "model_completion": []
            }
        },
        "CVC4Model.get_universe": {
            "name": "get_universe",
            "location": 293,
            "return": [],
            "arguments": {
                "self": [],
                "z3s": []
            }
        },
        "CVC4Model.decls": {
            "name": "decls",
            "location": 311,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "mypyvy-master/src/syntax.py": {
        "symbols_used": {
            "name": "symbols_used",
            "location": 115,
            "return": [
                "set[]"
            ],
            "arguments": {
                "scope": [],
                "expr": [
                    "int"
                ],
                "state_index": [
                    "int"
                ]
            }
        },
        "subst_vars_simple": {
            "name": "subst_vars_simple",
            "location": 178,
            "return": [
                "UnaryExpr",
                "BinaryExpr",
                "AppExpr"
            ],
            "arguments": {
                "expr": [],
                "subst": []
            }
        },
        "subst": {
            "name": "subst",
            "location": 203,
            "return": [
                "UnaryExpr",
                "BinaryExpr"
            ],
            "arguments": {
                "scope": [],
                "e": [],
                "gamma": []
            }
        },
        "as_clauses_body": {
            "name": "as_clauses_body",
            "location": 258,
            "return": [
                "list[list[Bool]]",
                "list[list[BinaryExpr]]",
                "list[]",
                "list[list[]]",
                "list[list[typing.Optional[int]]]"
            ],
            "arguments": {
                "expr": [
                    "int",
                    "None"
                ],
                "negated": [
                    "bool"
                ]
            }
        },
        "as_clauses_quant": {
            "name": "as_clauses_quant",
            "location": 302,
            "return": [
                "tuple[]",
                "tuple[tuple[]]"
            ],
            "arguments": {
                "expr": [],
                "negated": [
                    "bool"
                ]
            }
        },
        "as_clauses": {
            "name": "as_clauses",
            "location": 316,
            "return": [
                "list[typing.Union[int,range,list[int]]]"
            ],
            "arguments": {
                "expr": [
                    "str",
                    "typing.IO"
                ]
            }
        },
        "relativization_guard_for_binder": {
            "name": "relativization_guard_for_binder",
            "location": 331,
            "return": [],
            "arguments": {
                "guards": [
                    "dict[, ]",
                    "typing.Mapping"
                ],
                "b": [
                    "bytes",
                    "str"
                ]
            }
        },
        "relativize_quantifiers": {
            "name": "relativize_quantifiers",
            "location": 350,
            "return": [],
            "arguments": {
                "guards": [
                    "float",
                    "typing.Iterable[T]"
                ],
                "e": [
                    "int",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "is_universal": {
            "name": "is_universal",
            "location": 385,
            "return": [
                "bool"
            ],
            "arguments": {
                "e": [
                    "typing.Callable[, ]",
                    "dict[str, typing.Any]",
                    "list[typing.Any]",
                    "None"
                ]
            }
        },
        "is_quantifier_free": {
            "name": "is_quantifier_free",
            "location": 391,
            "return": [
                "bool"
            ],
            "arguments": {
                "e": [
                    "bool",
                    "typing.Callable[T, bool]"
                ]
            }
        },
        "span_endlexpos": {
            "name": "span_endlexpos",
            "location": 415,
            "return": [
                "None"
            ],
            "arguments": {
                "x": [
                    "bytes",
                    "list[]"
                ]
            }
        },
        "faithful_print_prog": {
            "name": "faithful_print_prog",
            "location": 538,
            "return": [],
            "arguments": {
                "prog": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ],
                "skip_invariants": [
                    "bool"
                ]
            }
        },
        "Not": {
            "name": "Not",
            "location": 585,
            "return": [
                "UnaryExpr"
            ],
            "arguments": {
                "e": [
                    "int"
                ]
            }
        },
        "New": {
            "name": "New",
            "location": 588,
            "return": [
                "UnaryExpr",
                "int",
                "typing.Iterable[str]",
                "str",
                "typing.Collection"
            ],
            "arguments": {
                "e": [
                    "int",
                    "typing.Iterable[str]",
                    "str",
                    "typing.Collection"
                ],
                "n": [
                    "int"
                ]
            }
        },
        "Forall": {
            "name": "Forall",
            "location": 640,
            "return": [
                "typing.Callable[T, T]",
                "str",
                "QuantifierExpr"
            ],
            "arguments": {
                "vs": [
                    "typing.Callable[T, T]",
                    "str"
                ],
                "body": [
                    "typing.Callable[T, T]",
                    "str"
                ]
            }
        },
        "Exists": {
            "name": "Exists",
            "location": 645,
            "return": [
                "typing.Callable[T, T]",
                "str",
                "QuantifierExpr"
            ],
            "arguments": {
                "vs": [
                    "typing.Callable[T, T]",
                    "str"
                ],
                "body": [
                    "typing.Callable[T, T]",
                    "str"
                ]
            }
        },
        "And": {
            "name": "And",
            "location": 650,
            "return": [
                "Bool",
                "NaryExpr"
            ],
            "arguments": {}
        },
        "Or": {
            "name": "Or",
            "location": 658,
            "return": [
                "Bool",
                "NaryExpr"
            ],
            "arguments": {}
        },
        "Eq": {
            "name": "Eq",
            "location": 666,
            "return": [
                "BinaryExpr"
            ],
            "arguments": {
                "arg1": [
                    "int"
                ],
                "arg2": [
                    "int"
                ]
            }
        },
        "Neq": {
            "name": "Neq",
            "location": 669,
            "return": [
                "BinaryExpr"
            ],
            "arguments": {
                "arg1": [
                    "int"
                ],
                "arg2": [
                    "int"
                ]
            }
        },
        "Iff": {
            "name": "Iff",
            "location": 672,
            "return": [
                "BinaryExpr"
            ],
            "arguments": {
                "arg1": [
                    "int"
                ],
                "arg2": [
                    "int"
                ]
            }
        },
        "Implies": {
            "name": "Implies",
            "location": 675,
            "return": [
                "BinaryExpr"
            ],
            "arguments": {
                "arg1": [
                    "int"
                ],
                "arg2": [
                    "int"
                ]
            }
        },
        "Apply": {
            "name": "Apply",
            "location": 678,
            "return": [
                "AppExpr"
            ],
            "arguments": {
                "callee": [
                    "str",
                    "float",
                    "int",
                    "dict[str, typing.Any]"
                ],
                "args": []
            }
        },
        "safe_cast_sort": {
            "name": "safe_cast_sort",
            "location": 706,
            "return": [],
            "arguments": {
                "s": [
                    "str",
                    "set[int]",
                    "tuple[typing.Union[int,int]]"
                ]
            }
        },
        "free_ids": {
            "name": "free_ids",
            "location": 768,
            "return": [
                "str",
                "dict[str, list[str]]",
                "list[str]",
                "dict[str, str]",
                "list[]",
                "OrderedSet"
            ],
            "arguments": {
                "e": [
                    "str",
                    "list[str]"
                ],
                "into": [
                    "None",
                    "bool",
                    "typing.Any",
                    "dict[, ]"
                ]
            }
        },
        "get_decl_from_sort": {
            "name": "get_decl_from_sort",
            "location": 851,
            "return": [],
            "arguments": {
                "s": [
                    "str",
                    "bool"
                ]
            }
        },
        "close_free_vars": {
            "name": "close_free_vars",
            "location": 1002,
            "return": [
                "QuantifierExpr"
            ],
            "arguments": {
                "expr": [],
                "in_scope": [
                    "list[]"
                ],
                "span": [
                    "None"
                ]
            }
        },
        "uses_new": {
            "name": "uses_new",
            "location": 1039,
            "return": [
                "bool"
            ],
            "arguments": {
                "e": [
                    "typing.Callable[, ]"
                ]
            }
        },
        "has_annotation": {
            "name": "has_annotation",
            "location": 1312,
            "return": [
                "bool"
            ],
            "arguments": {
                "d": [
                    "str"
                ],
                "name": [
                    "str"
                ]
            }
        },
        "get_annotation": {
            "name": "get_annotation",
            "location": 1315,
            "return": [
                "None"
            ],
            "arguments": {
                "d": [
                    "int",
                    "str",
                    "list[dict[, ]]",
                    "float"
                ],
                "name": [
                    "str",
                    "list[str]"
                ]
            }
        },
        "prog_context": {
            "name": "prog_context",
            "location": 1581,
            "return": [
                "typing.Generator[None]"
            ],
            "arguments": {
                "prog": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ]
            }
        },
        "expand_macros": {
            "name": "expand_macros",
            "location": 1588,
            "return": [
                "UnaryExpr",
                "BinaryExpr"
            ],
            "arguments": {
                "scope": [
                    "bool"
                ],
                "e": []
            }
        },
        "no_parens": {
            "name": "no_parens",
            "location": 1657,
            "return": [
                "bool"
            ],
            "arguments": {
                "ip": [
                    "int",
                    "str",
                    "list[list[str]]"
                ],
                "op": [
                    "int",
                    "str",
                    "list[list[str]]"
                ],
                "side": [
                    "int",
                    "str",
                    "list[list[str]]",
                    "dict[str, typing.Any]",
                    "dict[, ]"
                ]
            }
        },
        "pretty": {
            "name": "pretty",
            "location": 1660,
            "return": [
                "str"
            ],
            "arguments": {
                "e": [
                    "int"
                ]
            }
        },
        "_pretty": {
            "name": "_pretty",
            "location": 1664,
            "return": [
                "list[]",
                "list[typing.Text]"
            ],
            "arguments": {
                "e": [
                    "int",
                    "typing.Sequence[str]"
                ],
                "buf": [
                    "None",
                    "list[str]",
                    "dict[str, typing.Any]",
                    "bool"
                ],
                "prec": [
                    "int"
                ],
                "side": [
                    "typing.Text"
                ]
            }
        },
        "pretty_no_parens": {
            "name": "pretty_no_parens",
            "location": 1681,
            "return": [
                "None"
            ],
            "arguments": {
                "e": [
                    "list[typing.Union[str,S]]",
                    "list[str]",
                    "list[]"
                ],
                "buf": [
                    "list[str]",
                    "list[]"
                ],
                "prec": [
                    "int",
                    "str",
                    "Exception"
                ],
                "side": [
                    "int",
                    "str",
                    "Exception"
                ]
            }
        },
        "pretty_precedence": {
            "name": "pretty_precedence",
            "location": 1791,
            "return": [
                "int"
            ],
            "arguments": {
                "e": [
                    "list[str]"
                ]
            }
        },
        "Denotable.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Denotable._denote": {
            "name": "_denote",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Denotable.__getstate__": {
            "name": "__getstate__",
            "location": 28,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Denotable.__hash__": {
            "name": "__hash__",
            "location": 34,
            "return": [
                "int",
                "str",
                "dict[str, int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Denotable.__eq__": {
            "name": "__eq__",
            "location": 39,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Sort.__init__": {
            "name": "__init__",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Sort.__repr__": {
            "name": "__repr__",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Sort.__str__": {
            "name": "__str__",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Sort.__ne__": {
            "name": "__ne__",
            "location": 57,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "list[str]",
                    "float",
                    "str",
                    "int"
                ]
            }
        },
        "SortInferencePlaceholder.__init__": {
            "name": "__init__",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "d": [
                    "None",
                    "str",
                    "float",
                    "typing.Callable[..., typing.Any]",
                    "list[dict[str, typing.Any]]"
                ]
            }
        },
        "SortInferencePlaceholder.add": {
            "name": "add",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "d": [
                    "typing.Deque",
                    "dict[, ]",
                    "dict[str, str]",
                    "int"
                ]
            }
        },
        "SortInferencePlaceholder.root": {
            "name": "root",
            "location": 76,
            "return": [
                "SortInferencePlaceholder"
            ],
            "arguments": {
                "self": []
            }
        },
        "SortInferencePlaceholder.solve": {
            "name": "solve",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sort": [
                    "int",
                    "None",
                    "typing.Callable[T, bool]",
                    "float"
                ]
            }
        },
        "SortInferencePlaceholder.merge": {
            "name": "merge",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "dict[str, typing.Any]",
                    "None"
                ]
            }
        },
        "symbols_used.add_caller_span": {
            "name": "add_caller_span",
            "location": 116,
            "return": [
                "set[]"
            ],
            "arguments": {
                "s": []
            }
        },
        "relativize_quantifiers.go": {
            "name": "go",
            "location": 357,
            "return": [
                "Bool",
                "UnaryExpr",
                "BinaryExpr",
                "NaryExpr",
                "AppExpr",
                "QuantifierExpr",
                "Id",
                "IfThenElse",
                "Let"
            ],
            "arguments": {
                "e": []
            }
        },
        "FaithfulPrinter.__init__": {
            "name": "__init__",
            "location": 427,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "prog": [
                    "int",
                    "float"
                ],
                "skip_invariants": [
                    "bool"
                ]
            }
        },
        "FaithfulPrinter.skip_to": {
            "name": "skip_to",
            "location": 433,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "new_pos": [
                    "int",
                    "None",
                    "str",
                    "float",
                    "list[]"
                ]
            }
        },
        "FaithfulPrinter.skip_to_start": {
            "name": "skip_to_start",
            "location": 437,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "int",
                    "None",
                    "list[]",
                    "typing.Any"
                ]
            }
        },
        "FaithfulPrinter.skip_to_end": {
            "name": "skip_to_end",
            "location": 441,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "str",
                    "int",
                    "float"
                ]
            }
        },
        "FaithfulPrinter.skip_expect": {
            "name": "skip_expect",
            "location": 444,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "expected": []
            }
        },
        "FaithfulPrinter.move_to": {
            "name": "move_to",
            "location": 451,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "new_pos": [
                    "int"
                ]
            }
        },
        "FaithfulPrinter.move_to_start": {
            "name": "move_to_start",
            "location": 461,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "int",
                    "tuple[typing.Union[float,float]]",
                    "None"
                ]
            }
        },
        "FaithfulPrinter.move_to_end": {
            "name": "move_to_end",
            "location": 470,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "str",
                    "int",
                    "float"
                ]
            }
        },
        "FaithfulPrinter.process": {
            "name": "process",
            "location": 473,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "FaithfulPrinter.process_decl": {
            "name": "process_decl",
            "location": 491,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "d": [
                    "typing.Mapping",
                    "None",
                    "str"
                ]
            }
        },
        "FaithfulPrinter.move_and_process_expr": {
            "name": "move_and_process_expr",
            "location": 500,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "e": [
                    "typing.Type",
                    "tuple[Q]"
                ]
            }
        },
        "FaithfulPrinter.process_expr": {
            "name": "process_expr",
            "location": 504,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "e": [
                    "int",
                    "None",
                    "typing.Callable[, ]"
                ]
            }
        },
        "AbstractExpr.__lt__": {
            "name": "__lt__",
            "location": 545,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "typing.AbstractSet",
                    "str",
                    "None",
                    "int"
                ]
            }
        },
        "Bool.__str__": {
            "name": "__str__",
            "location": 557,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UnaryExpr.__post_init__": {
            "name": "__post_init__",
            "location": 579,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UnaryExpr.__str__": {
            "name": "__str__",
            "location": 582,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BinaryExpr.__post_init__": {
            "name": "__post_init__",
            "location": 616,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BinaryExpr.__str__": {
            "name": "__str__",
            "location": 619,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NaryExpr.__post_init__": {
            "name": "__post_init__",
            "location": 634,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "NaryExpr.__str__": {
            "name": "__str__",
            "location": 637,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AppExpr.__str__": {
            "name": "__str__",
            "location": 688,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SortedVar.__hash__": {
            "name": "__hash__",
            "location": 697,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "SortedVar.__str__": {
            "name": "__str__",
            "location": 700,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "QuantifierExpr.__post_init__": {
            "name": "__post_init__",
            "location": 722,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "vs": [
                    "dict[str, typing.Any]",
                    "int"
                ]
            }
        },
        "QuantifierExpr.__str__": {
            "name": "__str__",
            "location": 727,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "QuantifierExpr.get_vs": {
            "name": "get_vs",
            "location": 730,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Id.__str__": {
            "name": "__str__",
            "location": 740,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "IfThenElse.__str__": {
            "name": "__str__",
            "location": 750,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Let.__post_init__": {
            "name": "__post_init__",
            "location": 762,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "var": [
                    "str",
                    "bool",
                    "typing.Callable[, ]",
                    "list[str]"
                ]
            }
        },
        "Let.__str__": {
            "name": "__str__",
            "location": 765,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UninterpretedSort.__init__": {
            "name": "__init__",
            "location": 804,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "dict[str, typing.Any]",
                    "list[str]",
                    "dict[, ]"
                ]
            }
        },
        "UninterpretedSort.__repr__": {
            "name": "__repr__",
            "location": 810,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "UninterpretedSort.__str__": {
            "name": "__str__",
            "location": 813,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UninterpretedSort._denote": {
            "name": "_denote",
            "location": 816,
            "return": [
                "tuple[typing.Text]"
            ],
            "arguments": {
                "self": []
            }
        },
        "_BoolSort.__init__": {
            "name": "__init__",
            "location": 820,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "_BoolSort.__repr__": {
            "name": "__repr__",
            "location": 824,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "_BoolSort.__str__": {
            "name": "__str__",
            "location": 827,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "_BoolSort._denote": {
            "name": "_denote",
            "location": 830,
            "return": [
                "tuple[typing.Text]"
            ],
            "arguments": {
                "self": []
            }
        },
        "_IntSort.__init__": {
            "name": "__init__",
            "location": 836,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "_IntSort.__repr__": {
            "name": "__repr__",
            "location": 840,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "_IntSort.__str__": {
            "name": "__str__",
            "location": 843,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "_IntSort._denote": {
            "name": "_denote",
            "location": 846,
            "return": [
                "tuple[typing.Text]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Decl.__init__": {
            "name": "__init__",
            "location": 857,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "span": [
                    "int",
                    "float"
                ]
            }
        },
        "Decl.__repr__": {
            "name": "__repr__",
            "location": 861,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Decl.__str__": {
            "name": "__str__",
            "location": 864,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SortDecl.__init__": {
            "name": "__init__",
            "location": 869,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "dict[str, typing.Any]",
                    "list[str]",
                    "dict[, ]"
                ]
            }
        },
        "SortDecl.__getstate__": {
            "name": "__getstate__",
            "location": 876,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SortDecl._denote": {
            "name": "_denote",
            "location": 882,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SortDecl.__repr__": {
            "name": "__repr__",
            "location": 885,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "SortDecl.__str__": {
            "name": "__str__",
            "location": 888,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "FunctionDecl.__init__": {
            "name": "__init__",
            "location": 892,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "dict[str, typing.Any]",
                    "list[str]",
                    "dict[, ]"
                ],
                "arity": [
                    "bool",
                    "str",
                    "bytes",
                    "typing.Callable[, ]",
                    "list[dict[str, typing.Any]]"
                ],
                "sort": [
                    "int",
                    "str",
                    "typing.Sequence[]",
                    "None"
                ],
                "mutable": [
                    "int",
                    "str",
                    "typing.Sequence[]",
                    "None"
                ]
            }
        },
        "FunctionDecl.__getstate__": {
            "name": "__getstate__",
            "location": 908,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FunctionDecl._denote": {
            "name": "_denote",
            "location": 915,
            "return": [
                "tuple[tuple[]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "FunctionDecl.__repr__": {
            "name": "__repr__",
            "location": 918,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "FunctionDecl.__str__": {
            "name": "__str__",
            "location": 923,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "RelationDecl.__init__": {
            "name": "__init__",
            "location": 932,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "dict[str, typing.Any]",
                    "list[str]",
                    "dict[, ]"
                ],
                "arity": [
                    "int",
                    "str",
                    "typing.Sequence[]",
                    "None"
                ],
                "mutable": [
                    "int",
                    "str",
                    "typing.Sequence[]",
                    "None"
                ],
                "derived": [
                    "None",
                    "int",
                    "str",
                    "typing.Sequence[]"
                ]
            }
        },
        "RelationDecl.__getstate__": {
            "name": "__getstate__",
            "location": 946,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RelationDecl._denote": {
            "name": "_denote",
            "location": 953,
            "return": [
                "tuple[tuple[]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "RelationDecl.__repr__": {
            "name": "__repr__",
            "location": 956,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "RelationDecl.__str__": {
            "name": "__str__",
            "location": 960,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "RelationDecl.is_derived": {
            "name": "is_derived",
            "location": 968,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ConstantDecl.__init__": {
            "name": "__init__",
            "location": 972,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "dict[str, typing.Any]",
                    "list[str]",
                    "dict[, ]"
                ],
                "sort": [
                    "int",
                    "str",
                    "typing.Sequence[]",
                    "None"
                ],
                "mutable": [
                    "int",
                    "str",
                    "typing.Sequence[]",
                    "None"
                ]
            }
        },
        "ConstantDecl.__getstate__": {
            "name": "__getstate__",
            "location": 985,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ConstantDecl._denote": {
            "name": "_denote",
            "location": 992,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConstantDecl.__repr__": {
            "name": "__repr__",
            "location": 995,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConstantDecl.__str__": {
            "name": "__str__",
            "location": 998,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "InitDecl.__init__": {
            "name": "__init__",
            "location": 1010,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "None",
                    "dict[str, typing.Any]",
                    "list[str]"
                ],
                "expr": [
                    "str",
                    "int"
                ]
            }
        },
        "InitDecl._denote": {
            "name": "_denote",
            "location": 1016,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "InitDecl.__repr__": {
            "name": "__repr__",
            "location": 1019,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "InitDecl.__str__": {
            "name": "__str__",
            "location": 1024,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "ModifiesClause.__init__": {
            "name": "__init__",
            "location": 1029,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "dict[str, typing.Any]",
                    "list[str]",
                    "dict[, ]"
                ]
            }
        },
        "ModifiesClause.__repr__": {
            "name": "__repr__",
            "location": 1033,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "ModifiesClause.__str__": {
            "name": "__str__",
            "location": 1036,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DefinitionDecl.__init__": {
            "name": "__init__",
            "location": 1062,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "is_public_transition": [
                    "bool",
                    "float",
                    "None"
                ],
                "num_states": [
                    "int"
                ],
                "name": [
                    "str",
                    "bool"
                ],
                "params": [],
                "mods": [
                    "bool",
                    "None"
                ],
                "expr": [
                    "bool",
                    "None",
                    "Exception"
                ]
            }
        },
        "DefinitionDecl._denote": {
            "name": "_denote",
            "location": 1085,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "DefinitionDecl.__repr__": {
            "name": "__repr__",
            "location": 1088,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "DefinitionDecl.__str__": {
            "name": "__str__",
            "location": 1094,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "DefinitionDecl._frame": {
            "name": "_frame",
            "location": 1102,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "scope": [],
                "mods": [
                    "dict[, ]",
                    "bytes"
                ]
            }
        },
        "DefinitionDecl._framed_body": {
            "name": "_framed_body",
            "location": 1130,
            "return": [],
            "arguments": {
                "self": [],
                "scope": [
                    "bool"
                ]
            }
        },
        "DefinitionDecl.as_twostate_formula": {
            "name": "as_twostate_formula",
            "location": 1133,
            "return": [],
            "arguments": {
                "self": [],
                "scope": [
                    "str",
                    "int",
                    "list[int]"
                ]
            }
        },
        "InvariantDecl.__init__": {
            "name": "__init__",
            "location": 1138,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "typing.OrderedDict",
                    "None"
                ],
                "expr": [
                    "None",
                    "int",
                    "str",
                    "list[str]"
                ],
                "is_safety": [
                    "None",
                    "int",
                    "str",
                    "list[str]"
                ],
                "is_sketch": [
                    "None",
                    "int",
                    "str",
                    "list[str]"
                ]
            }
        },
        "InvariantDecl._denote": {
            "name": "_denote",
            "location": 1148,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "InvariantDecl.__repr__": {
            "name": "__repr__",
            "location": 1151,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "InvariantDecl.__str__": {
            "name": "__str__",
            "location": 1159,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "AxiomDecl.__init__": {
            "name": "__init__",
            "location": 1168,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "None",
                    "dict[str, typing.Any]",
                    "list[str]"
                ],
                "expr": [
                    "str",
                    "int"
                ]
            }
        },
        "AxiomDecl._denote": {
            "name": "_denote",
            "location": 1174,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "AxiomDecl.__repr__": {
            "name": "__repr__",
            "location": 1177,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "AxiomDecl.__str__": {
            "name": "__str__",
            "location": 1182,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "TheoremDecl.__init__": {
            "name": "__init__",
            "location": 1187,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "int",
                    "None"
                ],
                "expr": [
                    "bool"
                ],
                "num_states": [
                    "int"
                ]
            }
        },
        "TheoremDecl._denote": {
            "name": "_denote",
            "location": 1195,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TheoremDecl.__repr__": {
            "name": "__repr__",
            "location": 1198,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "TheoremDecl.__str__": {
            "name": "__str__",
            "location": 1205,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "AnyTransition._denote": {
            "name": "_denote",
            "location": 1214,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "AnyTransition.__str__": {
            "name": "__str__",
            "location": 1217,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "Star._denote": {
            "name": "_denote",
            "location": 1221,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Star.__str__": {
            "name": "__str__",
            "location": 1224,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "TransitionCall.__init__": {
            "name": "__init__",
            "location": 1228,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "target": [
                    "int",
                    "float"
                ],
                "args": []
            }
        },
        "TransitionCall._denote": {
            "name": "_denote",
            "location": 1234,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TransitionCall.__str__": {
            "name": "__str__",
            "location": 1237,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "TransitionCalls.__init__": {
            "name": "__init__",
            "location": 1245,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "calls": [
                    "str",
                    "None",
                    "list[typing.Any]",
                    "bool",
                    "typing.Mapping",
                    "typing.Type"
                ]
            }
        },
        "TransitionCalls._denote": {
            "name": "_denote",
            "location": 1249,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TransitionCalls.__str__": {
            "name": "__str__",
            "location": 1252,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TraceTransitionDecl.__init__": {
            "name": "__init__",
            "location": 1258,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "transition": [
                    "int",
                    "float"
                ]
            }
        },
        "TraceTransitionDecl._denote": {
            "name": "_denote",
            "location": 1262,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TraceTransitionDecl.__str__": {
            "name": "__str__",
            "location": 1265,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "AssertDecl.__init__": {
            "name": "__init__",
            "location": 1270,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "expr": [
                    "str"
                ]
            }
        },
        "AssertDecl._denote": {
            "name": "_denote",
            "location": 1275,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "AssertDecl.__str__": {
            "name": "__str__",
            "location": 1278,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "TraceDecl.__init__": {
            "name": "__init__",
            "location": 1284,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "components": [
                    "int",
                    "float"
                ],
                "sat": [
                    "int",
                    "float"
                ]
            }
        },
        "TraceDecl._denote": {
            "name": "_denote",
            "location": 1290,
            "return": [
                "tuple[tuple[]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TraceDecl.__str__": {
            "name": "__str__",
            "location": 1293,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "TraceDecl.transitions": {
            "name": "transitions",
            "location": 1298,
            "return": [
                "typing.Generator[TraceTransitionDecl]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Scope.__init__": {
            "name": "__init__",
            "location": 1323,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Scope.new_allowed": {
            "name": "new_allowed",
            "location": 1335,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "n": [
                    "int"
                ]
            }
        },
        "Scope.mutable_allowed": {
            "name": "mutable_allowed",
            "location": 1338,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Scope.call_allowed": {
            "name": "call_allowed",
            "location": 1348,
            "return": [],
            "arguments": {
                "self": [],
                "d": [
                    "int",
                    "typing.Sequence[T]",
                    "str"
                ],
                "n_new": [
                    "int"
                ]
            }
        },
        "Scope.push": {
            "name": "push",
            "location": 1351,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "l": [
                    "list[T]",
                    "typing.Callable[[], T]",
                    "int",
                    "str"
                ]
            }
        },
        "Scope.pop": {
            "name": "pop",
            "location": 1354,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Scope.get": {
            "name": "get",
            "location": 1357,
            "return": [
                "tuple[]",
                "dict[str, str]",
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "Scope._check_duplicate_name": {
            "name": "_check_duplicate_name",
            "location": 1369,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "span": [
                    "str",
                    "None"
                ],
                "name": [
                    "str",
                    "None"
                ]
            }
        },
        "Scope.add_sort": {
            "name": "add_sort",
            "location": 1382,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "decl": [
                    "str",
                    "typing.Type"
                ]
            }
        },
        "Scope.get_sort": {
            "name": "get_sort",
            "location": 1393,
            "return": [],
            "arguments": {
                "self": [],
                "sort": [
                    "str",
                    "None"
                ]
            }
        },
        "Scope.get_sort_checked": {
            "name": "get_sort_checked",
            "location": 1396,
            "return": [
                "list[]",
                "int",
                "str",
                "typing.Type",
                "set[]"
            ],
            "arguments": {
                "self": [],
                "sort": [
                    "str",
                    "bool"
                ]
            }
        },
        "Scope.known_sorts": {
            "name": "known_sorts",
            "location": 1401,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Scope.add_constant": {
            "name": "add_constant",
            "location": 1404,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "decl": [
                    "bool",
                    "str",
                    "dict[, ]"
                ]
            }
        },
        "Scope.add_relation": {
            "name": "add_relation",
            "location": 1410,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "decl": [
                    "bool",
                    "str",
                    "dict[, ]"
                ]
            }
        },
        "Scope.get_relation": {
            "name": "get_relation",
            "location": 1416,
            "return": [],
            "arguments": {
                "self": [],
                "relname": [
                    "str",
                    "None"
                ]
            }
        },
        "Scope.add_function": {
            "name": "add_function",
            "location": 1419,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "decl": []
            }
        },
        "Scope.add_definition": {
            "name": "add_definition",
            "location": 1425,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "decl": [
                    "bool",
                    "str",
                    "dict[, ]"
                ]
            }
        },
        "Scope.get_definition": {
            "name": "get_definition",
            "location": 1431,
            "return": [],
            "arguments": {
                "self": [],
                "definition": [
                    "str",
                    "None"
                ]
            }
        },
        "Scope.fresh_stack": {
            "name": "fresh_stack",
            "location": 1435,
            "return": [
                "typing.Generator[None]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Scope.next_state_index": {
            "name": "next_state_index",
            "location": 1443,
            "return": [
                "typing.Generator[None]"
            ],
            "arguments": {
                "self": [],
                "n": [
                    "int"
                ]
            }
        },
        "Scope.n_states": {
            "name": "n_states",
            "location": 1453,
            "return": [
                "typing.Generator[None]"
            ],
            "arguments": {
                "self": [],
                "n": [
                    "int",
                    "str"
                ]
            }
        },
        "Scope.in_scope": {
            "name": "in_scope",
            "location": 1463,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "self": [],
                "b": [
                    "str",
                    "typing.Any",
                    "None",
                    "list[int]"
                ],
                "annots": [
                    "str",
                    "typing.Any",
                    "None",
                    "list[int]"
                ]
            }
        },
        "Scope.fresh": {
            "name": "fresh",
            "location": 1471,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "base_name": [
                    "str"
                ],
                "also_avoid": [
                    "list[]"
                ]
            }
        },
        "Program.__init__": {
            "name": "__init__",
            "location": 1485,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "decls": [
                    "int",
                    "float"
                ]
            }
        },
        "Program.sorts": {
            "name": "sorts",
            "location": 1490,
            "return": [
                "typing.Generator[SortDecl]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Program.inits": {
            "name": "inits",
            "location": 1495,
            "return": [
                "typing.Generator[InitDecl]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Program.invs": {
            "name": "invs",
            "location": 1500,
            "return": [
                "typing.Generator[InvariantDecl]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Program.safeties": {
            "name": "safeties",
            "location": 1505,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Program.definitions": {
            "name": "definitions",
            "location": 1510,
            "return": [
                "typing.Generator[DefinitionDecl]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Program.transitions": {
            "name": "transitions",
            "location": 1515,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Program.axioms": {
            "name": "axioms",
            "location": 1520,
            "return": [
                "typing.Generator[AxiomDecl]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Program.theorems": {
            "name": "theorems",
            "location": 1525,
            "return": [
                "typing.Generator[TheoremDecl]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Program.constants": {
            "name": "constants",
            "location": 1530,
            "return": [
                "typing.Generator[ConstantDecl]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Program.functions": {
            "name": "functions",
            "location": 1535,
            "return": [
                "typing.Generator[FunctionDecl]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Program.relations": {
            "name": "relations",
            "location": 1540,
            "return": [
                "typing.Generator[RelationDecl]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Program.relations_constants_and_functions": {
            "name": "relations_constants_and_functions",
            "location": 1545,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Program.derived_relations": {
            "name": "derived_relations",
            "location": 1552,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Program.decls_containing_exprs": {
            "name": "decls_containing_exprs",
            "location": 1557,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Program.traces": {
            "name": "traces",
            "location": 1566,
            "return": [
                "typing.Generator[TraceDecl]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Program.__repr__": {
            "name": "__repr__",
            "location": 1571,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "Program.__str__": {
            "name": "__str__",
            "location": 1574,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "DefinitionDecl.__init__.implies": {
            "name": "implies",
            "location": 1067,
            "return": [
                "bool"
            ],
            "arguments": {
                "a": [],
                "b": []
            }
        }
    },
    "mypyvy-master/src/test.py": {
        "build_python_cmd": {
            "name": "build_python_cmd",
            "location": 115,
            "return": [
                "list[typing.Text]"
            ],
            "arguments": {}
        },
        "SyntaxTests.setUp": {
            "name": "setUp",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SyntaxTests.test_as_clauses_basic": {
            "name": "test_as_clauses_basic",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SyntaxTests.test_as_clauses_fail": {
            "name": "test_as_clauses_fail",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SyntaxTests.test_as_clauses_lockserv": {
            "name": "test_as_clauses_lockserv",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SyntaxTests.test_consistent_hashing": {
            "name": "test_consistent_hashing",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SyntaxTests.test_relativize_quantifiers": {
            "name": "test_relativize_quantifiers",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SyntaxTests.test_decls_eq": {
            "name": "test_decls_eq",
            "location": 110,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RegressionTests.test_regressions": {
            "name": "test_regressions",
            "location": 120,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MonotoneFunctionTests.setUp": {
            "name": "setUp",
            "location": 144,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MonotoneFunctionTests.test_mononte_function": {
            "name": "test_mononte_function",
            "location": 147,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "mypyvy-master/src/trace.py": {
        "translate_transition_call": {
            "name": "translate_transition_call",
            "location": 11,
            "return": [],
            "arguments": {
                "s": [
                    "float",
                    "typing.Any",
                    "None",
                    "dict[str, typing.Any]",
                    "typing.Callable[[], None]",
                    "set[]"
                ],
                "lator": [
                    "bool",
                    "None"
                ],
                "state_index": [
                    "int",
                    "str"
                ],
                "c": [
                    "typing.Callable[, ]",
                    "float",
                    "dict[, ]"
                ]
            }
        },
        "bmc_trace": {
            "name": "bmc_trace",
            "location": 34,
            "return": [],
            "arguments": {
                "prog": [],
                "trace": [],
                "s": [],
                "sat_checker": [
                    "bool"
                ],
                "log": [
                    "bool"
                ]
            }
        }
    },
    "mypyvy-master/src/translator.py": {
        "qa_edges_expr": {
            "name": "qa_edges_expr",
            "location": 705,
            "return": [],
            "arguments": {
                "prog": [],
                "expr": []
            }
        },
        "quantifier_alternation_graph": {
            "name": "quantifier_alternation_graph",
            "location": 714,
            "return": [],
            "arguments": {
                "prog": [],
                "exprs": []
            }
        },
        "decls_quantifier_alternation_graph": {
            "name": "decls_quantifier_alternation_graph",
            "location": 723,
            "return": [],
            "arguments": {
                "prog": [],
                "additional": []
            }
        },
        "Z3Translator.__init__": {
            "name": "__init__",
            "location": 53,
            "return": [],
            "arguments": {
                "self": [],
                "scope": [],
                "num_states": []
            }
        },
        "Z3Translator._get_keys": {
            "name": "_get_keys",
            "location": 60,
            "return": [],
            "arguments": {
                "num_states": []
            }
        },
        "Z3Translator.get_key": {
            "name": "get_key",
            "location": 64,
            "return": [],
            "arguments": {
                "self": [],
                "i": []
            }
        },
        "Z3Translator.bind": {
            "name": "bind",
            "location": 72,
            "return": [],
            "arguments": {
                "self": [],
                "binder": []
            }
        },
        "Z3Translator.translate_expr": {
            "name": "translate_expr",
            "location": 84,
            "return": [],
            "arguments": {
                "self": [],
                "expr": []
            }
        },
        "Z3Translator._decl_to_z3": {
            "name": "_decl_to_z3",
            "location": 90,
            "return": [],
            "arguments": {
                "self": [],
                "d": [],
                "n_new": []
            }
        },
        "Z3Translator.__translate_expr": {
            "name": "__translate_expr",
            "location": 97,
            "return": [],
            "arguments": {
                "self": [],
                "expr": []
            }
        },
        "Z3Translator._old_model_to_trace": {
            "name": "_old_model_to_trace",
            "location": 172,
            "return": [],
            "arguments": {
                "z3model": [],
                "num_states": [],
                "allow_undefined": []
            }
        },
        "Z3Translator.model_to_trace": {
            "name": "model_to_trace",
            "location": 338,
            "return": [],
            "arguments": {
                "z3model": [],
                "num_states": [],
                "allow_undefined": []
            }
        },
        "Z3Translator.model_to_first_order_structure": {
            "name": "model_to_first_order_structure",
            "location": 472,
            "return": [],
            "arguments": {
                "z3model": []
            }
        },
        "Z3Translator.sort_to_z3": {
            "name": "sort_to_z3",
            "location": 618,
            "return": [],
            "arguments": {
                "s": []
            }
        },
        "Z3Translator.function_to_z3": {
            "name": "function_to_z3",
            "location": 635,
            "return": [],
            "arguments": {
                "f": [],
                "key": []
            }
        },
        "Z3Translator.relation_to_z3": {
            "name": "relation_to_z3",
            "location": 651,
            "return": [],
            "arguments": {
                "r": [],
                "key": []
            }
        },
        "Z3Translator.constant_to_z3": {
            "name": "constant_to_z3",
            "location": 673,
            "return": [],
            "arguments": {
                "c": [],
                "key": []
            }
        },
        "Z3Translator.statedecl_to_z3": {
            "name": "statedecl_to_z3",
            "location": 687,
            "return": [],
            "arguments": {
                "d": [],
                "key": []
            }
        },
        "Z3Translator.sort_from_z3sort": {
            "name": "sort_from_z3sort",
            "location": 698,
            "return": [],
            "arguments": {
                "prog": [],
                "z3sort": []
            }
        },
        "Z3Translator._old_model_to_trace.rename": {
            "name": "rename",
            "location": 181,
            "return": [],
            "arguments": {
                "s": []
            }
        },
        "Z3Translator._old_model_to_trace._eval": {
            "name": "_eval",
            "location": 184,
            "return": [],
            "arguments": {
                "expr": []
            }
        },
        "Z3Translator._old_model_to_trace.get_univ": {
            "name": "get_univ",
            "location": 280,
            "return": [],
            "arguments": {
                "d": []
            }
        },
        "Z3Translator._old_model_to_trace.arbitrary_interp_r": {
            "name": "arbitrary_interp_r",
            "location": 285,
            "return": [],
            "arguments": {
                "r": []
            }
        },
        "Z3Translator._old_model_to_trace.ensure_defined_r": {
            "name": "ensure_defined_r",
            "location": 289,
            "return": [],
            "arguments": {
                "r": []
            }
        },
        "Z3Translator._old_model_to_trace.arbitrary_interp_c": {
            "name": "arbitrary_interp_c",
            "location": 297,
            "return": [],
            "arguments": {
                "c": []
            }
        },
        "Z3Translator._old_model_to_trace.ensure_defined_c": {
            "name": "ensure_defined_c",
            "location": 306,
            "return": [],
            "arguments": {
                "c": []
            }
        },
        "Z3Translator._old_model_to_trace.arbitrary_interp_f": {
            "name": "arbitrary_interp_f",
            "location": 312,
            "return": [],
            "arguments": {
                "f": []
            }
        },
        "Z3Translator._old_model_to_trace.ensure_defined_f": {
            "name": "ensure_defined_f",
            "location": 317,
            "return": [],
            "arguments": {
                "f": []
            }
        },
        "Z3Translator.model_to_trace.get_univ": {
            "name": "get_univ",
            "location": 414,
            "return": [],
            "arguments": {
                "d": []
            }
        },
        "Z3Translator.model_to_trace.arbitrary_interp_r": {
            "name": "arbitrary_interp_r",
            "location": 419,
            "return": [],
            "arguments": {
                "r": []
            }
        },
        "Z3Translator.model_to_trace.ensure_defined_r": {
            "name": "ensure_defined_r",
            "location": 423,
            "return": [],
            "arguments": {
                "r": []
            }
        },
        "Z3Translator.model_to_trace.arbitrary_interp_c": {
            "name": "arbitrary_interp_c",
            "location": 431,
            "return": [],
            "arguments": {
                "c": []
            }
        },
        "Z3Translator.model_to_trace.ensure_defined_c": {
            "name": "ensure_defined_c",
            "location": 440,
            "return": [],
            "arguments": {
                "c": []
            }
        },
        "Z3Translator.model_to_trace.arbitrary_interp_f": {
            "name": "arbitrary_interp_f",
            "location": 446,
            "return": [],
            "arguments": {
                "f": []
            }
        },
        "Z3Translator.model_to_trace.ensure_defined_f": {
            "name": "ensure_defined_f",
            "location": 451,
            "return": [],
            "arguments": {
                "f": []
            }
        },
        "Z3Translator.model_to_first_order_structure._eval_bool": {
            "name": "_eval_bool",
            "location": 524,
            "return": [],
            "arguments": {
                "expr": []
            }
        },
        "Z3Translator.model_to_first_order_structure._eval_int": {
            "name": "_eval_int",
            "location": 530,
            "return": [],
            "arguments": {
                "expr": []
            }
        },
        "Z3Translator.model_to_first_order_structure._eval_elem": {
            "name": "_eval_elem",
            "location": 536,
            "return": [],
            "arguments": {
                "sort": []
            }
        },
        "Z3Translator.model_to_first_order_structure._eval_elem._eval": {
            "name": "_eval",
            "location": 537,
            "return": [],
            "arguments": {
                "expr": []
            }
        }
    },
    "mypyvy-master/src/typechecker.py": {
        "check_constraint": {
            "name": "check_constraint",
            "location": 9,
            "return": [],
            "arguments": {
                "span": [],
                "expected": [],
                "actual": []
            }
        },
        "pre_typecheck_binder": {
            "name": "pre_typecheck_binder",
            "location": 39,
            "return": [],
            "arguments": {
                "scope": [],
                "binder": []
            }
        },
        "post_typecheck_binder": {
            "name": "post_typecheck_binder",
            "location": 59,
            "return": [],
            "arguments": {
                "binder": []
            }
        },
        "typecheck_expr": {
            "name": "typecheck_expr",
            "location": 76,
            "return": [],
            "arguments": {
                "scope": [],
                "e": [],
                "sort": []
            }
        },
        "typecheck_sortdecl": {
            "name": "typecheck_sortdecl",
            "location": 267,
            "return": [],
            "arguments": {
                "scope": [],
                "s": []
            }
        },
        "typecheck_sort": {
            "name": "typecheck_sort",
            "location": 270,
            "return": [],
            "arguments": {
                "scope": [],
                "s": []
            }
        },
        "typecheck_statedecl": {
            "name": "typecheck_statedecl",
            "location": 280,
            "return": [],
            "arguments": {
                "scope": [],
                "d": []
            }
        },
        "typecheck_modifies_clause": {
            "name": "typecheck_modifies_clause",
            "location": 303,
            "return": [],
            "arguments": {
                "scope": [],
                "mod": []
            }
        },
        "typecheck_declcontainingexpr": {
            "name": "typecheck_declcontainingexpr",
            "location": 314,
            "return": [],
            "arguments": {
                "scope": [],
                "d": []
            }
        },
        "typecheck_tracedecl": {
            "name": "typecheck_tracedecl",
            "location": 399,
            "return": [],
            "arguments": {
                "scope": [],
                "d": []
            }
        },
        "typecheck_program_vocab": {
            "name": "typecheck_program_vocab",
            "location": 435,
            "return": [],
            "arguments": {
                "prog": []
            }
        },
        "typecheck_program": {
            "name": "typecheck_program",
            "location": 447,
            "return": [],
            "arguments": {
                "prog": []
            }
        },
        "check_constraint.normalize": {
            "name": "normalize",
            "location": 10,
            "return": [],
            "arguments": {
                "s": []
            }
        }
    },
    "mypyvy-master/src/updr.py": {
        "equiv_expr": {
            "name": "equiv_expr",
            "location": 21,
            "return": [],
            "arguments": {
                "solver": [],
                "e1": [],
                "e2": []
            }
        },
        "negate_clause": {
            "name": "negate_clause",
            "location": 48,
            "return": [],
            "arguments": {
                "c": []
            }
        },
        "load_frames": {
            "name": "load_frames",
            "location": 421,
            "return": [],
            "arguments": {
                "in_filename": [],
                "s": []
            }
        },
        "Frame.__init__": {
            "name": "__init__",
            "location": 26,
            "return": [],
            "arguments": {
                "self": [],
                "summary": []
            }
        },
        "Frame.summary": {
            "name": "summary",
            "location": 31,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Frame.strengthen": {
            "name": "strengthen",
            "location": 34,
            "return": [],
            "arguments": {
                "self": [],
                "conjunct": []
            }
        },
        "Frame.__str__": {
            "name": "__str__",
            "location": 37,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Frames.__init__": {
            "name": "__init__",
            "location": 70,
            "return": [],
            "arguments": {
                "self": [],
                "solver": []
            }
        },
        "Frames.__getitem__": {
            "name": "__getitem__",
            "location": 97,
            "return": [],
            "arguments": {
                "self": [],
                "i": []
            }
        },
        "Frames.__setitem__": {
            "name": "__setitem__",
            "location": 100,
            "return": [],
            "arguments": {
                "self": [],
                "i": [],
                "e": []
            }
        },
        "Frames.__len__": {
            "name": "__len__",
            "location": 103,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Frames._first_frame": {
            "name": "_first_frame",
            "location": 106,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Frames.new_frame": {
            "name": "new_frame",
            "location": 110,
            "return": [],
            "arguments": {
                "self": [],
                "contents": []
            }
        },
        "Frames.establish_safety": {
            "name": "establish_safety",
            "location": 115,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Frames.find_something_to_block": {
            "name": "find_something_to_block",
            "location": 127,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Frames.record_backwards_reachable_state": {
            "name": "record_backwards_reachable_state",
            "location": 172,
            "return": [],
            "arguments": {
                "self": [],
                "state": []
            }
        },
        "Frames.get_inductive_frame": {
            "name": "get_inductive_frame",
            "location": 177,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Frames.is_frame_inductive": {
            "name": "is_frame_inductive",
            "location": 183,
            "return": [],
            "arguments": {
                "self": [],
                "i": []
            }
        },
        "Frames.push_conjunct": {
            "name": "push_conjunct",
            "location": 187,
            "return": [],
            "arguments": {
                "self": [],
                "frame_no": [],
                "c": []
            }
        },
        "Frames.push_forward_frames": {
            "name": "push_forward_frames",
            "location": 194,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Frames.always_assert_inductive_trace": {
            "name": "always_assert_inductive_trace",
            "location": 198,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Frames.push_frame": {
            "name": "push_frame",
            "location": 204,
            "return": [],
            "arguments": {
                "self": [],
                "i": [],
                "f": []
            }
        },
        "Frames.block": {
            "name": "block",
            "location": 213,
            "return": [],
            "arguments": {
                "self": [],
                "diag_or_expr": [],
                "j": [],
                "trace": []
            }
        },
        "Frames.valid_in_initial_frame": {
            "name": "valid_in_initial_frame",
            "location": 269,
            "return": [],
            "arguments": {
                "self": [],
                "e": []
            }
        },
        "Frames.augment_core_for_init": {
            "name": "augment_core_for_init",
            "location": 272,
            "return": [],
            "arguments": {
                "self": [],
                "diag_or_expr": [],
                "core": []
            }
        },
        "Frames.add": {
            "name": "add",
            "location": 300,
            "return": [],
            "arguments": {
                "self": [],
                "e": [],
                "depth": []
            }
        },
        "Frames.find_predecessor": {
            "name": "find_predecessor",
            "location": 307,
            "return": [],
            "arguments": {
                "self": [],
                "j": [],
                "diag_or_expr": []
            }
        },
        "Frames.clause_implied_by_transitions_from_frame": {
            "name": "clause_implied_by_transitions_from_frame",
            "location": 373,
            "return": [],
            "arguments": {
                "self": [],
                "pre_frame": [],
                "c": [],
                "solver": [],
                "minimize": []
            }
        },
        "Frames._simplify_summary": {
            "name": "_simplify_summary",
            "location": 386,
            "return": [],
            "arguments": {
                "self": [],
                "f": []
            }
        },
        "Frames.simplify": {
            "name": "simplify",
            "location": 398,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Frames.search": {
            "name": "search",
            "location": 402,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Frames.store_frames": {
            "name": "store_frames",
            "location": 412,
            "return": [],
            "arguments": {
                "self": [],
                "out_filename": []
            }
        },
        "Frames.block.as_expr": {
            "name": "as_expr",
            "location": 221,
            "return": [],
            "arguments": {}
        },
        "Frames.block.prev_frame_constraint": {
            "name": "prev_frame_constraint",
            "location": 250,
            "return": [],
            "arguments": {
                "diag": []
            }
        },
        "Frames.find_predecessor.to_z3": {
            "name": "to_z3",
            "location": 322,
            "return": [],
            "arguments": {}
        },
        "Frames.find_predecessor.trackers": {
            "name": "trackers",
            "location": 328,
            "return": [],
            "arguments": {}
        }
    },
    "mypyvy-master/src/utils.py": {
        "clean_filename": {
            "name": "clean_filename",
            "location": 148,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "filename": [
                    "str",
                    "bool"
                ]
            }
        },
        "loc_to_string": {
            "name": "loc_to_string",
            "location": 154,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "loc": [
                    "bool",
                    "dict[str, str]",
                    "None",
                    "typing.Type"
                ]
            }
        },
        "print_located_msg": {
            "name": "print_located_msg",
            "location": 161,
            "return": [
                "None"
            ],
            "arguments": {
                "header": [
                    "str",
                    "dict[str, str]",
                    "None",
                    "int",
                    "dict[, ]",
                    "Exception"
                ],
                "loc": [
                    "str",
                    "dict[str, str]",
                    "bool",
                    "dict[, ]"
                ],
                "msg": [
                    "str",
                    "dict[str, str]",
                    "None",
                    "int",
                    "dict[, ]",
                    "Exception"
                ]
            }
        },
        "print_error": {
            "name": "print_error",
            "location": 171,
            "return": [
                "None"
            ],
            "arguments": {
                "loc": [
                    "str"
                ],
                "msg": [
                    "str"
                ]
            }
        },
        "print_error_and_exit": {
            "name": "print_error_and_exit",
            "location": 179,
            "return": [
                "None"
            ],
            "arguments": {
                "loc": [
                    "str",
                    "dict[, ]",
                    "int"
                ],
                "msg": [
                    "str",
                    "dict[, ]",
                    "int"
                ]
            }
        },
        "print_warning": {
            "name": "print_warning",
            "location": 183,
            "return": [
                "None"
            ],
            "arguments": {
                "loc": [
                    "str"
                ],
                "msg": [
                    "str"
                ]
            }
        },
        "print_info": {
            "name": "print_info",
            "location": 186,
            "return": [
                "None"
            ],
            "arguments": {
                "loc": [
                    "str",
                    "int",
                    "float"
                ],
                "msg": [
                    "str",
                    "int",
                    "float"
                ]
            }
        },
        "log_start_end_time": {
            "name": "log_start_end_time",
            "location": 261,
            "return": [],
            "arguments": {
                "logger": [
                    "int",
                    "str"
                ],
                "lvl": []
            }
        },
        "log_start_end_xml": {
            "name": "log_start_end_xml",
            "location": 274,
            "return": [],
            "arguments": {
                "logger": [
                    "str",
                    "None",
                    "int",
                    "list[str]",
                    "bytes"
                ],
                "lvl": [],
                "tag": [
                    "None",
                    "str",
                    "int",
                    "list[str]",
                    "bytes"
                ]
            }
        },
        "exit": {
            "name": "exit",
            "location": 326,
            "return": [
                "None"
            ],
            "arguments": {
                "returncode": [
                    "str",
                    "None",
                    "int"
                ]
            }
        },
        "generator_element": {
            "name": "generator_element",
            "location": 334,
            "return": [],
            "arguments": {
                "gen": [
                    "int",
                    "typing.Iterator",
                    "str"
                ],
                "index": [
                    "int",
                    "typing.Iterator",
                    "str"
                ]
            }
        },
        "OrderedSet.__init__": {
            "name": "__init__",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "contents": [
                    "None",
                    "str",
                    "dict[, ]"
                ]
            }
        },
        "OrderedSet.__len__": {
            "name": "__len__",
            "location": 35,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "OrderedSet.__str__": {
            "name": "__str__",
            "location": 38,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "OrderedSet.__contains__": {
            "name": "__contains__",
            "location": 41,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "int"
                ]
            }
        },
        "OrderedSet.add": {
            "name": "add",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "int",
                    "list[T]",
                    "float",
                    "bytes",
                    "bytearray",
                    "memoryview"
                ]
            }
        },
        "OrderedSet.remove": {
            "name": "remove",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "int",
                    "float",
                    "str"
                ]
            }
        },
        "OrderedSet.__isub__": {
            "name": "__isub__",
            "location": 53,
            "return": [
                "OrderedSet"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "tuple[typing.Union[int,int]]"
                ]
            }
        },
        "OrderedSet.__sub__": {
            "name": "__sub__",
            "location": 58,
            "return": [
                "OrderedSet"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "set[T]"
                ]
            }
        },
        "OrderedSet.__ior__": {
            "name": "__ior__",
            "location": 63,
            "return": [
                "OrderedSet"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "list[str]"
                ]
            }
        },
        "OrderedSet.__or__": {
            "name": "__or__",
            "location": 68,
            "return": [
                "OrderedSet"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "set[T]"
                ]
            }
        },
        "OrderedSet.__iter__": {
            "name": "__iter__",
            "location": 73,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MypyvyArgs.main": {
            "name": "main",
            "location": 137,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "solver": [
                    "list[str]",
                    "bool",
                    "typing.Sequence[str]",
                    "None"
                ]
            }
        },
        "MypyvyArgs.__contains__": {
            "name": "__contains__",
            "location": 140,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "float",
                    "int"
                ]
            }
        },
        "MyLogger.__init__": {
            "name": "__init__",
            "location": 193,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "logger": [
                    "bool",
                    "str"
                ],
                "start": [
                    "int",
                    "dict[, ]"
                ]
            }
        },
        "MyLogger.setLevel": {
            "name": "setLevel",
            "location": 197,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "lvl": [
                    "int",
                    "str"
                ]
            }
        },
        "MyLogger.isEnabledFor": {
            "name": "isEnabledFor",
            "location": 200,
            "return": [],
            "arguments": {
                "self": [],
                "lvl": [
                    "str",
                    "None",
                    "int"
                ]
            }
        },
        "MyLogger.warning": {
            "name": "warning",
            "location": 203,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "msg": [
                    "str",
                    "bool",
                    "bytes"
                ],
                "end": [
                    "typing.Text"
                ]
            }
        },
        "MyLogger.info": {
            "name": "info",
            "location": 206,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "msg": [
                    "str",
                    "int",
                    "Exception"
                ],
                "end": [
                    "typing.Text"
                ]
            }
        },
        "MyLogger.debug": {
            "name": "debug",
            "location": 209,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "msg": [
                    "str",
                    "Exception"
                ],
                "end": [
                    "typing.Text"
                ]
            }
        },
        "MyLogger.always_print": {
            "name": "always_print",
            "location": 212,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "msg": [
                    "str",
                    "int",
                    "list[pathlib.Path]"
                ],
                "end": [
                    "typing.Text"
                ]
            }
        },
        "MyLogger.time": {
            "name": "time",
            "location": 215,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MyLogger.log_list": {
            "name": "log_list",
            "location": 218,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "lvl": [
                    "int",
                    "str"
                ],
                "msgs": [],
                "sep": [
                    "typing.Text"
                ],
                "end": [
                    "typing.Text"
                ]
            }
        },
        "MyLogger.log": {
            "name": "log",
            "location": 226,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "lvl": [
                    "str",
                    "dict[str, typing.Any]"
                ],
                "msg": [
                    "dict[, ]"
                ],
                "end": [
                    "typing.Text"
                ]
            }
        },
        "MyLogger.rawlog": {
            "name": "rawlog",
            "location": 235,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "lvl": [
                    "int",
                    "str"
                ],
                "msg": [
                    "str"
                ],
                "end": [
                    "typing.Text"
                ]
            }
        },
        "LogTag.__init__": {
            "name": "__init__",
            "location": 239,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "logger": [
                    "str",
                    "None",
                    "list[str]"
                ],
                "name": [
                    "list[str]",
                    "str",
                    "dict[, ]"
                ],
                "lvl": []
            }
        },
        "LogTag.__enter__": {
            "name": "__enter__",
            "location": 245,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LogTag.__exit__": {
            "name": "__exit__",
            "location": 253,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "exn_type": [
                    "typing.Type",
                    "None",
                    "BaseException"
                ],
                "exn_value": [
                    "typing.Type",
                    "None",
                    "BaseException"
                ],
                "traceback": [
                    "typing.Type",
                    "None",
                    "BaseException"
                ]
            }
        },
        "log_start_end_time.dec": {
            "name": "dec",
            "location": 262,
            "return": [],
            "arguments": {
                "func": []
            }
        },
        "log_start_end_xml.dec": {
            "name": "dec",
            "location": 277,
            "return": [],
            "arguments": {
                "func": []
            }
        },
        "YesNoAction.__init__": {
            "name": "__init__",
            "location": 293,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "option_strings": [],
                "dest": [
                    "str",
                    "float",
                    "None",
                    "bool"
                ],
                "nargs": [
                    "None",
                    "bool",
                    "float",
                    "str"
                ],
                "const": [
                    "None",
                    "bool",
                    "float",
                    "str"
                ],
                "default": [
                    "bool"
                ],
                "default_description": [
                    "None",
                    "str",
                    "dict[, ]",
                    "bool"
                ],
                "help": [
                    "None",
                    "bool",
                    "str"
                ]
            }
        },
        "YesNoAction.__call__": {
            "name": "__call__",
            "location": 321,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parser": [
                    "str",
                    "None"
                ],
                "namespace": [
                    "bool"
                ],
                "values": [
                    "str",
                    "None"
                ],
                "option_string": [
                    "None",
                    "str",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "log_start_end_time.dec.wrapped": {
            "name": "wrapped",
            "location": 264,
            "return": [],
            "arguments": {}
        },
        "log_start_end_xml.dec.wrapped": {
            "name": "wrapped",
            "location": 279,
            "return": [],
            "arguments": {}
        }
    },
    "mypyvy-master/src/z3_utils.py": {
        "is_function_symbol": {
            "name": "is_function_symbol",
            "location": 4,
            "return": [
                "bool"
            ],
            "arguments": {
                "s": []
            }
        },
        "function_symbols": {
            "name": "function_symbols",
            "location": 21,
            "return": [
                "dict[, ]",
                "set[]"
            ],
            "arguments": {
                "s": []
            }
        },
        "z3_skolemize": {
            "name": "z3_skolemize",
            "location": 32,
            "return": [],
            "arguments": {
                "e": [
                    "dict[, ]",
                    "typing.Callable[, ]",
                    "int",
                    "str"
                ]
            }
        },
        "z3_quantifier_alternations": {
            "name": "z3_quantifier_alternations",
            "location": 39,
            "return": [
                "typing.Generator[tuple[]]"
            ],
            "arguments": {
                "e": [
                    "int"
                ]
            }
        }
    },
    "mypyvy-master/src/ply/lex.py": {
        "_get_regex": {
            "name": "_get_regex",
            "location": 456,
            "return": [],
            "arguments": {
                "func": []
            }
        },
        "get_caller_module_dict": {
            "name": "get_caller_module_dict",
            "location": 466,
            "return": [],
            "arguments": {
                "levels": []
            }
        },
        "_funcs_to_names": {
            "name": "_funcs_to_names",
            "location": 479,
            "return": [],
            "arguments": {
                "funclist": [],
                "namelist": []
            }
        },
        "_names_to_funcs": {
            "name": "_names_to_funcs",
            "location": 494,
            "return": [],
            "arguments": {
                "namelist": [],
                "fdict": []
            }
        },
        "_form_master_re": {
            "name": "_form_master_re",
            "location": 510,
            "return": [],
            "arguments": {
                "relist": [],
                "reflags": [],
                "ldict": [],
                "toknames": []
            }
        },
        "_statetoken": {
            "name": "_statetoken",
            "location": 550,
            "return": [],
            "arguments": {
                "s": [],
                "names": []
            }
        },
        "lex": {
            "name": "lex",
            "location": 879,
            "return": [],
            "arguments": {
                "module": [],
                "object": [],
                "debug": [],
                "optimize": [],
                "lextab": [],
                "reflags": [],
                "nowarn": [],
                "outputdir": [],
                "debuglog": [],
                "errorlog": [],
                "forbid_rebuild": []
            }
        },
        "runmain": {
            "name": "runmain",
            "location": 1075,
            "return": [],
            "arguments": {
                "lexer": [],
                "data": []
            }
        },
        "TOKEN": {
            "name": "TOKEN",
            "location": 1109,
            "return": [],
            "arguments": {
                "r": []
            }
        },
        "LexError.__init__": {
            "name": "__init__",
            "location": 58,
            "return": [],
            "arguments": {
                "self": [],
                "message": [],
                "s": []
            }
        },
        "LexToken.__str__": {
            "name": "__str__",
            "location": 65,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LexToken.__repr__": {
            "name": "__repr__",
            "location": 68,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LexToken.__getstate__": {
            "name": "__getstate__",
            "location": 72,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PlyLogger.__init__": {
            "name": "__init__",
            "location": 80,
            "return": [],
            "arguments": {
                "self": [],
                "f": []
            }
        },
        "PlyLogger.critical": {
            "name": "critical",
            "location": 83,
            "return": [],
            "arguments": {
                "self": [],
                "msg": []
            }
        },
        "PlyLogger.warning": {
            "name": "warning",
            "location": 86,
            "return": [],
            "arguments": {
                "self": [],
                "msg": []
            }
        },
        "PlyLogger.error": {
            "name": "error",
            "location": 89,
            "return": [],
            "arguments": {
                "self": [],
                "msg": []
            }
        },
        "NullLogger.__getattribute__": {
            "name": "__getattribute__",
            "location": 98,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "NullLogger.__call__": {
            "name": "__call__",
            "location": 101,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Lexer.__init__": {
            "name": "__init__",
            "location": 120,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Lexer.clone": {
            "name": "clone",
            "location": 150,
            "return": [],
            "arguments": {
                "self": [],
                "object": []
            }
        },
        "Lexer.writetab": {
            "name": "writetab",
            "location": 180,
            "return": [],
            "arguments": {
                "self": [],
                "lextab": [],
                "outputdir": []
            }
        },
        "Lexer.readtab": {
            "name": "readtab",
            "location": 217,
            "return": [],
            "arguments": {
                "self": [],
                "tabfile": [],
                "fdict": []
            }
        },
        "Lexer.input": {
            "name": "input",
            "location": 257,
            "return": [],
            "arguments": {
                "self": [],
                "s": [],
                "filename": []
            }
        },
        "Lexer.begin": {
            "name": "begin",
            "location": 272,
            "return": [],
            "arguments": {
                "self": [],
                "state": []
            }
        },
        "Lexer.push_state": {
            "name": "push_state",
            "location": 285,
            "return": [],
            "arguments": {
                "self": [],
                "state": []
            }
        },
        "Lexer.pop_state": {
            "name": "pop_state",
            "location": 292,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Lexer.current_state": {
            "name": "current_state",
            "location": 298,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Lexer.skip": {
            "name": "skip",
            "location": 304,
            "return": [],
            "arguments": {
                "self": [],
                "n": []
            }
        },
        "Lexer.token": {
            "name": "token",
            "location": 314,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Lexer.__iter__": {
            "name": "__iter__",
            "location": 432,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Lexer.next": {
            "name": "next",
            "location": 435,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LexerReflect.__init__": {
            "name": "__init__",
            "location": 575,
            "return": [],
            "arguments": {
                "self": [],
                "ldict": [],
                "log": [],
                "reflags": []
            }
        },
        "LexerReflect.get_all": {
            "name": "get_all",
            "location": 586,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LexerReflect.validate_all": {
            "name": "validate_all",
            "location": 593,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LexerReflect.get_tokens": {
            "name": "get_tokens",
            "location": 600,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LexerReflect.validate_tokens": {
            "name": "validate_tokens",
            "location": 620,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LexerReflect.get_literals": {
            "name": "get_literals",
            "location": 631,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LexerReflect.validate_literals": {
            "name": "validate_literals",
            "location": 637,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LexerReflect.get_states": {
            "name": "get_states",
            "location": 648,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LexerReflect.get_rules": {
            "name": "get_rules",
            "location": 679,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LexerReflect.validate_rules": {
            "name": "validate_rules",
            "location": 745,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LexerReflect.validate_module": {
            "name": "validate_module",
            "location": 848,
            "return": [],
            "arguments": {
                "self": [],
                "module": []
            }
        },
        "TOKEN.set_regex": {
            "name": "set_regex",
            "location": 1110,
            "return": [],
            "arguments": {
                "f": []
            }
        }
    },
    "mypyvy-master/src/ply/yacc.py": {
        "format_result": {
            "name": "format_result",
            "location": 143,
            "return": [],
            "arguments": {
                "r": []
            }
        },
        "format_stack_entry": {
            "name": "format_stack_entry",
            "location": 153,
            "return": [],
            "arguments": {
                "r": []
            }
        },
        "errok": {
            "name": "errok",
            "location": 179,
            "return": [],
            "arguments": {}
        },
        "restart": {
            "name": "restart",
            "location": 183,
            "return": [],
            "arguments": {}
        },
        "token": {
            "name": "token",
            "location": 187,
            "return": [],
            "arguments": {}
        },
        "call_errorfunc": {
            "name": "call_errorfunc",
            "location": 192,
            "return": [],
            "arguments": {
                "errorfunc": [],
                "token": [],
                "parser": []
            }
        },
        "rightmost_terminal": {
            "name": "rightmost_terminal",
            "location": 1461,
            "return": [],
            "arguments": {
                "symbols": [],
                "terminals": []
            }
        },
        "digraph": {
            "name": "digraph",
            "location": 2062,
            "return": [],
            "arguments": {
                "X": [],
                "R": [],
                "FP": []
            }
        },
        "traverse": {
            "name": "traverse",
            "location": 2073,
            "return": [],
            "arguments": {
                "x": [],
                "N": [],
                "stack": [],
                "F": [],
                "X": [],
                "R": [],
                "FP": []
            }
        },
        "get_caller_module_dict": {
            "name": "get_caller_module_dict",
            "location": 2890,
            "return": [],
            "arguments": {
                "levels": []
            }
        },
        "parse_grammar": {
            "name": "parse_grammar",
            "location": 2902,
            "return": [],
            "arguments": {
                "doc": [],
                "file": [],
                "line": []
            }
        },
        "yacc": {
            "name": "yacc",
            "location": 3221,
            "return": [],
            "arguments": {
                "method": [],
                "debug": [],
                "module": [],
                "tabmodule": [],
                "start": [],
                "check_recursion": [],
                "optimize": [],
                "write_tables": [],
                "debugfile": [],
                "outputdir": [],
                "debuglog": [],
                "errorlog": [],
                "picklefile": [],
                "forbid_rebuild": []
            }
        },
        "PlyLogger.__init__": {
            "name": "__init__",
            "location": 109,
            "return": [],
            "arguments": {
                "self": [],
                "f": [],
                "close": []
            }
        },
        "PlyLogger.__del__": {
            "name": "__del__",
            "location": 113,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PlyLogger.debug": {
            "name": "debug",
            "location": 117,
            "return": [],
            "arguments": {
                "self": [],
                "msg": []
            }
        },
        "PlyLogger.warning": {
            "name": "warning",
            "location": 122,
            "return": [],
            "arguments": {
                "self": [],
                "msg": []
            }
        },
        "PlyLogger.error": {
            "name": "error",
            "location": 125,
            "return": [],
            "arguments": {
                "self": [],
                "msg": []
            }
        },
        "NullLogger.__getattribute__": {
            "name": "__getattribute__",
            "location": 132,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "NullLogger.__call__": {
            "name": "__call__",
            "location": 135,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "YaccSymbol.__str__": {
            "name": "__str__",
            "location": 222,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "YaccSymbol.__repr__": {
            "name": "__repr__",
            "location": 225,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "YaccProduction.__init__": {
            "name": "__init__",
            "location": 238,
            "return": [],
            "arguments": {
                "self": [],
                "s": [],
                "stack": []
            }
        },
        "YaccProduction.__getitem__": {
            "name": "__getitem__",
            "location": 244,
            "return": [],
            "arguments": {
                "self": [],
                "n": []
            }
        },
        "YaccProduction.__setitem__": {
            "name": "__setitem__",
            "location": 252,
            "return": [],
            "arguments": {
                "self": [],
                "n": [],
                "v": []
            }
        },
        "YaccProduction.__getslice__": {
            "name": "__getslice__",
            "location": 255,
            "return": [],
            "arguments": {
                "self": [],
                "i": [],
                "j": []
            }
        },
        "YaccProduction.__len__": {
            "name": "__len__",
            "location": 258,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "YaccProduction.lineno": {
            "name": "lineno",
            "location": 261,
            "return": [],
            "arguments": {
                "self": [],
                "n": []
            }
        },
        "YaccProduction.set_lineno": {
            "name": "set_lineno",
            "location": 264,
            "return": [],
            "arguments": {
                "self": [],
                "n": [],
                "lineno": []
            }
        },
        "YaccProduction.linespan": {
            "name": "linespan",
            "location": 267,
            "return": [],
            "arguments": {
                "self": [],
                "n": []
            }
        },
        "YaccProduction.lexpos": {
            "name": "lexpos",
            "location": 272,
            "return": [],
            "arguments": {
                "self": [],
                "n": []
            }
        },
        "YaccProduction.set_lexpos": {
            "name": "set_lexpos",
            "location": 275,
            "return": [],
            "arguments": {
                "self": [],
                "n": [],
                "lexpos": []
            }
        },
        "YaccProduction.lexspan": {
            "name": "lexspan",
            "location": 278,
            "return": [],
            "arguments": {
                "self": [],
                "n": []
            }
        },
        "YaccProduction.error": {
            "name": "error",
            "location": 283,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LRParser.__init__": {
            "name": "__init__",
            "location": 293,
            "return": [],
            "arguments": {
                "self": [],
                "lrtab": [],
                "errorf": []
            }
        },
        "LRParser.errok": {
            "name": "errok",
            "location": 301,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LRParser.restart": {
            "name": "restart",
            "location": 304,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LRParser.set_defaulted_states": {
            "name": "set_defaulted_states",
            "location": 320,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LRParser.disable_defaulted_states": {
            "name": "disable_defaulted_states",
            "location": 327,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LRParser.parse": {
            "name": "parse",
            "location": 330,
            "return": [],
            "arguments": {
                "self": [],
                "input": [],
                "lexer": [],
                "debug": [],
                "tracking": [],
                "tokenfunc": [],
                "filename": []
            }
        },
        "LRParser.parsedebug": {
            "name": "parsedebug",
            "location": 355,
            "return": [],
            "arguments": {
                "self": [],
                "input": [],
                "lexer": [],
                "debug": [],
                "tracking": [],
                "tokenfunc": [],
                "filename": []
            }
        },
        "LRParser.parseopt": {
            "name": "parseopt",
            "location": 702,
            "return": [],
            "arguments": {
                "self": [],
                "input": [],
                "lexer": [],
                "debug": [],
                "tracking": [],
                "tokenfunc": [],
                "filename": []
            }
        },
        "LRParser.parseopt_notrack": {
            "name": "parseopt_notrack",
            "location": 1008,
            "return": [],
            "arguments": {
                "self": [],
                "input": [],
                "lexer": [],
                "debug": [],
                "tracking": [],
                "tokenfunc": [],
                "filename": []
            }
        },
        "Production.__init__": {
            "name": "__init__",
            "location": 1318,
            "return": [],
            "arguments": {
                "self": [],
                "number": [],
                "name": [],
                "prod": [],
                "precedence": [],
                "func": [],
                "file": [],
                "line": []
            }
        },
        "Production.__str__": {
            "name": "__str__",
            "location": 1348,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Production.__repr__": {
            "name": "__repr__",
            "location": 1351,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Production.__len__": {
            "name": "__len__",
            "location": 1354,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Production.__nonzero__": {
            "name": "__nonzero__",
            "location": 1357,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Production.__getitem__": {
            "name": "__getitem__",
            "location": 1360,
            "return": [],
            "arguments": {
                "self": [],
                "index": []
            }
        },
        "Production.lr_item": {
            "name": "lr_item",
            "location": 1364,
            "return": [],
            "arguments": {
                "self": [],
                "n": []
            }
        },
        "Production.bind": {
            "name": "bind",
            "location": 1380,
            "return": [],
            "arguments": {
                "self": [],
                "pdict": []
            }
        },
        "MiniProduction.__init__": {
            "name": "__init__",
            "location": 1389,
            "return": [],
            "arguments": {
                "self": [],
                "str": [],
                "name": [],
                "len": [],
                "func": [],
                "file": [],
                "line": []
            }
        },
        "MiniProduction.__str__": {
            "name": "__str__",
            "location": 1398,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MiniProduction.__repr__": {
            "name": "__repr__",
            "location": 1401,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MiniProduction.bind": {
            "name": "bind",
            "location": 1405,
            "return": [],
            "arguments": {
                "self": [],
                "pdict": []
            }
        },
        "LRItem.__init__": {
            "name": "__init__",
            "location": 1435,
            "return": [],
            "arguments": {
                "self": [],
                "p": [],
                "n": []
            }
        },
        "LRItem.__str__": {
            "name": "__str__",
            "location": 1446,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LRItem.__repr__": {
            "name": "__repr__",
            "location": 1453,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Grammar.__init__": {
            "name": "__init__",
            "location": 1481,
            "return": [],
            "arguments": {
                "self": [],
                "terminals": []
            }
        },
        "Grammar.__len__": {
            "name": "__len__",
            "location": 1517,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Grammar.__getitem__": {
            "name": "__getitem__",
            "location": 1520,
            "return": [],
            "arguments": {
                "self": [],
                "index": []
            }
        },
        "Grammar.set_precedence": {
            "name": "set_precedence",
            "location": 1531,
            "return": [],
            "arguments": {
                "self": [],
                "term": [],
                "assoc": [],
                "level": []
            }
        },
        "Grammar.add_production": {
            "name": "add_production",
            "location": 1556,
            "return": [],
            "arguments": {
                "self": [],
                "prodname": [],
                "syms": [],
                "func": [],
                "file": [],
                "line": []
            }
        },
        "Grammar.set_start": {
            "name": "set_start",
            "location": 1640,
            "return": [],
            "arguments": {
                "self": [],
                "start": []
            }
        },
        "Grammar.find_unreachable": {
            "name": "find_unreachable",
            "location": 1656,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Grammar.infinite_cycles": {
            "name": "infinite_cycles",
            "location": 1679,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Grammar.undefined_symbols": {
            "name": "undefined_symbols",
            "location": 1743,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Grammar.unused_terminals": {
            "name": "unused_terminals",
            "location": 1760,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Grammar.unused_rules": {
            "name": "unused_rules",
            "location": 1775,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Grammar.unused_precedence": {
            "name": "unused_precedence",
            "location": 1792,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Grammar._first": {
            "name": "_first",
            "location": 1808,
            "return": [],
            "arguments": {
                "self": [],
                "beta": []
            }
        },
        "Grammar.compute_first": {
            "name": "compute_first",
            "location": 1843,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Grammar.compute_follow": {
            "name": "compute_follow",
            "location": 1880,
            "return": [],
            "arguments": {
                "self": [],
                "start": []
            }
        },
        "Grammar.build_lritems": {
            "name": "build_lritems",
            "location": 1939,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LRTable.__init__": {
            "name": "__init__",
            "location": 1979,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LRTable.read_table": {
            "name": "read_table",
            "location": 1985,
            "return": [],
            "arguments": {
                "self": [],
                "module": []
            }
        },
        "LRTable.read_pickle": {
            "name": "read_pickle",
            "location": 2005,
            "return": [],
            "arguments": {
                "self": [],
                "filename": []
            }
        },
        "LRTable.bind_callables": {
            "name": "bind_callables",
            "location": 2033,
            "return": [],
            "arguments": {
                "self": [],
                "pdict": []
            }
        },
        "LRGeneratedTable.__init__": {
            "name": "__init__",
            "location": 2107,
            "return": [],
            "arguments": {
                "self": [],
                "grammar": [],
                "method": [],
                "log": []
            }
        },
        "LRGeneratedTable.lr0_closure": {
            "name": "lr0_closure",
            "location": 2144,
            "return": [],
            "arguments": {
                "self": [],
                "I": []
            }
        },
        "LRGeneratedTable.lr0_goto": {
            "name": "lr0_goto",
            "location": 2170,
            "return": [],
            "arguments": {
                "self": [],
                "I": [],
                "x": []
            }
        },
        "LRGeneratedTable.lr0_items": {
            "name": "lr0_items",
            "location": 2205,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LRGeneratedTable.compute_nullable_nonterminals": {
            "name": "compute_nullable_nonterminals",
            "location": 2261,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LRGeneratedTable.find_nonterminal_transitions": {
            "name": "find_nonterminal_transitions",
            "location": 2290,
            "return": [],
            "arguments": {
                "self": [],
                "C": []
            }
        },
        "LRGeneratedTable.dr_relation": {
            "name": "dr_relation",
            "location": 2310,
            "return": [],
            "arguments": {
                "self": [],
                "C": [],
                "trans": [],
                "nullable": []
            }
        },
        "LRGeneratedTable.reads_relation": {
            "name": "reads_relation",
            "location": 2334,
            "return": [],
            "arguments": {
                "self": [],
                "C": [],
                "trans": [],
                "empty": []
            }
        },
        "LRGeneratedTable.compute_lookback_includes": {
            "name": "compute_lookback_includes",
            "location": 2377,
            "return": [],
            "arguments": {
                "self": [],
                "C": [],
                "trans": [],
                "nullable": []
            }
        },
        "LRGeneratedTable.compute_read_sets": {
            "name": "compute_read_sets",
            "location": 2457,
            "return": [],
            "arguments": {
                "self": [],
                "C": [],
                "ntrans": [],
                "nullable": []
            }
        },
        "LRGeneratedTable.compute_follow_sets": {
            "name": "compute_follow_sets",
            "location": 2479,
            "return": [],
            "arguments": {
                "self": [],
                "ntrans": [],
                "readsets": [],
                "inclsets": []
            }
        },
        "LRGeneratedTable.add_lookaheads": {
            "name": "add_lookaheads",
            "location": 2497,
            "return": [],
            "arguments": {
                "self": [],
                "lookbacks": [],
                "followset": []
            }
        },
        "LRGeneratedTable.add_lalr_lookaheads": {
            "name": "add_lalr_lookaheads",
            "location": 2515,
            "return": [],
            "arguments": {
                "self": [],
                "C": []
            }
        },
        "LRGeneratedTable.lr_parse_table": {
            "name": "lr_parse_table",
            "location": 2539,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LRGeneratedTable.write_table": {
            "name": "write_table",
            "location": 2732,
            "return": [],
            "arguments": {
                "self": [],
                "tabmodule": [],
                "outputdir": [],
                "signature": []
            }
        },
        "LRGeneratedTable.pickle_table": {
            "name": "pickle_table",
            "location": 2855,
            "return": [],
            "arguments": {
                "self": [],
                "filename": [],
                "signature": []
            }
        },
        "ParserReflect.__init__": {
            "name": "__init__",
            "location": 2944,
            "return": [],
            "arguments": {
                "self": [],
                "pdict": [],
                "log": []
            }
        },
        "ParserReflect.get_all": {
            "name": "get_all",
            "location": 2959,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ParserReflect.validate_all": {
            "name": "validate_all",
            "location": 2967,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ParserReflect.signature": {
            "name": "signature",
            "location": 2977,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ParserReflect.validate_modules": {
            "name": "validate_modules",
            "location": 3004,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ParserReflect.get_start": {
            "name": "get_start",
            "location": 3029,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ParserReflect.validate_start": {
            "name": "validate_start",
            "location": 3033,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ParserReflect.get_error_func": {
            "name": "get_error_func",
            "location": 3039,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ParserReflect.validate_error_func": {
            "name": "validate_error_func",
            "location": 3043,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ParserReflect.get_tokens": {
            "name": "get_tokens",
            "location": 3065,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ParserReflect.validate_tokens": {
            "name": "validate_tokens",
            "location": 3085,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ParserReflect.get_precedence": {
            "name": "get_precedence",
            "location": 3099,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ParserReflect.validate_precedence": {
            "name": "validate_precedence",
            "location": 3103,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ParserReflect.get_pfunctions": {
            "name": "get_pfunctions",
            "location": 3134,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ParserReflect.validate_pfunctions": {
            "name": "validate_pfunctions",
            "location": 3155,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Grammar.find_unreachable.mark_reachable_from": {
            "name": "mark_reachable_from",
            "location": 1659,
            "return": [],
            "arguments": {
                "s": []
            }
        }
    },
    "mypyvy-master/src/ply/__init__.py": {},
    "mypyvy-master/src/stubs/z3/__init__.py": {
        "SolverFor": {
            "name": "SolverFor",
            "location": 42,
            "return": [],
            "arguments": {
                "logic": [],
                "ctx": []
            }
        },
        "Function": {
            "name": "Function",
            "location": 96,
            "return": [],
            "arguments": {
                "name": []
            }
        },
        "Bool": {
            "name": "Bool",
            "location": 97,
            "return": [],
            "arguments": {
                "name": []
            }
        },
        "Const": {
            "name": "Const",
            "location": 98,
            "return": [],
            "arguments": {
                "name": [],
                "sort": []
            }
        },
        "Consts": {
            "name": "Consts",
            "location": 99,
            "return": [],
            "arguments": {
                "names": [],
                "sort": []
            }
        },
        "DeclareSort": {
            "name": "DeclareSort",
            "location": 100,
            "return": [],
            "arguments": {
                "name": [],
                "ctx": []
            }
        },
        "BoolSort": {
            "name": "BoolSort",
            "location": 101,
            "return": [],
            "arguments": {
                "ctx": []
            }
        },
        "IntSort": {
            "name": "IntSort",
            "location": 102,
            "return": [],
            "arguments": {
                "ctx": []
            }
        },
        "ArraySort": {
            "name": "ArraySort",
            "location": 103,
            "return": [],
            "arguments": {
                "dom": [],
                "rng": []
            }
        },
        "Not": {
            "name": "Not",
            "location": 105,
            "return": [],
            "arguments": {
                "arg": []
            }
        },
        "And": {
            "name": "And",
            "location": 106,
            "return": [],
            "arguments": {}
        },
        "Or": {
            "name": "Or",
            "location": 107,
            "return": [],
            "arguments": {}
        },
        "Implies": {
            "name": "Implies",
            "location": 108,
            "return": [],
            "arguments": {
                "a": [],
                "b": []
            }
        },
        "Distinct": {
            "name": "Distinct",
            "location": 109,
            "return": [],
            "arguments": {}
        },
        "AtMost": {
            "name": "AtMost",
            "location": 110,
            "return": [],
            "arguments": {}
        },
        "If": {
            "name": "If",
            "location": 112,
            "return": [],
            "arguments": {
                "e1": [],
                "e2": [],
                "e3": []
            }
        },
        "BoolVal": {
            "name": "BoolVal",
            "location": 114,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "IntVal": {
            "name": "IntVal",
            "location": 115,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "Int": {
            "name": "Int",
            "location": 117,
            "return": [],
            "arguments": {
                "name": []
            }
        },
        "Ints": {
            "name": "Ints",
            "location": 118,
            "return": [],
            "arguments": {
                "names": []
            }
        },
        "ForAll": {
            "name": "ForAll",
            "location": 120,
            "return": [],
            "arguments": {
                "vs": [],
                "body": []
            }
        },
        "Exists": {
            "name": "Exists",
            "location": 121,
            "return": [],
            "arguments": {
                "vs": [],
                "body": []
            }
        },
        "Update": {
            "name": "Update",
            "location": 123,
            "return": [],
            "arguments": {
                "a": [],
                "i": [],
                "v": []
            }
        },
        "main_ctx": {
            "name": "main_ctx",
            "location": 125,
            "return": [],
            "arguments": {}
        },
        "set_param": {
            "name": "set_param",
            "location": 127,
            "return": [],
            "arguments": {}
        },
        "substitute": {
            "name": "substitute",
            "location": 129,
            "return": [],
            "arguments": {
                "t": []
            }
        },
        "substitute_vars": {
            "name": "substitute_vars",
            "location": 130,
            "return": [],
            "arguments": {
                "t": []
            }
        },
        "is_app": {
            "name": "is_app",
            "location": 132,
            "return": [],
            "arguments": {
                "a": []
            }
        },
        "is_quantifier": {
            "name": "is_quantifier",
            "location": 133,
            "return": [],
            "arguments": {
                "e": []
            }
        },
        "is_bool": {
            "name": "is_bool",
            "location": 134,
            "return": [],
            "arguments": {
                "e": []
            }
        },
        "is_false": {
            "name": "is_false",
            "location": 135,
            "return": [],
            "arguments": {
                "e": []
            }
        },
        "is_true": {
            "name": "is_true",
            "location": 136,
            "return": [],
            "arguments": {
                "e": []
            }
        },
        "is_const": {
            "name": "is_const",
            "location": 137,
            "return": [],
            "arguments": {
                "a": []
            }
        },
        "is_arith": {
            "name": "is_arith",
            "location": 138,
            "return": [],
            "arguments": {
                "e": []
            }
        },
        "is_int": {
            "name": "is_int",
            "location": 139,
            "return": [],
            "arguments": {
                "e": []
            }
        },
        "is_int_value": {
            "name": "is_int_value",
            "location": 140,
            "return": [],
            "arguments": {
                "e": []
            }
        },
        "open_log": {
            "name": "open_log",
            "location": 142,
            "return": [],
            "arguments": {
                "filename": []
            }
        },
        "append_log": {
            "name": "append_log",
            "location": 143,
            "return": [],
            "arguments": {
                "msg": []
            }
        },
        "Datatype": {
            "name": "Datatype",
            "location": 145,
            "return": [],
            "arguments": {
                "name": []
            }
        },
        "ModelRef.decls": {
            "name": "decls",
            "location": 14,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ModelRef.sorts": {
            "name": "sorts",
            "location": 15,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ModelRef.get_universe": {
            "name": "get_universe",
            "location": 16,
            "return": [],
            "arguments": {
                "self": [],
                "s": []
            }
        },
        "ModelRef.eval": {
            "name": "eval",
            "location": 17,
            "return": [],
            "arguments": {
                "self": [],
                "e": [],
                "model_completion": []
            }
        },
        "ModelRef.__iter__": {
            "name": "__iter__",
            "location": 18,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ModelRef.__len__": {
            "name": "__len__",
            "location": 19,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ModelRef.__getitem__": {
            "name": "__getitem__",
            "location": 20,
            "return": [],
            "arguments": {
                "self": [],
                "idx": []
            }
        },
        "Solver.__init__": {
            "name": "__init__",
            "location": 25,
            "return": [],
            "arguments": {
                "self": [],
                "ctx": []
            }
        },
        "Solver.__enter__": {
            "name": "__enter__",
            "location": 27,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Solver.__exit__": {
            "name": "__exit__",
            "location": 28,
            "return": [],
            "arguments": {
                "self": [],
                "exn_type": [],
                "exn_value": [],
                "traceback": []
            }
        },
        "Solver.add": {
            "name": "add",
            "location": 29,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Solver.check": {
            "name": "check",
            "location": 30,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Solver.model": {
            "name": "model",
            "location": 31,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Solver.to_smt2": {
            "name": "to_smt2",
            "location": 32,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Solver.unsat_core": {
            "name": "unsat_core",
            "location": 33,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Solver.assertions": {
            "name": "assertions",
            "location": 34,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Solver.push": {
            "name": "push",
            "location": 35,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Solver.pop": {
            "name": "pop",
            "location": 36,
            "return": [],
            "arguments": {
                "self": [],
                "num": []
            }
        },
        "Solver.reason_unknown": {
            "name": "reason_unknown",
            "location": 37,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Solver.num_scopes": {
            "name": "num_scopes",
            "location": 38,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Solver.set": {
            "name": "set",
            "location": 39,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Solver.statistics": {
            "name": "statistics",
            "location": 40,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SortRef.name": {
            "name": "name",
            "location": 48,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ExprRef.__eq__": {
            "name": "__eq__",
            "location": 50,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "ExprRef.__ne__": {
            "name": "__ne__",
            "location": 51,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "ExprRef.__ge__": {
            "name": "__ge__",
            "location": 52,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "ExprRef.__le__": {
            "name": "__le__",
            "location": 53,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "ExprRef.__gt__": {
            "name": "__gt__",
            "location": 54,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "ExprRef.__lt__": {
            "name": "__lt__",
            "location": 55,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "ExprRef.__add__": {
            "name": "__add__",
            "location": 56,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "ExprRef.__sub__": {
            "name": "__sub__",
            "location": 57,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "ExprRef.__mul__": {
            "name": "__mul__",
            "location": 58,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "ExprRef.__truediv__": {
            "name": "__truediv__",
            "location": 59,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "ExprRef.__div__": {
            "name": "__div__",
            "location": 60,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "ExprRef.__mod__": {
            "name": "__mod__",
            "location": 61,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "ExprRef.__getitem__": {
            "name": "__getitem__",
            "location": 62,
            "return": [],
            "arguments": {
                "self": [],
                "idx": []
            }
        },
        "ExprRef.sort": {
            "name": "sort",
            "location": 63,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ExprRef.decl": {
            "name": "decl",
            "location": 64,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ExprRef.translate": {
            "name": "translate",
            "location": 65,
            "return": [],
            "arguments": {
                "self": [],
                "ctx": []
            }
        },
        "ExprRef.children": {
            "name": "children",
            "location": 66,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ExprRef.as_long": {
            "name": "as_long",
            "location": 67,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "QuantifierRef.is_forall": {
            "name": "is_forall",
            "location": 70,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "QuantifierRef.num_vars": {
            "name": "num_vars",
            "location": 71,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "QuantifierRef.body": {
            "name": "body",
            "location": 72,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "QuantifierRef.var_sort": {
            "name": "var_sort",
            "location": 73,
            "return": [],
            "arguments": {
                "self": [],
                "idx": []
            }
        },
        "FuncDeclRef.__call__": {
            "name": "__call__",
            "location": 78,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FuncDeclRef.arity": {
            "name": "arity",
            "location": 79,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FuncDeclRef.domain": {
            "name": "domain",
            "location": 80,
            "return": [],
            "arguments": {
                "self": [],
                "i": []
            }
        },
        "FuncDeclRef.range": {
            "name": "range",
            "location": 81,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FuncDeclRef.name": {
            "name": "name",
            "location": 82,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FuncDeclRef.kind": {
            "name": "kind",
            "location": 83,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Goal.add": {
            "name": "add",
            "location": 86,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ApplyResult.as_expr": {
            "name": "as_expr",
            "location": 89,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Tactic.__init__": {
            "name": "__init__",
            "location": 92,
            "return": [],
            "arguments": {
                "self": [],
                "tactic": []
            }
        },
        "Tactic.__call__": {
            "name": "__call__",
            "location": 93,
            "return": [],
            "arguments": {
                "self": [],
                "goal": []
            }
        }
    }
}
{
    "narf.pl-master/manage.py": {
        "task": {
            "name": "task",
            "location": 18,
            "return": [
                "typing.Callable[, ]",
                "int"
            ],
            "arguments": {
                "func": [
                    "typing.Callable[, ]",
                    "int"
                ]
            }
        },
        "get_post_paths": {
            "name": "get_post_paths",
            "location": 23,
            "return": [
                "typing.Generator[typing.Text]"
            ],
            "arguments": {}
        },
        "get_all_paths": {
            "name": "get_all_paths",
            "location": 33,
            "return": [
                "typing.Generator[list[typing.Union[typing.Text,typing.Text,typing.Text,typing.Text,typing.Text,typing.Text]]]",
                "typing.Generator[]"
            ],
            "arguments": {}
        },
        "deploy": {
            "name": "deploy",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "runserver": {
            "name": "runserver",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "js": {
            "name": "js",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "logs_fetch": {
            "name": "logs_fetch",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "logs_show": {
            "name": "logs_show",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "populate_cache": {
            "name": "populate_cache",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "publish": {
            "name": "publish",
            "location": 95,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test": {
            "name": "test",
            "location": 103,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_accept": {
            "name": "test_accept",
            "location": 124,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "visit": {
            "name": "visit",
            "location": 133,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test.curl": {
            "name": "curl",
            "location": 109,
            "return": [
                "None"
            ],
            "arguments": {
                "path": []
            }
        }
    },
    "narf.pl-master/content/assets/desert-golfing-close-calls/main.py": {},
    "narf.pl-master/content/assets/filmweb-vs-imdb-ratings/density.py": {},
    "narf.pl-master/content/assets/filmweb-vs-imdb-ratings/ratings.py": {},
    "narf.pl-master/content/assets/hots-duration/source/colors.py": {
        "blue_and_red_cycle": {
            "name": "blue_and_red_cycle",
            "location": 54,
            "return": [
                "typing.Generator[HSLA]"
            ],
            "arguments": {}
        },
        "Color.to_svg_color": {
            "name": "to_svg_color",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RGBA.to_svg_color": {
            "name": "to_svg_color",
            "location": 17,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "HSLA.copy": {
            "name": "copy",
            "location": 28,
            "return": [
                "HSLA"
            ],
            "arguments": {
                "self": []
            }
        },
        "HSLA.to_svg_color": {
            "name": "to_svg_color",
            "location": 36,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "narf.pl-master/content/assets/hots-duration/source/geometry.py": {
        "Point.__add__": {
            "name": "__add__",
            "location": 13,
            "return": [
                "int",
                "float",
                "str",
                "list[]",
                "list[tuple[typing.Union[int,int,int,int,int,int]]]"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "typing.Iterable[T]"
                ]
            }
        },
        "Point.__sub__": {
            "name": "__sub__",
            "location": 20,
            "return": [
                "int",
                "float",
                "str",
                "list[]",
                "list[tuple[typing.Union[int,int,int,int,int,int]]]"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "typing.Iterable[T]"
                ]
            }
        },
        "Point.__mul__": {
            "name": "__mul__",
            "location": 27,
            "return": [
                "int",
                "list[int]",
                "str"
            ],
            "arguments": {
                "self": [],
                "factor": [
                    "str",
                    "int"
                ]
            }
        },
        "Point.copy": {
            "name": "copy",
            "location": 34,
            "return": [
                "Point"
            ],
            "arguments": {
                "self": []
            }
        },
        "Point.angle_2D": {
            "name": "angle_2D",
            "location": 37,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Point.distance_2D": {
            "name": "distance_2D",
            "location": 42,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "float",
                    "str"
                ]
            }
        },
        "CubicBezierCurve.points": {
            "name": "points",
            "location": 54,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "CubicBezierCurve.copy": {
            "name": "copy",
            "location": 62,
            "return": [
                "CubicBezierCurve"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "narf.pl-master/content/assets/hots-duration/source/get_data.py": {},
    "narf.pl-master/content/assets/hots-duration/source/make_graphs.py": {
        "read_csv": {
            "name": "read_csv",
            "location": 36,
            "return": [
                "list[]"
            ],
            "arguments": {
                "path": [
                    "typing.Text"
                ]
            }
        },
        "_read_csv": {
            "name": "_read_csv",
            "location": 39,
            "return": [
                "typing.Generator[Match]"
            ],
            "arguments": {
                "path": [
                    "str"
                ]
            }
        },
        "make_histogram": {
            "name": "make_histogram",
            "location": 54,
            "return": [
                "Histogram"
            ],
            "arguments": {
                "title": [
                    "int",
                    "str"
                ],
                "filename": [
                    "int",
                    "str"
                ],
                "matches": [],
                "bin_width": [
                    "int",
                    "list[str]"
                ]
            }
        },
        "make_histograms": {
            "name": "make_histograms",
            "location": 74,
            "return": [
                "list[]"
            ],
            "arguments": {
                "matches": [
                    "list[str]"
                ],
                "bin_width": [
                    "int"
                ]
            }
        },
        "save_graph": {
            "name": "save_graph",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {
                "histogram": [
                    "int",
                    "float",
                    "dict[str, typing.Any]"
                ],
                "bin_color": [
                    "bool",
                    "typing.Sequence[int]",
                    "float"
                ]
            }
        },
        "print_ascii_histogram": {
            "name": "print_ascii_histogram",
            "location": 186,
            "return": [
                "None"
            ],
            "arguments": {
                "histogram": [
                    "str",
                    "int",
                    "float"
                ]
            }
        },
        "format_seconds": {
            "name": "format_seconds",
            "location": 198,
            "return": [
                "str"
            ],
            "arguments": {
                "seconds": [
                    "int"
                ]
            }
        }
    },
    "narf.pl-master/content/assets/hots-duration/source/svg.py": {
        "points_to_svg": {
            "name": "points_to_svg",
            "location": 182,
            "return": [
                "str"
            ],
            "arguments": {
                "points": [
                    "list[geometry.Point]",
                    "str"
                ]
            }
        },
        "write_xml_with_test_elements": {
            "name": "write_xml_with_test_elements",
            "location": 186,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "Element.name": {
            "name": "name",
            "location": 17,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Element.attributes": {
            "name": "attributes",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Element.to_xml": {
            "name": "to_xml",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EmptyElement.to_xml": {
            "name": "to_xml",
            "location": 29,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "SVG.to_xml": {
            "name": "to_xml",
            "location": 39,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "SVG.write_xml": {
            "name": "write_xml",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ]
            }
        },
        "Stroke.attributes": {
            "name": "attributes",
            "location": 63,
            "return": [
                "dict[typing.Text, typing.Text]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Strokable.attributes": {
            "name": "attributes",
            "location": 82,
            "return": [
                "dict[, ]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Fillable.attributes": {
            "name": "attributes",
            "location": 94,
            "return": [
                "dict[typing.Text, typing.Text]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Polyline.attributes": {
            "name": "attributes",
            "location": 106,
            "return": [
                "dict[typing.Text, ]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Circle.attributes": {
            "name": "attributes",
            "location": 119,
            "return": [
                "dict[typing.Text, ]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Polygon.attributes": {
            "name": "attributes",
            "location": 133,
            "return": [
                "dict[typing.Text, ]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Path.attributes": {
            "name": "attributes",
            "location": 146,
            "return": [
                "dict[typing.Text, str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Path._point_to_svg": {
            "name": "_point_to_svg",
            "location": 157,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": [],
                "point": [
                    "list[int]",
                    "list[list[int]]",
                    "str",
                    "list[]"
                ]
            }
        },
        "Path._bezier_to_svg": {
            "name": "_bezier_to_svg",
            "location": 160,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": [],
                "bezier": [
                    "float",
                    "list[]",
                    "typing.Callable[, ]",
                    "str",
                    "set[int]",
                    "set[]",
                    "int"
                ]
            }
        },
        "Mask.attributes": {
            "name": "attributes",
            "location": 171,
            "return": [
                "dict[typing.Text, ]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Mask.to_xml": {
            "name": "to_xml",
            "location": 176,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "narf.pl-master/content/assets/music-streaming/source/data/download_json.py": {},
    "narf.pl-master/content/assets/music-streaming/source/data/generate_csv.py": {
        "csv": {
            "name": "csv",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "function": [
                    "set[]",
                    "typing.Sequence[]",
                    "None",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "_main": {
            "name": "_main",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "_main.play_count": {
            "name": "play_count",
            "location": 50,
            "return": [
                "tuple[bool]"
            ],
            "arguments": {
                "group": []
            }
        },
        "_main.play_count_new_old_tracks": {
            "name": "play_count_new_old_tracks",
            "location": 65,
            "return": [
                "tuple[int]"
            ],
            "arguments": {
                "group": []
            }
        },
        "_main.play_count_new_old_artists": {
            "name": "play_count_new_old_artists",
            "location": 85,
            "return": [
                "tuple[int]"
            ],
            "arguments": {
                "group": []
            }
        },
        "_main.tracks": {
            "name": "tracks",
            "location": 104,
            "return": [
                "tuple[int]"
            ],
            "arguments": {
                "group": []
            }
        },
        "_main.artists": {
            "name": "artists",
            "location": 114,
            "return": [
                "tuple[int]"
            ],
            "arguments": {
                "group": []
            }
        }
    },
    "narf.pl-master/content/assets/music-streaming/source/data/models.py": {},
    "narf.pl-master/content/assets/music-streaming/source/data/settings.py": {},
    "narf.pl-master/content/assets/summer-of-creative-coding/gif-export/server.py": {
        "index": {
            "name": "index",
            "location": 22,
            "return": [
                "typing.Text"
            ],
            "arguments": {}
        }
    },
    "narf.pl-master/engine/main.py": {
        "BeautifulSoup": {
            "name": "BeautifulSoup",
            "location": 36,
            "return": [],
            "arguments": {}
        },
        "antimap": {
            "name": "antimap",
            "location": 405,
            "return": [],
            "arguments": {
                "x": [],
                "functions": []
            }
        },
        "soup_to_unicode": {
            "name": "soup_to_unicode",
            "location": 416,
            "return": [],
            "arguments": {
                "soup": []
            }
        },
        "soup": {
            "name": "soup",
            "location": 420,
            "return": [],
            "arguments": {
                "func": []
            }
        },
        "add_footnote_links": {
            "name": "add_footnote_links",
            "location": 430,
            "return": [
                "str"
            ],
            "arguments": {
                "html": []
            }
        },
        "add_nbsp": {
            "name": "add_nbsp",
            "location": 454,
            "return": [],
            "arguments": {
                "s": [],
                "nbsp": [
                    "typing.Text"
                ]
            }
        },
        "add_non_breaking_spaces": {
            "name": "add_non_breaking_spaces",
            "location": 505,
            "return": [],
            "arguments": {
                "html": []
            }
        },
        "add_non_breaking_spaces_recursive": {
            "name": "add_non_breaking_spaces_recursive",
            "location": 512,
            "return": [
                "None"
            ],
            "arguments": {
                "soup": []
            }
        },
        "add_title_text_to_post_links": {
            "name": "add_title_text_to_post_links",
            "location": 523,
            "return": [
                "None"
            ],
            "arguments": {
                "soup": []
            }
        },
        "center_figure_captions": {
            "name": "center_figure_captions",
            "location": 542,
            "return": [
                "None"
            ],
            "arguments": {
                "soup": []
            }
        },
        "link_headers_and_render_table_of_contents": {
            "name": "link_headers_and_render_table_of_contents",
            "location": 559,
            "return": [
                "None"
            ],
            "arguments": {
                "soup": []
            }
        },
        "get_hash": {
            "name": "get_hash",
            "location": 580,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "get_file_hash": {
            "name": "get_file_hash",
            "location": 584,
            "return": [],
            "arguments": {
                "path": []
            }
        },
        "filnames_in_directory": {
            "name": "filnames_in_directory",
            "location": 597,
            "return": [
                "list[]"
            ],
            "arguments": {
                "directory": []
            }
        },
        "resolve_local_urls": {
            "name": "resolve_local_urls",
            "location": 604,
            "return": [
                "str"
            ],
            "arguments": {
                "filename": [],
                "html": []
            }
        },
        "resolve_asset_urls": {
            "name": "resolve_asset_urls",
            "location": 638,
            "return": [
                "None"
            ],
            "arguments": {
                "soup": []
            }
        },
        "slugify": {
            "name": "slugify",
            "location": 658,
            "return": [],
            "arguments": {
                "s": []
            }
        },
        "stupify": {
            "name": "stupify",
            "location": 669,
            "return": [],
            "arguments": {
                "s": []
            }
        },
        "thumbnail_big_images": {
            "name": "thumbnail_big_images",
            "location": 678,
            "return": [
                "None"
            ],
            "arguments": {
                "soup": []
            }
        },
        "transform_image_lists_to_galleries": {
            "name": "transform_image_lists_to_galleries",
            "location": 696,
            "return": [
                "None"
            ],
            "arguments": {
                "soup": []
            }
        },
        "turn_mp4_images_to_videos": {
            "name": "turn_mp4_images_to_videos",
            "location": 711,
            "return": [
                "None"
            ],
            "arguments": {
                "soup": []
            }
        },
        "wrap_images_in_figures_instead_of_paragraphs": {
            "name": "wrap_images_in_figures_instead_of_paragraphs",
            "location": 728,
            "return": [
                "None"
            ],
            "arguments": {
                "soup": []
            }
        },
        "wrap_images_in_links": {
            "name": "wrap_images_in_links",
            "location": 746,
            "return": [
                "None"
            ],
            "arguments": {
                "soup": []
            }
        },
        "make_youtube_iframe": {
            "name": "make_youtube_iframe",
            "location": 759,
            "return": [
                "Markup"
            ],
            "arguments": {
                "video_id": []
            }
        },
        "typo_filter": {
            "name": "typo_filter",
            "location": 770,
            "return": [
                "Markup"
            ],
            "arguments": {
                "text": []
            }
        },
        "year_filter": {
            "name": "year_filter",
            "location": 779,
            "return": [],
            "arguments": {
                "text": []
            }
        },
        "strip_trailing_slash": {
            "name": "strip_trailing_slash",
            "location": 789,
            "return": [],
            "arguments": {}
        },
        "index": {
            "name": "index",
            "location": 796,
            "return": [],
            "arguments": {}
        },
        "music": {
            "name": "music",
            "location": 801,
            "return": [],
            "arguments": {}
        },
        "posts": {
            "name": "posts",
            "location": 806,
            "return": [],
            "arguments": {}
        },
        "post": {
            "name": "post",
            "location": 811,
            "return": [],
            "arguments": {
                "container": [],
                "slug": []
            }
        },
        "draft": {
            "name": "draft",
            "location": 831,
            "return": [],
            "arguments": {
                "slug": []
            }
        },
        "feed": {
            "name": "feed",
            "location": 842,
            "return": [],
            "arguments": {}
        },
        "feed_json": {
            "name": "feed_json",
            "location": 849,
            "return": [],
            "arguments": {}
        },
        "redirect_from_old_path": {
            "name": "redirect_from_old_path",
            "location": 856,
            "return": [],
            "arguments": {
                "path": []
            }
        },
        "memoized.asset_relative_paths": {
            "name": "asset_relative_paths",
            "location": 41,
            "return": [
                "list[]"
            ],
            "arguments": {}
        },
        "memoized.collections": {
            "name": "collections",
            "location": 56,
            "return": [
                "set[list[]]",
                "set[list[PostCollection]]"
            ],
            "arguments": {}
        },
        "memoized.draft_filenames": {
            "name": "draft_filenames",
            "location": 69,
            "return": [],
            "arguments": {}
        },
        "memoized.is_draft": {
            "name": "is_draft",
            "location": 72,
            "return": [
                "bool"
            ],
            "arguments": {
                "filename": []
            }
        },
        "memoized.is_hidden": {
            "name": "is_hidden",
            "location": 75,
            "return": [
                "bool"
            ],
            "arguments": {
                "filename": []
            }
        },
        "memoized.post_data": {
            "name": "post_data",
            "location": 78,
            "return": [
                "dict[typing.Text, typing.Union[str,bool]]"
            ],
            "arguments": {
                "filename": []
            }
        },
        "memoized.post_filenames": {
            "name": "post_filenames",
            "location": 115,
            "return": [],
            "arguments": {}
        },
        "memoized.public_posts": {
            "name": "public_posts",
            "location": 118,
            "return": [],
            "arguments": {}
        },
        "memoized.feed_entries": {
            "name": "feed_entries",
            "location": 125,
            "return": [
                "list[]"
            ],
            "arguments": {}
        },
        "memoized.rendered_feed": {
            "name": "rendered_feed",
            "location": 146,
            "return": [],
            "arguments": {}
        },
        "memoized.rendered_json_feed": {
            "name": "rendered_json_feed",
            "location": 149,
            "return": [],
            "arguments": {}
        },
        "memoized.rendered_404": {
            "name": "rendered_404",
            "location": 174,
            "return": [
                "tuple[int]"
            ],
            "arguments": {}
        },
        "memoized.index_entries": {
            "name": "index_entries",
            "location": 180,
            "return": [
                "list[]"
            ],
            "arguments": {}
        },
        "memoized.rendered_index": {
            "name": "rendered_index",
            "location": 218,
            "return": [],
            "arguments": {}
        },
        "memoized.rendered_post": {
            "name": "rendered_post",
            "location": 227,
            "return": [],
            "arguments": {
                "filename": []
            }
        },
        "memoized.rendered_posts": {
            "name": "rendered_posts",
            "location": 277,
            "return": [],
            "arguments": {}
        },
        "memoized.rendered_music": {
            "name": "rendered_music",
            "location": 287,
            "return": [],
            "arguments": {}
        },
        "static_url.base": {
            "name": "base",
            "location": 321,
            "return": [
                "typing.Text"
            ],
            "arguments": {}
        },
        "static_url.for_asset": {
            "name": "for_asset",
            "location": 325,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "path": []
            }
        },
        "static_url.for_thumbnail": {
            "name": "for_thumbnail",
            "location": 332,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "path": [],
                "max_width": [
                    "int"
                ],
                "max_height": [
                    "int"
                ]
            }
        },
        "Header.__init__": {
            "name": "__init__",
            "location": 365,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "section": []
            }
        },
        "PostCollection.__init__": {
            "name": "__init__",
            "location": 392,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "id": [],
                "name": [
                    "None"
                ],
                "posts": [
                    "None"
                ]
            }
        },
        "PostCollection.__repr__": {
            "name": "__repr__",
            "location": 401,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "soup.wrapper": {
            "name": "wrapper",
            "location": 422,
            "return": [],
            "arguments": {
                "html": []
            }
        },
        "add_footnote_links.repl": {
            "name": "repl",
            "location": 433,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "match": []
            }
        },
        "resolve_local_urls.change_url": {
            "name": "change_url",
            "location": 613,
            "return": [
                "None"
            ],
            "arguments": {
                "tag": [],
                "key": []
            }
        },
        "Header.__init__.change_ids": {
            "name": "change_ids",
            "location": 375,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "id": []
            }
        }
    },
    "narf.pl-master/engine/memoize.py": {
        "memoize": {
            "name": "memoize",
            "location": 28,
            "return": [],
            "arguments": {
                "func": [
                    "typing.Callable[, ]"
                ]
            }
        },
        "MetaMemoize.__new__": {
            "name": "__new__",
            "location": 15,
            "return": [],
            "arguments": {
                "cls": [
                    "str",
                    "bool"
                ],
                "class_name": [
                    "str",
                    "bool"
                ],
                "base_classes": [
                    "str",
                    "bool"
                ],
                "attributes_dict": [
                    "dict[str, typing.Any]",
                    "dict[, ]"
                ]
            }
        },
        "memoize.smart_func": {
            "name": "smart_func",
            "location": 34,
            "return": [],
            "arguments": {}
        }
    },
    "narf.pl-master/engine/settings.py": {},
    "narf.pl-master/engine/__init__.py": {}
}
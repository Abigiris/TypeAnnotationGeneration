{
    "nassl-release/build_tasks.py": {
        "build_zlib": {
            "name": "build_zlib",
            "location": 365,
            "return": [
                "None"
            ],
            "arguments": {
                "ctx": [
                    "str",
                    "bool"
                ],
                "do_not_clean": [
                    "bool"
                ]
            }
        },
        "build_legacy_openssl": {
            "name": "build_legacy_openssl",
            "location": 376,
            "return": [
                "None"
            ],
            "arguments": {
                "ctx": [
                    "str",
                    "bool",
                    "list[tuple[typing.Union[pathlib.Path,pathlib.Path]]]"
                ],
                "do_not_clean": [
                    "bool"
                ]
            }
        },
        "build_modern_openssl": {
            "name": "build_modern_openssl",
            "location": 388,
            "return": [
                "None"
            ],
            "arguments": {
                "ctx": [
                    "str",
                    "bool",
                    "list[tuple[typing.Union[pathlib.Path,pathlib.Path]]]"
                ],
                "do_not_clean": [
                    "bool"
                ]
            }
        },
        "build_nassl": {
            "name": "build_nassl",
            "location": 400,
            "return": [
                "None"
            ],
            "arguments": {
                "ctx": []
            }
        },
        "build_deps": {
            "name": "build_deps",
            "location": 417,
            "return": [
                "None"
            ],
            "arguments": {
                "ctx": [
                    "bool"
                ],
                "do_not_clean": [
                    "bool"
                ]
            }
        },
        "build_all": {
            "name": "build_all",
            "location": 425,
            "return": [
                "None"
            ],
            "arguments": {
                "ctx": [
                    "bool"
                ],
                "do_not_clean": [
                    "bool"
                ]
            }
        },
        "BuildConfig.__init__": {
            "name": "__init__",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "platform": [
                    "int",
                    "float"
                ]
            }
        },
        "BuildConfig.src_path": {
            "name": "src_path",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BuildConfig.clean": {
            "name": "clean",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BuildConfig.src_tar_gz_url": {
            "name": "src_tar_gz_url",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BuildConfig.fetch_source": {
            "name": "fetch_source",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BuildConfig.build": {
            "name": "build",
            "location": 104,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ctx": []
            }
        },
        "BuildConfig.include_path": {
            "name": "include_path",
            "location": 109,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "OpenSslBuildConfig._openssl_git_tag": {
            "name": "_openssl_git_tag",
            "location": 116,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "OpenSslBuildConfig.src_tar_gz_url": {
            "name": "src_tar_gz_url",
            "location": 120,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "OpenSslBuildConfig.src_path": {
            "name": "src_path",
            "location": 124,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "OpenSslBuildConfig.libcrypto_path": {
            "name": "libcrypto_path",
            "location": 129,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "OpenSslBuildConfig.libssl_path": {
            "name": "libssl_path",
            "location": 134,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "OpenSslBuildConfig.exe_path": {
            "name": "exe_path",
            "location": 139,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "OpenSslBuildConfig._get_build_target": {
            "name": "_get_build_target",
            "location": 142,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": [],
                "should_build_for_debug": []
            }
        },
        "OpenSslBuildConfig.build": {
            "name": "build",
            "location": 173,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ctx": [],
                "zlib_lib_path": [
                    "None",
                    "int",
                    "str",
                    "bytes"
                ],
                "zlib_include_path": [
                    "None",
                    "int",
                    "str",
                    "bytes"
                ],
                "should_build_for_debug": [
                    "bool"
                ]
            }
        },
        "OpenSslBuildConfig._run_configure_command": {
            "name": "_run_configure_command",
            "location": 192,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ctx": [
                    "str"
                ],
                "openssl_target": [
                    "str"
                ],
                "zlib_lib_path": [
                    "int",
                    "list[int]",
                    "typing.IO",
                    "None",
                    "str"
                ],
                "zlib_include_path": [
                    "str"
                ]
            }
        },
        "OpenSslBuildConfig._run_build_steps": {
            "name": "_run_build_steps",
            "location": 213,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ctx": []
            }
        },
        "LegacyOpenSslBuildConfig._openssl_git_tag": {
            "name": "_openssl_git_tag",
            "location": 232,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "LegacyOpenSslBuildConfig.include_path": {
            "name": "include_path",
            "location": 242,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LegacyOpenSslBuildConfig.libcrypto_path": {
            "name": "libcrypto_path",
            "location": 249,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LegacyOpenSslBuildConfig.libssl_path": {
            "name": "libssl_path",
            "location": 256,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LegacyOpenSslBuildConfig.exe_path": {
            "name": "exe_path",
            "location": 263,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ModernOpenSslBuildConfig._openssl_git_tag": {
            "name": "_openssl_git_tag",
            "location": 272,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "ModernOpenSslBuildConfig._run_build_steps": {
            "name": "_run_build_steps",
            "location": 281,
            "return": [],
            "arguments": {
                "self": [],
                "ctx": []
            }
        },
        "ModernOpenSslBuildConfig.libcrypto_path": {
            "name": "libcrypto_path",
            "location": 289,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ModernOpenSslBuildConfig.libssl_path": {
            "name": "libssl_path",
            "location": 296,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ModernOpenSslBuildConfig.include_path": {
            "name": "include_path",
            "location": 303,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ModernOpenSslBuildConfig.exe_path": {
            "name": "exe_path",
            "location": 307,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ZlibBuildConfig.src_tar_gz_url": {
            "name": "src_tar_gz_url",
            "location": 316,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "ZlibBuildConfig.src_path": {
            "name": "src_path",
            "location": 320,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ZlibBuildConfig.build": {
            "name": "build",
            "location": 323,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ctx": []
            }
        },
        "ZlibBuildConfig.libz_path": {
            "name": "libz_path",
            "location": 349,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ZlibBuildConfig.include_path": {
            "name": "include_path",
            "location": 360,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "task": {
            "name": "task",
            "location": 17,
            "return": [],
            "arguments": {}
        }
    },
    "nassl-release/sample_client.py": {},
    "nassl-release/setup.py": {},
    "nassl-release/tasks.py": {
        "test": {
            "name": "test",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "ctx": []
            }
        },
        "package_linux_wheels": {
            "name": "package_linux_wheels",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "ctx": []
            }
        },
        "package_wheel": {
            "name": "package_wheel",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "ctx": []
            }
        },
        "package_windows_wheels": {
            "name": "package_windows_wheels",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "ctx": []
            }
        },
        "release": {
            "name": "release",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "ctx": []
            }
        }
    },
    "nassl-release/nassl/cert_chain_verifier.py": {
        "CertificateChainVerificationFailed.__init__": {
            "name": "__init__",
            "location": 7,
            "return": [],
            "arguments": {
                "self": [],
                "openssl_error_code": []
            }
        },
        "CertificateChainVerifier.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [],
            "arguments": {
                "self": [],
                "trusted_certificates": []
            }
        },
        "CertificateChainVerifier.from_pem": {
            "name": "from_pem",
            "location": 22,
            "return": [],
            "arguments": {
                "cls": [],
                "trusted_certificates_as_pem": []
            }
        },
        "CertificateChainVerifier.from_file": {
            "name": "from_file",
            "location": 29,
            "return": [],
            "arguments": {
                "cls": [],
                "trusted_certificates_path": []
            }
        },
        "CertificateChainVerifier.verify": {
            "name": "verify",
            "location": 39,
            "return": [],
            "arguments": {
                "self": [],
                "certificate_chain": []
            }
        }
    },
    "nassl-release/nassl/ephemeral_key_info.py": {
        "EphemeralKeyInfo.__post_init__": {
            "name": "__post_init__",
            "location": 108,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EcDhEphemeralKeyInfo.__post_init__": {
            "name": "__post_init__",
            "location": 118,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "nassl-release/nassl/legacy_ssl_client.py": {
        "LegacySslClient.__init__": {
            "name": "__init__",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "underlying_socket": [
                    "None",
                    "str",
                    "bool"
                ],
                "ssl_version": [],
                "ssl_verify": [],
                "ssl_verify_locations": [
                    "None",
                    "str",
                    "bool"
                ],
                "client_certificate_chain": [
                    "None",
                    "str",
                    "bool"
                ],
                "client_key": [
                    "None",
                    "str",
                    "bool"
                ],
                "client_key_type": [],
                "client_key_password": [
                    "typing.Text"
                ],
                "ignore_client_authentication_requests": [
                    "bool"
                ]
            }
        },
        "LegacySslClient.get_secure_renegotiation_support": {
            "name": "get_secure_renegotiation_support",
            "location": 61,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LegacySslClient.get_current_compression_method": {
            "name": "get_current_compression_method",
            "location": 64,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LegacySslClient.get_available_compression_methods": {
            "name": "get_available_compression_methods",
            "location": 68,
            "return": [],
            "arguments": {}
        },
        "LegacySslClient.do_renegotiate": {
            "name": "do_renegotiate",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LegacySslClient.enable_fallback_scsv": {
            "name": "enable_fallback_scsv",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LegacySslClient.do_ssl2_iis_handshake": {
            "name": "do_ssl2_iis_handshake",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "nassl-release/nassl/ocsp_response.py": {
        "verify_ocsp_response": {
            "name": "verify_ocsp_response",
            "location": 12,
            "return": [],
            "arguments": {
                "ocsp_response": [],
                "trust_store_path": []
            }
        },
        "OcspResponseNotTrustedError.__init__": {
            "name": "__init__",
            "location": 7,
            "return": [],
            "arguments": {
                "self": [],
                "message": [],
                "trust_store_path": []
            }
        }
    },
    "nassl-release/nassl/ssl_client.py": {
        "ClientCertificateRequested.__init__": {
            "name": "__init__",
            "location": 55,
            "return": [],
            "arguments": {
                "self": [],
                "ca_list": []
            }
        },
        "ClientCertificateRequested.__str__": {
            "name": "__str__",
            "location": 58,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BaseSslClient.__init__": {
            "name": "__init__",
            "location": 83,
            "return": [],
            "arguments": {
                "self": [],
                "underlying_socket": [],
                "ssl_version": [],
                "ssl_verify": [],
                "ssl_verify_locations": [],
                "client_certificate_chain": [],
                "client_key": [],
                "client_key_type": [],
                "client_key_password": [],
                "ignore_client_authentication_requests": [],
                "server_name_indication": []
            }
        },
        "BaseSslClient._init_base_objects": {
            "name": "_init_base_objects",
            "location": 113,
            "return": [],
            "arguments": {
                "self": [],
                "ssl_version": [],
                "underlying_socket": []
            }
        },
        "BaseSslClient._init_server_authentication": {
            "name": "_init_server_authentication",
            "location": 124,
            "return": [],
            "arguments": {
                "self": [],
                "ssl_verify": [],
                "ssl_verify_locations": []
            }
        },
        "BaseSslClient._init_client_authentication": {
            "name": "_init_client_authentication",
            "location": 135,
            "return": [],
            "arguments": {
                "self": [],
                "client_certificate_chain": [],
                "client_key": [],
                "client_key_type": [],
                "client_key_password": [],
                "ignore_client_authentication_requests": []
            }
        },
        "BaseSslClient._init_ssl_objects": {
            "name": "_init_ssl_objects",
            "location": 155,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BaseSslClient.set_underlying_socket": {
            "name": "set_underlying_socket",
            "location": 167,
            "return": [],
            "arguments": {
                "self": [],
                "sock": []
            }
        },
        "BaseSslClient.get_underlying_socket": {
            "name": "get_underlying_socket",
            "location": 172,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BaseSslClient.do_handshake": {
            "name": "do_handshake",
            "location": 175,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BaseSslClient.is_handshake_completed": {
            "name": "is_handshake_completed",
            "location": 213,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BaseSslClient.read": {
            "name": "read",
            "location": 218,
            "return": [],
            "arguments": {
                "self": [],
                "size": [],
                "handshake_must_be_completed": []
            }
        },
        "BaseSslClient.write": {
            "name": "write",
            "location": 253,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "BaseSslClient._flush_ssl_engine": {
            "name": "_flush_ssl_engine",
            "location": 268,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BaseSslClient.shutdown": {
            "name": "shutdown",
            "location": 283,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BaseSslClient.set_tlsext_host_name": {
            "name": "set_tlsext_host_name",
            "location": 301,
            "return": [],
            "arguments": {
                "self": [],
                "name_indication": []
            }
        },
        "BaseSslClient.set_cipher_list": {
            "name": "set_cipher_list",
            "location": 305,
            "return": [],
            "arguments": {
                "self": [],
                "cipher_list": []
            }
        },
        "BaseSslClient.get_cipher_list": {
            "name": "get_cipher_list",
            "location": 308,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BaseSslClient.get_current_cipher_name": {
            "name": "get_current_cipher_name",
            "location": 311,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BaseSslClient.get_current_cipher_bits": {
            "name": "get_current_cipher_bits",
            "location": 314,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BaseSslClient.get_ephemeral_key": {
            "name": "get_ephemeral_key",
            "location": 317,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BaseSslClient._use_private_key": {
            "name": "_use_private_key",
            "location": 332,
            "return": [],
            "arguments": {
                "self": [],
                "client_certificate_chain": [],
                "client_key": [],
                "client_key_type": [],
                "client_key_password": []
            }
        },
        "BaseSslClient.set_tlsext_status_ocsp": {
            "name": "set_tlsext_status_ocsp",
            "location": 362,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BaseSslClient.get_tlsext_status_ocsp_resp": {
            "name": "get_tlsext_status_ocsp_resp",
            "location": 366,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BaseSslClient.get_client_CA_list": {
            "name": "get_client_CA_list",
            "location": 377,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BaseSslClient.get_session": {
            "name": "get_session",
            "location": 380,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BaseSslClient.set_session": {
            "name": "set_session",
            "location": 384,
            "return": [],
            "arguments": {
                "self": [],
                "ssl_session": []
            }
        },
        "BaseSslClient.disable_stateless_session_resumption": {
            "name": "disable_stateless_session_resumption",
            "location": 390,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BaseSslClient.get_received_chain": {
            "name": "get_received_chain",
            "location": 393,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SslClient.write_early_data": {
            "name": "write_early_data",
            "location": 420,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "SslClient.get_early_data_status": {
            "name": "get_early_data_status",
            "location": 432,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SslClient.set_ciphersuites": {
            "name": "set_ciphersuites",
            "location": 435,
            "return": [],
            "arguments": {
                "self": [],
                "cipher_suites": []
            }
        },
        "SslClient.set_groups": {
            "name": "set_groups",
            "location": 441,
            "return": [],
            "arguments": {
                "self": [],
                "supported_groups": []
            }
        },
        "SslClient.get_verified_chain": {
            "name": "get_verified_chain",
            "location": 445,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "nassl-release/nassl/__init__.py": {},
    "nassl-release/tests/cert_chain_verifier_test.py": {
        "certificate_chain_as_x509": {
            "name": "certificate_chain_as_x509",
            "location": 11,
            "return": [
                "list[X509]"
            ],
            "arguments": {}
        },
        "TestCertificateChainVerifier.test_valid_certificate_chain": {
            "name": "test_valid_certificate_chain",
            "location": 99,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "certificate_chain_as_x509": []
            }
        },
        "TestCertificateChainVerifier.test_expired_certificate_chain": {
            "name": "test_expired_certificate_chain",
            "location": 103,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "nassl-release/tests/ocsp_response_test.py": {
        "TestCommonOcspResponseOnline.test": {
            "name": "test",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ssl_client_cls": []
            }
        }
    },
    "nassl-release/tests/ssl_client_test.py": {
        "TestSslClientClientAuthentication.test_client_authentication_no_certificate_supplied": {
            "name": "test_client_authentication_no_certificate_supplied",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ssl_client_cls": [
                    "typing.Callable[, ]"
                ]
            }
        },
        "TestSslClientClientAuthentication.test_client_authentication_no_certificate_supplied_but_ignore": {
            "name": "test_client_authentication_no_certificate_supplied_but_ignore",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ssl_client_cls": [
                    "typing.Callable[, ]"
                ]
            }
        },
        "TestSslClientClientAuthentication.test_client_authentication_succeeds": {
            "name": "test_client_authentication_succeeds",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ssl_client_cls": [
                    "typing.Callable[, ]"
                ]
            }
        },
        "TestSslClientOnline.test": {
            "name": "test",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ssl_client_cls": []
            }
        },
        "TestSslClientOnline.test_get_dh_info_ecdh": {
            "name": "test_get_dh_info_ecdh",
            "location": 121,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ssl_client_cls": []
            }
        },
        "TestSslClientOnline.test_get_dh_info_dh": {
            "name": "test_get_dh_info_dh",
            "location": 147,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ssl_client_cls": []
            }
        },
        "TestSslClientOnline.test_get_dh_info_no_dh": {
            "name": "test_get_dh_info_no_dh",
            "location": 173,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ssl_client_cls": []
            }
        },
        "TestModernSslClientOnline.test_get_verified_chain": {
            "name": "test_get_verified_chain",
            "location": 196,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestModernSslClientOnline.test_get_verified_chain_but_validation_failed": {
            "name": "test_get_verified_chain_but_validation_failed",
            "location": 219,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestModernSslClientOnline.test_get_dh_info_ecdh_p256": {
            "name": "test_get_dh_info_ecdh_p256",
            "location": 243,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestModernSslClientOnline.test_get_dh_info_ecdh_x25519": {
            "name": "test_get_dh_info_ecdh_x25519",
            "location": 270,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestModernSslClientOnline.test_set_groups_curve_secp192k1": {
            "name": "test_set_groups_curve_secp192k1",
            "location": 295,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestModernSslClientOnline.test_set_groups_curve_x448": {
            "name": "test_set_groups_curve_x448",
            "location": 324,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLegacySslClientOnline.test_ssl_2": {
            "name": "test_ssl_2",
            "location": 358,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestModernSslClientOnlineTls13.test": {
            "name": "test",
            "location": 379,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestModernSslClientOnlineTls13.test_set_ciphersuites": {
            "name": "test_set_ciphersuites",
            "location": 397,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestModernSslClientOnlineTls13._create_tls_1_3_session": {
            "name": "_create_tls_1_3_session",
            "location": 422,
            "return": [
                "str",
                "dict[str, str]"
            ],
            "arguments": {
                "server_host": [
                    "dict[, ]",
                    "bool"
                ],
                "server_port": [
                    "dict[, ]",
                    "bool"
                ]
            }
        },
        "TestModernSslClientOnlineTls13.test_write_early_data_does_not_finish_handshake": {
            "name": "test_write_early_data_does_not_finish_handshake",
            "location": 443,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestModernSslClientOnlineTls13.test_write_early_data_fail_when_used_on_non_reused_session": {
            "name": "test_write_early_data_fail_when_used_on_non_reused_session",
            "location": 482,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestModernSslClientOnlineTls13.test_write_early_data_fail_when_trying_to_send_more_than_max_early_data": {
            "name": "test_write_early_data_fail_when_trying_to_send_more_than_max_early_data",
            "location": 503,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestModernSslClientOnlineTls13.test_client_authentication": {
            "name": "test_client_authentication",
            "location": 538,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "nassl-release/tests/SSL_CTX_test.py": {
        "TestCommonSSL_CTX.test_new": {
            "name": "test_new",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "nassl_module": [
                    "dict[str, typing.Sequence[typing.Any]]"
                ]
            }
        },
        "TestCommonSSL_CTX.test_new_bad": {
            "name": "test_new_bad",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "nassl_module": []
            }
        },
        "TestCommonSSL_CTX.test_set_verify": {
            "name": "test_set_verify",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "nassl_module": [
                    "bool"
                ]
            }
        },
        "TestCommonSSL_CTX.test_set_verify_bad": {
            "name": "test_set_verify_bad",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "nassl_module": [
                    "bool"
                ]
            }
        },
        "TestCommonSSL_CTX.test_load_verify_locations": {
            "name": "test_load_verify_locations",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "nassl_module": [
                    "bool"
                ]
            }
        },
        "TestCommonSSL_CTX.test_load_verify_locations_bad": {
            "name": "test_load_verify_locations_bad",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "nassl_module": [
                    "bool"
                ]
            }
        },
        "TestCommonSSL_CTX.test_set_private_key_password_null_byte": {
            "name": "test_set_private_key_password_null_byte",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "nassl_module": [
                    "bool"
                ]
            }
        },
        "TestCommonSSL_CTX.test_use_certificate_file": {
            "name": "test_use_certificate_file",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "nassl_module": [
                    "bool"
                ]
            }
        },
        "TestCommonSSL_CTX.test_use_certificate_file_bad": {
            "name": "test_use_certificate_file_bad",
            "location": 115,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "nassl_module": [
                    "bool"
                ]
            }
        },
        "TestCommonSSL_CTX.test_use_PrivateKey_file": {
            "name": "test_use_PrivateKey_file",
            "location": 121,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "nassl_module": [
                    "bool"
                ]
            }
        },
        "TestCommonSSL_CTX.test_use_PrivateKey_file_bad": {
            "name": "test_use_PrivateKey_file_bad",
            "location": 145,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "nassl_module": [
                    "bool"
                ]
            }
        },
        "TestCommonSSL_CTX.test_check_private_key": {
            "name": "test_check_private_key",
            "location": 151,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "nassl_module": [
                    "bool"
                ]
            }
        },
        "TestCommonSSL_CTX.test_check_private_key_bad": {
            "name": "test_check_private_key_bad",
            "location": 219,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "nassl_module": [
                    "bool"
                ]
            }
        },
        "TestModernSSL_CTX.test_tlsv1_3": {
            "name": "test_tlsv1_3",
            "location": 228,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "nassl-release/tests/SSL_test.py": {
        "TestCommonSSL.test_new": {
            "name": "test_new",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "nassl_module": [
                    "bool"
                ]
            }
        },
        "TestCommonSSL.test_new_bad": {
            "name": "test_new_bad",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "nassl_module": []
            }
        },
        "TestCommonSSL.test_set_verify": {
            "name": "test_set_verify",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "nassl_module": [
                    "bool"
                ]
            }
        },
        "TestCommonSSL.test_set_verify_bad": {
            "name": "test_set_verify_bad",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "nassl_module": [
                    "bool"
                ]
            }
        },
        "TestCommonSSL.test_set_bio": {
            "name": "test_set_bio",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "nassl_module": []
            }
        },
        "TestCommonSSL.test_set_bio_bad": {
            "name": "test_set_bio_bad",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "nassl_module": [
                    "bool"
                ]
            }
        },
        "TestCommonSSL.test_set_connect_state": {
            "name": "test_set_connect_state",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "nassl_module": [
                    "bool"
                ]
            }
        },
        "TestCommonSSL.test_do_handshake_bad": {
            "name": "test_do_handshake_bad",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "nassl_module": [
                    "dict[str, typing.Any]",
                    "str"
                ]
            }
        },
        "TestCommonSSL.test_pending": {
            "name": "test_pending",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "nassl_module": [
                    "typing.Type",
                    "bool",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "TestCommonSSL.test_get_secure_renegotiation_support": {
            "name": "test_get_secure_renegotiation_support",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "nassl_module": [
                    "typing.Type",
                    "str",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "TestCommonSSL.test_get_current_compression_method": {
            "name": "test_get_current_compression_method",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "nassl_module": [
                    "dict[str, typing.Any]",
                    "str"
                ]
            }
        },
        "TestCommonSSL.test_get_available_compression_methods_has_zlib": {
            "name": "test_get_available_compression_methods_has_zlib",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "nassl_module": [
                    "dict[str, typing.Any]",
                    "str"
                ]
            }
        },
        "TestCommonSSL.test_set_tlsext_host_name": {
            "name": "test_set_tlsext_host_name",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "nassl_module": [
                    "typing.Type",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "TestCommonSSL.test_set_tlsext_host_name_bad": {
            "name": "test_set_tlsext_host_name_bad",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "nassl_module": [
                    "typing.Type",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "TestCommonSSL.test_set_cipher_list": {
            "name": "test_set_cipher_list",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "nassl_module": []
            }
        },
        "TestCommonSSL.test_shutdown_bad": {
            "name": "test_shutdown_bad",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "nassl_module": [
                    "typing.Type",
                    "bool",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "TestCommonSSL.test_get_cipher_list": {
            "name": "test_get_cipher_list",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "nassl_module": [
                    "dict[str, typing.Any]",
                    "str"
                ]
            }
        },
        "TestCommonSSL.test_get_cipher_name": {
            "name": "test_get_cipher_name",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "nassl_module": [
                    "typing.Type",
                    "str",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "TestCommonSSL.test_get_cipher_bits": {
            "name": "test_get_cipher_bits",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "nassl_module": [
                    "typing.Type",
                    "str",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "TestCommonSSL.test_get_client_CA_list_bad": {
            "name": "test_get_client_CA_list_bad",
            "location": 97,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "nassl_module": [
                    "str",
                    "dict[str, typing.Any]",
                    "bytes"
                ]
            }
        },
        "TestCommonSSL.test_get_verify_result": {
            "name": "test_get_verify_result",
            "location": 101,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "nassl_module": [
                    "dict[str, typing.Any]",
                    "str"
                ]
            }
        },
        "TestCommonSSL.test_renegotiate": {
            "name": "test_renegotiate",
            "location": 105,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "nassl_module": [
                    "typing.Type",
                    "bool",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "TestCommonSSL.test_get_session": {
            "name": "test_get_session",
            "location": 109,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "nassl_module": [
                    "dict[str, typing.Any]",
                    "str"
                ]
            }
        },
        "TestCommonSSL.test_set_session_bad": {
            "name": "test_set_session_bad",
            "location": 113,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "nassl_module": [
                    "str",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "TestCommonSSL.test_set_options_bad": {
            "name": "test_set_options_bad",
            "location": 118,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "nassl_module": [
                    "bool",
                    "typing.Type"
                ]
            }
        },
        "TestCommonSSL.test_set_tlsext_status_type": {
            "name": "test_set_tlsext_status_type",
            "location": 122,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "nassl_module": [
                    "dict[str, typing.Any]",
                    "typing.Type"
                ]
            }
        },
        "TestCommonSSL.test_get_tlsext_status_type": {
            "name": "test_get_tlsext_status_type",
            "location": 126,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "nassl_module": [
                    "dict[str, typing.Any]",
                    "str",
                    "None",
                    "dict[, ]"
                ]
            }
        },
        "TestModernSSL.test_set_ciphersuites_bad_string": {
            "name": "test_set_ciphersuites_bad_string",
            "location": 132,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLegacySSL.test_set_cipher_list_bad": {
            "name": "test_set_cipher_list_bad",
            "location": 142,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLegacySSL.test_do_handshake_bad_eof": {
            "name": "test_do_handshake_bad_eof",
            "location": 148,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLegacySSL.test_read_bad": {
            "name": "test_read_bad",
            "location": 155,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLegacySSL.test_write_bad": {
            "name": "test_write_bad",
            "location": 162,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "nassl-release/tests/X509_STORE_CTX_test.py": {
        "certificate_as_x509": {
            "name": "certificate_as_x509",
            "location": 7,
            "return": [
                "X509"
            ],
            "arguments": {}
        },
        "TestX509_STORE_CTX.test_set0_trusted_stack": {
            "name": "test_set0_trusted_stack",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "certificate_as_x509": [
                    "set[typing.Hashable]",
                    "typing.Hashable",
                    "typing.Sequence[typing.Hashable]",
                    "str"
                ]
            }
        },
        "TestX509_STORE_CTX.test_set0_untrusted": {
            "name": "test_set0_untrusted",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "certificate_as_x509": [
                    "set[typing.Hashable]",
                    "typing.Hashable",
                    "str",
                    "typing.Sequence[typing.Hashable]"
                ]
            }
        },
        "TestX509_STORE_CTX.test_set_cert": {
            "name": "test_set_cert",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "certificate_as_x509": [
                    "set[typing.Hashable]",
                    "typing.Hashable"
                ]
            }
        }
    },
    "nassl-release/tests/X509_test.py": {
        "TestX509.test_from_pem": {
            "name": "test_from_pem",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "nassl_module": []
            }
        },
        "TestX509.test_from_pem_bad": {
            "name": "test_from_pem_bad",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "nassl_module": []
            }
        },
        "TestX509.test_verify_cert_error_string": {
            "name": "test_verify_cert_error_string",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "nassl_module": [
                    "typing.Callable[, ]",
                    "typing.Type"
                ]
            }
        }
    },
    "nassl-release/tests/__init__.py": {},
    "nassl-release/tests/openssl_server/__init__.py": {
        "_OpenSslServerIOManager.__init__": {
            "name": "__init__",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "s_server_stdout": [
                    "str",
                    "bool",
                    "list[str]",
                    "list[]",
                    "None"
                ],
                "s_server_stdin": [
                    "str",
                    "bool",
                    "list[str]",
                    "list[]",
                    "None"
                ]
            }
        },
        "_OpenSslServerIOManager.close": {
            "name": "close",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "_OpenSslServer.get_server_certificate_path": {
            "name": "get_server_certificate_path",
            "location": 92,
            "return": [],
            "arguments": {
                "cls": [
                    "str"
                ]
            }
        },
        "_OpenSslServer.get_server_key_path": {
            "name": "get_server_key_path",
            "location": 96,
            "return": [],
            "arguments": {
                "cls": [
                    "str"
                ]
            }
        },
        "_OpenSslServer.get_client_certificate_path": {
            "name": "get_client_certificate_path",
            "location": 100,
            "return": [],
            "arguments": {
                "cls": [
                    "str"
                ]
            }
        },
        "_OpenSslServer.get_client_key_path": {
            "name": "get_client_key_path",
            "location": 104,
            "return": [],
            "arguments": {
                "cls": [
                    "str",
                    "None"
                ]
            }
        },
        "_OpenSslServer.get_openssl_path": {
            "name": "get_openssl_path",
            "location": 109,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "typing.Iterable[str]",
                    "bool",
                    "str",
                    "None"
                ]
            }
        },
        "_OpenSslServer.get_verify_argument": {
            "name": "get_verify_argument",
            "location": 114,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "tuple[typing.Union[int,int]]",
                    "typing.Callable[, ]"
                ],
                "client_auth_config": [
                    "str",
                    "tuple[typing.Union[int,int]]",
                    "typing.Callable[, ]"
                ]
            }
        },
        "_OpenSslServer.__init__": {
            "name": "__init__",
            "location": 117,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "client_auth_config": [],
                "extra_openssl_args": [
                    "list[]"
                ],
                "cipher": [
                    "None",
                    "str",
                    "list[str]",
                    "typing.Callable[, ]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "_OpenSslServer.__enter__": {
            "name": "__enter__",
            "location": 142,
            "return": [
                "_OpenSslServer"
            ],
            "arguments": {
                "self": []
            }
        },
        "_OpenSslServer.__exit__": {
            "name": "__exit__",
            "location": 170,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "_OpenSslServer._terminate_process": {
            "name": "_terminate_process",
            "location": 174,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LegacyOpenSslServer.__init__": {
            "name": "__init__",
            "location": 191,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "client_auth_config": [],
                "cipher": [
                    "None"
                ],
                "prefer_server_order": [
                    "bool"
                ]
            }
        },
        "LegacyOpenSslServer.get_openssl_path": {
            "name": "get_openssl_path",
            "location": 206,
            "return": [],
            "arguments": {
                "cls": [
                    "typing.Iterable[str]",
                    "bool",
                    "str",
                    "None"
                ]
            }
        },
        "LegacyOpenSslServer.get_verify_argument": {
            "name": "get_verify_argument",
            "location": 210,
            "return": [],
            "arguments": {
                "cls": [
                    "dict[, ]",
                    "dict[str, typing.Any]"
                ],
                "client_auth_config": [
                    "bool",
                    "None"
                ]
            }
        },
        "ModernOpenSslServer.get_openssl_path": {
            "name": "get_openssl_path",
            "location": 223,
            "return": [],
            "arguments": {
                "cls": [
                    "typing.Iterable[str]",
                    "bool",
                    "str",
                    "None"
                ]
            }
        },
        "ModernOpenSslServer.get_verify_argument": {
            "name": "get_verify_argument",
            "location": 226,
            "return": [],
            "arguments": {
                "cls": [
                    "dict[, ]",
                    "dict[str, typing.Any]"
                ],
                "client_auth_config": [
                    "bool",
                    "None"
                ]
            }
        },
        "ModernOpenSslServer.__init__": {
            "name": "__init__",
            "location": 235,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "client_auth_config": [],
                "max_early_data": [
                    "None",
                    "int",
                    "str"
                ],
                "cipher": [
                    "None",
                    "bool",
                    "str"
                ],
                "prefer_server_order": [
                    "bool"
                ],
                "groups": [
                    "None",
                    "list[str]",
                    "str",
                    "typing.Callable[, ]",
                    "list[]"
                ]
            }
        },
        "_OpenSslServerIOManager.__init__.read_and_log_and_reply": {
            "name": "read_and_log_and_reply",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    }
}
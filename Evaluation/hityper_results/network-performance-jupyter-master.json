{
    "network-performance-jupyter-master/experiments.py": {
        "run_experiment": {
            "name": "run_experiment",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "hyperparameters_file_name": [
                    "str"
                ],
                "experiment_name": [
                    "str"
                ]
            }
        }
    },
    "network-performance-jupyter-master/generate_trace.py": {
        "generate_trace_file": {
            "name": "generate_trace_file",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {
                "trace_file_path": [
                    "str"
                ],
                "bandwidth": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "network-performance-jupyter-master/run_receiver.py": {
        "main": {
            "name": "main",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "network-performance-jupyter-master/src/helpers.py": {
        "generate_mahimahi_command": {
            "name": "generate_mahimahi_command",
            "location": 21,
            "return": [
                "str"
            ],
            "arguments": {
                "mahimahi_settings": []
            }
        },
        "get_open_udp_port": {
            "name": "get_open_udp_port",
            "location": 55,
            "return": [],
            "arguments": {}
        },
        "print_performance": {
            "name": "print_performance",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "senders": [
                    "bytes",
                    "dict[, ]",
                    "str"
                ],
                "num_seconds": [
                    "int"
                ],
                "episode_num": [
                    "str",
                    "int",
                    "None"
                ],
                "write_to_disk": [
                    "bool",
                    "str"
                ],
                "output_dir": [
                    "bool",
                    "str"
                ],
                "experiment_dir": [
                    "str",
                    "int",
                    "None"
                ]
            }
        },
        "run_with_mahi_settings": {
            "name": "run_with_mahi_settings",
            "location": 130,
            "return": [
                "None"
            ],
            "arguments": {
                "mahimahi_settings": [
                    "str",
                    "list[str]",
                    "int",
                    "None"
                ],
                "seconds_to_run": [
                    "bool",
                    "list[T]",
                    "str",
                    "typing.Mapping"
                ],
                "senders": [],
                "should_print_performance": [
                    "bool"
                ],
                "episode_num": [
                    "str",
                    "int",
                    "float",
                    "None"
                ],
                "write_to_disk": [
                    "str",
                    "int",
                    "float",
                    "None"
                ],
                "output_dir": [
                    "str",
                    "int",
                    "float",
                    "None"
                ],
                "experiment_dir": [
                    "str",
                    "int",
                    "float",
                    "None"
                ]
            }
        }
    },
    "network-performance-jupyter-master/src/ml_helpers.py": {
        "optimize_model": {
            "name": "optimize_model",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "policy_net": [],
                "target_net": [
                    "bool",
                    "dict[, ]",
                    "None",
                    "tuple[str]"
                ],
                "device": [
                    "bool"
                ],
                "optimizer": [],
                "transitions": [],
                "batch_size": [
                    "float",
                    "int"
                ],
                "reward_decay": [
                    "float",
                    "int"
                ]
            }
        },
        "LSTM_DQN.__init__": {
            "name": "__init__",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "str"
                ],
                "device": [
                    "list[list[float]]",
                    "dict[str, typing.Any]"
                ],
                "use_cuda": [
                    "bool"
                ]
            }
        },
        "LSTM_DQN.forward": {
            "name": "forward",
            "location": 76,
            "return": [],
            "arguments": {
                "self": [],
                "x": []
            }
        }
    },
    "network-performance-jupyter-master/src/ml_strategy.py": {
        "ReinforcementStrategy.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "policy_net": [
                    "int",
                    "float"
                ],
                "target_net": [
                    "int",
                    "str"
                ],
                "device": [
                    "int",
                    "float"
                ],
                "optimizer": [
                    "int",
                    "float"
                ],
                "hyperparameters": [
                    "int",
                    "float"
                ],
                "episode_num": [
                    "int",
                    "float"
                ],
                "transitions": [
                    "int",
                    "float"
                ]
            }
        },
        "ReinforcementStrategy.select_next_action": {
            "name": "select_next_action",
            "location": 47,
            "return": [],
            "arguments": {
                "self": [],
                "state": [
                    "int",
                    "dict[str, typing.Any]",
                    "dict[, ]"
                ]
            }
        },
        "ReinforcementStrategy.window_is_open": {
            "name": "window_is_open",
            "location": 58,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ReinforcementStrategy.next_packet_to_send": {
            "name": "next_packet_to_send",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ReinforcementStrategy.handle_packet_loss": {
            "name": "handle_packet_loss",
            "location": 109,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "seq_num": [
                    "int",
                    "list[list[typing.Any]]"
                ],
                "segment": [
                    "str",
                    "tuple[]",
                    "list[]"
                ]
            }
        },
        "ReinforcementStrategy.compute_w_cubic": {
            "name": "compute_w_cubic",
            "location": 124,
            "return": [],
            "arguments": {
                "self": [],
                "t": [
                    "float",
                    "int"
                ]
            }
        },
        "ReinforcementStrategy.process_ack": {
            "name": "process_ack",
            "location": 128,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "serialized_ack": [
                    "str",
                    "dict[, ]",
                    "int"
                ]
            }
        },
        "ReinforcementStrategy.state_to_tensor": {
            "name": "state_to_tensor",
            "location": 202,
            "return": [],
            "arguments": {
                "self": [],
                "state": []
            }
        },
        "ReinforcementStrategy.take_action": {
            "name": "take_action",
            "location": 208,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "action": [
                    "tuple[]",
                    "typing.Callable[, ]",
                    "int"
                ]
            }
        },
        "ReinforcementStrategy.update_q_function": {
            "name": "update_q_function",
            "location": 226,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "seq_num": [
                    "int",
                    "dict[int, dict[, ]]",
                    "dict[str, typing.Any]"
                ],
                "rtt": [
                    "None",
                    "int",
                    "float",
                    "list[int]"
                ],
                "dropped_packet": [
                    "bool"
                ]
            }
        },
        "ReinforcementStrategy.compute_state": {
            "name": "compute_state",
            "location": 259,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": [],
                "begin": [
                    "int",
                    "list[]",
                    "list[dict[str, str]]"
                ],
                "end": [
                    "int",
                    "list[]",
                    "list[dict[str, str]]"
                ]
            }
        },
        "ReinforcementStrategy.compute_reward": {
            "name": "compute_reward",
            "location": 264,
            "return": [],
            "arguments": {
                "self": [],
                "rtt": [
                    "int"
                ],
                "action": [
                    "str",
                    "int",
                    "tuple[]"
                ],
                "dropped_packet": [
                    "int",
                    "str",
                    "typing.Iterable['Context']"
                ]
            }
        }
    },
    "network-performance-jupyter-master/src/receiver.py": {
        "Peer.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "port": [
                    "int",
                    "tuple[typing.Union[int,int]]"
                ],
                "window_size": [
                    "tuple[int]",
                    "int",
                    "None",
                    "str",
                    "float"
                ]
            }
        },
        "Peer.window_has_no_missing_segments": {
            "name": "window_has_no_missing_segments",
            "location": 29,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Peer.update_high_water_mark": {
            "name": "update_high_water_mark",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Peer.process_window": {
            "name": "process_window",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Peer.add_segment": {
            "name": "add_segment",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ack": []
            }
        },
        "Peer.next_ack": {
            "name": "next_ack",
            "location": 64,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Receiver.__init__": {
            "name": "__init__",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "running_time": [
                    "str",
                    "bool",
                    "None",
                    "tuple[]",
                    "list[int]"
                ],
                "peers": [
                    "dict[, ]",
                    "dict[str, typing.Any]"
                ],
                "window_size": [
                    "int"
                ]
            }
        },
        "Receiver.cleanup": {
            "name": "cleanup",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Receiver.construct_ack": {
            "name": "construct_ack",
            "location": 85,
            "return": [
                "dict[typing.Text, int]"
            ],
            "arguments": {
                "self": [],
                "serialized_data": []
            }
        },
        "Receiver.perform_handshakes": {
            "name": "perform_handshakes",
            "location": 95,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Receiver.run": {
            "name": "run",
            "location": 137,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "network-performance-jupyter-master/src/senders.py": {
        "Sender.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "port": [
                    "int",
                    "tuple[typing.Union[str,int]]",
                    "typing.Mapping"
                ],
                "strategy": [
                    "int",
                    "float"
                ]
            }
        },
        "Sender.send": {
            "name": "send",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Sender.recv": {
            "name": "recv",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Sender.handshake": {
            "name": "handshake",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Sender.run": {
            "name": "run",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "seconds_to_run": [
                    "int"
                ]
            }
        }
    },
    "network-performance-jupyter-master/src/strategies.py": {
        "SenderStrategy.__init__": {
            "name": "__init__",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SenderStrategy.next_packet_to_send": {
            "name": "next_packet_to_send",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SenderStrategy.process_ack": {
            "name": "process_ack",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ack": [
                    "int",
                    "str",
                    "typing.Iterable[C]"
                ]
            }
        },
        "FixedWindowStrategy.__init__": {
            "name": "__init__",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cwnd": [
                    "int",
                    "float"
                ]
            }
        },
        "FixedWindowStrategy.window_is_open": {
            "name": "window_is_open",
            "location": 36,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "FixedWindowStrategy.next_packet_to_send": {
            "name": "next_packet_to_send",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FixedWindowStrategy.process_ack": {
            "name": "process_ack",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "serialized_ack": [
                    "str",
                    "dict[, ]",
                    "int"
                ]
            }
        },
        "CubicStrategy.__init__": {
            "name": "__init__",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "c": [
                    "int",
                    "float"
                ]
            }
        },
        "CubicStrategy.compute_w_est": {
            "name": "compute_w_est",
            "location": 105,
            "return": [
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "CubicStrategy.compute_w_cubic": {
            "name": "compute_w_cubic",
            "location": 115,
            "return": [],
            "arguments": {
                "self": [],
                "t": [
                    "int",
                    "float"
                ]
            }
        },
        "CubicStrategy.average_rtt": {
            "name": "average_rtt",
            "location": 119,
            "return": [
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "CubicStrategy.window_is_open": {
            "name": "window_is_open",
            "location": 122,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "CubicStrategy.next_packet_to_send": {
            "name": "next_packet_to_send",
            "location": 129,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CubicStrategy.process_ack": {
            "name": "process_ack",
            "location": 180,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "serialized_ack": [
                    "str",
                    "dict[, ]",
                    "int"
                ]
            }
        },
        "TahoeStrategy.__init__": {
            "name": "__init__",
            "location": 257,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "slow_start_thresh": [
                    "int",
                    "float",
                    "str",
                    "None"
                ],
                "initial_cwnd": [
                    "int",
                    "dict[, ]"
                ]
            }
        },
        "TahoeStrategy.window_is_open": {
            "name": "window_is_open",
            "location": 273,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "TahoeStrategy.next_packet_to_send": {
            "name": "next_packet_to_send",
            "location": 280,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TahoeStrategy.process_ack": {
            "name": "process_ack",
            "location": 329,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "serialized_ack": [
                    "str",
                    "dict[, ]",
                    "int"
                ]
            }
        }
    },
    "network-performance-jupyter-master/src/__init__.py": {},
    "network-performance-jupyter-master/tests/test_receiver.py": {
        "TestPeer.test_first_segment": {
            "name": "test_first_segment",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPeer.test_out_of_order_segment": {
            "name": "test_out_of_order_segment",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPeer.test_recovery": {
            "name": "test_recovery",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPeer.test_clears_out_window": {
            "name": "test_clears_out_window",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "network-performance-jupyter-master/tests/test_strategies.py": {
        "TestTahoeStrategy.test_segments_received_in_order": {
            "name": "test_segments_received_in_order",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTahoeStrategy.test_retransmitting_packets": {
            "name": "test_retransmitting_packets",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTahoeStrategy.test_partial_ack": {
            "name": "test_partial_ack",
            "location": 111,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRenoSender.test_segments_received_in_order": {
            "name": "test_segments_received_in_order",
            "location": 152,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "network-performance-jupyter-master/tests/__init__.py": {}
}
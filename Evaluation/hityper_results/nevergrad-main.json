{
    "nevergrad-main/setup.py": {
        "_replace_relative_links": {
            "name": "_replace_relative_links",
            "location": 37,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "regex": []
            }
        },
        "VerifyCircleCiVersionCommand.run": {
            "name": "run",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "nevergrad-main/docs/conf.py": {},
    "nevergrad-main/nevergrad/__init__.py": {},
    "nevergrad-main/nevergrad/benchmark/core.py": {
        "import_additional_module": {
            "name": "import_additional_module",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "filepath": [
                    "dict[, ]",
                    "typing.Callable[typing.Mapping, collections.abc.Awaitable[]]",
                    "str"
                ]
            }
        },
        "save_or_append_to_csv": {
            "name": "save_or_append_to_csv",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "df": [],
                "path": []
            }
        },
        "_submit_jobs": {
            "name": "_submit_jobs",
            "location": 218,
            "return": [
                "list[]"
            ],
            "arguments": {
                "experiment_name": [
                    "str",
                    "bool",
                    "None"
                ],
                "num_workers": [
                    "int"
                ],
                "seed": [
                    "None",
                    "str",
                    "bool"
                ],
                "executor": [
                    "None",
                    "str",
                    "typing.Callable[, ]",
                    "typing.Sequence[typing.Any]",
                    "bool"
                ],
                "print_function": [
                    "None",
                    "float",
                    "str",
                    "list[]",
                    "int"
                ],
                "cap_index": [
                    "None",
                    "str",
                    "bool"
                ]
            }
        },
        "compute": {
            "name": "compute",
            "location": 265,
            "return": [
                "Selector"
            ],
            "arguments": {
                "experiment_name": [
                    "str",
                    "None",
                    "dict[float, float]",
                    "float",
                    "bool"
                ],
                "num_workers": [
                    "int"
                ],
                "seed": [
                    "None",
                    "str",
                    "dict[float, float]",
                    "float",
                    "bool"
                ],
                "executor": [
                    "None",
                    "str",
                    "dict[float, float]",
                    "float",
                    "bool"
                ],
                "print_function": [
                    "None",
                    "str",
                    "dict[float, float]",
                    "float",
                    "bool"
                ],
                "cap_index": [
                    "None",
                    "str",
                    "dict[float, float]",
                    "float",
                    "bool"
                ]
            }
        },
        "Moduler.__init__": {
            "name": "__init__",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "modulo": [
                    "int",
                    "float"
                ],
                "index": [
                    "typing.Iterable[typing.Any]",
                    "None",
                    "int"
                ],
                "total_length": [
                    "None",
                    "int",
                    "float"
                ]
            }
        },
        "Moduler.split": {
            "name": "split",
            "location": 68,
            "return": [
                "list[Moduler]"
            ],
            "arguments": {
                "self": [],
                "number": [
                    "int",
                    "typing.Iterator",
                    "collections.abc.Awaitable[]"
                ]
            }
        },
        "Moduler.__len__": {
            "name": "__len__",
            "location": 74,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Moduler.__call__": {
            "name": "__call__",
            "location": 79,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "typing.Callable[, ]",
                    "int",
                    "float"
                ]
            }
        },
        "Moduler.__repr__": {
            "name": "__repr__",
            "location": 82,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "BenchmarkChunk.__init__": {
            "name": "__init__",
            "location": 103,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "dict[str, typing.Any]",
                    "list[str]",
                    "dict[, ]"
                ],
                "repetitions": [
                    "int"
                ],
                "seed": [
                    "None",
                    "int",
                    "str",
                    "typing.Sequence[]"
                ],
                "cap_index": [
                    "None",
                    "int",
                    "typing.Sequence[str]",
                    "str"
                ]
            }
        },
        "BenchmarkChunk.moduler": {
            "name": "moduler",
            "location": 124,
            "return": [
                "int",
                "list[]",
                "float",
                "Moduler"
            ],
            "arguments": {
                "self": []
            }
        },
        "BenchmarkChunk.id": {
            "name": "id",
            "location": 133,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "BenchmarkChunk.__iter__": {
            "name": "__iter__",
            "location": 137,
            "return": [
                "typing.Generator[tuple[]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BenchmarkChunk.split": {
            "name": "split",
            "location": 153,
            "return": [
                "list[BenchmarkChunk]"
            ],
            "arguments": {
                "self": [],
                "number": [
                    "str",
                    "None"
                ]
            }
        },
        "BenchmarkChunk.__repr__": {
            "name": "__repr__",
            "location": 176,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "BenchmarkChunk.__len__": {
            "name": "__len__",
            "location": 179,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "BenchmarkChunk.compute": {
            "name": "compute",
            "location": 182,
            "return": [
                "Selector"
            ],
            "arguments": {
                "self": [],
                "process_function": [
                    "None",
                    "str",
                    "typing.Type"
                ]
            }
        }
    },
    "nevergrad-main/nevergrad/benchmark/execution.py": {
        "MockedTimedJob.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "func": [
                    "int",
                    "float",
                    "list[list[T]]"
                ],
                "args": [],
                "kwargs": [],
                "executor": [
                    "bool"
                ]
            }
        },
        "MockedTimedJob.release_time": {
            "name": "release_time",
            "location": 37,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MockedTimedJob.done": {
            "name": "done",
            "location": 42,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MockedTimedJob.process": {
            "name": "process",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MockedTimedJob.result": {
            "name": "result",
            "location": 53,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MockedTimedJob.__repr__": {
            "name": "__repr__",
            "location": 64,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "MockedTimedExecutor.__init__": {
            "name": "__init__",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "batch_mode": [
                    "bool"
                ]
            }
        },
        "MockedTimedExecutor.time": {
            "name": "time",
            "location": 93,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MockedTimedExecutor.submit": {
            "name": "submit",
            "location": 96,
            "return": [
                "MockedTimedJob"
            ],
            "arguments": {
                "self": [],
                "fn": [
                    "float",
                    "bool",
                    "typing.Callable[, ]",
                    "str"
                ]
            }
        },
        "MockedTimedExecutor._process_submissions": {
            "name": "_process_submissions",
            "location": 101,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MockedTimedExecutor.check_is_done": {
            "name": "check_is_done",
            "location": 111,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "job": [
                    "str",
                    "typing.BinaryIO",
                    "typing.TextIO"
                ]
            }
        },
        "MockedTimedExecutor.notify_read": {
            "name": "notify_read",
            "location": 119,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "job": [
                    "dict[, ]",
                    "int"
                ]
            }
        }
    },
    "nevergrad-main/nevergrad/benchmark/experiments.py": {
        "skip_ci": {
            "name": "skip_ci",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "keras_tuning": {
            "name": "keras_tuning",
            "location": 81,
            "return": [
                "typing.Generator[Experiment]"
            ],
            "arguments": {
                "seed": [
                    "None",
                    "str",
                    "list[str]"
                ],
                "overfitter": [
                    "bool"
                ],
                "seq": [
                    "bool"
                ]
            }
        },
        "mltuning": {
            "name": "mltuning",
            "location": 109,
            "return": [
                "typing.Generator[Experiment]"
            ],
            "arguments": {
                "seed": [
                    "None",
                    "str",
                    "list[str]",
                    "bytes"
                ],
                "overfitter": [
                    "bool"
                ],
                "seq": [
                    "bool"
                ],
                "nano": [
                    "bool"
                ]
            }
        },
        "naivemltuning": {
            "name": "naivemltuning",
            "location": 144,
            "return": [],
            "arguments": {
                "seed": [
                    "None",
                    "list[int]",
                    "bytes",
                    "typing.Callable[, ]",
                    "str"
                ]
            }
        },
        "seq_keras_tuning": {
            "name": "seq_keras_tuning",
            "location": 151,
            "return": [],
            "arguments": {
                "seed": [
                    "None",
                    "str",
                    "typing.Iterable[str]",
                    "int"
                ]
            }
        },
        "naive_seq_keras_tuning": {
            "name": "naive_seq_keras_tuning",
            "location": 158,
            "return": [],
            "arguments": {
                "seed": [
                    "None",
                    "bool",
                    "float"
                ]
            }
        },
        "oneshot_mltuning": {
            "name": "oneshot_mltuning",
            "location": 164,
            "return": [],
            "arguments": {
                "seed": [
                    "None",
                    "int",
                    "str",
                    "typing.Iterable[str]"
                ]
            }
        },
        "seq_mltuning": {
            "name": "seq_mltuning",
            "location": 171,
            "return": [],
            "arguments": {
                "seed": [
                    "None",
                    "str",
                    "typing.Iterable[str]",
                    "bool"
                ]
            }
        },
        "nano_seq_mltuning": {
            "name": "nano_seq_mltuning",
            "location": 177,
            "return": [],
            "arguments": {
                "seed": [
                    "None",
                    "bool",
                    "bytes",
                    "dict[str, str]"
                ]
            }
        },
        "nano_naive_seq_mltuning": {
            "name": "nano_naive_seq_mltuning",
            "location": 183,
            "return": [],
            "arguments": {
                "seed": [
                    "None",
                    "dict[str, typing.Any]",
                    "bytes",
                    "list[str]"
                ]
            }
        },
        "naive_seq_mltuning": {
            "name": "naive_seq_mltuning",
            "location": 190,
            "return": [],
            "arguments": {
                "seed": [
                    "None",
                    "bool"
                ]
            }
        },
        "yawidebbob": {
            "name": "yawidebbob",
            "location": 197,
            "return": [
                "typing.Generator[Experiment]"
            ],
            "arguments": {
                "seed": [
                    "None",
                    "str",
                    "list[str]"
                ]
            }
        },
        "parallel_small_budget": {
            "name": "parallel_small_budget",
            "location": 326,
            "return": [
                "typing.Generator[Experiment]"
            ],
            "arguments": {
                "seed": [
                    "None",
                    "str",
                    "list[str]"
                ]
            }
        },
        "instrum_discrete": {
            "name": "instrum_discrete",
            "location": 360,
            "return": [
                "typing.Generator[Experiment]"
            ],
            "arguments": {
                "seed": [
                    "None",
                    "str",
                    "bool"
                ]
            }
        },
        "sequential_instrum_discrete": {
            "name": "sequential_instrum_discrete",
            "location": 391,
            "return": [
                "typing.Generator[Experiment]"
            ],
            "arguments": {
                "seed": [
                    "None",
                    "str",
                    "bool"
                ]
            }
        },
        "deceptive": {
            "name": "deceptive",
            "location": 417,
            "return": [
                "typing.Generator[Experiment]"
            ],
            "arguments": {
                "seed": [
                    "None",
                    "str",
                    "bool",
                    "typing.Iterable[T]"
                ]
            }
        },
        "parallel": {
            "name": "parallel",
            "location": 440,
            "return": [
                "typing.Generator[Experiment]"
            ],
            "arguments": {
                "seed": [
                    "None",
                    "bool",
                    "list[str]",
                    "str",
                    "list[]"
                ]
            }
        },
        "harderparallel": {
            "name": "harderparallel",
            "location": 460,
            "return": [
                "typing.Generator[Experiment]"
            ],
            "arguments": {
                "seed": [
                    "None",
                    "str",
                    "bool",
                    "typing.Iterable[T]"
                ]
            }
        },
        "oneshot": {
            "name": "oneshot",
            "location": 479,
            "return": [
                "typing.Generator[Experiment]"
            ],
            "arguments": {
                "seed": [
                    "None",
                    "str",
                    "bool",
                    "typing.Iterable[T]"
                ]
            }
        },
        "doe": {
            "name": "doe",
            "location": 503,
            "return": [
                "typing.Generator[Experiment]"
            ],
            "arguments": {
                "seed": [
                    "None",
                    "str",
                    "bool",
                    "typing.Iterable[T]"
                ]
            }
        },
        "newdoe": {
            "name": "newdoe",
            "location": 523,
            "return": [
                "typing.Generator[Experiment]"
            ],
            "arguments": {
                "seed": [
                    "None",
                    "str",
                    "bool",
                    "typing.Iterable[T]"
                ]
            }
        },
        "fiveshots": {
            "name": "fiveshots",
            "location": 544,
            "return": [
                "typing.Generator[Experiment]"
            ],
            "arguments": {
                "seed": [
                    "None",
                    "str",
                    "bool",
                    "typing.Iterable[T]"
                ]
            }
        },
        "multimodal": {
            "name": "multimodal",
            "location": 563,
            "return": [
                "typing.Generator[Experiment]"
            ],
            "arguments": {
                "seed": [
                    "None",
                    "str",
                    "bool",
                    "typing.Iterable[T]"
                ],
                "para": [
                    "bool"
                ]
            }
        },
        "hdmultimodal": {
            "name": "hdmultimodal",
            "location": 592,
            "return": [
                "typing.Generator[Experiment]"
            ],
            "arguments": {
                "seed": [
                    "None",
                    "str",
                    "bool",
                    "typing.Iterable[T]"
                ]
            }
        },
        "paramultimodal": {
            "name": "paramultimodal",
            "location": 617,
            "return": [],
            "arguments": {
                "seed": [
                    "None",
                    "list[int]",
                    "bytes",
                    "typing.Callable[, ]",
                    "str"
                ]
            }
        },
        "bonnans": {
            "name": "bonnans",
            "location": 623,
            "return": [
                "typing.Generator[Experiment]"
            ],
            "arguments": {
                "seed": [
                    "None",
                    "int",
                    "str"
                ]
            }
        },
        "yabbob": {
            "name": "yabbob",
            "location": 658,
            "return": [
                "typing.Generator[Experiment]"
            ],
            "arguments": {
                "seed": [
                    "None",
                    "bool",
                    "list[str]",
                    "set[str]"
                ],
                "parallel": [
                    "bool"
                ],
                "big": [
                    "bool"
                ],
                "small": [
                    "bool"
                ],
                "noise": [
                    "bool"
                ],
                "hd": [
                    "bool"
                ],
                "constraint_case": [
                    "int"
                ],
                "split": [
                    "bool"
                ],
                "tuning": [
                    "bool"
                ],
                "reduction_factor": [
                    "int"
                ],
                "bounded": [
                    "bool"
                ],
                "box": [
                    "bool"
                ]
            }
        },
        "yahdlbbbob": {
            "name": "yahdlbbbob",
            "location": 780,
            "return": [],
            "arguments": {
                "seed": [
                    "None",
                    "bool"
                ]
            }
        },
        "reduced_yahdlbbbob": {
            "name": "reduced_yahdlbbbob",
            "location": 786,
            "return": [],
            "arguments": {
                "seed": [
                    "None",
                    "bool",
                    "bytes",
                    "dict[str, list[typing.Any]]"
                ]
            }
        },
        "yanoisysplitbbob": {
            "name": "yanoisysplitbbob",
            "location": 792,
            "return": [],
            "arguments": {
                "seed": [
                    "None",
                    "str",
                    "bool"
                ]
            }
        },
        "yahdnoisysplitbbob": {
            "name": "yahdnoisysplitbbob",
            "location": 798,
            "return": [],
            "arguments": {
                "seed": [
                    "None",
                    "str",
                    "int"
                ]
            }
        },
        "yaconstrainedbbob": {
            "name": "yaconstrainedbbob",
            "location": 804,
            "return": [],
            "arguments": {
                "seed": [
                    "None",
                    "int",
                    "list[tuple[typing.Union[int,int]]]"
                ]
            }
        },
        "yahdnoisybbob": {
            "name": "yahdnoisybbob",
            "location": 812,
            "return": [],
            "arguments": {
                "seed": [
                    "None",
                    "bool"
                ]
            }
        },
        "yabigbbob": {
            "name": "yabigbbob",
            "location": 818,
            "return": [],
            "arguments": {
                "seed": [
                    "None",
                    "str",
                    "typing.Iterable[str]",
                    "bool"
                ]
            }
        },
        "yasplitbbob": {
            "name": "yasplitbbob",
            "location": 824,
            "return": [],
            "arguments": {
                "seed": [
                    "None",
                    "str",
                    "int"
                ]
            }
        },
        "yahdsplitbbob": {
            "name": "yahdsplitbbob",
            "location": 830,
            "return": [],
            "arguments": {
                "seed": [
                    "None",
                    "int",
                    "float"
                ]
            }
        },
        "yatuningbbob": {
            "name": "yatuningbbob",
            "location": 836,
            "return": [],
            "arguments": {
                "seed": [
                    "None",
                    "str",
                    "int",
                    "typing.Sequence[str]"
                ]
            }
        },
        "yatinybbob": {
            "name": "yatinybbob",
            "location": 842,
            "return": [],
            "arguments": {
                "seed": [
                    "None",
                    "bool",
                    "str",
                    "dict[str, typing.Any]",
                    "dict[str, list[typing.Any]]"
                ]
            }
        },
        "yasmallbbob": {
            "name": "yasmallbbob",
            "location": 848,
            "return": [],
            "arguments": {
                "seed": [
                    "None",
                    "float",
                    "int",
                    "str",
                    "bytes"
                ]
            }
        },
        "yahdbbob": {
            "name": "yahdbbob",
            "location": 854,
            "return": [],
            "arguments": {
                "seed": [
                    "None",
                    "list[int]",
                    "bytes",
                    "typing.Callable[, ]",
                    "str"
                ]
            }
        },
        "yaparabbob": {
            "name": "yaparabbob",
            "location": 860,
            "return": [],
            "arguments": {
                "seed": [
                    "None",
                    "bool"
                ]
            }
        },
        "yanoisybbob": {
            "name": "yanoisybbob",
            "location": 866,
            "return": [],
            "arguments": {
                "seed": [
                    "None",
                    "list[int]",
                    "bytes",
                    "typing.Callable[, ]",
                    "str"
                ]
            }
        },
        "yaboundedbbob": {
            "name": "yaboundedbbob",
            "location": 876,
            "return": [],
            "arguments": {
                "seed": [
                    "None",
                    "list[int]",
                    "bytes",
                    "typing.Callable[, ]",
                    "str"
                ]
            }
        },
        "yaboxbbob": {
            "name": "yaboxbbob",
            "location": 882,
            "return": [],
            "arguments": {
                "seed": [
                    "None",
                    "list[int]",
                    "bytes",
                    "typing.Callable[, ]",
                    "str"
                ]
            }
        },
        "illcondi": {
            "name": "illcondi",
            "location": 888,
            "return": [
                "typing.Generator[Experiment]"
            ],
            "arguments": {
                "seed": [
                    "None",
                    "str",
                    "bool"
                ]
            }
        },
        "illcondipara": {
            "name": "illcondipara",
            "location": 909,
            "return": [
                "typing.Generator[Experiment]"
            ],
            "arguments": {
                "seed": [
                    "None",
                    "bool",
                    "str"
                ]
            }
        },
        "constrained_illconditioned_parallel": {
            "name": "constrained_illconditioned_parallel",
            "location": 929,
            "return": [
                "typing.Generator[Experiment]"
            ],
            "arguments": {
                "seed": [
                    "None",
                    "bool",
                    "list[str]",
                    "str",
                    "list[]"
                ]
            }
        },
        "ranknoisy": {
            "name": "ranknoisy",
            "location": 947,
            "return": [
                "typing.Generator[Experiment]"
            ],
            "arguments": {
                "seed": [
                    "None",
                    "str",
                    "list[str]",
                    "bytes"
                ]
            }
        },
        "noisy": {
            "name": "noisy",
            "location": 983,
            "return": [
                "typing.Generator[Experiment]"
            ],
            "arguments": {
                "seed": [
                    "None",
                    "str",
                    "list[str]",
                    "bytes"
                ]
            }
        },
        "paraalldes": {
            "name": "paraalldes",
            "location": 1019,
            "return": [
                "typing.Generator[Experiment]"
            ],
            "arguments": {
                "seed": [
                    "None",
                    "typing.Callable[, ]",
                    "bytes",
                    "bool"
                ]
            }
        },
        "parahdbo4d": {
            "name": "parahdbo4d",
            "location": 1049,
            "return": [
                "typing.Generator[Experiment]"
            ],
            "arguments": {
                "seed": [
                    "None",
                    "int",
                    "typing.Callable[, ]"
                ]
            }
        },
        "alldes": {
            "name": "alldes",
            "location": 1080,
            "return": [
                "typing.Generator[Experiment]"
            ],
            "arguments": {
                "seed": [
                    "None",
                    "int"
                ]
            }
        },
        "hdbo4d": {
            "name": "hdbo4d",
            "location": 1104,
            "return": [
                "typing.Generator[Experiment]"
            ],
            "arguments": {
                "seed": [
                    "None",
                    "bool",
                    "str"
                ]
            }
        },
        "spsa_benchmark": {
            "name": "spsa_benchmark",
            "location": 1128,
            "return": [
                "typing.Generator[Experiment]"
            ],
            "arguments": {
                "seed": [
                    "None",
                    "str",
                    "list[str]",
                    "bytes"
                ]
            }
        },
        "realworld": {
            "name": "realworld",
            "location": 1147,
            "return": [
                "typing.Generator[Experiment]"
            ],
            "arguments": {
                "seed": [
                    "None",
                    "str",
                    "bool"
                ]
            }
        },
        "aquacrop_fao": {
            "name": "aquacrop_fao",
            "location": 1208,
            "return": [
                "typing.Generator[Experiment]"
            ],
            "arguments": {
                "seed": [
                    "None",
                    "str",
                    "bool"
                ]
            }
        },
        "fishing": {
            "name": "fishing",
            "location": 1225,
            "return": [
                "typing.Generator[Experiment]"
            ],
            "arguments": {
                "seed": [
                    "None",
                    "str",
                    "bool"
                ]
            }
        },
        "rocket": {
            "name": "rocket",
            "location": 1239,
            "return": [
                "typing.Generator[Experiment]"
            ],
            "arguments": {
                "seed": [
                    "None",
                    "str",
                    "bool"
                ],
                "seq": [
                    "bool"
                ]
            }
        },
        "mono_rocket": {
            "name": "mono_rocket",
            "location": 1258,
            "return": [],
            "arguments": {
                "seed": [
                    "None",
                    "list[int]",
                    "bytes",
                    "typing.Callable[, ]",
                    "str"
                ]
            }
        },
        "mixsimulator": {
            "name": "mixsimulator",
            "location": 1264,
            "return": [
                "typing.Generator[Experiment]"
            ],
            "arguments": {
                "seed": [
                    "None",
                    "str",
                    "list[str]"
                ]
            }
        },
        "control_problem": {
            "name": "control_problem",
            "location": 1283,
            "return": [
                "typing.Generator[Experiment]"
            ],
            "arguments": {
                "seed": [
                    "None",
                    "int",
                    "str"
                ]
            }
        },
        "neuro_control_problem": {
            "name": "neuro_control_problem",
            "location": 1323,
            "return": [
                "typing.Generator[Experiment]"
            ],
            "arguments": {
                "seed": [
                    "None",
                    "int",
                    "str"
                ]
            }
        },
        "olympus_surfaces": {
            "name": "olympus_surfaces",
            "location": 1350,
            "return": [
                "typing.Generator[Experiment]"
            ],
            "arguments": {
                "seed": [
                    "None",
                    "str",
                    "bool"
                ]
            }
        },
        "olympus_emulators": {
            "name": "olympus_emulators",
            "location": 1374,
            "return": [
                "typing.Generator[Experiment]"
            ],
            "arguments": {
                "seed": [
                    "None",
                    "str",
                    "bool"
                ]
            }
        },
        "simple_tsp": {
            "name": "simple_tsp",
            "location": 1396,
            "return": [
                "typing.Generator[Experiment]"
            ],
            "arguments": {
                "seed": [
                    "None",
                    "int",
                    "str",
                    "list[dict[str, typing.Any]]"
                ],
                "complex_tsp": [
                    "bool"
                ]
            }
        },
        "complex_tsp": {
            "name": "complex_tsp",
            "location": 1432,
            "return": [],
            "arguments": {
                "seed": [
                    "None",
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ]
            }
        },
        "sequential_fastgames": {
            "name": "sequential_fastgames",
            "location": 1438,
            "return": [
                "typing.Generator[Experiment]"
            ],
            "arguments": {
                "seed": [
                    "None",
                    "str",
                    "bool"
                ]
            }
        },
        "powersystems": {
            "name": "powersystems",
            "location": 1456,
            "return": [
                "typing.Generator[Experiment]"
            ],
            "arguments": {
                "seed": [
                    "None",
                    "str",
                    "bool"
                ]
            }
        },
        "mlda": {
            "name": "mlda",
            "location": 1475,
            "return": [
                "typing.Generator[Experiment]"
            ],
            "arguments": {
                "seed": [
                    "None",
                    "bool",
                    "str",
                    "typing.Iterable[T]"
                ]
            }
        },
        "mldakmeans": {
            "name": "mldakmeans",
            "location": 1502,
            "return": [
                "typing.Generator[Experiment]"
            ],
            "arguments": {
                "seed": [
                    "None",
                    "bool",
                    "str",
                    "typing.Iterable[T]"
                ]
            }
        },
        "image_similarity": {
            "name": "image_similarity",
            "location": 1522,
            "return": [
                "typing.Generator[Experiment]"
            ],
            "arguments": {
                "seed": [
                    "None",
                    "str",
                    "int",
                    "float"
                ],
                "with_pgan": [
                    "bool"
                ],
                "similarity": [
                    "bool"
                ]
            }
        },
        "image_similarity_pgan": {
            "name": "image_similarity_pgan",
            "location": 1543,
            "return": [],
            "arguments": {
                "seed": [
                    "None",
                    "int",
                    "str"
                ]
            }
        },
        "image_single_quality": {
            "name": "image_single_quality",
            "location": 1549,
            "return": [],
            "arguments": {
                "seed": [
                    "None",
                    "bool",
                    "str"
                ]
            }
        },
        "image_single_quality_pgan": {
            "name": "image_single_quality_pgan",
            "location": 1555,
            "return": [],
            "arguments": {
                "seed": [
                    "None",
                    "bool",
                    "str"
                ]
            }
        },
        "image_multi_similarity": {
            "name": "image_multi_similarity",
            "location": 1561,
            "return": [
                "typing.Generator[Experiment]"
            ],
            "arguments": {
                "seed": [
                    "None",
                    "str"
                ],
                "cross_valid": [
                    "bool"
                ],
                "with_pgan": [
                    "bool"
                ]
            }
        },
        "image_multi_similarity_pgan": {
            "name": "image_multi_similarity_pgan",
            "location": 1589,
            "return": [],
            "arguments": {
                "seed": [
                    "None",
                    "bool",
                    "bytes"
                ]
            }
        },
        "image_multi_similarity_cv": {
            "name": "image_multi_similarity_cv",
            "location": 1595,
            "return": [],
            "arguments": {
                "seed": [
                    "None",
                    "str",
                    "list[str]"
                ]
            }
        },
        "image_multi_similarity_pgan_cv": {
            "name": "image_multi_similarity_pgan_cv",
            "location": 1601,
            "return": [],
            "arguments": {
                "seed": [
                    "None",
                    "int",
                    "str",
                    "list[str]",
                    "tuple[typing.Union[str,...]]"
                ]
            }
        },
        "image_quality_proxy": {
            "name": "image_quality_proxy",
            "location": 1607,
            "return": [
                "typing.Generator[Experiment]"
            ],
            "arguments": {
                "seed": [
                    "None",
                    "list[]",
                    "str",
                    "int"
                ],
                "with_pgan": [
                    "bool"
                ]
            }
        },
        "image_quality_proxy_pgan": {
            "name": "image_quality_proxy_pgan",
            "location": 1627,
            "return": [],
            "arguments": {
                "seed": [
                    "None",
                    "bool",
                    "bytes"
                ]
            }
        },
        "image_quality": {
            "name": "image_quality",
            "location": 1632,
            "return": [
                "typing.Generator[Experiment]"
            ],
            "arguments": {
                "seed": [
                    "None",
                    "str",
                    "list[str]",
                    "bool",
                    "list[]"
                ],
                "cross_val": [
                    "bool"
                ],
                "with_pgan": [
                    "bool"
                ],
                "num_images": [
                    "int"
                ]
            }
        },
        "morphing_pgan_quality": {
            "name": "morphing_pgan_quality",
            "location": 1672,
            "return": [],
            "arguments": {
                "seed": [
                    "None",
                    "str",
                    "bool"
                ]
            }
        },
        "image_quality_cv": {
            "name": "image_quality_cv",
            "location": 1677,
            "return": [],
            "arguments": {
                "seed": [
                    "None",
                    "bool",
                    "bytes"
                ]
            }
        },
        "image_quality_pgan": {
            "name": "image_quality_pgan",
            "location": 1683,
            "return": [],
            "arguments": {
                "seed": [
                    "None",
                    "int",
                    "str"
                ]
            }
        },
        "image_quality_cv_pgan": {
            "name": "image_quality_cv_pgan",
            "location": 1689,
            "return": [],
            "arguments": {
                "seed": [
                    "None",
                    "bool",
                    "str"
                ]
            }
        },
        "image_similarity_and_quality": {
            "name": "image_similarity_and_quality",
            "location": 1695,
            "return": [
                "typing.Generator[Experiment]"
            ],
            "arguments": {
                "seed": [
                    "None",
                    "list[]",
                    "str",
                    "int"
                ],
                "cross_val": [
                    "bool"
                ],
                "with_pgan": [
                    "bool"
                ]
            }
        },
        "image_similarity_and_quality_cv": {
            "name": "image_similarity_and_quality_cv",
            "location": 1733,
            "return": [],
            "arguments": {
                "seed": [
                    "None",
                    "str",
                    "int",
                    "typing.Iterable[int]"
                ]
            }
        },
        "image_similarity_and_quality_pgan": {
            "name": "image_similarity_and_quality_pgan",
            "location": 1739,
            "return": [],
            "arguments": {
                "seed": [
                    "None",
                    "bool",
                    "bytes"
                ]
            }
        },
        "image_similarity_and_quality_cv_pgan": {
            "name": "image_similarity_and_quality_cv_pgan",
            "location": 1745,
            "return": [],
            "arguments": {
                "seed": [
                    "None",
                    "str",
                    "bool"
                ]
            }
        },
        "double_o_seven": {
            "name": "double_o_seven",
            "location": 1751,
            "return": [
                "typing.Generator[Experiment]"
            ],
            "arguments": {
                "seed": [
                    "None",
                    "int",
                    "str"
                ]
            }
        },
        "multiobjective_example": {
            "name": "multiobjective_example",
            "location": 1789,
            "return": [
                "typing.Generator[Experiment]"
            ],
            "arguments": {
                "seed": [
                    "None",
                    "str",
                    "bool"
                ],
                "hd": [
                    "bool"
                ],
                "many": [
                    "bool"
                ]
            }
        },
        "multiobjective_example_hd": {
            "name": "multiobjective_example_hd",
            "location": 1865,
            "return": [],
            "arguments": {
                "seed": [
                    "None",
                    "typing.Callable[, ]",
                    "int",
                    "bytes",
                    "str"
                ]
            }
        },
        "multiobjective_example_many_hd": {
            "name": "multiobjective_example_many_hd",
            "location": 1871,
            "return": [],
            "arguments": {
                "seed": [
                    "None",
                    "bool",
                    "float"
                ]
            }
        },
        "multiobjective_example_many": {
            "name": "multiobjective_example_many",
            "location": 1877,
            "return": [],
            "arguments": {
                "seed": [
                    "None",
                    "typing.Callable[, ]",
                    "int",
                    "bytes",
                    "str"
                ]
            }
        },
        "pbt": {
            "name": "pbt",
            "location": 1883,
            "return": [
                "typing.Generator[Experiment]"
            ],
            "arguments": {
                "seed": [
                    "None",
                    "int"
                ]
            }
        },
        "far_optimum_es": {
            "name": "far_optimum_es",
            "location": 1904,
            "return": [
                "typing.Generator[Experiment]"
            ],
            "arguments": {
                "seed": [
                    "None",
                    "str",
                    "bool",
                    "list[str]"
                ]
            }
        },
        "photonics": {
            "name": "photonics",
            "location": 1915,
            "return": [
                "typing.Generator[Experiment]"
            ],
            "arguments": {
                "seed": [
                    "None",
                    "int",
                    "str",
                    "BaseException"
                ],
                "as_tuple": [
                    "bool"
                ]
            }
        },
        "photonics2": {
            "name": "photonics2",
            "location": 1930,
            "return": [],
            "arguments": {
                "seed": [
                    "None",
                    "dict[str, typing.Any]",
                    "str",
                    "typing.Type"
                ]
            }
        },
        "adversarial_attack": {
            "name": "adversarial_attack",
            "location": 1936,
            "return": [
                "typing.Generator[Experiment]"
            ],
            "arguments": {
                "seed": [
                    "None",
                    "bool",
                    "str",
                    "typing.Iterable[T]"
                ]
            }
        },
        "pbo_suite": {
            "name": "pbo_suite",
            "location": 1962,
            "return": [
                "typing.Generator[Experiment]"
            ],
            "arguments": {
                "seed": [
                    "None",
                    "int",
                    "str"
                ],
                "reduced": [
                    "bool"
                ]
            }
        },
        "pbo_reduced_suite": {
            "name": "pbo_reduced_suite",
            "location": 2007,
            "return": [],
            "arguments": {
                "seed": [
                    "None",
                    "typing.Callable[, ]",
                    "int",
                    "bytes",
                    "str"
                ]
            }
        },
        "causal_similarity": {
            "name": "causal_similarity",
            "location": 2011,
            "return": [
                "typing.Generator[Experiment]"
            ],
            "arguments": {
                "seed": [
                    "None",
                    "int",
                    "str"
                ]
            }
        },
        "unit_commitment": {
            "name": "unit_commitment",
            "location": 2027,
            "return": [
                "typing.Generator[Experiment]"
            ],
            "arguments": {
                "seed": [
                    "None",
                    "int",
                    "str",
                    "list[dict[str, typing.Any]]"
                ]
            }
        },
        "team_cycling": {
            "name": "team_cycling",
            "location": 2041,
            "return": [
                "typing.Generator[Experiment]"
            ],
            "arguments": {
                "seed": [
                    "None",
                    "int",
                    "str"
                ]
            }
        },
        "_Constraint.__init__": {
            "name": "__init__",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "typing.OrderedDict",
                    "str",
                    "typing.Sequence[typing.Any]",
                    "None",
                    "bool"
                ],
                "as_bool": [
                    "list[str]",
                    "None",
                    "int",
                    "str"
                ]
            }
        },
        "_Constraint.__call__": {
            "name": "__call__",
            "location": 64,
            "return": [
                "bool",
                "float"
            ],
            "arguments": {
                "self": [],
                "data": []
            }
        }
    },
    "nevergrad-main/nevergrad/benchmark/exporttable.py": {
        "remove_parens": {
            "name": "remove_parens",
            "location": 11,
            "return": [
                "list[list[str]]"
            ],
            "arguments": {
                "data": [
                    "list[list[str]]",
                    "tuple[]",
                    "bytes",
                    "str",
                    "dict[, ]"
                ]
            }
        },
        "export_table": {
            "name": "export_table",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "filename": [
                    "str"
                ],
                "rows": [
                    "bytes",
                    "dict[, ]"
                ],
                "cols": [
                    "bytes",
                    "str",
                    "tuple[typing.Union[int,str]]"
                ],
                "data": [
                    "str",
                    "dict[str, typing.Any]"
                ]
            }
        }
    },
    "nevergrad-main/nevergrad/benchmark/frozenexperiments.py": {
        "basic": {
            "name": "basic",
            "location": 20,
            "return": [],
            "arguments": {
                "seed": [
                    "None",
                    "int",
                    "str"
                ]
            }
        },
        "repeated_basic": {
            "name": "repeated_basic",
            "location": 31,
            "return": [
                "typing.Generator[Experiment]"
            ],
            "arguments": {
                "seed": [
                    "None",
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ]
            }
        },
        "illcond": {
            "name": "illcond",
            "location": 42,
            "return": [
                "typing.Generator[Experiment]"
            ],
            "arguments": {
                "seed": [
                    "None",
                    "int"
                ]
            }
        },
        "compabasedillcond": {
            "name": "compabasedillcond",
            "location": 54,
            "return": [
                "typing.Generator[Experiment]"
            ],
            "arguments": {
                "seed": [
                    "None",
                    "int"
                ]
            }
        },
        "noise": {
            "name": "noise",
            "location": 74,
            "return": [
                "typing.Generator[Experiment]"
            ],
            "arguments": {
                "seed": [
                    "None",
                    "int"
                ]
            }
        },
        "dim10_smallbudget": {
            "name": "dim10_smallbudget",
            "location": 93,
            "return": [
                "typing.Generator[Experiment]"
            ],
            "arguments": {
                "seed": [
                    "None",
                    "int",
                    "str"
                ]
            }
        },
        "dim10_select_two_features": {
            "name": "dim10_select_two_features",
            "location": 117,
            "return": [
                "typing.Generator[Experiment]"
            ],
            "arguments": {
                "seed": [
                    "None",
                    "int",
                    "str"
                ]
            }
        },
        "dim10_select_one_feature": {
            "name": "dim10_select_one_feature",
            "location": 140,
            "return": [
                "typing.Generator[Experiment]"
            ],
            "arguments": {
                "seed": [
                    "None",
                    "int",
                    "str"
                ]
            }
        },
        "doe_dim4": {
            "name": "doe_dim4",
            "location": 165,
            "return": [
                "typing.Generator[Experiment]"
            ],
            "arguments": {
                "seed": [
                    "None",
                    "int",
                    "str"
                ]
            }
        },
        "oneshot4": {
            "name": "oneshot4",
            "location": 190,
            "return": [
                "typing.Generator[Experiment]"
            ],
            "arguments": {
                "seed": [
                    "None",
                    "int",
                    "str"
                ]
            }
        },
        "oneshot3": {
            "name": "oneshot3",
            "location": 214,
            "return": [
                "typing.Generator[Experiment]"
            ],
            "arguments": {
                "seed": [
                    "None",
                    "int",
                    "str"
                ]
            }
        },
        "oneshot2": {
            "name": "oneshot2",
            "location": 230,
            "return": [
                "typing.Generator[Experiment]"
            ],
            "arguments": {
                "seed": [
                    "None",
                    "int",
                    "str"
                ]
            }
        },
        "oneshot1": {
            "name": "oneshot1",
            "location": 247,
            "return": [
                "typing.Generator[Experiment]"
            ],
            "arguments": {
                "seed": [
                    "None",
                    "int"
                ]
            }
        },
        "metanoise": {
            "name": "metanoise",
            "location": 267,
            "return": [
                "typing.Generator[Experiment]"
            ],
            "arguments": {
                "seed": [
                    "None",
                    "int"
                ]
            }
        }
    },
    "nevergrad-main/nevergrad/benchmark/gymexperiments.py": {
        "gym_problem_modifier": {
            "name": "gym_problem_modifier",
            "location": 19,
            "return": [
                "str",
                "list[str]"
            ],
            "arguments": {
                "specific_problem": [
                    "str",
                    "tuple[typing.Union[str,str]]"
                ]
            }
        },
        "gym_optimizer_modifier": {
            "name": "gym_optimizer_modifier",
            "location": 25,
            "return": [
                "list[int]",
                "str",
                "list[typing.Union[str,typing.Type,dict[str, dict[str, typing.Any]],dict[str, list[]],dict[str, dict[str, None]]]]"
            ],
            "arguments": {
                "optims": [
                    "list[int]",
                    "str"
                ]
            }
        },
        "gym_budget_modifier": {
            "name": "gym_budget_modifier",
            "location": 37,
            "return": [
                "list[]"
            ],
            "arguments": {
                "budgets": []
            }
        },
        "ng_full_gym": {
            "name": "ng_full_gym",
            "location": 46,
            "return": [
                "typing.Generator[Experiment]"
            ],
            "arguments": {
                "seed": [
                    "None",
                    "int",
                    "str",
                    "list[dict[str, typing.Any]]"
                ],
                "randomized": [
                    "bool"
                ],
                "multi": [
                    "bool"
                ],
                "big": [
                    "bool"
                ],
                "memory": [
                    "bool"
                ],
                "ng_gym": [
                    "bool"
                ],
                "conformant": [
                    "bool"
                ],
                "gp": [
                    "bool"
                ],
                "sparse": [
                    "bool"
                ],
                "multi_scale": [
                    "bool"
                ]
            }
        },
        "multi_ng_full_gym": {
            "name": "multi_ng_full_gym",
            "location": 181,
            "return": [],
            "arguments": {
                "seed": [
                    "None",
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ]
            }
        },
        "conformant_ng_full_gym": {
            "name": "conformant_ng_full_gym",
            "location": 189,
            "return": [],
            "arguments": {
                "seed": [
                    "None",
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ]
            }
        },
        "ng_gym": {
            "name": "ng_gym",
            "location": 199,
            "return": [],
            "arguments": {
                "seed": [
                    "None",
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ]
            }
        },
        "gp": {
            "name": "gp",
            "location": 205,
            "return": [],
            "arguments": {
                "seed": [
                    "None",
                    "str",
                    "bool"
                ]
            }
        },
        "conformant_gp": {
            "name": "conformant_gp",
            "location": 214,
            "return": [],
            "arguments": {
                "seed": [
                    "None",
                    "int",
                    "str",
                    "bytes",
                    "typing.Sequence[str]"
                ]
            }
        },
        "sparse_gp": {
            "name": "sparse_gp",
            "location": 223,
            "return": [],
            "arguments": {
                "seed": [
                    "None",
                    "str",
                    "int"
                ]
            }
        },
        "ng_stacking_gym": {
            "name": "ng_stacking_gym",
            "location": 232,
            "return": [],
            "arguments": {
                "seed": [
                    "None",
                    "bool",
                    "str",
                    "tuple[typing.Union[float,float]]",
                    "float"
                ]
            }
        },
        "big_gym_multi": {
            "name": "big_gym_multi",
            "location": 238,
            "return": [],
            "arguments": {
                "seed": [
                    "None",
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ]
            }
        },
        "deterministic_gym_multi": {
            "name": "deterministic_gym_multi",
            "location": 244,
            "return": [],
            "arguments": {
                "seed": [
                    "None",
                    "float",
                    "str"
                ]
            }
        },
        "gym_multifid_anm": {
            "name": "gym_multifid_anm",
            "location": 250,
            "return": [
                "typing.Generator[Experiment]"
            ],
            "arguments": {
                "seed": [
                    "None",
                    "bool",
                    "str",
                    "typing.Iterable[T]"
                ]
            }
        },
        "gym_problem": {
            "name": "gym_problem",
            "location": 265,
            "return": [
                "typing.Generator[Experiment]"
            ],
            "arguments": {
                "seed": [
                    "None",
                    "int",
                    "str"
                ],
                "specific_problem": [
                    "typing.Text"
                ],
                "conformant": [
                    "bool"
                ],
                "compiler_gym_pb_index": [
                    "None",
                    "int"
                ],
                "limited_compiler_gym": [
                    "None",
                    "int",
                    "typing.Iterator",
                    "typing.Sequence['cirq.Qid']"
                ],
                "big_noise": [
                    "bool"
                ],
                "multi_scale": [
                    "bool"
                ],
                "greedy_bias": [
                    "bool"
                ]
            }
        },
        "limited_stochastic_compiler_gym": {
            "name": "limited_stochastic_compiler_gym",
            "location": 384,
            "return": [],
            "arguments": {
                "seed": [
                    "None",
                    "str",
                    "bool",
                    "tuple[typing.Union[int,int]]",
                    "bytearray"
                ]
            }
        },
        "multiscale_limited_stochastic_compiler_gym": {
            "name": "multiscale_limited_stochastic_compiler_gym",
            "location": 390,
            "return": [],
            "arguments": {
                "seed": [
                    "None",
                    "str",
                    "bytearray"
                ]
            }
        },
        "unlimited_hardcore_stochastic_compiler_gym": {
            "name": "unlimited_hardcore_stochastic_compiler_gym",
            "location": 398,
            "return": [],
            "arguments": {
                "seed": [
                    "None",
                    "bool",
                    "str",
                    "bytes"
                ]
            }
        },
        "conformant_planning": {
            "name": "conformant_planning",
            "location": 406,
            "return": [],
            "arguments": {
                "seed": [
                    "None",
                    "int"
                ]
            }
        },
        "neuro_planning": {
            "name": "neuro_planning",
            "location": 419,
            "return": [],
            "arguments": {
                "seed": [
                    "None",
                    "float"
                ]
            }
        },
        "limited_hardcore_stochastic_compiler_gym": {
            "name": "limited_hardcore_stochastic_compiler_gym",
            "location": 431,
            "return": [],
            "arguments": {
                "seed": [
                    "None",
                    "str",
                    "bytes"
                ]
            }
        },
        "greedy_limited_stochastic_compiler_gym": {
            "name": "greedy_limited_stochastic_compiler_gym",
            "location": 439,
            "return": [],
            "arguments": {
                "seed": [
                    "None",
                    "str",
                    "bytes"
                ]
            }
        },
        "unlimited_stochastic_compiler_gym": {
            "name": "unlimited_stochastic_compiler_gym",
            "location": 447,
            "return": [],
            "arguments": {
                "seed": [
                    "None",
                    "bool",
                    "typing.Callable[, ]",
                    "str"
                ]
            }
        },
        "unlimited_direct_problems23_compiler_gym": {
            "name": "unlimited_direct_problems23_compiler_gym",
            "location": 453,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "seed": [
                    "None",
                    "int"
                ]
            }
        },
        "limited_direct_problems23_compiler_gym": {
            "name": "limited_direct_problems23_compiler_gym",
            "location": 467,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "seed": [
                    "None",
                    "int"
                ]
            }
        }
    },
    "nevergrad-main/nevergrad/benchmark/optgroups.py": {
        "get_optimizers": {
            "name": "get_optimizers",
            "location": 22,
            "return": [
                "list[]"
            ],
            "arguments": {}
        },
        "large": {
            "name": "large",
            "location": 46,
            "return": [
                "list[typing.Text]"
            ],
            "arguments": {}
        },
        "emna_variants": {
            "name": "emna_variants",
            "location": 81,
            "return": [
                "list[typing.Text]"
            ],
            "arguments": {}
        },
        "splitters": {
            "name": "splitters",
            "location": 97,
            "return": [
                "list[typing.Union[dict[, ],list[str],int]]"
            ],
            "arguments": {}
        },
        "progressive": {
            "name": "progressive",
            "location": 109,
            "return": [
                "list[typing.Union[int,list[int],tuple[typing.Union[typing.Literal,typing.Literal]],str]]"
            ],
            "arguments": {}
        },
        "anisotropic_progressive": {
            "name": "anisotropic_progressive",
            "location": 127,
            "return": [
                "list[typing.Union[list[],dict[, ]]]"
            ],
            "arguments": {}
        },
        "basics": {
            "name": "basics",
            "location": 151,
            "return": [
                "list[typing.Text]"
            ],
            "arguments": {}
        },
        "baselines": {
            "name": "baselines",
            "location": 156,
            "return": [
                "list[typing.Text]"
            ],
            "arguments": {}
        },
        "parallel_basics": {
            "name": "parallel_basics",
            "location": 163,
            "return": [
                "list[typing.Text]"
            ],
            "arguments": {}
        },
        "cma": {
            "name": "cma",
            "location": 168,
            "return": [
                "list[typing.Text]"
            ],
            "arguments": {}
        },
        "competence_map": {
            "name": "competence_map",
            "location": 173,
            "return": [
                "list[typing.Text]"
            ],
            "arguments": {}
        },
        "competitive": {
            "name": "competitive",
            "location": 178,
            "return": [],
            "arguments": {}
        },
        "all_bo": {
            "name": "all_bo",
            "location": 192,
            "return": [
                "list[]"
            ],
            "arguments": {}
        },
        "all_nlopts": {
            "name": "all_nlopts",
            "location": 197,
            "return": [
                "list[]"
            ],
            "arguments": {}
        },
        "discrete": {
            "name": "discrete",
            "location": 216,
            "return": [
                "list[]"
            ],
            "arguments": {}
        },
        "noisy": {
            "name": "noisy",
            "location": 221,
            "return": [
                "list[typing.Text]"
            ],
            "arguments": {}
        },
        "structure": {
            "name": "structure",
            "location": 226,
            "return": [
                "list[typing.Text]"
            ],
            "arguments": {}
        },
        "small_discrete": {
            "name": "small_discrete",
            "location": 231,
            "return": [
                "list[typing.Text]"
            ],
            "arguments": {}
        },
        "scipy": {
            "name": "scipy",
            "location": 253,
            "return": [
                "list[typing.Text]"
            ],
            "arguments": {}
        },
        "es": {
            "name": "es",
            "location": 258,
            "return": [
                "list[]"
            ],
            "arguments": {}
        },
        "multimodal": {
            "name": "multimodal",
            "location": 271,
            "return": [
                "list[typing.Text]"
            ],
            "arguments": {}
        },
        "oneshot": {
            "name": "oneshot",
            "location": 277,
            "return": [
                "list[]"
            ],
            "arguments": {}
        },
        "structured_moo": {
            "name": "structured_moo",
            "location": 291,
            "return": [
                "list[typing.Text]"
            ],
            "arguments": {}
        },
        "spsa": {
            "name": "spsa",
            "location": 306,
            "return": [
                "list[typing.Text]"
            ],
            "arguments": {}
        }
    },
    "nevergrad-main/nevergrad/benchmark/plotting.py": {
        "compactize": {
            "name": "compactize",
            "location": 33,
            "return": [],
            "arguments": {
                "name": []
            }
        },
        "_make_style_generator": {
            "name": "_make_style_generator",
            "location": 43,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {}
        },
        "_make_winners_df": {
            "name": "_make_winners_df",
            "location": 63,
            "return": [],
            "arguments": {
                "df": [
                    "float",
                    "tuple[typing.Union[float,float]]"
                ],
                "all_optimizers": [
                    "list[int]"
                ]
            }
        },
        "aggregate_winners": {
            "name": "aggregate_winners",
            "location": 82,
            "return": [
                "tuple[int]",
                "tuple[bool]"
            ],
            "arguments": {
                "df": [],
                "categories": [
                    "str",
                    "list[dict[, ]]"
                ],
                "all_optimizers": [
                    "int",
                    "str",
                    "list[dict[, ]]",
                    "dict[int, tuple[typing.Union[int,int]]]"
                ]
            }
        },
        "_make_sorted_winrates_df": {
            "name": "_make_sorted_winrates_df",
            "location": 116,
            "return": [],
            "arguments": {
                "victories": [
                    "bool"
                ]
            }
        },
        "remove_errors": {
            "name": "remove_errors",
            "location": 132,
            "return": [],
            "arguments": {
                "df": [
                    "int",
                    "typing.Callable[..., bool]"
                ]
            }
        },
        "merge_optimizer_name_pattern": {
            "name": "merge_optimizer_name_pattern",
            "location": 173,
            "return": [],
            "arguments": {
                "df": [],
                "pattern": [
                    "int",
                    "None"
                ],
                "merge_parametrization": [
                    "bool"
                ],
                "remove_suffix": [
                    "bool"
                ]
            }
        },
        "normalized_losses": {
            "name": "normalized_losses",
            "location": 208,
            "return": [],
            "arguments": {
                "df": [
                    "dict[str, typing.Any]"
                ],
                "descriptors": [
                    "float",
                    "list[typing.Mapping]",
                    "int"
                ]
            }
        },
        "create_plots": {
            "name": "create_plots",
            "location": 224,
            "return": [
                "None"
            ],
            "arguments": {
                "df": [
                    "str",
                    "typing.IO",
                    "bool",
                    "typing.BinaryIO"
                ],
                "output_folder": [
                    "str"
                ],
                "max_combsize": [
                    "int"
                ],
                "xpaxis": [
                    "typing.Text"
                ],
                "competencemaps": [
                    "bool"
                ]
            }
        },
        "gp_sota": {
            "name": "gp_sota",
            "location": 433,
            "return": [
                "dict[typing.Text, tuple[float]]"
            ],
            "arguments": {}
        },
        "split_long_title": {
            "name": "split_long_title",
            "location": 707,
            "return": [],
            "arguments": {
                "title": []
            }
        },
        "compute_best_placements": {
            "name": "compute_best_placements",
            "location": 870,
            "return": [],
            "arguments": {
                "positions": [
                    "bytes",
                    "dict[str, float]",
                    "list[dict[, ]]",
                    "str"
                ],
                "min_diff": [
                    "str",
                    "list[str]",
                    "dict[, ]"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 914,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "NameStyle.__init__": {
            "name": "__init__",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "NameStyle.__getitem__": {
            "name": "__getitem__",
            "location": 57,
            "return": [],
            "arguments": {
                "self": [],
                "name": [
                    "dict[, ]",
                    "str",
                    "typing.MutableMapping",
                    "typing.Mapping"
                ]
            }
        },
        "PatternAggregate.__init__": {
            "name": "__init__",
            "location": 163,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pattern": [
                    "int",
                    "float"
                ]
            }
        },
        "PatternAggregate.__call__": {
            "name": "__call__",
            "location": 166,
            "return": [],
            "arguments": {
                "self": [],
                "df": []
            }
        },
        "XpPlotter.__init__": {
            "name": "__init__",
            "location": 473,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "optim_vals": [],
                "title": [
                    "str",
                    "dict[, ]",
                    "list[typing.Any]"
                ],
                "name_style": [
                    "None",
                    "str",
                    "bytes",
                    "list[str]",
                    "dict[str, str]",
                    "bool"
                ],
                "xaxis": [
                    "typing.Text"
                ]
            }
        },
        "XpPlotter._get_confidence_arrays": {
            "name": "_get_confidence_arrays",
            "location": 575,
            "return": [
                "tuple[int]",
                "tuple[]"
            ],
            "arguments": {
                "vals": [
                    "tuple[typing.Union[int,int]]"
                ],
                "log": [
                    "bool"
                ]
            }
        },
        "XpPlotter.add_legends": {
            "name": "add_legends",
            "location": 586,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "legend_infos": [
                    "tuple[typing.Union[int,int]]"
                ]
            }
        },
        "XpPlotter.make_data": {
            "name": "make_data",
            "location": 611,
            "return": [
                "dict[, dict[, ]]"
            ],
            "arguments": {
                "df": [
                    "list[]",
                    "int",
                    "list[float]",
                    "tuple[typing.Union[int,int,int]]",
                    "list[dict[, ]]",
                    "float"
                ],
                "normalized_loss": [
                    "bool"
                ]
            }
        },
        "XpPlotter.save_txt": {
            "name": "save_txt",
            "location": 664,
            "return": [
                "None"
            ],
            "arguments": {
                "output_filepath": [
                    "str"
                ],
                "optim_vals": []
            }
        },
        "XpPlotter.save": {
            "name": "save",
            "location": 685,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "output_filepath": [
                    "str",
                    "list[str]"
                ]
            }
        },
        "XpPlotter.__del__": {
            "name": "__del__",
            "location": 703,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FightPlotter.__init__": {
            "name": "__init__",
            "location": 738,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "winrates_df": [
                    "int",
                    "float"
                ]
            }
        },
        "FightPlotter.winrates_from_selection": {
            "name": "winrates_from_selection",
            "location": 759,
            "return": [],
            "arguments": {
                "df": [],
                "categories": [
                    "float",
                    "None",
                    "int"
                ],
                "num_rows": [
                    "int"
                ],
                "num_cols": [
                    "int"
                ],
                "complete_runs_only": [
                    "bool"
                ]
            }
        },
        "FightPlotter.save": {
            "name": "save",
            "location": 815,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FightPlotter.__del__": {
            "name": "__del__",
            "location": 819,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LegendGroup.__init__": {
            "name": "__init__",
            "location": 842,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "indices": [
                    "str",
                    "dict[, ]"
                ],
                "init_positions": [
                    "list[int]",
                    "list[]",
                    "None"
                ],
                "min_diff": [
                    "None",
                    "bool"
                ]
            }
        },
        "LegendGroup.combine_with": {
            "name": "combine_with",
            "location": 851,
            "return": [
                "LegendGroup"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "int"
                ]
            }
        },
        "LegendGroup.get_positions": {
            "name": "get_positions",
            "location": 857,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "LegendGroup.bounds": {
            "name": "bounds",
            "location": 862,
            "return": [
                "tuple[float]"
            ],
            "arguments": {
                "self": []
            }
        },
        "LegendGroup.__repr__": {
            "name": "__repr__",
            "location": 866,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "nevergrad-main/nevergrad/benchmark/test_core.py": {
        "test_moduler": {
            "name": "test_moduler",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "value": [
                    "int",
                    "float"
                ],
                "expected": [
                    "int",
                    "float"
                ]
            }
        },
        "test_compute": {
            "name": "test_compute",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_commandline_launch": {
            "name": "test_commandline_launch",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_launch": {
            "name": "test_launch",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_import_additional_module": {
            "name": "test_import_additional_module",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_save_or_append_to_csv": {
            "name": "test_save_or_append_to_csv",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_moduler_split": {
            "name": "test_moduler_split",
            "location": 110,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_experiment_chunk_split": {
            "name": "test_experiment_chunk_split",
            "location": 124,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_experiment_chunk_seeding": {
            "name": "test_experiment_chunk_seeding",
            "location": 139,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_benchmark_chunk_resuming": {
            "name": "test_benchmark_chunk_resuming",
            "location": 146,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "nevergrad-main/nevergrad/benchmark/test_execution.py": {
        "test_mocked_steady_executor": {
            "name": "test_mocked_steady_executor",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "func": [
                    "int",
                    "list[]",
                    "str",
                    "bytes"
                ],
                "expected": [
                    "list[float]"
                ]
            }
        },
        "test_mocked_steady_executor_time": {
            "name": "test_mocked_steady_executor_time",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_batch_executor_time": {
            "name": "test_batch_executor_time",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_functionlib_delayed_job": {
            "name": "test_functionlib_delayed_job",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "Function.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Function._func": {
            "name": "_func",
            "location": 20,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "int"
                ],
                "y": [
                    "int"
                ]
            }
        },
        "Function.compute_pseudotime": {
            "name": "compute_pseudotime",
            "location": 24,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "input_parameter": [
                    "float",
                    "tuple['cirq.Qid']"
                ],
                "loss": [
                    "int"
                ]
            }
        }
    },
    "nevergrad-main/nevergrad/benchmark/test_experiments.py": {
        "test_experiments_registry": {
            "name": "test_experiments_registry",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "name": [
                    "str"
                ],
                "maker": [
                    "str",
                    "bool",
                    "typing.Callable[, ]"
                ]
            }
        },
        "recorder": {
            "name": "recorder",
            "location": 67,
            "return": [
                "typing.Generator[dict[, ]]"
            ],
            "arguments": {}
        },
        "test_groups_registry": {
            "name": "test_groups_registry",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "name": [
                    "bool"
                ],
                "recorder": []
            }
        },
        "check_maker": {
            "name": "check_maker",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {
                "maker": [
                    "int",
                    "float",
                    "str"
                ]
            }
        },
        "check_experiment": {
            "name": "check_experiment",
            "location": 109,
            "return": [
                "None"
            ],
            "arguments": {
                "maker": [
                    "set[str]",
                    "str",
                    "list[dict[, ]]"
                ],
                "short": [
                    "bool"
                ],
                "skip_seed": [
                    "bool"
                ]
            }
        }
    },
    "nevergrad-main/nevergrad/benchmark/test_plotting.py": {
        "test_get_winners_df": {
            "name": "test_get_winners_df",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_make_sorted_winrates": {
            "name": "test_make_sorted_winrates",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_create_plots_from_csv_mocked": {
            "name": "test_create_plots_from_csv_mocked",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_fight_plotter": {
            "name": "test_fight_plotter",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_xp_plotter": {
            "name": "test_xp_plotter",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_remove_errors": {
            "name": "test_remove_errors",
            "location": 108,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_remove_nan_value": {
            "name": "test_remove_nan_value",
            "location": 128,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_make_style_generator": {
            "name": "test_make_style_generator",
            "location": 138,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_name_style": {
            "name": "test_name_style",
            "location": 149,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_split_long_title": {
            "name": "test_split_long_title",
            "location": 156,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_compute_best_placements": {
            "name": "test_compute_best_placements",
            "location": 169,
            "return": [
                "None"
            ],
            "arguments": {
                "positions": [
                    "str",
                    "dict[str, typing.Any]"
                ],
                "expected": [
                    "list[float]",
                    "str",
                    "int",
                    "list[tuple[typing.Union[typing.Any,typing.Any]]]"
                ]
            }
        },
        "test_merge_parametrization_and_optimizer": {
            "name": "test_merge_parametrization_and_optimizer",
            "location": 174,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_normalized_losses": {
            "name": "test_normalized_losses",
            "location": 188,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "nevergrad-main/nevergrad/benchmark/test_utils.py": {
        "test_selector": {
            "name": "test_selector",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "criteria": [],
                "expected": [
                    "list[str]",
                    "str",
                    "bool",
                    "list[float]",
                    "list[torch.nn.utils.rnn.PackedSequence]",
                    "list[]"
                ]
            }
        },
        "test_selector_unique": {
            "name": "test_selector_unique",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "columns": [
                    "typing.Iterable[typing.Union[typing.Any,int]]",
                    "int"
                ],
                "expected": [
                    "typing.Iterable[tuple[typing.Union[int,int]]]",
                    "typing.Sequence[numpy.ndarray]"
                ]
            }
        },
        "test_selector_assert_equivalent": {
            "name": "test_selector_assert_equivalent",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "nevergrad-main/nevergrad/benchmark/test_xpbase.py": {
        "test_run_artificial_function": {
            "name": "test_run_artificial_function",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_run_packed_artificial_function": {
            "name": "test_run_packed_artificial_function",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_noisy_artificial_function_loss": {
            "name": "test_noisy_artificial_function_loss",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_run_with_error": {
            "name": "test_run_with_error",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_is_incoherent": {
            "name": "test_is_incoherent",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {
                "optimizer": [
                    "int",
                    "str",
                    "float"
                ],
                "num_workers": [
                    "int",
                    "str",
                    "float"
                ],
                "expected": [
                    "bool",
                    "str",
                    "bytes",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "test_seed_generator": {
            "name": "test_seed_generator",
            "location": 104,
            "return": [
                "None"
            ],
            "arguments": {
                "seed": [
                    "str"
                ],
                "randsize": [
                    "int",
                    "float",
                    "None"
                ],
                "expected": [
                    "list[float]",
                    "list[int]",
                    "int",
                    "float"
                ]
            }
        },
        "test_batch_mode_parameter": {
            "name": "test_batch_mode_parameter",
            "location": 119,
            "return": [
                "None"
            ],
            "arguments": {
                "batch_mode": [
                    "int",
                    "str",
                    "tuple[typing.Union[int,int]]"
                ],
                "expected": [
                    "str",
                    "bool",
                    "typing.Iterable[tuple[typing.Union[int,int]]]"
                ]
            }
        },
        "test_equality": {
            "name": "test_equality",
            "location": 128,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_multiobjective_experiment": {
            "name": "test_multiobjective_experiment",
            "location": 135,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "nevergrad-main/nevergrad/benchmark/utils.py": {
        "Selector._constructor_expanddim": {
            "name": "_constructor_expanddim",
            "location": 17,
            "return": [
                "Selector"
            ],
            "arguments": {
                "self": []
            }
        },
        "Selector._constructor": {
            "name": "_constructor",
            "location": 21,
            "return": [
                "Selector"
            ],
            "arguments": {
                "self": []
            }
        },
        "Selector.select": {
            "name": "select",
            "location": 25,
            "return": [
                "Selector"
            ],
            "arguments": {
                "self": []
            }
        },
        "Selector.select_and_drop": {
            "name": "select_and_drop",
            "location": 50,
            "return": [
                "Selector"
            ],
            "arguments": {
                "self": []
            }
        },
        "Selector.unique": {
            "name": "unique",
            "location": 58,
            "return": [
                "set[]"
            ],
            "arguments": {
                "self": [],
                "column_s": [
                    "list[str]",
                    "str",
                    "tuple[]"
                ]
            }
        },
        "Selector.read_csv": {
            "name": "read_csv",
            "location": 85,
            "return": [],
            "arguments": {
                "cls": [
                    "str",
                    "None"
                ],
                "path": [
                    "str",
                    "None"
                ]
            }
        },
        "Selector.assert_equivalent": {
            "name": "assert_equivalent",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "other": [],
                "err_msg": [
                    "typing.Text"
                ]
            }
        }
    },
    "nevergrad-main/nevergrad/benchmark/xpbase.py": {
        "_assert_singleobjective_callback": {
            "name": "_assert_singleobjective_callback",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "optimizer": [
                    "int",
                    "typing.Sequence[str]",
                    "float"
                ],
                "candidate": [
                    "list[\"Name\"]"
                ],
                "loss": [
                    "float",
                    "str",
                    "bytes",
                    "int"
                ]
            }
        },
        "create_seed_generator": {
            "name": "create_seed_generator",
            "location": 107,
            "return": [
                "typing.Generator[None]"
            ],
            "arguments": {
                "seed": [
                    "float",
                    "None",
                    "bool"
                ]
            }
        },
        "OptimizerSettings.__init__": {
            "name": "__init__",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "optimizer": [
                    "int",
                    "str",
                    "typing.Iterable[str]",
                    "typing.Type"
                ],
                "budget": [
                    "bool",
                    "float",
                    "bytes",
                    "list[int]",
                    "list[float]"
                ],
                "num_workers": [
                    "int"
                ],
                "batch_mode": [
                    "bool"
                ]
            }
        },
        "OptimizerSettings.name": {
            "name": "name",
            "location": 63,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "OptimizerSettings.batch_mode": {
            "name": "batch_mode",
            "location": 67,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "OptimizerSettings.__repr__": {
            "name": "__repr__",
            "location": 70,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "OptimizerSettings._get_factory": {
            "name": "_get_factory",
            "location": 73,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "OptimizerSettings.is_incoherent": {
            "name": "is_incoherent",
            "location": 77,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "OptimizerSettings.instantiate": {
            "name": "instantiate",
            "location": 85,
            "return": [],
            "arguments": {
                "self": [],
                "parametrization": [
                    "float",
                    "int"
                ]
            }
        },
        "OptimizerSettings.get_description": {
            "name": "get_description",
            "location": 91,
            "return": [
                "dict[typing.Text, ]"
            ],
            "arguments": {
                "self": []
            }
        },
        "OptimizerSettings.__eq__": {
            "name": "__eq__",
            "location": 97,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Experiment.__init__": {
            "name": "__init__",
            "location": 143,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "function": [
                    "str",
                    "int",
                    "None"
                ],
                "optimizer": [
                    "int",
                    "None"
                ],
                "budget": [
                    "int",
                    "None"
                ],
                "num_workers": [
                    "int"
                ],
                "batch_mode": [
                    "bool"
                ],
                "seed": [
                    "None",
                    "typing.Callable[, ]",
                    "int",
                    "str"
                ]
            }
        },
        "Experiment.__repr__": {
            "name": "__repr__",
            "location": 171,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "Experiment.is_incoherent": {
            "name": "is_incoherent",
            "location": 175,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Experiment.run": {
            "name": "run",
            "location": 182,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Experiment._log_results": {
            "name": "_log_results",
            "location": 207,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pfunc": [
                    "float",
                    "dict[str, typing.Any]",
                    "typing.Counter",
                    "typing.Callable[, ]",
                    "bool",
                    "str"
                ],
                "t0": [
                    "int",
                    "str",
                    "None",
                    "dict[str, typing.Any]",
                    "list[int]"
                ],
                "num_calls": [
                    "int",
                    "float"
                ]
            }
        },
        "Experiment._run_with_error": {
            "name": "_run_with_error",
            "location": 225,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "callbacks": [
                    "None",
                    "dict[, ]"
                ]
            }
        },
        "Experiment.get_description": {
            "name": "get_description",
            "location": 277,
            "return": [
                "dict[, ]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Experiment.__eq__": {
            "name": "__eq__",
            "location": 286,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "bool",
                    "None"
                ]
            }
        }
    },
    "nevergrad-main/nevergrad/benchmark/__init__.py": {},
    "nevergrad-main/nevergrad/benchmark/__main__.py": {
        "launch": {
            "name": "launch",
            "location": 16,
            "return": [
                "Path"
            ],
            "arguments": {
                "experiment": [
                    "str",
                    "tuple[]"
                ],
                "num_workers": [
                    "int"
                ],
                "seed": [
                    "None",
                    "float",
                    "tuple[]",
                    "int"
                ],
                "cap_index": [
                    "None",
                    "float",
                    "tuple[]",
                    "int"
                ],
                "output": [
                    "None",
                    "str",
                    "list[str]",
                    "dict[, ]",
                    "bool"
                ]
            }
        },
        "get_args": {
            "name": "get_args",
            "location": 47,
            "return": [],
            "arguments": {}
        },
        "repeated_launch": {
            "name": "repeated_launch",
            "location": 95,
            "return": [
                "None"
            ],
            "arguments": {
                "experiment": [
                    "int",
                    "None"
                ],
                "num_workers": [
                    "int"
                ],
                "seed": [
                    "None",
                    "int"
                ],
                "cap_index": [
                    "None",
                    "int"
                ],
                "output": [
                    "None",
                    "int"
                ],
                "plot": [
                    "bool"
                ],
                "imports": [
                    "None"
                ],
                "repetitions": [
                    "int"
                ]
            }
        }
    },
    "nevergrad-main/nevergrad/benchmark/additional/example.py": {
        "additional_experiment": {
            "name": "additional_experiment",
            "location": 42,
            "return": [
                "typing.Generator[Experiment]"
            ],
            "arguments": {}
        },
        "CustomFunction.__init__": {
            "name": "__init__",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "offset": [
                    "int",
                    "float"
                ]
            }
        },
        "CustomFunction.oracle_call": {
            "name": "oracle_call",
            "location": 29,
            "return": [
                "int",
                "float"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "typing.Callable[, ]",
                    "collections.abc.Awaitable[T]",
                    "bool",
                    "float"
                ]
            }
        }
    },
    "nevergrad-main/nevergrad/common/decorators.py": {
        "Registry.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Registry.register": {
            "name": "register",
            "location": 23,
            "return": [
                "Exception",
                "typing.Type",
                "str",
                "dict[str, typing.Any]"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "Exception",
                    "typing.Type",
                    "str",
                    "dict[str, typing.Any]"
                ],
                "info": [
                    "None",
                    "str",
                    "tuple[]",
                    "dict[typing.Hashable, typing.Any]",
                    "dict[, ]",
                    "set[str]"
                ]
            }
        },
        "Registry.register_name": {
            "name": "register_name",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "obj": [
                    "bool",
                    "typing.Mapping",
                    "None"
                ],
                "info": [
                    "None",
                    "dict[typing.Hashable, typing.Any]",
                    "int",
                    "dict[str, str]",
                    "str"
                ]
            }
        },
        "Registry.unregister": {
            "name": "unregister",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "Registry.register_with_info": {
            "name": "register_with_info",
            "location": 50,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Registry.get_info": {
            "name": "get_info",
            "location": 54,
            "return": [],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "Registry.__getitem__": {
            "name": "__getitem__",
            "location": 59,
            "return": [],
            "arguments": {
                "self": [],
                "key": [
                    "bytes",
                    "str",
                    "tuple[typing.Union[str,str]]"
                ]
            }
        },
        "Registry.__setitem__": {
            "name": "__setitem__",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str"
                ],
                "value": [
                    "str"
                ]
            }
        },
        "Registry.__delitem__": {
            "name": "__delitem__",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "bytes",
                    "str",
                    "tuple[typing.Union[str,str]]"
                ]
            }
        },
        "Registry.__iter__": {
            "name": "__iter__",
            "location": 68,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Registry.__len__": {
            "name": "__len__",
            "location": 71,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "nevergrad-main/nevergrad/common/errors.py": {},
    "nevergrad-main/nevergrad/common/testing.py": {
        "suppress_nevergrad_warnings": {
            "name": "suppress_nevergrad_warnings",
            "location": 25,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {}
        },
        "assert_set_equal": {
            "name": "assert_set_equal",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "estimate": [
                    "int",
                    "dict[typing.Union[str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str], typing.Any]",
                    "None",
                    "str",
                    "typing.Match"
                ],
                "reference": [
                    "int",
                    "dict[typing.Union[str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str], typing.Any]",
                    "None",
                    "str",
                    "typing.Match"
                ],
                "err_msg": [
                    "typing.Text"
                ]
            }
        },
        "printed_assert_equal": {
            "name": "printed_assert_equal",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "actual": [
                    "str"
                ],
                "desired": [
                    "str"
                ],
                "err_msg": [
                    "typing.Text"
                ]
            }
        },
        "assert_markdown_links_not_broken": {
            "name": "assert_markdown_links_not_broken",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "folder": [
                    "int",
                    "str"
                ]
            }
        },
        "_get_all_markdown_links": {
            "name": "_get_all_markdown_links",
            "location": 97,
            "return": [
                "list[_MarkdownLink]"
            ],
            "arguments": {
                "folder": [
                    "str",
                    "dict[, ]",
                    "list[str]",
                    "typing.Callable[, ]"
                ]
            }
        },
        "skip_error_on_systems": {
            "name": "skip_error_on_systems",
            "location": 141,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "error_type": [
                    "typing.Type",
                    "bool",
                    "str",
                    "list[str]",
                    "None",
                    "dict[str, typing.Any]"
                ],
                "systems": [
                    "typing.Iterable[str]",
                    "str",
                    "bool"
                ]
            }
        },
        "_MarkdownLink.__init__": {
            "name": "__init__",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "folder": [
                    "str",
                    "dict[, ]",
                    "None",
                    "list[str]",
                    "int"
                ],
                "filepath": [
                    "str",
                    "dict[, ]",
                    "None",
                    "list[str]",
                    "int"
                ],
                "string": [
                    "str",
                    "int"
                ],
                "link": [
                    "str",
                    "dict[, ]",
                    "None",
                    "list[str]",
                    "int"
                ]
            }
        },
        "_MarkdownLink.exists": {
            "name": "exists",
            "location": 87,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "_MarkdownLink.__repr__": {
            "name": "__repr__",
            "location": 93,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "parametrized.__init__": {
            "name": "__init__",
            "location": 124,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "parametrized.__call__": {
            "name": "__call__",
            "location": 132,
            "return": [],
            "arguments": {
                "self": [],
                "func": [
                    "typing.Callable[, ]",
                    "typing.Iterable[bytes]",
                    "typing.Type"
                ]
            }
        }
    },
    "nevergrad-main/nevergrad/common/test_decorators.py": {
        "DecoratorTests.test_registry": {
            "name": "test_registry",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DecoratorTests.test_info_registry": {
            "name": "test_info_registry",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DecoratorTests.test_registry_error": {
            "name": "test_registry_error",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DecoratorTests.test_registry.dummy": {
            "name": "dummy",
            "location": 18,
            "return": [
                "int"
            ],
            "arguments": {}
        },
        "DecoratorTests.test_info_registry.dummy_info": {
            "name": "dummy_info",
            "location": 32,
            "return": [
                "int"
            ],
            "arguments": {}
        },
        "DecoratorTests.test_registry_error.dummy": {
            "name": "dummy",
            "location": 43,
            "return": [
                "int"
            ],
            "arguments": {}
        }
    },
    "nevergrad-main/nevergrad/common/test_testing.py": {
        "test_assert_set_equal": {
            "name": "test_assert_set_equal",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "estimate": [
                    "typing.Iterable[int]",
                    "float",
                    "str"
                ],
                "message": [
                    "str"
                ]
            }
        },
        "test_printed_assert_equal": {
            "name": "test_printed_assert_equal",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_assert_markdown_links_not_broken": {
            "name": "test_assert_markdown_links_not_broken",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_skip_test_on_system": {
            "name": "test_skip_test_on_system",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "skipped_error": [
                    "str",
                    "typing.Type",
                    "int"
                ],
                "system": [
                    "str",
                    "typing.Type",
                    "int"
                ],
                "expected_error": [
                    "typing.Type",
                    "bool",
                    "None",
                    "list[pathlib.Path]"
                ]
            }
        },
        "test_header": {
            "name": "test_header",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_no_import_warning": {
            "name": "test_no_import_warning",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "nevergrad-main/nevergrad/common/test_tools.py": {
        "test_pairwise": {
            "name": "test_pairwise",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "iterator": [
                    "str",
                    "bytes",
                    "int",
                    "list[int]"
                ],
                "expected": [
                    "str",
                    "float",
                    "None",
                    "bool"
                ]
            }
        },
        "test_roundrobin": {
            "name": "test_roundrobin",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_grouper": {
            "name": "test_grouper",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_sleeper": {
            "name": "test_sleeper",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_mutable_set": {
            "name": "test_mutable_set",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_set_env": {
            "name": "test_set_env",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_flatten": {
            "name": "test_flatten",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "nevergrad-main/nevergrad/common/tools.py": {
        "pytorch_import_fix": {
            "name": "pytorch_import_fix",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "pairwise": {
            "name": "pairwise",
            "location": 32,
            "return": [],
            "arguments": {
                "iterable": [
                    "typing.Iterable[typing.Any]",
                    "typing.Iterable[T]",
                    "int",
                    "BaseException",
                    "None"
                ]
            }
        },
        "grouper": {
            "name": "grouper",
            "location": 46,
            "return": [],
            "arguments": {
                "iterable": [
                    "int",
                    "dict[, ]"
                ],
                "n": [
                    "int"
                ],
                "fillvalue": [
                    "None",
                    "str",
                    "int",
                    "dict[, ]"
                ]
            }
        },
        "roundrobin": {
            "name": "roundrobin",
            "location": 55,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {}
        },
        "different_from_defaults": {
            "name": "different_from_defaults",
            "location": 153,
            "return": [
                "dict[, ]"
            ],
            "arguments": {}
        },
        "set_env": {
            "name": "set_env",
            "location": 198,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {}
        },
        "flatten": {
            "name": "flatten",
            "location": 214,
            "return": [
                "list[str]",
                "str",
                "dict[str, ]"
            ],
            "arguments": {
                "obj": [
                    "list[str]",
                    "str"
                ]
            }
        },
        "Sleeper.__init__": {
            "name": "__init__",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "min_sleep": [
                    "float"
                ],
                "max_sleep": [
                    "float"
                ],
                "averaging_size": [
                    "int"
                ]
            }
        },
        "Sleeper.start_timer": {
            "name": "start_timer",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Sleeper.stop_timer": {
            "name": "stop_timer",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Sleeper._get_advised_sleep_duration": {
            "name": "_get_advised_sleep_duration",
            "location": 103,
            "return": [
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "Sleeper.sleep": {
            "name": "sleep",
            "location": 112,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "OrderedSet.__init__": {
            "name": "__init__",
            "location": 124,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "keys": [
                    "bytes",
                    "str",
                    "None"
                ]
            }
        },
        "OrderedSet.add": {
            "name": "add",
            "location": 131,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "int"
                ]
            }
        },
        "OrderedSet.popright": {
            "name": "popright",
            "location": 135,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "OrderedSet.discard": {
            "name": "discard",
            "location": 140,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "bytes",
                    "str",
                    "tuple[typing.Union[str,str]]"
                ]
            }
        },
        "OrderedSet.__contains__": {
            "name": "__contains__",
            "location": 143,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "typing.Callable[T, bool]"
                ]
            }
        },
        "OrderedSet.__iter__": {
            "name": "__iter__",
            "location": 146,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "OrderedSet.__len__": {
            "name": "__len__",
            "location": 149,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "nevergrad-main/nevergrad/common/typing.py": {
        "JobLike.done": {
            "name": "done",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "JobLike.result": {
            "name": "result",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ExecutorLike.submit": {
            "name": "submit",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fn": [
                    "int",
                    "str",
                    "typing.Iterable['Context']"
                ]
            }
        }
    },
    "nevergrad-main/nevergrad/common/__init__.py": {},
    "nevergrad-main/nevergrad/examples/powersystem.py": {},
    "nevergrad-main/nevergrad/functions/base.py": {
        "_reset_copy": {
            "name": "_reset_copy",
            "location": 22,
            "return": [],
            "arguments": {
                "obj": []
            }
        },
        "update_leaderboard": {
            "name": "update_leaderboard",
            "location": 245,
            "return": [
                "None"
            ],
            "arguments": {
                "identifier": [
                    "str",
                    "int",
                    "dict[int, numpy.ndarray]",
                    "tuple[typing.Union[int,int,int]]"
                ],
                "loss": [
                    "bool"
                ],
                "array": [],
                "verbose": [
                    "bool"
                ]
            }
        },
        "ExperimentFunction.__new__": {
            "name": "__new__",
            "location": 51,
            "return": [],
            "arguments": {
                "cls": [
                    "str"
                ]
            }
        },
        "ExperimentFunction.__init__": {
            "name": "__init__",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "function": [
                    "typing.Hashable"
                ],
                "parametrization": [
                    "typing.Callable[, ]"
                ]
            }
        },
        "ExperimentFunction.dimension": {
            "name": "dimension",
            "location": 98,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ExperimentFunction.parametrization": {
            "name": "parametrization",
            "location": 106,
            "return": [
                "int",
                "dict[, ]",
                "str"
            ],
            "arguments": {
                "self": [],
                "parametrization": []
            }
        },
        "ExperimentFunction.function": {
            "name": "function",
            "location": 114,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ExperimentFunction.__call__": {
            "name": "__call__",
            "location": 117,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ExperimentFunction.descriptors": {
            "name": "descriptors",
            "location": 122,
            "return": [
                "dict[, ]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ExperimentFunction.add_descriptors": {
            "name": "add_descriptors",
            "location": 130,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ExperimentFunction.__repr__": {
            "name": "__repr__",
            "location": 133,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ExperimentFunction.equivalent_to": {
            "name": "equivalent_to",
            "location": 138,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "str",
                    "bool",
                    "typing.Type",
                    "dict[, ]",
                    "None",
                    "float"
                ]
            }
        },
        "ExperimentFunction._internal_copy": {
            "name": "_internal_copy",
            "location": 152,
            "return": [
                "list[]",
                "dict[, ]",
                "float",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ExperimentFunction.copy": {
            "name": "copy",
            "location": 162,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ExperimentFunction.compute_pseudotime": {
            "name": "compute_pseudotime",
            "location": 194,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "input_parameter": [
                    "float",
                    "tuple['cirq.Qid']"
                ],
                "loss": [
                    "float",
                    "tuple['cirq.Qid']"
                ]
            }
        },
        "ExperimentFunction.evaluation_function": {
            "name": "evaluation_function",
            "location": 217,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ArrayExperimentFunction.__init__": {
            "name": "__init__",
            "location": 301,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "function": [],
                "parametrization": [
                    "str",
                    "None",
                    "typing.Type"
                ],
                "symmetry": [
                    "int"
                ]
            }
        },
        "ArrayExperimentFunction.symmetrized_function": {
            "name": "symmetrized_function",
            "location": 339,
            "return": [],
            "arguments": {
                "self": [],
                "x": [
                    "float",
                    "str"
                ]
            }
        },
        "MultiExperiment.__init__": {
            "name": "__init__",
            "location": 360,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "experiments": [
                    "tuple[typing.Union[int,int]]",
                    "list[typing.Union[tuple[typing.Union[int,int]],str,str,str,str,str,str,str,str]]",
                    "str"
                ],
                "upper_bounds": [
                    "int",
                    "list[str]",
                    "tuple[tuple[typing.Union[typing.Any,...]]]",
                    "str"
                ]
            }
        },
        "MultiExperiment._multi_func": {
            "name": "_multi_func",
            "location": 379,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MultiExperiment._internal_copy": {
            "name": "_internal_copy",
            "location": 383,
            "return": [
                "MultiExperiment"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "nevergrad-main/nevergrad/functions/corefuncs.py": {
        "_styblinksitang": {
            "name": "_styblinksitang",
            "location": 78,
            "return": [
                "float"
            ],
            "arguments": {
                "x": [],
                "noise": [
                    "str",
                    "set[]",
                    "dict[, ]",
                    "int",
                    "float"
                ]
            }
        },
        "sphere": {
            "name": "sphere",
            "location": 101,
            "return": [
                "float"
            ],
            "arguments": {
                "x": []
            }
        },
        "sphere1": {
            "name": "sphere1",
            "location": 110,
            "return": [],
            "arguments": {
                "x": [
                    "int",
                    "float"
                ]
            }
        },
        "sphere2": {
            "name": "sphere2",
            "location": 116,
            "return": [],
            "arguments": {
                "x": [
                    "int",
                    "float"
                ]
            }
        },
        "sphere4": {
            "name": "sphere4",
            "location": 122,
            "return": [],
            "arguments": {
                "x": [
                    "int",
                    "float"
                ]
            }
        },
        "maxdeceptive": {
            "name": "maxdeceptive",
            "location": 128,
            "return": [
                "float"
            ],
            "arguments": {
                "x": [
                    "bool"
                ]
            }
        },
        "sumdeceptive": {
            "name": "sumdeceptive",
            "location": 134,
            "return": [
                "float"
            ],
            "arguments": {
                "x": [
                    "bool"
                ]
            }
        },
        "altcigar": {
            "name": "altcigar",
            "location": 140,
            "return": [
                "float",
                "int"
            ],
            "arguments": {
                "x": []
            }
        },
        "discus": {
            "name": "discus",
            "location": 148,
            "return": [],
            "arguments": {
                "x": [
                    "str"
                ]
            }
        },
        "cigar": {
            "name": "cigar",
            "location": 154,
            "return": [
                "float",
                "int"
            ],
            "arguments": {
                "x": []
            }
        },
        "bentcigar": {
            "name": "bentcigar",
            "location": 163,
            "return": [
                "float",
                "int"
            ],
            "arguments": {
                "x": []
            }
        },
        "multipeak": {
            "name": "multipeak",
            "location": 175,
            "return": [
                "float"
            ],
            "arguments": {
                "x": []
            }
        },
        "altellipsoid": {
            "name": "altellipsoid",
            "location": 185,
            "return": [],
            "arguments": {
                "y": [
                    "str"
                ]
            }
        },
        "step": {
            "name": "step",
            "location": 192,
            "return": [
                "float"
            ],
            "arguments": {
                "s": [
                    "str",
                    "bool"
                ]
            }
        },
        "stepellipsoid": {
            "name": "stepellipsoid",
            "location": 199,
            "return": [
                "float"
            ],
            "arguments": {
                "x": [
                    "int"
                ]
            }
        },
        "ellipsoid": {
            "name": "ellipsoid",
            "location": 211,
            "return": [
                "float"
            ],
            "arguments": {
                "x": [
                    "int"
                ]
            }
        },
        "rastrigin": {
            "name": "rastrigin",
            "location": 222,
            "return": [
                "float"
            ],
            "arguments": {
                "x": []
            }
        },
        "bucherastrigin": {
            "name": "bucherastrigin",
            "location": 229,
            "return": [
                "float"
            ],
            "arguments": {
                "x": []
            }
        },
        "doublelinearslope": {
            "name": "doublelinearslope",
            "location": 242,
            "return": [
                "float"
            ],
            "arguments": {
                "x": [
                    "int",
                    "float",
                    "str"
                ]
            }
        },
        "stepdoublelinearslope": {
            "name": "stepdoublelinearslope",
            "location": 249,
            "return": [],
            "arguments": {
                "x": [
                    "int",
                    "float",
                    "str"
                ]
            }
        },
        "hm": {
            "name": "hm",
            "location": 254,
            "return": [
                "float"
            ],
            "arguments": {
                "x": [
                    "bool"
                ]
            }
        },
        "rosenbrock": {
            "name": "rosenbrock",
            "location": 260,
            "return": [
                "float"
            ],
            "arguments": {
                "x": []
            }
        },
        "ackley": {
            "name": "ackley",
            "location": 267,
            "return": [],
            "arguments": {
                "x": [
                    "float"
                ]
            }
        },
        "schwefel_1_2": {
            "name": "schwefel_1_2",
            "location": 274,
            "return": [],
            "arguments": {
                "x": [
                    "int",
                    "float",
                    "str"
                ]
            }
        },
        "griewank": {
            "name": "griewank",
            "location": 280,
            "return": [
                "float"
            ],
            "arguments": {
                "x": []
            }
        },
        "deceptiveillcond": {
            "name": "deceptiveillcond",
            "location": 288,
            "return": [
                "float"
            ],
            "arguments": {
                "x": []
            }
        },
        "deceptivepath": {
            "name": "deceptivepath",
            "location": 301,
            "return": [
                "float"
            ],
            "arguments": {
                "x": []
            }
        },
        "deceptivemultimodal": {
            "name": "deceptivemultimodal",
            "location": 317,
            "return": [
                "float"
            ],
            "arguments": {
                "x": []
            }
        },
        "lunacek": {
            "name": "lunacek",
            "location": 331,
            "return": [
                "float"
            ],
            "arguments": {
                "x": []
            }
        },
        "genzcornerpeak": {
            "name": "genzcornerpeak",
            "location": 350,
            "return": [
                "float",
                "int"
            ],
            "arguments": {
                "y": []
            }
        },
        "minusgenzcornerpeak": {
            "name": "minusgenzcornerpeak",
            "location": 361,
            "return": [],
            "arguments": {
                "y": [
                    "str",
                    "typing.Iterator",
                    "typing.Callable[, ]",
                    "bool"
                ]
            }
        },
        "genzgaussianpeakintegral": {
            "name": "genzgaussianpeakintegral",
            "location": 369,
            "return": [],
            "arguments": {
                "x": [
                    "int",
                    "float",
                    "str"
                ]
            }
        },
        "minusgenzgaussianpeakintegral": {
            "name": "minusgenzgaussianpeakintegral",
            "location": 377,
            "return": [],
            "arguments": {
                "x": [
                    "int",
                    "float",
                    "str"
                ]
            }
        },
        "slope": {
            "name": "slope",
            "location": 385,
            "return": [
                "bool"
            ],
            "arguments": {
                "x": [
                    "str"
                ]
            }
        },
        "linear": {
            "name": "linear",
            "location": 390,
            "return": [],
            "arguments": {
                "x": [
                    "str"
                ]
            }
        },
        "st0": {
            "name": "st0",
            "location": 395,
            "return": [],
            "arguments": {
                "x": [
                    "float"
                ]
            }
        },
        "st1": {
            "name": "st1",
            "location": 401,
            "return": [],
            "arguments": {
                "x": [
                    "float"
                ]
            }
        },
        "st10": {
            "name": "st10",
            "location": 407,
            "return": [],
            "arguments": {
                "x": [
                    "float"
                ]
            }
        },
        "st100": {
            "name": "st100",
            "location": 413,
            "return": [],
            "arguments": {
                "x": [
                    "float"
                ]
            }
        },
        "BonnansFunction.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "int",
                    "list[int]",
                    "str",
                    "None"
                ],
                "M": [
                    "int"
                ],
                "N": [
                    "int"
                ]
            }
        },
        "BonnansFunction.__call__": {
            "name": "__call__",
            "location": 23,
            "return": [],
            "arguments": {
                "self": [],
                "x": [
                    "float"
                ]
            }
        },
        "DiscreteFunction.__init__": {
            "name": "__init__",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "dict[, ]",
                    "dict[str, typing.Any]",
                    "str",
                    "None",
                    "typing.Type"
                ],
                "arity": [
                    "int"
                ]
            }
        },
        "DiscreteFunction.__call__": {
            "name": "__call__",
            "location": 57,
            "return": [],
            "arguments": {
                "self": [],
                "x": [
                    "float",
                    "str",
                    "typing.Callable[, ]",
                    "collections.abc.Awaitable[T]",
                    "typing.Container"
                ]
            }
        },
        "DiscreteFunction.onemax": {
            "name": "onemax",
            "location": 60,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "x": []
            }
        },
        "DiscreteFunction.leadingones": {
            "name": "leadingones",
            "location": 64,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "x": []
            }
        },
        "DiscreteFunction.jump": {
            "name": "jump",
            "location": 69,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "x": []
            }
        },
        "DelayedSphere.__call__": {
            "name": "__call__",
            "location": 87,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "x": []
            }
        },
        "DelayedSphere.compute_pseudotime": {
            "name": "compute_pseudotime",
            "location": 90,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "input_parameter": [
                    "str"
                ],
                "value": [
                    "bool",
                    "str"
                ]
            }
        }
    },
    "nevergrad-main/nevergrad/functions/functionlib.py": {
        "_noisy_call": {
            "name": "_noisy_call",
            "location": 281,
            "return": [],
            "arguments": {
                "x": [],
                "transf": [
                    "list[]",
                    "float",
                    "dict[, ]",
                    "int"
                ],
                "func": [
                    "bool",
                    "dict[, ]",
                    "typing.Type",
                    "float",
                    "list[T]"
                ],
                "noise_level": [
                    "int"
                ],
                "noise_dissymmetry": [
                    "float"
                ],
                "random_state": []
            }
        },
        "ArtificialVariable.__init__": {
            "name": "__init__",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dimension": [
                    "bool",
                    "list['cirq.Circuit']",
                    "Exception",
                    "tuple[typing.Union[int,int,int]]",
                    "dict[, ]",
                    "None",
                    "str"
                ],
                "num_blocks": [
                    "int",
                    "None",
                    "typing.Sequence[int]"
                ],
                "block_dimension": [
                    "bool",
                    "list['cirq.Circuit']",
                    "Exception",
                    "tuple[typing.Union[int,int,int]]",
                    "dict[, ]",
                    "None",
                    "str"
                ],
                "translation_factor": [
                    "bool",
                    "list['cirq.Circuit']",
                    "Exception",
                    "tuple[typing.Union[int,int,int]]",
                    "dict[, ]",
                    "None",
                    "str"
                ],
                "rotation": [
                    "bool",
                    "list['cirq.Circuit']",
                    "Exception",
                    "tuple[typing.Union[int,int,int]]",
                    "dict[, ]",
                    "None",
                    "str"
                ],
                "hashing": [
                    "bool",
                    "list['cirq.Circuit']",
                    "Exception",
                    "tuple[typing.Union[int,int,int]]",
                    "dict[, ]",
                    "None",
                    "str"
                ],
                "only_index_transform": [
                    "bool",
                    "list['cirq.Circuit']",
                    "Exception",
                    "tuple[typing.Union[int,int,int]]",
                    "dict[, ]",
                    "None",
                    "str"
                ],
                "random_state": [
                    "bool",
                    "float",
                    "str",
                    "None"
                ]
            }
        },
        "ArtificialVariable._initialize": {
            "name": "_initialize",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ArtificialVariable.process": {
            "name": "process",
            "location": 66,
            "return": [],
            "arguments": {
                "self": [],
                "data": [
                    "dict[, ]",
                    "bytes",
                    "dict[str, typing.Any]"
                ],
                "deterministic": [
                    "bool"
                ]
            }
        },
        "ArtificialVariable._short_repr": {
            "name": "_short_repr",
            "location": 83,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "ArtificialFunction.__init__": {
            "name": "__init__",
            "location": 140,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "block_dimension": [
                    "int",
                    "float"
                ],
                "num_blocks": [
                    "int"
                ],
                "useless_variables": [
                    "int"
                ],
                "noise_level": [
                    "int"
                ],
                "noise_dissymmetry": [
                    "bool"
                ],
                "rotation": [
                    "bool"
                ],
                "translation_factor": [
                    "float"
                ],
                "hashing": [
                    "bool"
                ],
                "aggregator": [
                    "typing.Text"
                ],
                "split": [
                    "bool"
                ],
                "bounded": [
                    "bool"
                ]
            }
        },
        "ArtificialFunction.dimension": {
            "name": "dimension",
            "location": 221,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ArtificialFunction.list_sorted_function_names": {
            "name": "list_sorted_function_names",
            "location": 226,
            "return": [
                "list[]"
            ],
            "arguments": {}
        },
        "ArtificialFunction._transform": {
            "name": "_transform",
            "location": 230,
            "return": [],
            "arguments": {
                "self": [],
                "x": [
                    "str",
                    "dict[, ]",
                    "int",
                    "bytes",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "ArtificialFunction.function_from_transform": {
            "name": "function_from_transform",
            "location": 234,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "list[str]"
                ]
            }
        },
        "ArtificialFunction.evaluation_function": {
            "name": "evaluation_function",
            "location": 246,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ArtificialFunction.noisy_function": {
            "name": "noisy_function",
            "location": 257,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ArtificialFunction.compute_pseudotime": {
            "name": "compute_pseudotime",
            "location": 268,
            "return": [
                "str",
                "dict[, ]",
                "dict[int, str]",
                "list[]",
                "int",
                "float"
            ],
            "arguments": {
                "self": [],
                "input_parameter": [
                    "float",
                    "str"
                ],
                "loss": [
                    "typing.Callable[, ]",
                    "str"
                ]
            }
        },
        "FarOptimumFunction.__init__": {
            "name": "__init__",
            "location": 305,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "independent_sigma": [
                    "bool"
                ],
                "mutable_sigma": [
                    "bool"
                ],
                "multiobjective": [
                    "bool"
                ],
                "recombination": [
                    "typing.Text"
                ],
                "optimum": [
                    "tuple[int]"
                ]
            }
        },
        "FarOptimumFunction._multifunc": {
            "name": "_multifunc",
            "location": 324,
            "return": [],
            "arguments": {
                "self": [],
                "x": [
                    "float",
                    "int",
                    "bytes"
                ]
            }
        },
        "FarOptimumFunction._monofunc": {
            "name": "_monofunc",
            "location": 327,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "int",
                    "float",
                    "str"
                ]
            }
        },
        "FarOptimumFunction.evaluation_function": {
            "name": "evaluation_function",
            "location": 330,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FarOptimumFunction.itercases": {
            "name": "itercases",
            "location": 334,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "cls": [
                    "list[str]",
                    "dict[str, typing.Any]",
                    "bytes",
                    "str",
                    "typing.Sequence[str]"
                ]
            }
        }
    },
    "nevergrad-main/nevergrad/functions/helpers.py": {
        "SpecialEvaluationExperiment.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "experiment": [
                    "bool",
                    "str",
                    "typing.Callable[, ]"
                ],
                "evaluation": [
                    "float",
                    "int"
                ],
                "pareto_size": [
                    "None",
                    "int",
                    "tuple[typing.Union[int,int]]"
                ],
                "pareto_subset": [
                    "typing.Text"
                ],
                "pareto_subset_tentatives": [
                    "int"
                ]
            }
        },
        "SpecialEvaluationExperiment._delegate_to_experiment": {
            "name": "_delegate_to_experiment",
            "location": 40,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SpecialEvaluationExperiment.copy": {
            "name": "copy",
            "location": 43,
            "return": [
                "dict[, ]",
                "dict[str, tuple[typing.Union[typing.Any,typing.Any]]]",
                "str",
                "list[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SpecialEvaluationExperiment.compute_pseudotime": {
            "name": "compute_pseudotime",
            "location": 53,
            "return": [],
            "arguments": {
                "self": [],
                "input_parameter": [
                    "dict[str, typing.Any]",
                    "set[str]",
                    "typing.Callable[, ]",
                    "int"
                ],
                "loss": [
                    "dict[str, typing.Any]",
                    "set[str]",
                    "typing.Callable[, ]",
                    "int"
                ]
            }
        },
        "SpecialEvaluationExperiment.evaluation_function": {
            "name": "evaluation_function",
            "location": 58,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SpecialEvaluationExperiment.descriptors": {
            "name": "descriptors",
            "location": 73,
            "return": [
                "dict[, ]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SpecialEvaluationExperiment.create_crossvalidation_experiments": {
            "name": "create_crossvalidation_experiments",
            "location": 83,
            "return": [
                "list[]"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "list[dict[str, typing.Any]]",
                    "int",
                    "list[]",
                    "dict[, ]"
                ],
                "experiments": [
                    "str",
                    "dict[str, typing.Any]",
                    "dict[str, list[typing.Any]]"
                ],
                "training_only_experiments": [
                    "None"
                ],
                "pareto_size": [
                    "int"
                ],
                "pareto_subset_methods": [
                    "tuple[typing.Text]"
                ]
            }
        }
    },
    "nevergrad-main/nevergrad/functions/pbt.py": {
        "PBT.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "names": [],
                "dimensions": [
                    "tuple[int]"
                ],
                "num_workers": [
                    "int"
                ]
            }
        },
        "PBT.unflatten": {
            "name": "unflatten",
            "location": 46,
            "return": [
                "list[typing.Union[str,int]]"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "int",
                    "float",
                    "str",
                    "list[int]"
                ]
            }
        },
        "PBT.value": {
            "name": "value",
            "location": 55,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "list[numpy.ndarray]",
                    "str",
                    "int"
                ]
            }
        },
        "PBT.evolve": {
            "name": "evolve",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "int",
                    "float"
                ],
                "pp": [
                    "int",
                    "str",
                    "None",
                    "float"
                ]
            }
        },
        "PBT._func": {
            "name": "_func",
            "location": 94,
            "return": [],
            "arguments": {
                "self": [],
                "x": [
                    "float"
                ]
            }
        },
        "PBT.itercases": {
            "name": "itercases",
            "location": 121,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "cls": [
                    "list[str]",
                    "dict[str, typing.Any]",
                    "bytes",
                    "str",
                    "typing.Sequence[str]"
                ]
            }
        },
        "PBT.evolve.gradient": {
            "name": "gradient",
            "location": 63,
            "return": [],
            "arguments": {
                "f": [],
                "x": []
            }
        }
    },
    "nevergrad-main/nevergrad/functions/test_base.py": {
        "_arg_return": {
            "name": "_arg_return",
            "location": 17,
            "return": [
                "tuple[]"
            ],
            "arguments": {}
        },
        "test_experiment_function": {
            "name": "test_experiment_function",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_array_experiment_function": {
            "name": "test_array_experiment_function",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_instrumented_function_kwarg_order": {
            "name": "test_instrumented_function_kwarg_order",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_callable_parametrization": {
            "name": "test_callable_parametrization",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_packed_function": {
            "name": "test_packed_function",
            "location": 102,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_deterministic_data_setter": {
            "name": "test_deterministic_data_setter",
            "location": 111,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_parametrization_continuous_noisy": {
            "name": "test_parametrization_continuous_noisy",
            "location": 141,
            "return": [
                "None"
            ],
            "arguments": {
                "variables": [
                    "bool",
                    "typing.Type",
                    "str"
                ],
                "continuous": [
                    "bool",
                    "typing.Type",
                    "str"
                ],
                "noisy": [
                    "bool",
                    "typing.Type",
                    "str"
                ]
            }
        },
        "test_function_descriptors_and_pickle": {
            "name": "test_function_descriptors_and_pickle",
            "location": 164,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_function_descriptors_all_default": {
            "name": "test_function_descriptors_all_default",
            "location": 179,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_pareto_experiment": {
            "name": "test_pareto_experiment",
            "location": 188,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_easy_pareto_experiment": {
            "name": "test_easy_pareto_experiment",
            "location": 207,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "_Callable.__call__": {
            "name": "__call__",
            "location": 89,
            "return": [
                "float",
                "int"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "float",
                    "int"
                ],
                "y": [
                    "int"
                ]
            }
        },
        "ExampleFunction.__init__": {
            "name": "__init__",
            "location": 151,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dimension": [
                    "str",
                    "typing.Sequence[typing.Any]",
                    "tuple[typing.Union[float,float]]",
                    "int"
                ],
                "number": [
                    "bool",
                    "list[]",
                    "list[str]",
                    "None"
                ],
                "default": [
                    "int"
                ]
            }
        },
        "ExampleFunction.oracle_call": {
            "name": "oracle_call",
            "location": 155,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "x": []
            }
        },
        "ExampleFunction.compute_pseudotime": {
            "name": "compute_pseudotime",
            "location": 159,
            "return": [
                "int",
                "float"
            ],
            "arguments": {
                "self": [],
                "input_parameter": [
                    "float",
                    "tuple[_]"
                ],
                "loss": [
                    "int",
                    "float"
                ]
            }
        },
        "ExampleFunctionAllDefault.__init__": {
            "name": "__init__",
            "location": 174,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dimension": [
                    "int"
                ],
                "default": [
                    "int"
                ]
            }
        }
    },
    "nevergrad-main/nevergrad/functions/test_corefuncs.py": {
        "testcorefuncs_function": {
            "name": "testcorefuncs_function",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "name": [
                    "str",
                    "typing.Iterable[]",
                    "None"
                ],
                "func": [
                    "typing.Callable[, ]",
                    "list[str]"
                ]
            }
        },
        "test_bonnans": {
            "name": "test_bonnans",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "index": [
                    "str",
                    "float"
                ]
            }
        },
        "test_base_functions": {
            "name": "test_base_functions",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "x": [
                    "list[list[int]]",
                    "int",
                    "list[int]"
                ],
                "onemax_expected": [
                    "bool",
                    "typing.Callable[, ]"
                ],
                "leadingones_expected": [
                    "bool",
                    "typing.Callable[, ]"
                ],
                "jump_expected": [
                    "bool",
                    "typing.Callable[, ]"
                ]
            }
        },
        "test_genzcornerpeak_inf": {
            "name": "test_genzcornerpeak_inf",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_core_function_values": {
            "name": "test_core_function_values",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "func": [
                    "str",
                    "float",
                    "typing.Callable[..., None]"
                ],
                "expected": [
                    "float",
                    "bool",
                    "typing.Sequence[int]",
                    "str"
                ],
                "data": [
                    "dict[, ]",
                    "typing.Mapping",
                    "typing.Callable[, ]",
                    "bool",
                    "str",
                    "None",
                    "list[]"
                ]
            }
        },
        "test_styblinksitang": {
            "name": "test_styblinksitang",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "nevergrad-main/nevergrad/functions/test_functionlib.py": {
        "test_testcase_function_errors": {
            "name": "test_testcase_function_errors",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_artitificial_function_repr": {
            "name": "test_artitificial_function_repr",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_ptb_no_overfitting": {
            "name": "test_ptb_no_overfitting",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_testcase_function_value": {
            "name": "test_testcase_function_value",
            "location": 108,
            "return": [
                "None"
            ],
            "arguments": {
                "config": [
                    "dict[, ]",
                    "dict[str, typing.Any]"
                ],
                "expected": [
                    "float",
                    "dict[str, float]"
                ]
            }
        },
        "test_test_function": {
            "name": "test_test_function",
            "location": 125,
            "return": [
                "None"
            ],
            "arguments": {
                "x": [
                    "int",
                    "list[]",
                    "typing.Callable[, ]",
                    "dict[str, typing.Any]"
                ],
                "hashing": [
                    "bool",
                    "dict[str, typing.Any]",
                    "dict[, ]",
                    "str",
                    "None"
                ]
            }
        },
        "test_oracle": {
            "name": "test_oracle",
            "location": 144,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_blocks": {
            "name": "test_blocks",
            "location": 158,
            "return": [
                "None"
            ],
            "arguments": {
                "split": [
                    "int",
                    "str",
                    "float"
                ]
            }
        },
        "test_function_transform": {
            "name": "test_function_transform",
            "location": 169,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_artificial_function_summary": {
            "name": "test_artificial_function_summary",
            "location": 176,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_functionlib_copy": {
            "name": "test_functionlib_copy",
            "location": 182,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_compute_pseudotime": {
            "name": "test_compute_pseudotime",
            "location": 190,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_noisy_call": {
            "name": "test_noisy_call",
            "location": 213,
            "return": [
                "None"
            ],
            "arguments": {
                "x": [
                    "float",
                    "int"
                ],
                "noise": [
                    "float",
                    "int"
                ],
                "noise_dissymmetry": [
                    "float",
                    "int"
                ],
                "expect_noisy": [
                    "bool",
                    "list[str]"
                ]
            }
        },
        "test_far_optimum_function": {
            "name": "test_far_optimum_function",
            "location": 231,
            "return": [
                "None"
            ],
            "arguments": {
                "independent_sigma": [
                    "bool",
                    "float"
                ],
                "mutable_sigma": [
                    "bool",
                    "float",
                    "str"
                ]
            }
        },
        "test_far_optimum_function_cases": {
            "name": "test_far_optimum_function_cases",
            "location": 246,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "nevergrad-main/nevergrad/functions/test_utils.py": {
        "test_transform": {
            "name": "test_transform",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "nevergrad-main/nevergrad/functions/utils.py": {
        "Transform.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "indices": [],
                "translation_factor": [
                    "int"
                ],
                "rotation": [
                    "bool"
                ],
                "random_state": [
                    "None",
                    "str",
                    "dict[str, typing.Any]",
                    "int",
                    "typing.Sequence[str]",
                    "float"
                ]
            }
        },
        "Transform.__call__": {
            "name": "__call__",
            "location": 33,
            "return": [
                "float",
                "list[]",
                "str"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "int",
                    "float"
                ]
            }
        }
    },
    "nevergrad-main/nevergrad/functions/__init__.py": {},
    "nevergrad-main/nevergrad/functions/ac/ac.py": {
        "NgAquacrop.__init__": {
            "name": "__init__",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "num_smts": [
                    "int",
                    "None"
                ],
                "max_irr_seasonal": [
                    "float",
                    "int",
                    "str"
                ]
            }
        },
        "NgAquacrop.loss": {
            "name": "loss",
            "location": 32,
            "return": [],
            "arguments": {
                "self": [],
                "smts": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ]
            }
        },
        "NgAquacrop.loss.run_model": {
            "name": "run_model",
            "location": 40,
            "return": [],
            "arguments": {
                "smts": [],
                "max_irr_season": [],
                "year1": [],
                "year2": []
            }
        },
        "NgAquacrop.loss.evaluate": {
            "name": "evaluate",
            "location": 63,
            "return": [],
            "arguments": {
                "smts": []
            }
        }
    },
    "nevergrad-main/nevergrad/functions/ac/test_ac.py": {
        "test_ac": {
            "name": "test_ac",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "nevergrad-main/nevergrad/functions/ac/__init__.py": {},
    "nevergrad-main/nevergrad/functions/arcoating/core.py": {
        "impedance_pix": {
            "name": "impedance_pix",
            "location": 16,
            "return": [],
            "arguments": {
                "x": [],
                "dpix": [],
                "lam": [],
                "ep0": [],
                "epf": []
            }
        },
        "ARCoating.__init__": {
            "name": "__init__",
            "location": 54,
            "return": [],
            "arguments": {
                "self": [],
                "nbslab": [],
                "d_ar": [],
                "bounding_method": []
            }
        },
        "ARCoating._get_minimum_average_reflexion": {
            "name": "_get_minimum_average_reflexion",
            "location": 75,
            "return": [],
            "arguments": {
                "self": [],
                "x": []
            }
        },
        "ARCoating.evaluation_function": {
            "name": "evaluation_function",
            "location": 86,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "nevergrad-main/nevergrad/functions/arcoating/test_core.py": {
        "test_impedence_pix": {
            "name": "test_impedence_pix",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_arcoating_reflexion_function": {
            "name": "test_arcoating_reflexion_function",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_arcoating_recombination": {
            "name": "test_arcoating_recombination",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_arcoating_transform_and_call": {
            "name": "test_arcoating_transform_and_call",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "nevergrad-main/nevergrad/functions/arcoating/__init__.py": {},
    "nevergrad-main/nevergrad/functions/causaldiscovery/core.py": {
        "CausalDiscovery.__init__": {
            "name": "__init__",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "generator": [
                    "typing.Text"
                ],
                "causal_mechanism": [
                    "typing.Text"
                ],
                "noise": [
                    "typing.Text"
                ],
                "noise_coeff": [
                    "float"
                ],
                "npoints": [
                    "int"
                ],
                "nodes": [
                    "int"
                ],
                "parents_max": [
                    "int"
                ],
                "expected_degree": [
                    "int"
                ]
            }
        },
        "CausalDiscovery.objective": {
            "name": "objective",
            "location": 82,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "network_links": [
                    "bytes",
                    "typing.Iterator",
                    "dict[, ]",
                    "str"
                ]
            }
        },
        "CausalDiscovery.graph_score": {
            "name": "graph_score",
            "location": 87,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "test_graph": [
                    "bool"
                ]
            }
        },
        "CausalDiscovery.add_missing_nodes": {
            "name": "add_missing_nodes",
            "location": 92,
            "return": [],
            "arguments": {
                "self": [],
                "graph": []
            }
        },
        "CausalDiscovery.choices_to_graph": {
            "name": "choices_to_graph",
            "location": 97,
            "return": [],
            "arguments": {
                "self": [],
                "network_links": [
                    "bytes",
                    "list[str]",
                    "str",
                    "list[list[str]]"
                ]
            }
        }
    },
    "nevergrad-main/nevergrad/functions/causaldiscovery/test_core.py": {
        "test_causal_discovery_using_data_func": {
            "name": "test_causal_discovery_using_data_func",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_causal_discovery_using_data_minimize": {
            "name": "test_causal_discovery_using_data_minimize",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_causal_discovery_using_generator": {
            "name": "test_causal_discovery_using_generator",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "nevergrad-main/nevergrad/functions/causaldiscovery/__init__.py": {},
    "nevergrad-main/nevergrad/functions/control/core.py": {
        "BaseFunction.__init__": {
            "name": "__init__",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "num_rollouts": [
                    "int",
                    "None",
                    "str"
                ],
                "activation": [
                    "typing.Text"
                ],
                "intermediate_layer_dim": [
                    "None"
                ],
                "deterministic_sim": [
                    "bool"
                ],
                "noise_level": [
                    "float"
                ],
                "states_normalization": [
                    "bool"
                ],
                "layer_rescaling_coef": [
                    "None",
                    "int",
                    "list[]"
                ],
                "random_state": [
                    "None",
                    "int",
                    "dict[int, int]"
                ]
            }
        },
        "BaseFunction._simulate": {
            "name": "_simulate",
            "location": 100,
            "return": [
                "int",
                "dict[, ]",
                "list[int]",
                "list[list[int]]",
                "str"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "int",
                    "float",
                    "str"
                ]
            }
        },
        "BaseFunction.evaluation_function": {
            "name": "evaluation_function",
            "location": 123,
            "return": [
                "float",
                "list[]",
                "tuple[typing.Union[typing.Literal,typing.Literal]]",
                "frozenset",
                "list[list[None]]",
                "tuple[]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "nevergrad-main/nevergrad/functions/control/mujoco.py": {
        "GenericMujocoEnv.__init__": {
            "name": "__init__",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "env_name": [
                    "str",
                    "None",
                    "bool",
                    "typing.Sequence[str]"
                ],
                "state_mean": [
                    "str",
                    "None",
                    "typing.Mapping",
                    "int",
                    "dict[str, typing.Any]"
                ],
                "state_std": [
                    "str",
                    "None",
                    "typing.Mapping",
                    "int",
                    "dict[str, typing.Any]"
                ],
                "num_rollouts": [
                    "int",
                    "dict[str, str]"
                ],
                "activation": [
                    "str",
                    "None",
                    "typing.Mapping",
                    "int",
                    "dict[str, typing.Any]"
                ],
                "layer_rescaling_coef": [
                    "str",
                    "None",
                    "typing.Mapping",
                    "int",
                    "dict[str, typing.Any]"
                ],
                "noise_level": [
                    "str",
                    "None",
                    "typing.Mapping",
                    "int",
                    "dict[str, typing.Any]"
                ],
                "random_state": [
                    "None",
                    "str",
                    "int"
                ]
            }
        },
        "GenericMujocoEnv._activation": {
            "name": "_activation",
            "location": 51,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "float",
                    "int"
                ]
            }
        },
        "GenericMujocoEnv.__call__": {
            "name": "__call__",
            "location": 59,
            "return": [],
            "arguments": {
                "self": [],
                "layers": [
                    "str"
                ]
            }
        }
    },
    "nevergrad-main/nevergrad/functions/control/test_mujoco.py": {
        "test_gym": {
            "name": "test_gym",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "intermediate_layer_dim": [
                    "float",
                    "int"
                ],
                "noise_level": [
                    "float",
                    "int"
                ],
                "deterministic_sim": [
                    "float",
                    "int"
                ],
                "states_normalization": [
                    "float",
                    "int"
                ]
            }
        },
        "test_all_mujoco_envs": {
            "name": "test_all_mujoco_envs",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "module": [
                    "bool",
                    "dict[str, typing.Any]",
                    "typing.Type"
                ],
                "intermediate_layer_dim": [
                    "bool",
                    "dict[str, typing.Any]",
                    "typing.Type"
                ],
                "noise_level": [
                    "bool",
                    "dict[str, typing.Any]",
                    "typing.Type"
                ],
                "deterministic_sim": [
                    "bool",
                    "dict[str, typing.Any]",
                    "typing.Type"
                ],
                "states_normalization": [
                    "bool",
                    "dict[str, typing.Any]",
                    "typing.Type"
                ]
            }
        }
    },
    "nevergrad-main/nevergrad/functions/control/__init__.py": {},
    "nevergrad-main/nevergrad/functions/cycling/cycling.py": {
        "team_pursuit_simulation": {
            "name": "team_pursuit_simulation",
            "location": 81,
            "return": [
                "int",
                "float"
            ],
            "arguments": {
                "x": []
            }
        },
        "Cycling.__init__": {
            "name": "__init__",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "strategy_index": [
                    "int"
                ]
            }
        }
    },
    "nevergrad-main/nevergrad/functions/cycling/cyclist.py": {
        "Cyclist.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "height": [
                    "float",
                    "typing.Callable[..., None]",
                    "bool"
                ],
                "weight": [
                    "float",
                    "typing.Callable[..., None]",
                    "bool"
                ],
                "mean_maximum_power": [
                    "float",
                    "typing.Callable[..., None]",
                    "bool"
                ],
                "event": [
                    "bool",
                    "str"
                ],
                "start_position": [
                    "int",
                    "str"
                ],
                "gender": [
                    "float",
                    "typing.Callable[..., None]",
                    "bool"
                ]
            }
        },
        "Cyclist.set_pace": {
            "name": "set_pace",
            "location": 36,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "power": [
                    "int",
                    "bytearray"
                ]
            }
        },
        "Cyclist.follow": {
            "name": "follow",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "distance": [
                    "int"
                ]
            }
        },
        "Cyclist.get_height": {
            "name": "get_height",
            "location": 101,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Cyclist.get_weight": {
            "name": "get_weight",
            "location": 104,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Cyclist.get_mean_maximum_power": {
            "name": "get_mean_maximum_power",
            "location": 107,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Cyclist.get_remaining_energy": {
            "name": "get_remaining_energy",
            "location": 110,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Cyclist.get_position": {
            "name": "get_position",
            "location": 113,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Cyclist.set_weight": {
            "name": "set_weight",
            "location": 116,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "weight": [
                    "bool",
                    "float"
                ]
            }
        },
        "Cyclist.set_height": {
            "name": "set_height",
            "location": 121,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "height": [
                    "bool",
                    "float"
                ]
            }
        },
        "Cyclist.set_mean_maximum_power": {
            "name": "set_mean_maximum_power",
            "location": 125,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mean_maximum_power": [
                    "bool",
                    "float"
                ]
            }
        },
        "Cyclist.set_position": {
            "name": "set_position",
            "location": 129,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "position": [
                    "bool",
                    "float"
                ]
            }
        },
        "Cyclist.increase_fatigue": {
            "name": "increase_fatigue",
            "location": 132,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Cyclist.recover": {
            "name": "recover",
            "location": 135,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Cyclist.reset": {
            "name": "reset",
            "location": 139,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Cyclist.update_cda": {
            "name": "update_cda",
            "location": 145,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Cyclist.update_total_energy": {
            "name": "update_total_energy",
            "location": 150,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "nevergrad-main/nevergrad/functions/cycling/mensteampursuit.py": {
        "mensteampursuit.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "mensteampursuit.simulate": {
            "name": "simulate",
            "location": 26,
            "return": [],
            "arguments": {
                "self": [],
                "transition_strategy": [],
                "pacing_strategy": []
            }
        },
        "mensteampursuit.validate_order": {
            "name": "validate_order",
            "location": 101,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "nevergrad-main/nevergrad/functions/cycling/simulationresult.py": {
        "simulationresult.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "finish_time": [
                    "int",
                    "float"
                ],
                "proportion_completed": [
                    "int",
                    "float"
                ],
                "energy_remaining": [
                    "int",
                    "float"
                ],
                "velocity_profile": [
                    "int",
                    "float"
                ]
            }
        },
        "simulationresult.get_finish_time": {
            "name": "get_finish_time",
            "location": 17,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "simulationresult.get_proportion_completed": {
            "name": "get_proportion_completed",
            "location": 20,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "simulationresult.get_energy_remaining": {
            "name": "get_energy_remaining",
            "location": 23,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "simulationresult.get_velocity_profile": {
            "name": "get_velocity_profile",
            "location": 26,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "simulationresult.to_string": {
            "name": "to_string",
            "location": 29,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "nevergrad-main/nevergrad/functions/cycling/teampursuit.py": {
        "teampursuit.__init__": {
            "name": "__init__",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "teampursuit.set_temperature": {
            "name": "set_temperature",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "temperature": [
                    "bool",
                    "float"
                ]
            }
        },
        "teampursuit.set_barometric_pressure": {
            "name": "set_barometric_pressure",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "barometric_pressure": [
                    "bool",
                    "float"
                ]
            }
        },
        "teampursuit.set_relative_humidity": {
            "name": "set_relative_humidity",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "relative_humidity": [
                    "bool",
                    "float"
                ]
            }
        },
        "teampursuit.set_height": {
            "name": "set_height",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cyclist_id": [
                    "int"
                ],
                "height": [
                    "str",
                    "int",
                    "None"
                ]
            }
        },
        "teampursuit.set_weight": {
            "name": "set_weight",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cyclist_id": [
                    "int"
                ],
                "weight": [
                    "str",
                    "int",
                    "None"
                ]
            }
        },
        "teampursuit.set_mean_maximum_power": {
            "name": "set_mean_maximum_power",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cyclist_id": [
                    "int"
                ],
                "mean_maximum_power": [
                    "str",
                    "int",
                    "None"
                ]
            }
        },
        "teampursuit.get_temperature": {
            "name": "get_temperature",
            "location": 70,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "teampursuit.get_barometric_pressure": {
            "name": "get_barometric_pressure",
            "location": 73,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "teampursuit.get_relative_humidity": {
            "name": "get_relative_humidity",
            "location": 76,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "teampursuit.get_height": {
            "name": "get_height",
            "location": 79,
            "return": [],
            "arguments": {
                "self": [],
                "cyclist_id": [
                    "int"
                ]
            }
        },
        "teampursuit.get_weight": {
            "name": "get_weight",
            "location": 85,
            "return": [],
            "arguments": {
                "self": [],
                "cyclist_id": [
                    "int"
                ]
            }
        },
        "teampursuit.get_mean_maximum_power": {
            "name": "get_mean_maximum_power",
            "location": 91,
            "return": [],
            "arguments": {
                "self": [],
                "cyclist_id": [
                    "int"
                ]
            }
        },
        "teampursuit.simulate": {
            "name": "simulate",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "transition_strategy": [
                    "int",
                    "str",
                    "typing.Iterable[t]"
                ],
                "pacing_strategy": [
                    "int",
                    "str",
                    "typing.Iterable[t]"
                ]
            }
        },
        "teampursuit.update_air_density": {
            "name": "update_air_density",
            "location": 101,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "teampursuit.cyclists_remaining": {
            "name": "cyclists_remaining",
            "location": 118,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "teampursuit.leader": {
            "name": "leader",
            "location": 127,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "teampursuit.transition": {
            "name": "transition",
            "location": 133,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "nevergrad-main/nevergrad/functions/cycling/test_cycling.py": {
        "test_cycling": {
            "name": "test_cycling",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "nevergrad-main/nevergrad/functions/cycling/womensteampursuit.py": {
        "womensteampursuit.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "womensteampursuit.simulate": {
            "name": "simulate",
            "location": 26,
            "return": [],
            "arguments": {
                "self": [],
                "transition_strategy": [],
                "pacing_strategy": []
            }
        }
    },
    "nevergrad-main/nevergrad/functions/cycling/__init__.py": {},
    "nevergrad-main/nevergrad/functions/fishing/core.py": {
        "_compute_total_fishing": {
            "name": "_compute_total_fishing",
            "location": 32,
            "return": [
                "float",
                "int"
            ],
            "arguments": {
                "list_number_fishermen": [
                    "str"
                ]
            }
        },
        "OptimizeFish.__init__": {
            "name": "__init__",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "time": [
                    "int"
                ]
            }
        }
    },
    "nevergrad-main/nevergrad/functions/fishing/test_core.py": {
        "test_fishing": {
            "name": "test_fishing",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "nevergrad-main/nevergrad/functions/fishing/__init__.py": {},
    "nevergrad-main/nevergrad/functions/games/game.py": {
        "_Game.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "_Game.get_list_of_games": {
            "name": "get_list_of_games",
            "location": 29,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_Game.play_game": {
            "name": "play_game",
            "location": 34,
            "return": [],
            "arguments": {
                "self": [],
                "game": [
                    "list[str]",
                    "dict[str, typing.Any]",
                    "typing.Callable[, ]"
                ],
                "policy1": [
                    "None",
                    "tuple[typing.Union[int,int]]",
                    "bool"
                ],
                "policy2": [
                    "None",
                    "tuple[typing.Union[int,int]]",
                    "bool"
                ]
            }
        },
        "_Game.guesswho_play_noturn": {
            "name": "guesswho_play_noturn",
            "location": 43,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "decks": [],
                "policy": [
                    "int",
                    "str",
                    "typing.Callable[, ]"
                ]
            }
        },
        "_Game.guesswho_play": {
            "name": "guesswho_play",
            "location": 63,
            "return": [
                "list[typing.Union[str,int]]"
            ],
            "arguments": {
                "self": [],
                "policy": [
                    "str",
                    "bool",
                    "bytearray"
                ],
                "decks": [
                    "str"
                ],
                "turn": [
                    "int"
                ]
            }
        },
        "_Game.guesswho_play_game": {
            "name": "guesswho_play_game",
            "location": 73,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "policy1": [
                    "float",
                    "None",
                    "int",
                    "str"
                ],
                "policy2": [
                    "float",
                    "None",
                    "int",
                    "str"
                ],
                "init": [
                    "int"
                ]
            }
        },
        "_Game.flip_play_game": {
            "name": "flip_play_game",
            "location": 89,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "policy1": [
                    "str",
                    "tuple[typing.Union[typing.Any,typing.Any]]",
                    "None"
                ],
                "policy2": [
                    "str",
                    "tuple[typing.Union[typing.Any,typing.Any]]",
                    "None"
                ]
            }
        },
        "_Game.flip_match": {
            "name": "flip_match",
            "location": 97,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "a": [
                    "bool"
                ],
                "b": [
                    "bool"
                ]
            }
        },
        "_Game.flip_play_game_nosym": {
            "name": "flip_play_game_nosym",
            "location": 100,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "policy1": [
                    "list[int]",
                    "tuple[frozenset]",
                    "list[dict[, ]]",
                    "int",
                    "list[tuple[typing.Union[int,int]]]",
                    "str"
                ],
                "policy2": [
                    "list[int]",
                    "tuple[frozenset]",
                    "list[dict[, ]]",
                    "int",
                    "list[tuple[typing.Union[int,int]]]",
                    "str"
                ]
            }
        },
        "_Game.flip_value": {
            "name": "flip_value",
            "location": 199,
            "return": [
                "int",
                "list[]"
            ],
            "arguments": {
                "self": [],
                "visible1": [],
                "visible2": [],
                "l1": [
                    "int"
                ],
                "l2": [
                    "int",
                    "str",
                    "list[str]"
                ],
                "stack": [
                    "list[int]"
                ],
                "policy1": [
                    "None",
                    "list[typing.Any]"
                ]
            }
        },
        "_Game.war_play_game": {
            "name": "war_play_game",
            "location": 329,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "policy1": [
                    "float",
                    "bytes",
                    "None",
                    "int",
                    "list[dict[str, typing.Any]]"
                ],
                "policy2": [
                    "float",
                    "bytes",
                    "None",
                    "int",
                    "list[dict[str, typing.Any]]"
                ],
                "batawaf": [
                    "bool"
                ]
            }
        },
        "_Game.war_decide": {
            "name": "war_decide",
            "location": 382,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": [],
                "policy": [
                    "typing.Callable[, ]",
                    "dict[, ]",
                    "float"
                ],
                "num_cards": [
                    "int",
                    "None",
                    "float",
                    "list[float]",
                    "tuple[]"
                ],
                "list_of_cards": [
                    "list[list[bool]]",
                    "list[str]"
                ]
            }
        },
        "Game.__init__": {
            "name": "__init__",
            "location": 412,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "game": [
                    "typing.Text"
                ]
            }
        },
        "Game._simulate_game": {
            "name": "_simulate_game",
            "location": 422,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "str"
                ]
            }
        },
        "Game.evaluation_function": {
            "name": "evaluation_function",
            "location": 435,
            "return": [
                "float"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "nevergrad-main/nevergrad/functions/games/test_game.py": {
        "test_games": {
            "name": "test_games",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "name": [
                    "str"
                ]
            }
        }
    },
    "nevergrad-main/nevergrad/functions/games/__init__.py": {},
    "nevergrad-main/nevergrad/functions/gym/multigym.py": {
        "SmallActionSpaceLlvmEnv.__init__": {
            "name": "__init__",
            "location": 135,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "env": [
                    "bool"
                ]
            }
        },
        "SmallActionSpaceLlvmEnv.action": {
            "name": "action",
            "location": 142,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": [],
                "action": [
                    "float",
                    "None",
                    "str",
                    "list[int]"
                ]
            }
        },
        "AutophaseNormalizedFeatures.__init__": {
            "name": "__init__",
            "location": 157,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "env": [
                    "str",
                    "list[str]",
                    "tuple[typing.Union[str,...]]",
                    "bool",
                    "None"
                ]
            }
        },
        "AutophaseNormalizedFeatures.observation": {
            "name": "observation",
            "location": 168,
            "return": [],
            "arguments": {
                "self": [],
                "observation": [
                    "int"
                ]
            }
        },
        "ConcatActionsHistogram.__init__": {
            "name": "__init__",
            "location": 185,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "env": [
                    "str",
                    "int"
                ],
                "norm_to_episode_len": [
                    "int"
                ]
            }
        },
        "ConcatActionsHistogram.reset": {
            "name": "reset",
            "location": 219,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ConcatActionsHistogram.step": {
            "name": "step",
            "location": 223,
            "return": [],
            "arguments": {
                "self": [],
                "action": [
                    "str"
                ]
            }
        },
        "ConcatActionsHistogram.observation": {
            "name": "observation",
            "location": 230,
            "return": [],
            "arguments": {
                "self": [],
                "observation": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ]
            }
        },
        "CompilerGym.__init__": {
            "name": "__init__",
            "location": 237,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "compiler_gym_pb_index": [
                    "bool"
                ],
                "limited_compiler_gym": [
                    "None",
                    "list[int]",
                    "int",
                    "typing.BinaryIO",
                    "bytes"
                ]
            }
        },
        "CompilerGym.make_env": {
            "name": "make_env",
            "location": 271,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "CompilerGym.eval_actions": {
            "name": "eval_actions",
            "location": 289,
            "return": [],
            "arguments": {
                "self": [],
                "actions": [
                    "float",
                    "list[tuple[typing.Union[int,int]]]"
                ]
            }
        },
        "CompilerGym.eval_actions_as_list": {
            "name": "eval_actions_as_list",
            "location": 300,
            "return": [
                "list[]",
                "tuple[typing.Union[typing.Literal,typing.Literal,typing.Literal,typing.Literal,typing.Literal,typing.Literal,typing.Literal,typing.Literal,typing.Literal,typing.Literal,typing.Literal,typing.Literal]]",
                "str",
                "typing.Match",
                "None"
            ],
            "arguments": {
                "self": [],
                "actions": []
            }
        },
        "GymMulti.get_env_names": {
            "name": "get_env_names",
            "location": 310,
            "return": [
                "list[]"
            ],
            "arguments": {}
        },
        "GymMulti.wrap_env": {
            "name": "wrap_env",
            "location": 359,
            "return": [],
            "arguments": {
                "self": [],
                "input_env": [
                    "int"
                ]
            }
        },
        "GymMulti.observation_wrap": {
            "name": "observation_wrap",
            "location": 374,
            "return": [
                "ConcatActionsHistogram"
            ],
            "arguments": {
                "self": [],
                "env": [
                    "str",
                    "typing.Type"
                ]
            }
        },
        "GymMulti.create_env": {
            "name": "create_env",
            "location": 379,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GymMulti.__init__": {
            "name": "__init__",
            "location": 419,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "typing.Text"
                ],
                "control": [
                    "typing.Text"
                ],
                "neural_factor": [
                    "int"
                ],
                "randomized": [
                    "bool"
                ],
                "compiler_gym_pb_index": [
                    "None",
                    "int",
                    "str",
                    "typing.Sequence[]"
                ],
                "limited_compiler_gym": [
                    "None",
                    "int",
                    "str",
                    "float"
                ],
                "optimization_scale": [
                    "int"
                ],
                "greedy_bias": [
                    "bool"
                ],
                "sparse_limit": [
                    "None",
                    "str",
                    "bool"
                ]
            }
        },
        "GymMulti.evaluation_function": {
            "name": "evaluation_function",
            "location": 627,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "GymMulti.forked_env": {
            "name": "forked_env",
            "location": 671,
            "return": [
                "dict[str, typing.Any]"
            ],
            "arguments": {
                "self": [],
                "env": [
                    "str",
                    "typing.Type"
                ]
            }
        },
        "GymMulti.softmax": {
            "name": "softmax",
            "location": 686,
            "return": [],
            "arguments": {
                "self": [],
                "a": [
                    "str",
                    "bool",
                    "dict[str, typing.Any]",
                    "None"
                ]
            }
        },
        "GymMulti.discretize": {
            "name": "discretize",
            "location": 692,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "a": [],
                "env": [
                    "str",
                    "typing.Type",
                    "dict[, ]"
                ]
            }
        },
        "GymMulti.neural": {
            "name": "neural",
            "location": 737,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "self": [],
                "x": [],
                "o": []
            }
        },
        "GymMulti.sparse_gym_multi_function": {
            "name": "sparse_gym_multi_function",
            "location": 791,
            "return": [
                "float",
                "int"
            ],
            "arguments": {
                "self": [],
                "weights": [
                    "int",
                    "str",
                    "typing.Iterable[str]"
                ],
                "enablers": [
                    "float",
                    "tuple[]",
                    "int"
                ],
                "limited_fidelity": [
                    "bool"
                ],
                "compiler_gym_pb_index": [
                    "None",
                    "tuple[]",
                    "dict[, ]",
                    "tuple[str]"
                ]
            }
        },
        "GymMulti.gym_multi_function": {
            "name": "gym_multi_function",
            "location": 808,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "int"
                ],
                "limited_fidelity": [
                    "bool"
                ],
                "compiler_gym_pb_index": [
                    "None",
                    "tuple[]"
                ]
            }
        },
        "GymMulti.action_cast": {
            "name": "action_cast",
            "location": 861,
            "return": [
                "tuple[]",
                "self_@_action_type",
                "float",
                "list[float]",
                "list[list[int]]",
                "list[]",
                "tuple[typing.Union[float,float]]",
                "int"
            ],
            "arguments": {
                "self": [],
                "a": [
                    "int",
                    "typing.Type"
                ],
                "env": []
            }
        },
        "GymMulti.step": {
            "name": "step",
            "location": 902,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "self": [],
                "a": [
                    "dict[str, typing.Any]",
                    "typing.Pattern",
                    "list[str]"
                ],
                "env": []
            }
        },
        "GymMulti.heuristic": {
            "name": "heuristic",
            "location": 911,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "o": [
                    "typing.IO",
                    "str",
                    "list[str]",
                    "int"
                ],
                "current_observations": [
                    "list[]"
                ]
            }
        },
        "GymMulti.gym_simulate": {
            "name": "gym_simulate",
            "location": 936,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "x": [],
                "seed": [
                    "int",
                    "list[]",
                    "tuple[int]"
                ],
                "test_set": [
                    "bool",
                    "str"
                ],
                "compiler_gym_pb_index": [
                    "None",
                    "int",
                    "float",
                    "tuple[numpy.dtype]"
                ],
                "limited_fidelity": [
                    "bool"
                ]
            }
        },
        "GymMulti.gym_conformant": {
            "name": "gym_conformant",
            "location": 1033,
            "return": [
                "float",
                "int"
            ],
            "arguments": {
                "self": [],
                "x": [],
                "env": [
                    "Exception",
                    "typing.Hashable"
                ]
            }
        },
        "GymMulti.archive_observations": {
            "name": "archive_observations",
            "location": 1049,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "current_actions": [
                    "str"
                ],
                "current_observations": [
                    "list[numpy.array]"
                ],
                "current_reward": []
            }
        }
    },
    "nevergrad-main/nevergrad/functions/gym/test_multigym.py": {
        "test_multigym": {
            "name": "test_multigym",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_compiler_gym": {
            "name": "test_compiler_gym",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_cartpole": {
            "name": "test_cartpole",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_sparse_cartpole": {
            "name": "test_sparse_cartpole",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_run_multigym": {
            "name": "test_run_multigym",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "name": [
                    "str"
                ]
            }
        },
        "test_tuple_action_space_neural": {
            "name": "test_tuple_action_space_neural",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "nevergrad-main/nevergrad/functions/gym/tuple_gym_env.py": {
        "TupleActionSpace.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TupleActionSpace._next_observation": {
            "name": "_next_observation",
            "location": 31,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TupleActionSpace.reward": {
            "name": "reward",
            "location": 35,
            "return": [
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "TupleActionSpace._take_action": {
            "name": "_take_action",
            "location": 40,
            "return": [],
            "arguments": {
                "self": [],
                "action": [
                    "str",
                    "list[]",
                    "tuple[int]",
                    "list[str]",
                    "list[tuple[]]"
                ]
            }
        },
        "TupleActionSpace.reset": {
            "name": "reset",
            "location": 48,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TupleActionSpace.step": {
            "name": "step",
            "location": 51,
            "return": [
                "tuple[typing.Union[float,int,str,dict[str, int],dict[, ]]]"
            ],
            "arguments": {
                "self": [],
                "action": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ]
            }
        }
    },
    "nevergrad-main/nevergrad/functions/gym/__init__.py": {},
    "nevergrad-main/nevergrad/functions/images/core.py": {
        "Image.__init__": {
            "name": "__init__",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "problem_name": [
                    "typing.Text"
                ],
                "index": [
                    "int"
                ],
                "loss": [],
                "with_pgan": [
                    "bool"
                ],
                "num_images": [
                    "int"
                ]
            }
        },
        "Image._generate_images": {
            "name": "_generate_images",
            "location": 92,
            "return": [],
            "arguments": {
                "self": [],
                "x": []
            }
        },
        "Image.interpolate": {
            "name": "interpolate",
            "location": 103,
            "return": [],
            "arguments": {
                "self": [],
                "base_image": [],
                "target": [],
                "k": [],
                "num_images": []
            }
        },
        "Image._loss_with_pgan": {
            "name": "_loss_with_pgan",
            "location": 110,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "x": [],
                "export_string": [
                    "typing.Text"
                ]
            }
        },
        "Image.export_to_images": {
            "name": "export_to_images",
            "location": 138,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "x": [],
                "export_string": [
                    "typing.Text"
                ]
            }
        },
        "Normalize.__init__": {
            "name": "__init__",
            "location": 146,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mean": [],
                "std": []
            }
        },
        "Normalize.forward": {
            "name": "forward",
            "location": 151,
            "return": [],
            "arguments": {
                "self": [],
                "x": []
            }
        },
        "Resnet50.__init__": {
            "name": "__init__",
            "location": 156,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Resnet50.forward": {
            "name": "forward",
            "location": 161,
            "return": [],
            "arguments": {
                "self": [],
                "x": []
            }
        },
        "TestClassifier.__init__": {
            "name": "__init__",
            "location": 166,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "image_size": [
                    "int"
                ]
            }
        },
        "TestClassifier.forward": {
            "name": "forward",
            "location": 170,
            "return": [],
            "arguments": {
                "self": [],
                "x": []
            }
        },
        "ImageAdversarial.__init__": {
            "name": "__init__",
            "location": 176,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "classifier": [],
                "image": [],
                "label": [
                    "int"
                ],
                "targeted": [
                    "bool"
                ],
                "epsilon": [
                    "float"
                ]
            }
        },
        "ImageAdversarial._loss": {
            "name": "_loss",
            "location": 209,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "x": []
            }
        },
        "ImageAdversarial._get_classifier_output": {
            "name": "_get_classifier_output",
            "location": 214,
            "return": [],
            "arguments": {
                "self": [],
                "x": []
            }
        },
        "ImageAdversarial.evaluation_function": {
            "name": "evaluation_function",
            "location": 221,
            "return": [
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "ImageAdversarial.make_folder_functions": {
            "name": "make_folder_functions",
            "location": 231,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "cls": [],
                "folder": [],
                "model": [
                    "typing.Text"
                ]
            }
        },
        "ImageFromPGAN.__init__": {
            "name": "__init__",
            "location": 298,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "initial_noise": [
                    "None"
                ],
                "use_gpu": [
                    "bool"
                ],
                "loss": [
                    "None"
                ],
                "mutable_sigma": [
                    "bool"
                ],
                "sigma": [
                    "int"
                ]
            }
        },
        "ImageFromPGAN._loss": {
            "name": "_loss",
            "location": 340,
            "return": [],
            "arguments": {
                "self": [],
                "x": []
            }
        },
        "ImageFromPGAN._generate_images": {
            "name": "_generate_images",
            "location": 345,
            "return": [],
            "arguments": {
                "self": [],
                "x": []
            }
        }
    },
    "nevergrad-main/nevergrad/functions/images/imagelosses.py": {
        "ImageLoss.__init__": {
            "name": "__init__",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "reference": [
                    "None",
                    "list[typing.Type]",
                    "str",
                    "list['OverloadPart']",
                    "bool",
                    "typing.Sequence[str]",
                    "typing.Callable[..., T]"
                ]
            }
        },
        "ImageLoss.__call__": {
            "name": "__call__",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "img": [
                    "dict[, ]"
                ]
            }
        },
        "SumAbsoluteDifferences.__call__": {
            "name": "__call__",
            "location": 40,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "float"
                ]
            }
        },
        "Lpips.__init__": {
            "name": "__init__",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "reference": [
                    "None",
                    "str",
                    "typing.Callable[, ]",
                    "bool"
                ],
                "net": [
                    "typing.Text"
                ]
            }
        },
        "Lpips.__call__": {
            "name": "__call__",
            "location": 57,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "img": [
                    "str",
                    "typing.Sequence[S]",
                    "typing.Sequence[ticketing.models.tickeTicket]"
                ]
            }
        },
        "LpipsAlex.__init__": {
            "name": "__init__",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "reference": [
                    "str",
                    "typing.Callable[, ]",
                    "bool"
                ]
            }
        },
        "LpipsVgg.__init__": {
            "name": "__init__",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "reference": [
                    "str",
                    "typing.Callable[, ]",
                    "bool"
                ]
            }
        },
        "SumSquareDifferences.__call__": {
            "name": "__call__",
            "location": 89,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "float"
                ]
            }
        },
        "HistogramDifference.__call__": {
            "name": "__call__",
            "location": 97,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "float"
                ]
            }
        },
        "Koncept512.koncept": {
            "name": "koncept",
            "location": 116,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Koncept512.__call__": {
            "name": "__call__",
            "location": 129,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "img": [
                    "typing.Callable[, ]",
                    "int",
                    "float"
                ]
            }
        },
        "Blur.__call__": {
            "name": "__call__",
            "location": 142,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "img": [
                    "float",
                    "typing.Iterable[typing.Any]",
                    "bool"
                ]
            }
        },
        "Brisque.__call__": {
            "name": "__call__",
            "location": 157,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "img": [
                    "typing.Callable[, ]",
                    "int",
                    "float"
                ]
            }
        }
    },
    "nevergrad-main/nevergrad/functions/images/test_core.py": {
        "test_images_adversarial": {
            "name": "test_images_adversarial",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_image_adversarial_eval": {
            "name": "test_image_adversarial_eval",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_images": {
            "name": "test_images",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "nevergrad-main/nevergrad/functions/images/test_imagelosses.py": {
        "test_reference": {
            "name": "test_reference",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_l1_loss": {
            "name": "test_l1_loss",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_consistency_losses_with_oteytaud": {
            "name": "test_consistency_losses_with_oteytaud",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "loss_name": [
                    "str"
                ]
            }
        }
    },
    "nevergrad-main/nevergrad/functions/images/__init__.py": {},
    "nevergrad-main/nevergrad/functions/iohprofiler/core.py": {
        "PBOFunction.__init__": {
            "name": "__init__",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fid": [
                    "int"
                ],
                "iid": [
                    "int"
                ],
                "dim": [
                    "int"
                ],
                "instrumentation": [
                    "typing.Text"
                ]
            }
        },
        "PBOFunction._evaluation_internal": {
            "name": "_evaluation_internal",
            "location": 63,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "int",
                    "float"
                ]
            }
        },
        "WModelFunction.__init__": {
            "name": "__init__",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "base_function": [
                    "typing.Text"
                ],
                "iid": [
                    "int"
                ],
                "dim": [
                    "int"
                ],
                "dummy": [
                    "int"
                ],
                "epistasis": [
                    "int"
                ],
                "neutrality": [
                    "int"
                ],
                "ruggedness": [
                    "int"
                ],
                "instrumentation": [
                    "typing.Text"
                ]
            }
        },
        "WModelFunction._evaluation_internal": {
            "name": "_evaluation_internal",
            "location": 142,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "int",
                    "float"
                ]
            }
        }
    },
    "nevergrad-main/nevergrad/functions/iohprofiler/test_core.py": {
        "test_PBO": {
            "name": "test_PBO",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "fid": [
                    "str"
                ],
                "iid": [
                    "str"
                ]
            }
        },
        "test_PBO_parameterization": {
            "name": "test_PBO_parameterization",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "instrumentation": [
                    "str",
                    "float"
                ]
            }
        },
        "test_W_model": {
            "name": "test_W_model",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "nevergrad-main/nevergrad/functions/iohprofiler/__init__.py": {},
    "nevergrad-main/nevergrad/functions/mixsimulator/core.py": {
        "OptimizeMix.__init__": {
            "name": "__init__",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "time": [
                    "int"
                ]
            }
        }
    },
    "nevergrad-main/nevergrad/functions/mixsimulator/test_core.py": {
        "test_mixsimulator": {
            "name": "test_mixsimulator",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "nevergrad-main/nevergrad/functions/mixsimulator/__init__.py": {},
    "nevergrad-main/nevergrad/functions/ml/mlfunctionlib.py": {
        "MLTuning._ml_parametrization": {
            "name": "_ml_parametrization",
            "location": 44,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "depth": [
                    "int",
                    "float",
                    "typing.Collection",
                    "None"
                ],
                "criterion": [
                    "int",
                    "float"
                ],
                "min_samples_split": [
                    "int",
                    "float"
                ],
                "solver": [
                    "float",
                    "typing.Callable[tensorflow.Tensor, tensorflow.Tensor]",
                    "list[int]",
                    "int"
                ],
                "activation": [
                    "int",
                    "float",
                    "list[int]"
                ],
                "alpha": [
                    "int",
                    "typing.Callable[tensorflow.Tensor, tensorflow.Tensor]",
                    "list[int]",
                    "float",
                    "None"
                ],
                "learning_rate": [
                    "int",
                    "typing.Callable[tensorflow.Tensor, tensorflow.Tensor]",
                    "list[int]",
                    "float",
                    "None"
                ],
                "regressor": [
                    "bool"
                ],
                "noise_free": [
                    "int",
                    "list[list[typing.Any]]",
                    "str",
                    "None"
                ]
            }
        },
        "MLTuning.__init__": {
            "name": "__init__",
            "location": 108,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "regressor": [
                    "list[dict[, ]]"
                ],
                "data_dimension": [
                    "None",
                    "dict[str, typing.Any]",
                    "dict[, ]",
                    "typing.Type",
                    "typing.Mapping"
                ],
                "dataset": [
                    "typing.Text"
                ],
                "overfitter": [
                    "bool"
                ]
            }
        },
        "MLTuning.evaluation_function": {
            "name": "evaluation_function",
            "location": 230,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MLTuning.make_dataset": {
            "name": "make_dataset",
            "location": 238,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data_dimension": [
                    "bool"
                ],
                "dataset": []
            }
        }
    },
    "nevergrad-main/nevergrad/functions/ml/test_mlfunctionlib.py": {
        "test_mltuning_values": {
            "name": "test_mltuning_values",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "cls_params": [],
                "func_params": [
                    "str",
                    "None",
                    "dict[, ]"
                ],
                "expected": [
                    "list[float]",
                    "str",
                    "float",
                    "list[str]"
                ]
            }
        }
    },
    "nevergrad-main/nevergrad/functions/ml/__init__.py": {},
    "nevergrad-main/nevergrad/functions/mlda/datasets.py": {
        "get_cache_folder": {
            "name": "get_cache_folder",
            "location": 26,
            "return": [],
            "arguments": {}
        },
        "get_dataset_filepath": {
            "name": "get_dataset_filepath",
            "location": 33,
            "return": [],
            "arguments": {
                "name": []
            }
        },
        "get_data": {
            "name": "get_data",
            "location": 59,
            "return": [],
            "arguments": {
                "name": []
            }
        },
        "_make_fake_get_data": {
            "name": "_make_fake_get_data",
            "location": 72,
            "return": [],
            "arguments": {
                "name": []
            }
        },
        "mocked_data": {
            "name": "mocked_data",
            "location": 86,
            "return": [],
            "arguments": {}
        },
        "make_perceptron_data": {
            "name": "make_perceptron_data",
            "location": 92,
            "return": [],
            "arguments": {
                "name": []
            }
        }
    },
    "nevergrad-main/nevergrad/functions/mlda/problems.py": {
        "_kmeans_distance": {
            "name": "_kmeans_distance",
            "location": 20,
            "return": [],
            "arguments": {
                "points": [],
                "centers": []
            }
        },
        "Clustering.__init__": {
            "name": "__init__",
            "location": 41,
            "return": [],
            "arguments": {
                "self": [],
                "points": [],
                "num_clusters": [],
                "rescale": []
            }
        },
        "Clustering.from_mlda": {
            "name": "from_mlda",
            "location": 50,
            "return": [],
            "arguments": {
                "cls": [],
                "name": [],
                "num_clusters": [],
                "rescale": []
            }
        },
        "Clustering._compute_distance": {
            "name": "_compute_distance",
            "location": 72,
            "return": [],
            "arguments": {
                "self": [],
                "centers": []
            }
        },
        "Perceptron.__init__": {
            "name": "__init__",
            "location": 90,
            "return": [],
            "arguments": {
                "self": [],
                "x": [],
                "y": []
            }
        },
        "Perceptron.from_mlda": {
            "name": "from_mlda",
            "location": 98,
            "return": [],
            "arguments": {
                "cls": [],
                "name": []
            }
        },
        "Perceptron.apply": {
            "name": "apply",
            "location": 117,
            "return": [],
            "arguments": {
                "self": [],
                "parameters": []
            }
        },
        "Perceptron._compute_loss": {
            "name": "_compute_loss",
            "location": 137,
            "return": [],
            "arguments": {
                "self": [],
                "x": []
            }
        },
        "SammonMapping.__init__": {
            "name": "__init__",
            "location": 146,
            "return": [],
            "arguments": {
                "self": [],
                "proximity_array": []
            }
        },
        "SammonMapping.from_mlda": {
            "name": "from_mlda",
            "location": 155,
            "return": [],
            "arguments": {
                "cls": [],
                "name": [],
                "rescale": []
            }
        },
        "SammonMapping.from_2d_circle": {
            "name": "from_2d_circle",
            "location": 192,
            "return": [],
            "arguments": {
                "cls": [],
                "num_points": []
            }
        },
        "SammonMapping._compute_distance": {
            "name": "_compute_distance",
            "location": 202,
            "return": [],
            "arguments": {
                "self": [],
                "x": []
            }
        },
        "Landscape.__init__": {
            "name": "__init__",
            "location": 229,
            "return": [],
            "arguments": {
                "self": [],
                "transform": []
            }
        },
        "Landscape._get_pixel_value": {
            "name": "_get_pixel_value",
            "location": 248,
            "return": [],
            "arguments": {
                "self": [],
                "x": [],
                "y": []
            }
        }
    },
    "nevergrad-main/nevergrad/functions/mlda/test_datasets.py": {
        "test_get_dataset_filepath": {
            "name": "test_get_dataset_filepath",
            "location": 16,
            "return": [],
            "arguments": {}
        },
        "test_get_data": {
            "name": "test_get_data",
            "location": 55,
            "return": [],
            "arguments": {
                "name": [],
                "text": [],
                "expected": []
            }
        },
        "test_mocked_data": {
            "name": "test_mocked_data",
            "location": 69,
            "return": [],
            "arguments": {
                "name": []
            }
        },
        "test_make_perceptron_data": {
            "name": "test_make_perceptron_data",
            "location": 75,
            "return": [],
            "arguments": {}
        },
        "test_xls_get_data": {
            "name": "test_xls_get_data",
            "location": 83,
            "return": [],
            "arguments": {}
        }
    },
    "nevergrad-main/nevergrad/functions/mlda/test_problems.py": {
        "test_kmeans_distance": {
            "name": "test_kmeans_distance",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_clustering": {
            "name": "test_clustering",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_compute_perceptron": {
            "name": "test_compute_perceptron",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_perceptron": {
            "name": "test_perceptron",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_sammon_mapping": {
            "name": "test_sammon_mapping",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_sammon_circle": {
            "name": "test_sammon_circle",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_landscape": {
            "name": "test_landscape",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_landscape_gaussian": {
            "name": "test_landscape_gaussian",
            "location": 97,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "nevergrad-main/nevergrad/functions/mlda/__init__.py": {},
    "nevergrad-main/nevergrad/functions/multiobjective/__init__.py": {
        "MultiobjectiveFunction.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "multiobjective_function": [
                    "bool",
                    "typing.Callable[int, typing.Any]"
                ],
                "upper_bounds": [
                    "None",
                    "bool",
                    "typing.Callable[int, typing.Any]"
                ]
            }
        }
    },
    "nevergrad-main/nevergrad/functions/olympussurfaces/core.py": {
        "OlympusSurface.__init__": {
            "name": "__init__",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "kind": [
                    "int",
                    "float"
                ],
                "dimension": [
                    "int"
                ],
                "noise_kind": [
                    "typing.Text"
                ],
                "noise_scale": [
                    "int"
                ]
            }
        },
        "OlympusSurface._simulate_surface": {
            "name": "_simulate_surface",
            "location": 54,
            "return": [],
            "arguments": {
                "self": [],
                "x": [
                    "int",
                    "float"
                ],
                "noise": [
                    "bool"
                ]
            }
        },
        "OlympusSurface.evaluation_function": {
            "name": "evaluation_function",
            "location": 68,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "OlympusEmulator.__init__": {
            "name": "__init__",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dataset_kind": [
                    "typing.Text"
                ],
                "model_kind": [
                    "typing.Text"
                ]
            }
        },
        "OlympusEmulator._get_parametrization": {
            "name": "_get_parametrization",
            "location": 99,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "OlympusEmulator._simulate_emulator": {
            "name": "_simulate_emulator",
            "location": 110,
            "return": [],
            "arguments": {
                "self": [],
                "x": [
                    "str",
                    "typing.Iterable[T]",
                    "typing.Sequence[T]"
                ]
            }
        }
    },
    "nevergrad-main/nevergrad/functions/olympussurfaces/test_core.py": {
        "test_olympus_surface": {
            "name": "test_olympus_surface",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "kind": [],
                "noise_kind": []
            }
        },
        "test_olympus_emulator": {
            "name": "test_olympus_emulator",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "dataset_kind": [
                    "str",
                    "int",
                    "typing.Type"
                ],
                "model_kind": [
                    "str",
                    "int",
                    "typing.Type"
                ]
            }
        }
    },
    "nevergrad-main/nevergrad/functions/olympussurfaces/__init__.py": {},
    "nevergrad-main/nevergrad/functions/photonics/core.py": {
        "_make_parametrization": {
            "name": "_make_parametrization",
            "location": 30,
            "return": [],
            "arguments": {
                "name": [],
                "dimension": [],
                "bounding_method": [
                    "typing.Text"
                ],
                "rolling": [
                    "bool"
                ],
                "as_tuple": [
                    "bool"
                ]
            }
        },
        "Photonics.__init__": {
            "name": "__init__",
            "location": 150,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [],
                "dimension": [],
                "bounding_method": [
                    "typing.Text"
                ],
                "rolling": [
                    "bool"
                ],
                "as_tuple": [
                    "bool"
                ]
            }
        },
        "Photonics.to_array": {
            "name": "to_array",
            "location": 177,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Photonics.evaluation_function": {
            "name": "evaluation_function",
            "location": 183,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Photonics._compute": {
            "name": "_compute",
            "location": 192,
            "return": [
                "float"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "nevergrad-main/nevergrad/functions/photonics/photonics.py": {
        "bragg": {
            "name": "bragg",
            "location": 26,
            "return": [],
            "arguments": {
                "X": []
            }
        },
        "chirped": {
            "name": "chirped",
            "location": 50,
            "return": [],
            "arguments": {
                "X": []
            }
        },
        "cascade": {
            "name": "cascade",
            "location": 69,
            "return": [],
            "arguments": {
                "T": [],
                "U": []
            }
        },
        "c_bas": {
            "name": "c_bas",
            "location": 96,
            "return": [],
            "arguments": {
                "A": [],
                "V": [],
                "h": []
            }
        },
        "marche": {
            "name": "marche",
            "location": 111,
            "return": [],
            "arguments": {
                "a": [],
                "b": [],
                "p": [],
                "n": [],
                "x": []
            }
        },
        "creneau": {
            "name": "creneau",
            "location": 128,
            "return": [],
            "arguments": {
                "k0": [],
                "a0": [],
                "pol": [],
                "e1": [],
                "e2": [],
                "a": [],
                "n": [],
                "x0": []
            }
        },
        "homogene": {
            "name": "homogene",
            "location": 156,
            "return": [],
            "arguments": {
                "k0": [],
                "a0": [],
                "pol": [],
                "epsilon": [],
                "n": []
            }
        },
        "interface": {
            "name": "interface",
            "location": 164,
            "return": [],
            "arguments": {
                "P": [],
                "Q": []
            }
        },
        "morpho": {
            "name": "morpho",
            "location": 173,
            "return": [],
            "arguments": {
                "X": []
            }
        },
        "epscSi": {
            "name": "epscSi",
            "location": 231,
            "return": [],
            "arguments": {
                "lam": []
            }
        },
        "cascade2": {
            "name": "cascade2",
            "location": 241,
            "return": [],
            "arguments": {
                "A": [],
                "B": []
            }
        },
        "solar": {
            "name": "solar",
            "location": 256,
            "return": [],
            "arguments": {
                "lam": []
            }
        },
        "absorption": {
            "name": "absorption",
            "location": 264,
            "return": [],
            "arguments": {
                "lam": [],
                "epsilon": [],
                "mu": [],
                "type_": [],
                "hauteur": [],
                "pol": [],
                "theta": []
            }
        },
        "cf_photosic_reference": {
            "name": "cf_photosic_reference",
            "location": 348,
            "return": [],
            "arguments": {
                "X": []
            }
        },
        "cf_photosic_realistic": {
            "name": "cf_photosic_realistic",
            "location": 376,
            "return": [],
            "arguments": {
                "eps_and_d": []
            }
        }
    },
    "nevergrad-main/nevergrad/functions/photonics/test_core.py": {
        "test_photonics_bounding_methods": {
            "name": "test_photonics_bounding_methods",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "pb": [
                    "str",
                    "dict[str, typing.Any]",
                    "float"
                ],
                "expected": [
                    "list[float]",
                    "float",
                    "str"
                ]
            }
        },
        "test_photonics_mean": {
            "name": "test_photonics_mean",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "pb": [
                    "str",
                    "dict[str, typing.Any]"
                ],
                "expected": [
                    "list[float]",
                    "float",
                    "str"
                ]
            }
        },
        "test_morpho_bounding_method_constraints": {
            "name": "test_morpho_bounding_method_constraints",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_photonics_bragg_recombination": {
            "name": "test_photonics_bragg_recombination",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_photonics_custom_mutation": {
            "name": "test_photonics_custom_mutation",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_photonics_error": {
            "name": "test_photonics_error",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_no_warning": {
            "name": "test_no_warning",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {
                "name": [
                    "str",
                    "dict[, ]"
                ],
                "method": [
                    "str",
                    "dict[, ]"
                ]
            }
        },
        "test_photonics_values": {
            "name": "test_photonics_values",
            "location": 104,
            "return": [
                "None"
            ],
            "arguments": {
                "name": [
                    "str",
                    "list[]"
                ],
                "value": [
                    "float",
                    "str"
                ],
                "expected": [
                    "float",
                    "str"
                ]
            }
        },
        "test_photonics_values_random": {
            "name": "test_photonics_values_random",
            "location": 177,
            "return": [
                "None"
            ],
            "arguments": {
                "name": [
                    "str",
                    "list[]",
                    "list[str]"
                ],
                "expected": [
                    "float",
                    "list[float]"
                ],
                "data": [
                    "str",
                    "float",
                    "None",
                    "typing.Callable[, ]",
                    "int",
                    "bytes"
                ]
            }
        },
        "test_photosic_reference": {
            "name": "test_photosic_reference",
            "location": 191,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_photosic_realist": {
            "name": "test_photosic_realist",
            "location": 200,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "nevergrad-main/nevergrad/functions/photonics/__init__.py": {},
    "nevergrad-main/nevergrad/functions/powersystems/core.py": {
        "Agent.__init__": {
            "name": "__init__",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "input_size": [
                    "list[int]",
                    "bool",
                    "float"
                ],
                "output_size": [
                    "int",
                    "list[int]"
                ],
                "layers": [
                    "int"
                ],
                "layer_width": [
                    "int"
                ]
            }
        },
        "Agent.dimension": {
            "name": "dimension",
            "location": 32,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Agent.set_parameters": {
            "name": "set_parameters",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "weights": [
                    "int",
                    "str",
                    "list[int]"
                ]
            }
        },
        "Agent.get_output": {
            "name": "get_output",
            "location": 46,
            "return": [],
            "arguments": {
                "self": [],
                "data": [
                    "dict[str, typing.Any]",
                    "bytes"
                ]
            }
        },
        "PowerSystem.__init__": {
            "name": "__init__",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "num_dams": [
                    "int"
                ],
                "depth": [
                    "int"
                ],
                "width": [
                    "int"
                ],
                "year_to_day_ratio": [
                    "float"
                ],
                "constant_to_year_ratio": [
                    "float"
                ],
                "back_to_normal": [
                    "float"
                ],
                "consumption_noise": [
                    "float"
                ],
                "num_thermal_plants": [
                    "int"
                ],
                "num_years": [
                    "float"
                ],
                "failure_cost": [
                    "float"
                ]
            }
        },
        "PowerSystem.get_num_vars": {
            "name": "get_num_vars",
            "location": 120,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "PowerSystem._simulate_power_system": {
            "name": "_simulate_power_system",
            "location": 123,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PowerSystem.make_plots": {
            "name": "make_plots",
            "location": 234,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "typing.Text"
                ]
            }
        },
        "PowerSystem.make_plots.block": {
            "name": "block",
            "location": 242,
            "return": [
                "list[float]"
            ],
            "arguments": {
                "x": []
            }
        },
        "PowerSystem.make_plots.block24": {
            "name": "block24",
            "location": 249,
            "return": [
                "list[float]"
            ],
            "arguments": {
                "x": []
            }
        },
        "PowerSystem.make_plots.deblock24": {
            "name": "deblock24",
            "location": 257,
            "return": [
                "list[float]"
            ],
            "arguments": {
                "x": []
            }
        }
    },
    "nevergrad-main/nevergrad/functions/powersystems/test_core.py": {
        "test_powersystem_small": {
            "name": "test_powersystem_small",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_make_plots": {
            "name": "test_make_plots",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "mock_plt": []
            }
        }
    },
    "nevergrad-main/nevergrad/functions/powersystems/__init__.py": {},
    "nevergrad-main/nevergrad/functions/pyomo/core.py": {
        "_convert_to_ng_name": {
            "name": "_convert_to_ng_name",
            "location": 16,
            "return": [
                "typing.Text",
                "str"
            ],
            "arguments": {
                "pyomo_var_key": [
                    "str",
                    "dict[, ]",
                    "int"
                ]
            }
        },
        "_make_pyomo_range_set_to_parametrization": {
            "name": "_make_pyomo_range_set_to_parametrization",
            "location": 23,
            "return": [
                "str"
            ],
            "arguments": {
                "domain": [],
                "params": [
                    "str"
                ],
                "params_name": [
                    "str"
                ]
            }
        },
        "_make_pyomo_variable_to_parametrization": {
            "name": "_make_pyomo_variable_to_parametrization",
            "location": 55,
            "return": [
                "dict[str, typing.Any]",
                "typing.Type",
                "dict[str, dict[str, str]]",
                "int",
                "dict[typing.Any, str]",
                "typing.OrderedDict"
            ],
            "arguments": {
                "model_component": [],
                "params": [
                    "dict[str, typing.Any]",
                    "typing.Type"
                ]
            }
        },
        "Pyomo.__init__": {
            "name": "__init__",
            "location": 104,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "model": [
                    "int",
                    "str",
                    "float",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "Pyomo._pyomo_value_assignment": {
            "name": "_pyomo_value_assignment",
            "location": 152,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "k_model_variables": [
                    "str"
                ]
            }
        },
        "Pyomo._pyomo_obj_function_wrapper": {
            "name": "_pyomo_obj_function_wrapper",
            "location": 161,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "i": [
                    "bool",
                    "typing.Mapping",
                    "float",
                    "None",
                    "typing.Callable[, ]",
                    "typing.Iterable[]",
                    "str"
                ]
            }
        },
        "Pyomo._pyomo_constraint_wrapper": {
            "name": "_pyomo_constraint_wrapper",
            "location": 167,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "i": [
                    "int",
                    "float",
                    "None"
                ],
                "instru": []
            }
        }
    },
    "nevergrad-main/nevergrad/functions/pyomo/test_core.py": {
        "test_concrete_model_without_constraints": {
            "name": "test_concrete_model_without_constraints",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "square": {
            "name": "square",
            "location": 26,
            "return": [],
            "arguments": {
                "m": [
                    "typing.Iterable[int]",
                    "float",
                    "int"
                ]
            }
        },
        "test_concrete_model_with_constraints": {
            "name": "test_concrete_model_with_constraints",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_abstract_model_with_constraints": {
            "name": "test_abstract_model_with_constraints",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_pyomo_set": {
            "name": "test_pyomo_set",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_pyomo_set.square2": {
            "name": "square2",
            "location": 70,
            "return": [
                "int"
            ],
            "arguments": {
                "m": []
            }
        }
    },
    "nevergrad-main/nevergrad/functions/pyomo/test_pyomo_doc.py": {
        "test_concrete_model_example": {
            "name": "test_concrete_model_example",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_abstract_model_example": {
            "name": "test_abstract_model_example",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_concrete_model_example.square": {
            "name": "square",
            "location": 17,
            "return": [],
            "arguments": {
                "m": []
            }
        },
        "test_abstract_model_example.square": {
            "name": "square",
            "location": 51,
            "return": [],
            "arguments": {
                "m": []
            }
        }
    },
    "nevergrad-main/nevergrad/functions/pyomo/__init__.py": {},
    "nevergrad-main/nevergrad/functions/rl/agents.py": {
        "RandomAgent.__init__": {
            "name": "__init__",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "env": []
            }
        },
        "RandomAgent.act": {
            "name": "act",
            "location": 38,
            "return": [],
            "arguments": {
                "self": [],
                "observation": [
                    "bool",
                    "dict[, ]",
                    "None"
                ],
                "reward": [
                    "bool",
                    "dict[, ]",
                    "None"
                ],
                "done": [
                    "bool",
                    "dict[, ]",
                    "None"
                ],
                "info": [
                    "None",
                    "bool",
                    "dict[, ]"
                ]
            }
        },
        "RandomAgent.copy": {
            "name": "copy",
            "location": 47,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Agent007.__init__": {
            "name": "__init__",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "env": []
            }
        },
        "Agent007.act": {
            "name": "act",
            "location": 60,
            "return": [],
            "arguments": {
                "self": [],
                "observation": [
                    "str",
                    "bool",
                    "float"
                ],
                "reward": [
                    "bool",
                    "dict[, ]",
                    "None"
                ],
                "done": [
                    "bool",
                    "dict[, ]",
                    "None"
                ],
                "info": [
                    "None",
                    "bool",
                    "dict[, ]"
                ]
            }
        },
        "Agent007.copy": {
            "name": "copy",
            "location": 76,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TorchAgent.__init__": {
            "name": "__init__",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "module": [
                    "str",
                    "dict[, ]",
                    "float"
                ],
                "deterministic": [
                    "bool"
                ],
                "instrumentation_std": [
                    "float"
                ]
            }
        },
        "TorchAgent.from_module_maker": {
            "name": "from_module_maker",
            "location": 98,
            "return": [],
            "arguments": {
                "cls": [
                    "bool",
                    "dict[str, typing.Any]",
                    "None"
                ],
                "env": [
                    "typing.Callable[, ]",
                    "typing.Iterable[str]"
                ],
                "module_maker": [
                    "list[str]",
                    "dict[str, typing.Any]",
                    "dict[, ]",
                    "str"
                ],
                "deterministic": [
                    "bool"
                ]
            }
        },
        "TorchAgent.act": {
            "name": "act",
            "location": 109,
            "return": [],
            "arguments": {
                "self": [],
                "observation": [
                    "str",
                    "bool",
                    "float"
                ],
                "reward": [
                    "bool",
                    "dict[, ]",
                    "None"
                ],
                "done": [
                    "bool",
                    "dict[, ]",
                    "None"
                ],
                "info": [
                    "None",
                    "bool",
                    "dict[, ]"
                ]
            }
        },
        "TorchAgent.copy": {
            "name": "copy",
            "location": 124,
            "return": [
                "TorchAgent"
            ],
            "arguments": {
                "self": []
            }
        },
        "TorchAgent.load_state_dict": {
            "name": "load_state_dict",
            "location": 127,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "state_dict": [
                    "dict[str, numpy.ndarray]",
                    "dict[str, torch.LongTensor]"
                ]
            }
        },
        "TorchAgentFunction.__init__": {
            "name": "__init__",
            "location": 137,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "agent": [
                    "dict[str, typing.Any]"
                ],
                "env_runner": [
                    "dict[str, str]"
                ],
                "reward_postprocessing": []
            }
        },
        "TorchAgentFunction.compute": {
            "name": "compute",
            "location": 153,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TorchAgentFunction.evaluation_function": {
            "name": "evaluation_function",
            "location": 165,
            "return": [
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "Perceptron.__init__": {
            "name": "__init__",
            "location": 175,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "input_shape": [
                    "str"
                ],
                "output_size": [
                    "int",
                    "dict[str, list[typing.Any]]"
                ]
            }
        },
        "Perceptron.forward": {
            "name": "forward",
            "location": 180,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DenseNet.__init__": {
            "name": "__init__",
            "location": 186,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "input_shape": [
                    "list[]"
                ],
                "output_size": [
                    "int",
                    "list[int]",
                    "tuple[int]",
                    "list[None]",
                    "str",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "DenseNet.forward": {
            "name": "forward",
            "location": 194,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "nevergrad-main/nevergrad/functions/rl/base.py": {
        "StepOutcome.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "observation": [
                    "str",
                    "int",
                    "typing.Callable[, ]",
                    "float",
                    "tuple[typing.Union[float,float]]"
                ],
                "reward": [
                    "None",
                    "str",
                    "int",
                    "typing.Callable[, ]",
                    "float",
                    "tuple[typing.Union[float,float]]"
                ],
                "done": [
                    "bool"
                ],
                "info": [
                    "None",
                    "dict[, ]",
                    "bool",
                    "float",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "StepOutcome.__iter__": {
            "name": "__iter__",
            "location": 31,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "StepOutcome.__repr__": {
            "name": "__repr__",
            "location": 34,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "StepOutcome.from_multiagent_step": {
            "name": "from_multiagent_step",
            "location": 38,
            "return": [
                "tuple[dict[, ]]"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "None",
                    "typing.Type"
                ],
                "obs": [],
                "reward": [],
                "done": [],
                "info": []
            }
        },
        "StepOutcome.to_multiagent_step": {
            "name": "to_multiagent_step",
            "location": 57,
            "return": [
                "tuple[dict[typing.Text, bool]]"
            ],
            "arguments": {
                "outcomes": [
                    "dict[, ]"
                ],
                "done": [
                    "bool"
                ]
            }
        },
        "Agent.act": {
            "name": "act",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "observation": [
                    "bool",
                    "dict[, ]",
                    "None"
                ],
                "reward": [
                    "bool",
                    "dict[, ]",
                    "None"
                ],
                "done": [
                    "bool",
                    "dict[, ]",
                    "None"
                ],
                "info": [
                    "None",
                    "bool",
                    "dict[, ]"
                ]
            }
        },
        "Agent.reset": {
            "name": "reset",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Agent.copy": {
            "name": "copy",
            "location": 81,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MultiAgentEnv.reset": {
            "name": "reset",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MultiAgentEnv.step": {
            "name": "step",
            "location": 95,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "action_dict": [
                    "dict[str, typing.Any]",
                    "dict[, ]"
                ]
            }
        },
        "MultiAgentEnv.copy": {
            "name": "copy",
            "location": 102,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MultiAgentEnv.with_agent": {
            "name": "with_agent",
            "location": 106,
            "return": [
                "PartialMultiAgentEnv"
            ],
            "arguments": {
                "self": []
            }
        },
        "PartialMultiAgentEnv.__init__": {
            "name": "__init__",
            "location": 113,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "env": [
                    "list[dict[, ]]",
                    "dict[, ]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "PartialMultiAgentEnv.reset": {
            "name": "reset",
            "location": 125,
            "return": [
                "dict[dict[str, typing.Any], ]"
            ],
            "arguments": {
                "self": []
            }
        },
        "PartialMultiAgentEnv.step": {
            "name": "step",
            "location": 130,
            "return": [],
            "arguments": {
                "self": [],
                "action_dict": [
                    "dict[, ]",
                    "dict[str, typing.Any]",
                    "dict[str, str]"
                ]
            }
        },
        "PartialMultiAgentEnv.copy": {
            "name": "copy",
            "location": 143,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PartialMultiAgentEnv.as_single_agent": {
            "name": "as_single_agent",
            "location": 146,
            "return": [
                "SingleAgentEnv"
            ],
            "arguments": {
                "self": []
            }
        },
        "SingleAgentEnv.__init__": {
            "name": "__init__",
            "location": 156,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "env": [
                    "set[str]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "SingleAgentEnv.reset": {
            "name": "reset",
            "location": 165,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SingleAgentEnv.step": {
            "name": "step",
            "location": 168,
            "return": [
                "tuple[typing.Union[int,str]]"
            ],
            "arguments": {
                "self": [],
                "action": [
                    "str",
                    "int"
                ]
            }
        },
        "SingleAgentEnv.copy": {
            "name": "copy",
            "location": 173,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "EnvironmentRunner.__init__": {
            "name": "__init__",
            "location": 190,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "env": [
                    "int",
                    "str",
                    "typing.MutableMapping",
                    "None"
                ],
                "num_repetitions": [
                    "int"
                ],
                "max_step": [
                    "float"
                ]
            }
        },
        "EnvironmentRunner.run": {
            "name": "run",
            "location": 197,
            "return": [
                "str",
                "list[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "EnvironmentRunner._run_once": {
            "name": "_run_once",
            "location": 223,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "EnvironmentRunner.copy": {
            "name": "copy",
            "location": 254,
            "return": [
                "EnvironmentRunner"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "nevergrad-main/nevergrad/functions/rl/envs.py": {
        "JamesBond.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "JamesBond.update_with_action": {
            "name": "update_with_action",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "action": [
                    "str",
                    "bytes"
                ]
            }
        },
        "JamesBond.get_state": {
            "name": "get_state",
            "location": 37,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "DoubleOSeven.__init__": {
            "name": "__init__",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "verbose": [
                    "bool"
                ]
            }
        },
        "DoubleOSeven.reset": {
            "name": "reset",
            "location": 67,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DoubleOSeven._make_observations": {
            "name": "_make_observations",
            "location": 76,
            "return": [
                "dict[typing.Text, ]"
            ],
            "arguments": {
                "self": []
            }
        },
        "DoubleOSeven.copy": {
            "name": "copy",
            "location": 80,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DoubleOSeven.step": {
            "name": "step",
            "location": 83,
            "return": [
                "tuple[typing.Union[int,str,dict[typing.Text, int]]]"
            ],
            "arguments": {
                "self": [],
                "action_dict": []
            }
        }
    },
    "nevergrad-main/nevergrad/functions/rl/test_agents.py": {
        "test_play_environment": {
            "name": "test_play_environment",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_play_single_agent_environment": {
            "name": "test_play_single_agent_environment",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_torch_agent": {
            "name": "test_torch_agent",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_torch_agent_function": {
            "name": "test_torch_agent_function",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_partial_double_seven": {
            "name": "test_partial_double_seven",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_torch_optimization": {
            "name": "test_torch_optimization",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "nevergrad-main/nevergrad/functions/rl/test_envs.py": {
        "test_player": {
            "name": "test_player",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_doubleoseven_observations": {
            "name": "test_doubleoseven_observations",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_doubleoseven": {
            "name": "test_doubleoseven",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "base_sequence": [],
                "base_expected": [
                    "str"
                ]
            }
        }
    },
    "nevergrad-main/nevergrad/functions/rl/__init__.py": {},
    "nevergrad-main/nevergrad/functions/rocket/rocket.py": {
        "rocket": {
            "name": "rocket",
            "location": 27,
            "return": [],
            "arguments": {
                "thrust_bias": [
                    "str",
                    "typing.Sequence[int]"
                ]
            }
        },
        "Rocket.__init__": {
            "name": "__init__",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "symmetry": [
                    "int"
                ]
            }
        },
        "rocket.rad": {
            "name": "rad",
            "location": 32,
            "return": [
                "float"
            ],
            "arguments": {
                "ang": []
            }
        },
        "rocket.air_density": {
            "name": "air_density",
            "location": 36,
            "return": [
                "float"
            ],
            "arguments": {
                "alt": []
            }
        },
        "rocket.alt": {
            "name": "alt",
            "location": 49,
            "return": [],
            "arguments": {
                "Ex": [],
                "Ey": [],
                "Ez": []
            }
        },
        "rocket.grav_force": {
            "name": "grav_force",
            "location": 56,
            "return": [
                "tuple[float]"
            ],
            "arguments": {
                "Ex": [],
                "Ey": [],
                "Ez": [],
                "m": []
            }
        },
        "rocket.drag_force": {
            "name": "drag_force",
            "location": 71,
            "return": [
                "tuple[typing.Union[float,int]]"
            ],
            "arguments": {
                "Ex": [],
                "Ey": [],
                "Ez": [],
                "Evx": [],
                "Evy": [],
                "Evz": []
            }
        },
        "rocket.net_force": {
            "name": "net_force",
            "location": 92,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "Ex": [],
                "Ey": [],
                "Ez": [],
                "Evx": [],
                "Evy": [],
                "Evz": [],
                "m": []
            }
        }
    },
    "nevergrad-main/nevergrad/functions/rocket/test_rocket.py": {
        "test_rocket": {
            "name": "test_rocket",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "nevergrad-main/nevergrad/functions/rocket/__init__.py": {},
    "nevergrad-main/nevergrad/functions/stsp/core.py": {
        "STSP.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dimension": [
                    "int"
                ],
                "complex_tsp": [
                    "bool"
                ]
            }
        },
        "STSP._simulate_stsp": {
            "name": "_simulate_stsp",
            "location": 26,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "x": []
            }
        },
        "STSP.make_plots": {
            "name": "make_plots",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "typing.Text"
                ]
            }
        }
    },
    "nevergrad-main/nevergrad/functions/stsp/test_core.py": {
        "test_stsp": {
            "name": "test_stsp",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "complex_tsp": [
                    "str",
                    "float"
                ]
            }
        }
    },
    "nevergrad-main/nevergrad/functions/stsp/__init__.py": {},
    "nevergrad-main/nevergrad/functions/unitcommitment/core.py": {
        "UnitCommitmentProblem.__init__": {
            "name": "__init__",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "problem_name": [
                    "typing.Text"
                ],
                "num_timepoints": [
                    "int"
                ],
                "num_generators": [
                    "int"
                ],
                "penalty_weight": [
                    "int"
                ]
            }
        },
        "UnitCommitmentProblem.unit_commitment_obj_with_penalization": {
            "name": "unit_commitment_obj_with_penalization",
            "location": 63,
            "return": [],
            "arguments": {
                "self": [],
                "operational_output": [
                    "int",
                    "float",
                    "tuple[typing.Union[int,int]]",
                    "str",
                    "None",
                    "list[numpy.ndarray]"
                ],
                "operational_states": [
                    "int"
                ]
            }
        }
    },
    "nevergrad-main/nevergrad/functions/unitcommitment/test_core.py": {
        "test_unit_commitment_p1": {
            "name": "test_unit_commitment_p1",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "nevergrad-main/nevergrad/functions/unitcommitment/__init__.py": {},
    "nevergrad-main/nevergrad/ops/constraints.py": {
        "Constraint.__init__": {
            "name": "__init__",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "func": [
                    "int",
                    "float",
                    "list[list[T]]"
                ],
                "optimizer": [
                    "typing.Text"
                ],
                "budget": [
                    "int"
                ]
            }
        },
        "Constraint._layered_del_value": {
            "name": "_layered_del_value",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Constraint.apply_constraint": {
            "name": "apply_constraint",
            "location": 46,
            "return": [],
            "arguments": {
                "self": [],
                "parameter": [
                    "dict[str, typing.Any]",
                    "bool"
                ]
            }
        },
        "Constraint.function": {
            "name": "function",
            "location": 55,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Constraint.parameter": {
            "name": "parameter",
            "location": 63,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Constraint.stopping_criterion": {
            "name": "stopping_criterion",
            "location": 71,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "optimizer": []
            }
        },
        "Constraint._layered_get_value": {
            "name": "_layered_get_value",
            "location": 80,
            "return": [
                "str",
                "dict[str, typing.Any]",
                "list[str]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "nevergrad-main/nevergrad/ops/test_constraints.py": {
        "function": {
            "name": "function",
            "location": 13,
            "return": [],
            "arguments": {}
        },
        "test_constraint": {
            "name": "test_constraint",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "num": [
                    "int"
                ]
            }
        }
    },
    "nevergrad-main/nevergrad/ops/__init__.py": {},
    "nevergrad-main/nevergrad/optimization/base.py": {
        "_loss": {
            "name": "_loss",
            "location": 32,
            "return": [],
            "arguments": {
                "param": []
            }
        },
        "load": {
            "name": "load",
            "location": 39,
            "return": [],
            "arguments": {
                "cls": [],
                "filepath": []
            }
        },
        "addCompare": {
            "name": "addCompare",
            "location": 686,
            "return": [],
            "arguments": {
                "optimizer": []
            }
        },
        "_constraint_solver": {
            "name": "_constraint_solver",
            "location": 799,
            "return": [],
            "arguments": {
                "parameter": [],
                "budget": []
            }
        },
        "Optimizer.__init__": {
            "name": "__init__",
            "location": 84,
            "return": [],
            "arguments": {
                "self": [],
                "parametrization": [],
                "budget": [],
                "num_workers": []
            }
        },
        "Optimizer._warn": {
            "name": "_warn",
            "location": 143,
            "return": [],
            "arguments": {
                "self": [],
                "msg": [],
                "e": []
            }
        },
        "Optimizer._rng": {
            "name": "_rng",
            "location": 150,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Optimizer.dimension": {
            "name": "dimension",
            "location": 157,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Optimizer.num_objectives": {
            "name": "num_objectives",
            "location": 174,
            "return": [],
            "arguments": {
                "self": [],
                "num": []
            }
        },
        "Optimizer._num_objectives_set_callback": {
            "name": "_num_objectives_set_callback",
            "location": 184,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Optimizer.num_ask": {
            "name": "num_ask",
            "location": 188,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Optimizer.num_tell": {
            "name": "num_tell",
            "location": 193,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Optimizer.num_tell_not_asked": {
            "name": "num_tell_not_asked",
            "location": 198,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Optimizer.pareto_front": {
            "name": "pareto_front",
            "location": 204,
            "return": [],
            "arguments": {
                "self": [],
                "size": [],
                "subset": [],
                "subset_tentatives": []
            }
        },
        "Optimizer.dump": {
            "name": "dump",
            "location": 237,
            "return": [],
            "arguments": {
                "self": [],
                "filepath": []
            }
        },
        "Optimizer.load": {
            "name": "load",
            "location": 244,
            "return": [],
            "arguments": {
                "cls": [],
                "filepath": []
            }
        },
        "Optimizer.__repr__": {
            "name": "__repr__",
            "location": 248,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Optimizer.register_callback": {
            "name": "register_callback",
            "location": 252,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "callback": []
            }
        },
        "Optimizer.remove_all_callbacks": {
            "name": "remove_all_callbacks",
            "location": 266,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Optimizer.suggest": {
            "name": "suggest",
            "location": 270,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Optimizer.tell": {
            "name": "tell",
            "location": 297,
            "return": [],
            "arguments": {
                "self": [],
                "candidate": [],
                "loss": []
            }
        },
        "Optimizer._preprocess_multiobjective": {
            "name": "_preprocess_multiobjective",
            "location": 390,
            "return": [],
            "arguments": {
                "self": [],
                "candidate": []
            }
        },
        "Optimizer._update_archive_and_bests": {
            "name": "_update_archive_and_bests",
            "location": 397,
            "return": [],
            "arguments": {
                "self": [],
                "candidate": [],
                "loss": []
            }
        },
        "Optimizer.ask": {
            "name": "ask",
            "location": 438,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Optimizer.provide_recommendation": {
            "name": "provide_recommendation",
            "location": 509,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Optimizer.recommend": {
            "name": "recommend",
            "location": 520,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Optimizer._internal_tell_not_asked": {
            "name": "_internal_tell_not_asked",
            "location": 542,
            "return": [],
            "arguments": {
                "self": [],
                "candidate": [],
                "loss": []
            }
        },
        "Optimizer._internal_tell_candidate": {
            "name": "_internal_tell_candidate",
            "location": 548,
            "return": [],
            "arguments": {
                "self": [],
                "candidate": [],
                "loss": []
            }
        },
        "Optimizer._internal_ask_candidate": {
            "name": "_internal_ask_candidate",
            "location": 553,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Optimizer._internal_tell": {
            "name": "_internal_tell",
            "location": 557,
            "return": [],
            "arguments": {
                "self": [],
                "x": [],
                "loss": []
            }
        },
        "Optimizer._internal_ask": {
            "name": "_internal_ask",
            "location": 560,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Optimizer._internal_provide_recommendation": {
            "name": "_internal_provide_recommendation",
            "location": 563,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Optimizer.enable_pickling": {
            "name": "enable_pickling",
            "location": 567,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Optimizer.minimize": {
            "name": "minimize",
            "location": 578,
            "return": [],
            "arguments": {
                "self": [],
                "objective_function": [],
                "executor": [],
                "batch_mode": [],
                "verbosity": []
            }
        },
        "Optimizer._info": {
            "name": "_info",
            "location": 680,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "addCompare.compare": {
            "name": "compare",
            "location": 687,
            "return": [],
            "arguments": {
                "self": [],
                "winners": [],
                "losers": []
            }
        },
        "ConfiguredOptimizer.__init__": {
            "name": "__init__",
            "location": 734,
            "return": [],
            "arguments": {
                "self": [],
                "OptimizerClass": [],
                "config": [],
                "as_config": []
            }
        },
        "ConfiguredOptimizer.config": {
            "name": "config",
            "location": 752,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ConfiguredOptimizer.__call__": {
            "name": "__call__",
            "location": 755,
            "return": [],
            "arguments": {
                "self": [],
                "parametrization": [],
                "budget": [],
                "num_workers": []
            }
        },
        "ConfiguredOptimizer.__repr__": {
            "name": "__repr__",
            "location": 778,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ConfiguredOptimizer.set_name": {
            "name": "set_name",
            "location": 781,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "register": []
            }
        },
        "ConfiguredOptimizer.load": {
            "name": "load",
            "location": 788,
            "return": [],
            "arguments": {
                "self": [],
                "filepath": []
            }
        },
        "ConfiguredOptimizer.__eq__": {
            "name": "__eq__",
            "location": 792,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        }
    },
    "nevergrad-main/nevergrad/optimization/callbacks.py": {
        "OptimizationPrinter.__init__": {
            "name": "__init__",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "print_interval_tells": [],
                "print_interval_seconds": [
                    "float"
                ]
            }
        },
        "OptimizationPrinter.__call__": {
            "name": "__call__",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "optimizer": []
            }
        },
        "OptimizationLogger.__init__": {
            "name": "__init__",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "OptimizationLogger.__call__": {
            "name": "__call__",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "optimizer": []
            }
        },
        "ParametersLogger.__init__": {
            "name": "__init__",
            "location": 129,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "filepath": [
                    "str",
                    "bool",
                    "typing.Generator[typing.Union[str,None,None]]"
                ],
                "append": [
                    "bool"
                ],
                "order": [
                    "int"
                ]
            }
        },
        "ParametersLogger.__call__": {
            "name": "__call__",
            "location": 137,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "optimizer": [],
                "candidate": [
                    "typing.Iterable[numpy.ndarray]",
                    "bytes"
                ],
                "loss": [
                    "typing.Iterable[numpy.ndarray]",
                    "bytes"
                ]
            }
        },
        "ParametersLogger.load": {
            "name": "load",
            "location": 180,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ParametersLogger.load_flattened": {
            "name": "load_flattened",
            "location": 189,
            "return": [
                "list[dict[, ]]"
            ],
            "arguments": {
                "self": [],
                "max_list_elements": [
                    "int"
                ]
            }
        },
        "ParametersLogger.to_hiplot_experiment": {
            "name": "to_hiplot_experiment",
            "location": 210,
            "return": [],
            "arguments": {
                "self": [],
                "max_list_elements": [
                    "int"
                ]
            }
        },
        "OptimizerDump.__init__": {
            "name": "__init__",
            "location": 270,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "filepath": [
                    "int",
                    "float"
                ]
            }
        },
        "OptimizerDump.__call__": {
            "name": "__call__",
            "location": 273,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "opt": [
                    "str",
                    "dict[, ]",
                    "int",
                    "typing.NamedTuple",
                    "list[numpy.ndarray]"
                ]
            }
        },
        "ProgressBar.__init__": {
            "name": "__init__",
            "location": 280,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ProgressBar.__call__": {
            "name": "__call__",
            "location": 284,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "optimizer": [
                    "typing.Callable[, ]",
                    "int",
                    "float"
                ]
            }
        },
        "ProgressBar.__getstate__": {
            "name": "__getstate__",
            "location": 300,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "EarlyStopping.__init__": {
            "name": "__init__",
            "location": 336,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "stopping_criterion": [
                    "int",
                    "float"
                ]
            }
        },
        "EarlyStopping.__call__": {
            "name": "__call__",
            "location": 339,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "optimizer": [
                    "typing.Callable[, ]",
                    "int",
                    "float"
                ]
            }
        },
        "EarlyStopping.timer": {
            "name": "timer",
            "location": 346,
            "return": [],
            "arguments": {
                "cls": [
                    "int",
                    "tuple[typing.Union[float,float]]"
                ],
                "max_duration": [
                    "int",
                    "tuple[typing.Union[float,float]]"
                ]
            }
        },
        "_DurationCriterion.__init__": {
            "name": "__init__",
            "location": 352,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "max_duration": [
                    "int",
                    "None",
                    "float"
                ]
            }
        },
        "_DurationCriterion.__call__": {
            "name": "__call__",
            "location": 356,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "optimizer": [
                    "dict[, ]"
                ]
            }
        }
    },
    "nevergrad-main/nevergrad/optimization/differentialevolution.py": {
        "Crossover.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "random_state": [],
                "crossover": []
            }
        },
        "Crossover.apply": {
            "name": "apply",
            "location": 27,
            "return": [],
            "arguments": {
                "self": [],
                "donor": [],
                "individual": []
            }
        },
        "Crossover.variablewise": {
            "name": "variablewise",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "donor": [],
                "individual": []
            }
        },
        "Crossover.onepoint": {
            "name": "onepoint",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "donor": [],
                "individual": []
            }
        },
        "Crossover.twopoints": {
            "name": "twopoints",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "donor": [],
                "individual": []
            }
        },
        "Crossover.rotated_twopoints": {
            "name": "rotated_twopoints",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "donor": [],
                "individual": []
            }
        },
        "_DE.__init__": {
            "name": "__init__",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parametrization": [],
                "budget": [],
                "num_workers": [
                    "int"
                ],
                "config": [
                    "None"
                ]
            }
        },
        "_DE.recommend": {
            "name": "recommend",
            "location": 117,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_DE._internal_ask_candidate": {
            "name": "_internal_ask_candidate",
            "location": 139,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_DE._internal_tell_candidate": {
            "name": "_internal_tell_candidate",
            "location": 195,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "candidate": [],
                "loss": []
            }
        },
        "_DE._internal_tell_not_asked": {
            "name": "_internal_tell_not_asked",
            "location": 215,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "candidate": [],
                "loss": []
            }
        },
        "DifferentialEvolution.__init__": {
            "name": "__init__",
            "location": 287,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "nevergrad-main/nevergrad/optimization/es.py": {
        "_EvolutionStrategy.__init__": {
            "name": "__init__",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parametrization": [
                    "int",
                    "float",
                    "str",
                    "None"
                ],
                "budget": [
                    "int",
                    "float"
                ],
                "num_workers": [
                    "int"
                ]
            }
        },
        "_EvolutionStrategy._internal_ask_candidate": {
            "name": "_internal_ask_candidate",
            "location": 46,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "_EvolutionStrategy._internal_tell_candidate": {
            "name": "_internal_tell_candidate",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "candidate": [
                    "bytearray"
                ],
                "loss": []
            }
        },
        "_EvolutionStrategy._select": {
            "name": "_select",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EvolutionStrategy.__init__": {
            "name": "__init__",
            "location": 112,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "nevergrad-main/nevergrad/optimization/experimentalvariants.py": {},
    "nevergrad-main/nevergrad/optimization/externalbo.py": {
        "_hp_parametrization_to_dict": {
            "name": "_hp_parametrization_to_dict",
            "location": 17,
            "return": [
                "dict[, ]",
                "dict[, list[]]"
            ],
            "arguments": {
                "x": [
                    "dict[, ]",
                    "list[]",
                    "typing.Mapping",
                    "int"
                ]
            }
        },
        "_hp_dict_to_parametrization": {
            "name": "_hp_dict_to_parametrization",
            "location": 39,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "x": []
            }
        },
        "_get_search_space": {
            "name": "_get_search_space",
            "location": 47,
            "return": [
                "dict[typing.Text, dict[str, ]]"
            ],
            "arguments": {
                "param_name": [
                    "str"
                ],
                "param": [
                    "str",
                    "dict[, ]",
                    "typing.Sequence[str]",
                    "None",
                    "list[]"
                ]
            }
        },
        "_HyperOpt.__init__": {
            "name": "__init__",
            "location": 101,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parametrization": [
                    "int",
                    "None"
                ],
                "budget": [
                    "None",
                    "int"
                ],
                "num_workers": [
                    "int"
                ]
            }
        },
        "_HyperOpt._internal_ask_candidate": {
            "name": "_internal_ask_candidate",
            "location": 134,
            "return": [
                "int",
                "list[]",
                "dict[, ]"
            ],
            "arguments": {
                "self": []
            }
        },
        "_HyperOpt._internal_tell_candidate": {
            "name": "_internal_tell_candidate",
            "location": 167,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "candidate": [
                    "str",
                    "dict[str, float]"
                ],
                "loss": [
                    "str"
                ]
            }
        },
        "_HyperOpt._internal_tell_not_asked": {
            "name": "_internal_tell_not_asked",
            "location": 181,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "candidate": [
                    "dict[, ]",
                    "list[]",
                    "str",
                    "None",
                    "bool"
                ],
                "loss": [
                    "str",
                    "bytes",
                    "list[dict[str, typing.Any]]"
                ]
            }
        },
        "ParametrizedHyperOpt.__init__": {
            "name": "__init__",
            "location": 237,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "nevergrad-main/nevergrad/optimization/families.py": {},
    "nevergrad-main/nevergrad/optimization/helpers.py": {
        "TorchOptimizer.__init__": {
            "name": "__init__",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parameters": [
                    "list[]"
                ],
                "cls": [
                    "typing.Type"
                ],
                "bound": [
                    "float"
                ]
            }
        },
        "TorchOptimizer._set_candidate": {
            "name": "_set_candidate",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TorchOptimizer.step": {
            "name": "step",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "loss": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ]
            }
        }
    },
    "nevergrad-main/nevergrad/optimization/metamodel.py": {
        "learn_on_k_best": {
            "name": "learn_on_k_best",
            "location": 17,
            "return": [],
            "arguments": {
                "archive": [],
                "k": [
                    "int"
                ]
            }
        }
    },
    "nevergrad-main/nevergrad/optimization/mutations.py": {
        "Mutator.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "random_state": [
                    "bool",
                    "None"
                ]
            }
        },
        "Mutator.significantly_mutate": {
            "name": "significantly_mutate",
            "location": 19,
            "return": [
                "dict[typing.Any, tuple[typing.Union[typing.Any,typing.Any]]]",
                "int",
                "dict[, ]",
                "list[]"
            ],
            "arguments": {
                "self": [],
                "v": [
                    "int",
                    "dict[, ]",
                    "list[]"
                ],
                "arity": [
                    "int"
                ]
            }
        },
        "Mutator.doerr_discrete_mutation": {
            "name": "doerr_discrete_mutation",
            "location": 30,
            "return": [],
            "arguments": {
                "self": [],
                "parent": [],
                "arity": [
                    "int"
                ]
            }
        },
        "Mutator.doubledoerr_discrete_mutation": {
            "name": "doubledoerr_discrete_mutation",
            "location": 37,
            "return": [],
            "arguments": {
                "self": [],
                "parent": [],
                "max_ratio": [],
                "arity": [
                    "int"
                ]
            }
        },
        "Mutator.rls_mutation": {
            "name": "rls_mutation",
            "location": 59,
            "return": [],
            "arguments": {
                "self": [],
                "parent": [],
                "arity": [
                    "int"
                ]
            }
        },
        "Mutator.portfolio_discrete_mutation": {
            "name": "portfolio_discrete_mutation",
            "location": 77,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": [],
                "parent": [],
                "intensity": [
                    "None",
                    "int",
                    "typing.Callable[str, int]"
                ],
                "arity": [
                    "int"
                ]
            }
        },
        "Mutator.coordinatewise_mutation": {
            "name": "coordinatewise_mutation",
            "location": 96,
            "return": [],
            "arguments": {
                "self": [],
                "parent": [],
                "velocity": [
                    "int",
                    "dict[str, typing.Any]",
                    "bytes"
                ],
                "boolean_vector": [
                    "float",
                    "dict[, ]",
                    "str"
                ],
                "arity": [
                    "int",
                    "str",
                    "dict[, ]"
                ]
            }
        },
        "Mutator.discrete_mutation": {
            "name": "discrete_mutation",
            "location": 117,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": [],
                "parent": [],
                "arity": [
                    "int"
                ]
            }
        },
        "Mutator.crossover": {
            "name": "crossover",
            "location": 125,
            "return": [],
            "arguments": {
                "self": [],
                "parent": [],
                "donor": [
                    "str",
                    "list[]"
                ],
                "rotation": [
                    "bool"
                ]
            }
        },
        "Mutator.get_roulette": {
            "name": "get_roulette",
            "location": 134,
            "return": [],
            "arguments": {
                "self": [],
                "archive": [],
                "num": [
                    "None",
                    "int",
                    "float"
                ]
            }
        }
    },
    "nevergrad-main/nevergrad/optimization/oneshot.py": {
        "convex_limit": {
            "name": "convex_limit",
            "location": 20,
            "return": [
                "int"
            ],
            "arguments": {
                "struct_points": []
            }
        },
        "hull_center": {
            "name": "hull_center",
            "location": 48,
            "return": [
                "float"
            ],
            "arguments": {
                "points": [],
                "k": [
                    "int",
                    "float",
                    "typing.Iterable[T]"
                ]
            }
        },
        "avg_of_k_best": {
            "name": "avg_of_k_best",
            "location": 59,
            "return": [],
            "arguments": {
                "archive": [],
                "method": [
                    "typing.Text"
                ]
            }
        },
        "OneShotOptimizer._internal_ask_candidate": {
            "name": "_internal_ask_candidate",
            "location": 101,
            "return": [
                "int",
                "dict[, ]",
                "float",
                "list[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "_RandomSearch.__init__": {
            "name": "__init__",
            "location": 124,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parametrization": [
                    "int",
                    "None"
                ],
                "budget": [
                    "None",
                    "int"
                ],
                "num_workers": [
                    "int"
                ],
                "middle_point": [
                    "bool"
                ],
                "stupid": [
                    "bool"
                ],
                "opposition_mode": [
                    "None",
                    "bool",
                    "float",
                    "str"
                ],
                "sampler": [
                    "typing.Text"
                ],
                "scale": [
                    "float"
                ],
                "recommendation_rule": [
                    "typing.Text"
                ]
            }
        },
        "_RandomSearch._internal_ask": {
            "name": "_internal_ask",
            "location": 148,
            "return": [
                "float",
                "int",
                "str",
                "list[]",
                "typing.Iterator"
            ],
            "arguments": {
                "self": []
            }
        },
        "_RandomSearch._internal_provide_recommendation": {
            "name": "_internal_provide_recommendation",
            "location": 181,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RandomSearchMaker.__init__": {
            "name": "__init__",
            "location": 226,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "_SamplingSearch.__init__": {
            "name": "__init__",
            "location": 249,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parametrization": [
                    "int",
                    "None"
                ],
                "budget": [
                    "None",
                    "int"
                ],
                "num_workers": [
                    "int"
                ],
                "sampler": [
                    "typing.Text"
                ],
                "scrambled": [
                    "bool"
                ],
                "middle_point": [
                    "bool"
                ],
                "opposition_mode": [
                    "None",
                    "int",
                    "str",
                    "list[list[int]]"
                ],
                "cauchy": [
                    "bool"
                ],
                "autorescale": [
                    "bool"
                ],
                "scale": [
                    "float"
                ],
                "rescaled": [
                    "bool"
                ],
                "recommendation_rule": [
                    "typing.Text"
                ]
            }
        },
        "_SamplingSearch.sampler": {
            "name": "sampler",
            "location": 282,
            "return": [
                "int",
                "str",
                "float",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "_SamplingSearch._internal_ask": {
            "name": "_internal_ask",
            "location": 303,
            "return": [
                "float",
                "str",
                "dict[str, list[typing.Any]]",
                "list[]",
                "dict[typing.Any, str]",
                "list[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "_SamplingSearch._internal_provide_recommendation": {
            "name": "_internal_provide_recommendation",
            "location": 334,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SamplingSearch.__init__": {
            "name": "__init__",
            "location": 383,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "nevergrad-main/nevergrad/optimization/optimizerlib.py": {
        "smooth_copy": {
            "name": "smooth_copy",
            "location": 50,
            "return": [],
            "arguments": {
                "array": [],
                "possible_radii": [
                    "None",
                    "int",
                    "str",
                    "tuple[typing.Union[str,str]]",
                    "float"
                ]
            }
        },
        "_OnePlusOne.__init__": {
            "name": "__init__",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parametrization": [
                    "int",
                    "None"
                ],
                "budget": [
                    "None",
                    "int"
                ],
                "num_workers": [
                    "int"
                ]
            }
        },
        "_OnePlusOne._internal_ask_candidate": {
            "name": "_internal_ask_candidate",
            "location": 171,
            "return": [
                "int",
                "list[str]",
                "typing.Generator[typing.Union[typing.Any,None,None]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "_OnePlusOne._internal_tell": {
            "name": "_internal_tell",
            "location": 301,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "x": [],
                "loss": [
                    "int"
                ]
            }
        },
        "ParametrizedOnePlusOne.__init__": {
            "name": "__init__",
            "location": 401,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "_CMA.__init__": {
            "name": "__init__",
            "location": 509,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parametrization": [
                    "float",
                    "None",
                    "dict[, ]",
                    "int",
                    "str"
                ],
                "budget": [
                    "None",
                    "int"
                ],
                "num_workers": [
                    "int"
                ],
                "config": [
                    "None",
                    "str",
                    "bool",
                    "typing.TextIO"
                ]
            }
        },
        "_CMA.es": {
            "name": "es",
            "location": 533,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_CMA._internal_ask_candidate": {
            "name": "_internal_ask_candidate",
            "location": 573,
            "return": [
                "dict[str, str]",
                "dict[str, int]",
                "typing.DefaultDict",
                "dict[str, typing.Union[int,str]]",
                "dict[str, float]",
                "list[int]",
                "list[str]",
                "list[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "_CMA._internal_tell_candidate": {
            "name": "_internal_tell_candidate",
            "location": 581,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "candidate": [
                    "bytes"
                ],
                "loss": [
                    "list[str]",
                    "int",
                    "None"
                ]
            }
        },
        "_CMA._internal_provide_recommendation": {
            "name": "_internal_provide_recommendation",
            "location": 599,
            "return": [
                "tuple[typing.Union[str,str]]",
                "str",
                "dict[str, dict[int, str]]",
                "frozenset",
                "dict[tuple[typing.Union[str,str]], str]",
                "dict[str, int]",
                "list[tuple[typing.Union[typing.Any,typing.Any]]]",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ParametrizedCMA.__init__": {
            "name": "__init__",
            "location": 654,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ChoiceBase.__init__": {
            "name": "__init__",
            "location": 687,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parametrization": [
                    "int",
                    "None"
                ],
                "budget": [
                    "None",
                    "int"
                ],
                "num_workers": [
                    "int"
                ]
            }
        },
        "ChoiceBase.optim": {
            "name": "optim",
            "location": 718,
            "return": [
                "int",
                "dict[typing.Any, int]",
                "list[]",
                "list[str]",
                "dict[typing.Any, str]",
                "dict[str, int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ChoiceBase._select_optimizer_cls": {
            "name": "_select_optimizer_cls",
            "location": 728,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ChoiceBase._internal_ask_candidate": {
            "name": "_internal_ask_candidate",
            "location": 731,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ChoiceBase._internal_tell_candidate": {
            "name": "_internal_tell_candidate",
            "location": 734,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "candidate": [
                    "str",
                    "dict[str, float]"
                ],
                "loss": [
                    "str",
                    "dict[str, float]"
                ]
            }
        },
        "ChoiceBase.recommend": {
            "name": "recommend",
            "location": 737,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ChoiceBase._internal_tell_not_asked": {
            "name": "_internal_tell_not_asked",
            "location": 740,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "candidate": [
                    "int",
                    "typing.Type",
                    "str",
                    "float"
                ],
                "loss": [
                    "int",
                    "typing.Type",
                    "str",
                    "float"
                ]
            }
        },
        "ChoiceBase._info": {
            "name": "_info",
            "location": 743,
            "return": [
                "dict[typing.Text, ]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ChoiceBase.enable_pickling": {
            "name": "enable_pickling",
            "location": 748,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CMA._select_optimizer_cls": {
            "name": "_select_optimizer_cls",
            "location": 774,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_PopulationSizeController.__init__": {
            "name": "__init__",
            "location": 801,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "llambda": [
                    "int",
                    "str"
                ],
                "mu": [
                    "float",
                    "tuple[typing.Union[float,float,float,float]]",
                    "bytes",
                    "list[typing.Any]",
                    "None"
                ],
                "dimension": [
                    "float",
                    "tuple[typing.Union[float,float,float,float]]",
                    "bytes",
                    "list[typing.Any]",
                    "None"
                ],
                "num_workers": [
                    "int"
                ]
            }
        },
        "_PopulationSizeController.add_value": {
            "name": "add_value",
            "location": 809,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "loss": [
                    "typing.Callable[, ]",
                    "str",
                    "None"
                ]
            }
        },
        "EDA.__init__": {
            "name": "__init__",
            "location": 844,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parametrization": [
                    "int"
                ],
                "budget": [
                    "None",
                    "int"
                ],
                "num_workers": [
                    "int"
                ]
            }
        },
        "EDA._internal_provide_recommendation": {
            "name": "_internal_provide_recommendation",
            "location": 861,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "EDA._internal_ask_candidate": {
            "name": "_internal_ask_candidate",
            "location": 866,
            "return": [
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "EDA._internal_tell_candidate": {
            "name": "_internal_tell_candidate",
            "location": 882,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "candidate": [
                    "typing.Callable[c, typing.Any]",
                    "list[dict[, ]]",
                    "str",
                    "dict[str, typing.Any]"
                ],
                "loss": [
                    "dict[str, str]",
                    "typing.ItemsView",
                    "tuple[]",
                    "None"
                ]
            }
        },
        "EDA._internal_tell_not_asked": {
            "name": "_internal_tell_not_asked",
            "location": 905,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "candidate": [
                    "list[N]"
                ],
                "loss": [
                    "list[N]"
                ]
            }
        },
        "_TBPSA.__init__": {
            "name": "__init__",
            "location": 933,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parametrization": [
                    "int",
                    "None",
                    "list[int]"
                ],
                "budget": [
                    "None",
                    "int"
                ],
                "num_workers": [
                    "int"
                ],
                "naive": [
                    "bool"
                ],
                "initial_popsize": [
                    "None",
                    "int",
                    "str",
                    "list[str]"
                ]
            }
        },
        "_TBPSA.recommend": {
            "name": "recommend",
            "location": 956,
            "return": [
                "int",
                "dict[, ]",
                "float",
                "dict[str, str]",
                "typing.Generator[typing.Union[typing.Any,None,None]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "_TBPSA._internal_ask_candidate": {
            "name": "_internal_ask_candidate",
            "location": 966,
            "return": [
                "typing.Type",
                "str",
                "int",
                "list[int]",
                "list[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "_TBPSA._internal_tell_candidate": {
            "name": "_internal_tell_candidate",
            "location": 976,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "candidate": [
                    "typing.Callable[c, typing.Any]",
                    "list[dict[, ]]",
                    "str",
                    "dict[str, typing.Any]"
                ],
                "loss": [
                    "dict[str, str]",
                    "typing.ItemsView",
                    "tuple[]",
                    "None"
                ]
            }
        },
        "_TBPSA._internal_tell_not_asked": {
            "name": "_internal_tell_not_asked",
            "location": 994,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "candidate": [],
                "loss": [
                    "str",
                    "bytes",
                    "list[dict[str, typing.Any]]"
                ]
            }
        },
        "ParametrizedTBPSA.__init__": {
            "name": "__init__",
            "location": 1024,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "NoisyBandit._internal_ask": {
            "name": "_internal_ask",
            "location": 1045,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_PSO.__init__": {
            "name": "__init__",
            "location": 1058,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parametrization": [
                    "int",
                    "str"
                ],
                "budget": [
                    "int"
                ],
                "num_workers": [
                    "int"
                ],
                "config": [
                    "None",
                    "str",
                    "bool",
                    "typing.TextIO"
                ]
            }
        },
        "_PSO._internal_ask_candidate": {
            "name": "_internal_ask_candidate",
            "location": 1083,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "_PSO._get_boxed_data": {
            "name": "_get_boxed_data",
            "location": 1099,
            "return": [
                "dict[, ]",
                "str",
                "dict[str, typing.Union[typing.Any,typing.Any,typing.Any,typing.Any]]",
                "dict[str, int]",
                "dict[str, str]"
            ],
            "arguments": {
                "self": [],
                "particle": []
            }
        },
        "_PSO._spawn_mutated_particle": {
            "name": "_spawn_mutated_particle",
            "location": 1107,
            "return": [],
            "arguments": {
                "self": [],
                "particle": [
                    "int",
                    "str"
                ]
            }
        },
        "_PSO._internal_tell_candidate": {
            "name": "_internal_tell_candidate",
            "location": 1127,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "candidate": [],
                "loss": [
                    "int"
                ]
            }
        },
        "_PSO._internal_tell_not_asked": {
            "name": "_internal_tell_not_asked",
            "location": 1139,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "candidate": [
                    "typing.Callable[, ]",
                    "int"
                ],
                "loss": [
                    "int",
                    "typing.Type",
                    "str",
                    "float"
                ]
            }
        },
        "ConfPSO.__init__": {
            "name": "__init__",
            "location": 1188,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "transform": [
                    "typing.Text"
                ],
                "popsize": [
                    "None",
                    "int",
                    "float"
                ],
                "omega": [
                    "float"
                ],
                "phip": [],
                "phig": []
            }
        },
        "SPSA.__init__": {
            "name": "__init__",
            "location": 1226,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parametrization": [
                    "int",
                    "None"
                ],
                "budget": [
                    "None",
                    "int"
                ],
                "num_workers": [
                    "int"
                ]
            }
        },
        "SPSA._ck": {
            "name": "_ck",
            "location": 1250,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "k": [
                    "float",
                    "int"
                ]
            }
        },
        "SPSA._ak": {
            "name": "_ak",
            "location": 1254,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "k": [
                    "int",
                    "float"
                ]
            }
        },
        "SPSA._internal_ask": {
            "name": "_internal_ask",
            "location": 1258,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SPSA._internal_tell": {
            "name": "_internal_tell",
            "location": 1269,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "bool",
                    "float",
                    "typing.Iterable[typing.Iterable[float]]",
                    "str",
                    "bytes"
                ],
                "loss": [
                    "bool"
                ]
            }
        },
        "SPSA._internal_provide_recommendation": {
            "name": "_internal_provide_recommendation",
            "location": 1275,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_Rescaled.__init__": {
            "name": "__init__",
            "location": 1282,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parametrization": [
                    "int",
                    "None"
                ],
                "budget": [
                    "None",
                    "int"
                ],
                "num_workers": [
                    "int"
                ],
                "base_optimizer": [
                    "CMA"
                ],
                "scale": [
                    "None",
                    "int",
                    "str",
                    "list[str]",
                    "typing.Mapping"
                ]
            }
        },
        "_Rescaled.rescale_candidate": {
            "name": "rescale_candidate",
            "location": 1299,
            "return": [],
            "arguments": {
                "self": [],
                "candidate": [
                    "bool"
                ],
                "inverse": [
                    "bool"
                ]
            }
        },
        "_Rescaled._internal_ask_candidate": {
            "name": "_internal_ask_candidate",
            "location": 1304,
            "return": [
                "str",
                "list[str]",
                "dict[int, dict[str, str]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "_Rescaled._internal_tell_candidate": {
            "name": "_internal_tell_candidate",
            "location": 1311,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "candidate": [
                    "int"
                ],
                "loss": [
                    "int"
                ]
            }
        },
        "_Rescaled._internal_tell_not_asked": {
            "name": "_internal_tell_not_asked",
            "location": 1314,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "candidate": [
                    "dict[, ]",
                    "typing.Callable[, ]",
                    "str"
                ],
                "loss": [
                    "int",
                    "typing.Type",
                    "str",
                    "float"
                ]
            }
        },
        "_Rescaled.enable_pickling": {
            "name": "enable_pickling",
            "location": 1318,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Rescaled.__init__": {
            "name": "__init__",
            "location": 1334,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SplitOptimizer.__init__": {
            "name": "__init__",
            "location": 1349,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parametrization": [
                    "int",
                    "str",
                    "float"
                ],
                "budget": [
                    "None",
                    "int",
                    "dict[, ]"
                ],
                "num_workers": [
                    "int"
                ],
                "config": [
                    "None",
                    "bool",
                    "str",
                    "typing.IO"
                ]
            }
        },
        "SplitOptimizer._internal_ask_candidate": {
            "name": "_internal_ask_candidate",
            "location": 1411,
            "return": [
                "int",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "SplitOptimizer._internal_tell_candidate": {
            "name": "_internal_tell_candidate",
            "location": 1431,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "candidate": [
                    "dict[str, typing.Any]",
                    "int",
                    "None",
                    "dict[, ]",
                    "str",
                    "bytes"
                ],
                "loss": [
                    "str",
                    "dict[str, float]"
                ]
            }
        },
        "SplitOptimizer._internal_tell_not_asked": {
            "name": "_internal_tell_not_asked",
            "location": 1436,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "candidate": [],
                "loss": [
                    "typing.Sequence[str]",
                    "bool",
                    "str",
                    "dict[str, str]",
                    "tuple[typing.Union[int,int]]"
                ]
            }
        },
        "SplitOptimizer._info": {
            "name": "_info",
            "location": 1445,
            "return": [
                "dict[typing.Text, str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConfSplitOptimizer.__init__": {
            "name": "__init__",
            "location": 1492,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "NoisySplit.__init__": {
            "name": "__init__",
            "location": 1527,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConfPortfolio.__init__": {
            "name": "__init__",
            "location": 1563,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Portfolio.__init__": {
            "name": "__init__",
            "location": 1578,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parametrization": [
                    "int",
                    "None"
                ],
                "budget": [
                    "int"
                ],
                "num_workers": [
                    "int"
                ],
                "config": [
                    "None",
                    "int",
                    "str",
                    "typing.Type"
                ]
            }
        },
        "Portfolio._internal_ask_candidate": {
            "name": "_internal_ask_candidate",
            "location": 1628,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Portfolio._internal_tell_candidate": {
            "name": "_internal_tell_candidate",
            "location": 1658,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "candidate": [
                    "str",
                    "dict[str, float]"
                ],
                "loss": [
                    "str",
                    "dict[str, float]"
                ]
            }
        },
        "Portfolio.enable_pickling": {
            "name": "enable_pickling",
            "location": 1671,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "_MetaModel.__init__": {
            "name": "__init__",
            "location": 1698,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parametrization": [
                    "int",
                    "None"
                ],
                "budget": [
                    "None",
                    "int"
                ],
                "num_workers": [
                    "int"
                ]
            }
        },
        "_MetaModel._internal_ask_candidate": {
            "name": "_internal_ask_candidate",
            "location": 1717,
            "return": [
                "int",
                "float",
                "dict[, ]"
            ],
            "arguments": {
                "self": []
            }
        },
        "_MetaModel._internal_tell_candidate": {
            "name": "_internal_tell_candidate",
            "location": 1731,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "candidate": [
                    "str",
                    "dict[str, float]"
                ],
                "loss": [
                    "str",
                    "dict[str, float]"
                ]
            }
        },
        "_MetaModel._internal_provide_recommendation": {
            "name": "_internal_provide_recommendation",
            "location": 1734,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_MetaModel.enable_pickling": {
            "name": "enable_pickling",
            "location": 1737,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ParametrizedMetaModel.__init__": {
            "name": "__init__",
            "location": 1756,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SQPCMA.__init__": {
            "name": "__init__",
            "location": 1776,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parametrization": [
                    "int"
                ],
                "budget": [
                    "None",
                    "int"
                ],
                "num_workers": [
                    "int"
                ]
            }
        },
        "MultiDiscrete.__init__": {
            "name": "__init__",
            "location": 1793,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parametrization": [
                    "int",
                    "list[int]"
                ],
                "budget": [
                    "int"
                ],
                "num_workers": [
                    "int"
                ]
            }
        },
        "CMandAS2.__init__": {
            "name": "__init__",
            "location": 1814,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parametrization": [
                    "int"
                ],
                "budget": [
                    "int"
                ],
                "num_workers": [
                    "int"
                ]
            }
        },
        "CMandAS3.__init__": {
            "name": "__init__",
            "location": 1842,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parametrization": [
                    "int"
                ],
                "budget": [
                    "int"
                ],
                "num_workers": [
                    "int"
                ]
            }
        },
        "CM.__init__": {
            "name": "__init__",
            "location": 1871,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parametrization": [
                    "int"
                ],
                "budget": [
                    "int",
                    "float"
                ],
                "num_workers": [
                    "int"
                ]
            }
        },
        "_FakeFunction.__init__": {
            "name": "__init__",
            "location": 1898,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "num_digits": [
                    "int",
                    "None"
                ]
            }
        },
        "_FakeFunction.key": {
            "name": "key",
            "location": 1902,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": [],
                "num": [
                    "int",
                    "float"
                ]
            }
        },
        "_FakeFunction.register": {
            "name": "register",
            "location": 1908,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "list[]"
                ],
                "loss": [
                    "list[]"
                ]
            }
        },
        "_FakeFunction.__call__": {
            "name": "__call__",
            "location": 1913,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_BO.__init__": {
            "name": "__init__",
            "location": 1924,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parametrization": [
                    "int",
                    "None"
                ],
                "budget": [
                    "None",
                    "int"
                ],
                "num_workers": [
                    "int"
                ]
            }
        },
        "_BO.bo": {
            "name": "bo",
            "location": 1971,
            "return": [
                "int",
                "dict[int, typing.Any]",
                "list[tuple[typing.Union[str,typing.Any]]]",
                "str",
                "BayesianOptimization"
            ],
            "arguments": {
                "self": []
            }
        },
        "_BO._internal_ask_candidate": {
            "name": "_internal_ask_candidate",
            "location": 1998,
            "return": [
                "int",
                "dict[, ]",
                "dict[str, typing.Any]",
                "list[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "_BO._internal_tell_candidate": {
            "name": "_internal_tell_candidate",
            "location": 2010,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "candidate": [
                    "int",
                    "list[str]"
                ],
                "loss": [
                    "int"
                ]
            }
        },
        "_BO._internal_provide_recommendation": {
            "name": "_internal_provide_recommendation",
            "location": 2023,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ParametrizedBO.__init__": {
            "name": "__init__",
            "location": 2057,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "_BayesOptim.__init__": {
            "name": "__init__",
            "location": 2078,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parametrization": [
                    "int",
                    "None"
                ],
                "budget": [
                    "int"
                ],
                "num_workers": [
                    "int"
                ]
            }
        },
        "_BayesOptim._internal_ask_candidate": {
            "name": "_internal_ask_candidate",
            "location": 2136,
            "return": [
                "list[str]",
                "dict[str, list[typing.Any]]",
                "set[int]",
                "list[tuple[typing.Union[typing.Any,typing.Any,typing.Any]]]",
                "str",
                "list[]",
                "dict[, ]"
            ],
            "arguments": {
                "self": []
            }
        },
        "_BayesOptim._internal_tell_candidate": {
            "name": "_internal_tell_candidate",
            "location": 2148,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "candidate": [
                    "list[]"
                ],
                "loss": [
                    "list[]",
                    "str"
                ]
            }
        },
        "_BayesOptim._internal_tell_not_asked": {
            "name": "_internal_tell_not_asked",
            "location": 2161,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "candidate": [
                    "list[N]"
                ],
                "loss": [
                    "list[N]"
                ]
            }
        },
        "BayesOptim.__init__": {
            "name": "__init__",
            "location": 2199,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "_Chain.__init__": {
            "name": "__init__",
            "location": 2219,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parametrization": [
                    "int",
                    "None"
                ],
                "budget": [
                    "None",
                    "int"
                ],
                "num_workers": [
                    "int"
                ]
            }
        },
        "_Chain._internal_ask_candidate": {
            "name": "_internal_ask_candidate",
            "location": 2258,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_Chain._internal_tell_candidate": {
            "name": "_internal_tell_candidate",
            "location": 2269,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "candidate": [
                    "str",
                    "dict[str, float]"
                ],
                "loss": [
                    "str",
                    "dict[str, float]"
                ]
            }
        },
        "_Chain.enable_pickling": {
            "name": "enable_pickling",
            "location": 2278,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Chaining.__init__": {
            "name": "__init__",
            "location": 2298,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "optimizers": [
                    "int",
                    "dict[str, typing.Any]",
                    "str"
                ],
                "budgets": [
                    "int",
                    "dict[str, typing.Any]",
                    "str"
                ]
            }
        },
        "cGA.__init__": {
            "name": "__init__",
            "location": 2344,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parametrization": [
                    "int",
                    "None"
                ],
                "budget": [
                    "None",
                    "int"
                ],
                "num_workers": [
                    "int"
                ],
                "arity": [
                    "None",
                    "int",
                    "list[int]",
                    "float"
                ]
            }
        },
        "cGA._internal_ask_candidate": {
            "name": "_internal_ask_candidate",
            "location": 2369,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "cGA._internal_tell_candidate": {
            "name": "_internal_tell_candidate",
            "location": 2377,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "candidate": [
                    "bool",
                    "bytes"
                ],
                "loss": [
                    "str",
                    "bool"
                ]
            }
        },
        "_EMNA.__init__": {
            "name": "__init__",
            "location": 2402,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parametrization": [
                    "bool",
                    "list[int]",
                    "None"
                ],
                "budget": [
                    "int"
                ],
                "num_workers": [
                    "int"
                ],
                "isotropic": [
                    "bool"
                ],
                "naive": [
                    "bool"
                ],
                "population_size_adaptation": [
                    "bool"
                ],
                "initial_popsize": [
                    "None",
                    "int",
                    "list[str]",
                    "str"
                ]
            }
        },
        "_EMNA.recommend": {
            "name": "recommend",
            "location": 2445,
            "return": [
                "int",
                "dict[, ]",
                "float",
                "dict[str, str]",
                "typing.Generator[typing.Union[typing.Any,None,None]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "_EMNA._internal_ask_candidate": {
            "name": "_internal_ask_candidate",
            "location": 2455,
            "return": [
                "typing.Type",
                "str",
                "int",
                "list[int]",
                "list[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "_EMNA._internal_tell_candidate": {
            "name": "_internal_tell_candidate",
            "location": 2470,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "candidate": [
                    "typing.Callable[c, typing.Any]",
                    "list[dict[, ]]",
                    "str",
                    "dict[str, typing.Any]"
                ],
                "loss": [
                    "dict[str, str]",
                    "typing.ItemsView",
                    "tuple[]",
                    "None"
                ]
            }
        },
        "_EMNA._internal_tell_not_asked": {
            "name": "_internal_tell_not_asked",
            "location": 2528,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "candidate": [
                    "list[N]"
                ],
                "loss": [
                    "list[N]"
                ]
            }
        },
        "EMNA.__init__": {
            "name": "__init__",
            "location": 2553,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "NGOptBase.__init__": {
            "name": "__init__",
            "location": 2574,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parametrization": [
                    "int",
                    "None"
                ],
                "budget": [
                    "None",
                    "int"
                ],
                "num_workers": [
                    "int"
                ]
            }
        },
        "NGOptBase.optim": {
            "name": "optim",
            "location": 2605,
            "return": [
                "int",
                "dict[typing.Any, int]",
                "list[]",
                "list[str]",
                "dict[typing.Any, str]",
                "dict[str, int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "NGOptBase._select_optimizer_cls": {
            "name": "_select_optimizer_cls",
            "location": 2612,
            "return": [
                "CMA"
            ],
            "arguments": {
                "self": []
            }
        },
        "NGOptBase._internal_ask_candidate": {
            "name": "_internal_ask_candidate",
            "location": 2652,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NGOptBase._internal_tell_candidate": {
            "name": "_internal_tell_candidate",
            "location": 2655,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "candidate": [
                    "str",
                    "dict[str, float]"
                ],
                "loss": [
                    "str",
                    "dict[str, float]"
                ]
            }
        },
        "NGOptBase.recommend": {
            "name": "recommend",
            "location": 2658,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NGOptBase._internal_tell_not_asked": {
            "name": "_internal_tell_not_asked",
            "location": 2661,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "candidate": [
                    "int",
                    "typing.Type",
                    "str",
                    "float"
                ],
                "loss": [
                    "int",
                    "typing.Type",
                    "str",
                    "float"
                ]
            }
        },
        "NGOptBase._info": {
            "name": "_info",
            "location": 2664,
            "return": [
                "dict[typing.Text, ]"
            ],
            "arguments": {
                "self": []
            }
        },
        "NGOptBase.enable_pickling": {
            "name": "enable_pickling",
            "location": 2669,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Shiwa._select_optimizer_cls": {
            "name": "_select_optimizer_cls",
            "location": 2677,
            "return": [
                "NGOptBase",
                "CMA"
            ],
            "arguments": {
                "self": []
            }
        },
        "NGOpt4._select_optimizer_cls": {
            "name": "_select_optimizer_cls",
            "location": 2696,
            "return": [
                "CMA",
                "Chaining",
                "ConfSplitOptimizer",
                "CMandAS2",
                "ParametrizedOnePlusOne"
            ],
            "arguments": {
                "self": []
            }
        },
        "NGOpt8._select_optimizer_cls": {
            "name": "_select_optimizer_cls",
            "location": 2785,
            "return": [
                "dict[str, list[str]]",
                "int",
                "str",
                "None",
                "CMandAS2",
                "ParametrizedOnePlusOne"
            ],
            "arguments": {
                "self": []
            }
        },
        "NGOpt8._num_objectives_set_callback": {
            "name": "_num_objectives_set_callback",
            "location": 2818,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "NGOpt10._select_optimizer_cls": {
            "name": "_select_optimizer_cls",
            "location": 2828,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NGOpt10.recommend": {
            "name": "recommend",
            "location": 2834,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NGOpt12._select_optimizer_cls": {
            "name": "_select_optimizer_cls",
            "location": 2839,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NGOpt13._select_optimizer_cls": {
            "name": "_select_optimizer_cls",
            "location": 2867,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NGOpt14._select_optimizer_cls": {
            "name": "_select_optimizer_cls",
            "location": 2881,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NGOpt15._select_optimizer_cls": {
            "name": "_select_optimizer_cls",
            "location": 2890,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NGOpt16._select_optimizer_cls": {
            "name": "_select_optimizer_cls",
            "location": 2908,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NGOpt21._select_optimizer_cls": {
            "name": "_select_optimizer_cls",
            "location": 2924,
            "return": [
                "ConfPortfolio"
            ],
            "arguments": {
                "self": []
            }
        },
        "NGOpt36._select_optimizer_cls": {
            "name": "_select_optimizer_cls",
            "location": 2943,
            "return": [
                "ConfPortfolio"
            ],
            "arguments": {
                "self": []
            }
        },
        "NGOpt38._select_optimizer_cls": {
            "name": "_select_optimizer_cls",
            "location": 2965,
            "return": [
                "NGOpt36",
                "NGOpt21",
                "ConfPortfolio",
                "NGOpt16",
                "NGOpt8",
                "NGOpt15"
            ],
            "arguments": {
                "self": []
            }
        },
        "NGOpt39._select_optimizer_cls": {
            "name": "_select_optimizer_cls",
            "location": 3010,
            "return": [
                "Chaining",
                "NGOpt16",
                "NGOpt36",
                "NGOpt21",
                "NGOpt8",
                "ParametrizedMetaModel",
                "NGOpt15"
            ],
            "arguments": {
                "self": []
            }
        },
        "_MSR.__init__": {
            "name": "__init__",
            "location": 3102,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parametrization": [
                    "int",
                    "None"
                ],
                "budget": [
                    "None",
                    "int"
                ],
                "num_workers": [
                    "int"
                ],
                "num_single_runs": [
                    "int"
                ],
                "base_optimizer": [
                    "NGOpt"
                ]
            }
        },
        "_MSR._internal_tell_candidate": {
            "name": "_internal_tell_candidate",
            "location": 3118,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "candidate": [
                    "str",
                    "dict[str, float]"
                ],
                "loss": [
                    "str",
                    "dict[str, float]"
                ]
            }
        },
        "MultipleSingleRuns.__init__": {
            "name": "__init__",
            "location": 3137,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "nevergrad-main/nevergrad/optimization/recaster.py": {
        "_MessagingThread.__init__": {
            "name": "__init__",
            "location": 50,
            "return": [],
            "arguments": {
                "self": [],
                "caller": []
            }
        },
        "_MessagingThread.run": {
            "name": "run",
            "location": 61,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_MessagingThread._fake_callable": {
            "name": "_fake_callable",
            "location": 75,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_MessagingThread.stop": {
            "name": "stop",
            "location": 89,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MessagingThread.__init__": {
            "name": "__init__",
            "location": 97,
            "return": [],
            "arguments": {
                "self": [],
                "caller": []
            }
        },
        "MessagingThread.is_alive": {
            "name": "is_alive",
            "location": 101,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MessagingThread.output": {
            "name": "output",
            "location": 105,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MessagingThread.error": {
            "name": "error",
            "location": 109,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MessagingThread.messages_tell": {
            "name": "messages_tell",
            "location": 113,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MessagingThread.messages_ask": {
            "name": "messages_ask",
            "location": 117,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MessagingThread.stop": {
            "name": "stop",
            "location": 120,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MessagingThread.__del__": {
            "name": "__del__",
            "location": 123,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RecastOptimizer.__init__": {
            "name": "__init__",
            "location": 152,
            "return": [],
            "arguments": {
                "self": [],
                "parametrization": [],
                "budget": [],
                "num_workers": []
            }
        },
        "RecastOptimizer.get_optimization_function": {
            "name": "get_optimization_function",
            "location": 161,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RecastOptimizer._check_error": {
            "name": "_check_error",
            "location": 174,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RecastOptimizer._post_loss": {
            "name": "_post_loss",
            "location": 181,
            "return": [],
            "arguments": {
                "self": [],
                "candidate": [],
                "loss": []
            }
        },
        "RecastOptimizer._internal_tell_not_asked": {
            "name": "_internal_tell_not_asked",
            "location": 188,
            "return": [],
            "arguments": {
                "self": [],
                "candidate": [],
                "loss": []
            }
        },
        "RecastOptimizer._internal_provide_recommendation": {
            "name": "_internal_provide_recommendation",
            "location": 191,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RecastOptimizer.__del__": {
            "name": "__del__",
            "location": 200,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SequentialRecastOptimizer.__init__": {
            "name": "__init__",
            "location": 242,
            "return": [],
            "arguments": {
                "self": [],
                "parametrization": [],
                "budget": [],
                "num_workers": []
            }
        },
        "SequentialRecastOptimizer.enable_pickling": {
            "name": "enable_pickling",
            "location": 252,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SequentialRecastOptimizer._internal_ask_candidate": {
            "name": "_internal_ask_candidate",
            "location": 260,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SequentialRecastOptimizer._internal_tell_candidate": {
            "name": "_internal_tell_candidate",
            "location": 282,
            "return": [],
            "arguments": {
                "self": [],
                "candidate": [],
                "loss": []
            }
        },
        "SequentialRecastOptimizer.__getstate__": {
            "name": "__getstate__",
            "location": 294,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SequentialRecastOptimizer.__setstate__": {
            "name": "__setstate__",
            "location": 303,
            "return": [],
            "arguments": {
                "self": [],
                "state": []
            }
        },
        "BatchRecastOptimizer.__init__": {
            "name": "__init__",
            "location": 345,
            "return": [],
            "arguments": {
                "self": [],
                "parametrization": [],
                "budget": [],
                "num_workers": []
            }
        },
        "BatchRecastOptimizer._internal_ask_candidate": {
            "name": "_internal_ask_candidate",
            "location": 355,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BatchRecastOptimizer._internal_tell_candidate": {
            "name": "_internal_tell_candidate",
            "location": 393,
            "return": [],
            "arguments": {
                "self": [],
                "candidate": [],
                "loss": []
            }
        },
        "BatchRecastOptimizer.minimize": {
            "name": "minimize",
            "location": 410,
            "return": [],
            "arguments": {
                "self": [],
                "objective_function": [],
                "executor": [],
                "batch_mode": [],
                "verbosity": []
            }
        },
        "BatchRecastOptimizer.can_ask": {
            "name": "can_ask",
            "location": 419,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "nevergrad-main/nevergrad/optimization/recastlib.py": {
        "_create_pymoo_problem": {
            "name": "_create_pymoo_problem",
            "location": 469,
            "return": [],
            "arguments": {
                "optimizer": [],
                "objective_function": [],
                "elementwise": []
            }
        },
        "_NonObjectMinimizeBase.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [],
            "arguments": {
                "self": [],
                "parametrization": [],
                "budget": [],
                "num_workers": []
            }
        },
        "_NonObjectMinimizeBase._internal_tell_not_asked": {
            "name": "_internal_tell_not_asked",
            "location": 56,
            "return": [],
            "arguments": {
                "self": [],
                "candidate": [],
                "loss": []
            }
        },
        "_NonObjectMinimizeBase.get_optimization_function": {
            "name": "get_optimization_function",
            "location": 61,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_NonObjectMinimizeBase._optimization_function": {
            "name": "_optimization_function",
            "location": 65,
            "return": [],
            "arguments": {
                "weakself": [],
                "objective_function": []
            }
        },
        "NonObjectOptimizer.__init__": {
            "name": "__init__",
            "location": 206,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_PymooMinimizeBase.__init__": {
            "name": "__init__",
            "location": 225,
            "return": [],
            "arguments": {
                "self": [],
                "parametrization": [],
                "budget": [],
                "num_workers": []
            }
        },
        "_PymooMinimizeBase.get_optimization_function": {
            "name": "get_optimization_function",
            "location": 239,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_PymooMinimizeBase._optimization_function": {
            "name": "_optimization_function",
            "location": 246,
            "return": [],
            "arguments": {
                "weakself": [],
                "objective_function": []
            }
        },
        "_PymooMinimizeBase._internal_ask_candidate": {
            "name": "_internal_ask_candidate",
            "location": 274,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_PymooMinimizeBase._internal_tell_candidate": {
            "name": "_internal_tell_candidate",
            "location": 290,
            "return": [],
            "arguments": {
                "self": [],
                "candidate": [],
                "loss": []
            }
        },
        "_PymooMinimizeBase._post_loss": {
            "name": "_post_loss",
            "location": 302,
            "return": [],
            "arguments": {
                "self": [],
                "candidate": [],
                "loss": []
            }
        },
        "Pymoo.__init__": {
            "name": "__init__",
            "location": 345,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_PymooBatchMinimizeBase.__init__": {
            "name": "__init__",
            "location": 353,
            "return": [],
            "arguments": {
                "self": [],
                "parametrization": [],
                "budget": [],
                "num_workers": []
            }
        },
        "_PymooBatchMinimizeBase.get_optimization_function": {
            "name": "get_optimization_function",
            "location": 367,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_PymooBatchMinimizeBase._optimization_function": {
            "name": "_optimization_function",
            "location": 374,
            "return": [],
            "arguments": {
                "weakself": [],
                "objective_function": []
            }
        },
        "_PymooBatchMinimizeBase._internal_ask_candidate": {
            "name": "_internal_ask_candidate",
            "location": 402,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_PymooBatchMinimizeBase._internal_tell_candidate": {
            "name": "_internal_tell_candidate",
            "location": 415,
            "return": [],
            "arguments": {
                "self": [],
                "candidate": [],
                "loss": []
            }
        },
        "_PymooBatchMinimizeBase._post_loss": {
            "name": "_post_loss",
            "location": 423,
            "return": [],
            "arguments": {
                "self": [],
                "candidate": [],
                "loss": []
            }
        },
        "PymooBatch.__init__": {
            "name": "__init__",
            "location": 465,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_create_pymoo_problem._PymooProblem.__init__": {
            "name": "__init__",
            "location": 488,
            "return": [],
            "arguments": {
                "self": [],
                "optimizer": [],
                "objective_function": []
            }
        },
        "_create_pymoo_problem._PymooProblem._evaluate": {
            "name": "_evaluate",
            "location": 499,
            "return": [],
            "arguments": {
                "self": [],
                "X": [],
                "out": []
            }
        },
        "_NonObjectMinimizeBase._optimization_function.nlopt_objective_function": {
            "name": "nlopt_objective_function",
            "location": 83,
            "return": [],
            "arguments": {}
        },
        "_NonObjectMinimizeBase._optimization_function.cma_objective_function": {
            "name": "cma_objective_function",
            "location": 118,
            "return": [],
            "arguments": {
                "data": []
            }
        }
    },
    "nevergrad-main/nevergrad/optimization/requirements_check.py": {},
    "nevergrad-main/nevergrad/optimization/sequences.py": {
        "_get_first_primes": {
            "name": "_get_first_primes",
            "location": 18,
            "return": [],
            "arguments": {
                "num": []
            }
        },
        "Sampler.__init__": {
            "name": "__init__",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dimension": [
                    "str",
                    "None",
                    "typing.Sequence[]",
                    "tuple[typing.Union[int,int]]"
                ],
                "budget": [
                    "None",
                    "str",
                    "typing.Sequence[]",
                    "tuple[typing.Union[int,int]]"
                ],
                "random_state": [
                    "None",
                    "bool",
                    "typing.Sequence[str]",
                    "list[set[int]]"
                ]
            }
        },
        "Sampler._internal_sampler": {
            "name": "_internal_sampler",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Sampler.__call__": {
            "name": "__call__",
            "location": 50,
            "return": [
                "int",
                "tuple[typing.Union[typing.Literal,typing.Literal,typing.Literal,typing.Literal,typing.Literal,typing.Literal,typing.Literal,typing.Literal,typing.Literal,typing.Literal,typing.Literal,typing.Literal,typing.Literal]]",
                "typing.Type"
            ],
            "arguments": {
                "self": []
            }
        },
        "Sampler.__iter__": {
            "name": "__iter__",
            "location": 59,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Sampler.reinitialize": {
            "name": "reinitialize",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Sampler.draw": {
            "name": "draw",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LHSSampler.__init__": {
            "name": "__init__",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dimension": [
                    "float",
                    "bool"
                ],
                "budget": [
                    "float",
                    "int"
                ],
                "scrambling": [
                    "bool"
                ],
                "random_state": [
                    "None",
                    "float"
                ]
            }
        },
        "LHSSampler.reinitialize": {
            "name": "reinitialize",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LHSSampler._internal_sampler": {
            "name": "_internal_sampler",
            "location": 110,
            "return": [
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "RandomSampler.__init__": {
            "name": "__init__",
            "location": 118,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dimension": [
                    "int",
                    "float"
                ],
                "budget": [
                    "int",
                    "float"
                ],
                "scrambling": [
                    "bool"
                ],
                "random_state": [
                    "None",
                    "int",
                    "float"
                ]
            }
        },
        "RandomSampler._internal_sampler": {
            "name": "_internal_sampler",
            "location": 129,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HaltonPermutationGenerator.__init__": {
            "name": "__init__",
            "location": 138,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dimension": [
                    "str",
                    "dict[int, dict[, ]]",
                    "bool"
                ],
                "scrambling": [
                    "bool"
                ],
                "random_state": [
                    "None",
                    "bool",
                    "list[set[int]]"
                ]
            }
        },
        "HaltonPermutationGenerator.get_permutations_generator": {
            "name": "get_permutations_generator",
            "location": 149,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "HaltonSampler.__init__": {
            "name": "__init__",
            "location": 162,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dimension": [],
                "budget": [
                    "None",
                    "int",
                    "float"
                ],
                "scrambling": [
                    "bool"
                ],
                "random_state": [
                    "None"
                ]
            }
        },
        "HaltonSampler.vdc": {
            "name": "vdc",
            "location": 172,
            "return": [
                "float",
                "int"
            ],
            "arguments": {
                "self": [],
                "n": [
                    "int"
                ],
                "permut": []
            }
        },
        "HaltonSampler._internal_sampler": {
            "name": "_internal_sampler",
            "location": 183,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "HammersleySampler.__init__": {
            "name": "__init__",
            "location": 191,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dimension": [
                    "bool"
                ],
                "budget": [
                    "None",
                    "bool",
                    "tuple[typing.Union[numpy.ndarray,numpy.ndarray]]"
                ],
                "scrambling": [
                    "bool"
                ],
                "random_state": [
                    "None",
                    "bool"
                ]
            }
        },
        "HammersleySampler._internal_sampler": {
            "name": "_internal_sampler",
            "location": 201,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Rescaler.__init__": {
            "name": "__init__",
            "location": 207,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "points": [
                    "int",
                    "float"
                ]
            }
        },
        "Rescaler.apply": {
            "name": "apply",
            "location": 219,
            "return": [],
            "arguments": {
                "self": [],
                "point": [
                    "int",
                    "float",
                    "list[]",
                    "str",
                    "list[list[int]]",
                    "typing.Sequence['cirq.Qid']",
                    "typing.Mapping"
                ]
            }
        }
    },
    "nevergrad-main/nevergrad/optimization/test_base.py": {
        "test_batch_and_steady_optimization": {
            "name": "test_batch_and_steady_optimization",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "num_workers": [
                    "int",
                    "str"
                ],
                "batch_mode": [
                    "bool",
                    "float",
                    "dict[, ]"
                ],
                "expected": [
                    "bool",
                    "float",
                    "str"
                ]
            }
        },
        "test_tell_types": {
            "name": "test_tell_types",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "value": [
                    "typing.Callable[, ]",
                    "typing.Type",
                    "bool"
                ],
                "error": [
                    "bool",
                    "typing.Callable[, ]",
                    "str"
                ]
            }
        },
        "test_base_optimizer": {
            "name": "test_base_optimizer",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_optimize_and_dump": {
            "name": "test_optimize_and_dump",
            "location": 114,
            "return": [
                "None"
            ],
            "arguments": {
                "tmp_path": []
            }
        },
        "test_compare": {
            "name": "test_compare",
            "location": 132,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_naming": {
            "name": "test_naming",
            "location": 146,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_recommendation_correct": {
            "name": "test_recommendation_correct",
            "location": 172,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "constant": {
            "name": "constant",
            "location": 183,
            "return": [
                "float"
            ],
            "arguments": {
                "x": [
                    "bool",
                    "float",
                    "typing.Iterable[typing.Iterable[float]]",
                    "str",
                    "bytes"
                ]
            }
        },
        "test_pruning_calls": {
            "name": "test_pruning_calls",
            "location": 187,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "CounterFunction.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CounterFunction.__call__": {
            "name": "__call__",
            "location": 23,
            "return": [
                "float",
                "int"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ]
            }
        },
        "LoggingOptimizer.__init__": {
            "name": "__init__",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "num_workers": [
                    "int"
                ]
            }
        },
        "LoggingOptimizer._internal_ask": {
            "name": "_internal_ask",
            "location": 34,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LoggingOptimizer._internal_tell": {
            "name": "_internal_tell",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "list[float]",
                    "str",
                    "list[]"
                ],
                "loss": [
                    "bool",
                    "float",
                    "typing.Iterable[typing.Iterable[float]]",
                    "str",
                    "bytes"
                ]
            }
        },
        "MinStorageFunc.__init__": {
            "name": "__init__",
            "location": 164,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MinStorageFunc.__call__": {
            "name": "__call__",
            "location": 167,
            "return": [
                "typing.Callable[, ]",
                "int",
                "float"
            ],
            "arguments": {
                "self": [],
                "score": [
                    "typing.Callable[, ]",
                    "int",
                    "float"
                ]
            }
        }
    },
    "nevergrad-main/nevergrad/optimization/test_callbacks.py": {
        "_func": {
            "name": "_func",
            "location": 18,
            "return": [
                "int",
                "list[int]"
            ],
            "arguments": {
                "x": [
                    "str",
                    "bool"
                ],
                "y": [
                    "str",
                    "bool"
                ],
                "blublu": [
                    "str",
                    "bool"
                ],
                "array": [
                    "str",
                    "bool"
                ],
                "multiobjective": [
                    "bool"
                ]
            }
        },
        "test_log_parameters": {
            "name": "test_log_parameters",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "tmp_path": []
            }
        },
        "test_multiobjective_log_parameters": {
            "name": "test_multiobjective_log_parameters",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "tmp_path": []
            }
        },
        "test_chaining_log_parameters": {
            "name": "test_chaining_log_parameters",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "tmp_path": []
            }
        },
        "test_dump_callback": {
            "name": "test_dump_callback",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {
                "tmp_path": []
            }
        },
        "test_progressbar_dump": {
            "name": "test_progressbar_dump",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {
                "tmp_path": []
            }
        },
        "test_early_stopping": {
            "name": "test_early_stopping",
            "location": 116,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_duration_criterion": {
            "name": "test_duration_criterion",
            "location": 131,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_optimization_logger": {
            "name": "test_optimization_logger",
            "location": 141,
            "return": [
                "None"
            ],
            "arguments": {
                "caplog": [
                    "str"
                ]
            }
        },
        "test_optimization_logger_MOO": {
            "name": "test_optimization_logger_MOO",
            "location": 162,
            "return": [
                "None"
            ],
            "arguments": {
                "caplog": [
                    "str"
                ]
            }
        },
        "_EarlyStoppingTestee.__init__": {
            "name": "__init__",
            "location": 108,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "_EarlyStoppingTestee.__call__": {
            "name": "__call__",
            "location": 111,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "nevergrad-main/nevergrad/optimization/test_doc.py": {
        "test_simplest_example": {
            "name": "test_simplest_example",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_base_example": {
            "name": "test_base_example",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_print_all_optimizers": {
            "name": "test_print_all_optimizers",
            "location": 101,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_parametrization": {
            "name": "test_parametrization",
            "location": 109,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_doc_constrained_optimization": {
            "name": "test_doc_constrained_optimization",
            "location": 156,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_callback_doc": {
            "name": "test_callback_doc",
            "location": 177,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_inoculation": {
            "name": "test_inoculation",
            "location": 193,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_simplest_example.square": {
            "name": "square",
            "location": 19,
            "return": [
                "bool"
            ],
            "arguments": {
                "x": []
            }
        },
        "test_base_example.square": {
            "name": "square",
            "location": 65,
            "return": [
                "bool"
            ],
            "arguments": {
                "x": [],
                "y": []
            }
        },
        "test_base_example.onemax": {
            "name": "onemax",
            "location": 81,
            "return": [
                "int"
            ],
            "arguments": {
                "x": []
            }
        },
        "test_parametrization.myfunction": {
            "name": "myfunction",
            "location": 120,
            "return": [
                "int"
            ],
            "arguments": {
                "arg1": [],
                "arg2": [],
                "arg3": [],
                "amount": [
                    "tuple[int]"
                ]
            }
        },
        "test_callback_doc.my_function": {
            "name": "my_function",
            "location": 181,
            "return": [
                "bool"
            ],
            "arguments": {
                "x": []
            }
        },
        "test_callback_doc.print_candidate_and_value": {
            "name": "print_candidate_and_value",
            "location": 184,
            "return": [
                "None"
            ],
            "arguments": {
                "optimizer": [],
                "candidate": [],
                "value": []
            }
        },
        "test_doc_constrained_optimization.square": {
            "name": "square",
            "location": 163,
            "return": [
                "bool"
            ],
            "arguments": {
                "x": []
            }
        }
    },
    "nevergrad-main/nevergrad/optimization/test_externalbo.py": {
        "test_hyperopt": {
            "name": "test_hyperopt",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "parametrization": [
                    "bool",
                    "str"
                ],
                "has_transform": [
                    "bool"
                ]
            }
        },
        "test_hyperopt_helpers": {
            "name": "test_hyperopt_helpers",
            "location": 128,
            "return": [
                "None"
            ],
            "arguments": {
                "parametrization": [
                    "int",
                    "dict[, ]"
                ],
                "values": [
                    "list[bool]",
                    "list[]",
                    "str"
                ]
            }
        }
    },
    "nevergrad-main/nevergrad/optimization/test_mutations.py": {
        "test_significantly_mutate": {
            "name": "test_significantly_mutate",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_discrete_mutation": {
            "name": "test_discrete_mutation",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_crossover": {
            "name": "test_crossover",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_run_with_array": {
            "name": "test_run_with_array",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "name": [
                    "str",
                    "bytes"
                ]
            }
        },
        "test_get_roulette": {
            "name": "test_get_roulette",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "num": [
                    "dict[, ]",
                    "dict[str, set[str]]",
                    "str",
                    "bool"
                ],
                "expected": [
                    "str"
                ]
            }
        },
        "test_de_crossover": {
            "name": "test_de_crossover",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "crossover_param": [
                    "str",
                    "float",
                    "int",
                    "dict[str, typing.Any]",
                    "None"
                ],
                "seed": [
                    "int",
                    "float",
                    "list[int]"
                ],
                "expected": []
            }
        }
    },
    "nevergrad-main/nevergrad/optimization/test_optimizerlib.py": {
        "check_optimizer": {
            "name": "check_optimizer",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "optimizer_cls": [
                    "int",
                    "str",
                    "list[float]"
                ],
                "budget": [
                    "int"
                ],
                "verify_value": [
                    "bool"
                ]
            }
        },
        "buggy_function": {
            "name": "buggy_function",
            "location": 146,
            "return": [
                "float"
            ],
            "arguments": {
                "x": []
            }
        },
        "test_ngopt": {
            "name": "test_ngopt",
            "location": 159,
            "return": [
                "None"
            ],
            "arguments": {
                "dim": [
                    "int",
                    "float",
                    "tuple[]"
                ],
                "budget_multiplier": [
                    "float",
                    "int",
                    "typing.Sequence[int]",
                    "str"
                ],
                "num_workers": [
                    "float",
                    "int",
                    "typing.Sequence[int]",
                    "str"
                ],
                "bounded": [
                    "bool",
                    "str",
                    "list[str]"
                ],
                "discrete": [
                    "bool",
                    "str",
                    "list[str]"
                ]
            }
        },
        "test_infnan": {
            "name": "test_infnan",
            "location": 172,
            "return": [
                "None"
            ],
            "arguments": {
                "name": [
                    "str"
                ]
            }
        },
        "test_optimizers": {
            "name": "test_optimizers",
            "location": 209,
            "return": [
                "None"
            ],
            "arguments": {
                "name": [
                    "str"
                ]
            }
        },
        "recomkeeper": {
            "name": "recomkeeper",
            "location": 254,
            "return": [
                "typing.Generator[RecommendationKeeper]"
            ],
            "arguments": {}
        },
        "test_optimizers_recommendation": {
            "name": "test_optimizers_recommendation",
            "location": 262,
            "return": [
                "None"
            ],
            "arguments": {
                "name": [],
                "recomkeeper": [
                    "tuple[typing.Union[typing.Literal,typing.Literal]]",
                    "str"
                ]
            }
        },
        "test_differential_evolution_popsize": {
            "name": "test_differential_evolution_popsize",
            "location": 321,
            "return": [
                "None"
            ],
            "arguments": {
                "name": [
                    "int"
                ],
                "dimension": [
                    "int"
                ],
                "num_workers": [
                    "int"
                ],
                "expected": [
                    "int",
                    "bytes",
                    "str",
                    "typing.Iterable[str]"
                ]
            }
        },
        "test_portfolio_budget": {
            "name": "test_portfolio_budget",
            "location": 327,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_optimizer_families_repr": {
            "name": "test_optimizer_families_repr",
            "location": 333,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_tell_not_asked": {
            "name": "test_tell_not_asked",
            "location": 354,
            "return": [
                "None"
            ],
            "arguments": {
                "name": [
                    "int",
                    "str"
                ]
            }
        },
        "test_tbpsa_recom_with_update": {
            "name": "test_tbpsa_recom_with_update",
            "location": 381,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "_square": {
            "name": "_square",
            "location": 392,
            "return": [
                "bool"
            ],
            "arguments": {
                "x": [
                    "int",
                    "float"
                ],
                "y": [
                    "int"
                ]
            }
        },
        "_smooth_target": {
            "name": "_smooth_target",
            "location": 396,
            "return": [
                "float"
            ],
            "arguments": {
                "x": []
            }
        },
        "test_optimization_doc_parametrization_example": {
            "name": "test_optimization_doc_parametrization_example",
            "location": 408,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_optimization_discrete_with_one_sample": {
            "name": "test_optimization_discrete_with_one_sample",
            "location": 418,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_smooth_discrete_one_plus_one": {
            "name": "test_smooth_discrete_one_plus_one",
            "location": 423,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_optim_pickle": {
            "name": "test_optim_pickle",
            "location": 443,
            "return": [
                "None"
            ],
            "arguments": {
                "name": [
                    "str",
                    "bool"
                ]
            }
        },
        "test_bo_parametrization_and_parameters": {
            "name": "test_bo_parametrization_and_parameters",
            "location": 456,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_bo_init": {
            "name": "test_bo_init",
            "location": 471,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_chaining": {
            "name": "test_chaining",
            "location": 482,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_parametrization_optimizer_reproducibility": {
            "name": "test_parametrization_optimizer_reproducibility",
            "location": 495,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_parallel_es": {
            "name": "test_parallel_es",
            "location": 510,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "get_metamodel_test_settings": {
            "name": "get_metamodel_test_settings",
            "location": 535,
            "return": [
                "list[tuple[typing.Union[int,float]]]"
            ],
            "arguments": {
                "seq": [
                    "bool"
                ],
                "special": [
                    "bool"
                ]
            }
        },
        "test_metamodel": {
            "name": "test_metamodel",
            "location": 567,
            "return": [
                "None"
            ],
            "arguments": {
                "baseline": [
                    "str",
                    "float"
                ],
                "args": []
            }
        },
        "check_metamodel": {
            "name": "check_metamodel",
            "location": 573,
            "return": [
                "None"
            ],
            "arguments": {
                "dimension": [
                    "int",
                    "float"
                ],
                "num_workers": [
                    "int",
                    "float"
                ],
                "scale": [
                    "float",
                    "int",
                    "dict[str, str]",
                    "str"
                ],
                "budget": [
                    "float",
                    "int"
                ],
                "ellipsoid": [
                    "float",
                    "int",
                    "typing.Iterator",
                    "list[typing.Any]",
                    "None"
                ],
                "baseline": [
                    "int"
                ],
                "num_trials": [
                    "int"
                ]
            }
        },
        "test_constrained_optimization": {
            "name": "test_constrained_optimization",
            "location": 628,
            "return": [
                "None"
            ],
            "arguments": {
                "penalization": [
                    "bool",
                    "str",
                    "dict[, ]"
                ],
                "expected": [
                    "list[float]",
                    "str",
                    "list[int]",
                    "int",
                    "None"
                ],
                "as_layer": [
                    "str",
                    "bool",
                    "float",
                    "list[numpy.array]"
                ]
            }
        },
        "test_parametrization_offset": {
            "name": "test_parametrization_offset",
            "location": 649,
            "return": [
                "None"
            ],
            "arguments": {
                "name": [
                    "str"
                ]
            }
        },
        "test_optimizer_sequence": {
            "name": "test_optimizer_sequence",
            "location": 667,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_shiwa_dim1": {
            "name": "test_shiwa_dim1",
            "location": 675,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_ngopt_selection": {
            "name": "test_ngopt_selection",
            "location": 711,
            "return": [
                "None"
            ],
            "arguments": {
                "name": [
                    "int",
                    "str",
                    "list[str]"
                ],
                "param": [
                    "int",
                    "float",
                    "str",
                    "tuple[]"
                ],
                "budget": [
                    "int",
                    "float"
                ],
                "num_workers": [
                    "int",
                    "float"
                ],
                "expected": [
                    "bool",
                    "float",
                    "list[str]",
                    "None",
                    "str"
                ],
                "caplog": [
                    "str",
                    "None",
                    "int"
                ]
            }
        },
        "test_bo_ordering": {
            "name": "test_bo_ordering",
            "location": 737,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_ngo_split_optimizer": {
            "name": "test_ngo_split_optimizer",
            "location": 758,
            "return": [
                "None"
            ],
            "arguments": {
                "name": [
                    "str",
                    "int"
                ],
                "dimension": [
                    "int",
                    "set[int]"
                ],
                "num_workers": [
                    "float",
                    "None",
                    "int"
                ],
                "fake_learning": [
                    "bool",
                    "str",
                    "float",
                    "list[str]"
                ],
                "budget": [
                    "float",
                    "None",
                    "int"
                ],
                "expected": [
                    "str",
                    "dict[str, str]"
                ]
            }
        },
        "test_ngopt_on_simple_realistic_scenario": {
            "name": "test_ngopt_on_simple_realistic_scenario",
            "location": 801,
            "return": [
                "None"
            ],
            "arguments": {
                "budget": [
                    "str",
                    "float"
                ],
                "with_int": [
                    "bool",
                    "str",
                    "float"
                ]
            }
        },
        "_multiobjective": {
            "name": "_multiobjective",
            "location": 825,
            "return": [
                "tuple[typing.Union[int,float]]"
            ],
            "arguments": {
                "z": [
                    "int",
                    "list[]",
                    "str"
                ]
            }
        },
        "test_mo_constrained": {
            "name": "test_mo_constrained",
            "location": 832,
            "return": [
                "None"
            ],
            "arguments": {
                "name": [
                    "str",
                    "int"
                ]
            }
        },
        "test_mo_with_nan": {
            "name": "test_mo_with_nan",
            "location": 850,
            "return": [
                "None"
            ],
            "arguments": {
                "name": [
                    "str",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "test_uniform_sampling": {
            "name": "test_uniform_sampling",
            "location": 860,
            "return": [
                "None"
            ],
            "arguments": {
                "name": [
                    "str",
                    "int"
                ]
            }
        },
        "test_paraportfolio_de": {
            "name": "test_paraportfolio_de",
            "location": 869,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_cma_logs": {
            "name": "test_cma_logs",
            "location": 878,
            "return": [
                "None"
            ],
            "arguments": {
                "capsys": []
            }
        },
        "_simple_multiobjective": {
            "name": "_simple_multiobjective",
            "location": 886,
            "return": [
                "list[]"
            ],
            "arguments": {
                "x": [
                    "float",
                    "int"
                ]
            }
        },
        "test_pymoo_pf": {
            "name": "test_pymoo_pf",
            "location": 890,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_pymoo_batched": {
            "name": "test_pymoo_batched",
            "location": 905,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_smoother": {
            "name": "test_smoother",
            "location": 927,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "Fitness.__init__": {
            "name": "__init__",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "x0": [
                    "float",
                    "int"
                ]
            }
        },
        "Fitness.__call__": {
            "name": "__call__",
            "location": 50,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "list[gluonts.model.common.Tensor]",
                    "typing.Callable[numpy.ndarray, numpy.ndarray]"
                ]
            }
        },
        "Fitness.get_factors": {
            "name": "get_factors",
            "location": 55,
            "return": [
                "tuple[float]"
            ],
            "arguments": {
                "self": []
            }
        },
        "RecommendationKeeper.__init__": {
            "name": "__init__",
            "location": 238,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "filepath": []
            }
        },
        "RecommendationKeeper.save": {
            "name": "save",
            "location": 244,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "QuadFunction.__init__": {
            "name": "__init__",
            "location": 521,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "scale": [
                    "int",
                    "float"
                ],
                "ellipse": [
                    "int",
                    "float"
                ]
            }
        },
        "QuadFunction.__call__": {
            "name": "__call__",
            "location": 525,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "typing.Sequence[typing.Any]",
                    "float"
                ]
            }
        },
        "test_constrained_optimization.constraint": {
            "name": "constraint",
            "location": 629,
            "return": [
                "float",
                "bool"
            ],
            "arguments": {
                "i": []
            }
        },
        "test_ngopt_on_simple_realistic_scenario.fake_training": {
            "name": "fake_training",
            "location": 802,
            "return": [
                "float",
                "int"
            ],
            "arguments": {
                "learning_rate": [],
                "batch_size": [],
                "architecture": []
            }
        },
        "test_mo_constrained.constraint": {
            "name": "constraint",
            "location": 836,
            "return": [
                "float",
                "bool"
            ],
            "arguments": {
                "arg": []
            }
        }
    },
    "nevergrad-main/nevergrad/optimization/test_recaster.py": {
        "fake_caller": {
            "name": "fake_caller",
            "location": 18,
            "return": [
                "int"
            ],
            "arguments": {
                "func": [
                    "typing.Callable[, ]",
                    "bool"
                ]
            }
        },
        "test_automatic_thread_deletion": {
            "name": "test_automatic_thread_deletion",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "fake_cost_function": {
            "name": "fake_cost_function",
            "location": 30,
            "return": [
                "float"
            ],
            "arguments": {
                "x": [
                    "float"
                ]
            }
        },
        "test_recast_optimizer": {
            "name": "test_recast_optimizer",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_recast_optimizer_with_error": {
            "name": "test_recast_optimizer_with_error",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_recast_optimizer_and_stop": {
            "name": "test_recast_optimizer_and_stop",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_provide_recommendation": {
            "name": "test_provide_recommendation",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_sqp_with_constraint": {
            "name": "test_sqp_with_constraint",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_recast_optimizer_error": {
            "name": "test_recast_optimizer_error",
            "location": 105,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "_simple_multiobjective": {
            "name": "_simple_multiobjective",
            "location": 117,
            "return": [
                "list[]"
            ],
            "arguments": {
                "x": [
                    "float",
                    "int"
                ]
            }
        },
        "test_recast_pickle": {
            "name": "test_recast_pickle",
            "location": 122,
            "return": [
                "None"
            ],
            "arguments": {
                "after_ask": [
                    "str",
                    "dict[str, numpy.ndarray]"
                ]
            }
        },
        "FakeOptimizer.get_optimization_function": {
            "name": "get_optimization_function",
            "location": 35,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FakeOptimizer._optim_function": {
            "name": "_optim_function",
            "location": 39,
            "return": [],
            "arguments": {
                "self": [],
                "func": [
                    "list[numpy.ndarray]",
                    "typing.Callable[dict[, ], None]",
                    "list[str]",
                    "list[list[str]]"
                ]
            }
        },
        "ErroringSequentialRecastOptimizer.get_optimization_function": {
            "name": "get_optimization_function",
            "location": 85,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ErroringBatchRecastOptimizer.get_optimization_function": {
            "name": "get_optimization_function",
            "location": 97,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ErroringSequentialRecastOptimizer.get_optimization_function.optim_function": {
            "name": "optim_function",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "func": []
            }
        },
        "ErroringBatchRecastOptimizer.get_optimization_function.optim_function": {
            "name": "optim_function",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {
                "func": []
            }
        }
    },
    "nevergrad-main/nevergrad/optimization/test_sa.py": {
        "test_sa": {
            "name": "test_sa",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_sa.of": {
            "name": "of",
            "location": 34,
            "return": [],
            "arguments": {
                "x": []
            }
        }
    },
    "nevergrad-main/nevergrad/optimization/test_sequences.py": {
        "test_get_first_primes": {
            "name": "test_get_first_primes",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_samplers": {
            "name": "test_samplers",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "sampler_cls": [
                    "bytes",
                    "str",
                    "typing.Hashable",
                    "bool"
                ]
            }
        },
        "test_sampler_draw": {
            "name": "test_sampler_draw",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_sampler_values": {
            "name": "test_sampler_values",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "name": [
                    "str",
                    "dict[, ]"
                ],
                "seq1": [
                    "str",
                    "None",
                    "int"
                ],
                "seq2": [
                    "str",
                    "None",
                    "int"
                ]
            }
        },
        "test_permutation_generator": {
            "name": "test_permutation_generator",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_rescaler_on_hammersley": {
            "name": "test_rescaler_on_hammersley",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "nevergrad-main/nevergrad/optimization/test_special.py": {
        "test_performance_ngopt": {
            "name": "test_performance_ngopt",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "dim": [
                    "float"
                ],
                "bounded": [
                    "int",
                    "list[int]",
                    "str",
                    "list[]"
                ],
                "discrete": [
                    "float",
                    "str"
                ]
            }
        },
        "test_metamodel_special": {
            "name": "test_metamodel_special",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "baseline": [],
                "args": []
            }
        },
        "SimpleFitness.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "x0": [
                    "list[list[T]]",
                    "list[T]",
                    "float"
                ],
                "x1": [
                    "float",
                    "bool"
                ]
            }
        },
        "SimpleFitness.__call__": {
            "name": "__call__",
            "location": 26,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "x": []
            }
        }
    },
    "nevergrad-main/nevergrad/optimization/test_suggest.py": {
        "suggestable": {
            "name": "suggestable",
            "location": 23,
            "return": [
                "bool"
            ],
            "arguments": {
                "name": [
                    "str",
                    "bytes",
                    "list[str]"
                ]
            }
        },
        "suggestion_testing": {
            "name": "suggestion_testing",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "name": [
                    "str",
                    "dict[str, float]",
                    "bool",
                    "dict[str, numpy.ndarray]",
                    "dict[, ]"
                ],
                "instrumentation": [
                    "bool",
                    "tuple[str]",
                    "str",
                    "None"
                ],
                "suggestion": [
                    "bool",
                    "tuple[str]",
                    "str",
                    "None"
                ],
                "budget": [
                    "bool",
                    "tuple[str]",
                    "str",
                    "None"
                ],
                "objective_function": [
                    "bool",
                    "str",
                    "None",
                    "typing.Callable[, ]"
                ],
                "optimum": [
                    "None",
                    "list[str]",
                    "str",
                    "int"
                ],
                "threshold": [
                    "None",
                    "bool",
                    "list[]",
                    "str",
                    "tuple[typing.Union[float,float]]",
                    "float"
                ]
            }
        },
        "test_suggest_optimizers": {
            "name": "test_suggest_optimizers",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "name": [
                    "str",
                    "dict[, ]"
                ]
            }
        },
        "good_at_suggest": {
            "name": "good_at_suggest",
            "location": 66,
            "return": [
                "bool"
            ],
            "arguments": {
                "name": [
                    "str"
                ]
            }
        },
        "test_harder_suggest_optimizers": {
            "name": "test_harder_suggest_optimizers",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "name": [
                    "str",
                    "list[str]",
                    "dict[, ]",
                    "bool"
                ]
            }
        },
        "test_harder_continuous_suggest_optimizers": {
            "name": "test_harder_continuous_suggest_optimizers",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_optimizers_suggest": {
            "name": "test_optimizers_suggest",
            "location": 107,
            "return": [
                "None"
            ],
            "arguments": {
                "name": [
                    "str",
                    "dict[, ]"
                ]
            }
        }
    },
    "nevergrad-main/nevergrad/optimization/test_tabu.py": {
        "test_tabu": {
            "name": "test_tabu",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "summation": {
            "name": "summation",
            "location": 46,
            "return": [
                "bool"
            ],
            "arguments": {
                "x": [
                    "str"
                ]
            }
        },
        "test_tabu_sum": {
            "name": "test_tabu_sum",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_tabu.of": {
            "name": "of",
            "location": 35,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "test_tabu_sum.of": {
            "name": "of",
            "location": 65,
            "return": [],
            "arguments": {
                "x": []
            }
        }
    },
    "nevergrad-main/nevergrad/optimization/test_utils.py": {
        "test_value_and_point": {
            "name": "test_value_and_point",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_sequential_executor": {
            "name": "test_sequential_executor",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_get_nash": {
            "name": "test_get_nash",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_archive": {
            "name": "test_archive",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_archive_errors": {
            "name": "test_archive_errors",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_pruning": {
            "name": "test_pruning",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_pruning_sensible_default": {
            "name": "test_pruning_sensible_default",
            "location": 117,
            "return": [
                "None"
            ],
            "arguments": {
                "nw": [
                    "int"
                ],
                "dimension": [
                    "int"
                ],
                "expected_min": [
                    "int",
                    "str"
                ],
                "expected_max": [
                    "int",
                    "str"
                ]
            }
        },
        "test_uid_queue": {
            "name": "test_uid_queue",
            "location": 123,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "nevergrad-main/nevergrad/optimization/utils.py": {
        "_get_nash": {
            "name": "_get_nash",
            "location": 94,
            "return": [
                "list[tuple[int]]",
                "list[]"
            ],
            "arguments": {
                "optimizer": []
            }
        },
        "sample_nash": {
            "name": "sample_nash",
            "location": 112,
            "return": [],
            "arguments": {
                "optimizer": [
                    "str",
                    "int",
                    "list[]"
                ]
            }
        },
        "_tobytes": {
            "name": "_tobytes",
            "location": 151,
            "return": [],
            "arguments": {
                "x": [
                    "int"
                ]
            }
        },
        "MultiValue.__init__": {
            "name": "__init__",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parameter": [],
                "y": [
                    "float",
                    "bytes",
                    "int",
                    "list[dict[, ]]",
                    "list[T]"
                ]
            }
        },
        "MultiValue.x": {
            "name": "x",
            "location": 47,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MultiValue.optimistic_confidence_bound": {
            "name": "optimistic_confidence_bound",
            "location": 51,
            "return": [
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "MultiValue.pessimistic_confidence_bound": {
            "name": "pessimistic_confidence_bound",
            "location": 55,
            "return": [
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "MultiValue.get_estimation": {
            "name": "get_estimation",
            "location": 58,
            "return": [],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "int",
                    "typing.Iterable[str]"
                ]
            }
        },
        "MultiValue.add_evaluation": {
            "name": "add_evaluation",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "y": []
            }
        },
        "MultiValue.as_array": {
            "name": "as_array",
            "location": 87,
            "return": [],
            "arguments": {
                "self": [],
                "reference": [
                    "int",
                    "str"
                ]
            }
        },
        "MultiValue.__repr__": {
            "name": "__repr__",
            "location": 90,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "DelayedJob.__init__": {
            "name": "__init__",
            "location": 125,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "func": [
                    "int",
                    "float",
                    "list[list[T]]"
                ]
            }
        },
        "DelayedJob.done": {
            "name": "done",
            "location": 132,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "DelayedJob.result": {
            "name": "result",
            "location": 135,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "SequentialExecutor.submit": {
            "name": "submit",
            "location": 147,
            "return": [
                "DelayedJob"
            ],
            "arguments": {
                "self": [],
                "fn": [
                    "typing.Callable[, ]",
                    "list[dict[str, str]]",
                    "str",
                    "int"
                ]
            }
        },
        "Archive.__init__": {
            "name": "__init__",
            "location": 175,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Archive.__setitem__": {
            "name": "__setitem__",
            "location": 178,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "list[T]",
                    "str",
                    "int",
                    "list[str]"
                ],
                "value": [
                    "list[T]",
                    "str",
                    "int",
                    "list[str]"
                ]
            }
        },
        "Archive.__getitem__": {
            "name": "__getitem__",
            "location": 181,
            "return": [],
            "arguments": {
                "self": [],
                "x": [
                    "int",
                    "float",
                    "str"
                ]
            }
        },
        "Archive.__contains__": {
            "name": "__contains__",
            "location": 184,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "bool"
                ]
            }
        },
        "Archive.get": {
            "name": "get",
            "location": 187,
            "return": [],
            "arguments": {
                "self": [],
                "x": [
                    "dict[int, typing.Any]",
                    "str",
                    "float",
                    "dict[str, typing.Any]",
                    "typing.Sequence[typing.Any]"
                ],
                "default": [
                    "None",
                    "dict[int, typing.Any]",
                    "str",
                    "float",
                    "dict[str, typing.Any]",
                    "typing.Sequence[typing.Any]"
                ]
            }
        },
        "Archive.__len__": {
            "name": "__len__",
            "location": 190,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Archive.values": {
            "name": "values",
            "location": 193,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Archive.keys": {
            "name": "keys",
            "location": 196,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Archive.items": {
            "name": "items",
            "location": 199,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Archive.items_as_array": {
            "name": "items_as_array",
            "location": 202,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Archive.items_as_arrays": {
            "name": "items_as_arrays",
            "location": 205,
            "return": [
                "typing.Generator[tuple[]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Archive.keys_as_array": {
            "name": "keys_as_array",
            "location": 214,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Archive.keys_as_arrays": {
            "name": "keys_as_arrays",
            "location": 217,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Archive.__repr__": {
            "name": "__repr__",
            "location": 226,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "Archive.__str__": {
            "name": "__str__",
            "location": 229,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "Archive.__iter__": {
            "name": "__iter__",
            "location": 232,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Pruning.__init__": {
            "name": "__init__",
            "location": 253,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "min_len": [
                    "int",
                    "float"
                ],
                "max_len": [
                    "int",
                    "None",
                    "float"
                ]
            }
        },
        "Pruning.__call__": {
            "name": "__call__",
            "location": 258,
            "return": [],
            "arguments": {
                "self": [],
                "archive": []
            }
        },
        "Pruning._prune": {
            "name": "_prune",
            "location": 263,
            "return": [
                "Archive"
            ],
            "arguments": {
                "self": [],
                "archive": []
            }
        },
        "Pruning.sensible_default": {
            "name": "sensible_default",
            "location": 283,
            "return": [],
            "arguments": {
                "cls": [
                    "int",
                    "float",
                    "tuple[typing.Union[int,int]]"
                ],
                "num_workers": [
                    "int",
                    "typing.Sequence[int]",
                    "str",
                    "tuple[]"
                ],
                "dimension": [
                    "bool"
                ]
            }
        },
        "UidQueue.__init__": {
            "name": "__init__",
            "location": 311,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UidQueue.clear": {
            "name": "clear",
            "location": 315,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UidQueue.ask": {
            "name": "ask",
            "location": 320,
            "return": [
                "str",
                "int",
                "list[]",
                "tuple[]",
                "typing.Pattern"
            ],
            "arguments": {
                "self": []
            }
        },
        "UidQueue.tell": {
            "name": "tell",
            "location": 333,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "uid": [
                    "float",
                    "None",
                    "int",
                    "list[bool]"
                ]
            }
        },
        "UidQueue.discard": {
            "name": "discard",
            "location": 339,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "uid": [
                    "bool",
                    "str"
                ]
            }
        },
        "ConstraintManager.__init__": {
            "name": "__init__",
            "location": 355,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConstraintManager.__repr__": {
            "name": "__repr__",
            "location": 360,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConstraintManager.update": {
            "name": "update",
            "location": 364,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "max_trials": [
                    "None",
                    "int",
                    "str"
                ],
                "penalty_factor": [
                    "None",
                    "int",
                    "str"
                ],
                "penalty_exponent": [
                    "None",
                    "float",
                    "str",
                    "int"
                ]
            }
        },
        "ConstraintManager.penalty": {
            "name": "penalty",
            "location": 386,
            "return": [],
            "arguments": {
                "self": [],
                "parameter": [
                    "bool",
                    "str",
                    "list[]",
                    "float"
                ],
                "num_ask": [
                    "int"
                ],
                "budget": [
                    "int",
                    "None",
                    "float",
                    "str"
                ]
            }
        }
    },
    "nevergrad-main/nevergrad/optimization/__init__.py": {},
    "nevergrad-main/nevergrad/optimization/multiobjective/core.py": {
        "HypervolumePareto.__init__": {
            "name": "__init__",
            "location": 52,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HypervolumePareto.num_objectives": {
            "name": "num_objectives",
            "location": 78,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HypervolumePareto.best_volume": {
            "name": "best_volume",
            "location": 82,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HypervolumePareto.extend": {
            "name": "extend",
            "location": 85,
            "return": [],
            "arguments": {
                "self": [],
                "parameters": []
            }
        },
        "HypervolumePareto.add": {
            "name": "add",
            "location": 91,
            "return": [],
            "arguments": {
                "self": [],
                "parameter": []
            }
        },
        "HypervolumePareto._calc_hypervolume": {
            "name": "_calc_hypervolume",
            "location": 130,
            "return": [],
            "arguments": {
                "self": [],
                "parameter": [],
                "losses": []
            }
        },
        "HypervolumePareto.pareto_front": {
            "name": "pareto_front",
            "location": 153,
            "return": [],
            "arguments": {
                "self": [],
                "size": [],
                "subset": [],
                "subset_tentatives": []
            }
        },
        "HypervolumePareto.get_min_losses": {
            "name": "get_min_losses",
            "location": 177,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ParetoFront.__init__": {
            "name": "__init__",
            "location": 182,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ParetoFront.add_to_pareto": {
            "name": "add_to_pareto",
            "location": 194,
            "return": [],
            "arguments": {
                "self": [],
                "parameter": []
            }
        },
        "ParetoFront._filter_pareto_front": {
            "name": "_filter_pareto_front",
            "location": 198,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ParetoFront.get_raw": {
            "name": "get_raw",
            "location": 212,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ParetoFront.get_front": {
            "name": "get_front",
            "location": 217,
            "return": [],
            "arguments": {
                "self": [],
                "size": [],
                "subset": [],
                "subset_tentatives": []
            }
        }
    },
    "nevergrad-main/nevergrad/optimization/multiobjective/hypervolume.py": {
        "VectorNode.__init__": {
            "name": "__init__",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dimension": [
                    "int",
                    "typing.Iterable[str]"
                ],
                "coordinates": [
                    "None",
                    "str"
                ]
            }
        },
        "VectorNode.__str__": {
            "name": "__str__",
            "location": 43,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "VectorNode.__lt__": {
            "name": "__lt__",
            "location": 46,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "typing.Iterable[typing.Any]"
                ]
            }
        },
        "VectorNode.configure_area": {
            "name": "configure_area",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dimension": [
                    "int",
                    "float",
                    "list[int]"
                ]
            }
        },
        "VectorNode.next": {
            "name": "next",
            "location": 55,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "VectorNode.prev": {
            "name": "prev",
            "location": 59,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "VectorNode.pop": {
            "name": "pop",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "int",
                    "list[int]",
                    "list[]",
                    "typing.Sequence[int]"
                ]
            }
        },
        "VectorLinkedList.__init__": {
            "name": "__init__",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dimension": [
                    "int",
                    "float"
                ]
            }
        },
        "VectorLinkedList.create_sorted": {
            "name": "create_sorted",
            "location": 81,
            "return": [
                "list[typing.Union[int,str,list[int]]]",
                "list[]",
                "set[str]",
                "int",
                "list[typing.Union[int,str]]",
                "list[str]",
                "dict[str, typing.Any]",
                "dict[str, list[str]]",
                "dict[str, str]",
                "list[list[int]]"
            ],
            "arguments": {
                "cls": [
                    "list[str]",
                    "int",
                    "str",
                    "None"
                ],
                "dimension": [
                    "dict[, ]",
                    "dict[str, typing.Any]",
                    "list[]"
                ],
                "points": [
                    "str"
                ]
            }
        },
        "VectorLinkedList.sort_by_index": {
            "name": "sort_by_index",
            "location": 93,
            "return": [
                "list[typing.Union[int,str]]"
            ],
            "arguments": {
                "node_list": [
                    "list[int]",
                    "str",
                    "list[]"
                ],
                "dimension_index": [
                    "int",
                    "list[int]",
                    "str",
                    "list[]"
                ]
            }
        },
        "VectorLinkedList.__str__": {
            "name": "__str__",
            "location": 98,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "VectorLinkedList.__len__": {
            "name": "__len__",
            "location": 102,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "VectorLinkedList.chain_length": {
            "name": "chain_length",
            "location": 105,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "BaseException"
                ]
            }
        },
        "VectorLinkedList.append": {
            "name": "append",
            "location": 109,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "list[int]",
                    "list[]"
                ],
                "index": [
                    "list[int]",
                    "int"
                ]
            }
        },
        "VectorLinkedList.extend": {
            "name": "extend",
            "location": 118,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "nodes": [
                    "list[int]"
                ],
                "index": []
            }
        },
        "VectorLinkedList.update_coordinate_bounds": {
            "name": "update_coordinate_bounds",
            "location": 125,
            "return": [
                "int",
                "typing.Sequence[numpy.ndarray]",
                "float",
                "str",
                "typing.Iterable[]"
            ],
            "arguments": {
                "bounds": [
                    "int",
                    "typing.Sequence[numpy.ndarray]",
                    "float",
                    "str",
                    "typing.Iterable[]"
                ],
                "node": [
                    "int",
                    "typing.Sequence[numpy.ndarray]",
                    "float",
                    "str",
                    "typing.Iterable[]"
                ],
                "index": [
                    "int",
                    "float",
                    "str"
                ]
            }
        },
        "VectorLinkedList.pop": {
            "name": "pop",
            "location": 131,
            "return": [
                "dict[, ]"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "dict[, ]"
                ],
                "index": [
                    "int"
                ]
            }
        },
        "VectorLinkedList.reinsert": {
            "name": "reinsert",
            "location": 139,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "int",
                    "str",
                    "dict[str, typing.Any]",
                    "None"
                ],
                "index": [
                    "int"
                ]
            }
        },
        "VectorLinkedList.iterate": {
            "name": "iterate",
            "location": 150,
            "return": [
                "typing.Generator[typing.Union[str,int,float,list[str]]]"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "int"
                ],
                "start": [
                    "None",
                    "str",
                    "int",
                    "float",
                    "list[str]"
                ]
            }
        },
        "VectorLinkedList.reverse_iterate": {
            "name": "reverse_iterate",
            "location": 160,
            "return": [
                "typing.Generator[typing.Union[str,int,float,list[str]]]"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "int"
                ],
                "start": [
                    "None",
                    "str",
                    "int",
                    "float",
                    "list[str]"
                ]
            }
        },
        "HypervolumeIndicator.__init__": {
            "name": "__init__",
            "location": 187,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "reference_point": [
                    "str",
                    "list[tuple[typing.Union[float,float]]]",
                    "float",
                    "list[]"
                ]
            }
        },
        "HypervolumeIndicator.multilist": {
            "name": "multilist",
            "location": 194,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HypervolumeIndicator.compute": {
            "name": "compute",
            "location": 198,
            "return": [
                "str",
                "int",
                "tuple[typing.Union[int,int,int]]",
                "typing.Pattern"
            ],
            "arguments": {
                "self": [],
                "points": [
                    "str"
                ]
            }
        },
        "HypervolumeIndicator.plane_hypervolume": {
            "name": "plane_hypervolume",
            "location": 206,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HypervolumeIndicator.recursive_hypervolume": {
            "name": "recursive_hypervolume",
            "location": 222,
            "return": [
                "int",
                "float"
            ],
            "arguments": {
                "self": [],
                "dimension": [
                    "float"
                ]
            }
        },
        "HypervolumeIndicator.skip_dominated_points": {
            "name": "skip_dominated_points",
            "location": 304,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "int",
                    "list[int]"
                ],
                "dimension": [
                    "int"
                ]
            }
        }
    },
    "nevergrad-main/nevergrad/optimization/multiobjective/nsga2.py": {
        "rank": {
            "name": "rank",
            "location": 202,
            "return": [],
            "arguments": {
                "population": [
                    "int",
                    "typing.Iterable[T]"
                ],
                "n_selected": [
                    "int"
                ]
            }
        },
        "CrowdingDistance.accumulate_distance_per_objective": {
            "name": "accumulate_distance_per_objective",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "front": [
                    "list[str]"
                ],
                "i": [
                    "bytes",
                    "int",
                    "float"
                ]
            }
        },
        "CrowdingDistance.compute_distance": {
            "name": "compute_distance",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "front": []
            }
        },
        "CrowdingDistance.sort": {
            "name": "sort",
            "location": 109,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": [],
                "candidates": [
                    "list[]"
                ],
                "in_place": [
                    "bool"
                ]
            }
        },
        "FastNonDominatedRanking.compare": {
            "name": "compare",
            "location": 120,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "candidate1": [
                    "str",
                    "bool",
                    "dict[str, float]"
                ],
                "candidate2": [
                    "str",
                    "bool",
                    "dict[str, float]"
                ]
            }
        },
        "FastNonDominatedRanking.compute_ranking": {
            "name": "compute_ranking",
            "location": 135,
            "return": [],
            "arguments": {
                "self": [],
                "candidates": [],
                "k": [
                    "None",
                    "str",
                    "typing.Type",
                    "tuple[typing.Union[numpy.ndarray,numpy.ndarray]]"
                ]
            }
        }
    },
    "nevergrad-main/nevergrad/optimization/multiobjective/test_core.py": {
        "test_hypervolume_pareto_function": {
            "name": "test_hypervolume_pareto_function",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_hypervolume_pareto_with_no_good_point": {
            "name": "test_hypervolume_pareto_with_no_good_point",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_num_losses_error": {
            "name": "test_num_losses_error",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "losses": [
                    "str"
                ]
            }
        },
        "mofunc": {
            "name": "mofunc",
            "location": 67,
            "return": [
                "int"
            ],
            "arguments": {
                "array": [
                    "int"
                ]
            }
        },
        "test_optimizers_multiobjective": {
            "name": "test_optimizers_multiobjective",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "name": [
                    "str",
                    "dict[, ]"
                ]
            }
        },
        "test_doc_multiobjective": {
            "name": "test_doc_multiobjective",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_doc_multiobjective.multiobjective": {
            "name": "multiobjective",
            "location": 96,
            "return": [
                "list[]"
            ],
            "arguments": {
                "x": []
            }
        }
    },
    "nevergrad-main/nevergrad/optimization/multiobjective/test_hypervolume.py": {
        "test_initialize_empty_node": {
            "name": "test_initialize_empty_node",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_initialize_node": {
            "name": "test_initialize_node",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_initialize_linked_list": {
            "name": "test_initialize_linked_list",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_append": {
            "name": "test_append",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_extend": {
            "name": "test_extend",
            "location": 120,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_chain_length": {
            "name": "test_chain_length",
            "location": 137,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_pop": {
            "name": "test_pop",
            "location": 164,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_reinsert": {
            "name": "test_reinsert",
            "location": 180,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_iterate": {
            "name": "test_iterate",
            "location": 214,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_reverse_iterate": {
            "name": "test_reverse_iterate",
            "location": 234,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_update_coordinate_bounds": {
            "name": "test_update_coordinate_bounds",
            "location": 256,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_sort_by_index": {
            "name": "test_sort_by_index",
            "location": 267,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_create_sorted": {
            "name": "test_create_sorted",
            "location": 279,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_version_consistency": {
            "name": "test_version_consistency",
            "location": 293,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_reference_no_pointy": {
            "name": "test_reference_no_pointy",
            "location": 303,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "nevergrad-main/nevergrad/optimization/multiobjective/test_nsga2.py": {
        "test_crowding_distance": {
            "name": "test_crowding_distance",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_fast_non_dominated_ranking": {
            "name": "test_fast_non_dominated_ranking",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "get_nsga2_test_case_data": {
            "name": "get_nsga2_test_case_data",
            "location": 66,
            "return": [
                "tuple[typing.Union[list[list[]],list[list[list[]]]]]"
            ],
            "arguments": {}
        },
        "test_nsga2_ranking": {
            "name": "test_nsga2_ranking",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_nsga2_ranking_2": {
            "name": "test_nsga2_ranking_2",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_nsga2_ranking_3": {
            "name": "test_nsga2_ranking_3",
            "location": 115,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_nsga2_ranking_4": {
            "name": "test_nsga2_ranking_4",
            "location": 130,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "nevergrad-main/nevergrad/optimization/multiobjective/__init__.py": {},
    "nevergrad-main/nevergrad/parametrization/choice.py": {
        "BaseChoice.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseChoice.__len__": {
            "name": "__len__",
            "location": 37,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseChoice._get_parameters_str": {
            "name": "_get_parameters_str",
            "location": 41,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseChoice.index": {
            "name": "index",
            "location": 50,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseChoice.indices": {
            "name": "indices",
            "location": 57,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BaseChoice.choices": {
            "name": "choices",
            "location": 62,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BaseChoice._layered_get_value": {
            "name": "_layered_get_value",
            "location": 66,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseChoice._layered_set_value": {
            "name": "_layered_set_value",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "int",
                    "str",
                    "typing.Mapping"
                ]
            }
        },
        "BaseChoice.get_value_hash": {
            "name": "get_value_hash",
            "location": 91,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Choice.__init__": {
            "name": "__init__",
            "location": 135,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "choices": [
                    "str",
                    "None",
                    "int",
                    "tuple[tuple[typing.Union[int,int]]]"
                ],
                "repetitions": [
                    "None",
                    "float",
                    "tuple[typing.Union[typing.Any,typing.Any]]",
                    "str"
                ],
                "deterministic": [
                    "bool"
                ]
            }
        },
        "Choice.mutate": {
            "name": "mutate",
            "location": 152,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TransitionChoice.__init__": {
            "name": "__init__",
            "location": 187,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "choices": [
                    "list[typing.Union[str,str,str,str,str,str,str]]",
                    "str",
                    "typing.Sequence['cirq.Qid']",
                    "tuple[int]",
                    "list[int]",
                    "list[tuple[]]"
                ],
                "transitions": [
                    "tuple[float]"
                ],
                "repetitions": [
                    "None",
                    "str",
                    "bool",
                    "float",
                    "dict[, ]"
                ],
                "ordered": [
                    "bool"
                ]
            }
        },
        "TransitionChoice._internal_set_standardized_data": {
            "name": "_internal_set_standardized_data",
            "location": 213,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict[, ]",
                    "bool",
                    "list[str]",
                    "str"
                ],
                "reference": [
                    "typing.Any",
                    "None",
                    "typing.Type",
                    "str",
                    "dict[str, typing.Any]",
                    "bytes"
                ]
            }
        },
        "TransitionChoice._internal_get_standardized_data": {
            "name": "_internal_get_standardized_data",
            "location": 219,
            "return": [],
            "arguments": {
                "self": [],
                "reference": [
                    "typing.Callable[, ]",
                    "typing.Type",
                    "None",
                    "str",
                    "typing.Iterable[str]",
                    "bool"
                ]
            }
        },
        "TransitionChoice.transitions": {
            "name": "transitions",
            "location": 224,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TransitionChoice.mutate": {
            "name": "mutate",
            "location": 227,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "nevergrad-main/nevergrad/parametrization/container.py": {
        "Container.__init__": {
            "name": "__init__",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Container.dimension": {
            "name": "dimension",
            "location": 44,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Container._sanity_check": {
            "name": "_sanity_check",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parameters": []
            }
        },
        "Container.__getitem__": {
            "name": "__getitem__",
            "location": 57,
            "return": [],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "Container.__setitem__": {
            "name": "__setitem__",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "list[tuple[typing.Union[str,int]]]"
                ],
                "value": [
                    "str"
                ]
            }
        },
        "Container.__len__": {
            "name": "__len__",
            "location": 67,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Container._get_parameters_str": {
            "name": "_get_parameters_str",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Container._get_name": {
            "name": "_get_name",
            "location": 73,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "Container.get_value_hash": {
            "name": "get_value_hash",
            "location": 76,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Container._internal_get_standardized_data": {
            "name": "_internal_get_standardized_data",
            "location": 79,
            "return": [],
            "arguments": {
                "self": [],
                "reference": [
                    "tuple['cirq.Qid']",
                    "dict[, ]"
                ]
            }
        },
        "Container._internal_set_standardized_data": {
            "name": "_internal_set_standardized_data",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [],
                "reference": [
                    "dict[, ]",
                    "dict[str, typing.Any]",
                    "list[dict[str, typing.Any]]"
                ]
            }
        },
        "Container._layered_sample": {
            "name": "_layered_sample",
            "location": 105,
            "return": [
                "dict[, ]",
                "str",
                "typing.Counter",
                "int",
                "list[dict[str, str]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Container._layered_recombine": {
            "name": "_layered_recombine",
            "location": 110,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Dict.__iter__": {
            "name": "__iter__",
            "location": 133,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Dict.keys": {
            "name": "keys",
            "location": 136,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Dict.items": {
            "name": "items",
            "location": 139,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Dict.values": {
            "name": "values",
            "location": 142,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Dict._layered_get_value": {
            "name": "_layered_get_value",
            "location": 145,
            "return": [
                "dict[, ]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Dict._layered_set_value": {
            "name": "_layered_set_value",
            "location": 148,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "dict[str, typing.Any]"
                ]
            }
        },
        "Dict._get_parameters_str": {
            "name": "_get_parameters_str",
            "location": 159,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Tuple.__init__": {
            "name": "__init__",
            "location": 183,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Tuple._get_parameters_str": {
            "name": "_get_parameters_str",
            "location": 188,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Tuple.__iter__": {
            "name": "__iter__",
            "location": 191,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Tuple._layered_get_value": {
            "name": "_layered_get_value",
            "location": 196,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Tuple._layered_set_value": {
            "name": "_layered_set_value",
            "location": 199,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "Instrumentation.__init__": {
            "name": "__init__",
            "location": 231,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Instrumentation.args": {
            "name": "args",
            "location": 236,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Instrumentation.kwargs": {
            "name": "kwargs",
            "location": 240,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "nevergrad-main/nevergrad/parametrization/core.py": {
        "default_congruence": {
            "name": "default_congruence",
            "location": 23,
            "return": [
                "int",
                "str",
                "list[float]"
            ],
            "arguments": {
                "x": [
                    "int",
                    "str",
                    "list[float]"
                ]
            }
        },
        "as_parameter": {
            "name": "as_parameter",
            "location": 512,
            "return": [
                "Parameter",
                "Constant"
            ],
            "arguments": {
                "param": []
            }
        },
        "Parameter.__init__": {
            "name": "__init__",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Parameter.losses": {
            "name": "losses",
            "location": 75,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Parameter.args": {
            "name": "args",
            "location": 91,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Parameter.kwargs": {
            "name": "kwargs",
            "location": 99,
            "return": [
                "dict[, ]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Parameter.dimension": {
            "name": "dimension",
            "location": 107,
            "return": [
                "int",
                "float",
                "list[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Parameter.mutate": {
            "name": "mutate",
            "location": 118,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Parameter._layered_mutate": {
            "name": "_layered_mutate",
            "location": 124,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Parameter.sample": {
            "name": "sample",
            "location": 127,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Parameter.recombine": {
            "name": "recombine",
            "location": 141,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Parameter.get_standardized_data": {
            "name": "get_standardized_data",
            "location": 157,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Parameter._internal_get_standardized_data": {
            "name": "_internal_get_standardized_data",
            "location": 187,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "reference": [
                    "None",
                    "list[str]",
                    "int",
                    "str"
                ]
            }
        },
        "Parameter.set_standardized_data": {
            "name": "set_standardized_data",
            "location": 192,
            "return": [
                "Parameter"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict[, ]",
                    "dict[str, typing.Any]",
                    "bytes"
                ]
            }
        },
        "Parameter._internal_set_standardized_data": {
            "name": "_internal_set_standardized_data",
            "location": 221,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "str",
                    "dict[, ]"
                ],
                "reference": [
                    "bool",
                    "typing.Mapping",
                    "None",
                    "typing.Iterable[bytes]"
                ]
            }
        },
        "Parameter.generation": {
            "name": "generation",
            "location": 232,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Parameter.get_value_hash": {
            "name": "get_value_hash",
            "location": 236,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Parameter.__repr__": {
            "name": "__repr__",
            "location": 248,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Parameter.__bool__": {
            "name": "__bool__",
            "location": 254,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Parameter.satisfies_constraints": {
            "name": "satisfies_constraints",
            "location": 258,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "ref": [
                    "None",
                    "typing.Sequence[dict[, ]]",
                    "dict[str, typing.Any]"
                ],
                "no_tabu": [
                    "bool"
                ]
            }
        },
        "Parameter.specify_tabu_length": {
            "name": "specify_tabu_length",
            "location": 304,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tabu_length": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ]
            }
        },
        "Parameter.register_cheap_constraint": {
            "name": "register_cheap_constraint",
            "location": 310,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "func": [],
                "as_layer": [
                    "bool"
                ]
            }
        },
        "Parameter.random_state": {
            "name": "random_state",
            "location": 361,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "random_state": []
            }
        },
        "Parameter._set_random_state": {
            "name": "_set_random_state",
            "location": 364,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "random_state": [
                    "bool",
                    "tuple[typing.Union[str,str]]",
                    "list[int]"
                ]
            }
        },
        "Parameter.spawn_child": {
            "name": "spawn_child",
            "location": 368,
            "return": [],
            "arguments": {
                "self": [],
                "new_value": [
                    "None",
                    "str",
                    "int"
                ]
            }
        },
        "Parameter.copy": {
            "name": "copy",
            "location": 392,
            "return": [
                "dict[str, typing.Any]",
                "dict[, ]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Parameter._set_parenthood": {
            "name": "_set_parenthood",
            "location": 421,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parent": [
                    "str",
                    "None",
                    "typing.Callable[, ]",
                    "typing.Type",
                    "tuple[typing.Union[list[str],str,None]]"
                ]
            }
        },
        "Parameter.freeze": {
            "name": "freeze",
            "location": 432,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Parameter._check_frozen": {
            "name": "_check_frozen",
            "location": 437,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Constant.__init__": {
            "name": "__init__",
            "location": 462,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "int",
                    "float",
                    "None",
                    "str",
                    "dict[str, str]"
                ]
            }
        },
        "Constant._get_name": {
            "name": "_get_name",
            "location": 468,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Constant.get_value_hash": {
            "name": "get_value_hash",
            "location": 471,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "Constant._layered_get_value": {
            "name": "_layered_get_value",
            "location": 477,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Constant._layered_set_value": {
            "name": "_layered_set_value",
            "location": 480,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "float",
                    "str",
                    "int",
                    "None",
                    "typing.Iterable[object]"
                ]
            }
        },
        "Constant._layered_sample": {
            "name": "_layered_sample",
            "location": 492,
            "return": [
                "Constant"
            ],
            "arguments": {
                "self": []
            }
        },
        "Constant.get_standardized_data": {
            "name": "get_standardized_data",
            "location": 495,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Constant.spawn_child": {
            "name": "spawn_child",
            "location": 500,
            "return": [
                "Constant"
            ],
            "arguments": {
                "self": [],
                "new_value": [
                    "None",
                    "typing.Callable[..., None]",
                    "list[]",
                    "int",
                    "str",
                    "dict[str, list[float]]"
                ]
            }
        },
        "Constant.recombine": {
            "name": "recombine",
            "location": 505,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Constant.mutate": {
            "name": "mutate",
            "location": 508,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MultiobjectiveReference.__init__": {
            "name": "__init__",
            "location": 524,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parameter": [
                    "None",
                    "typing.Type",
                    "str",
                    "dict[, ]"
                ]
            }
        },
        "Operator.__call__": {
            "name": "__call__",
            "location": 538,
            "return": [],
            "arguments": {
                "self": [],
                "parameter": []
            }
        }
    },
    "nevergrad-main/nevergrad/parametrization/data.py": {
        "_param_string": {
            "name": "_param_string",
            "location": 25,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "parameters": []
            }
        },
        "_fix_legacy": {
            "name": "_fix_legacy",
            "location": 385,
            "return": [
                "None"
            ],
            "arguments": {
                "parameter": []
            }
        },
        "Data.__init__": {
            "name": "__init__",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Data.bounds": {
            "name": "bounds",
            "location": 118,
            "return": [
                "tuple[None]",
                "tuple[]",
                "tuple[typing.Union[typing.Literal,typing.Literal]]",
                "list[str]",
                "dict[str, str]",
                "str",
                "dict[, ]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Data.dimension": {
            "name": "dimension",
            "location": 138,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Data._get_name": {
            "name": "_get_name",
            "location": 141,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Data.sigma": {
            "name": "sigma",
            "location": 155,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Data._layered_sample": {
            "name": "_layered_sample",
            "location": 159,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Data.set_bounds": {
            "name": "set_bounds",
            "location": 168,
            "return": [
                "Data"
            ],
            "arguments": {
                "self": [],
                "lower": [
                    "None",
                    "bool"
                ],
                "upper": [
                    "None",
                    "bool"
                ],
                "method": [
                    "typing.Text"
                ],
                "full_range_sampling": [
                    "None",
                    "bool"
                ]
            }
        },
        "Data.set_mutation": {
            "name": "set_mutation",
            "location": 233,
            "return": [
                "Data"
            ],
            "arguments": {
                "self": [],
                "sigma": [
                    "None",
                    "int",
                    "float"
                ],
                "exponent": [
                    "float",
                    "None",
                    "int"
                ]
            }
        },
        "Data.set_integer_casting": {
            "name": "set_integer_casting",
            "location": 280,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Data.integer": {
            "name": "integer",
            "location": 296,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Data._internal_set_standardized_data": {
            "name": "_internal_set_standardized_data",
            "location": 300,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "str",
                    "list[]",
                    "dict[, ]",
                    "dict[str, typing.Any]"
                ],
                "reference": []
            }
        },
        "Data._internal_get_standardized_data": {
            "name": "_internal_get_standardized_data",
            "location": 308,
            "return": [],
            "arguments": {
                "self": [],
                "reference": [
                    "dict[str, str]",
                    "list[]",
                    "float",
                    "typing.Callable[, ]"
                ]
            }
        },
        "Data._to_reduced_space": {
            "name": "_to_reduced_space",
            "location": 311,
            "return": [],
            "arguments": {
                "self": [],
                "value": [
                    "None",
                    "str",
                    "bytes",
                    "dict[, ]",
                    "float",
                    "bool"
                ]
            }
        },
        "Data._layered_recombine": {
            "name": "_layered_recombine",
            "location": 321,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Data.copy": {
            "name": "copy",
            "location": 327,
            "return": [
                "list[D]",
                "None",
                "bool",
                "tuple[typing.Union[typing.Any,typing.Any,typing.Any]]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Data._layered_set_value": {
            "name": "_layered_set_value",
            "location": 332,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "int"
                ]
            }
        },
        "Data._layered_get_value": {
            "name": "_layered_get_value",
            "location": 340,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Data._new_with_data_layer": {
            "name": "_new_with_data_layer",
            "location": 343,
            "return": [
                "str",
                "dict[, ]",
                "dict[str, typing.Any]"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "bool"
                ]
            }
        },
        "Data.__mod__": {
            "name": "__mod__",
            "location": 351,
            "return": [],
            "arguments": {
                "self": [],
                "module": [
                    "str",
                    "typing.Mapping",
                    "set[str]"
                ]
            }
        },
        "Data.__rpow__": {
            "name": "__rpow__",
            "location": 354,
            "return": [],
            "arguments": {
                "self": [],
                "base": [
                    "str",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "Data.__add__": {
            "name": "__add__",
            "location": 357,
            "return": [],
            "arguments": {
                "self": [],
                "offset": [
                    "str",
                    "float",
                    "None",
                    "dict[, ]",
                    "list[numpy.ndarray]",
                    "list[dict[str, typing.Any]]",
                    "bool"
                ]
            }
        },
        "Data.__sub__": {
            "name": "__sub__",
            "location": 360,
            "return": [],
            "arguments": {
                "self": [],
                "offset": [
                    "int"
                ]
            }
        },
        "Data.__radd__": {
            "name": "__radd__",
            "location": 363,
            "return": [],
            "arguments": {
                "self": [],
                "offset": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ]
            }
        },
        "Data.__mul__": {
            "name": "__mul__",
            "location": 366,
            "return": [],
            "arguments": {
                "self": [],
                "value": [
                    "dict[, ]",
                    "typing.Iterator",
                    "dict[str, str]",
                    "str",
                    "int"
                ]
            }
        },
        "Data.__rmul__": {
            "name": "__rmul__",
            "location": 369,
            "return": [],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "list[float]",
                    "bool",
                    "typing.Any",
                    "float"
                ]
            }
        },
        "Data.__truediv__": {
            "name": "__truediv__",
            "location": 372,
            "return": [],
            "arguments": {
                "self": [],
                "value": [
                    "bool",
                    "float"
                ]
            }
        },
        "Data.__rtruediv__": {
            "name": "__rtruediv__",
            "location": 375,
            "return": [
                "float",
                "int",
                "str",
                "tuple[typing.Union[int,int]]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "float",
                    "int",
                    "str",
                    "tuple[typing.Union[int,int]]"
                ]
            }
        },
        "Data.__pow__": {
            "name": "__pow__",
            "location": 378,
            "return": [],
            "arguments": {
                "self": [],
                "power": [
                    "str",
                    "float",
                    "None",
                    "bool"
                ]
            }
        },
        "Data.__neg__": {
            "name": "__neg__",
            "location": 381,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Scalar.__init__": {
            "name": "__init__",
            "location": 459,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "init": [
                    "None",
                    "tuple[typing.Any]",
                    "dict[, ]",
                    "int",
                    "dict[str, str]",
                    "dict[str, Exception]",
                    "float",
                    "dict[int, dict[str, str]]"
                ]
            }
        },
        "Log.__init__": {
            "name": "__init__",
            "location": 505,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "nevergrad-main/nevergrad/parametrization/discretization.py": {
        "threshold_discretization": {
            "name": "threshold_discretization",
            "location": 17,
            "return": [],
            "arguments": {
                "x": [
                    "float"
                ],
                "arity": [
                    "int"
                ]
            }
        },
        "inverse_threshold_discretization": {
            "name": "inverse_threshold_discretization",
            "location": 43,
            "return": [],
            "arguments": {
                "indexes": [
                    "typing.Iterable[]",
                    "bytes"
                ],
                "arity": [
                    "int"
                ]
            }
        },
        "noisy_inverse_threshold_discretization": {
            "name": "noisy_inverse_threshold_discretization",
            "location": 56,
            "return": [],
            "arguments": {
                "indexes": [
                    "typing.Iterable[]",
                    "bytes"
                ],
                "arity": [
                    "int"
                ],
                "gen": []
            }
        },
        "weight_for_reset": {
            "name": "weight_for_reset",
            "location": 65,
            "return": [
                "float"
            ],
            "arguments": {
                "arity": [
                    "float",
                    "int"
                ]
            }
        },
        "Encoder.__init__": {
            "name": "__init__",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "weights": [
                    "list[int]",
                    "str",
                    "int",
                    "list[list[int]]"
                ],
                "rng": [
                    "int",
                    "float"
                ]
            }
        },
        "Encoder.probabilities": {
            "name": "probabilities",
            "location": 98,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Encoder.encode": {
            "name": "encode",
            "location": 118,
            "return": [],
            "arguments": {
                "self": [],
                "deterministic": [
                    "bool"
                ]
            }
        }
    },
    "nevergrad-main/nevergrad/parametrization/helpers.py": {
        "flatten": {
            "name": "flatten",
            "location": 20,
            "return": [
                "list[tuple[typing.Union[typing.Text,dict[, ],collections.abc.Awaitable[]]]]"
            ],
            "arguments": {
                "parameter": [
                    "dict[, ]",
                    "str",
                    "collections.abc.Awaitable[]"
                ],
                "with_containers": [
                    "bool"
                ],
                "order": [
                    "int"
                ]
            }
        },
        "list_data": {
            "name": "list_data",
            "location": 74,
            "return": [
                "list[]"
            ],
            "arguments": {
                "parameter": [
                    "str",
                    "set[str]",
                    "dict[int, str]"
                ]
            }
        },
        "analyze": {
            "name": "analyze",
            "location": 109,
            "return": [
                "ParameterInfo"
            ],
            "arguments": {
                "parameter": [
                    "bool",
                    "str",
                    "dict[, ]"
                ]
            }
        },
        "deterministic_sampling": {
            "name": "deterministic_sampling",
            "location": 124,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "parameter": [
                    "typing.Mapping",
                    "float",
                    "int"
                ]
            }
        },
        "_fully_bounded_layers": {
            "name": "_fully_bounded_layers",
            "location": 147,
            "return": [
                "list[str]"
            ],
            "arguments": {
                "data": [
                    "dict[str, typing.Any]",
                    "str",
                    "dict[str, dict[str, typing.Any]]",
                    "list[dict[str, typing.Any]]"
                ]
            }
        },
        "Normalizer.__init__": {
            "name": "__init__",
            "location": 166,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "reference": [],
                "unbounded_transform": [
                    "None",
                    "typing.Sequence[S]",
                    "dict[str, typing.Any]"
                ],
                "only_sampling": [
                    "bool"
                ]
            }
        },
        "Normalizer._warn": {
            "name": "_warn",
            "location": 193,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Normalizer.backward": {
            "name": "backward",
            "location": 199,
            "return": [],
            "arguments": {
                "self": [],
                "x": []
            }
        },
        "Normalizer.forward": {
            "name": "forward",
            "location": 203,
            "return": [],
            "arguments": {
                "self": [],
                "x": [
                    "bool"
                ]
            }
        },
        "Normalizer._apply": {
            "name": "_apply",
            "location": 207,
            "return": [],
            "arguments": {
                "self": [],
                "x": [
                    "int",
                    "float",
                    "tuple[typing.Union[numpy.ndarray,numpy.ndarray]]"
                ],
                "forward": [
                    "bool"
                ]
            }
        },
        "Normalizer._apply_unsafe": {
            "name": "_apply_unsafe",
            "location": 219,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "int"
                ],
                "forward": [
                    "bool"
                ]
            }
        }
    },
    "nevergrad-main/nevergrad/parametrization/instantiate.py": {
        "_convert_to_string": {
            "name": "_convert_to_string",
            "location": 22,
            "return": [],
            "arguments": {
                "data": [],
                "extension": []
            }
        },
        "symlink_folder_tree": {
            "name": "symlink_folder_tree",
            "location": 78,
            "return": [],
            "arguments": {
                "folder": [],
                "shadow_folder": []
            }
        },
        "uncomment_line": {
            "name": "uncomment_line",
            "location": 93,
            "return": [],
            "arguments": {
                "line": [],
                "extension": []
            }
        },
        "get_last_line_as_float": {
            "name": "get_last_line_as_float",
            "location": 307,
            "return": [],
            "arguments": {
                "output": []
            }
        },
        "Placeholder.__init__": {
            "name": "__init__",
            "location": 40,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "comment": []
            }
        },
        "Placeholder.finditer": {
            "name": "finditer",
            "location": 45,
            "return": [],
            "arguments": {
                "cls": [],
                "text": []
            }
        },
        "Placeholder.__repr__": {
            "name": "__repr__",
            "location": 49,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Placeholder.__eq__": {
            "name": "__eq__",
            "location": 52,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Placeholder.sub": {
            "name": "sub",
            "location": 58,
            "return": [],
            "arguments": {
                "cls": [],
                "text": [],
                "extension": [],
                "replacers": []
            }
        },
        "FileTextFunction.__init__": {
            "name": "__init__",
            "location": 117,
            "return": [],
            "arguments": {
                "self": [],
                "filepath": []
            }
        },
        "FileTextFunction.__call__": {
            "name": "__call__",
            "location": 146,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FileTextFunction.__repr__": {
            "name": "__repr__",
            "location": 150,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FolderInstantiator.__init__": {
            "name": "__init__",
            "location": 175,
            "return": [],
            "arguments": {
                "self": [],
                "folder": [],
                "clean_copy": []
            }
        },
        "FolderInstantiator.__repr__": {
            "name": "__repr__",
            "location": 197,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FolderInstantiator.placeholders": {
            "name": "placeholders",
            "location": 201,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FolderInstantiator.instantiate_to_folder": {
            "name": "instantiate_to_folder",
            "location": 204,
            "return": [],
            "arguments": {
                "self": [],
                "outfolder": [],
                "kwargs": []
            }
        },
        "FolderInstantiator.instantiate": {
            "name": "instantiate",
            "location": 218,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FolderFunction.__init__": {
            "name": "__init__",
            "location": 265,
            "return": [],
            "arguments": {
                "self": [],
                "folder": [],
                "command": [],
                "verbose": [],
                "clean_copy": []
            }
        },
        "FolderFunction.register_file_type": {
            "name": "register_file_type",
            "location": 279,
            "return": [],
            "arguments": {
                "suffix": [],
                "comment_chars": []
            }
        },
        "FolderFunction.placeholders": {
            "name": "placeholders",
            "location": 287,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FolderFunction.__call__": {
            "name": "__call__",
            "location": 290,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Placeholder.sub._replacer": {
            "name": "_replacer",
            "location": 62,
            "return": [],
            "arguments": {
                "regex": []
            }
        }
    },
    "nevergrad-main/nevergrad/parametrization/mutation.py": {
        "_make_slices": {
            "name": "_make_slices",
            "location": 208,
            "return": [
                "list[range]"
            ],
            "arguments": {
                "shape": [],
                "axes": [
                    "int",
                    "tuple[int]",
                    "list[A]"
                ],
                "size": [
                    "int"
                ],
                "rng": []
            }
        },
        "rolling_mean": {
            "name": "rolling_mean",
            "location": 314,
            "return": [],
            "arguments": {
                "vector": [],
                "window": [
                    "int"
                ]
            }
        },
        "Mutation.root": {
            "name": "root",
            "location": 31,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Mutation._check_type": {
            "name": "_check_type",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "param": [
                    "str",
                    "list[str]"
                ]
            }
        },
        "Mutation.__call__": {
            "name": "__call__",
            "location": 42,
            "return": [],
            "arguments": {
                "self": [],
                "parameter": [],
                "inplace": [
                    "bool"
                ]
            }
        },
        "DataMutation.__init__": {
            "name": "__init__",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataMutation.root": {
            "name": "root",
            "location": 56,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DataMutation._on_layer_added": {
            "name": "_on_layer_added",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MutationChoice.__init__": {
            "name": "__init__",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mutations": [
                    "str"
                ],
                "with_default": [
                    "bool"
                ]
            }
        },
        "MutationChoice._on_layer_added": {
            "name": "_on_layer_added",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MutationChoice._select": {
            "name": "_select",
            "location": 86,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MutationChoice._layered_recombine": {
            "name": "_layered_recombine",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MutationChoice._layered_mutate": {
            "name": "_layered_mutate",
            "location": 95,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Cauchy._layered_mutate": {
            "name": "_layered_mutate",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Crossover.__init__": {
            "name": "__init__",
            "location": 135,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "axis": [
                    "None",
                    "int",
                    "list[str]",
                    "float"
                ],
                "max_size": [
                    "None",
                    "int"
                ],
                "fft": [
                    "bool"
                ]
            }
        },
        "Crossover.axis": {
            "name": "axis",
            "location": 146,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Crossover._layered_recombine": {
            "name": "_layered_recombine",
            "location": 149,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Crossover._apply_array": {
            "name": "_apply_array",
            "location": 157,
            "return": [
                "list[tuple[typing.Union[typing.Any,typing.Any]]]",
                "list[]",
                "tuple[]",
                "list[typing.Type]",
                "list[list[float]]"
            ],
            "arguments": {
                "self": [],
                "arrays": []
            }
        },
        "RavelCrossover.__init__": {
            "name": "__init__",
            "location": 196,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "max_size": [
                    "None",
                    "int"
                ]
            }
        },
        "RavelCrossover._apply_array": {
            "name": "_apply_array",
            "location": 202,
            "return": [],
            "arguments": {
                "self": [],
                "arrays": [
                    "list[str]"
                ]
            }
        },
        "Translation.__init__": {
            "name": "__init__",
            "location": 224,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "axis": [
                    "None",
                    "str",
                    "float"
                ]
            }
        },
        "Translation.axes": {
            "name": "axes",
            "location": 230,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Translation._layered_mutate": {
            "name": "_layered_mutate",
            "location": 233,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Translation._apply_array": {
            "name": "_apply_array",
            "location": 237,
            "return": [],
            "arguments": {
                "self": [],
                "arrays": [
                    "list[typing.Deque]",
                    "bytes",
                    "str"
                ]
            }
        },
        "AxisSlicedArray.__init__": {
            "name": "__init__",
            "location": 246,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "array": [
                    "int",
                    "float"
                ],
                "axis": [
                    "int",
                    "float"
                ]
            }
        },
        "AxisSlicedArray.__getitem__": {
            "name": "__getitem__",
            "location": 250,
            "return": [],
            "arguments": {
                "self": [],
                "slice_": [
                    "int",
                    "list[set[int]]",
                    "None"
                ]
            }
        },
        "Jumping.__init__": {
            "name": "__init__",
            "location": 259,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "axis": [
                    "int"
                ],
                "size": [
                    "int"
                ]
            }
        },
        "Jumping.axis": {
            "name": "axis",
            "location": 263,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Jumping.size": {
            "name": "size",
            "location": 267,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Jumping._layered_mutate": {
            "name": "_layered_mutate",
            "location": 270,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Jumping._apply_array": {
            "name": "_apply_array",
            "location": 274,
            "return": [],
            "arguments": {
                "self": [],
                "arrays": [
                    "list[typing.Deque]",
                    "bytes",
                    "str"
                ]
            }
        },
        "LocalGaussian.__init__": {
            "name": "__init__",
            "location": 290,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "size": [
                    "int",
                    "str"
                ],
                "axes": [
                    "None",
                    "int",
                    "list[sideeye.data.fixation.Fixation]"
                ]
            }
        },
        "LocalGaussian.axes": {
            "name": "axes",
            "location": 298,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LocalGaussian._layered_mutate": {
            "name": "_layered_mutate",
            "location": 301,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "nevergrad-main/nevergrad/parametrization/parameter.py": {},
    "nevergrad-main/nevergrad/parametrization/test_discretization.py": {
        "test_thresholding_discretization": {
            "name": "test_thresholding_discretization",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "arity": [
                    "bytes",
                    "str",
                    "typing.Callable[bytes, bytes]"
                ],
                "data": [
                    "bytes",
                    "str",
                    "typing.Callable[bytes, bytes]"
                ],
                "expected": [
                    "list[float]",
                    "float",
                    "int",
                    "dict[str, typing.Any]",
                    "bytes"
                ]
            }
        },
        "test_inverse_threshold_discretization": {
            "name": "test_inverse_threshold_discretization",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_encoder_probabilities": {
            "name": "test_encoder_probabilities",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_encoder": {
            "name": "test_encoder",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "nevergrad-main/nevergrad/parametrization/test_instantiate.py": {
        "test_symlink_folder_tree": {
            "name": "test_symlink_folder_tree",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "_check_uncomment_line": {
            "name": "_check_uncomment_line",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "line": [
                    "int",
                    "str",
                    "list[str]",
                    "float",
                    "dict[str, list[typing.Any]]"
                ],
                "ext": [
                    "int",
                    "str",
                    "list[str]",
                    "float",
                    "dict[str, list[typing.Any]]"
                ],
                "expected": [
                    "str",
                    "typing.Sequence[str]",
                    "list[str]"
                ]
            }
        },
        "test_uncomment_line": {
            "name": "test_uncomment_line",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "line": [
                    "str"
                ],
                "ext": [
                    "str"
                ],
                "expected": [
                    "str"
                ]
            }
        },
        "test_uncomment_line_custom_file_type": {
            "name": "test_uncomment_line_custom_file_type",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "line": [
                    "str"
                ],
                "ext": [
                    "str"
                ],
                "comment": [
                    "str",
                    "dict[, ]",
                    "int",
                    "None"
                ],
                "expected": [
                    "str"
                ]
            }
        },
        "test_folder_instantiator": {
            "name": "test_folder_instantiator",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "clean_copy": []
            }
        },
        "test_placeholder": {
            "name": "test_placeholder",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "text": [
                    "str",
                    "bytes",
                    "None",
                    "int"
                ],
                "name_comments": [
                    "list[tuple[typing.Union[str,typing.Any]]]",
                    "bytes",
                    "bytearray",
                    "str",
                    "list[int]"
                ]
            }
        },
        "test_placeholder_for_array": {
            "name": "test_placeholder_for_array",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {
                "extension": [
                    "str",
                    "None",
                    "dict[str, typing.Any]"
                ],
                "expected": [
                    "str",
                    "None",
                    "list[str]"
                ]
            }
        },
        "test_placeholder_substitution": {
            "name": "test_placeholder_substitution",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_file_text_function": {
            "name": "test_file_text_function",
            "location": 113,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_folder_function": {
            "name": "test_folder_function",
            "location": 119,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_folder_function_doc": {
            "name": "test_folder_function_doc",
            "location": 130,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "nevergrad-main/nevergrad/parametrization/test_layers.py": {
        "test_scalar_module": {
            "name": "test_scalar_module",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_bound_module": {
            "name": "test_bound_module",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_log_layer": {
            "name": "test_log_layer",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_add_layer": {
            "name": "test_add_layer",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_multiply_layer": {
            "name": "test_multiply_layer",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_power": {
            "name": "test_power",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_log_sampling": {
            "name": "test_log_sampling",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "log": [
                    "str",
                    "int",
                    "bytes",
                    "None"
                ]
            }
        },
        "test_clipping_standardized_data": {
            "name": "test_clipping_standardized_data",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_bound_estimation": {
            "name": "test_bound_estimation",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_softmax_layer": {
            "name": "test_softmax_layer",
            "location": 97,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_deterministic_softmax_layer": {
            "name": "test_deterministic_softmax_layer",
            "location": 112,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_temporary_deterinistic_softmax_layer": {
            "name": "test_temporary_deterinistic_softmax_layer",
            "location": 119,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_bounded_int_casting": {
            "name": "test_bounded_int_casting",
            "location": 136,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_rand_int_casting": {
            "name": "test_rand_int_casting",
            "location": 144,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_angles": {
            "name": "test_angles",
            "location": 153,
            "return": [
                "None"
            ],
            "arguments": {
                "deg": [
                    "str",
                    "bool",
                    "typing.Iterable[typing.Any]"
                ],
                "bound_method": [
                    "tuple[int]",
                    "int",
                    "float"
                ]
            }
        }
    },
    "nevergrad-main/nevergrad/parametrization/test_mutation.py": {
        "test_crossover": {
            "name": "test_crossover",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "fft": [
                    "str",
                    "int"
                ],
                "expected": [
                    "str",
                    "dict[, ]"
                ]
            }
        },
        "test_ravel_crossover": {
            "name": "test_ravel_crossover",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_ravel_crossover_array": {
            "name": "test_ravel_crossover_array",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_local_gaussian": {
            "name": "test_local_gaussian",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_choice": {
            "name": "test_choice",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_cauchy": {
            "name": "test_cauchy",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_translation": {
            "name": "test_translation",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_jump": {
            "name": "test_jump",
            "location": 95,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_crossover_axis": {
            "name": "test_crossover_axis",
            "location": 121,
            "return": [
                "None"
            ],
            "arguments": {
                "axis": [
                    "tuple[typing.Union[int,...]]",
                    "None",
                    "int",
                    "float"
                ],
                "max_size": [
                    "tuple[typing.Union[int,...]]",
                    "None",
                    "int",
                    "float"
                ]
            }
        },
        "test_rolling_mean": {
            "name": "test_rolling_mean",
            "location": 139,
            "return": [
                "None"
            ],
            "arguments": {
                "window": [
                    "int",
                    "float",
                    "typing.Iterable[list[str]]"
                ],
                "expected": [
                    "list[int]",
                    "int",
                    "list[float]",
                    "list[str]",
                    "str"
                ]
            }
        }
    },
    "nevergrad-main/nevergrad/parametrization/test_parameter.py": {
        "test_array_basics": {
            "name": "test_array_basics",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_empty_parameters": {
            "name": "test_empty_parameters",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "param": []
            }
        },
        "_true": {
            "name": "_true",
            "location": 52,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "test_parameters_basic_features": {
            "name": "test_parameters_basic_features",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "param": [
                    "str"
                ]
            }
        },
        "check_parameter_features": {
            "name": "check_parameter_features",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "param": []
            }
        },
        "check_parameter_freezable": {
            "name": "check_parameter_freezable",
            "location": 158,
            "return": [
                "None"
            ],
            "arguments": {
                "param": []
            }
        },
        "test_parameter_names": {
            "name": "test_parameter_names",
            "location": 201,
            "return": [
                "None"
            ],
            "arguments": {
                "param": [
                    "str"
                ],
                "name": [
                    "str"
                ]
            }
        },
        "test_parameter_analysis": {
            "name": "test_parameter_analysis",
            "location": 220,
            "return": [
                "None"
            ],
            "arguments": {
                "param": [
                    "bool",
                    "str",
                    "dict[str, float]"
                ],
                "continuous": [
                    "bool",
                    "str",
                    "dict[str, float]"
                ],
                "deterministic": [
                    "bool",
                    "str",
                    "dict[str, float]"
                ],
                "ordered": [
                    "bool",
                    "str",
                    "dict[str, float]"
                ]
            }
        },
        "test_instrumentation": {
            "name": "test_instrumentation",
            "location": 229,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_scalar_and_mutable_sigma": {
            "name": "test_scalar_and_mutable_sigma",
            "location": 240,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_array_recombination": {
            "name": "test_array_recombination",
            "location": 254,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "_false": {
            "name": "_false",
            "location": 267,
            "return": [
                "bool"
            ],
            "arguments": {
                "value": [
                    "float",
                    "tuple['T']",
                    "bytes"
                ]
            }
        },
        "test_endogeneous_constraint": {
            "name": "test_endogeneous_constraint",
            "location": 271,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "_return_val": {
            "name": "_return_val",
            "location": 277,
            "return": [
                "str",
                "bool",
                "float"
            ],
            "arguments": {
                "val": [
                    "str",
                    "bool",
                    "float"
                ]
            }
        },
        "test_float_constraint": {
            "name": "test_float_constraint",
            "location": 282,
            "return": [
                "None"
            ],
            "arguments": {
                "val": [
                    "str",
                    "dict[, ]"
                ],
                "expected": [
                    "str",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "test_constraints": {
            "name": "test_constraints",
            "location": 289,
            "return": [
                "None"
            ],
            "arguments": {
                "name": [
                    "str",
                    "float",
                    "int",
                    "None"
                ]
            }
        },
        "test_scalar_sampling": {
            "name": "test_scalar_sampling",
            "location": 313,
            "return": [
                "None"
            ],
            "arguments": {
                "param": [
                    "str",
                    "int",
                    "list[str]"
                ],
                "expected": [
                    "str",
                    "typing.Mapping",
                    "int",
                    "bytes",
                    "list[]"
                ]
            }
        },
        "test_log": {
            "name": "test_log",
            "location": 320,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_bounded_scalar": {
            "name": "test_bounded_scalar",
            "location": 334,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_ordered_choice": {
            "name": "test_ordered_choice",
            "location": 343,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_transition_choice_bin": {
            "name": "test_transition_choice_bin",
            "location": 355,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_ordered_choice_weird_values": {
            "name": "test_ordered_choice_weird_values",
            "location": 368,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_choice_repetitions": {
            "name": "test_choice_repetitions",
            "location": 376,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_transition_choice_repetitions": {
            "name": "test_transition_choice_repetitions",
            "location": 386,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_integer_casting_array": {
            "name": "test_integer_casting_array",
            "location": 397,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_array_bounded_initialization": {
            "name": "test_array_bounded_initialization",
            "location": 404,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_array_sampling": {
            "name": "test_array_sampling",
            "location": 418,
            "return": [
                "None"
            ],
            "arguments": {
                "method": [
                    "str"
                ],
                "exponent": [
                    "float",
                    "str",
                    "bool"
                ],
                "sigma": [
                    "float",
                    "str",
                    "bool"
                ]
            }
        },
        "test_parenthood": {
            "name": "test_parenthood",
            "location": 431,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_random_state_initialization": {
            "name": "test_random_state_initialization",
            "location": 440,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "nevergrad-main/nevergrad/parametrization/test_parameters_legacy.py": {
        "test_instrumentation_set_standardized_data": {
            "name": "test_instrumentation_set_standardized_data",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_instrumentation": {
            "name": "test_instrumentation",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "_false": {
            "name": "_false",
            "location": 73,
            "return": [
                "bool"
            ],
            "arguments": {
                "value": [
                    "float",
                    "tuple['T']",
                    "bytes"
                ]
            }
        },
        "test_instrumentation_copy": {
            "name": "test_instrumentation_copy",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_instrumentation_init_error": {
            "name": "test_instrumentation_init_error",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_softmax_categorical_deterministic": {
            "name": "test_softmax_categorical_deterministic",
            "location": 97,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_softmax_categorical": {
            "name": "test_softmax_categorical",
            "location": 102,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_ordered_discrete": {
            "name": "test_ordered_discrete",
            "location": 113,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_scalar": {
            "name": "test_scalar",
            "location": 124,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_log": {
            "name": "test_log",
            "location": 133,
            "return": [
                "None"
            ],
            "arguments": {
                "value": [
                    "int",
                    "dict[str, typing.Any]",
                    "float"
                ],
                "expected": [
                    "float",
                    "int",
                    "list[str]"
                ]
            }
        },
        "test_log_int": {
            "name": "test_log_int",
            "location": 140,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_log_9": {
            "name": "test_log_9",
            "location": 149,
            "return": [
                "None"
            ],
            "arguments": {
                "value": [
                    "int",
                    "dict[str, typing.Any]",
                    "float"
                ],
                "expected": [
                    "float",
                    "int",
                    "list[str]"
                ]
            }
        }
    },
    "nevergrad-main/nevergrad/parametrization/test_param_doc.py": {
        "test_readme_parametrization": {
            "name": "test_readme_parametrization",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_param_example": {
            "name": "test_param_example",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_readme_parametrization.fake_training": {
            "name": "fake_training",
            "location": 19,
            "return": [
                "float",
                "int"
            ],
            "arguments": {
                "learning_rate": [],
                "batch_size": [],
                "architecture": []
            }
        }
    },
    "nevergrad-main/nevergrad/parametrization/test_transforms.py": {
        "test_back_and_forth": {
            "name": "test_back_and_forth",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "transform": [],
                "string": [
                    "str",
                    "None",
                    "list[list[typing.Any]]",
                    "int"
                ]
            }
        },
        "test_vals": {
            "name": "test_vals",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "transform": [
                    "list[float]",
                    "bool",
                    "float"
                ],
                "x": [
                    "list[float]",
                    "bool",
                    "float"
                ],
                "expected": [
                    "list[float]",
                    "list[int]",
                    "str",
                    "typing.Callable[None, None]"
                ]
            }
        },
        "test_out_of_bound": {
            "name": "test_out_of_bound",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "transform": [
                    "list[float]",
                    "int",
                    "None",
                    "float"
                ],
                "x": [
                    "list[float]",
                    "int",
                    "None",
                    "float"
                ],
                "expected": [
                    "typing.Type",
                    "None",
                    "str",
                    "bool"
                ]
            }
        },
        "test_multibounds": {
            "name": "test_multibounds",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "transform_cls": [
                    "bytes",
                    "None",
                    "float",
                    "typing.Type",
                    "typing.Sequence[typing.Any]"
                ],
                "expected": [
                    "list[float]",
                    "list[int]",
                    "str"
                ]
            }
        },
        "test_clipping": {
            "name": "test_clipping",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {
                "transform": [
                    "str",
                    "int",
                    "float"
                ],
                "expected": [
                    "list[float]",
                    "float",
                    "str"
                ]
            }
        }
    },
    "nevergrad-main/nevergrad/parametrization/test_utils.py": {
        "test_temporary_directory_copy": {
            "name": "test_temporary_directory_copy",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_command_function": {
            "name": "test_command_function",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_flatten": {
            "name": "test_flatten",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "no_container": [
                    "str",
                    "dict[, ]",
                    "int"
                ],
                "param": [
                    "str",
                    "dict[, ]",
                    "int"
                ],
                "keys": [
                    "typing.Iterable[str]",
                    "str",
                    "typing.Callable[, ]"
                ]
            }
        },
        "test_function_info": {
            "name": "test_function_info",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_split_as_data_parameters": {
            "name": "test_split_as_data_parameters",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {
                "param": [
                    "str",
                    "dict[str, typing.Sequence[str]]"
                ],
                "names": [
                    "str",
                    "list[str]",
                    "dict[, ]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "test_flatten_order": {
            "name": "test_flatten_order",
            "location": 133,
            "return": [
                "None"
            ],
            "arguments": {
                "order": [
                    "str",
                    "typing.Callable[, ]"
                ],
                "keys": [
                    "typing.Iterable[str]",
                    "str",
                    "typing.Callable[, ]"
                ]
            }
        },
        "test_float_penalty": {
            "name": "test_float_penalty",
            "location": 149,
            "return": [
                "None"
            ],
            "arguments": {
                "value": [
                    "dict[str, str]",
                    "int",
                    "dict[, ]"
                ],
                "expected": [
                    "dict[str, str]",
                    "int",
                    "dict[, ]"
                ]
            }
        },
        "split_as_data_parameters": {
            "name": "split_as_data_parameters",
            "location": 157,
            "return": [
                "list[tuple[]]"
            ],
            "arguments": {
                "parameter": []
            }
        },
        "test_normalizer_backward": {
            "name": "test_normalizer_backward",
            "location": 217,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_normalizer_forward": {
            "name": "test_normalizer_forward",
            "location": 251,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_scaler_fully_bounded": {
            "name": "test_scaler_fully_bounded",
            "location": 276,
            "return": [
                "None"
            ],
            "arguments": {
                "expected": [
                    "str",
                    "typing.Callable[, ]"
                ],
                "param": [
                    "str",
                    "typing.Callable[, ]"
                ]
            }
        },
        "do_nothing": {
            "name": "do_nothing",
            "location": 284,
            "return": [
                "int"
            ],
            "arguments": {}
        }
    },
    "nevergrad-main/nevergrad/parametrization/transforms.py": {
        "bound_to_array": {
            "name": "bound_to_array",
            "location": 14,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "_f": {
            "name": "_f",
            "location": 116,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "Transform.__init__": {
            "name": "__init__",
            "location": 29,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Transform.forward": {
            "name": "forward",
            "location": 32,
            "return": [],
            "arguments": {
                "self": [],
                "x": []
            }
        },
        "Transform.backward": {
            "name": "backward",
            "location": 35,
            "return": [],
            "arguments": {
                "self": [],
                "y": []
            }
        },
        "Transform.reverted": {
            "name": "reverted",
            "location": 38,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Transform.__repr__": {
            "name": "__repr__",
            "location": 41,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Reverted.__init__": {
            "name": "__init__",
            "location": 54,
            "return": [],
            "arguments": {
                "self": [],
                "transform": []
            }
        },
        "Reverted.forward": {
            "name": "forward",
            "location": 59,
            "return": [],
            "arguments": {
                "self": [],
                "x": []
            }
        },
        "Reverted.backward": {
            "name": "backward",
            "location": 62,
            "return": [],
            "arguments": {
                "self": [],
                "y": []
            }
        },
        "Affine.__init__": {
            "name": "__init__",
            "location": 75,
            "return": [],
            "arguments": {
                "self": [],
                "a": [],
                "b": []
            }
        },
        "Affine.forward": {
            "name": "forward",
            "location": 83,
            "return": [],
            "arguments": {
                "self": [],
                "x": []
            }
        },
        "Affine.backward": {
            "name": "backward",
            "location": 86,
            "return": [],
            "arguments": {
                "self": [],
                "y": []
            }
        },
        "Exponentiate.__init__": {
            "name": "__init__",
            "location": 100,
            "return": [],
            "arguments": {
                "self": [],
                "base": [],
                "coeff": []
            }
        },
        "Exponentiate.forward": {
            "name": "forward",
            "location": 106,
            "return": [],
            "arguments": {
                "self": [],
                "x": []
            }
        },
        "Exponentiate.backward": {
            "name": "backward",
            "location": 109,
            "return": [],
            "arguments": {
                "self": [],
                "y": []
            }
        },
        "BoundTransform.__init__": {
            "name": "__init__",
            "location": 130,
            "return": [],
            "arguments": {
                "self": [],
                "a_min": [],
                "a_max": []
            }
        },
        "BoundTransform._check_shape": {
            "name": "_check_shape",
            "location": 145,
            "return": [],
            "arguments": {
                "self": [],
                "x": []
            }
        },
        "TanhBound.__init__": {
            "name": "__init__",
            "location": 161,
            "return": [],
            "arguments": {
                "self": [],
                "a_min": [],
                "a_max": []
            }
        },
        "TanhBound.forward": {
            "name": "forward",
            "location": 169,
            "return": [],
            "arguments": {
                "self": [],
                "x": []
            }
        },
        "TanhBound.backward": {
            "name": "backward",
            "location": 173,
            "return": [],
            "arguments": {
                "self": [],
                "y": []
            }
        },
        "Clipping.__init__": {
            "name": "__init__",
            "location": 196,
            "return": [],
            "arguments": {
                "self": [],
                "a_min": [],
                "a_max": [],
                "bounce": []
            }
        },
        "Clipping.forward": {
            "name": "forward",
            "location": 208,
            "return": [],
            "arguments": {
                "self": [],
                "x": []
            }
        },
        "Clipping.backward": {
            "name": "backward",
            "location": 217,
            "return": [],
            "arguments": {
                "self": [],
                "y": []
            }
        },
        "ArctanBound.__init__": {
            "name": "__init__",
            "location": 236,
            "return": [],
            "arguments": {
                "self": [],
                "a_min": [],
                "a_max": []
            }
        },
        "ArctanBound.forward": {
            "name": "forward",
            "location": 244,
            "return": [],
            "arguments": {
                "self": [],
                "x": []
            }
        },
        "ArctanBound.backward": {
            "name": "backward",
            "location": 248,
            "return": [],
            "arguments": {
                "self": [],
                "y": []
            }
        },
        "CumulativeDensity.__init__": {
            "name": "__init__",
            "location": 273,
            "return": [],
            "arguments": {
                "self": [],
                "lower": [],
                "upper": [],
                "eps": [],
                "scale": [],
                "density": []
            }
        },
        "CumulativeDensity.forward": {
            "name": "forward",
            "location": 296,
            "return": [],
            "arguments": {
                "self": [],
                "x": []
            }
        },
        "CumulativeDensity.backward": {
            "name": "backward",
            "location": 299,
            "return": [],
            "arguments": {
                "self": [],
                "y": []
            }
        },
        "Fourrier.__init__": {
            "name": "__init__",
            "location": 309,
            "return": [],
            "arguments": {
                "self": [],
                "axes": []
            }
        },
        "Fourrier.forward": {
            "name": "forward",
            "location": 314,
            "return": [],
            "arguments": {
                "self": [],
                "x": []
            }
        },
        "Fourrier.backward": {
            "name": "backward",
            "location": 319,
            "return": [],
            "arguments": {
                "self": [],
                "y": []
            }
        }
    },
    "nevergrad-main/nevergrad/parametrization/utils.py": {
        "float_penalty": {
            "name": "float_penalty",
            "location": 269,
            "return": [
                "float",
                "int"
            ],
            "arguments": {
                "x": [
                    "int",
                    "float"
                ]
            }
        },
        "BoundChecker.__init__": {
            "name": "__init__",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "lower": [
                    "None",
                    "bool",
                    "list[str]",
                    "str",
                    "typing.Callable[dict[, ], None]",
                    "tuple[int]",
                    "dict[str, str]"
                ],
                "upper": [
                    "None",
                    "bool",
                    "list[str]",
                    "str",
                    "typing.Callable[dict[, ], None]",
                    "tuple[int]",
                    "dict[str, str]"
                ]
            }
        },
        "BoundChecker.__call__": {
            "name": "__call__",
            "location": 35,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "list[T]",
                    "float",
                    "int"
                ]
            }
        },
        "FunctionInfo.__init__": {
            "name": "__init__",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "deterministic": [
                    "bool"
                ],
                "proxy": [
                    "bool"
                ],
                "metrizable": [
                    "bool"
                ]
            }
        },
        "FunctionInfo.__repr__": {
            "name": "__repr__",
            "location": 80,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "TemporaryDirectoryCopy.set_clean_copy_environment_variable": {
            "name": "set_clean_copy_environment_variable",
            "location": 101,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "None",
                    "typing.Mapping"
                ],
                "directory": [
                    "str",
                    "bool",
                    "None"
                ]
            }
        },
        "TemporaryDirectoryCopy.__init__": {
            "name": "__init__",
            "location": 110,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "source": [
                    "typing.Iterable[str]"
                ],
                "dir": [
                    "None",
                    "str",
                    "typing.Callable[, ]",
                    "dict[, ]",
                    "list[str]"
                ]
            }
        },
        "TemporaryDirectoryCopy.__enter__": {
            "name": "__enter__",
            "location": 117,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CommandFunction.__init__": {
            "name": "__init__",
            "location": 146,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "command": [
                    "bool",
                    "str",
                    "None",
                    "typing.Mapping",
                    "dict[, ]"
                ],
                "verbose": [
                    "bool"
                ],
                "cwd": [
                    "None",
                    "str",
                    "bool",
                    "list[str]",
                    "typing.Any"
                ],
                "env": [
                    "None",
                    "bool",
                    "str",
                    "dict[, ]"
                ]
            }
        },
        "CommandFunction.__call__": {
            "name": "__call__",
            "location": 160,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Subobjects.__init__": {
            "name": "__init__",
            "location": 228,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "int",
                    "str",
                    "collections.abc.AsyncIterator",
                    "dict[str, typing.Any]"
                ],
                "base": [
                    "int",
                    "str",
                    "collections.abc.AsyncIterator",
                    "dict[str, typing.Any]"
                ],
                "attribute": [
                    "int",
                    "str",
                    "collections.abc.AsyncIterator",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "Subobjects.new": {
            "name": "new",
            "location": 233,
            "return": [
                "Subobjects"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "typing.Any",
                    "None",
                    "bool"
                ]
            }
        },
        "Subobjects.items": {
            "name": "items",
            "location": 239,
            "return": [
                "typing.Generator[tuple[self_@_cls]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Subobjects._get_subobject": {
            "name": "_get_subobject",
            "location": 249,
            "return": [
                "str",
                "bool",
                "bytes",
                "list[]",
                "typing.Callable[, ]",
                "self_@_cls"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "str",
                    "bool",
                    "bytes",
                    "list[]",
                    "typing.Callable[, ]"
                ],
                "key": [
                    "str",
                    "bytes",
                    "int"
                ]
            }
        },
        "Subobjects.apply": {
            "name": "apply",
            "location": 257,
            "return": [
                "dict[, ]"
            ],
            "arguments": {
                "self": [],
                "method": [
                    "dict[str, str]",
                    "str",
                    "None",
                    "dict[, ]"
                ]
            }
        },
        "_ConstraintCompatibilityFunction.__init__": {
            "name": "__init__",
            "location": 283,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "func": [
                    "int",
                    "float",
                    "list[list[T]]"
                ]
            }
        },
        "_ConstraintCompatibilityFunction.__call__": {
            "name": "__call__",
            "location": 286,
            "return": [
                "int",
                "list[str]",
                "dict[, ]",
                "str",
                "list[]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "nevergrad-main/nevergrad/parametrization/_datalayers.py": {
        "Angles": {
            "name": "Angles",
            "location": 327,
            "return": [],
            "arguments": {
                "init": [],
                "shape": [],
                "deg": [],
                "bound_method": []
            }
        },
        "Operation.__init__": {
            "name": "__init__",
            "location": 31,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BoundLayer.__init__": {
            "name": "__init__",
            "location": 41,
            "return": [],
            "arguments": {
                "self": [],
                "lower": [],
                "upper": [],
                "uniform_sampling": []
            }
        },
        "BoundLayer._normalizer": {
            "name": "_normalizer",
            "location": 79,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BoundLayer.__call__": {
            "name": "__call__",
            "location": 84,
            "return": [],
            "arguments": {
                "self": [],
                "data": [],
                "inplace": []
            }
        },
        "BoundLayer._layered_sample": {
            "name": "_layered_sample",
            "location": 114,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BoundLayer.set_normalized_value": {
            "name": "set_normalized_value",
            "location": 128,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "BoundLayer.get_normalized_value": {
            "name": "get_normalized_value",
            "location": 133,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BoundLayer._check": {
            "name": "_check",
            "location": 138,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "Modulo.__init__": {
            "name": "__init__",
            "location": 148,
            "return": [],
            "arguments": {
                "self": [],
                "module": []
            }
        },
        "Modulo._layered_get_value": {
            "name": "_layered_get_value",
            "location": 154,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Modulo._layered_set_value": {
            "name": "_layered_set_value",
            "location": 157,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "ForwardableOperation._layered_get_value": {
            "name": "_layered_get_value",
            "location": 168,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ForwardableOperation._layered_set_value": {
            "name": "_layered_set_value",
            "location": 171,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "ForwardableOperation.forward": {
            "name": "forward",
            "location": 174,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "ForwardableOperation.backward": {
            "name": "backward",
            "location": 177,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "Exponent.__init__": {
            "name": "__init__",
            "location": 184,
            "return": [],
            "arguments": {
                "self": [],
                "base": []
            }
        },
        "Exponent.forward": {
            "name": "forward",
            "location": 191,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "Exponent.backward": {
            "name": "backward",
            "location": 194,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "Power.__init__": {
            "name": "__init__",
            "location": 201,
            "return": [],
            "arguments": {
                "self": [],
                "power": []
            }
        },
        "Power.forward": {
            "name": "forward",
            "location": 205,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "Power.backward": {
            "name": "backward",
            "location": 208,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "Add.__init__": {
            "name": "__init__",
            "location": 215,
            "return": [],
            "arguments": {
                "self": [],
                "offset": []
            }
        },
        "Add.forward": {
            "name": "forward",
            "location": 219,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "Add.backward": {
            "name": "backward",
            "location": 222,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "Multiply.__init__": {
            "name": "__init__",
            "location": 229,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "Multiply.forward": {
            "name": "forward",
            "location": 234,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "Multiply.backward": {
            "name": "backward",
            "location": 237,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "Bound.__init__": {
            "name": "__init__",
            "location": 242,
            "return": [],
            "arguments": {
                "self": [],
                "lower": [],
                "upper": [],
                "method": [],
                "uniform_sampling": []
            }
        },
        "Bound._layered_get_value": {
            "name": "_layered_get_value",
            "location": 270,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Bound._layered_set_value": {
            "name": "_layered_set_value",
            "location": 278,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "SoftmaxSampling.__init__": {
            "name": "__init__",
            "location": 283,
            "return": [],
            "arguments": {
                "self": [],
                "arity": [],
                "deterministic": []
            }
        },
        "SoftmaxSampling._get_name": {
            "name": "_get_name",
            "location": 288,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SoftmaxSampling._layered_get_value": {
            "name": "_layered_get_value",
            "location": 292,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SoftmaxSampling._layered_set_value": {
            "name": "_layered_set_value",
            "location": 301,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "AngleOp._layered_get_value": {
            "name": "_layered_get_value",
            "location": 316,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AngleOp._layered_set_value": {
            "name": "_layered_set_value",
            "location": 322,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        }
    },
    "nevergrad-main/nevergrad/parametrization/_layering.py": {
        "_to_int": {
            "name": "_to_int",
            "location": 301,
            "return": [
                "int"
            ],
            "arguments": {
                "value": [
                    "int",
                    "str",
                    "tuple[typing.Union[str,str,str]]",
                    "float"
                ]
            }
        },
        "Layered.__init__": {
            "name": "__init__",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Layered.add_layer": {
            "name": "add_layer",
            "location": 49,
            "return": [
                "Layered"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Layered._on_layer_added": {
            "name": "_on_layer_added",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Layered._call_deeper": {
            "name": "_call_deeper",
            "location": 71,
            "return": [],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "Layered._layered_get_value": {
            "name": "_layered_get_value",
            "location": 92,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Layered._layered_set_value": {
            "name": "_layered_set_value",
            "location": 95,
            "return": [],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "bool",
                    "typing.Callable[, ]"
                ]
            }
        },
        "Layered._layered_del_value": {
            "name": "_layered_del_value",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Layered._layered_sample": {
            "name": "_layered_sample",
            "location": 101,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Layered._layered_mutate": {
            "name": "_layered_mutate",
            "location": 104,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Layered._layered_recombine": {
            "name": "_layered_recombine",
            "location": 107,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Layered.random_state": {
            "name": "random_state",
            "location": 111,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Layered.copy": {
            "name": "copy",
            "location": 114,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Layered._get_name": {
            "name": "_get_name",
            "location": 126,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Layered.__repr__": {
            "name": "__repr__",
            "location": 132,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Layered.name": {
            "name": "name",
            "location": 147,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "Layered.set_name": {
            "name": "set_name",
            "location": 150,
            "return": [
                "Layered"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "None"
                ]
            }
        },
        "ValueProperty.__init__": {
            "name": "__init__",
            "location": 172,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ValueProperty.__get__": {
            "name": "__get__",
            "location": 182,
            "return": [],
            "arguments": {
                "self": [],
                "obj": [
                    "str",
                    "bool",
                    "typing.Callable[, ]",
                    "dict[str, typing.Any]",
                    "None"
                ],
                "objtype": [
                    "None",
                    "bool",
                    "str",
                    "dict[, ]"
                ]
            }
        },
        "ValueProperty.__set__": {
            "name": "__set__",
            "location": 188,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "dict[str, typing.Any]",
                    "dict[, ]"
                ],
                "value": [
                    "int",
                    "tuple[typing.Union[int,...]]",
                    "float",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "ValueProperty.__delete__": {
            "name": "__delete__",
            "location": 192,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "str",
                    "int"
                ]
            }
        },
        "_ScalarCasting._layered_get_value": {
            "name": "_layered_get_value",
            "location": 205,
            "return": [
                "list[str]",
                "int",
                "dict[str, typing.Any]",
                "tuple[]",
                "list[list[int]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "_ScalarCasting._layered_set_value": {
            "name": "_layered_set_value",
            "location": 213,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "int",
                    "str",
                    "bytes"
                ]
            }
        },
        "ArrayCasting._layered_set_value": {
            "name": "_layered_set_value",
            "location": 224,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "dict[, ]",
                    "str",
                    "list[typing.Any]"
                ]
            }
        },
        "Filterable.filter_from": {
            "name": "filter_from",
            "location": 232,
            "return": [
                "list[]"
            ],
            "arguments": {
                "cls": [
                    "dict[, ]",
                    "dict[str, typing.Any]",
                    "str",
                    "None",
                    "bytes"
                ],
                "parameter": [
                    "dict[, ]",
                    "dict[str, typing.Any]",
                    "str",
                    "None",
                    "bytes"
                ]
            }
        },
        "Int.__init__": {
            "name": "__init__",
            "location": 258,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "deterministic": [
                    "bool"
                ]
            }
        },
        "Int._get_name": {
            "name": "_get_name",
            "location": 265,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Int._layered_get_value": {
            "name": "_layered_get_value",
            "location": 269,
            "return": [
                "dict[, ]",
                "int",
                "typing.Any",
                "None",
                "dict[str, set[typing.Any]]",
                "typing.Callable[None, None]",
                "bytearray",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Int._layered_del_value": {
            "name": "_layered_del_value",
            "location": 287,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Int.__call__": {
            "name": "__call__",
            "location": 290,
            "return": [],
            "arguments": {
                "self": [],
                "layered": []
            }
        }
    },
    "nevergrad-main/nevergrad/parametrization/__init__.py": {},
    "nevergrad-main/nevergrad/parametrization/examples/script.py": {}
}
{
    "new_dawn_server-master/manage.py": {},
    "new_dawn_server-master/pre_tests.py": {
        "main": {
            "name": "main",
            "location": 3,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "new_dawn_server-master/new_dawn_server/settings.py": {},
    "new_dawn_server-master/new_dawn_server/storage_backends.py": {},
    "new_dawn_server-master/new_dawn_server/urls.py": {},
    "new_dawn_server-master/new_dawn_server/wsgi.py": {},
    "new_dawn_server-master/new_dawn_server/__init__.py": {},
    "new_dawn_server-master/new_dawn_server/actions/admin.py": {},
    "new_dawn_server-master/new_dawn_server/actions/constants.py": {},
    "new_dawn_server-master/new_dawn_server/actions/models.py": {
        "UserAction.__str__": {
            "name": "__str__",
            "location": 16,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "new_dawn_server-master/new_dawn_server/actions/__init__.py": {},
    "new_dawn_server-master/new_dawn_server/actions/api/resources.py": {
        "UserActionResource.create_match": {
            "name": "create_match",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "user_from_id": [],
                "user_to_id": []
            }
        },
        "UserActionResource.delete_match": {
            "name": "delete_match",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {
                "user_from_id": [],
                "user_to_id": []
            }
        },
        "UserActionResource.create_taken": {
            "name": "create_taken",
            "location": 101,
            "return": [
                "None"
            ],
            "arguments": {
                "user_from_id": [],
                "user_to_id": []
            }
        },
        "UserActionResource.delete_taken": {
            "name": "delete_taken",
            "location": 127,
            "return": [
                "None"
            ],
            "arguments": {
                "user_from_id": [],
                "user_to_id": []
            }
        },
        "UserActionResource.obj_create": {
            "name": "obj_create",
            "location": 146,
            "return": [],
            "arguments": {
                "self": [],
                "bundle": []
            }
        },
        "UserActionResource.prepend_urls": {
            "name": "prepend_urls",
            "location": 169,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserActionResource.hydrate_user_from": {
            "name": "hydrate_user_from",
            "location": 177,
            "return": [],
            "arguments": {
                "self": [],
                "bundle": []
            }
        },
        "UserActionResource.hydrate_user_to": {
            "name": "hydrate_user_to",
            "location": 182,
            "return": [],
            "arguments": {
                "self": [],
                "bundle": []
            }
        },
        "UserActionResource.send_message": {
            "name": "send_message",
            "location": 187,
            "return": [],
            "arguments": {
                "self": [],
                "request": []
            }
        },
        "UserActionResource.build_message_tuple": {
            "name": "build_message_tuple",
            "location": 214,
            "return": [
                "dict[typing.Text, ]"
            ],
            "arguments": {
                "self": [],
                "message_action": []
            }
        },
        "UserActionResource.build_end_user_metainfo": {
            "name": "build_end_user_metainfo",
            "location": 226,
            "return": [
                "dict[, typing.Text]"
            ],
            "arguments": {
                "self": [],
                "user_obj": []
            }
        },
        "UserActionResource.build_message_response": {
            "name": "build_message_response",
            "location": 236,
            "return": [
                "list[dict[, ]]"
            ],
            "arguments": {
                "self": [],
                "main_actor_id": [],
                "matches": [],
                "messages": []
            }
        },
        "UserActionResource.get_messages": {
            "name": "get_messages",
            "location": 305,
            "return": [],
            "arguments": {
                "self": [],
                "request": []
            }
        }
    },
    "new_dawn_server-master/new_dawn_server/actions/api/__init__.py": {},
    "new_dawn_server-master/new_dawn_server/actions/api/tests/test_like.py": {
        "UserActionTest.setUp": {
            "name": "setUp",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserActionTest.test_like_user": {
            "name": "test_like_user",
            "location": 121,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserActionTest.test_viewer_liked_info_fetched_from_profile": {
            "name": "test_viewer_liked_info_fetched_from_profile",
            "location": 153,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserActionTest.test_viewer_taken_info_fetched_from_profile": {
            "name": "test_viewer_taken_info_fetched_from_profile",
            "location": 183,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserActionTest.test_taken_user": {
            "name": "test_taken_user",
            "location": 206,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserActionTest.test_match_user": {
            "name": "test_match_user",
            "location": 250,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "new_dawn_server-master/new_dawn_server/actions/api/tests/test_message.py": {
        "UserActionTest.setUp": {
            "name": "setUp",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserActionTest.create_match": {
            "name": "create_match",
            "location": 158,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "user_from_id": [
                    "str",
                    "int",
                    "dict[, ]",
                    "None"
                ],
                "user_to_id": [
                    "str",
                    "int",
                    "dict[, ]",
                    "None"
                ]
            }
        },
        "UserActionTest.test_message_user": {
            "name": "test_message_user",
            "location": 175,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "new_dawn_server-master/new_dawn_server/actions/api/tests/__init__.py": {},
    "new_dawn_server-master/new_dawn_server/actions/migrations/0001_initial.py": {},
    "new_dawn_server-master/new_dawn_server/actions/migrations/0002_auto_20181127_0035.py": {},
    "new_dawn_server-master/new_dawn_server/actions/migrations/0003_auto_20190122_2213.py": {},
    "new_dawn_server-master/new_dawn_server/actions/migrations/0004_auto_20190122_2340.py": {},
    "new_dawn_server-master/new_dawn_server/actions/migrations/0005_auto_20190127_1750.py": {},
    "new_dawn_server-master/new_dawn_server/actions/migrations/0006_auto_20190206_0041.py": {},
    "new_dawn_server-master/new_dawn_server/actions/migrations/0007_useraction_message.py": {},
    "new_dawn_server-master/new_dawn_server/actions/migrations/__init__.py": {},
    "new_dawn_server-master/new_dawn_server/actions/tests/test_action_models.py": {
        "LikeTest.setUp": {
            "name": "setUp",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LikeTest.test_get_user_likes": {
            "name": "test_get_user_likes",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LikeTest.test_get_multiple_user_likes": {
            "name": "test_get_multiple_user_likes",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "new_dawn_server-master/new_dawn_server/actions/tests/__init__.py": {},
    "new_dawn_server-master/new_dawn_server/locations/admin.py": {},
    "new_dawn_server-master/new_dawn_server/locations/models.py": {},
    "new_dawn_server-master/new_dawn_server/locations/__init__.py": {},
    "new_dawn_server-master/new_dawn_server/locations/api/resources.py": {
        "CityResource.prepend_urls": {
            "name": "prepend_urls",
            "location": 25,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "CityResource.get_country_list": {
            "name": "get_country_list",
            "location": 37,
            "return": [],
            "arguments": {
                "self": [],
                "request": [
                    "dict[, ]"
                ]
            }
        },
        "CityResource.get_state_for_country": {
            "name": "get_state_for_country",
            "location": 48,
            "return": [],
            "arguments": {
                "self": [],
                "request": [
                    "dict[, ]",
                    "Exception"
                ]
            }
        },
        "CityResource.get_city_for_state": {
            "name": "get_city_for_state",
            "location": 67,
            "return": [],
            "arguments": {
                "self": [],
                "request": [
                    "dict[, ]"
                ]
            }
        },
        "CityResource.get_college_list": {
            "name": "get_college_list",
            "location": 87,
            "return": [],
            "arguments": {
                "self": [],
                "request": [
                    "dict[, ]"
                ]
            }
        }
    },
    "new_dawn_server-master/new_dawn_server/locations/api/__init__.py": {},
    "new_dawn_server-master/new_dawn_server/locations/api/tests/test_city_preference_api.py": {
        "CityPreferenceTest.setUp": {
            "name": "setUp",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CityPreferenceTest.test_location_post": {
            "name": "test_location_post",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CityPreferenceTest.test_location_get": {
            "name": "test_location_get",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "new_dawn_server-master/new_dawn_server/locations/api/tests/test_get_college_list.py": {
        "CollegeNameTest.setUp": {
            "name": "setUp",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CollegeNameTest.test_get_collge_names": {
            "name": "test_get_collge_names",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "new_dawn_server-master/new_dawn_server/locations/api/tests/test_prepend_urls.py": {
        "CityMappingTest.setUp": {
            "name": "setUp",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CityMappingTest.test_get_country_list": {
            "name": "test_get_country_list",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CityMappingTest.test_get_state_for_country": {
            "name": "test_get_state_for_country",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CityMappingTest.test_get_city_for_state": {
            "name": "test_get_city_for_state",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "new_dawn_server-master/new_dawn_server/locations/api/tests/__init__.py": {},
    "new_dawn_server-master/new_dawn_server/locations/constants/city_constants.py": {},
    "new_dawn_server-master/new_dawn_server/locations/constants/college_constants.py": {},
    "new_dawn_server-master/new_dawn_server/locations/migrations/0001_initial.py": {},
    "new_dawn_server-master/new_dawn_server/locations/migrations/0002_auto_20181211_2357.py": {},
    "new_dawn_server-master/new_dawn_server/locations/migrations/0003_auto_20181212_0008.py": {},
    "new_dawn_server-master/new_dawn_server/locations/migrations/0004_remove_citypreference_user_account.py": {},
    "new_dawn_server-master/new_dawn_server/locations/migrations/__init__.py": {},
    "new_dawn_server-master/new_dawn_server/locations/tests/test_city_preference_model.py": {
        "CityPreferenceTest.setUp": {
            "name": "setUp",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CityPreferenceTest.test_city_preference": {
            "name": "test_city_preference",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CityPreferenceTest.test_user_has_multiple_preference": {
            "name": "test_user_has_multiple_preference",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CityPreferenceTest.test_preference_has_multiple_user": {
            "name": "test_preference_has_multiple_user",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "new_dawn_server-master/new_dawn_server/locations/tests/__init__.py": {},
    "new_dawn_server-master/new_dawn_server/management/commands/create_super_user.py": {
        "Command.handle": {
            "name": "handle",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "new_dawn_server-master/new_dawn_server/management/commands/create_test_actions.py": {
        "Command.create_like_image": {
            "name": "create_like_image",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "a": [
                    "str"
                ],
                "b": [
                    "str"
                ]
            }
        },
        "Command.create_like_answer": {
            "name": "create_like_answer",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "a": [
                    "str",
                    "bool"
                ],
                "b": [
                    "str",
                    "bool"
                ]
            }
        },
        "Command.create_match": {
            "name": "create_match",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "a": [
                    "str",
                    "int",
                    "float"
                ],
                "b": [
                    "str",
                    "int",
                    "float"
                ]
            }
        },
        "Command.create_message": {
            "name": "create_message",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "a": [
                    "str",
                    "bool",
                    "float",
                    "list[float]"
                ],
                "b": [
                    "str",
                    "bool",
                    "float",
                    "list[float]"
                ],
                "message": [
                    "str",
                    "int"
                ]
            }
        },
        "Command.handle": {
            "name": "handle",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "new_dawn_server-master/new_dawn_server/management/commands/create_test_users.py": {
        "Command.create_test_image": {
            "name": "create_test_image",
            "location": 12,
            "return": [
                "str",
                "int",
                "list[str]",
                "tuple[typing.Union[tuple[typing.Union[str,str]],tuple[typing.Union[str,str]],tuple[typing.Union[str,str]],tuple[typing.Union[str,str]]]]"
            ],
            "arguments": {
                "self": [],
                "user": [
                    "typing.Mapping",
                    "None"
                ],
                "profile": [
                    "typing.Mapping",
                    "None"
                ],
                "caption": [
                    "typing.Mapping",
                    "None"
                ],
                "url": [
                    "typing.Mapping",
                    "None"
                ],
                "order": [
                    "typing.Mapping",
                    "None"
                ]
            }
        },
        "Command.create_test_answer_questions": {
            "name": "create_test_answer_questions",
            "location": 23,
            "return": [
                "dict[str, typing.Union[typing.Any,int,str]]",
                "typing.Pattern",
                "list[]"
            ],
            "arguments": {
                "self": [],
                "user": [
                    "tuple[typing.Union[typing.Literal,typing.Literal]]",
                    "str",
                    "int"
                ],
                "profile": [
                    "tuple[typing.Union[typing.Literal,typing.Literal]]",
                    "str",
                    "int"
                ],
                "question": [
                    "str"
                ],
                "answer": [
                    "tuple[typing.Union[typing.Literal,typing.Literal]]",
                    "str",
                    "int"
                ],
                "order": [
                    "tuple[typing.Union[typing.Literal,typing.Literal]]",
                    "str",
                    "int"
                ]
            }
        },
        "Command.create_test_user_1": {
            "name": "create_test_user_1",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Command.create_test_user_2": {
            "name": "create_test_user_2",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Command.create_test_user_3": {
            "name": "create_test_user_3",
            "location": 126,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Command.handle": {
            "name": "handle",
            "location": 176,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "new_dawn_server-master/new_dawn_server/medias/admin.py": {},
    "new_dawn_server-master/new_dawn_server/medias/models.py": {
        "Image.__str__": {
            "name": "__str__",
            "location": 18,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "new_dawn_server-master/new_dawn_server/medias/__init__.py": {},
    "new_dawn_server-master/new_dawn_server/medias/api/resources.py": {
        "MultipartResource.deserialize": {
            "name": "deserialize",
            "location": 17,
            "return": [
                "dict[, ]"
            ],
            "arguments": {
                "self": [],
                "request": [],
                "data": [
                    "float",
                    "list[bytes]",
                    "int",
                    "typing.Any",
                    "None"
                ],
                "format": [
                    "str"
                ]
            }
        },
        "ImageResource.obj_create": {
            "name": "obj_create",
            "location": 47,
            "return": [
                "int",
                "dict[str, typing.Any]"
            ],
            "arguments": {
                "self": [],
                "bundle": [
                    "int",
                    "dict[str, typing.Any]"
                ]
            }
        }
    },
    "new_dawn_server-master/new_dawn_server/medias/api/__init__.py": {},
    "new_dawn_server-master/new_dawn_server/medias/migrations/0001_initial.py": {},
    "new_dawn_server-master/new_dawn_server/medias/migrations/0002_auto_20181218_2141.py": {},
    "new_dawn_server-master/new_dawn_server/medias/migrations/0003_auto_20181218_2143.py": {},
    "new_dawn_server-master/new_dawn_server/medias/migrations/0004_auto_20190405_2131.py": {},
    "new_dawn_server-master/new_dawn_server/medias/migrations/0005_auto_20190406_0952.py": {},
    "new_dawn_server-master/new_dawn_server/medias/migrations/0006_auto_20190412_2340.py": {},
    "new_dawn_server-master/new_dawn_server/medias/migrations/__init__.py": {},
    "new_dawn_server-master/new_dawn_server/medias/tests/test_image_request.py": {
        "ImageTest.setUp": {
            "name": "setUp",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ImageTest.test_upload_photo_multipart": {
            "name": "test_upload_photo_multipart",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ImageTest.test_upload_image_with_simpleupload": {
            "name": "test_upload_image_with_simpleupload",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ImageTest.test_get_multiple_images": {
            "name": "test_get_multiple_images",
            "location": 136,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "new_dawn_server-master/new_dawn_server/medias/tests/__init__.py": {},
    "new_dawn_server-master/new_dawn_server/modules/client_response.py": {
        "ClientResponse.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "success": [
                    "bool",
                    "tuple[typing.Union[int,int]]",
                    "typing.Callable[str, bool]",
                    "list[int]"
                ],
                "message": [
                    "bool",
                    "tuple[typing.Union[int,int]]",
                    "typing.Callable[str, bool]",
                    "list[int]"
                ],
                "log": [
                    "bool"
                ]
            }
        },
        "ClientResponse.get_response_as_dict": {
            "name": "get_response_as_dict",
            "location": 16,
            "return": [
                "dict[typing.Text, ]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ClientResponse.log_response": {
            "name": "log_response",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "msg": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "new_dawn_server-master/new_dawn_server/modules/__init__.py": {},
    "new_dawn_server-master/new_dawn_server/modules/tests/test_client_response.py": {
        "ClientResponseTest.setUp": {
            "name": "setUp",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ClientResponseTest.test_client_response": {
            "name": "test_client_response",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "new_dawn_server-master/new_dawn_server/modules/tests/__init__.py": {},
    "new_dawn_server-master/new_dawn_server/pusher/chat_service.py": {
        "ChatService.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "user_me_id": [
                    "None",
                    "int",
                    "list[int]",
                    "str"
                ],
                "user_you_id": [
                    "None",
                    "int",
                    "list[int]",
                    "str"
                ]
            }
        },
        "ChatService._build_channel_id": {
            "name": "_build_channel_id",
            "location": 22,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ChatService.send": {
            "name": "send",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": []
            }
        }
    },
    "new_dawn_server-master/new_dawn_server/pusher/notification_service.py": {
        "NotificationService.__init__": {
            "name": "__init__",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "NotificationService._get_instance_id_and_secret_key": {
            "name": "_get_instance_id_and_secret_key",
            "location": 15,
            "return": [
                "list[str]"
            ],
            "arguments": {}
        },
        "NotificationService.beams_auth": {
            "name": "beams_auth",
            "location": 18,
            "return": [
                "str",
                "int",
                "None",
                "dict[, ]"
            ],
            "arguments": {
                "self": [],
                "user_id": [
                    "str"
                ]
            }
        },
        "NotificationService.send_notification": {
            "name": "send_notification",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "user_ids": [
                    "str",
                    "int"
                ],
                "message": [
                    "None",
                    "str",
                    "int"
                ]
            }
        }
    },
    "new_dawn_server-master/new_dawn_server/questions/admin.py": {},
    "new_dawn_server-master/new_dawn_server/questions/models.py": {},
    "new_dawn_server-master/new_dawn_server/questions/__init__.py": {},
    "new_dawn_server-master/new_dawn_server/questions/api/resources.py": {},
    "new_dawn_server-master/new_dawn_server/questions/api/__init__.py": {},
    "new_dawn_server-master/new_dawn_server/questions/api/tests/test_questions_api.py": {
        "QuestionTest.setUp": {
            "name": "setUp",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "QuestionTest.test_question_post_resource": {
            "name": "test_question_post_resource",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "QuestionTest.test_question_get_resource": {
            "name": "test_question_get_resource",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "QuestionTest.test_answer_question_post_resource": {
            "name": "test_answer_question_post_resource",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "QuestionTest.test_answer_question_get_resource": {
            "name": "test_answer_question_get_resource",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "new_dawn_server-master/new_dawn_server/questions/api/tests/__init__.py": {},
    "new_dawn_server-master/new_dawn_server/questions/migrations/0001_initial.py": {},
    "new_dawn_server-master/new_dawn_server/questions/migrations/0002_auto_20181127_0035.py": {},
    "new_dawn_server-master/new_dawn_server/questions/migrations/0003_auto_20181127_0040.py": {},
    "new_dawn_server-master/new_dawn_server/questions/migrations/0004_auto_20181127_0041.py": {},
    "new_dawn_server-master/new_dawn_server/questions/migrations/0005_answerquestion_user_profile.py": {},
    "new_dawn_server-master/new_dawn_server/questions/migrations/0006_remove_answerquestion_user_profile.py": {},
    "new_dawn_server-master/new_dawn_server/questions/migrations/0007_answerquestion_profile.py": {},
    "new_dawn_server-master/new_dawn_server/questions/migrations/0008_auto_20181212_0926.py": {},
    "new_dawn_server-master/new_dawn_server/questions/migrations/0009_question_user_defined.py": {},
    "new_dawn_server-master/new_dawn_server/questions/migrations/0010_auto_20190405_2131.py": {},
    "new_dawn_server-master/new_dawn_server/questions/migrations/0011_auto_20190406_0952.py": {},
    "new_dawn_server-master/new_dawn_server/questions/migrations/__init__.py": {},
    "new_dawn_server-master/new_dawn_server/questions/tests/test_answerquestions_models.py": {
        "QuestionTest.setUp": {
            "name": "setUp",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "QuestionTest.test_question": {
            "name": "test_question",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AnswerQuestionTest.setUp": {
            "name": "setUp",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AnswerQuestionTest.test_get_QA_from_user": {
            "name": "test_get_QA_from_user",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AnswerQuestionTest.test_get_answers_from_question": {
            "name": "test_get_answers_from_question",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "new_dawn_server-master/new_dawn_server/questions/tests/__init__.py": {},
    "new_dawn_server-master/new_dawn_server/users/admin.py": {
        "ImageInline.get_readonly_fields": {
            "name": "get_readonly_fields",
            "location": 10,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "dict[str, str]"
                ],
                "obj": [
                    "None",
                    "dict[str, str]"
                ]
            }
        },
        "ImageInline.has_add_permission": {
            "name": "has_add_permission",
            "location": 12,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "None",
                    "bool"
                ],
                "obj": [
                    "None",
                    "bool"
                ]
            }
        },
        "AnswerQuestionInline.get_readonly_fields": {
            "name": "get_readonly_fields",
            "location": 17,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "dict[str, str]"
                ],
                "obj": [
                    "None",
                    "dict[str, str]"
                ]
            }
        },
        "AnswerQuestionInline.has_add_permission": {
            "name": "has_add_permission",
            "location": 19,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "None",
                    "bool"
                ],
                "obj": [
                    "None",
                    "bool"
                ]
            }
        },
        "ProfileAdmin.get_readonly_fields": {
            "name": "get_readonly_fields",
            "location": 40,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "dict[str, str]"
                ],
                "obj": [
                    "None",
                    "dict[str, str]"
                ]
            }
        },
        "ProfileAdmin.has_add_permission": {
            "name": "has_add_permission",
            "location": 42,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "None",
                    "bool"
                ],
                "obj": [
                    "None",
                    "bool"
                ]
            }
        }
    },
    "new_dawn_server-master/new_dawn_server/users/constants.py": {},
    "new_dawn_server-master/new_dawn_server/users/models.py": {
        "Account.__str__": {
            "name": "__str__",
            "location": 17,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Profile.__str__": {
            "name": "__str__",
            "location": 42,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "new_dawn_server-master/new_dawn_server/users/__init__.py": {},
    "new_dawn_server-master/new_dawn_server/users/api/resources.py": {
        "UserResource.prepend_urls": {
            "name": "prepend_urls",
            "location": 94,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserResource.login": {
            "name": "login",
            "location": 107,
            "return": [],
            "arguments": {
                "self": [],
                "request": []
            }
        },
        "UserResource.logout": {
            "name": "logout",
            "location": 141,
            "return": [],
            "arguments": {
                "self": [],
                "request": []
            }
        },
        "UserResource.phone_verify_request": {
            "name": "phone_verify_request",
            "location": 155,
            "return": [],
            "arguments": {
                "self": [],
                "request": [
                    "dict[, ]"
                ]
            }
        },
        "UserResource.phone_verify_authenticate": {
            "name": "phone_verify_authenticate",
            "location": 181,
            "return": [],
            "arguments": {
                "self": [],
                "request": []
            }
        },
        "UserResource.notification_authenticate": {
            "name": "notification_authenticate",
            "location": 221,
            "return": [
                "JsonResponse"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "dict[, ]"
                ]
            }
        },
        "ProfileResource.apply_filters": {
            "name": "apply_filters",
            "location": 282,
            "return": [],
            "arguments": {
                "self": [],
                "request": [
                    "str",
                    "bool"
                ],
                "applicable_filters": [
                    "list[str]",
                    "None",
                    "bytes"
                ]
            }
        },
        "ProfileResource._build_liker_dict": {
            "name": "_build_liker_dict",
            "location": 295,
            "return": [
                "dict[typing.Text, ]"
            ],
            "arguments": {
                "self": [],
                "likes": [
                    "str",
                    "list[int]"
                ]
            }
        },
        "ProfileResource._get_liker_info": {
            "name": "_get_liker_info",
            "location": 318,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "bundle": [
                    "dict[, ]"
                ]
            }
        },
        "ProfileResource._get_taken_info": {
            "name": "_get_taken_info",
            "location": 341,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "bundle": [
                    "int"
                ]
            }
        },
        "ProfileResource._get_taken_by_info": {
            "name": "_get_taken_by_info",
            "location": 365,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "bundle": [
                    "str",
                    "dict[, ]",
                    "int"
                ]
            }
        },
        "ProfileResource.dehydrate": {
            "name": "dehydrate",
            "location": 376,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "bundle": [
                    "str",
                    "bool"
                ]
            }
        },
        "UserRegisterValidation.is_valid": {
            "name": "is_valid",
            "location": 384,
            "return": [
                "dict[typing.Text, typing.Text]",
                "dict[tuple[dict[typing.Text, bool]], typing.Text]"
            ],
            "arguments": {
                "self": [],
                "bundle": [
                    "dict[str, typing.Any]",
                    "str",
                    "dict[str, dict[str, str]]",
                    "dict[str, str]"
                ],
                "request": [
                    "None",
                    "list[str]",
                    "bool"
                ]
            }
        },
        "UserRegisterResource._get_model_fields_dict": {
            "name": "_get_model_fields_dict",
            "location": 406,
            "return": [
                "dict[, ]"
            ],
            "arguments": {
                "bundle": [
                    "list[str]",
                    "dict[str, str]",
                    "dict[, ]",
                    "None",
                    "str"
                ],
                "fields": []
            }
        },
        "UserRegisterResource._get_account_name": {
            "name": "_get_account_name",
            "location": 414,
            "return": [
                "str"
            ],
            "arguments": {
                "first_name": [
                    "str"
                ],
                "last_name": [
                    "str"
                ]
            }
        },
        "UserRegisterResource.get_and_save_city_pref": {
            "name": "get_and_save_city_pref",
            "location": 418,
            "return": [
                "list[CityPreference]"
            ],
            "arguments": {
                "bundle": [
                    "int",
                    "dict[, ]",
                    "typing.Callable[, ]",
                    "str"
                ]
            }
        },
        "UserRegisterResource.get_and_save_question": {
            "name": "get_and_save_question",
            "location": 433,
            "return": [
                "str",
                "dict[str, str]",
                "dict[str, dict[str, typing.Any]]",
                "Question"
            ],
            "arguments": {
                "bundle": [
                    "str",
                    "list[django.db.models.query.QuerySet]"
                ]
            }
        },
        "UserRegisterResource.get_and_save_answer_question": {
            "name": "get_and_save_answer_question",
            "location": 446,
            "return": [
                "None"
            ],
            "arguments": {
                "bundle": [
                    "str",
                    "list[tuple[typing.Union[bool,typing.Any]]]"
                ],
                "user": [
                    "str",
                    "None"
                ],
                "profile": [
                    "str",
                    "None"
                ]
            }
        },
        "UserRegisterResource._get_age": {
            "name": "_get_age",
            "location": 461,
            "return": [
                "None"
            ],
            "arguments": {
                "birthday": [
                    "int",
                    "str",
                    "float"
                ]
            }
        },
        "UserRegisterResource.obj_create": {
            "name": "obj_create",
            "location": 469,
            "return": [
                "str",
                "float",
                "None",
                "dict[, ]",
                "typing.Callable[, ]",
                "list[str]"
            ],
            "arguments": {
                "self": [],
                "bundle": [
                    "str",
                    "float",
                    "None",
                    "dict[, ]",
                    "typing.Callable[, ]",
                    "list[str]"
                ]
            }
        },
        "UserRegisterResource.obj_update": {
            "name": "obj_update",
            "location": 499,
            "return": [
                "dict[str, typing.Any]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "bundle": [
                    "dict[str, typing.Any]",
                    "bool"
                ],
                "skip_errors": [
                    "bool"
                ]
            }
        },
        "UserRegisterResource.dehydrate": {
            "name": "dehydrate",
            "location": 529,
            "return": [
                "str",
                "dict[str, str]"
            ],
            "arguments": {
                "self": [],
                "bundle": [
                    "str",
                    "dict[str, str]"
                ]
            }
        }
    },
    "new_dawn_server-master/new_dawn_server/users/api/__init__.py": {},
    "new_dawn_server-master/new_dawn_server/users/api/tests/test_account_city_fields.py": {},
    "new_dawn_server-master/new_dawn_server/users/api/tests/test_account_city_preference.py": {
        "AccountCreateTest.setUp": {
            "name": "setUp",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AccountCreateTest.test_register_with_location": {
            "name": "test_register_with_location",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AccountCreateTest.test_get_account_location": {
            "name": "test_get_account_location",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "new_dawn_server-master/new_dawn_server/users/api/tests/test_authentication.py": {
        "AuthenticationTest.setUp": {
            "name": "setUp",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AuthenticationTest.test_basic_authentication": {
            "name": "test_basic_authentication",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AuthenticationTest.test_api_authenticatoin": {
            "name": "test_api_authenticatoin",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "new_dawn_server-master/new_dawn_server/users/api/tests/test_beams_notification.py": {
        "NotificationTest.setUp": {
            "name": "setUp",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "NotificationTest.test_authenticate": {
            "name": "test_authenticate",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "new_dawn_server-master/new_dawn_server/users/api/tests/test_phone_verification_api.py": {
        "PhoneVerifyTestCase.setUp": {
            "name": "setUp",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PhoneVerifyTestCase.test_phone_verify_request": {
            "name": "test_phone_verify_request",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "authy_api": []
            }
        },
        "PhoneVerifyTestCase.test_phone_verify_authenticate": {
            "name": "test_phone_verify_authenticate",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "authy_api": []
            }
        }
    },
    "new_dawn_server-master/new_dawn_server/users/api/tests/test_update_profile.py": {
        "UserRegisterTest.setUp": {
            "name": "setUp",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserRegisterTest.test_register_update_user": {
            "name": "test_register_update_user",
            "location": 116,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "new_dawn_server-master/new_dawn_server/users/api/tests/test_users_api.py": {
        "UserRegisterTest.setUp": {
            "name": "setUp",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserRegisterTest.test_register_success": {
            "name": "test_register_success",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserRegisterTest.test_login_success": {
            "name": "test_login_success",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserRegisterTest.test_user_profile_get": {
            "name": "test_user_profile_get",
            "location": 111,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserRegisterTest.test_user_profile_get_with_filtering": {
            "name": "test_user_profile_get_with_filtering",
            "location": 132,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserRegisterTest.test_user_profile_get_with_height_preference": {
            "name": "test_user_profile_get_with_height_preference",
            "location": 149,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserRegisterTest.test_user_profile_get_with_review_status": {
            "name": "test_user_profile_get_with_review_status",
            "location": 196,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserRegisterTest.test_user_profile_get_with_age_preference": {
            "name": "test_user_profile_get_with_age_preference",
            "location": 243,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserRegisterTest.test_user_profile_recommendation": {
            "name": "test_user_profile_recommendation",
            "location": 290,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ProfileQuestionTest.setUp": {
            "name": "setUp",
            "location": 342,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ProfileQuestionTest.test_get_all_profiles_questions": {
            "name": "test_get_all_profiles_questions",
            "location": 393,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "new_dawn_server-master/new_dawn_server/users/api/tests/test_user_answer_question_registration.py": {
        "AnswerQuestionInRegisterTest.setUp": {
            "name": "setUp",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AnswerQuestionInRegisterTest.test_register_with_answer_question": {
            "name": "test_register_with_answer_question",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AnswerQuestionInRegisterTest.test_predefined_question": {
            "name": "test_predefined_question",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "new_dawn_server-master/new_dawn_server/users/api/tests/__init__.py": {},
    "new_dawn_server-master/new_dawn_server/users/migrations/0001_initial.py": {},
    "new_dawn_server-master/new_dawn_server/users/migrations/0002_remove_account_nationality.py": {},
    "new_dawn_server-master/new_dawn_server/users/migrations/0003_auto_20181112_2244.py": {},
    "new_dawn_server-master/new_dawn_server/users/migrations/0004_auto_20181113_0719.py": {},
    "new_dawn_server-master/new_dawn_server/users/migrations/0005_auto_20181119_0016.py": {},
    "new_dawn_server-master/new_dawn_server/users/migrations/0006_profile_answer_questions.py": {},
    "new_dawn_server-master/new_dawn_server/users/migrations/0006_profile_user.py": {},
    "new_dawn_server-master/new_dawn_server/users/migrations/0007_auto_20181123_0339.py": {},
    "new_dawn_server-master/new_dawn_server/users/migrations/0008_merge_20181126_0008.py": {},
    "new_dawn_server-master/new_dawn_server/users/migrations/0009_auto_20181126_2058.py": {},
    "new_dawn_server-master/new_dawn_server/users/migrations/0010_auto_20181202_1422.py": {},
    "new_dawn_server-master/new_dawn_server/users/migrations/0011_auto_20181211_2247.py": {},
    "new_dawn_server-master/new_dawn_server/users/migrations/0012_profile_city_preference.py": {},
    "new_dawn_server-master/new_dawn_server/users/migrations/0013_auto_20181211_2357.py": {},
    "new_dawn_server-master/new_dawn_server/users/migrations/0014_account_city_preference.py": {},
    "new_dawn_server-master/new_dawn_server/users/migrations/0015_remove_profile_answer_questions.py": {},
    "new_dawn_server-master/new_dawn_server/users/migrations/0016_auto_20181212_0905.py": {},
    "new_dawn_server-master/new_dawn_server/users/migrations/0017_auto_20190105_1924.py": {},
    "new_dawn_server-master/new_dawn_server/users/migrations/0018_auto_20190126_1125.py": {},
    "new_dawn_server-master/new_dawn_server/users/migrations/0019_auto_20190127_1750.py": {},
    "new_dawn_server-master/new_dawn_server/users/migrations/0020_auto_20190203_0103.py": {},
    "new_dawn_server-master/new_dawn_server/users/migrations/0021_profile_age.py": {},
    "new_dawn_server-master/new_dawn_server/users/migrations/0022_profile_review_status.py": {},
    "new_dawn_server-master/new_dawn_server/users/migrations/0023_profile_location.py": {},
    "new_dawn_server-master/new_dawn_server/users/migrations/__init__.py": {},
    "new_dawn_server-master/new_dawn_server/users/tests/test_user_models.py": {
        "AccountTest.setUp": {
            "name": "setUp",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AccountTest.test_account_basic_info": {
            "name": "test_account_basic_info",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AccountTest.test_account_phone_number": {
            "name": "test_account_phone_number",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ProfileTest.setUp": {
            "name": "setUp",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ProfileTest.test_profile_account_relationship": {
            "name": "test_profile_account_relationship",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ProfileTest.test_profile_answer_questions": {
            "name": "test_profile_answer_questions",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ProfileTest.test_profile_boolean_fields": {
            "name": "test_profile_boolean_fields",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ProfileTest.test_profile_char_fields": {
            "name": "test_profile_char_fields",
            "location": 99,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ProfileTest.test_profile_decimal_fields": {
            "name": "test_profile_decimal_fields",
            "location": 112,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "new_dawn_server-master/new_dawn_server/users/tests/__init__.py": {}
}
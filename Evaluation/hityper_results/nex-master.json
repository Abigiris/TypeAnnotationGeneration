{
    "nex-master/setup.py": {},
    "nex-master/nex/accessors.py": {
        "check_type": {
            "name": "check_type",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "type_": [
                    "bool",
                    "dict[str, typing.Any]",
                    "typing.Type",
                    "str"
                ],
                "value": [
                    "bool",
                    "dict[str, typing.Any]",
                    "typing.Type",
                    "str"
                ]
            }
        },
        "is_register_type": {
            "name": "is_register_type",
            "location": 180,
            "return": [
                "bool"
            ],
            "arguments": {
                "type_": [
                    "str"
                ]
            }
        },
        "get_unset_ascii_char_dict": {
            "name": "get_unset_ascii_char_dict",
            "location": 254,
            "return": [
                "dict[, None]"
            ],
            "arguments": {}
        },
        "TexNamedValues.__init__": {
            "name": "__init__",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "names_to_values": [
                    "str",
                    "None",
                    "bool",
                    "list[str]"
                ],
                "names_to_types": [
                    "str",
                    "None",
                    "int",
                    "typing.Iterable[str]"
                ]
            }
        },
        "TexNamedValues._check_and_get_value": {
            "name": "_check_and_get_value",
            "location": 59,
            "return": [],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "TexNamedValues.get": {
            "name": "get",
            "location": 64,
            "return": [
                "dict[, ]",
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "set[str]",
                    "list[str]",
                    "list[dict[str, typing.Any]]"
                ]
            }
        },
        "TexNamedValues.set": {
            "name": "set",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "list[str]",
                    "typing.IO"
                ],
                "value": [
                    "str",
                    "bool",
                    "None",
                    "typing.Iterable[str]"
                ]
            }
        },
        "ParametersAccessor.default_initial": {
            "name": "default_initial",
            "location": 85,
            "return": [],
            "arguments": {
                "cls": [
                    "str",
                    "typing.Callable[, ]",
                    "None"
                ]
            }
        },
        "ParametersAccessor.default_local": {
            "name": "default_local",
            "location": 140,
            "return": [],
            "arguments": {
                "cls": [
                    "str",
                    "typing.Callable[, ]",
                    "None"
                ],
                "enclosing_scope": [
                    "bool",
                    "dict[, ]"
                ]
            }
        },
        "SpecialsAccessor.from_defaults": {
            "name": "from_defaults",
            "location": 152,
            "return": [],
            "arguments": {
                "cls": [
                    "str",
                    "Exception"
                ]
            }
        },
        "Registers.__init__": {
            "name": "__init__",
            "location": 186,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "register_map": [
                    "int",
                    "float"
                ]
            }
        },
        "Registers.default_initial": {
            "name": "default_initial",
            "location": 192,
            "return": [],
            "arguments": {
                "cls": [
                    "str"
                ]
            }
        },
        "Registers.default_local": {
            "name": "default_local",
            "location": 206,
            "return": [],
            "arguments": {
                "cls": [],
                "enclosing_scope": [
                    "bool",
                    "dict[, ]"
                ]
            }
        },
        "Registers._check_and_get_register": {
            "name": "_check_and_get_register",
            "location": 209,
            "return": [],
            "arguments": {
                "self": [],
                "type_": [
                    "str",
                    "dict[, ]"
                ]
            }
        },
        "Registers._check_and_get_register_value": {
            "name": "_check_and_get_register_value",
            "location": 214,
            "return": [
                "float",
                "str"
            ],
            "arguments": {
                "self": [],
                "type_": [
                    "str"
                ],
                "i": []
            }
        },
        "Registers.get": {
            "name": "get",
            "location": 222,
            "return": [
                "typing.Type",
                "typing.Final",
                "tuple[]",
                "list[]",
                "list[list[typing.Any]]"
            ],
            "arguments": {
                "self": [],
                "type_": [
                    "str",
                    "dict[str, str]"
                ],
                "i": [
                    "str",
                    "dict[, ]"
                ]
            }
        },
        "Registers.pop": {
            "name": "pop",
            "location": 231,
            "return": [
                "str",
                "bytes",
                "int",
                "list[]",
                "dict[int, int]",
                "dict[str, typing.Any]"
            ],
            "arguments": {
                "self": [],
                "type_": [
                    "dict[, ]",
                    "dict[str, typing.Any]",
                    "bytes",
                    "int",
                    "str",
                    "typing.Container",
                    "None"
                ],
                "i": [
                    "dict[, ]",
                    "dict[str, typing.Any]",
                    "bytes",
                    "int",
                    "str",
                    "typing.Container",
                    "None"
                ]
            }
        },
        "Registers._set": {
            "name": "_set",
            "location": 238,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "type_": [
                    "str",
                    "None",
                    "dict[str, str]",
                    "tuple[typing.Union[str,str]]"
                ],
                "i": [
                    "bool"
                ],
                "value": [
                    "str",
                    "bool",
                    "None"
                ]
            }
        },
        "Registers.set": {
            "name": "set",
            "location": 242,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "type_": [
                    "dict[str, int]",
                    "typing.Type"
                ],
                "i": [
                    "typing.Callable[, ]",
                    "dict[str, typing.Any]",
                    "list[typing.Optional[typing.Any]]"
                ],
                "value": [
                    "typing.Callable[, ]",
                    "str",
                    "int"
                ]
            }
        },
        "Codes.__init__": {
            "name": "__init__",
            "location": 260,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "char_to_cat": [
                    "int",
                    "dict[typing.Any, str]",
                    "float"
                ],
                "char_to_math_code": [
                    "int",
                    "dict[typing.Any, str]",
                    "float"
                ],
                "lower_case_code": [
                    "int",
                    "dict[typing.Any, str]",
                    "float"
                ],
                "upper_case_code": [
                    "int",
                    "dict[typing.Any, str]",
                    "float"
                ],
                "space_factor_code": [
                    "int",
                    "dict[typing.Any, str]",
                    "float"
                ],
                "delimiter_code": [
                    "int",
                    "dict[typing.Any, str]",
                    "float"
                ]
            }
        },
        "Codes.default_initial_cat_codes": {
            "name": "default_initial_cat_codes",
            "location": 277,
            "return": [
                "dict[typing.Text, ]"
            ],
            "arguments": {}
        },
        "Codes.default_initial_math_codes": {
            "name": "default_initial_math_codes",
            "location": 293,
            "return": [
                "dict[, ]",
                "dict[str, int]",
                "int",
                "str",
                "bytes"
            ],
            "arguments": {}
        },
        "Codes.default_initial_case_codes": {
            "name": "default_initial_case_codes",
            "location": 311,
            "return": [
                "tuple[dict[str, typing.Union[dict[str, typing.Any],str]]]"
            ],
            "arguments": {}
        },
        "Codes.default_initial_space_factor_codes": {
            "name": "default_initial_space_factor_codes",
            "location": 325,
            "return": [
                "str",
                "bytes",
                "list[list[typing.Any]]"
            ],
            "arguments": {}
        },
        "Codes.default_initial_delimiter_codes": {
            "name": "default_initial_delimiter_codes",
            "location": 332,
            "return": [],
            "arguments": {}
        },
        "Codes.default_initial": {
            "name": "default_initial",
            "location": 339,
            "return": [],
            "arguments": {
                "cls": [
                    "typing.Any",
                    "None",
                    "str",
                    "dict[str, float]",
                    "typing.Mapping"
                ]
            }
        },
        "Codes.default_local": {
            "name": "default_local",
            "location": 353,
            "return": [],
            "arguments": {
                "cls": [
                    "int",
                    "float"
                ],
                "enclosing_scope": [
                    "bool",
                    "dict[, ]"
                ]
            }
        },
        "Codes.get": {
            "name": "get",
            "location": 367,
            "return": [
                "list[]",
                "list[int]",
                "list[dict[, ]]",
                "bytearray",
                "None"
            ],
            "arguments": {
                "self": [],
                "code_type": [
                    "str"
                ],
                "char": [
                    "str"
                ]
            }
        },
        "Codes.set": {
            "name": "set",
            "location": 373,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "code_type": [
                    "str",
                    "int",
                    "None",
                    "float"
                ],
                "char": [
                    "int",
                    "str",
                    "None"
                ],
                "code": [
                    "str",
                    "int",
                    "None"
                ]
            }
        },
        "Codes.get_cat_code": {
            "name": "get_cat_code",
            "location": 380,
            "return": [],
            "arguments": {
                "self": [],
                "char": [
                    "str",
                    "int"
                ]
            }
        },
        "Codes.get_upper_case_code": {
            "name": "get_upper_case_code",
            "location": 383,
            "return": [],
            "arguments": {
                "self": [],
                "char": [
                    "str",
                    "float"
                ]
            }
        },
        "Codes.get_lower_case_code": {
            "name": "get_lower_case_code",
            "location": 386,
            "return": [],
            "arguments": {
                "self": [],
                "char": [
                    "str",
                    "float"
                ]
            }
        },
        "Codes.get_space_factor_code": {
            "name": "get_space_factor_code",
            "location": 389,
            "return": [],
            "arguments": {
                "self": [],
                "char": [
                    "str",
                    "float"
                ]
            }
        },
        "Codes.set_cat_code": {
            "name": "set_cat_code",
            "location": 392,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "char_size": [
                    "int"
                ],
                "code_size": [
                    "int",
                    "str"
                ]
            }
        },
        "Codes.set_upper_case_code": {
            "name": "set_upper_case_code",
            "location": 397,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "char_size": [
                    "int"
                ],
                "code_size": [
                    "int"
                ]
            }
        },
        "Codes.set_lower_case_code": {
            "name": "set_lower_case_code",
            "location": 401,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "char_size": [
                    "int"
                ],
                "code_size": [
                    "int"
                ]
            }
        },
        "Codes.set_space_factor_code": {
            "name": "set_space_factor_code",
            "location": 405,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "char_size": [
                    "int"
                ],
                "code_size": [
                    "int",
                    "float",
                    "set[str]",
                    "list[tuple[typing.Union[str,str,str]]]"
                ]
            }
        },
        "Codes.set_math_code": {
            "name": "set_math_code",
            "location": 409,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "char_size": [
                    "int"
                ],
                "code_size": [
                    "int",
                    "str",
                    "float"
                ]
            }
        },
        "Codes.set_delimiter_code": {
            "name": "set_delimiter_code",
            "location": 419,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "char_size": [
                    "int"
                ],
                "code_size": [
                    "int",
                    "str",
                    "float"
                ]
            }
        },
        "Codes._check_and_get_char_map": {
            "name": "_check_and_get_char_map",
            "location": 429,
            "return": [],
            "arguments": {
                "self": [],
                "code_type": [
                    "str",
                    "list[str]"
                ]
            }
        },
        "Codes._check_and_get_char_map_value": {
            "name": "_check_and_get_char_map_value",
            "location": 434,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "code_type": [
                    "str"
                ],
                "char": []
            }
        },
        "ParametersAccessor.default_initial.get_zero_glue": {
            "name": "get_zero_glue",
            "location": 120,
            "return": [
                "dict[typing.Text, int]"
            ],
            "arguments": {}
        },
        "ParametersAccessor.default_initial.get_empty_token_list": {
            "name": "get_empty_token_list",
            "location": 128,
            "return": [
                "InstructionToken"
            ],
            "arguments": {}
        },
        "Registers.default_initial.init_register": {
            "name": "init_register",
            "location": 193,
            "return": [
                "dict[, None]"
            ],
            "arguments": {}
        }
    },
    "nex-master/nex/banisher.py": {
        "stringify_instrs": {
            "name": "stringify_instrs",
            "location": 58,
            "return": [
                "typing.Generator[typing.Text]",
                "typing.Generator[]"
            ],
            "arguments": {
                "ts": []
            }
        },
        "stringify_instr_list": {
            "name": "stringify_instr_list",
            "location": 90,
            "return": [
                "str"
            ],
            "arguments": {
                "ts": []
            }
        },
        "context_mode": {
            "name": "context_mode",
            "location": 125,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "banisher": [],
                "context_mode": []
            }
        },
        "get_brace_sign": {
            "name": "get_brace_sign",
            "location": 143,
            "return": [
                "int"
            ],
            "arguments": {
                "token": []
            }
        },
        "char_to_tok": {
            "name": "char_to_tok",
            "location": 152,
            "return": [],
            "arguments": {
                "c": []
            }
        },
        "chars_to_toks": {
            "name": "chars_to_toks",
            "location": 165,
            "return": [
                "list[]"
            ],
            "arguments": {
                "cs": []
            }
        },
        "get_str_representation_integer": {
            "name": "get_str_representation_integer",
            "location": 169,
            "return": [
                "str"
            ],
            "arguments": {
                "n": []
            }
        },
        "get_token_representation_integer": {
            "name": "get_token_representation_integer",
            "location": 173,
            "return": [],
            "arguments": {
                "n": []
            }
        },
        "get_str_representation_dimension": {
            "name": "get_str_representation_dimension",
            "location": 177,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "n": []
            }
        },
        "get_token_representation_dimension": {
            "name": "get_token_representation_dimension",
            "location": 183,
            "return": [],
            "arguments": {
                "n": []
            }
        },
        "Banisher.__init__": {
            "name": "__init__",
            "location": 189,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "instructions": [],
                "state": [],
                "reader": []
            }
        },
        "Banisher.from_string": {
            "name": "from_string",
            "location": 201,
            "return": [],
            "arguments": {
                "cls": [],
                "s": [],
                "state": []
            }
        },
        "Banisher._push_context": {
            "name": "_push_context",
            "location": 209,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "context_mode": []
            }
        },
        "Banisher._pop_context": {
            "name": "_pop_context",
            "location": 213,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Banisher.context_mode": {
            "name": "context_mode",
            "location": 218,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Banisher.advance_to_end": {
            "name": "advance_to_end",
            "location": 221,
            "return": [
                "None",
                "typing.Generator[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Banisher.get_next_output_list": {
            "name": "get_next_output_list",
            "location": 230,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Banisher.replace_tokens_on_input": {
            "name": "replace_tokens_on_input",
            "location": 236,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Banisher._iterate": {
            "name": "_iterate",
            "location": 239,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Banisher._get_balanced_text_token": {
            "name": "_get_balanced_text_token",
            "location": 256,
            "return": [
                "InstructionToken"
            ],
            "arguments": {
                "self": []
            }
        },
        "Banisher._handle_macro": {
            "name": "_handle_macro",
            "location": 272,
            "return": [
                "tuple[list[]]"
            ],
            "arguments": {
                "self": [],
                "first_token": []
            }
        },
        "Banisher._handle_if": {
            "name": "_handle_if",
            "location": 358,
            "return": [
                "tuple[list[]]"
            ],
            "arguments": {
                "self": [],
                "first_token": []
            }
        },
        "Banisher._handle_the": {
            "name": "_handle_the",
            "location": 407,
            "return": [
                "tuple[list[]]"
            ],
            "arguments": {
                "self": [],
                "first_token": []
            }
        },
        "Banisher._handle_making_box": {
            "name": "_handle_making_box",
            "location": 494,
            "return": [
                "tuple[list[InstructionToken]]"
            ],
            "arguments": {
                "self": [],
                "first_token": []
            }
        },
        "Banisher._handle_def": {
            "name": "_handle_def",
            "location": 547,
            "return": [
                "tuple[list[InstructionToken]]"
            ],
            "arguments": {
                "self": [],
                "first_token": []
            }
        },
        "Banisher._handle_let": {
            "name": "_handle_let",
            "location": 577,
            "return": [
                "tuple[list[]]"
            ],
            "arguments": {
                "self": [],
                "first_token": []
            }
        },
        "Banisher._handle_change_case": {
            "name": "_handle_change_case",
            "location": 603,
            "return": [
                "tuple[list[]]"
            ],
            "arguments": {
                "self": [],
                "first_token": []
            }
        },
        "Banisher._handle_string": {
            "name": "_handle_string",
            "location": 635,
            "return": [
                "tuple[list[]]"
            ],
            "arguments": {
                "self": [],
                "first_token": []
            }
        },
        "Banisher._handle_cs_name": {
            "name": "_handle_cs_name",
            "location": 654,
            "return": [
                "tuple[list[]]"
            ],
            "arguments": {
                "self": [],
                "first_token": []
            }
        },
        "Banisher._expand_next_input_token": {
            "name": "_expand_next_input_token",
            "location": 677,
            "return": [
                "tuple[list[]]",
                "tuple[list[InstructionToken]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Banisher._handle_macro.tokens_equal": {
            "name": "tokens_equal",
            "location": 275,
            "return": [
                "bool"
            ],
            "arguments": {
                "t": [],
                "u": []
            }
        },
        "Banisher._handle_macro.get_next_token": {
            "name": "get_next_token",
            "location": 288,
            "return": [],
            "arguments": {}
        },
        "Banisher._handle_if.get_condition_sign": {
            "name": "get_condition_sign",
            "location": 365,
            "return": [
                "int"
            ],
            "arguments": {
                "token": []
            }
        },
        "Banisher._handle_if.is_condition_delimiter": {
            "name": "is_condition_delimiter",
            "location": 377,
            "return": [
                "int"
            ],
            "arguments": {
                "token": []
            }
        },
        "Banisher._handle_change_case.get_cased_tok": {
            "name": "get_cased_tok",
            "location": 615,
            "return": [],
            "arguments": {
                "un_cased_tok": []
            }
        }
    },
    "nex-master/nex/box.py": {
        "extract_dimen": {
            "name": "extract_dimen",
            "location": 32,
            "return": [
                "tuple[int]"
            ],
            "arguments": {
                "d": [
                    "typing.AbstractSet",
                    "dict[str, str]",
                    "int",
                    "dict[, ]",
                    "str",
                    "None"
                ]
            }
        },
        "glue_set_ratio": {
            "name": "glue_set_ratio",
            "location": 45,
            "return": [
                "tuple[typing.Union[float,float,int]]"
            ],
            "arguments": {
                "natural_length": [
                    "bool",
                    "float"
                ],
                "desired_length": [
                    "bool",
                    "float"
                ],
                "stretch": [],
                "shrink": []
            }
        },
        "get_penalty": {
            "name": "get_penalty",
            "location": 108,
            "return": [
                "int"
            ],
            "arguments": {
                "pre_break_conts": [
                    "int",
                    "str",
                    "dict[str, typing.Any]",
                    "tuple[typing.Union[float,float]]",
                    "None"
                ],
                "break_item": [
                    "int",
                    "None",
                    "str"
                ]
            }
        },
        "is_break_point": {
            "name": "is_break_point",
            "location": 131,
            "return": [
                "bool"
            ],
            "arguments": {
                "h_list": [],
                "i": [
                    "bool"
                ]
            }
        },
        "contsrep": {
            "name": "contsrep",
            "location": 182,
            "return": [],
            "arguments": {
                "contents": [],
                "n": [
                    "int"
                ]
            }
        },
        "ListElement.__repr__": {
            "name": "__repr__",
            "location": 172,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbstractBox.__init__": {
            "name": "__init__",
            "location": 201,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "contents": [
                    "tuple[typing.Union[bool,str]]"
                ],
                "to": [
                    "None",
                    "str"
                ],
                "spread": [
                    "None",
                    "bool",
                    "str"
                ],
                "set_glue": [
                    "bool"
                ],
                "offset": [
                    "int"
                ]
            }
        },
        "AbstractBox.__repr__": {
            "name": "__repr__",
            "location": 213,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AbstractBox.un_set_glues": {
            "name": "un_set_glues",
            "location": 228,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbstractBox.stretch": {
            "name": "stretch",
            "location": 233,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AbstractBox.shrink": {
            "name": "shrink",
            "location": 237,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AbstractBox.natural_length": {
            "name": "natural_length",
            "location": 241,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbstractBox.min_length": {
            "name": "min_length",
            "location": 258,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbstractBox.is_over_full": {
            "name": "is_over_full",
            "location": 274,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbstractBox.desired_length": {
            "name": "desired_length",
            "location": 278,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AbstractBox.append": {
            "name": "append",
            "location": 286,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbstractBox.extend": {
            "name": "extend",
            "location": 289,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbstractBox.copy": {
            "name": "copy",
            "location": 292,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AbstractBox.glue_set_ratio": {
            "name": "glue_set_ratio",
            "location": 302,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AbstractBox.scale_and_set": {
            "name": "scale_and_set",
            "location": 306,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbstractBox.badness": {
            "name": "badness",
            "location": 350,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "HBox.get_length": {
            "name": "get_length",
            "location": 389,
            "return": [],
            "arguments": {
                "self": [],
                "item": [
                    "str",
                    "typing.Type",
                    "dict[int, dict[str, typing.Any]]",
                    "dict[, ]",
                    "typing.Mapping"
                ]
            }
        },
        "HBox.widths": {
            "name": "widths",
            "location": 396,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "HBox.heights": {
            "name": "heights",
            "location": 400,
            "return": [
                "list[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "HBox.depths": {
            "name": "depths",
            "location": 405,
            "return": [
                "list[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "HBox.width": {
            "name": "width",
            "location": 410,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HBox.height": {
            "name": "height",
            "location": 417,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "HBox.depth": {
            "name": "depth",
            "location": 421,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "HBox.demerit": {
            "name": "demerit",
            "location": 424,
            "return": [
                "int",
                "float"
            ],
            "arguments": {
                "self": [],
                "break_item": [
                    "typing.Callable[, ]",
                    "bool",
                    "dict[str, typing.Any]"
                ],
                "line_penalty": [
                    "int",
                    "float"
                ]
            }
        },
        "HBox.considerable_as_line": {
            "name": "considerable_as_line",
            "location": 441,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "tolerance": [
                    "bool",
                    "bytes",
                    "list[str]"
                ],
                "break_item": [
                    "bool",
                    "bytes",
                    "list[str]"
                ]
            }
        },
        "VBox.get_length": {
            "name": "get_length",
            "location": 448,
            "return": [],
            "arguments": {
                "self": [],
                "item": [
                    "str",
                    "typing.Type",
                    "dict[int, dict[str, typing.Any]]",
                    "dict[, ]",
                    "typing.Mapping"
                ]
            }
        },
        "VBox.widths": {
            "name": "widths",
            "location": 455,
            "return": [
                "list[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "VBox.heights": {
            "name": "heights",
            "location": 460,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "VBox.depths": {
            "name": "depths",
            "location": 464,
            "return": [
                "list[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "VBox.width": {
            "name": "width",
            "location": 469,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "VBox.height": {
            "name": "height",
            "location": 473,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "VBox.depth": {
            "name": "depth",
            "location": 480,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "VBox.page_break_cost_and_penalty": {
            "name": "page_break_cost_and_penalty",
            "location": 491,
            "return": [
                "tuple[int]"
            ],
            "arguments": {
                "self": [],
                "break_item": [
                    "typing.Callable[, ]",
                    "bool"
                ],
                "insert_penalties": [
                    "int"
                ]
            }
        },
        "Rule.__init__": {
            "name": "__init__",
            "location": 515,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "width": [
                    "str",
                    "float",
                    "list[str]",
                    "None",
                    "int"
                ],
                "height": [
                    "str",
                    "float",
                    "list[str]",
                    "None",
                    "int"
                ],
                "depth": [
                    "str",
                    "float",
                    "list[str]",
                    "None",
                    "int"
                ]
            }
        },
        "Glue.__init__": {
            "name": "__init__",
            "location": 533,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dimen": [
                    "int",
                    "float"
                ],
                "stretch": [
                    "int"
                ],
                "shrink": [
                    "int"
                ]
            }
        },
        "Glue.__repr__": {
            "name": "__repr__",
            "location": 540,
            "return": [
                "str",
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "Glue.is_set": {
            "name": "is_set",
            "location": 549,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Glue.min_length": {
            "name": "min_length",
            "location": 553,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Glue.set_naturally": {
            "name": "set_naturally",
            "location": 559,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Glue.set": {
            "name": "set",
            "location": 562,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dimen": [
                    "bool",
                    "float"
                ]
            }
        },
        "Glue.unset": {
            "name": "unset",
            "location": 565,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Glue.length": {
            "name": "length",
            "location": 569,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Kern.__init__": {
            "name": "__init__",
            "location": 579,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dimen": [
                    "int",
                    "float"
                ]
            }
        },
        "Kern.__repr__": {
            "name": "__repr__",
            "location": 582,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "Penalty.__init__": {
            "name": "__init__",
            "location": 594,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "size": [
                    "int",
                    "bytes"
                ]
            }
        },
        "Penalty.__repr__": {
            "name": "__repr__",
            "location": 597,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "Character.__init__": {
            "name": "__init__",
            "location": 628,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "code": [
                    "int",
                    "str",
                    "list[int]",
                    "tuple[typing.Union[float,float]]",
                    "dict[str, L]"
                ],
                "width": [
                    "int",
                    "str",
                    "list[int]",
                    "tuple[typing.Union[float,float]]",
                    "dict[str, L]"
                ],
                "height": [
                    "int",
                    "str",
                    "list[int]",
                    "tuple[typing.Union[float,float]]",
                    "dict[str, L]"
                ],
                "depth": [
                    "int",
                    "str",
                    "list[int]",
                    "tuple[typing.Union[float,float]]",
                    "dict[str, L]"
                ]
            }
        },
        "Character.__repr__": {
            "name": "__repr__",
            "location": 634,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "FontDefinition.__init__": {
            "name": "__init__",
            "location": 678,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "font_nr": [
                    "str",
                    "dict[str, typing.Any]",
                    "int",
                    "None",
                    "dict[, ]",
                    "list[dict[, ]]"
                ],
                "font_name": [
                    "str"
                ],
                "file_name": [
                    "str",
                    "list[]",
                    "None",
                    "dict[, ]"
                ],
                "at_clause": [
                    "None",
                    "str",
                    "dict[str, typing.Any]",
                    "int",
                    "dict[, ]",
                    "list[dict[, ]]"
                ]
            }
        },
        "FontDefinition.__repr__": {
            "name": "__repr__",
            "location": 686,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "FontSelection.__init__": {
            "name": "__init__",
            "location": 693,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "font_nr": [
                    "int",
                    "float"
                ]
            }
        },
        "FontSelection.__repr__": {
            "name": "__repr__",
            "location": 696,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "nex-master/nex/box_writer.py": {
        "write_box_to_doc": {
            "name": "write_box_to_doc",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "doc": [],
                "item": [
                    "dict[, ]",
                    "typing.Type"
                ],
                "horizontal": [
                    "bool"
                ]
            }
        },
        "write_to_dvi_file": {
            "name": "write_to_dvi_file",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "state": [
                    "str",
                    "typing.Any",
                    "None",
                    "bool"
                ],
                "out_stream": [
                    "str",
                    "bytes"
                ],
                "write_pdf": [
                    "bool"
                ]
            }
        }
    },
    "nex-master/nex/evaluator.py": {
        "get_real_decimal_constant": {
            "name": "get_real_decimal_constant",
            "location": 4,
            "return": [
                "float"
            ],
            "arguments": {
                "collection": [
                    "str",
                    "int"
                ]
            }
        },
        "get_integer_constant": {
            "name": "get_integer_constant",
            "location": 12,
            "return": [
                "int"
            ],
            "arguments": {
                "collection": [
                    "int",
                    "str"
                ]
            }
        },
        "get_backtick_target_code": {
            "name": "get_backtick_target_code",
            "location": 18,
            "return": [
                "int"
            ],
            "arguments": {
                "target": [
                    "str",
                    "dict[, ]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "split_at": {
            "name": "split_at",
            "location": 30,
            "return": [
                "list[]"
            ],
            "arguments": {
                "s": [],
                "inds": [
                    "str"
                ]
            }
        },
        "split_hex_code": {
            "name": "split_hex_code",
            "location": 35,
            "return": [
                "list[int]"
            ],
            "arguments": {
                "n": [
                    "int"
                ],
                "hex_length": [
                    "int",
                    "str",
                    "float"
                ],
                "inds": [
                    "str",
                    "int"
                ]
            }
        },
        "evaluate_signs": {
            "name": "evaluate_signs",
            "location": 47,
            "return": [
                "int"
            ],
            "arguments": {
                "signs_token": [
                    "typing.Callable[, ]",
                    "float",
                    "str",
                    "typing.Sequence[str]"
                ]
            }
        }
    },
    "nex-master/nex/feedback.py": {
        "truncate_list": {
            "name": "truncate_list",
            "location": 7,
            "return": [
                "list[typing.Text]"
            ],
            "arguments": {
                "ts": [],
                "n": [
                    "int"
                ]
            }
        },
        "strep": {
            "name": "strep",
            "location": 20,
            "return": [],
            "arguments": {
                "s": []
            }
        },
        "csep": {
            "name": "csep",
            "location": 29,
            "return": [
                "str"
            ],
            "arguments": {
                "args": [],
                "str_func": []
            }
        },
        "clsn": {
            "name": "clsn",
            "location": 44,
            "return": [
                "str"
            ],
            "arguments": {
                "obj": []
            }
        },
        "drep": {
            "name": "drep",
            "location": 52,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "obj": [],
                "a": []
            }
        },
        "dimrep": {
            "name": "dimrep",
            "location": 57,
            "return": [
                "str"
            ],
            "arguments": {
                "d": []
            }
        }
    },
    "nex-master/nex/fonts.py": {
        "scale": {
            "name": "scale",
            "location": 15,
            "return": [
                "int"
            ],
            "arguments": {
                "design_size": [
                    "int",
                    "str"
                ],
                "d": [
                    "int",
                    "str"
                ]
            }
        },
        "FontInfo.__init__": {
            "name": "__init__",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "file_name": [
                    "str",
                    "None"
                ],
                "file_path": [
                    "str"
                ],
                "at_clause": [
                    "dict[, ]",
                    "str",
                    "dict[int, bool]",
                    "dict[str, typing.Any]",
                    "typing.Type"
                ]
            }
        },
        "FontInfo.font_info": {
            "name": "font_info",
            "location": 37,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FontInfo.file_name": {
            "name": "file_name",
            "location": 44,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FontInfo.font_name": {
            "name": "font_name",
            "location": 48,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FontInfo.char_info": {
            "name": "char_info",
            "location": 51,
            "return": [],
            "arguments": {
                "self": [],
                "code": [
                    "str"
                ]
            }
        },
        "FontInfo.design_size": {
            "name": "design_size",
            "location": 55,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FontInfo.scale": {
            "name": "scale",
            "location": 58,
            "return": [],
            "arguments": {
                "self": [],
                "d": [
                    "tuple[typing.Union[int,int,int]]",
                    "set[str]",
                    "typing.Mapping",
                    "None",
                    "list[dict[str, typing.Any]]"
                ]
            }
        },
        "FontInfo.slant": {
            "name": "slant",
            "location": 62,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FontInfo.extra_space": {
            "name": "extra_space",
            "location": 69,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FontInfo.quad": {
            "name": "quad",
            "location": 73,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FontInfo.space_shrink": {
            "name": "space_shrink",
            "location": 77,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FontInfo.space_stretch": {
            "name": "space_stretch",
            "location": 81,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FontInfo.spacing": {
            "name": "spacing",
            "location": 85,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FontInfo.x_height": {
            "name": "x_height",
            "location": 89,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FontInfo.width": {
            "name": "width",
            "location": 93,
            "return": [],
            "arguments": {
                "self": [],
                "code": [
                    "str",
                    "None"
                ]
            }
        },
        "FontInfo.height": {
            "name": "height",
            "location": 97,
            "return": [],
            "arguments": {
                "self": [],
                "code": [
                    "str"
                ]
            }
        },
        "FontInfo.depth": {
            "name": "depth",
            "location": 101,
            "return": [],
            "arguments": {
                "self": [],
                "code": [
                    "str"
                ]
            }
        },
        "FontInfo.__repr__": {
            "name": "__repr__",
            "location": 104,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FontInfo.em_size": {
            "name": "em_size",
            "location": 112,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FontInfo.ex_size": {
            "name": "ex_size",
            "location": 116,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FontState.__init__": {
            "name": "__init__",
            "location": 128,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "font_families": [
                    "int",
                    "float"
                ]
            }
        },
        "FontState.default_initial_font_families": {
            "name": "default_initial_font_families",
            "location": 133,
            "return": [
                "dict[, ]"
            ],
            "arguments": {}
        },
        "FontState.default_initial": {
            "name": "default_initial",
            "location": 140,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "FontState.default_local": {
            "name": "default_local",
            "location": 147,
            "return": [],
            "arguments": {
                "cls": [],
                "enclosing_scope": [
                    "bool",
                    "dict[, ]"
                ]
            }
        },
        "FontState.__repr__": {
            "name": "__repr__",
            "location": 151,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FontState.set_font_family": {
            "name": "set_font_family",
            "location": 157,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "family_nr": [
                    "int",
                    "str"
                ],
                "font_range": [
                    "int",
                    "str"
                ],
                "font_id": [
                    "int",
                    "str"
                ]
            }
        },
        "FontState.set_current_font": {
            "name": "set_current_font",
            "location": 162,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "font_id": [
                    "str",
                    "int"
                ]
            }
        },
        "FontState.current_font_id": {
            "name": "current_font_id",
            "location": 166,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GlobalFontState.__init__": {
            "name": "__init__",
            "location": 180,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "search_paths": [
                    "None",
                    "str"
                ]
            }
        },
        "GlobalFontState.set_skew_char": {
            "name": "set_skew_char",
            "location": 189,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "font_id": [
                    "int",
                    "list[int]",
                    "str"
                ],
                "number": [
                    "int",
                    "list[int]",
                    "str"
                ]
            }
        },
        "GlobalFontState.set_hyphen_char": {
            "name": "set_hyphen_char",
            "location": 192,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "font_id": [
                    "int",
                    "list[int]",
                    "str"
                ],
                "number": [
                    "int",
                    "list[int]",
                    "str"
                ]
            }
        },
        "GlobalFontState.null_font": {
            "name": "null_font",
            "location": 196,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GlobalFontState.get_font": {
            "name": "get_font",
            "location": 199,
            "return": [],
            "arguments": {
                "self": [],
                "font_id": [
                    "str",
                    "int"
                ]
            }
        },
        "GlobalFontState.define_new_font": {
            "name": "define_new_font",
            "location": 202,
            "return": [
                "str",
                "dict[, ]"
            ],
            "arguments": {
                "self": [],
                "file_name": [
                    "str",
                    "bool"
                ],
                "at_clause": [
                    "str"
                ]
            }
        },
        "FontState.default_initial_font_families.get_empty_font_family": {
            "name": "get_empty_font_family",
            "location": 134,
            "return": [
                "dict[, None]"
            ],
            "arguments": {}
        }
    },
    "nex-master/nex/glog.py": {
        "nk": {
            "name": "nk",
            "location": 8,
            "return": [
                "int"
            ],
            "arguments": {
                "d": []
            }
        },
        "k": {
            "name": "k",
            "location": 12,
            "return": [],
            "arguments": {
                "d": [],
                "n": []
            }
        },
        "v": {
            "name": "v",
            "location": 16,
            "return": [],
            "arguments": {
                "d": [],
                "n": []
            }
        },
        "walk_dict": {
            "name": "walk_dict",
            "location": 20,
            "return": [
                "typing.Generator[tuple[]]",
                "typing.Generator[]"
            ],
            "arguments": {
                "d": []
            }
        },
        "get_parents": {
            "name": "get_parents",
            "location": 33,
            "return": [
                "None",
                "list[]",
                "dict[, None]"
            ],
            "arguments": {
                "v": []
            }
        },
        "DAGLog.__init__": {
            "name": "__init__",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DAGLog.set_grid": {
            "name": "set_grid",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "x": [],
                "y": [],
                "v": []
            }
        },
        "DAGLog.set_name": {
            "name": "set_name",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "y": [],
                "v": []
            }
        },
        "DAGLog.get_grid": {
            "name": "get_grid",
            "location": 61,
            "return": [],
            "arguments": {
                "self": [],
                "x": [],
                "y": []
            }
        },
        "DAGLog.write": {
            "name": "write",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "childs": [],
                "target_node": [
                    "typing.Text"
                ]
            }
        },
        "DAGLog.to_str": {
            "name": "to_str",
            "location": 72,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "nr_pads": [
                    "int"
                ]
            }
        },
        "DAGLog._get_grid_chunk": {
            "name": "_get_grid_chunk",
            "location": 81,
            "return": [],
            "arguments": {
                "self": [],
                "x": [],
                "y": []
            }
        },
        "DAGLog._extend_log_down": {
            "name": "_extend_log_down",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "y": []
            }
        },
        "DAGLog._extend_log_right": {
            "name": "_extend_log_right",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "x": []
            }
        },
        "DAGLog._pipe_horizontally": {
            "name": "_pipe_horizontally",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "x": [],
                "y": []
            }
        },
        "DAGLog._pipe_vertically": {
            "name": "_pipe_vertically",
            "location": 110,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "x": [],
                "y": []
            }
        },
        "DAGLog._pipe_west_with_south": {
            "name": "_pipe_west_with_south",
            "location": 118,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "x": [],
                "y": []
            }
        },
        "DAGLog._pipe_north_with_east": {
            "name": "_pipe_north_with_east",
            "location": 126,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "x": [],
                "y": []
            }
        },
        "DAGLog._tunnel_horizontally": {
            "name": "_tunnel_horizontally",
            "location": 136,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "xs": [],
                "xe": [],
                "y": []
            }
        },
        "DAGLog._tunnel_vertically": {
            "name": "_tunnel_vertically",
            "location": 140,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ys": [],
                "ye": [],
                "x": []
            }
        },
        "DAGLog._tunnel_east_then_south": {
            "name": "_tunnel_east_then_south",
            "location": 144,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "xs": [],
                "xe": [],
                "ys": [],
                "ye": []
            }
        },
        "DAGLog._tunnel_south_then_east": {
            "name": "_tunnel_south_then_east",
            "location": 149,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "xs": [],
                "xe": [],
                "ys": [],
                "ye": []
            }
        },
        "DAGLog._write": {
            "name": "_write",
            "location": 154,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "self": [],
                "x": [],
                "y": [],
                "node": [],
                "childs": [],
                "parents": [],
                "to_do": []
            }
        },
        "DAGLog._pad_row": {
            "name": "_pad_row",
            "location": 206,
            "return": [
                "typing.Generator[]",
                "typing.Generator[typing.Text]"
            ],
            "arguments": {
                "self": [],
                "row": [],
                "nr_pads": []
            }
        }
    },
    "nex-master/nex/lexer.py": {
        "is_char_cat": {
            "name": "is_char_cat",
            "location": 71,
            "return": [],
            "arguments": {
                "token": []
            }
        },
        "is_control_sequence_call": {
            "name": "is_control_sequence_call",
            "location": 77,
            "return": [],
            "arguments": {
                "token": []
            }
        },
        "LexToken.__init__": {
            "name": "__init__",
            "location": 40,
            "return": [],
            "arguments": {
                "self": [],
                "line_nr": [],
                "col_nr": [],
                "char_nr": [],
                "char_len": []
            }
        },
        "LexToken.from_char_cat": {
            "name": "from_char_cat",
            "location": 50,
            "return": [],
            "arguments": {
                "cls": [],
                "char": [],
                "cat": []
            }
        },
        "LexToken.from_control_sequence": {
            "name": "from_control_sequence",
            "location": 55,
            "return": [],
            "arguments": {
                "cls": [],
                "name": []
            }
        },
        "LexToken.__str__": {
            "name": "__str__",
            "location": 59,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Lexer.__init__": {
            "name": "__init__",
            "location": 92,
            "return": [],
            "arguments": {
                "self": [],
                "reader": [],
                "get_cat_code_func": []
            }
        },
        "Lexer.from_string": {
            "name": "from_string",
            "location": 98,
            "return": [],
            "arguments": {
                "cls": [],
                "s": [],
                "get_cat_code_func": []
            }
        },
        "Lexer.__iter__": {
            "name": "__iter__",
            "location": 103,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Lexer.__next__": {
            "name": "__next__",
            "location": 106,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Lexer.advance_to_end": {
            "name": "advance_to_end",
            "location": 113,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Lexer._peek_ahead": {
            "name": "_peek_ahead",
            "location": 123,
            "return": [],
            "arguments": {
                "self": [],
                "n": []
            }
        },
        "Lexer._cur_char_cat": {
            "name": "_cur_char_cat",
            "location": 132,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Lexer._chomp_next_char": {
            "name": "_chomp_next_char",
            "location": 135,
            "return": [],
            "arguments": {
                "self": [],
                "peek": []
            }
        },
        "Lexer._chomp_next_char_trio": {
            "name": "_chomp_next_char_trio",
            "location": 141,
            "return": [],
            "arguments": {
                "self": [],
                "peek": []
            }
        },
        "Lexer._process_next_character": {
            "name": "_process_next_character",
            "location": 177,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "nex-master/nex/macro.py": {
        "parse_parameter_text": {
            "name": "parse_parameter_text",
            "location": 6,
            "return": [
                "list[InstructionToken]"
            ],
            "arguments": {
                "tokens": []
            }
        },
        "parse_replacement_text": {
            "name": "parse_replacement_text",
            "location": 81,
            "return": [
                "list[InstructionToken]"
            ],
            "arguments": {
                "tokens": []
            }
        },
        "substitute_params_with_args": {
            "name": "substitute_params_with_args",
            "location": 121,
            "return": [
                "list[typing.Text]"
            ],
            "arguments": {
                "replace_text": [
                    "str"
                ],
                "arguments": [
                    "str"
                ]
            }
        }
    },
    "nex-master/nex/nex.py": {
        "make_input_chain": {
            "name": "make_input_chain",
            "location": 28,
            "return": [
                "tuple[typing.Union[Banisher,Reader]]"
            ],
            "arguments": {
                "state": [
                    "bool"
                ]
            }
        },
        "run_state": {
            "name": "run_state",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "state": [
                    "list[str]",
                    "str",
                    "None"
                ],
                "input_paths": [
                    "str",
                    "list[str]"
                ]
            }
        },
        "run_files": {
            "name": "run_files",
            "location": 69,
            "return": [],
            "arguments": {
                "font_search_paths": [
                    "str",
                    "None"
                ],
                "input_paths": [
                    "str",
                    "bool"
                ]
            }
        },
        "run_and_write": {
            "name": "run_and_write",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "font_search_paths": [
                    "str"
                ],
                "input_paths": [
                    "str"
                ],
                "dvi_path": [
                    "str",
                    "bool"
                ],
                "write_pdf": [
                    "str",
                    "bool"
                ]
            }
        },
        "log_level": {
            "name": "log_level",
            "location": 83,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "v": [
                    "str"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 99,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "nex-master/nex/paragraphs.py": {
        "break_at": {
            "name": "break_at",
            "location": 9,
            "return": [
                "tuple[typing.Union[list[int],list[],float,typing.Counter,box_@_Glue]]"
            ],
            "arguments": {
                "h_list": [],
                "i": [
                    "int"
                ]
            }
        },
        "get_best_route": {
            "name": "get_best_route",
            "location": 32,
            "return": [
                "HListRoute",
                "list[HListRoute]",
                "int",
                "None"
            ],
            "arguments": {
                "h_list": [],
                "h_size": [
                    "bool",
                    "float",
                    "typing.Iterable[typing.Union[int,str]]",
                    "str"
                ],
                "tolerance": [
                    "int",
                    "str",
                    "None",
                    "dict[str, typing.Any]",
                    "float"
                ],
                "line_penalty": [
                    "float",
                    "None",
                    "str",
                    "int",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "get_best_h_lists": {
            "name": "get_best_h_lists",
            "location": 63,
            "return": [],
            "arguments": {
                "h_list": [
                    "int",
                    "float",
                    "list[str]"
                ],
                "h_size": [
                    "int",
                    "float",
                    "list[str]"
                ],
                "tolerance": [
                    "int",
                    "float",
                    "list[str]"
                ],
                "line_penalty": [
                    "int",
                    "float",
                    "list[str]"
                ]
            }
        }
    },
    "nex-master/nex/reader.py": {
        "ReaderBuffer.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [],
            "arguments": {
                "self": [],
                "chars": [],
                "name": []
            }
        },
        "ReaderBuffer.from_string": {
            "name": "from_string",
            "location": 31,
            "return": [],
            "arguments": {
                "cls": [],
                "s": []
            }
        },
        "ReaderBuffer.at_last_char": {
            "name": "at_last_char",
            "location": 35,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ReaderBuffer.current_char": {
            "name": "current_char",
            "location": 40,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ReaderBuffer.peek_ahead": {
            "name": "peek_ahead",
            "location": 43,
            "return": [],
            "arguments": {
                "self": [],
                "n": []
            }
        },
        "ReaderBuffer.__repr__": {
            "name": "__repr__",
            "location": 71,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ReaderBuffer.get_position_str": {
            "name": "get_position_str",
            "location": 78,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ReaderBuffer.increment_loc": {
            "name": "increment_loc",
            "location": 86,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Reader.__init__": {
            "name": "__init__",
            "location": 107,
            "return": [],
            "arguments": {
                "self": [],
                "search_paths": []
            }
        },
        "Reader.get_buffer": {
            "name": "get_buffer",
            "location": 121,
            "return": [],
            "arguments": {
                "self": [],
                "buffer_hash": []
            }
        },
        "Reader._insert_buffer": {
            "name": "_insert_buffer",
            "location": 125,
            "return": [],
            "arguments": {
                "self": [],
                "buff": []
            }
        },
        "Reader.insert_chars": {
            "name": "insert_chars",
            "location": 141,
            "return": [],
            "arguments": {
                "self": [],
                "chars": [],
                "name": []
            }
        },
        "Reader.insert_string": {
            "name": "insert_string",
            "location": 146,
            "return": [],
            "arguments": {
                "self": [],
                "s": [],
                "name": []
            }
        },
        "Reader.insert_file": {
            "name": "insert_file",
            "location": 151,
            "return": [],
            "arguments": {
                "self": [],
                "file_name": []
            }
        },
        "Reader.current_hash": {
            "name": "current_hash",
            "location": 165,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Reader.current_buffer": {
            "name": "current_buffer",
            "location": 170,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Reader.current_buffer_token": {
            "name": "current_buffer_token",
            "location": 175,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Reader.current_chars": {
            "name": "current_chars",
            "location": 180,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Reader.line_nr": {
            "name": "line_nr",
            "location": 185,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Reader.col_nr": {
            "name": "col_nr",
            "location": 191,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Reader.char_nr": {
            "name": "char_nr",
            "location": 197,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Reader.active_buffers_read_order": {
            "name": "active_buffers_read_order",
            "location": 203,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Reader.current_char": {
            "name": "current_char",
            "location": 210,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Reader.peek_ahead": {
            "name": "peek_ahead",
            "location": 213,
            "return": [],
            "arguments": {
                "self": [],
                "n": []
            }
        },
        "Reader.increment_loc": {
            "name": "increment_loc",
            "location": 250,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Reader.advance_loc": {
            "name": "advance_loc",
            "location": 260,
            "return": [],
            "arguments": {
                "self": [],
                "n": []
            }
        },
        "Reader.advance_to_end": {
            "name": "advance_to_end",
            "location": 278,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Reader.get_position_str": {
            "name": "get_position_str",
            "location": 288,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "nex-master/nex/router.py": {
        "get_char_cat_pair_instruction": {
            "name": "get_char_cat_pair_instruction",
            "location": 141,
            "return": [],
            "arguments": {
                "char": [],
                "cat": []
            }
        },
        "make_char_cat_pair_instruction_token_direct": {
            "name": "make_char_cat_pair_instruction_token_direct",
            "location": 154,
            "return": [
                "InstructionToken"
            ],
            "arguments": {
                "char": [],
                "cat": []
            }
        },
        "make_char_cat_pair_instruction_token": {
            "name": "make_char_cat_pair_instruction_token",
            "location": 167,
            "return": [],
            "arguments": {
                "char_cat_lex_token": []
            }
        },
        "make_parameter_control_sequence_instruction": {
            "name": "make_parameter_control_sequence_instruction",
            "location": 175,
            "return": [],
            "arguments": {
                "name": [],
                "parameter": [],
                "instruction": []
            }
        },
        "make_special_control_sequence_instruction": {
            "name": "make_special_control_sequence_instruction",
            "location": 183,
            "return": [],
            "arguments": {
                "name": [],
                "special": [],
                "instruction": []
            }
        },
        "make_primitive_control_sequence_instruction": {
            "name": "make_primitive_control_sequence_instruction",
            "location": 191,
            "return": [
                "InstructionToken"
            ],
            "arguments": {
                "name": [],
                "instruction": []
            }
        },
        "make_unexpanded_control_sequence_instruction": {
            "name": "make_unexpanded_control_sequence_instruction",
            "location": 199,
            "return": [
                "InstructionToken"
            ],
            "arguments": {
                "name": [],
                "parents": []
            }
        },
        "lex_token_to_instruction_token": {
            "name": "lex_token_to_instruction_token",
            "location": 211,
            "return": [],
            "arguments": {
                "lex_token": []
            }
        },
        "make_macro_token": {
            "name": "make_macro_token",
            "location": 223,
            "return": [
                "InstructionToken"
            ],
            "arguments": {
                "name": [],
                "replacement_text": [],
                "parameter_text": [],
                "parents": [],
                "def_type": [
                    "None"
                ],
                "prefixes": [
                    "None"
                ]
            }
        },
        "NoSuchControlSequence.__init__": {
            "name": "__init__",
            "location": 242,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "RouteToken.__init__": {
            "name": "__init__",
            "location": 257,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "type_": [],
                "value": []
            }
        },
        "CSRouter.__init__": {
            "name": "__init__",
            "location": 265,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "param_control_sequences": [],
                "special_control_sequences": [],
                "primitive_control_sequences": [],
                "enclosing_scope": [
                    "None"
                ]
            }
        },
        "CSRouter.default_initial": {
            "name": "default_initial",
            "location": 289,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "CSRouter.default_local": {
            "name": "default_local",
            "location": 308,
            "return": [],
            "arguments": {
                "cls": [],
                "enclosing_scope": []
            }
        },
        "CSRouter._name_means_instruction": {
            "name": "_name_means_instruction",
            "location": 314,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "name": [],
                "instructions": []
            }
        },
        "CSRouter.name_means_delimit_condition": {
            "name": "name_means_delimit_condition",
            "location": 324,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "CSRouter.name_means_end_condition": {
            "name": "name_means_end_condition",
            "location": 331,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "CSRouter.name_means_start_condition": {
            "name": "name_means_start_condition",
            "location": 337,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "CSRouter.lookup_canonical_control_sequence": {
            "name": "lookup_canonical_control_sequence",
            "location": 343,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "CSRouter.lookup_control_sequence": {
            "name": "lookup_control_sequence",
            "location": 347,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "parents": []
            }
        },
        "CSRouter.set_macro": {
            "name": "set_macro",
            "location": 355,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [],
                "replacement_text": [],
                "parameter_text": [],
                "def_type": [],
                "prefixes": [],
                "parents": []
            }
        },
        "CSRouter.do_short_hand_definition": {
            "name": "do_short_hand_definition",
            "location": 370,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [],
                "def_type": [],
                "code": [],
                "target_parents": [],
                "cmd_parents": []
            }
        },
        "CSRouter.define_new_font_control_sequence": {
            "name": "define_new_font_control_sequence",
            "location": 382,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [],
                "font_id": [],
                "cmd_parents": [],
                "target_parents": []
            }
        },
        "CSRouter.do_let_assignment": {
            "name": "do_let_assignment",
            "location": 396,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "new_name": [],
                "target_token": []
            }
        },
        "CSRouter._set_primitive": {
            "name": "_set_primitive",
            "location": 406,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [],
                "instruction": []
            }
        },
        "CSRouter._set_parameter": {
            "name": "_set_parameter",
            "location": 414,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [],
                "parameter": [],
                "instr": []
            }
        },
        "CSRouter._set_special": {
            "name": "_set_special",
            "location": 423,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [],
                "special": [],
                "instr": []
            }
        },
        "CSRouter._copy_control_sequence": {
            "name": "_copy_control_sequence",
            "location": 432,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "target_name": [],
                "new_name": []
            }
        },
        "CSRouter._set_let_character": {
            "name": "_set_let_character",
            "location": 438,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [],
                "char_cat_token": []
            }
        },
        "CSRouter._set_route_token": {
            "name": "_set_route_token",
            "location": 443,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "cs_type": []
            }
        },
        "CSRouter._lookup_route_token": {
            "name": "_lookup_route_token",
            "location": 449,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "CSRouter._resolve_route_token_to_raw_value": {
            "name": "_resolve_route_token_to_raw_value",
            "location": 461,
            "return": [],
            "arguments": {
                "self": [],
                "r": []
            }
        },
        "Instructioner.__init__": {
            "name": "__init__",
            "location": 482,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "lexer": [],
                "resolve_cs_func": []
            }
        },
        "Instructioner.from_string": {
            "name": "from_string",
            "location": 489,
            "return": [],
            "arguments": {
                "cls": [],
                "resolve_cs_func": []
            }
        },
        "Instructioner.replace_tokens_on_input": {
            "name": "replace_tokens_on_input",
            "location": 493,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tokens": []
            }
        },
        "Instructioner.iter_unexpanded": {
            "name": "iter_unexpanded",
            "location": 504,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Instructioner.next_unexpanded": {
            "name": "next_unexpanded",
            "location": 508,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Instructioner.next_expanded": {
            "name": "next_expanded",
            "location": 521,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Instructioner.advance_to_end": {
            "name": "advance_to_end",
            "location": 547,
            "return": [
                "typing.Generator[]",
                "None"
            ],
            "arguments": {
                "self": [],
                "expand": [
                    "bool"
                ]
            }
        }
    },
    "nex-master/nex/scopes.py": {
        "operate": {
            "name": "operate",
            "location": 12,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "object_operand": [
                    "str",
                    "bool"
                ],
                "by_operand": [
                    "str",
                    "bool"
                ],
                "operation": [
                    "str",
                    "dict[, ]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "ScopedAccessor.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "initial_accessor": [
                    "bool",
                    "typing.Callable[, ]",
                    "list[str]"
                ],
                "get_local_accessor_func": [
                    "int"
                ]
            }
        },
        "ScopedAccessor.push_scope": {
            "name": "push_scope",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "scope": [
                    "int",
                    "str"
                ]
            }
        },
        "ScopedAccessor.push_new_scope": {
            "name": "push_new_scope",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ScopedAccessor.pop_scope": {
            "name": "pop_scope",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ScopedAccessor.scope": {
            "name": "scope",
            "location": 37,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ScopedAccessor.global_scope": {
            "name": "global_scope",
            "location": 41,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ScopedAccessor.get_scopes": {
            "name": "get_scopes",
            "location": 44,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": [],
                "is_global": [
                    "int"
                ]
            }
        },
        "ScopedAccessor.try_scope_func_until_success": {
            "name": "try_scope_func_until_success",
            "location": 51,
            "return": [],
            "arguments": {
                "self": [],
                "func_name": [
                    "str",
                    "None",
                    "bool"
                ]
            }
        },
        "ScopedAccessor.try_scope_attr_until_success": {
            "name": "try_scope_attr_until_success",
            "location": 67,
            "return": [],
            "arguments": {
                "self": [],
                "attr_name": [
                    "str"
                ]
            }
        },
        "ScopedAccessor.apply_scope_func": {
            "name": "apply_scope_func",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "is_global": [
                    "typing.Iterable[str]",
                    "str",
                    "typing.Type"
                ],
                "func_name": [
                    "str",
                    "float"
                ]
            }
        },
        "ScopedCodes.from_defaults": {
            "name": "from_defaults",
            "location": 93,
            "return": [],
            "arguments": {
                "cls": [
                    "str",
                    "typing.Type",
                    "bytes"
                ]
            }
        },
        "ScopedCodes.get": {
            "name": "get",
            "location": 96,
            "return": [],
            "arguments": {
                "self": [],
                "code_type": [
                    "str",
                    "bool",
                    "list[str]",
                    "None",
                    "typing.Type"
                ],
                "char": [
                    "str",
                    "bool",
                    "list[str]",
                    "None",
                    "typing.Type"
                ]
            }
        },
        "ScopedCodes.set": {
            "name": "set",
            "location": 99,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "is_global": [
                    "bool",
                    "str",
                    "dict[, ]"
                ]
            }
        },
        "ScopedCodes.get_cat_code": {
            "name": "get_cat_code",
            "location": 102,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ScopedCodes.get_upper_case_code": {
            "name": "get_upper_case_code",
            "location": 105,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ScopedCodes.get_lower_case_code": {
            "name": "get_lower_case_code",
            "location": 108,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ScopedCodes.get_space_factor_code": {
            "name": "get_space_factor_code",
            "location": 111,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ScopedCodes.set_cat_code": {
            "name": "set_cat_code",
            "location": 114,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "is_global": [
                    "list[str]",
                    "None",
                    "typing.Callable[, ]",
                    "bool"
                ]
            }
        },
        "ScopedCodes.set_upper_case_code": {
            "name": "set_upper_case_code",
            "location": 117,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "is_global": [
                    "list[typing.Type]",
                    "dict[str, typing.Any]",
                    "typing.Callable[, ]"
                ]
            }
        },
        "ScopedCodes.set_lower_case_code": {
            "name": "set_lower_case_code",
            "location": 120,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "is_global": [
                    "bool",
                    "list[typing.Type]"
                ]
            }
        },
        "ScopedCodes.set_space_factor_code": {
            "name": "set_space_factor_code",
            "location": 123,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "is_global": [
                    "bool",
                    "list[typing.Type]"
                ]
            }
        },
        "ScopedCodes.set_math_code": {
            "name": "set_math_code",
            "location": 126,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "is_global": [
                    "list[str]",
                    "None",
                    "typing.Callable[, ]",
                    "bool"
                ]
            }
        },
        "ScopedCodes.set_delimiter_code": {
            "name": "set_delimiter_code",
            "location": 129,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "is_global": [
                    "list[str]",
                    "None",
                    "typing.Callable[, ]",
                    "bool"
                ]
            }
        },
        "ScopedRegisters.from_defaults": {
            "name": "from_defaults",
            "location": 136,
            "return": [],
            "arguments": {
                "cls": [
                    "int",
                    "typing.Callable[, ]"
                ]
            }
        },
        "ScopedRegisters.get": {
            "name": "get",
            "location": 139,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ScopedRegisters.pop": {
            "name": "pop",
            "location": 142,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ScopedRegisters.set": {
            "name": "set",
            "location": 145,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "is_global": [
                    "bool",
                    "str",
                    "dict[, ]"
                ]
            }
        },
        "ScopedRegisters.modify_register_value": {
            "name": "modify_register_value",
            "location": 148,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "is_global": [
                    "str",
                    "typing.Callable[, ]",
                    "dict[str, typing.Any]",
                    "bool"
                ],
                "type_": [
                    "dict[str, str]",
                    "dict[, ]",
                    "typing.MutableMapping"
                ],
                "i": [
                    "dict[str, str]",
                    "dict[, ]",
                    "typing.MutableMapping"
                ],
                "by_operand": [
                    "str",
                    "typing.Any",
                    "None",
                    "float",
                    "bool"
                ],
                "operation": [
                    "str",
                    "typing.Any",
                    "None",
                    "float",
                    "bool"
                ]
            }
        },
        "ScopedFontState.from_defaults": {
            "name": "from_defaults",
            "location": 167,
            "return": [],
            "arguments": {
                "cls": [
                    "str",
                    "dict[str, typing.Any]",
                    "int"
                ]
            }
        },
        "ScopedFontState.current_font_id": {
            "name": "current_font_id",
            "location": 171,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ScopedFontState.set_current_font": {
            "name": "set_current_font",
            "location": 174,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "is_global": [
                    "bool",
                    "str",
                    "dict[, ]"
                ]
            }
        },
        "ScopedFontState.set_font_family": {
            "name": "set_font_family",
            "location": 177,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "is_global": [
                    "bool",
                    "str",
                    "dict[, ]"
                ]
            }
        },
        "ScopedRouter.from_defaults": {
            "name": "from_defaults",
            "location": 184,
            "return": [],
            "arguments": {
                "cls": [
                    "str",
                    "frozenset",
                    "int",
                    "float"
                ]
            }
        },
        "ScopedRouter.lookup_canonical_control_sequence": {
            "name": "lookup_canonical_control_sequence",
            "location": 187,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ScopedRouter.lookup_control_sequence": {
            "name": "lookup_control_sequence",
            "location": 191,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ScopedRouter.name_means_delimit_condition": {
            "name": "name_means_delimit_condition",
            "location": 195,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ScopedRouter.name_means_end_condition": {
            "name": "name_means_end_condition",
            "location": 199,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ScopedRouter.name_means_start_condition": {
            "name": "name_means_start_condition",
            "location": 203,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ScopedRouter.set_macro": {
            "name": "set_macro",
            "location": 207,
            "return": [],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "replacement_text": [
                    "str"
                ],
                "parameter_text": [
                    "str"
                ],
                "def_type": [
                    "str",
                    "typing.Type"
                ],
                "prefixes": [
                    "str"
                ],
                "parents": [
                    "str"
                ]
            }
        },
        "ScopedRouter.do_short_hand_definition": {
            "name": "do_short_hand_definition",
            "location": 225,
            "return": [],
            "arguments": {
                "self": [],
                "is_global": [
                    "bool",
                    "typing.Callable[str, bool]"
                ]
            }
        },
        "ScopedRouter.define_new_font_control_sequence": {
            "name": "define_new_font_control_sequence",
            "location": 230,
            "return": [],
            "arguments": {
                "self": [],
                "is_global": [
                    "str",
                    "list[str]",
                    "None",
                    "int"
                ]
            }
        },
        "ScopedRouter.do_let_assignment": {
            "name": "do_let_assignment",
            "location": 235,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "is_global": [
                    "bool"
                ]
            }
        },
        "ScopedParameters.from_defaults": {
            "name": "from_defaults",
            "location": 242,
            "return": [],
            "arguments": {
                "cls": [
                    "int",
                    "typing.Callable[, ]"
                ]
            }
        },
        "ScopedParameters.get": {
            "name": "get",
            "location": 246,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ScopedParameters.set_parameter": {
            "name": "set_parameter",
            "location": 249,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "is_global": [
                    "list[typing.Type]",
                    "bool",
                    "typing.Callable[, ]",
                    "str"
                ]
            }
        },
        "ScopedParameters.modify_parameter_value": {
            "name": "modify_parameter_value",
            "location": 252,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "is_global": [
                    "str",
                    "None",
                    "list[str]",
                    "bool"
                ],
                "parameter": [
                    "dict[str, typing.Any]",
                    "None",
                    "set[]",
                    "typing.Mapping",
                    "bool"
                ],
                "by_operand": [
                    "str",
                    "dict[, ]",
                    "list[]",
                    "float",
                    "int",
                    "None"
                ],
                "operation": [
                    "str",
                    "dict[, ]",
                    "list[]",
                    "float",
                    "int",
                    "None"
                ]
            }
        }
    },
    "nex-master/nex/state.py": {
        "command_token_shifts_to_horizontal": {
            "name": "command_token_shifts_to_horizontal",
            "location": 132,
            "return": [],
            "arguments": {
                "token": []
            }
        },
        "command_token_shifts_to_vertical": {
            "name": "command_token_shifts_to_vertical",
            "location": 141,
            "return": [],
            "arguments": {
                "token": []
            }
        },
        "check_not_vertical": {
            "name": "check_not_vertical",
            "location": 145,
            "return": [],
            "arguments": {
                "method": []
            }
        },
        "check_not_horizontal": {
            "name": "check_not_horizontal",
            "location": 153,
            "return": [],
            "arguments": {
                "method": []
            }
        },
        "after_assignment": {
            "name": "after_assignment",
            "location": 161,
            "return": [],
            "arguments": {
                "method": []
            }
        },
        "check_not_vertical.inner": {
            "name": "inner",
            "location": 146,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "check_not_horizontal.inner": {
            "name": "inner",
            "location": 154,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "after_assignment.inner": {
            "name": "inner",
            "location": 162,
            "return": [],
            "arguments": {
                "self": [],
                "token_source": []
            }
        },
        "ExecuteCommandError.__init__": {
            "name": "__init__",
            "location": 172,
            "return": [],
            "arguments": {
                "self": [],
                "command": [],
                "position_str": []
            }
        },
        "ExecuteCommandError.__str__": {
            "name": "__str__",
            "location": 176,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GlobalState.__init__": {
            "name": "__init__",
            "location": 191,
            "return": [],
            "arguments": {
                "self": [],
                "global_font_state": [],
                "specials": [],
                "codes": [],
                "registers": [],
                "scoped_font_state": [],
                "router": [],
                "parameters": []
            }
        },
        "GlobalState.from_defaults": {
            "name": "from_defaults",
            "location": 277,
            "return": [],
            "arguments": {
                "cls": [],
                "font_search_paths": [],
                "global_font_state": []
            }
        },
        "GlobalState.mode": {
            "name": "mode",
            "location": 294,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GlobalState._layout_list": {
            "name": "_layout_list",
            "location": 298,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GlobalState.mode_depth": {
            "name": "mode_depth",
            "location": 302,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GlobalState.return_to_mode": {
            "name": "return_to_mode",
            "location": 305,
            "return": [],
            "arguments": {
                "self": [],
                "depth": []
            }
        },
        "GlobalState.push_mode": {
            "name": "push_mode",
            "location": 320,
            "return": [],
            "arguments": {
                "self": [],
                "mode": []
            }
        },
        "GlobalState.pop_mode_to_box": {
            "name": "pop_mode_to_box",
            "location": 334,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GlobalState.pop_mode": {
            "name": "pop_mode",
            "location": 346,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GlobalState.append_to_list": {
            "name": "append_to_list",
            "location": 351,
            "return": [],
            "arguments": {
                "self": [],
                "item": []
            }
        },
        "GlobalState.start_new_page": {
            "name": "start_new_page",
            "location": 447,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GlobalState.fill_page": {
            "name": "fill_page",
            "location": 467,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GlobalState.extend_list": {
            "name": "extend_list",
            "location": 554,
            "return": [],
            "arguments": {
                "self": [],
                "items": []
            }
        },
        "GlobalState.group": {
            "name": "group",
            "location": 561,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GlobalState.after_group_queue": {
            "name": "after_group_queue",
            "location": 565,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GlobalState.push_group": {
            "name": "push_group",
            "location": 568,
            "return": [],
            "arguments": {
                "self": [],
                "group": []
            }
        },
        "GlobalState.pop_group": {
            "name": "pop_group",
            "location": 573,
            "return": [],
            "arguments": {
                "self": [],
                "banisher": []
            }
        },
        "GlobalState._scoped_accessors": {
            "name": "_scoped_accessors",
            "location": 582,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GlobalState.push_new_scope": {
            "name": "push_new_scope",
            "location": 586,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GlobalState.pop_scope": {
            "name": "pop_scope",
            "location": 590,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GlobalState.load_new_font": {
            "name": "load_new_font",
            "location": 598,
            "return": [],
            "arguments": {
                "self": [],
                "file_name": [],
                "at_clause": []
            }
        },
        "GlobalState.current_font_id": {
            "name": "current_font_id",
            "location": 618,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GlobalState.current_font": {
            "name": "current_font",
            "location": 622,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GlobalState.get_box_dimen": {
            "name": "get_box_dimen",
            "location": 627,
            "return": [],
            "arguments": {
                "self": [],
                "i": [],
                "type_": []
            }
        },
        "GlobalState.get_infinite_dimen": {
            "name": "get_infinite_dimen",
            "location": 638,
            "return": [],
            "arguments": {
                "self": [],
                "nr_fils": [],
                "nr_units": []
            }
        },
        "GlobalState.get_finite_dimen": {
            "name": "get_finite_dimen",
            "location": 641,
            "return": [],
            "arguments": {
                "self": [],
                "unit": [],
                "nr_units": [],
                "is_true_unit": []
            }
        },
        "GlobalState.evaluate_if_num": {
            "name": "evaluate_if_num",
            "location": 664,
            "return": [],
            "arguments": {
                "self": [],
                "left_number": [],
                "right_number": [],
                "relation": []
            }
        },
        "GlobalState.evaluate_if_odd": {
            "name": "evaluate_if_odd",
            "location": 676,
            "return": [],
            "arguments": {
                "self": [],
                "number": []
            }
        },
        "GlobalState.evaluate_if_v_mode": {
            "name": "evaluate_if_v_mode",
            "location": 679,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GlobalState.evaluate_if_h_mode": {
            "name": "evaluate_if_h_mode",
            "location": 682,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GlobalState.evaluate_if_m_mode": {
            "name": "evaluate_if_m_mode",
            "location": 685,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GlobalState.evaluate_if_inner_mode": {
            "name": "evaluate_if_inner_mode",
            "location": 688,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GlobalState.evaluate_if_chars_equal": {
            "name": "evaluate_if_chars_equal",
            "location": 691,
            "return": [],
            "arguments": {
                "self": [],
                "tok_1": [],
                "tok_2": []
            }
        },
        "GlobalState.evaluate_if_cats_equal": {
            "name": "evaluate_if_cats_equal",
            "location": 696,
            "return": [],
            "arguments": {
                "self": [],
                "tok_1": [],
                "tok_2": []
            }
        },
        "GlobalState.evaluate_if_tokens_equal": {
            "name": "evaluate_if_tokens_equal",
            "location": 700,
            "return": [],
            "arguments": {
                "self": [],
                "tok_1": [],
                "tok_2": []
            }
        },
        "GlobalState.evaluate_if_box_register_void": {
            "name": "evaluate_if_box_register_void",
            "location": 704,
            "return": [],
            "arguments": {
                "self": [],
                "reg_nr": []
            }
        },
        "GlobalState.evaluate_if_box_register_h_box": {
            "name": "evaluate_if_box_register_h_box",
            "location": 708,
            "return": [],
            "arguments": {
                "self": [],
                "reg_nr": []
            }
        },
        "GlobalState.evaluate_if_box_register_v_box": {
            "name": "evaluate_if_box_register_v_box",
            "location": 712,
            "return": [],
            "arguments": {
                "self": [],
                "reg_nr": []
            }
        },
        "GlobalState.evaluate_if_end_of_file": {
            "name": "evaluate_if_end_of_file",
            "location": 716,
            "return": [],
            "arguments": {
                "self": [],
                "input_stream_nr": []
            }
        },
        "GlobalState.evaluate_if_case": {
            "name": "evaluate_if_case",
            "location": 723,
            "return": [],
            "arguments": {
                "self": [],
                "number": []
            }
        },
        "GlobalState.do_paragraph": {
            "name": "do_paragraph",
            "location": 731,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GlobalState._get_character_item": {
            "name": "_get_character_item",
            "location": 779,
            "return": [],
            "arguments": {
                "self": [],
                "code": []
            }
        },
        "GlobalState.add_character_code": {
            "name": "add_character_code",
            "location": 786,
            "return": [],
            "arguments": {
                "self": [],
                "code": []
            }
        },
        "GlobalState.add_character_char": {
            "name": "add_character_char",
            "location": 789,
            "return": [],
            "arguments": {
                "self": [],
                "char": []
            }
        },
        "GlobalState._add_accented_character": {
            "name": "_add_accented_character",
            "location": 792,
            "return": [],
            "arguments": {
                "self": [],
                "accent_code": [],
                "char_code": []
            }
        },
        "GlobalState.do_accent": {
            "name": "do_accent",
            "location": 817,
            "return": [],
            "arguments": {
                "self": [],
                "accent_code": [],
                "target_code": []
            }
        },
        "GlobalState.add_kern": {
            "name": "add_kern",
            "location": 843,
            "return": [],
            "arguments": {
                "self": [],
                "length": []
            }
        },
        "GlobalState.do_un_skip": {
            "name": "do_un_skip",
            "location": 846,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GlobalState.add_penalty": {
            "name": "add_penalty",
            "location": 850,
            "return": [],
            "arguments": {
                "self": [],
                "size": []
            }
        },
        "GlobalState._add_glue": {
            "name": "_add_glue",
            "location": 854,
            "return": [],
            "arguments": {
                "self": [],
                "dimen": [],
                "stretch": [],
                "shrink": []
            }
        },
        "GlobalState._add_stretch_or_shrink_glue": {
            "name": "_add_stretch_or_shrink_glue",
            "location": 859,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GlobalState._add_fil_glue": {
            "name": "_add_fil_glue",
            "location": 865,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GlobalState._add_fill_glue": {
            "name": "_add_fill_glue",
            "location": 871,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GlobalState._add_neg_fil_glue": {
            "name": "_add_neg_fil_glue",
            "location": 877,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GlobalState.add_h_glue": {
            "name": "add_h_glue",
            "location": 884,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GlobalState.add_v_glue": {
            "name": "add_v_glue",
            "location": 888,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GlobalState.add_h_stretch_or_shrink_glue": {
            "name": "add_h_stretch_or_shrink_glue",
            "location": 892,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GlobalState.add_v_stretch_or_shrink_glue": {
            "name": "add_v_stretch_or_shrink_glue",
            "location": 896,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GlobalState.add_h_fil_glue": {
            "name": "add_h_fil_glue",
            "location": 900,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GlobalState.add_v_fil_glue": {
            "name": "add_v_fil_glue",
            "location": 904,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GlobalState.add_h_fill_glue": {
            "name": "add_h_fill_glue",
            "location": 908,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GlobalState.add_v_fill_glue": {
            "name": "add_v_fill_glue",
            "location": 912,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GlobalState.add_h_neg_fil_glue": {
            "name": "add_h_neg_fil_glue",
            "location": 916,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GlobalState.add_v_neg_fil_glue": {
            "name": "add_v_neg_fil_glue",
            "location": 920,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GlobalState.do_space": {
            "name": "do_space",
            "location": 923,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GlobalState._add_rule": {
            "name": "_add_rule",
            "location": 979,
            "return": [],
            "arguments": {
                "self": [],
                "width": [],
                "height": [],
                "depth": []
            }
        },
        "GlobalState.add_v_rule": {
            "name": "add_v_rule",
            "location": 983,
            "return": [],
            "arguments": {
                "self": [],
                "width": [],
                "height": [],
                "depth": []
            }
        },
        "GlobalState.add_h_rule": {
            "name": "add_h_rule",
            "location": 996,
            "return": [],
            "arguments": {
                "self": [],
                "width": [],
                "height": [],
                "depth": []
            }
        },
        "GlobalState.do_indent": {
            "name": "do_indent",
            "location": 1008,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GlobalState.get_register_box": {
            "name": "get_register_box",
            "location": 1037,
            "return": [],
            "arguments": {
                "self": [],
                "i": [],
                "copy": []
            }
        },
        "GlobalState.get_unboxed_register_box": {
            "name": "get_unboxed_register_box",
            "location": 1044,
            "return": [],
            "arguments": {
                "self": [],
                "i": [],
                "copy": [],
                "horizontal": []
            }
        },
        "GlobalState.append_unboxed_register_h_box": {
            "name": "append_unboxed_register_h_box",
            "location": 1082,
            "return": [],
            "arguments": {
                "self": [],
                "i": [],
                "copy": []
            }
        },
        "GlobalState.append_unboxed_register_v_box": {
            "name": "append_unboxed_register_v_box",
            "location": 1088,
            "return": [],
            "arguments": {
                "self": [],
                "i": [],
                "copy": []
            }
        },
        "GlobalState.do_end": {
            "name": "do_end",
            "location": 1094,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GlobalState.start_local_group": {
            "name": "start_local_group",
            "location": 1130,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GlobalState.end_group": {
            "name": "end_group",
            "location": 1134,
            "return": [],
            "arguments": {
                "self": [],
                "banisher": []
            }
        },
        "GlobalState.push_to_after_group_queue": {
            "name": "push_to_after_group_queue",
            "location": 1153,
            "return": [],
            "arguments": {
                "self": [],
                "token": []
            }
        },
        "GlobalState.set_after_assignment_token": {
            "name": "set_after_assignment_token",
            "location": 1156,
            "return": [],
            "arguments": {
                "self": [],
                "token": []
            }
        },
        "GlobalState.do_macro_assigment": {
            "name": "do_macro_assigment",
            "location": 1160,
            "return": [],
            "arguments": {
                "self": [],
                "token_source": [],
                "name": [],
                "parameter_text": [],
                "replacement_text": [],
                "def_type": [],
                "prefixes": [],
                "parents": []
            }
        },
        "GlobalState.set_register": {
            "name": "set_register",
            "location": 1173,
            "return": [],
            "arguments": {
                "self": [],
                "token_source": [],
                "is_global": [],
                "type_": [],
                "i": [],
                "value": []
            }
        },
        "GlobalState.modify_register": {
            "name": "modify_register",
            "location": 1178,
            "return": [],
            "arguments": {
                "self": [],
                "token_source": [],
                "is_global": [],
                "type_": [],
                "i": [],
                "by_operand": [],
                "operation": []
            }
        },
        "GlobalState.set_parameter": {
            "name": "set_parameter",
            "location": 1185,
            "return": [],
            "arguments": {
                "self": [],
                "token_source": [],
                "is_global": [],
                "name": [],
                "value": []
            }
        },
        "GlobalState.set_special": {
            "name": "set_special",
            "location": 1190,
            "return": [],
            "arguments": {
                "self": [],
                "token_source": [],
                "name": [],
                "value": []
            }
        },
        "GlobalState.modify_parameter": {
            "name": "modify_parameter",
            "location": 1195,
            "return": [],
            "arguments": {
                "self": [],
                "token_source": [],
                "is_global": [],
                "parameter": [],
                "by_operand": [],
                "operation": []
            }
        },
        "GlobalState.set_code": {
            "name": "set_code",
            "location": 1202,
            "return": [],
            "arguments": {
                "self": [],
                "token_source": [],
                "is_global": [],
                "code_type": [],
                "char_size": [],
                "code_size": []
            }
        },
        "GlobalState.do_let_assignment": {
            "name": "do_let_assignment",
            "location": 1221,
            "return": [],
            "arguments": {
                "self": [],
                "token_source": [],
                "new_name": []
            }
        },
        "GlobalState.do_short_hand_definition": {
            "name": "do_short_hand_definition",
            "location": 1226,
            "return": [],
            "arguments": {
                "self": [],
                "token_source": [],
                "is_global": [],
                "name": [],
                "def_type": [],
                "code": []
            }
        },
        "GlobalState._select_font": {
            "name": "_select_font",
            "location": 1237,
            "return": [],
            "arguments": {
                "self": [],
                "is_global": [],
                "font_id": []
            }
        },
        "GlobalState.select_font": {
            "name": "select_font",
            "location": 1245,
            "return": [],
            "arguments": {
                "self": [],
                "token_source": [],
                "is_global": [],
                "font_id": []
            }
        },
        "GlobalState.set_font_family": {
            "name": "set_font_family",
            "location": 1250,
            "return": [],
            "arguments": {
                "self": [],
                "token_source": [],
                "is_global": [],
                "family_nr": [],
                "font_range": [],
                "font_id": []
            }
        },
        "GlobalState.set_box_register": {
            "name": "set_box_register",
            "location": 1260,
            "return": [],
            "arguments": {
                "self": [],
                "token_source": [],
                "i": [],
                "item": [],
                "is_global": []
            }
        },
        "GlobalState.define_new_font": {
            "name": "define_new_font",
            "location": 1266,
            "return": [],
            "arguments": {
                "self": [],
                "token_source": [],
                "file_name": [],
                "at_clause": [],
                "cs_name": [],
                "is_global": [],
                "cmd_parents": [],
                "target_parents": []
            }
        },
        "GlobalState.set_skew_char": {
            "name": "set_skew_char",
            "location": 1277,
            "return": [],
            "arguments": {
                "self": [],
                "token_source": []
            }
        },
        "GlobalState.set_hyphen_char": {
            "name": "set_hyphen_char",
            "location": 1282,
            "return": [],
            "arguments": {
                "self": [],
                "token_source": []
            }
        },
        "GlobalState._parse_box_token": {
            "name": "_parse_box_token",
            "location": 1288,
            "return": [],
            "arguments": {
                "self": [],
                "token": []
            }
        },
        "GlobalState.append_register_box": {
            "name": "append_register_box",
            "location": 1325,
            "return": [],
            "arguments": {
                "self": [],
                "i": [],
                "copy": []
            }
        },
        "GlobalState.eval_param_token": {
            "name": "eval_param_token",
            "location": 1330,
            "return": [],
            "arguments": {
                "self": [],
                "tok": []
            }
        },
        "GlobalState.eval_special_token": {
            "name": "eval_special_token",
            "location": 1333,
            "return": [],
            "arguments": {
                "self": [],
                "tok": []
            }
        },
        "GlobalState.eval_register_token": {
            "name": "eval_register_token",
            "location": 1336,
            "return": [],
            "arguments": {
                "self": [],
                "tok": []
            }
        },
        "GlobalState.eval_size_token": {
            "name": "eval_size_token",
            "location": 1342,
            "return": [],
            "arguments": {
                "self": [],
                "size_token": []
            }
        },
        "GlobalState.eval_number_token": {
            "name": "eval_number_token",
            "location": 1399,
            "return": [],
            "arguments": {
                "self": [],
                "number_token": []
            }
        },
        "GlobalState.eval_glue_token": {
            "name": "eval_glue_token",
            "location": 1420,
            "return": [],
            "arguments": {
                "self": [],
                "glue_token": []
            }
        },
        "GlobalState.eval_token_list_token": {
            "name": "eval_token_list_token",
            "location": 1449,
            "return": [],
            "arguments": {
                "self": [],
                "token_list_token": []
            }
        },
        "GlobalState.eval_font_token": {
            "name": "eval_font_token",
            "location": 1458,
            "return": [],
            "arguments": {
                "self": [],
                "tok": []
            }
        },
        "GlobalState.execute_command_tokens": {
            "name": "execute_command_tokens",
            "location": 1465,
            "return": [],
            "arguments": {
                "self": [],
                "commands": [],
                "banisher": []
            }
        },
        "GlobalState.execute_command_token": {
            "name": "execute_command_token",
            "location": 1475,
            "return": [],
            "arguments": {
                "self": [],
                "command": [],
                "banisher": []
            }
        },
        "GlobalState._shift_to_horizontal": {
            "name": "_shift_to_horizontal",
            "location": 1486,
            "return": [],
            "arguments": {
                "self": [],
                "token": [],
                "banisher": []
            }
        },
        "GlobalState._shift_to_vertical": {
            "name": "_shift_to_vertical",
            "location": 1502,
            "return": [],
            "arguments": {
                "self": [],
                "token": [],
                "banisher": []
            }
        },
        "GlobalState.tok_assign": {
            "name": "tok_assign",
            "location": 1516,
            "return": [],
            "arguments": {
                "self": [],
                "cmd_value": [],
                "banisher": []
            }
        },
        "GlobalState.tok_relax": {
            "name": "tok_relax",
            "location": 1678,
            "return": [],
            "arguments": {
                "self": [],
                "cmd_value": [],
                "banisher": []
            }
        },
        "GlobalState.tok_left_brace": {
            "name": "tok_left_brace",
            "location": 1682,
            "return": [],
            "arguments": {
                "self": [],
                "cmd_value": [],
                "banisher": []
            }
        },
        "GlobalState.tok_right_brace": {
            "name": "tok_right_brace",
            "location": 1689,
            "return": [],
            "arguments": {
                "self": [],
                "cmd_value": [],
                "banisher": []
            }
        },
        "GlobalState.tok_begin_group": {
            "name": "tok_begin_group",
            "location": 1695,
            "return": [],
            "arguments": {
                "self": [],
                "cmd_value": [],
                "banisher": []
            }
        },
        "GlobalState.tok_end_group": {
            "name": "tok_end_group",
            "location": 1698,
            "return": [],
            "arguments": {
                "self": [],
                "cmd_value": [],
                "banisher": []
            }
        },
        "GlobalState.tok_show_token": {
            "name": "tok_show_token",
            "location": 1701,
            "return": [],
            "arguments": {
                "self": [],
                "cmd_value": [],
                "banisher": []
            }
        },
        "GlobalState.tok_show_box": {
            "name": "tok_show_box",
            "location": 1704,
            "return": [],
            "arguments": {
                "self": [],
                "cmd_value": [],
                "banisher": []
            }
        },
        "GlobalState.tok_show_lists": {
            "name": "tok_show_lists",
            "location": 1707,
            "return": [],
            "arguments": {
                "self": [],
                "cmd_value": [],
                "banisher": []
            }
        },
        "GlobalState.tok_show_the": {
            "name": "tok_show_the",
            "location": 1710,
            "return": [],
            "arguments": {
                "self": [],
                "cmd_value": [],
                "banisher": []
            }
        },
        "GlobalState.tok_ship_out": {
            "name": "tok_ship_out",
            "location": 1713,
            "return": [],
            "arguments": {
                "self": [],
                "cmd_value": [],
                "banisher": []
            }
        },
        "GlobalState.tok_ignore_spaces": {
            "name": "tok_ignore_spaces",
            "location": 1716,
            "return": [],
            "arguments": {
                "self": [],
                "cmd_value": [],
                "banisher": []
            }
        },
        "GlobalState.tok_set_after_assignment_token": {
            "name": "tok_set_after_assignment_token",
            "location": 1719,
            "return": [],
            "arguments": {
                "self": [],
                "cmd_value": [],
                "banisher": []
            }
        },
        "GlobalState.tok_add_to_after_group_tokens": {
            "name": "tok_add_to_after_group_tokens",
            "location": 1722,
            "return": [],
            "arguments": {
                "self": [],
                "cmd_value": [],
                "banisher": []
            }
        },
        "GlobalState.tok_message": {
            "name": "tok_message",
            "location": 1725,
            "return": [],
            "arguments": {
                "self": [],
                "cmd_value": [],
                "banisher": []
            }
        },
        "GlobalState.tok_error_message": {
            "name": "tok_error_message",
            "location": 1731,
            "return": [],
            "arguments": {
                "self": [],
                "cmd_value": [],
                "banisher": []
            }
        },
        "GlobalState.tok_open_input": {
            "name": "tok_open_input",
            "location": 1737,
            "return": [],
            "arguments": {
                "self": [],
                "cmd_value": [],
                "banisher": []
            }
        },
        "GlobalState.tok_close_input": {
            "name": "tok_close_input",
            "location": 1744,
            "return": [],
            "arguments": {
                "self": [],
                "cmd_value": [],
                "banisher": []
            }
        },
        "GlobalState.tok_open_output": {
            "name": "tok_open_output",
            "location": 1747,
            "return": [],
            "arguments": {
                "self": [],
                "cmd_value": [],
                "banisher": []
            }
        },
        "GlobalState.tok_close_output": {
            "name": "tok_close_output",
            "location": 1750,
            "return": [],
            "arguments": {
                "self": [],
                "cmd_value": [],
                "banisher": []
            }
        },
        "GlobalState.tok_write": {
            "name": "tok_write",
            "location": 1753,
            "return": [],
            "arguments": {
                "self": [],
                "cmd_value": [],
                "banisher": []
            }
        },
        "GlobalState.tok_do_special": {
            "name": "tok_do_special",
            "location": 1762,
            "return": [],
            "arguments": {
                "self": [],
                "cmd_value": [],
                "banisher": []
            }
        },
        "GlobalState.tok_add_penalty": {
            "name": "tok_add_penalty",
            "location": 1765,
            "return": [],
            "arguments": {
                "self": [],
                "cmd_value": [],
                "banisher": []
            }
        },
        "GlobalState.tok_add_kern": {
            "name": "tok_add_kern",
            "location": 1768,
            "return": [],
            "arguments": {
                "self": [],
                "cmd_value": [],
                "banisher": []
            }
        },
        "GlobalState.tok_add_math_kern": {
            "name": "tok_add_math_kern",
            "location": 1771,
            "return": [],
            "arguments": {
                "self": [],
                "cmd_value": [],
                "banisher": []
            }
        },
        "GlobalState.tok_un_penalty": {
            "name": "tok_un_penalty",
            "location": 1774,
            "return": [],
            "arguments": {
                "self": [],
                "cmd_value": [],
                "banisher": []
            }
        },
        "GlobalState.tok_un_kern": {
            "name": "tok_un_kern",
            "location": 1777,
            "return": [],
            "arguments": {
                "self": [],
                "cmd_value": [],
                "banisher": []
            }
        },
        "GlobalState.tok_un_glue": {
            "name": "tok_un_glue",
            "location": 1780,
            "return": [],
            "arguments": {
                "self": [],
                "cmd_value": [],
                "banisher": []
            }
        },
        "GlobalState.tok_mark": {
            "name": "tok_mark",
            "location": 1783,
            "return": [],
            "arguments": {
                "self": [],
                "cmd_value": [],
                "banisher": []
            }
        },
        "GlobalState.tok_insert": {
            "name": "tok_insert",
            "location": 1786,
            "return": [],
            "arguments": {
                "self": [],
                "cmd_value": [],
                "banisher": []
            }
        },
        "GlobalState.tok_vertical_adjust": {
            "name": "tok_vertical_adjust",
            "location": 1789,
            "return": [],
            "arguments": {
                "self": [],
                "cmd_value": [],
                "banisher": []
            }
        },
        "GlobalState.tok_add_leaders": {
            "name": "tok_add_leaders",
            "location": 1792,
            "return": [],
            "arguments": {
                "self": [],
                "cmd_value": [],
                "banisher": []
            }
        },
        "GlobalState.tok_add_space": {
            "name": "tok_add_space",
            "location": 1795,
            "return": [],
            "arguments": {
                "self": [],
                "cmd_value": [],
                "banisher": []
            }
        },
        "GlobalState.tok_add_box": {
            "name": "tok_add_box",
            "location": 1799,
            "return": [],
            "arguments": {
                "self": [],
                "cmd_value": [],
                "banisher": []
            }
        },
        "GlobalState.tok_unpack_box": {
            "name": "tok_unpack_box",
            "location": 1805,
            "return": [],
            "arguments": {
                "self": [],
                "cmd_value": [],
                "banisher": []
            }
        },
        "GlobalState.tok_indent": {
            "name": "tok_indent",
            "location": 1825,
            "return": [],
            "arguments": {
                "self": [],
                "cmd_value": [],
                "banisher": []
            }
        },
        "GlobalState.tok_no_indent": {
            "name": "tok_no_indent",
            "location": 1829,
            "return": [],
            "arguments": {
                "self": [],
                "cmd_value": [],
                "banisher": []
            }
        },
        "GlobalState.tok_par": {
            "name": "tok_par",
            "location": 1832,
            "return": [],
            "arguments": {
                "self": [],
                "cmd_value": [],
                "banisher": []
            }
        },
        "GlobalState.tok_add_glue": {
            "name": "tok_add_glue",
            "location": 1836,
            "return": [],
            "arguments": {
                "self": [],
                "cmd_value": [],
                "banisher": []
            }
        },
        "GlobalState.tok_translate_box": {
            "name": "tok_translate_box",
            "location": 1863,
            "return": [],
            "arguments": {
                "self": [],
                "cmd_value": [],
                "banisher": []
            }
        },
        "GlobalState.tok_add_horizontal_rule": {
            "name": "tok_add_horizontal_rule",
            "location": 1866,
            "return": [],
            "arguments": {
                "self": [],
                "cmd_value": [],
                "banisher": []
            }
        },
        "GlobalState.tok_add_vertical_rule": {
            "name": "tok_add_vertical_rule",
            "location": 1874,
            "return": [],
            "arguments": {
                "self": [],
                "cmd_value": [],
                "banisher": []
            }
        },
        "GlobalState.tok_horizontal_align": {
            "name": "tok_horizontal_align",
            "location": 1882,
            "return": [],
            "arguments": {
                "self": [],
                "cmd_value": [],
                "banisher": []
            }
        },
        "GlobalState.tok_vertical_align": {
            "name": "tok_vertical_align",
            "location": 1885,
            "return": [],
            "arguments": {
                "self": [],
                "cmd_value": [],
                "banisher": []
            }
        },
        "GlobalState.tok_end": {
            "name": "tok_end",
            "location": 1888,
            "return": [],
            "arguments": {
                "self": [],
                "cmd_value": [],
                "banisher": []
            }
        },
        "GlobalState.tok_dump": {
            "name": "tok_dump",
            "location": 1891,
            "return": [],
            "arguments": {
                "self": [],
                "cmd_value": [],
                "banisher": []
            }
        },
        "GlobalState.tok_add_control_space": {
            "name": "tok_add_control_space",
            "location": 1894,
            "return": [],
            "arguments": {
                "self": [],
                "cmd_value": [],
                "banisher": []
            }
        },
        "GlobalState.tok_add_character_explicit": {
            "name": "tok_add_character_explicit",
            "location": 1897,
            "return": [],
            "arguments": {
                "self": [],
                "cmd_value": [],
                "banisher": []
            }
        },
        "GlobalState.tok_add_accent": {
            "name": "tok_add_accent",
            "location": 1901,
            "return": [],
            "arguments": {
                "self": [],
                "cmd_value": [],
                "banisher": []
            }
        },
        "GlobalState.tok_add_italic_correction": {
            "name": "tok_add_italic_correction",
            "location": 1919,
            "return": [],
            "arguments": {
                "self": [],
                "cmd_value": [],
                "banisher": []
            }
        },
        "GlobalState.tok_add_discretionary": {
            "name": "tok_add_discretionary",
            "location": 1923,
            "return": [],
            "arguments": {
                "self": [],
                "cmd_value": [],
                "banisher": []
            }
        },
        "GlobalState.tok_add_discretionary_hyphen": {
            "name": "tok_add_discretionary_hyphen",
            "location": 1926,
            "return": [],
            "arguments": {
                "self": [],
                "cmd_value": [],
                "banisher": []
            }
        },
        "GlobalState.tok_do_math_shift": {
            "name": "tok_do_math_shift",
            "location": 1929,
            "return": [],
            "arguments": {
                "self": [],
                "cmd_value": [],
                "banisher": []
            }
        },
        "GlobalState._execute_command_token": {
            "name": "_execute_command_token",
            "location": 1934,
            "return": [],
            "arguments": {
                "self": [],
                "token": [],
                "banisher": []
            }
        },
        "GlobalState.evaluate_if_token_to_block": {
            "name": "evaluate_if_token_to_block",
            "location": 1955,
            "return": [],
            "arguments": {
                "self": [],
                "if_token": []
            }
        },
        "GlobalState.do_indent.append_parindent_box": {
            "name": "append_parindent_box",
            "location": 1009,
            "return": [],
            "arguments": {}
        }
    },
    "nex-master/nex/tokens.py": {
        "get_position_str": {
            "name": "get_position_str",
            "location": 13,
            "return": [],
            "arguments": {
                "chars": [],
                "char_nr": [],
                "char_len": [],
                "line_nr": [],
                "col_nr": []
            }
        },
        "BaseToken.__init__": {
            "name": "__init__",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "type_": [],
                "value": [
                    "None"
                ]
            }
        },
        "BaseToken.__hash__": {
            "name": "__hash__",
            "location": 55,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseToken.type": {
            "name": "type",
            "location": 59,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BaseToken.matches": {
            "name": "matches",
            "location": 62,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "BaseToken.value_str": {
            "name": "value_str",
            "location": 66,
            "return": [
                "typing.Text",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseToken.label_str": {
            "name": "label_str",
            "location": 84,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseToken.__repr__": {
            "name": "__repr__",
            "location": 87,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseToken.__str__": {
            "name": "__str__",
            "location": 90,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "AncestryToken.__init__": {
            "name": "__init__",
            "location": 101,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "type_": [],
                "value": [],
                "parents": []
            }
        },
        "AncestryToken.print_debug_info": {
            "name": "print_debug_info",
            "location": 111,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "state": []
            }
        },
        "AncestryToken.print_used_macros": {
            "name": "print_used_macros",
            "location": 118,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "state": []
            }
        },
        "AncestryToken.get_used_macros": {
            "name": "get_used_macros",
            "location": 134,
            "return": [
                "set[]",
                "dict[, ]"
            ],
            "arguments": {
                "self": []
            }
        },
        "AncestryToken.to_dict": {
            "name": "to_dict",
            "location": 142,
            "return": [
                "None",
                "dict[None, None]",
                "dict[AncestryToken, ]"
            ],
            "arguments": {
                "self": []
            }
        },
        "InstructionToken.__init__": {
            "name": "__init__",
            "location": 165,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "instruction": []
            }
        },
        "InstructionToken.copy": {
            "name": "copy",
            "location": 169,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "InstructionToken.type": {
            "name": "type",
            "location": 183,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "InstructionToken.__repr__": {
            "name": "__repr__",
            "location": 186,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "InstructionToken.__str__": {
            "name": "__str__",
            "location": 191,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "InstructionToken.label_str": {
            "name": "label_str",
            "location": 197,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "InstructionToken.get_used_macros": {
            "name": "get_used_macros",
            "location": 209,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CommandToken.__init__": {
            "name": "__init__",
            "location": 222,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "command": []
            }
        },
        "CommandToken.__repr__": {
            "name": "__repr__",
            "location": 226,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "CommandToken.__str__": {
            "name": "__str__",
            "location": 231,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "nex-master/nex/utils.py": {
        "pt_to_sp": {
            "name": "pt_to_sp",
            "location": 9,
            "return": [
                "int"
            ],
            "arguments": {
                "pt": [
                    "bytes",
                    "int",
                    "typing.IO",
                    "list[str]",
                    "str"
                ]
            }
        },
        "sp_to_pt": {
            "name": "sp_to_pt",
            "location": 13,
            "return": [],
            "arguments": {
                "pt": [
                    "bytes",
                    "int",
                    "typing.IO",
                    "list[str]",
                    "str"
                ]
            }
        },
        "get_unique_id": {
            "name": "get_unique_id",
            "location": 20,
            "return": [
                "int",
                "dict[, ]",
                "list[int]",
                "list[list[int]]",
                "str"
            ],
            "arguments": {}
        },
        "get_default_font_paths": {
            "name": "get_default_font_paths",
            "location": 27,
            "return": [
                "list[]"
            ],
            "arguments": {}
        },
        "sum_infinities": {
            "name": "sum_infinities",
            "location": 41,
            "return": [
                "list[int]"
            ],
            "arguments": {
                "ds": [
                    "dict[, ]"
                ]
            }
        },
        "ensure_extension": {
            "name": "ensure_extension",
            "location": 55,
            "return": [
                "str"
            ],
            "arguments": {
                "path": [
                    "str"
                ],
                "extension": [
                    "dict[str, typing.Any]",
                    "bool",
                    "set[str]",
                    "str"
                ]
            }
        },
        "find_file": {
            "name": "find_file",
            "location": 63,
            "return": [
                "str"
            ],
            "arguments": {
                "file_name": [
                    "str"
                ],
                "search_paths": [
                    "None",
                    "str",
                    "tuple[typing.Union[str,str,str]]"
                ]
            }
        },
        "file_path_to_chars": {
            "name": "file_path_to_chars",
            "location": 80,
            "return": [
                "list[str]"
            ],
            "arguments": {
                "file_path": [
                    "str"
                ]
            }
        },
        "enums_to_values": {
            "name": "enums_to_values",
            "location": 99,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "enums": [
                    "str"
                ]
            }
        },
        "InfiniteDimension.__init__": {
            "name": "__init__",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "factor": [
                    "int",
                    "float"
                ],
                "nr_fils": [
                    "int",
                    "float"
                ]
            }
        }
    },
    "nex-master/nex/__init__.py": {},
    "nex-master/nex/constants/codes.py": {},
    "nex-master/nex/constants/commands.py": {},
    "nex-master/nex/constants/control_sequences.py": {},
    "nex-master/nex/constants/instructions.py": {},
    "nex-master/nex/constants/parameters.py": {
        "param_instr_subset": {
            "name": "param_instr_subset",
            "location": 243,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "instr": [
                    "str",
                    "dict[, ]",
                    "int",
                    "typing.Type"
                ]
            }
        },
        "is_parameter_instr": {
            "name": "is_parameter_instr",
            "location": 247,
            "return": [
                "bool"
            ],
            "arguments": {
                "instr": [
                    "str"
                ]
            }
        },
        "is_parameter_type": {
            "name": "is_parameter_type",
            "location": 251,
            "return": [
                "bool"
            ],
            "arguments": {
                "type_": [
                    "str",
                    "tuple[typing.Type]",
                    "typing.Type"
                ]
            }
        }
    },
    "nex-master/nex/constants/specials.py": {
        "is_special_type": {
            "name": "is_special_type",
            "location": 101,
            "return": [
                "bool"
            ],
            "arguments": {
                "type_": [
                    "str",
                    "typing.Type"
                ]
            }
        }
    },
    "nex-master/nex/constants/units.py": {},
    "nex-master/nex/constants/__init__.py": {},
    "nex-master/nex/dampf/dvi_document.py": {
        "DVIDocument.__init__": {
            "name": "__init__",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "magnification": [
                    "int",
                    "str"
                ]
            }
        },
        "DVIDocument.instructions": {
            "name": "instructions",
            "location": 62,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DVIDocument.flat_instruction_parts": {
            "name": "flat_instruction_parts",
            "location": 66,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "DVIDocument.op_code_pointers": {
            "name": "op_code_pointers",
            "location": 69,
            "return": [
                "list[int]"
            ],
            "arguments": {
                "self": [],
                "op_code": [
                    "str",
                    "int",
                    "None",
                    "Exception"
                ]
            }
        },
        "DVIDocument._begin_page_pointers": {
            "name": "_begin_page_pointers",
            "location": 80,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DVIDocument.last_begin_page_pointer": {
            "name": "last_begin_page_pointer",
            "location": 84,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "DVIDocument.nr_begin_page_pointers": {
            "name": "nr_begin_page_pointers",
            "location": 89,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "DVIDocument.begin_new_page": {
            "name": "begin_new_page",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DVIDocument._end_page": {
            "name": "_end_page",
            "location": 102,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DVIDocument.define_font": {
            "name": "define_font",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "font_nr": [
                    "str",
                    "bool"
                ],
                "font_name": [
                    "str",
                    "dict[, ]",
                    "list[dict[str, typing.Any]]"
                ],
                "font_path": [
                    "str",
                    "typing.BinaryIO",
                    "bool"
                ],
                "scale_factor_ratio": [
                    "float"
                ]
            }
        },
        "DVIDocument._define_font": {
            "name": "_define_font",
            "location": 123,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "define_font_nr_instr": [
                    "str",
                    "list[]",
                    "tuple[]",
                    "typing.Callable[[], None]"
                ]
            }
        },
        "DVIDocument.select_font": {
            "name": "select_font",
            "location": 126,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "font_nr": [
                    "str",
                    "int",
                    "list[int]",
                    "list[]"
                ]
            }
        },
        "DVIDocument.current_font_info": {
            "name": "current_font_info",
            "location": 133,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DVIDocument._end_document": {
            "name": "_end_document",
            "location": 136,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DVIDocument._do_postamble": {
            "name": "_do_postamble",
            "location": 143,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DVIDocument._do_post_postamble": {
            "name": "_do_post_postamble",
            "location": 159,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DVIDocument.push": {
            "name": "push",
            "location": 168,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DVIDocument.pop": {
            "name": "pop",
            "location": 174,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DVIDocument.down": {
            "name": "down",
            "location": 178,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "a": [
                    "list[int]",
                    "list[str]",
                    "list[list[int]]",
                    "bool"
                ]
            }
        },
        "DVIDocument.right": {
            "name": "right",
            "location": 181,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "a": [
                    "list[int]",
                    "list[list[int]]",
                    "list[float]",
                    "tuple[typing.Union[int,int,int]]"
                ]
            }
        },
        "DVIDocument._encode": {
            "name": "_encode",
            "location": 184,
            "return": [
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "DVIDocument.set_char": {
            "name": "set_char",
            "location": 187,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "char": [
                    "str",
                    "int",
                    "list[str]",
                    "list[]",
                    "bytes"
                ]
            }
        },
        "DVIDocument.put_char": {
            "name": "put_char",
            "location": 190,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "char": [
                    "list[str]",
                    "int",
                    "str",
                    "bytes"
                ]
            }
        },
        "DVIDocument.pretty_print": {
            "name": "pretty_print",
            "location": 193,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DVIDocument.write": {
            "name": "write",
            "location": 257,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "stream": [
                    "typing.TextIO",
                    "typing.IO"
                ]
            }
        },
        "DVIDocument.put_rule": {
            "name": "put_rule",
            "location": 266,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "height": [
                    "int",
                    "float"
                ],
                "width": [
                    "int",
                    "float"
                ]
            }
        },
        "DVIDocument.set_rule": {
            "name": "set_rule",
            "location": 270,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "height": [
                    "int"
                ],
                "width": [
                    "int"
                ]
            }
        },
        "DVIDocument.pretty_print.bps": {
            "name": "bps",
            "location": 196,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "bp": []
            }
        },
        "DVIDocument.pretty_print.bls": {
            "name": "bls",
            "location": 200,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "nb": []
            }
        }
    },
    "nex-master/nex/dampf/dvi_spec.py": {
        "_encode_integer_to_bytes": {
            "name": "_encode_integer_to_bytes",
            "location": 105,
            "return": [
                "bytes"
            ],
            "arguments": {
                "length": [
                    "int"
                ],
                "value": [
                    "int"
                ],
                "signed": [],
                "allow_unsigned_4_byte": [
                    "bool"
                ]
            }
        },
        "get_simple_instruction_func": {
            "name": "get_simple_instruction_func",
            "location": 394,
            "return": [],
            "arguments": {
                "op_code": [
                    "str",
                    "bool"
                ]
            }
        },
        "g": {
            "name": "g",
            "location": 405,
            "return": [
                "typing.Callable[, ]"
            ],
            "arguments": {
                "length": [
                    "str",
                    "int",
                    "None",
                    "typing.Type"
                ],
                "signed": [
                    "bool"
                ],
                "name": [
                    "typing.Text"
                ]
            }
        },
        "get_define_font_nr_instruction_func": {
            "name": "get_define_font_nr_instruction_func",
            "location": 410,
            "return": [],
            "arguments": {
                "op_code": [
                    "bool"
                ],
                "font_nr_length_bytes": [
                    "bool"
                ]
            }
        },
        "get_do_special_instruction_func": {
            "name": "get_do_special_instruction_func",
            "location": 441,
            "return": [],
            "arguments": {
                "op_code": [
                    "str",
                    "bool",
                    "list[str]",
                    "None"
                ],
                "command_length_bytes": [
                    "str",
                    "bool",
                    "list[str]",
                    "None"
                ]
            }
        },
        "get_small_set_char_instruction_func": {
            "name": "get_small_set_char_instruction_func",
            "location": 543,
            "return": [
                "EncodedInstruction"
            ],
            "arguments": {
                "char": [
                    "str"
                ]
            }
        },
        "get_small_select_font_nr_instruction": {
            "name": "get_small_select_font_nr_instruction",
            "location": 551,
            "return": [
                "EncodedInstruction"
            ],
            "arguments": {
                "font_nr": [
                    "str",
                    "int",
                    "dict[str, str]",
                    "typing.Type"
                ]
            }
        },
        "get_preamble_instruction": {
            "name": "get_preamble_instruction",
            "location": 575,
            "return": [
                "EncodedInstruction"
            ],
            "arguments": {
                "dvi_format": [
                    "str"
                ],
                "numerator": [
                    "str",
                    "dict[str, typing.Sequence[str]]",
                    "bool"
                ],
                "denominator": [
                    "str",
                    "dict[str, typing.Sequence[str]]",
                    "bool"
                ],
                "magnification": [
                    "str",
                    "dict[str, typing.Sequence[str]]",
                    "bool"
                ],
                "comment": []
            }
        },
        "get_post_postamble_instruction": {
            "name": "get_post_postamble_instruction",
            "location": 604,
            "return": [
                "EncodedInstruction"
            ],
            "arguments": {
                "postamble_pointer": [
                    "str",
                    "int"
                ],
                "dvi_format": [
                    "str",
                    "None"
                ]
            }
        },
        "_get_func_on_bytes": {
            "name": "_get_func_on_bytes",
            "location": 703,
            "return": [
                "str"
            ],
            "arguments": {
                "n": [
                    "int",
                    "None",
                    "str"
                ],
                "funcs": [
                    "str"
                ],
                "signed": [
                    "int",
                    "None",
                    "str"
                ]
            }
        },
        "_scatter_instruction": {
            "name": "_scatter_instruction",
            "location": 708,
            "return": [],
            "arguments": {
                "signed": [
                    "bool",
                    "str",
                    "list[]",
                    "list[int]",
                    "dict[str, object]"
                ],
                "get_instruction_funcs": [
                    "bool",
                    "str",
                    "list[]",
                    "list[int]",
                    "dict[str, object]"
                ]
            }
        },
        "get_set_char_instruction": {
            "name": "get_set_char_instruction",
            "location": 717,
            "return": [],
            "arguments": {
                "char": [
                    "int",
                    "str",
                    "None"
                ]
            }
        },
        "get_select_font_nr_instruction": {
            "name": "get_select_font_nr_instruction",
            "location": 727,
            "return": [],
            "arguments": {
                "font_nr": []
            }
        },
        "get_do_special_instruction": {
            "name": "get_do_special_instruction",
            "location": 737,
            "return": [
                "EncodedInstruction"
            ],
            "arguments": {
                "command": []
            }
        },
        "EncodedValue.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "list[str]",
                    "dict[str, typing.Any]"
                ],
                "value": [
                    "str"
                ]
            }
        },
        "EncodedValue.nr_bytes": {
            "name": "nr_bytes",
            "location": 13,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "EncodedValue.__repr__": {
            "name": "__repr__",
            "location": 16,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "EncodedInteger.__init__": {
            "name": "__init__",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "length": [
                    "bool",
                    "float",
                    "str",
                    "None"
                ],
                "signed": [
                    "bool"
                ],
                "allow_unsigned_4_byte": [
                    "bool"
                ]
            }
        },
        "EncodedInteger.encode": {
            "name": "encode",
            "location": 32,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "EncodedInteger.value_as_int": {
            "name": "value_as_int",
            "location": 37,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "EncodedInteger.__repr__": {
            "name": "__repr__",
            "location": 40,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "EncodedOperation.__init__": {
            "name": "__init__",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "op_code": [
                    "int",
                    "float"
                ]
            }
        },
        "EncodedOperation.name": {
            "name": "name",
            "location": 52,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "EncodedOperation.value": {
            "name": "value",
            "location": 56,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "EncodedOperation.encode": {
            "name": "encode",
            "location": 59,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "EncodedOperation.__repr__": {
            "name": "__repr__",
            "location": 63,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "EncodedString.encode": {
            "name": "encode",
            "location": 69,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "EncodedString.__repr__": {
            "name": "__repr__",
            "location": 72,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "EncodedInstruction.__init__": {
            "name": "__init__",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "op_code": [
                    "int",
                    "float"
                ]
            }
        },
        "EncodedInstruction.name": {
            "name": "name",
            "location": 85,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "EncodedInstruction.encoded_op_code": {
            "name": "encoded_op_code",
            "location": 89,
            "return": [
                "EncodedOperation"
            ],
            "arguments": {
                "self": []
            }
        },
        "EncodedInstruction.op_and_args": {
            "name": "op_and_args",
            "location": 93,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "EncodedInstruction.encode": {
            "name": "encode",
            "location": 96,
            "return": [
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "EncodedInstruction.__repr__": {
            "name": "__repr__",
            "location": 99,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "get_simple_instruction_func.get_instruction": {
            "name": "get_instruction",
            "location": 395,
            "return": [
                "EncodedInstruction"
            ],
            "arguments": {}
        },
        "get_define_font_nr_instruction_func.get_define_font_nr_instruction": {
            "name": "get_define_font_nr_instruction",
            "location": 411,
            "return": [
                "EncodedInstruction"
            ],
            "arguments": {
                "font_nr": [],
                "check_sum": [],
                "scale_factor": [],
                "design_size": [],
                "font_path": []
            }
        },
        "get_do_special_instruction_func.get_do_special_instruction": {
            "name": "get_do_special_instruction",
            "location": 442,
            "return": [
                "EncodedInstruction"
            ],
            "arguments": {
                "command": []
            }
        },
        "_scatter_instruction.get_instruction_func": {
            "name": "get_instruction_func",
            "location": 709,
            "return": [],
            "arguments": {
                "main_val": []
            }
        }
    },
    "nex-master/nex/dampf/utils.py": {
        "is_signed_nr_expressible_in_n_bits": {
            "name": "is_signed_nr_expressible_in_n_bits",
            "location": 4,
            "return": [
                "bool"
            ],
            "arguments": {
                "n": [
                    "int"
                ],
                "nr_bits": [
                    "int"
                ]
            }
        },
        "get_bytes_needed": {
            "name": "get_bytes_needed",
            "location": 10,
            "return": [
                "int"
            ],
            "arguments": {
                "n": [
                    "int"
                ],
                "signed": [
                    "str",
                    "bool"
                ],
                "is_check_sum": [
                    "bool"
                ]
            }
        }
    },
    "nex-master/nex/dampf/__init__.py": {},
    "nex-master/nex/parsing/assignment_rules.py": {
        "add_assignment_rules": {
            "name": "add_assignment_rules",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "pg": [
                    "str",
                    "bytes",
                    "list[str]"
                ]
            }
        },
        "add_assignment_rules.assignment": {
            "name": "assignment",
            "location": 10,
            "return": [
                "BuiltToken"
            ],
            "arguments": {
                "p": []
            }
        },
        "add_assignment_rules.macro_assignment_prefix": {
            "name": "macro_assignment_prefix",
            "location": 19,
            "return": [],
            "arguments": {
                "p": []
            }
        },
        "add_assignment_rules.prefix": {
            "name": "prefix",
            "location": 26,
            "return": [],
            "arguments": {
                "p": []
            }
        },
        "add_assignment_rules.macro_assignment": {
            "name": "macro_assignment",
            "location": 30,
            "return": [
                "BuiltToken"
            ],
            "arguments": {
                "p": []
            }
        },
        "add_assignment_rules.definition": {
            "name": "definition",
            "location": 37,
            "return": [
                "BuiltToken"
            ],
            "arguments": {
                "p": []
            }
        },
        "add_assignment_rules.def_": {
            "name": "def_",
            "location": 48,
            "return": [],
            "arguments": {
                "p": []
            }
        },
        "add_assignment_rules.definition_text": {
            "name": "definition_text",
            "location": 52,
            "return": [
                "BuiltToken"
            ],
            "arguments": {
                "p": []
            }
        },
        "add_assignment_rules.non_macro_assignment_global": {
            "name": "non_macro_assignment_global",
            "location": 66,
            "return": [],
            "arguments": {
                "p": []
            }
        },
        "add_assignment_rules.non_macro_assignment": {
            "name": "non_macro_assignment",
            "location": 72,
            "return": [],
            "arguments": {
                "p": []
            }
        },
        "add_assignment_rules.simple_assignment": {
            "name": "simple_assignment",
            "location": 92,
            "return": [],
            "arguments": {
                "p": []
            }
        },
        "add_assignment_rules.simple_assignment_font_selection": {
            "name": "simple_assignment_font_selection",
            "location": 98,
            "return": [
                "BuiltToken"
            ],
            "arguments": {
                "p": []
            }
        },
        "add_assignment_rules.variable_assignment": {
            "name": "variable_assignment",
            "location": 104,
            "return": [
                "BuiltToken"
            ],
            "arguments": {
                "p": []
            }
        },
        "add_assignment_rules.partial_variable_assignment_token_variable": {
            "name": "partial_variable_assignment_token_variable",
            "location": 112,
            "return": [
                "list[BuiltToken]"
            ],
            "arguments": {
                "p": []
            }
        },
        "add_assignment_rules.partial_variable_assignment_quantity": {
            "name": "partial_variable_assignment_quantity",
            "location": 121,
            "return": [
                "list[]"
            ],
            "arguments": {
                "p": []
            }
        },
        "add_assignment_rules.arithmetic_integer_variable": {
            "name": "arithmetic_integer_variable",
            "location": 129,
            "return": [
                "BuiltToken"
            ],
            "arguments": {
                "p": []
            }
        },
        "add_assignment_rules.optional_by": {
            "name": "optional_by",
            "location": 139,
            "return": [
                "None"
            ],
            "arguments": {
                "p": []
            }
        },
        "add_assignment_rules.literal_by": {
            "name": "literal_by",
            "location": 143,
            "return": [],
            "arguments": {
                "p": []
            }
        },
        "add_assignment_rules.code_assignment": {
            "name": "code_assignment",
            "location": 151,
            "return": [
                "BuiltToken"
            ],
            "arguments": {
                "p": []
            }
        },
        "add_assignment_rules.code_variable": {
            "name": "code_variable",
            "location": 160,
            "return": [
                "BuiltToken"
            ],
            "arguments": {
                "p": []
            }
        },
        "add_assignment_rules.code_name": {
            "name": "code_name",
            "location": 171,
            "return": [],
            "arguments": {
                "p": []
            }
        },
        "add_assignment_rules.let_assignment_control_sequence": {
            "name": "let_assignment_control_sequence",
            "location": 179,
            "return": [
                "BuiltToken"
            ],
            "arguments": {
                "p": []
            }
        },
        "add_assignment_rules.short_hand_definition": {
            "name": "short_hand_definition",
            "location": 194,
            "return": [
                "BuiltToken"
            ],
            "arguments": {
                "p": []
            }
        },
        "add_assignment_rules.short_hand_def": {
            "name": "short_hand_def",
            "location": 213,
            "return": [],
            "arguments": {
                "p": []
            }
        },
        "add_assignment_rules.family_assignment": {
            "name": "family_assignment",
            "location": 221,
            "return": [
                "BuiltToken"
            ],
            "arguments": {
                "p": []
            }
        },
        "add_assignment_rules.family_member": {
            "name": "family_member",
            "location": 234,
            "return": [
                "BuiltToken"
            ],
            "arguments": {
                "p": []
            }
        },
        "add_assignment_rules.font_range": {
            "name": "font_range",
            "location": 241,
            "return": [
                "BuiltToken"
            ],
            "arguments": {
                "p": []
            }
        },
        "add_assignment_rules.set_box_assignment": {
            "name": "set_box_assignment",
            "location": 252,
            "return": [
                "BuiltToken"
            ],
            "arguments": {
                "p": []
            }
        },
        "add_assignment_rules.box": {
            "name": "box",
            "location": 261,
            "return": [
                "BuiltToken"
            ],
            "arguments": {
                "p": []
            }
        },
        "add_assignment_rules.box_explicit": {
            "name": "box_explicit",
            "location": 269,
            "return": [
                "BuiltToken"
            ],
            "arguments": {
                "p": []
            }
        },
        "add_assignment_rules.box_from_register": {
            "name": "box_from_register",
            "location": 280,
            "return": [
                "BuiltToken"
            ],
            "arguments": {
                "p": []
            }
        },
        "add_assignment_rules.box_v_split": {
            "name": "box_v_split",
            "location": 289,
            "return": [
                "BuiltToken"
            ],
            "arguments": {
                "p": []
            }
        },
        "add_assignment_rules.box_specification_to": {
            "name": "box_specification_to",
            "location": 298,
            "return": [
                "BuiltToken"
            ],
            "arguments": {
                "p": []
            }
        },
        "add_assignment_rules.box_specification_spread": {
            "name": "box_specification_spread",
            "location": 303,
            "return": [
                "BuiltToken"
            ],
            "arguments": {
                "p": []
            }
        },
        "add_assignment_rules.literal_box_spec": {
            "name": "literal_box_spec",
            "location": 309,
            "return": [],
            "arguments": {
                "p": []
            }
        },
        "add_assignment_rules.box_specification_empty": {
            "name": "box_specification_empty",
            "location": 313,
            "return": [
                "None"
            ],
            "arguments": {
                "p": []
            }
        },
        "add_assignment_rules.font_definition": {
            "name": "font_definition",
            "location": 321,
            "return": [
                "BuiltToken"
            ],
            "arguments": {
                "p": []
            }
        },
        "add_assignment_rules.control_sequence": {
            "name": "control_sequence",
            "location": 332,
            "return": [],
            "arguments": {
                "p": []
            }
        },
        "add_assignment_rules.control_sequence_active": {
            "name": "control_sequence_active",
            "location": 336,
            "return": [],
            "arguments": {
                "p": []
            }
        },
        "add_assignment_rules.at_clause_dimen": {
            "name": "at_clause_dimen",
            "location": 344,
            "return": [
                "BuiltToken"
            ],
            "arguments": {
                "p": []
            }
        },
        "add_assignment_rules.at_clause_scaled": {
            "name": "at_clause_scaled",
            "location": 349,
            "return": [
                "BuiltToken"
            ],
            "arguments": {
                "p": []
            }
        },
        "add_assignment_rules.literal_at_clause": {
            "name": "literal_at_clause",
            "location": 355,
            "return": [],
            "arguments": {
                "p": []
            }
        },
        "add_assignment_rules.at_clause_empty": {
            "name": "at_clause_empty",
            "location": 359,
            "return": [
                "None"
            ],
            "arguments": {
                "p": []
            }
        },
        "add_assignment_rules.global_assignment": {
            "name": "global_assignment",
            "location": 371,
            "return": [],
            "arguments": {
                "p": []
            }
        },
        "add_assignment_rules.font_assignment": {
            "name": "font_assignment",
            "location": 376,
            "return": [
                "BuiltToken"
            ],
            "arguments": {
                "p": []
            }
        },
        "add_assignment_rules.intimate_assignment": {
            "name": "intimate_assignment",
            "location": 386,
            "return": [
                "BuiltToken"
            ],
            "arguments": {
                "p": []
            }
        },
        "add_assignment_rules.integer_font_variable": {
            "name": "integer_font_variable",
            "location": 396,
            "return": [
                "BuiltToken"
            ],
            "arguments": {
                "p": []
            }
        },
        "add_assignment_rules.dimen_font_variable": {
            "name": "dimen_font_variable",
            "location": 404,
            "return": [
                "BuiltToken"
            ],
            "arguments": {
                "p": []
            }
        },
        "add_assignment_rules.font": {
            "name": "font",
            "location": 415,
            "return": [
                "BuiltToken"
            ],
            "arguments": {
                "p": []
            }
        },
        "add_assignment_rules.hyphenation_assignment": {
            "name": "hyphenation_assignment",
            "location": 422,
            "return": [
                "BuiltToken"
            ],
            "arguments": {
                "p": []
            }
        },
        "add_assignment_rules.general_text": {
            "name": "general_text",
            "location": 427,
            "return": [
                "BuiltToken"
            ],
            "arguments": {
                "p": []
            }
        },
        "add_assignment_rules.filler": {
            "name": "filler",
            "location": 433,
            "return": [
                "None"
            ],
            "arguments": {
                "p": []
            }
        }
    },
    "nex-master/nex/parsing/character_rules.py": {
        "add_character_rules": {
            "name": "add_character_rules",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {
                "pg": [
                    "str",
                    "bytes",
                    "list[str]"
                ]
            }
        },
        "add_character_rules.one_optional_space": {
            "name": "one_optional_space",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "p": []
            }
        },
        "add_character_rules.character": {
            "name": "character",
            "location": 33,
            "return": [
                "BuiltToken"
            ],
            "arguments": {
                "p": []
            }
        },
        "add_character_rules.non_active_uncased_hex_letter": {
            "name": "non_active_uncased_hex_letter",
            "location": 56,
            "return": [],
            "arguments": {
                "p": []
            }
        },
        "add_character_rules.optional_spaces": {
            "name": "optional_spaces",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "p": []
            }
        }
    },
    "nex-master/nex/parsing/command_rules.py": {
        "get_command_token": {
            "name": "get_command_token",
            "location": 7,
            "return": [
                "CommandToken"
            ],
            "arguments": {
                "c": [
                    "int",
                    "float",
                    "typing.Sequence[T]",
                    "list[str]",
                    "str"
                ],
                "p": [
                    "list[str]",
                    "str"
                ]
            }
        },
        "add_command_rules": {
            "name": "add_command_rules",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "pg": [
                    "str",
                    "bytes",
                    "list[str]"
                ]
            }
        },
        "add_command_rules.command_assignment": {
            "name": "command_assignment",
            "location": 15,
            "return": [],
            "arguments": {
                "p": []
            }
        },
        "add_command_rules.command_relax": {
            "name": "command_relax",
            "location": 19,
            "return": [],
            "arguments": {
                "p": []
            }
        },
        "add_command_rules.command_right_brace": {
            "name": "command_right_brace",
            "location": 23,
            "return": [],
            "arguments": {
                "p": []
            }
        },
        "add_command_rules.command_begin_group": {
            "name": "command_begin_group",
            "location": 27,
            "return": [],
            "arguments": {
                "p": []
            }
        },
        "add_command_rules.command_end_group": {
            "name": "command_end_group",
            "location": 31,
            "return": [],
            "arguments": {
                "p": []
            }
        },
        "add_command_rules.command_show_token": {
            "name": "command_show_token",
            "location": 35,
            "return": [],
            "arguments": {
                "p": []
            }
        },
        "add_command_rules.command_show_box": {
            "name": "command_show_box",
            "location": 39,
            "return": [],
            "arguments": {
                "p": []
            }
        },
        "add_command_rules.command_show_lists": {
            "name": "command_show_lists",
            "location": 43,
            "return": [],
            "arguments": {
                "p": []
            }
        },
        "add_command_rules.command_show_the": {
            "name": "command_show_the",
            "location": 47,
            "return": [],
            "arguments": {
                "p": []
            }
        },
        "add_command_rules.command_ship_out": {
            "name": "command_ship_out",
            "location": 51,
            "return": [],
            "arguments": {
                "p": []
            }
        },
        "add_command_rules.command_ignore_spaces": {
            "name": "command_ignore_spaces",
            "location": 55,
            "return": [],
            "arguments": {
                "p": []
            }
        },
        "add_command_rules.command_set_after_assignment_token": {
            "name": "command_set_after_assignment_token",
            "location": 59,
            "return": [],
            "arguments": {
                "p": []
            }
        },
        "add_command_rules.command_add_to_after_group_tokens": {
            "name": "command_add_to_after_group_tokens",
            "location": 63,
            "return": [],
            "arguments": {
                "p": []
            }
        },
        "add_command_rules.command_message": {
            "name": "command_message",
            "location": 69,
            "return": [],
            "arguments": {
                "p": []
            }
        },
        "add_command_rules.command_error_message": {
            "name": "command_error_message",
            "location": 73,
            "return": [],
            "arguments": {
                "p": []
            }
        },
        "add_command_rules.command_open_input": {
            "name": "command_open_input",
            "location": 77,
            "return": [],
            "arguments": {
                "p": []
            }
        },
        "add_command_rules.command_close_input": {
            "name": "command_close_input",
            "location": 81,
            "return": [],
            "arguments": {
                "p": []
            }
        },
        "add_command_rules.command_open_output": {
            "name": "command_open_output",
            "location": 85,
            "return": [],
            "arguments": {
                "p": []
            }
        },
        "add_command_rules.command_close_output": {
            "name": "command_close_output",
            "location": 89,
            "return": [],
            "arguments": {
                "p": []
            }
        },
        "add_command_rules.command_write": {
            "name": "command_write",
            "location": 93,
            "return": [],
            "arguments": {
                "p": []
            }
        },
        "add_command_rules.command_do_special": {
            "name": "command_do_special",
            "location": 100,
            "return": [],
            "arguments": {
                "p": []
            }
        },
        "add_command_rules.command_add_penalty": {
            "name": "command_add_penalty",
            "location": 104,
            "return": [],
            "arguments": {
                "p": []
            }
        },
        "add_command_rules.command_add_kern": {
            "name": "command_add_kern",
            "location": 108,
            "return": [],
            "arguments": {
                "p": []
            }
        },
        "add_command_rules.command_add_math_kern": {
            "name": "command_add_math_kern",
            "location": 112,
            "return": [],
            "arguments": {
                "p": []
            }
        },
        "add_command_rules.command_un_penalty": {
            "name": "command_un_penalty",
            "location": 116,
            "return": [],
            "arguments": {
                "p": []
            }
        },
        "add_command_rules.command_un_kern": {
            "name": "command_un_kern",
            "location": 120,
            "return": [],
            "arguments": {
                "p": []
            }
        },
        "add_command_rules.command_un_glue": {
            "name": "command_un_glue",
            "location": 124,
            "return": [],
            "arguments": {
                "p": []
            }
        },
        "add_command_rules.command_mark": {
            "name": "command_mark",
            "location": 128,
            "return": [],
            "arguments": {
                "p": []
            }
        },
        "add_command_rules.command_insert": {
            "name": "command_insert",
            "location": 132,
            "return": [],
            "arguments": {
                "p": []
            }
        },
        "add_command_rules.command_vertical_adjust": {
            "name": "command_vertical_adjust",
            "location": 136,
            "return": [],
            "arguments": {
                "p": []
            }
        },
        "add_command_rules.command_add_leaders": {
            "name": "command_add_leaders",
            "location": 143,
            "return": [],
            "arguments": {
                "p": []
            }
        },
        "add_command_rules.command_add_space": {
            "name": "command_add_space",
            "location": 147,
            "return": [],
            "arguments": {
                "p": []
            }
        },
        "add_command_rules.command_add_box": {
            "name": "command_add_box",
            "location": 151,
            "return": [],
            "arguments": {
                "p": []
            }
        },
        "add_command_rules.command_indent": {
            "name": "command_indent",
            "location": 155,
            "return": [],
            "arguments": {
                "p": []
            }
        },
        "add_command_rules.command_no_indent": {
            "name": "command_no_indent",
            "location": 159,
            "return": [],
            "arguments": {
                "p": []
            }
        },
        "add_command_rules.command_par": {
            "name": "command_par",
            "location": 163,
            "return": [],
            "arguments": {
                "p": []
            }
        },
        "add_command_rules.command_left_brace": {
            "name": "command_left_brace",
            "location": 167,
            "return": [],
            "arguments": {
                "p": []
            }
        },
        "add_command_rules.command_vertical_glue": {
            "name": "command_vertical_glue",
            "location": 173,
            "return": [],
            "arguments": {
                "p": []
            }
        },
        "add_command_rules.command_move_box_left": {
            "name": "command_move_box_left",
            "location": 177,
            "return": [],
            "arguments": {
                "p": []
            }
        },
        "add_command_rules.command_move_box_right": {
            "name": "command_move_box_right",
            "location": 181,
            "return": [],
            "arguments": {
                "p": []
            }
        },
        "add_command_rules.command_add_horizontal_rule": {
            "name": "command_add_horizontal_rule",
            "location": 185,
            "return": [],
            "arguments": {
                "p": []
            }
        },
        "add_command_rules.command_horizontal_align": {
            "name": "command_horizontal_align",
            "location": 189,
            "return": [],
            "arguments": {
                "p": []
            }
        },
        "add_command_rules.command_unpack_horizontal_box": {
            "name": "command_unpack_horizontal_box",
            "location": 193,
            "return": [],
            "arguments": {
                "p": []
            }
        },
        "add_command_rules.command_end": {
            "name": "command_end",
            "location": 197,
            "return": [],
            "arguments": {
                "p": []
            }
        },
        "add_command_rules.command_dump": {
            "name": "command_dump",
            "location": 201,
            "return": [],
            "arguments": {
                "p": []
            }
        },
        "add_command_rules.command_horizontal_glue": {
            "name": "command_horizontal_glue",
            "location": 207,
            "return": [],
            "arguments": {
                "p": []
            }
        },
        "add_command_rules.command_add_control_space": {
            "name": "command_add_control_space",
            "location": 211,
            "return": [],
            "arguments": {
                "p": []
            }
        },
        "add_command_rules.command_raise_box": {
            "name": "command_raise_box",
            "location": 215,
            "return": [],
            "arguments": {
                "p": []
            }
        },
        "add_command_rules.command_lower_box": {
            "name": "command_lower_box",
            "location": 219,
            "return": [],
            "arguments": {
                "p": []
            }
        },
        "add_command_rules.command_add_vertical_rule": {
            "name": "command_add_vertical_rule",
            "location": 223,
            "return": [],
            "arguments": {
                "p": []
            }
        },
        "add_command_rules.command_vertical_align": {
            "name": "command_vertical_align",
            "location": 227,
            "return": [],
            "arguments": {
                "p": []
            }
        },
        "add_command_rules.command_unpack_vertical_box": {
            "name": "command_unpack_vertical_box",
            "location": 231,
            "return": [],
            "arguments": {
                "p": []
            }
        },
        "add_command_rules.command_add_character_explicit": {
            "name": "command_add_character_explicit",
            "location": 235,
            "return": [],
            "arguments": {
                "p": []
            }
        },
        "add_command_rules.command_add_character_token": {
            "name": "command_add_character_token",
            "location": 239,
            "return": [],
            "arguments": {
                "p": []
            }
        },
        "add_command_rules.command_add_character_code": {
            "name": "command_add_character_code",
            "location": 243,
            "return": [],
            "arguments": {
                "p": []
            }
        },
        "add_command_rules.command_paired_accent": {
            "name": "command_paired_accent",
            "location": 248,
            "return": [],
            "arguments": {
                "p": []
            }
        },
        "add_command_rules.command_add_italic_correction": {
            "name": "command_add_italic_correction",
            "location": 252,
            "return": [],
            "arguments": {
                "p": []
            }
        },
        "add_command_rules.command_discretionary": {
            "name": "command_discretionary",
            "location": 256,
            "return": [],
            "arguments": {
                "p": []
            }
        },
        "add_command_rules.command_discretionary_hyphen": {
            "name": "command_discretionary_hyphen",
            "location": 260,
            "return": [],
            "arguments": {
                "p": []
            }
        },
        "add_command_rules.command_math_shift": {
            "name": "command_math_shift",
            "location": 264,
            "return": [],
            "arguments": {
                "p": []
            }
        },
        "add_command_rules.show_token": {
            "name": "show_token",
            "location": 270,
            "return": [
                "BuiltToken"
            ],
            "arguments": {
                "p": []
            }
        },
        "add_command_rules.show_box": {
            "name": "show_box",
            "location": 276,
            "return": [
                "BuiltToken"
            ],
            "arguments": {
                "p": []
            }
        },
        "add_command_rules.show_the": {
            "name": "show_the",
            "location": 285,
            "return": [
                "BuiltToken"
            ],
            "arguments": {
                "p": []
            }
        },
        "add_command_rules.internal_quantity": {
            "name": "internal_quantity",
            "location": 316,
            "return": [],
            "arguments": {
                "p": []
            }
        },
        "add_command_rules.ship_out": {
            "name": "ship_out",
            "location": 320,
            "return": [
                "BuiltToken"
            ],
            "arguments": {
                "p": []
            }
        },
        "add_command_rules.ignore_spaces": {
            "name": "ignore_spaces",
            "location": 326,
            "return": [
                "BuiltToken"
            ],
            "arguments": {
                "p": []
            }
        },
        "add_command_rules.after_event": {
            "name": "after_event",
            "location": 333,
            "return": [
                "BuiltToken"
            ],
            "arguments": {
                "p": []
            }
        },
        "add_command_rules.message": {
            "name": "message",
            "location": 339,
            "return": [
                "BuiltToken"
            ],
            "arguments": {
                "p": []
            }
        },
        "add_command_rules.error_message": {
            "name": "error_message",
            "location": 345,
            "return": [
                "BuiltToken"
            ],
            "arguments": {
                "p": []
            }
        },
        "add_command_rules.open_io": {
            "name": "open_io",
            "location": 352,
            "return": [
                "BuiltToken"
            ],
            "arguments": {
                "p": []
            }
        },
        "add_command_rules.close_io": {
            "name": "close_io",
            "location": 360,
            "return": [
                "BuiltToken"
            ],
            "arguments": {
                "p": []
            }
        },
        "add_command_rules.immediate_write": {
            "name": "immediate_write",
            "location": 366,
            "return": [],
            "arguments": {
                "p": []
            }
        },
        "add_command_rules.write": {
            "name": "write",
            "location": 371,
            "return": [
                "BuiltToken"
            ],
            "arguments": {
                "p": []
            }
        },
        "add_command_rules.special": {
            "name": "special",
            "location": 379,
            "return": [
                "BuiltToken"
            ],
            "arguments": {
                "p": []
            }
        },
        "add_command_rules.add_penalty": {
            "name": "add_penalty",
            "location": 385,
            "return": [
                "BuiltToken"
            ],
            "arguments": {
                "p": []
            }
        },
        "add_command_rules.add_kern": {
            "name": "add_kern",
            "location": 391,
            "return": [
                "BuiltToken"
            ],
            "arguments": {
                "p": []
            }
        },
        "add_command_rules.mark": {
            "name": "mark",
            "location": 396,
            "return": [
                "BuiltToken"
            ],
            "arguments": {
                "p": []
            }
        },
        "add_command_rules.insert": {
            "name": "insert",
            "location": 402,
            "return": [
                "BuiltToken"
            ],
            "arguments": {
                "p": []
            }
        },
        "add_command_rules.v_adjust": {
            "name": "v_adjust",
            "location": 409,
            "return": [
                "BuiltToken"
            ],
            "arguments": {
                "p": []
            }
        },
        "add_command_rules.vertical_glue": {
            "name": "vertical_glue",
            "location": 419,
            "return": [
                "BuiltToken"
            ],
            "arguments": {
                "p": []
            }
        },
        "add_command_rules.horizontal_glue": {
            "name": "horizontal_glue",
            "location": 429,
            "return": [
                "BuiltToken"
            ],
            "arguments": {
                "p": []
            }
        },
        "add_command_rules.normal_glue": {
            "name": "normal_glue",
            "location": 436,
            "return": [
                "BuiltToken"
            ],
            "arguments": {
                "p": []
            }
        },
        "add_command_rules.add_leaders": {
            "name": "add_leaders",
            "location": 443,
            "return": [
                "BuiltToken"
            ],
            "arguments": {
                "p": []
            }
        },
        "add_command_rules.box_or_rule": {
            "name": "box_or_rule",
            "location": 455,
            "return": [],
            "arguments": {
                "p": []
            }
        },
        "add_command_rules.leaders": {
            "name": "leaders",
            "location": 461,
            "return": [
                "BuiltToken"
            ],
            "arguments": {
                "p": []
            }
        },
        "add_command_rules.un_box": {
            "name": "un_box",
            "location": 469,
            "return": [
                "BuiltToken"
            ],
            "arguments": {
                "p": []
            }
        },
        "add_command_rules.shifted_box": {
            "name": "shifted_box",
            "location": 478,
            "return": [
                "BuiltToken"
            ],
            "arguments": {
                "p": []
            }
        },
        "add_command_rules.align": {
            "name": "align",
            "location": 488,
            "return": [
                "BuiltToken"
            ],
            "arguments": {
                "p": []
            }
        },
        "add_command_rules.rule": {
            "name": "rule",
            "location": 498,
            "return": [
                "BuiltToken"
            ],
            "arguments": {
                "p": []
            }
        },
        "add_command_rules.accent_with_character": {
            "name": "accent_with_character",
            "location": 503,
            "return": [
                "BuiltToken"
            ],
            "arguments": {
                "p": []
            }
        },
        "add_command_rules.character_like": {
            "name": "character_like",
            "location": 511,
            "return": [],
            "arguments": {
                "p": []
            }
        },
        "add_command_rules.character_code": {
            "name": "character_code",
            "location": 515,
            "return": [
                "BuiltToken"
            ],
            "arguments": {
                "p": []
            }
        },
        "add_command_rules.accent_without_character": {
            "name": "accent_without_character",
            "location": 521,
            "return": [
                "BuiltToken"
            ],
            "arguments": {
                "p": []
            }
        },
        "add_command_rules.discretionary": {
            "name": "discretionary",
            "location": 528,
            "return": [
                "BuiltToken"
            ],
            "arguments": {
                "p": []
            }
        },
        "add_command_rules.optional_assignments_none": {
            "name": "optional_assignments_none",
            "location": 540,
            "return": [
                "BuiltToken"
            ],
            "arguments": {
                "p": []
            }
        },
        "add_command_rules.optional_assignments": {
            "name": "optional_assignments",
            "location": 544,
            "return": [
                "BuiltToken"
            ],
            "arguments": {
                "p": []
            }
        },
        "add_command_rules.rule_specification": {
            "name": "rule_specification",
            "location": 550,
            "return": [],
            "arguments": {
                "p": []
            }
        },
        "add_command_rules.rule_specification_empty": {
            "name": "rule_specification_empty",
            "location": 559,
            "return": [
                "BuiltToken"
            ],
            "arguments": {
                "p": []
            }
        },
        "add_command_rules.rule_dimension": {
            "name": "rule_dimension",
            "location": 569,
            "return": [
                "BuiltToken"
            ],
            "arguments": {
                "p": []
            }
        },
        "add_command_rules.literal_dimension": {
            "name": "literal_dimension",
            "location": 577,
            "return": [],
            "arguments": {
                "p": []
            }
        },
        "add_command_rules.file_name": {
            "name": "file_name",
            "location": 582,
            "return": [
                "BuiltToken"
            ],
            "arguments": {
                "p": []
            }
        }
    },
    "nex-master/nex/parsing/condition_rules.py": {
        "add_condition_rules": {
            "name": "add_condition_rules",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {
                "pg": [
                    "str",
                    "bytes",
                    "list[str]"
                ]
            }
        },
        "add_condition_rules.condition_if_num": {
            "name": "condition_if_num",
            "location": 6,
            "return": [
                "BuiltToken"
            ],
            "arguments": {
                "p": []
            }
        },
        "add_condition_rules.condition_if_dimen": {
            "name": "condition_if_dimen",
            "location": 16,
            "return": [
                "BuiltToken"
            ],
            "arguments": {
                "p": []
            }
        },
        "add_condition_rules.condition_if_odd": {
            "name": "condition_if_odd",
            "location": 26,
            "return": [
                "BuiltToken"
            ],
            "arguments": {
                "p": []
            }
        },
        "add_condition_rules.condition_if_mode": {
            "name": "condition_if_mode",
            "location": 37,
            "return": [
                "BuiltToken"
            ],
            "arguments": {
                "p": []
            }
        },
        "add_condition_rules.condition_if_box": {
            "name": "condition_if_box",
            "location": 59,
            "return": [
                "BuiltToken"
            ],
            "arguments": {
                "p": []
            }
        },
        "add_condition_rules.condition_if_end_of_file": {
            "name": "condition_if_end_of_file",
            "location": 67,
            "return": [
                "BuiltToken"
            ],
            "arguments": {
                "p": []
            }
        },
        "add_condition_rules.condition_if_boolean": {
            "name": "condition_if_boolean",
            "location": 76,
            "return": [
                "BuiltToken"
            ],
            "arguments": {
                "p": []
            }
        },
        "add_condition_rules.condition_if_case": {
            "name": "condition_if_case",
            "location": 84,
            "return": [
                "BuiltToken"
            ],
            "arguments": {
                "p": []
            }
        },
        "add_condition_rules.relation": {
            "name": "relation",
            "location": 94,
            "return": [],
            "arguments": {
                "p": []
            }
        }
    },
    "nex-master/nex/parsing/dimen_rules.py": {
        "digit_coll_to_size_tok": {
            "name": "digit_coll_to_size_tok",
            "location": 7,
            "return": [
                "BuiltToken"
            ],
            "arguments": {
                "dc": [
                    "bool"
                ],
                "parents": []
            }
        },
        "add_dimen_rules": {
            "name": "add_dimen_rules",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "pg": [
                    "str",
                    "bytes",
                    "list[str]"
                ]
            }
        },
        "add_dimen_rules.maybe_mu_dimen": {
            "name": "maybe_mu_dimen",
            "location": 19,
            "return": [
                "BuiltToken"
            ],
            "arguments": {
                "p": []
            }
        },
        "add_dimen_rules.maybe_mu_unsigned_dimen": {
            "name": "maybe_mu_unsigned_dimen",
            "location": 28,
            "return": [],
            "arguments": {
                "p": []
            }
        },
        "add_dimen_rules.maybe_mu_coerced_dimen": {
            "name": "maybe_mu_coerced_dimen",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "p": []
            }
        },
        "add_dimen_rules.normal_dimen_internal": {
            "name": "normal_dimen_internal",
            "location": 37,
            "return": [],
            "arguments": {
                "p": []
            }
        },
        "add_dimen_rules.normal_maybe_mu_dimen_explicit": {
            "name": "normal_maybe_mu_dimen_explicit",
            "location": 42,
            "return": [
                "BuiltToken"
            ],
            "arguments": {
                "p": []
            }
        },
        "add_dimen_rules.internal_dimen": {
            "name": "internal_dimen",
            "location": 54,
            "return": [
                "BuiltToken"
            ],
            "arguments": {
                "p": []
            }
        },
        "add_dimen_rules.internal_dimen_box_dimen": {
            "name": "internal_dimen_box_dimen",
            "location": 58,
            "return": [
                "BuiltToken"
            ],
            "arguments": {
                "p": []
            }
        },
        "add_dimen_rules.box_dimension": {
            "name": "box_dimension",
            "location": 65,
            "return": [],
            "arguments": {
                "p": []
            }
        },
        "add_dimen_rules.factor_number": {
            "name": "factor_number",
            "location": 70,
            "return": [],
            "arguments": {
                "p": []
            }
        },
        "add_dimen_rules.decimal_constant_comma": {
            "name": "decimal_constant_comma",
            "location": 74,
            "return": [],
            "arguments": {
                "p": []
            }
        },
        "add_dimen_rules.decimal_constant_point": {
            "name": "decimal_constant_point",
            "location": 79,
            "return": [],
            "arguments": {
                "p": []
            }
        },
        "add_dimen_rules.decimal_constant_prepend": {
            "name": "decimal_constant_prepend",
            "location": 85,
            "return": [],
            "arguments": {
                "p": []
            }
        },
        "add_dimen_rules.decimal_constant_append": {
            "name": "decimal_constant_append",
            "location": 93,
            "return": [],
            "arguments": {
                "p": []
            }
        },
        "add_dimen_rules.unit_of_mu_measure": {
            "name": "unit_of_mu_measure",
            "location": 101,
            "return": [
                "BuiltToken"
            ],
            "arguments": {
                "p": []
            }
        },
        "add_dimen_rules.unit_of_measure_internal": {
            "name": "unit_of_measure_internal",
            "location": 107,
            "return": [],
            "arguments": {
                "p": []
            }
        },
        "add_dimen_rules.internal_unit": {
            "name": "internal_unit",
            "location": 115,
            "return": [
                "BuiltToken"
            ],
            "arguments": {
                "p": []
            }
        },
        "add_dimen_rules.em": {
            "name": "em",
            "location": 121,
            "return": [
                "BuiltToken"
            ],
            "arguments": {
                "p": []
            }
        },
        "add_dimen_rules.ex": {
            "name": "ex",
            "location": 127,
            "return": [
                "BuiltToken"
            ],
            "arguments": {
                "p": []
            }
        },
        "add_dimen_rules.unit_of_measure": {
            "name": "unit_of_measure",
            "location": 133,
            "return": [
                "BuiltToken"
            ],
            "arguments": {
                "p": []
            }
        },
        "add_dimen_rules.optional_true": {
            "name": "optional_true",
            "location": 143,
            "return": [],
            "arguments": {
                "p": []
            }
        },
        "add_dimen_rules.literal_true": {
            "name": "literal_true",
            "location": 147,
            "return": [],
            "arguments": {
                "p": []
            }
        },
        "add_dimen_rules.make_unit_tok": {
            "name": "make_unit_tok",
            "location": 150,
            "return": [
                "BuiltToken"
            ],
            "arguments": {
                "unit": [],
                "p": []
            }
        },
        "add_dimen_rules.physical_unit_point": {
            "name": "physical_unit_point",
            "location": 154,
            "return": [],
            "arguments": {
                "p": []
            }
        },
        "add_dimen_rules.physical_unit_pica": {
            "name": "physical_unit_pica",
            "location": 158,
            "return": [],
            "arguments": {
                "p": []
            }
        },
        "add_dimen_rules.physical_unit_inch": {
            "name": "physical_unit_inch",
            "location": 162,
            "return": [],
            "arguments": {
                "p": []
            }
        },
        "add_dimen_rules.physical_unit_big_point": {
            "name": "physical_unit_big_point",
            "location": 166,
            "return": [],
            "arguments": {
                "p": []
            }
        },
        "add_dimen_rules.physical_unit_centimetre": {
            "name": "physical_unit_centimetre",
            "location": 170,
            "return": [],
            "arguments": {
                "p": []
            }
        },
        "add_dimen_rules.physical_unit_millimetre": {
            "name": "physical_unit_millimetre",
            "location": 174,
            "return": [],
            "arguments": {
                "p": []
            }
        },
        "add_dimen_rules.physical_unit_didot_point": {
            "name": "physical_unit_didot_point",
            "location": 178,
            "return": [],
            "arguments": {
                "p": []
            }
        },
        "add_dimen_rules.physical_unit_cicero": {
            "name": "physical_unit_cicero",
            "location": 182,
            "return": [],
            "arguments": {
                "p": []
            }
        },
        "add_dimen_rules.physical_unit_scaled_point": {
            "name": "physical_unit_scaled_point",
            "location": 186,
            "return": [],
            "arguments": {
                "p": []
            }
        }
    },
    "nex-master/nex/parsing/glue_rules.py": {
        "add_glue_rules": {
            "name": "add_glue_rules",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "pg": [
                    "str",
                    "bytes",
                    "list[str]"
                ]
            }
        },
        "add_glue_rules.glue_internal": {
            "name": "glue_internal",
            "location": 11,
            "return": [
                "BuiltToken"
            ],
            "arguments": {
                "p": []
            }
        },
        "add_glue_rules.glue_explicit": {
            "name": "glue_explicit",
            "location": 16,
            "return": [
                "BuiltToken"
            ],
            "arguments": {
                "p": []
            }
        },
        "add_glue_rules.internal_glue": {
            "name": "internal_glue",
            "location": 28,
            "return": [],
            "arguments": {
                "p": []
            }
        },
        "add_glue_rules.stretch_or_shrink": {
            "name": "stretch_or_shrink",
            "location": 39,
            "return": [],
            "arguments": {
                "p": []
            }
        },
        "add_glue_rules.stretch_or_shrink_omitted": {
            "name": "stretch_or_shrink_omitted",
            "location": 46,
            "return": [
                "BuiltToken"
            ],
            "arguments": {
                "p": []
            }
        },
        "add_glue_rules.fil_dimen": {
            "name": "fil_dimen",
            "location": 59,
            "return": [
                "BuiltToken"
            ],
            "arguments": {
                "p": []
            }
        },
        "add_glue_rules.fil_unit_append": {
            "name": "fil_unit_append",
            "location": 70,
            "return": [],
            "arguments": {
                "p": []
            }
        },
        "add_glue_rules.fil_unit": {
            "name": "fil_unit",
            "location": 77,
            "return": [
                "BuiltToken"
            ],
            "arguments": {
                "p": []
            }
        },
        "add_glue_rules.literal": {
            "name": "literal",
            "location": 86,
            "return": [],
            "arguments": {
                "p": []
            }
        }
    },
    "nex-master/nex/parsing/number_rules.py": {
        "process_integer_digits": {
            "name": "process_integer_digits",
            "location": 6,
            "return": [
                "BuiltToken"
            ],
            "arguments": {
                "p": [],
                "base": [
                    "float",
                    "str",
                    "typing.Type",
                    "typing.BinaryIO",
                    "bool"
                ]
            }
        },
        "add_number_rules": {
            "name": "add_number_rules",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "pg": [
                    "str",
                    "bytes",
                    "list[str]"
                ]
            }
        },
        "add_number_rules.number": {
            "name": "number",
            "location": 21,
            "return": [
                "BuiltToken"
            ],
            "arguments": {
                "p": []
            }
        },
        "add_number_rules.unsigned_number": {
            "name": "unsigned_number",
            "location": 28,
            "return": [],
            "arguments": {
                "p": []
            }
        },
        "add_number_rules.coerced_integer_dimen": {
            "name": "coerced_integer_dimen",
            "location": 32,
            "return": [],
            "arguments": {
                "p": []
            }
        },
        "add_number_rules.coerced_integer_glue": {
            "name": "coerced_integer_glue",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "p": []
            }
        },
        "add_number_rules.normal_integer_internal": {
            "name": "normal_integer_internal",
            "location": 40,
            "return": [],
            "arguments": {
                "p": []
            }
        },
        "add_number_rules.normal_integer_integer": {
            "name": "normal_integer_integer",
            "location": 44,
            "return": [
                "BuiltToken"
            ],
            "arguments": {
                "p": []
            }
        },
        "add_number_rules.normal_integer_weird_base": {
            "name": "normal_integer_weird_base",
            "location": 49,
            "return": [
                "BuiltToken"
            ],
            "arguments": {
                "p": []
            }
        },
        "add_number_rules.normal_integer_character": {
            "name": "normal_integer_character",
            "location": 53,
            "return": [
                "BuiltToken"
            ],
            "arguments": {
                "p": []
            }
        },
        "add_number_rules.internal_integer": {
            "name": "internal_integer",
            "location": 63,
            "return": [
                "BuiltToken"
            ],
            "arguments": {
                "p": []
            }
        },
        "add_number_rules.character_token_character": {
            "name": "character_token_character",
            "location": 71,
            "return": [],
            "arguments": {
                "p": []
            }
        },
        "add_number_rules.hexadecimal_constant": {
            "name": "hexadecimal_constant",
            "location": 76,
            "return": [],
            "arguments": {
                "p": []
            }
        },
        "add_number_rules.integer_constant": {
            "name": "integer_constant",
            "location": 81,
            "return": [],
            "arguments": {
                "p": []
            }
        },
        "add_number_rules.octal_constant": {
            "name": "octal_constant",
            "location": 86,
            "return": [],
            "arguments": {
                "p": []
            }
        },
        "add_number_rules.hexadecimal_digit": {
            "name": "hexadecimal_digit",
            "location": 96,
            "return": [],
            "arguments": {
                "p": []
            }
        },
        "add_number_rules.digit": {
            "name": "digit",
            "location": 102,
            "return": [],
            "arguments": {
                "p": []
            }
        },
        "add_number_rules.octal_digit": {
            "name": "octal_digit",
            "location": 113,
            "return": [],
            "arguments": {
                "p": []
            }
        },
        "add_number_rules.optional_signs_omitted": {
            "name": "optional_signs_omitted",
            "location": 117,
            "return": [
                "BuiltToken"
            ],
            "arguments": {
                "p": []
            }
        },
        "add_number_rules.optional_signs": {
            "name": "optional_signs",
            "location": 122,
            "return": [],
            "arguments": {
                "p": []
            }
        },
        "add_number_rules.plus_or_minus": {
            "name": "plus_or_minus",
            "location": 129,
            "return": [],
            "arguments": {
                "p": []
            }
        },
        "add_number_rules.equals": {
            "name": "equals",
            "location": 134,
            "return": [
                "BuiltToken"
            ],
            "arguments": {
                "p": []
            }
        }
    },
    "nex-master/nex/parsing/parsing.py": {
        "empty": {
            "name": "empty",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "p": [
                    "int",
                    "str",
                    "typing.Iterable['Context']"
                ]
            }
        },
        "chunker_error": {
            "name": "chunker_error",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "look_ahead": [
                    "str",
                    "bytes",
                    "bool",
                    "list[str]",
                    "None"
                ]
            }
        },
        "batch_error": {
            "name": "batch_error",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "look_ahead": [
                    "str"
                ]
            }
        },
        "get_parser": {
            "name": "get_parser",
            "location": 55,
            "return": [],
            "arguments": {
                "start": [
                    "typing.Text"
                ],
                "chunking": [
                    "bool"
                ]
            }
        }
    },
    "nex-master/nex/parsing/terminals.py": {},
    "nex-master/nex/parsing/utils.py": {
        "make_literal_token": {
            "name": "make_literal_token",
            "location": 73,
            "return": [
                "BuiltToken"
            ],
            "arguments": {
                "p": [
                    "str"
                ]
            }
        },
        "str_to_char_types": {
            "name": "str_to_char_types",
            "location": 78,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "s": [
                    "str"
                ]
            }
        },
        "get_literal_production_rule": {
            "name": "get_literal_production_rule",
            "location": 82,
            "return": [
                "str"
            ],
            "arguments": {
                "word": [
                    "str",
                    "list[typing.Any]",
                    "None",
                    "typing.Callable[, ]"
                ],
                "target": [
                    "None",
                    "str",
                    "int"
                ]
            }
        },
        "wrap": {
            "name": "wrap",
            "location": 101,
            "return": [],
            "arguments": {
                "pg": [],
                "func": [
                    "float",
                    "typing.Callable[, ]",
                    "list[]"
                ],
                "rule": [
                    "float",
                    "typing.Callable[, ]",
                    "list[]"
                ]
            }
        },
        "is_end_token": {
            "name": "is_end_token",
            "location": 117,
            "return": [
                "bool"
            ],
            "arguments": {
                "t": []
            }
        },
        "chunk_iter": {
            "name": "chunk_iter",
            "location": 138,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "banisher": [
                    "str",
                    "bool"
                ],
                "parser": [
                    "str",
                    "bool"
                ]
            }
        },
        "get_chunk": {
            "name": "get_chunk",
            "location": 147,
            "return": [
                "list[str]",
                "dict[, ]",
                "list[]",
                "list[tuple[typing.Union[str,bytes]]]",
                "dict[int, typing.Union[str,None]]"
            ],
            "arguments": {
                "banisher": [
                    "int",
                    "float",
                    "str",
                    "None"
                ],
                "parser": [
                    "list[str]",
                    "bool",
                    "dict[, ]"
                ],
                "initial": [
                    "None",
                    "int",
                    "float",
                    "str"
                ]
            }
        },
        "_get_chunk": {
            "name": "_get_chunk",
            "location": 171,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "input_queue": [],
                "parser": [
                    "str"
                ]
            }
        },
        "DigitCollection.__init__": {
            "name": "__init__",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "base": [
                    "int",
                    "str"
                ]
            }
        },
        "DigitCollection.__repr__": {
            "name": "__repr__",
            "location": 95,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "GetBuffer.__init__": {
            "name": "__init__",
            "location": 123,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "getter": [
                    "int",
                    "float"
                ],
                "initial": [
                    "None",
                    "float",
                    "bool",
                    "str"
                ]
            }
        },
        "GetBuffer.__iter__": {
            "name": "__iter__",
            "location": 129,
            "return": [
                "GetBuffer"
            ],
            "arguments": {
                "self": []
            }
        },
        "GetBuffer.__next__": {
            "name": "__next__",
            "location": 132,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "nex-master/nex/parsing/variable_rules.py": {
        "add_variable_rules": {
            "name": "add_variable_rules",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {
                "pg": [
                    "int",
                    "typing.Iterable[typing.Any]",
                    "str"
                ]
            }
        },
        "add_variable_rules.quantity_variable_register": {
            "name": "quantity_variable_register",
            "location": 12,
            "return": [],
            "arguments": {
                "p": []
            }
        },
        "add_variable_rules.quantity_variable_parameter": {
            "name": "quantity_variable_parameter",
            "location": 20,
            "return": [],
            "arguments": {
                "p": []
            }
        },
        "add_variable_rules.quantity_register_explicit": {
            "name": "quantity_register_explicit",
            "location": 28,
            "return": [
                "BuiltToken"
            ],
            "arguments": {
                "p": []
            }
        },
        "add_variable_rules.register_token": {
            "name": "register_token",
            "location": 36,
            "return": [
                "BuiltToken"
            ],
            "arguments": {
                "p": []
            }
        }
    },
    "nex-master/nex/parsing/__init__.py": {},
    "nex-master/nex/pydvi/TeXUnit.py": {
        "mm2in": {
            "name": "mm2in",
            "location": 52,
            "return": [
                "float"
            ],
            "arguments": {
                "x": [
                    "int",
                    "float"
                ]
            }
        },
        "in2mm": {
            "name": "in2mm",
            "location": 57,
            "return": [
                "float"
            ],
            "arguments": {
                "x": [
                    "float",
                    "int"
                ]
            }
        },
        "dpi2mm": {
            "name": "dpi2mm",
            "location": 62,
            "return": [
                "float"
            ],
            "arguments": {
                "x": [
                    "int",
                    "float"
                ]
            }
        },
        "in2pt": {
            "name": "in2pt",
            "location": 67,
            "return": [
                "float"
            ],
            "arguments": {
                "x": [
                    "float",
                    "int"
                ]
            }
        },
        "pt2in": {
            "name": "pt2in",
            "location": 72,
            "return": [
                "float"
            ],
            "arguments": {
                "x": [
                    "int",
                    "float"
                ]
            }
        },
        "pt2mm": {
            "name": "pt2mm",
            "location": 77,
            "return": [
                "float"
            ],
            "arguments": {
                "x": [
                    "int",
                    "float"
                ]
            }
        },
        "sp2pt": {
            "name": "sp2pt",
            "location": 82,
            "return": [
                "float"
            ],
            "arguments": {
                "x": [
                    "int",
                    "float"
                ]
            }
        },
        "sp2in": {
            "name": "sp2in",
            "location": 87,
            "return": [],
            "arguments": {
                "x": [
                    "str",
                    "int",
                    "float"
                ]
            }
        },
        "sp2mm": {
            "name": "sp2mm",
            "location": 92,
            "return": [],
            "arguments": {
                "x": [
                    "int",
                    "float",
                    "str"
                ]
            }
        },
        "sp2dpi": {
            "name": "sp2dpi",
            "location": 97,
            "return": [],
            "arguments": {
                "x": [
                    "int",
                    "float",
                    "str"
                ]
            }
        },
        "pt2sp": {
            "name": "pt2sp",
            "location": 102,
            "return": [
                "float"
            ],
            "arguments": {
                "x": [
                    "int",
                    "float"
                ]
            }
        },
        "in2sp": {
            "name": "in2sp",
            "location": 107,
            "return": [],
            "arguments": {
                "x": [
                    "float",
                    "str",
                    "int"
                ]
            }
        }
    },
    "nex-master/nex/pydvi/__init__.py": {},
    "nex-master/nex/pydvi/Font/Tfm.py": {
        "TfmChar.__init__": {
            "name": "__init__",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tfm": [],
                "char_code": [
                    "int"
                ],
                "width": [
                    "str",
                    "int",
                    "bytes",
                    "list[list[str]]"
                ],
                "height": [
                    "str",
                    "int",
                    "bytes",
                    "list[list[str]]"
                ],
                "depth": [
                    "str",
                    "int",
                    "bytes",
                    "list[list[str]]"
                ],
                "italic_correction": [
                    "str",
                    "int",
                    "bytes",
                    "list[list[str]]"
                ],
                "lig_kern_program_index": [
                    "None",
                    "str",
                    "int",
                    "bytes",
                    "list[list[str]]"
                ],
                "next_larger_char": [
                    "None",
                    "str",
                    "float"
                ]
            }
        },
        "TfmChar.scaled_width": {
            "name": "scaled_width",
            "location": 68,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "scale_factor": [
                    "int",
                    "float"
                ]
            }
        },
        "TfmChar.scaled_height": {
            "name": "scaled_height",
            "location": 73,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "scale_factor": [
                    "int",
                    "str",
                    "float"
                ]
            }
        },
        "TfmChar.scaled_depth": {
            "name": "scaled_depth",
            "location": 78,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "scale_factor": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ]
            }
        },
        "TfmChar.scaled_dimensions": {
            "name": "scaled_dimensions",
            "location": 83,
            "return": [
                "list[int]"
            ],
            "arguments": {
                "self": [],
                "scale_factor": [
                    "int",
                    "list[int]"
                ]
            }
        },
        "TfmChar.next_larger_tfm_char": {
            "name": "next_larger_tfm_char",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TfmChar.get_lig_kern_program": {
            "name": "get_lig_kern_program",
            "location": 97,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TfmChar.chr": {
            "name": "chr",
            "location": 105,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TfmChar.print_summary": {
            "name": "print_summary",
            "location": 114,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TfmExtensibleChar.__init__": {
            "name": "__init__",
            "location": 156,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tfm": [
                    "int",
                    "str",
                    "list[int]"
                ],
                "char_code": [
                    "int",
                    "str",
                    "list[int]"
                ],
                "width": [
                    "int",
                    "str",
                    "list[int]"
                ],
                "height": [
                    "int",
                    "str",
                    "list[int]"
                ],
                "depth": [
                    "int",
                    "str",
                    "list[int]"
                ],
                "italic_correction": [
                    "int",
                    "str",
                    "list[int]"
                ],
                "extensible_recipe": [
                    "str",
                    "int",
                    "bytes",
                    "list[list[str]]"
                ],
                "lig_kern_program_index": [
                    "None",
                    "int",
                    "str",
                    "list[int]"
                ],
                "next_larger_char": [
                    "None",
                    "int",
                    "str",
                    "list[int]"
                ]
            }
        },
        "TfmLigKern.__init__": {
            "name": "__init__",
            "location": 184,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tfm": [
                    "str"
                ],
                "index": [
                    "str",
                    "list[str]",
                    "bool",
                    "bytes",
                    "dict[tuple[typing.Union[str,str]], int]",
                    "dict[str, str]"
                ],
                "stop": [
                    "str",
                    "list[str]",
                    "bool",
                    "bytes",
                    "dict[tuple[typing.Union[str,str]], int]",
                    "dict[str, str]"
                ],
                "next_char": [
                    "typing.Mapping",
                    "tuple[int]",
                    "list[int]",
                    "list[list[int]]",
                    "bytes",
                    "None",
                    "int",
                    "float"
                ]
            }
        },
        "TfmLigKern.__iter__": {
            "name": "__iter__",
            "location": 193,
            "return": [
                "typing.Generator[typing.Union[int,bytearray]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TfmKern.__init__": {
            "name": "__init__",
            "location": 219,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tfm": [
                    "str",
                    "float",
                    "typing.Mapping",
                    "list[tuple[typing.Union[int,int]]]"
                ],
                "index": [
                    "str",
                    "float",
                    "typing.Mapping",
                    "list[tuple[typing.Union[int,int]]]"
                ],
                "stop": [
                    "str",
                    "float",
                    "typing.Mapping",
                    "list[tuple[typing.Union[int,int]]]"
                ],
                "next_char": [
                    "str",
                    "float",
                    "typing.Mapping",
                    "list[tuple[typing.Union[int,int]]]"
                ],
                "kern": [
                    "str",
                    "list[str]",
                    "bool",
                    "bytes",
                    "dict[tuple[typing.Union[str,str]], int]",
                    "dict[str, str]"
                ]
            }
        },
        "TfmKern.__str__": {
            "name": "__str__",
            "location": 225,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "TfmLigature.__init__": {
            "name": "__init__",
            "location": 257,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tfm": [
                    "int",
                    "list[str]",
                    "str",
                    "list[tuple[typing.Union[int,int]]]",
                    "float"
                ],
                "index": [
                    "int",
                    "list[str]",
                    "str",
                    "list[tuple[typing.Union[int,int]]]",
                    "float"
                ],
                "stop": [
                    "int",
                    "list[str]",
                    "str",
                    "list[tuple[typing.Union[int,int]]]",
                    "float"
                ],
                "next_char": [
                    "int",
                    "list[str]",
                    "str",
                    "list[tuple[typing.Union[int,int]]]",
                    "float"
                ],
                "ligature_char_code": [
                    "int",
                    "str",
                    "float"
                ],
                "number_of_chars_to_pass_over": [
                    "int",
                    "str",
                    "None"
                ],
                "current_char_is_deleted": [
                    "int",
                    "str",
                    "list[str]"
                ],
                "next_char_is_deleted": [
                    "int",
                    "str",
                    "None"
                ]
            }
        },
        "TfmLigature.__str__": {
            "name": "__str__",
            "location": 274,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "Tfm.__init__": {
            "name": "__init__",
            "location": 367,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "font_name": [
                    "str",
                    "None",
                    "bool"
                ],
                "filename": [
                    "str",
                    "None"
                ],
                "smallest_character_code": [
                    "int",
                    "str",
                    "float",
                    "None"
                ],
                "largest_character_code": [
                    "int",
                    "str",
                    "float",
                    "None"
                ],
                "checksum": [
                    "str",
                    "typing.Sequence[typing.Union[str,typing.Any]]",
                    "int"
                ],
                "design_font_size": [
                    "int",
                    "typing.Callable[, ]"
                ],
                "character_coding_scheme": [
                    "str",
                    "None",
                    "bool",
                    "list[typing.Any]"
                ],
                "family": [
                    "str",
                    "None",
                    "bool",
                    "typing.Iterable[str]"
                ]
            }
        },
        "Tfm.__setitem__": {
            "name": "__setitem__",
            "location": 389,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "char_code": [
                    "str",
                    "int",
                    "list[tuple[typing.Union[int,int]]]"
                ],
                "value": [
                    "str",
                    "int",
                    "list[tuple[typing.Union[int,int]]]"
                ]
            }
        },
        "Tfm.__getitem__": {
            "name": "__getitem__",
            "location": 394,
            "return": [],
            "arguments": {
                "self": [],
                "char_code": [
                    "float",
                    "str",
                    "int"
                ]
            }
        },
        "Tfm.__len__": {
            "name": "__len__",
            "location": 399,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Tfm.set_font_parameters": {
            "name": "set_font_parameters",
            "location": 406,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parameters": [
                    "int",
                    "str",
                    "float",
                    "list[int]"
                ]
            }
        },
        "Tfm.set_math_symbols_parameters": {
            "name": "set_math_symbols_parameters",
            "location": 417,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parameters": [
                    "int",
                    "dict[str, str]",
                    "str"
                ]
            }
        },
        "Tfm.set_math_extension_parameters": {
            "name": "set_math_extension_parameters",
            "location": 436,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parameters": [
                    "str"
                ]
            }
        },
        "Tfm.add_lig_kern": {
            "name": "add_lig_kern",
            "location": 442,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "typing.Callable[[], None]",
                    "str",
                    "list[]",
                    "tuple[]"
                ]
            }
        },
        "Tfm.get_lig_kern_program": {
            "name": "get_lig_kern_program",
            "location": 447,
            "return": [],
            "arguments": {
                "self": [],
                "i": [
                    "str",
                    "int",
                    "list[int]",
                    "float"
                ]
            }
        },
        "Tfm.print_summary": {
            "name": "print_summary",
            "location": 452,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "nex-master/nex/pydvi/Font/TfmParser.py": {
        "TfmParser.parse": {
            "name": "parse",
            "location": 49,
            "return": [],
            "arguments": {
                "font_name": [
                    "str",
                    "bool"
                ],
                "filename": [
                    "str",
                    "bool"
                ]
            }
        },
        "TfmParser.__init__": {
            "name": "__init__",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "font_name": [
                    "str",
                    "None",
                    "list[str]"
                ],
                "filename": [
                    "str",
                    "None"
                ]
            }
        },
        "TfmParser.__call__": {
            "name": "__call__",
            "location": 70,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TfmParser.word_ptr": {
            "name": "word_ptr",
            "location": 75,
            "return": [
                "float",
                "int",
                "str",
                "list[typing.Union[int,int]]"
            ],
            "arguments": {
                "base": [
                    "float",
                    "int",
                    "str",
                    "list[int]"
                ],
                "index": [
                    "float",
                    "int",
                    "str",
                    "list[int]"
                ]
            }
        },
        "TfmParser._seek_to_table": {
            "name": "_seek_to_table",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "table": [
                    "str"
                ]
            }
        },
        "TfmParser._position_in_table": {
            "name": "_position_in_table",
            "location": 90,
            "return": [],
            "arguments": {
                "self": [],
                "table": [
                    "str"
                ],
                "index": [
                    "str"
                ]
            }
        },
        "TfmParser._read_fix_word_in_table": {
            "name": "_read_fix_word_in_table",
            "location": 96,
            "return": [],
            "arguments": {
                "self": [],
                "table": [
                    "str",
                    "typing.Sequence[T]",
                    "list[str]"
                ],
                "index": [
                    "str",
                    "typing.Sequence[T]",
                    "list[str]"
                ]
            }
        },
        "TfmParser._read_four_byte_numbers_in_table": {
            "name": "_read_four_byte_numbers_in_table",
            "location": 102,
            "return": [],
            "arguments": {
                "self": [],
                "table": [
                    "bool",
                    "dict[, ]",
                    "str"
                ],
                "index": [
                    "bool",
                    "dict[, ]",
                    "str"
                ]
            }
        },
        "TfmParser._read_extensible_recipe": {
            "name": "_read_extensible_recipe",
            "location": 108,
            "return": [],
            "arguments": {
                "self": [],
                "index": [
                    "typing.Mapping",
                    "dict[str, typing.Any]",
                    "int",
                    "typing.Type",
                    "dict[str, set[str]]",
                    "str"
                ]
            }
        },
        "TfmParser._read_lengths": {
            "name": "_read_lengths",
            "location": 120,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TfmParser._read_header": {
            "name": "_read_header",
            "location": 204,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TfmParser._read_font_parameters": {
            "name": "_read_font_parameters",
            "location": 301,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TfmParser._read_lig_kern_programs": {
            "name": "_read_lig_kern_programs",
            "location": 348,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TfmParser._read_characters": {
            "name": "_read_characters",
            "location": 472,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TfmParser._process_char": {
            "name": "_process_char",
            "location": 513,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "c": [
                    "list[bytes]",
                    "bytes",
                    "str"
                ]
            }
        },
        "TfmParser._read_char_info": {
            "name": "_read_char_info",
            "location": 578,
            "return": [
                "tuple[typing.Union[bytes,tuple[typing.Union[typing.Literal,typing.Literal,typing.Literal,typing.Literal,typing.Literal,typing.Literal,typing.Literal,typing.Literal,typing.Literal,typing.Literal,typing.Literal,typing.Literal,typing.Literal,typing.Literal,typing.Literal,typing.Literal]],int,list[int],list[],dict[int, str],set[bytes],typing.Type,str,dict[int, int]]]"
            ],
            "arguments": {
                "self": [],
                "c": [
                    "str",
                    "bytes",
                    "dict[typing.Any, tuple[typing.Union[typing.Any,typing.Any,typing.Any]]]"
                ]
            }
        },
        "TfmParser._print_summary": {
            "name": "_print_summary",
            "location": 595,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "nex-master/nex/pydvi/Font/__init__.py": {},
    "nex-master/nex/pydvi/Tools/EnumFactory.py": {
        "EnumFactory": {
            "name": "EnumFactory",
            "location": 41,
            "return": [
                "EnumMetaClass"
            ],
            "arguments": {
                "cls_name": [
                    "str",
                    "bool",
                    "list[str]"
                ],
                "constant_names": []
            }
        },
        "ReadOnlyMetaClass.__setattr__": {
            "name": "__setattr__",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "value": [
                    "str"
                ]
            }
        },
        "EnumMetaClass.__len__": {
            "name": "__len__",
            "location": 36,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "nex-master/nex/pydvi/Tools/FuncTools.py": {
        "repeat_call": {
            "name": "repeat_call",
            "location": 1,
            "return": [
                "list[]"
            ],
            "arguments": {
                "func": [
                    "list[T]",
                    "str",
                    "int",
                    "float"
                ],
                "count": [
                    "list[T]",
                    "str",
                    "int",
                    "float"
                ]
            }
        }
    },
    "nex-master/nex/pydvi/Tools/Logging.py": {
        "remove_enclosing_new_line": {
            "name": "remove_enclosing_new_line",
            "location": 1,
            "return": [
                "str"
            ],
            "arguments": {
                "text": [
                    "str"
                ]
            }
        },
        "format_card": {
            "name": "format_card",
            "location": 11,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "text": [
                    "str",
                    "int",
                    "None",
                    "list[str]",
                    "tuple[str]"
                ],
                "centered": [
                    "bool"
                ],
                "width": [
                    "int"
                ],
                "rule_char": [
                    "typing.Text"
                ],
                "newline": [
                    "bool"
                ],
                "border": [
                    "bool"
                ],
                "bottom_rule": [
                    "bool"
                ]
            }
        },
        "print_card": {
            "name": "print_card",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {
                "text": [
                    "int",
                    "str"
                ]
            }
        },
        "format_card.format_lines": {
            "name": "format_lines",
            "location": 59,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "text": []
            }
        },
        "format_card.format_line": {
            "name": "format_line",
            "location": 67,
            "return": [],
            "arguments": {
                "text": []
            }
        }
    },
    "nex-master/nex/pydvi/Tools/Stream.py": {
        "to_fix_word": {
            "name": "to_fix_word",
            "location": 8,
            "return": [
                "int"
            ],
            "arguments": {
                "x": [
                    "int"
                ]
            }
        },
        "AbstractStream.read": {
            "name": "read",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "number_of_bytes": [
                    "int",
                    "str",
                    "typing.Callable[, ]"
                ]
            }
        },
        "AbstractStream.seek": {
            "name": "seek",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "postion": [
                    "int",
                    "str",
                    "typing.Iterable['Context']"
                ],
                "whence": [
                    "int",
                    "str",
                    "typing.Iterable['Context']"
                ]
            }
        },
        "AbstractStream.tell": {
            "name": "tell",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbstractStream.read_bytes": {
            "name": "read_bytes",
            "location": 57,
            "return": [],
            "arguments": {
                "self": [],
                "number_of_bytes": [
                    "tuple[typing.Union[int,int]]",
                    "int",
                    "str"
                ],
                "position": [
                    "None",
                    "dict[, ]",
                    "bool",
                    "str"
                ]
            }
        },
        "AbstractStream.read_byte_numbers": {
            "name": "read_byte_numbers",
            "location": 68,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": [],
                "number_of_bytes": [
                    "int",
                    "str"
                ],
                "position": [
                    "None",
                    "int",
                    "str"
                ]
            }
        },
        "AbstractStream.read_three_byte_numbers": {
            "name": "read_three_byte_numbers",
            "location": 74,
            "return": [],
            "arguments": {
                "self": [],
                "position": [
                    "None",
                    "str",
                    "bytearray",
                    "dict[str, str]"
                ]
            }
        },
        "AbstractStream.read_four_byte_numbers": {
            "name": "read_four_byte_numbers",
            "location": 80,
            "return": [],
            "arguments": {
                "self": [],
                "position": [
                    "None",
                    "str",
                    "bytearray",
                    "dict[str, str]"
                ]
            }
        },
        "AbstractStream.read_big_endian_number": {
            "name": "read_big_endian_number",
            "location": 86,
            "return": [
                "bytes",
                "tuple[typing.Union[typing.Literal,typing.Literal,typing.Literal,typing.Literal,typing.Literal,typing.Literal,typing.Literal,typing.Literal,typing.Literal,typing.Literal,typing.Literal,typing.Literal,typing.Literal,typing.Literal,typing.Literal,typing.Literal]]"
            ],
            "arguments": {
                "self": [],
                "number_of_bytes": [
                    "int"
                ],
                "signed": [
                    "bool"
                ],
                "position": [
                    "None",
                    "int",
                    "bytes"
                ]
            }
        },
        "AbstractStream.read_signed_byte1": {
            "name": "read_signed_byte1",
            "location": 106,
            "return": [],
            "arguments": {
                "self": [],
                "position": [
                    "None"
                ]
            }
        },
        "AbstractStream.read_signed_byte2": {
            "name": "read_signed_byte2",
            "location": 110,
            "return": [],
            "arguments": {
                "self": [],
                "position": [
                    "None"
                ]
            }
        },
        "AbstractStream.read_signed_byte3": {
            "name": "read_signed_byte3",
            "location": 114,
            "return": [],
            "arguments": {
                "self": [],
                "position": [
                    "None"
                ]
            }
        },
        "AbstractStream.read_signed_byte4": {
            "name": "read_signed_byte4",
            "location": 118,
            "return": [],
            "arguments": {
                "self": [],
                "position": [
                    "None"
                ]
            }
        },
        "AbstractStream.read_unsigned_byte1": {
            "name": "read_unsigned_byte1",
            "location": 122,
            "return": [],
            "arguments": {
                "self": [],
                "position": [
                    "None",
                    "tuple[typing.Union[float,float]]",
                    "int",
                    "list[typing.Callable[, ]]",
                    "bytes"
                ]
            }
        },
        "AbstractStream.read_unsigned_byte2": {
            "name": "read_unsigned_byte2",
            "location": 126,
            "return": [],
            "arguments": {
                "self": [],
                "position": [
                    "None",
                    "tuple[typing.Union[float,float]]",
                    "int",
                    "list[typing.Callable[, ]]",
                    "bytes"
                ]
            }
        },
        "AbstractStream.read_unsigned_byte3": {
            "name": "read_unsigned_byte3",
            "location": 130,
            "return": [],
            "arguments": {
                "self": [],
                "position": [
                    "None",
                    "tuple[typing.Union[float,float]]",
                    "int",
                    "list[typing.Callable[, ]]",
                    "bytes"
                ]
            }
        },
        "AbstractStream.read_unsigned_byte4": {
            "name": "read_unsigned_byte4",
            "location": 134,
            "return": [],
            "arguments": {
                "self": [],
                "position": [
                    "None",
                    "tuple[typing.Union[float,float]]",
                    "int",
                    "list[typing.Callable[, ]]",
                    "bytes"
                ]
            }
        },
        "AbstractStream.read_fix_word": {
            "name": "read_fix_word",
            "location": 152,
            "return": [],
            "arguments": {
                "self": [],
                "position": [
                    "None",
                    "int",
                    "bytes",
                    "str"
                ]
            }
        },
        "AbstractStream.read_bcpl": {
            "name": "read_bcpl",
            "location": 157,
            "return": [],
            "arguments": {
                "self": [],
                "position": [
                    "None",
                    "str",
                    "bytes",
                    "list[int]"
                ]
            }
        },
        "StandardStream.read": {
            "name": "read",
            "location": 173,
            "return": [
                "bytearray"
            ],
            "arguments": {
                "self": [],
                "number_of_bytes": [
                    "str",
                    "None",
                    "bytes",
                    "float",
                    "typing.IO",
                    "int",
                    "typing.BinaryIO",
                    "dict[, ]"
                ]
            }
        },
        "StandardStream.seek": {
            "name": "seek",
            "location": 179,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "postion": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ],
                "whence": []
            }
        },
        "StandardStream.tell": {
            "name": "tell",
            "location": 185,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FileStream.__init__": {
            "name": "__init__",
            "location": 194,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "str"
                ]
            }
        },
        "FileStream.__del__": {
            "name": "__del__",
            "location": 201,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "nex-master/nex/pydvi/Tools/__init__.py": {},
    "nex-master/nex/rply/errors.py": {
        "ParsingError.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "int",
                    "str",
                    "None",
                    "float",
                    "list[]"
                ],
                "source_pos": [
                    "str"
                ]
            }
        },
        "ParsingError.getsourcepos": {
            "name": "getsourcepos",
            "location": 13,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "nex-master/nex/rply/grammar.py": {
        "rightmost_terminal": {
            "name": "rightmost_terminal",
            "location": 4,
            "return": [],
            "arguments": {
                "symbols": [],
                "terminals": []
            }
        },
        "Grammar.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [],
            "arguments": {
                "self": [],
                "terminals": []
            }
        },
        "Grammar.add_production": {
            "name": "add_production",
            "location": 30,
            "return": [],
            "arguments": {
                "self": [],
                "prod_name": [],
                "syms": [],
                "func": [],
                "precedence": []
            }
        },
        "Grammar.set_precedence": {
            "name": "set_precedence",
            "location": 59,
            "return": [],
            "arguments": {
                "self": [],
                "term": [],
                "assoc": [],
                "level": []
            }
        },
        "Grammar.set_start": {
            "name": "set_start",
            "location": 72,
            "return": [],
            "arguments": {
                "self": [],
                "start": []
            }
        },
        "Grammar.unused_terminals": {
            "name": "unused_terminals",
            "location": 80,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Grammar.unused_productions": {
            "name": "unused_productions",
            "location": 88,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Grammar.build_lritems": {
            "name": "build_lritems",
            "location": 91,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Grammar._first": {
            "name": "_first",
            "location": 121,
            "return": [],
            "arguments": {
                "self": [],
                "beta": []
            }
        },
        "Grammar.compute_first": {
            "name": "compute_first",
            "location": 137,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Grammar.compute_follow": {
            "name": "compute_follow",
            "location": 156,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Production.__init__": {
            "name": "__init__",
            "location": 185,
            "return": [],
            "arguments": {
                "self": [],
                "num": [],
                "name": [],
                "prod": [],
                "precedence": [],
                "func": []
            }
        },
        "Production.__repr__": {
            "name": "__repr__",
            "location": 202,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Production.__len__": {
            "name": "__len__",
            "location": 205,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LRItem.__init__": {
            "name": "__init__",
            "location": 210,
            "return": [],
            "arguments": {
                "self": [],
                "p": [],
                "n": [],
                "before": [],
                "after": []
            }
        },
        "LRItem.__repr__": {
            "name": "__repr__",
            "location": 221,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LRItem.__len__": {
            "name": "__len__",
            "location": 224,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "nex-master/nex/rply/parser.py": {
        "Token.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "type_": [
                    "str",
                    "bool"
                ],
                "value": [
                    "str",
                    "float",
                    "int"
                ]
            }
        },
        "Token.__repr__": {
            "name": "__repr__",
            "location": 15,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "LRParser.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "lr_table": [
                    "bool",
                    "dict[, ]",
                    "dict[str, dict[, ]]"
                ],
                "error_handler": [
                    "dict[, ]",
                    "dict[str, str]",
                    "bool",
                    "list[str]"
                ]
            }
        },
        "LRParser.parse": {
            "name": "parse",
            "location": 24,
            "return": [
                "Token"
            ],
            "arguments": {
                "self": [],
                "tokenizer": [],
                "state": [
                    "None",
                    "list[]"
                ]
            }
        },
        "LRParser._reduce_production": {
            "name": "_reduce_production",
            "location": 97,
            "return": [],
            "arguments": {
                "self": [],
                "t": [],
                "symstack": [],
                "statestack": [],
                "state": [
                    "int",
                    "None",
                    "list[]"
                ]
            }
        }
    },
    "nex-master/nex/rply/parsergenerator.py": {
        "digraph": {
            "name": "digraph",
            "location": 220,
            "return": [],
            "arguments": {
                "X": [],
                "R": [],
                "FP": []
            }
        },
        "traverse": {
            "name": "traverse",
            "location": 230,
            "return": [],
            "arguments": {
                "x": [],
                "N": [],
                "stack": [],
                "F": [],
                "X": [],
                "R": [],
                "FP": []
            }
        },
        "ParserGenerator.__init__": {
            "name": "__init__",
            "location": 35,
            "return": [],
            "arguments": {
                "self": [],
                "tokens": [],
                "precedence": [],
                "cache_id": []
            }
        },
        "ParserGenerator.production": {
            "name": "production",
            "location": 42,
            "return": [],
            "arguments": {
                "self": [],
                "rule": [],
                "precedence": []
            }
        },
        "ParserGenerator.error": {
            "name": "error",
            "location": 84,
            "return": [],
            "arguments": {
                "self": [],
                "func": []
            }
        },
        "ParserGenerator.compute_grammar_hash": {
            "name": "compute_grammar_hash",
            "location": 95,
            "return": [],
            "arguments": {
                "self": [],
                "g": []
            }
        },
        "ParserGenerator.serialize_table": {
            "name": "serialize_table",
            "location": 109,
            "return": [],
            "arguments": {
                "self": [],
                "table": []
            }
        },
        "ParserGenerator.data_is_valid": {
            "name": "data_is_valid",
            "location": 124,
            "return": [],
            "arguments": {
                "self": [],
                "g": [],
                "data": []
            }
        },
        "ParserGenerator.build": {
            "name": "build",
            "location": 145,
            "return": [],
            "arguments": {
                "self": [],
                "start": []
            }
        },
        "LRTable.__init__": {
            "name": "__init__",
            "location": 255,
            "return": [],
            "arguments": {
                "self": [],
                "grammar": [],
                "lr_action": [],
                "lr_goto": [],
                "default_reductions": [],
                "sr_conflicts": [],
                "rr_conflicts": []
            }
        },
        "LRTable.from_cache": {
            "name": "from_cache",
            "location": 265,
            "return": [],
            "arguments": {
                "cls": [],
                "grammar": [],
                "data": []
            }
        },
        "LRTable.from_grammar": {
            "name": "from_grammar",
            "location": 284,
            "return": [],
            "arguments": {
                "cls": [],
                "grammar": []
            }
        },
        "LRTable.lr0_items": {
            "name": "lr0_items",
            "location": 392,
            "return": [],
            "arguments": {
                "cls": [],
                "grammar": [],
                "add_count": [],
                "cidhash": [],
                "goto_cache": []
            }
        },
        "LRTable.lr0_closure": {
            "name": "lr0_closure",
            "location": 416,
            "return": [],
            "arguments": {
                "cls": [],
                "I": [],
                "add_count": []
            }
        },
        "LRTable.lr0_goto": {
            "name": "lr0_goto",
            "location": 433,
            "return": [],
            "arguments": {
                "cls": [],
                "I": [],
                "x": [],
                "add_count": [],
                "goto_cache": []
            }
        },
        "LRTable.add_lalr_lookaheads": {
            "name": "add_lalr_lookaheads",
            "location": 456,
            "return": [],
            "arguments": {
                "cls": [],
                "grammar": [],
                "C": [],
                "add_count": [],
                "cidhash": [],
                "goto_cache": []
            }
        },
        "LRTable.compute_nullable_nonterminals": {
            "name": "compute_nullable_nonterminals",
            "location": 465,
            "return": [],
            "arguments": {
                "cls": [],
                "grammar": []
            }
        },
        "LRTable.find_nonterminal_transitions": {
            "name": "find_nonterminal_transitions",
            "location": 484,
            "return": [],
            "arguments": {
                "cls": [],
                "grammar": [],
                "C": []
            }
        },
        "LRTable.compute_read_sets": {
            "name": "compute_read_sets",
            "location": 495,
            "return": [],
            "arguments": {
                "cls": [],
                "grammar": [],
                "C": [],
                "ntrans": [],
                "nullable": [],
                "add_count": [],
                "cidhash": [],
                "goto_cache": []
            }
        },
        "LRTable.compute_follow_sets": {
            "name": "compute_follow_sets",
            "location": 503,
            "return": [],
            "arguments": {
                "cls": [],
                "ntrans": [],
                "readsets": [],
                "includesets": []
            }
        },
        "LRTable.dr_relation": {
            "name": "dr_relation",
            "location": 511,
            "return": [],
            "arguments": {
                "cls": [],
                "grammar": [],
                "C": [],
                "trans": [],
                "nullable": [],
                "add_count": [],
                "goto_cache": []
            }
        },
        "LRTable.reads_relation": {
            "name": "reads_relation",
            "location": 526,
            "return": [],
            "arguments": {
                "cls": [],
                "C": [],
                "trans": [],
                "empty": [],
                "add_count": [],
                "cidhash": [],
                "goto_cache": []
            }
        },
        "LRTable.compute_lookback_includes": {
            "name": "compute_lookback_includes",
            "location": 540,
            "return": [],
            "arguments": {
                "cls": [],
                "grammar": [],
                "C": [],
                "trans": [],
                "nullable": [],
                "add_count": [],
                "cidhash": [],
                "goto_cache": []
            }
        },
        "LRTable.add_lookaheads": {
            "name": "add_lookaheads",
            "location": 592,
            "return": [],
            "arguments": {
                "cls": [],
                "lookbacks": [],
                "followset": []
            }
        },
        "ParserGenerator.production.inner": {
            "name": "inner",
            "location": 79,
            "return": [],
            "arguments": {
                "func": []
            }
        }
    },
    "nex-master/nex/rply/utils.py": {
        "IdentityDict.__init__": {
            "name": "__init__",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IdentityDict.__getitem__": {
            "name": "__getitem__",
            "location": 9,
            "return": [],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "bytes"
                ]
            }
        },
        "IdentityDict.__setitem__": {
            "name": "__setitem__",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "list[str]",
                    "None",
                    "typing.MutableMapping",
                    "int"
                ],
                "value": [
                    "str",
                    "float",
                    "int"
                ]
            }
        },
        "IdentityDict.__delitem__": {
            "name": "__delitem__",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "bytes",
                    "None",
                    "typing.Iterable[str]"
                ]
            }
        },
        "IdentityDict.__len__": {
            "name": "__len__",
            "location": 24,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "IdentityDict.__iter__": {
            "name": "__iter__",
            "location": 27,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Counter.__init__": {
            "name": "__init__",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Counter.incr": {
            "name": "incr",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "nex-master/nex/rply/__init__.py": {},
    "nex-master/tests/common.py": {
        "char_instr_tok": {
            "name": "char_instr_tok",
            "location": 19,
            "return": [],
            "arguments": {
                "char": [
                    "str",
                    "int"
                ],
                "cat": [
                    "str",
                    "int"
                ]
            }
        },
        "ITok": {
            "name": "ITok",
            "location": 23,
            "return": [
                "InstructionToken"
            ],
            "arguments": {}
        },
        "str_to_toks": {
            "name": "str_to_toks",
            "location": 42,
            "return": [
                "list[BaseToken]"
            ],
            "arguments": {
                "s": [
                    "str"
                ]
            }
        },
        "str_to_lit_strs": {
            "name": "str_to_lit_strs",
            "location": 46,
            "return": [
                "list[]"
            ],
            "arguments": {
                "s": [
                    "str"
                ]
            }
        },
        "str_to_lit_str": {
            "name": "str_to_lit_str",
            "location": 50,
            "return": [
                "str"
            ],
            "arguments": {
                "s": [
                    "str",
                    "set[int]",
                    "bytes"
                ]
            }
        },
        "DummyFontInfo.__init__": {
            "name": "__init__",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "file_name": [
                    "str",
                    "list[str]"
                ],
                "file_path": [
                    "str",
                    "None"
                ],
                "at_clause": [
                    "dict[, ]",
                    "str",
                    "dict[int, bool]",
                    "dict[str, typing.Any]",
                    "typing.Type"
                ]
            }
        },
        "DummyGlobalFontState.define_new_font": {
            "name": "define_new_font",
            "location": 71,
            "return": [
                "str",
                "dict[, ]"
            ],
            "arguments": {
                "self": [],
                "file_name": [
                    "str"
                ],
                "at_clause": [
                    "str"
                ]
            }
        }
    },
    "nex-master/tests/test_banisher.py": {
        "string_to_banisher": {
            "name": "string_to_banisher",
            "location": 96,
            "return": [
                "Banisher"
            ],
            "arguments": {
                "s": [
                    "str",
                    "int"
                ],
                "cs_map": [
                    "str",
                    "int",
                    "dict[str, str]"
                ],
                "char_to_cat": [
                    "None",
                    "str",
                    "int",
                    "dict[str, str]"
                ],
                "param_map": [
                    "None",
                    "str",
                    "int",
                    "dict[str, str]"
                ]
            }
        },
        "test_resolver": {
            "name": "test_resolver",
            "location": 107,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_empty_macro": {
            "name": "test_empty_macro",
            "location": 116,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_short_hand_def": {
            "name": "test_short_hand_def",
            "location": 128,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_def": {
            "name": "test_def",
            "location": 139,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_let": {
            "name": "test_let",
            "location": 148,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_toks_def_balanced": {
            "name": "test_toks_def_balanced",
            "location": 165,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_toks_assign_literal": {
            "name": "test_toks_assign_literal",
            "location": 181,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_toks_assign_variable": {
            "name": "test_toks_assign_variable",
            "location": 197,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_expand_after": {
            "name": "test_expand_after",
            "location": 213,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_string_control_sequence": {
            "name": "test_string_control_sequence",
            "location": 232,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_string_character": {
            "name": "test_string_character",
            "location": 245,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_string_control_sequence_containing_space": {
            "name": "test_string_control_sequence_containing_space",
            "location": 258,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_string_control_sequence_no_escape": {
            "name": "test_string_control_sequence_no_escape",
            "location": 281,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_cs_name": {
            "name": "test_cs_name",
            "location": 297,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_cs_name_end_by_expansion": {
            "name": "test_cs_name_end_by_expansion",
            "location": 318,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_cs_name_containing_non_char": {
            "name": "test_cs_name_containing_non_char",
            "location": 353,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_change_case": {
            "name": "test_change_case",
            "location": 365,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_if": {
            "name": "test_if",
            "location": 397,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_afters": {
            "name": "test_afters",
            "location": 414,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_input": {
            "name": "test_input",
            "location": 429,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_integer_tokenize": {
            "name": "test_integer_tokenize",
            "location": 438,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_dimension_tokenize": {
            "name": "test_dimension_tokenize",
            "location": 446,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "DummyCodes.__init__": {
            "name": "__init__",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "char_to_cat": [
                    "str",
                    "int",
                    "None",
                    "float"
                ]
            }
        },
        "DummyCodes.get_cat_code": {
            "name": "get_cat_code",
            "location": 42,
            "return": [],
            "arguments": {
                "self": [],
                "char": [
                    "str",
                    "int"
                ]
            }
        },
        "DummyCodes.get_lower_case_code": {
            "name": "get_lower_case_code",
            "location": 45,
            "return": [],
            "arguments": {
                "self": [],
                "c": [
                    "str"
                ]
            }
        },
        "DummyCodes.get_upper_case_code": {
            "name": "get_upper_case_code",
            "location": 48,
            "return": [],
            "arguments": {
                "self": [],
                "c": [
                    "str",
                    "int",
                    "float"
                ]
            }
        },
        "DummyRouter.__init__": {
            "name": "__init__",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cs_map": [
                    "int",
                    "str",
                    "bytes",
                    "float"
                ]
            }
        },
        "DummyRouter.lookup_control_sequence": {
            "name": "lookup_control_sequence",
            "location": 57,
            "return": [],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "int",
                    "typing.Sequence[str]"
                ]
            }
        },
        "DummyRouter.name_means_start_condition": {
            "name": "name_means_start_condition",
            "location": 61,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "None",
                    "typing.Iterable[str]"
                ]
            }
        },
        "DummyRouter.name_means_end_condition": {
            "name": "name_means_end_condition",
            "location": 64,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "bool"
                ]
            }
        },
        "DummyRouter.name_means_delimit_condition": {
            "name": "name_means_delimit_condition",
            "location": 67,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "bool"
                ]
            }
        },
        "DummyParameters.__init__": {
            "name": "__init__",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "param_map": [
                    "int",
                    "float"
                ]
            }
        },
        "DummyParameters.get": {
            "name": "get",
            "location": 76,
            "return": [],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "None"
                ]
            }
        },
        "DummyState.__init__": {
            "name": "__init__",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "char_to_cat": [
                    "str",
                    "dict[str, typing.Any]",
                    "int"
                ],
                "cs_map": [
                    "int",
                    "str"
                ],
                "param_map": [
                    "None",
                    "int",
                    "float",
                    "str",
                    "list[int]"
                ]
            }
        },
        "DummyState.evaluate_if_token_to_block": {
            "name": "evaluate_if_token_to_block",
            "location": 87,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "tok": [
                    "str"
                ]
            }
        }
    },
    "nex-master/tests/test_box.py": {
        "test_glue_flex": {
            "name": "test_glue_flex",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_kern": {
            "name": "test_kern",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_glue_flex_set": {
            "name": "test_glue_flex_set",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_box_writer": {
            "name": "test_box_writer",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "nex-master/tests/test_command_parser.py": {
        "process": {
            "name": "process",
            "location": 96,
            "return": [],
            "arguments": {
                "s": [
                    "int"
                ]
            }
        },
        "test_relax": {
            "name": "test_relax",
            "location": 111,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_right_brace": {
            "name": "test_right_brace",
            "location": 115,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_delimit_group": {
            "name": "test_delimit_group",
            "location": 119,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_show_token": {
            "name": "test_show_token",
            "location": 124,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_show_box": {
            "name": "test_show_box",
            "location": 128,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_show_lists": {
            "name": "test_show_lists",
            "location": 132,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_ship_out": {
            "name": "test_ship_out",
            "location": 136,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_after_assignment": {
            "name": "test_after_assignment",
            "location": 140,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_after_group": {
            "name": "test_after_group",
            "location": 144,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_message": {
            "name": "test_message",
            "location": 148,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_open_io": {
            "name": "test_open_io",
            "location": 153,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_close_io": {
            "name": "test_close_io",
            "location": 158,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_write": {
            "name": "test_write",
            "location": 163,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_special": {
            "name": "test_special",
            "location": 167,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_penalty": {
            "name": "test_penalty",
            "location": 171,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_kern": {
            "name": "test_kern",
            "location": 175,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_mark": {
            "name": "test_mark",
            "location": 180,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_insert": {
            "name": "test_insert",
            "location": 184,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_v_adjust": {
            "name": "test_v_adjust",
            "location": 188,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_un_stuff": {
            "name": "test_un_stuff",
            "location": 192,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_glue": {
            "name": "test_glue",
            "location": 198,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_space": {
            "name": "test_space",
            "location": 203,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_add_leaders": {
            "name": "test_add_leaders",
            "location": 208,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_box_literal": {
            "name": "test_box_literal",
            "location": 214,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_un_box": {
            "name": "test_un_box",
            "location": 219,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_indent": {
            "name": "test_indent",
            "location": 226,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_par": {
            "name": "test_par",
            "location": 231,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_left_brace": {
            "name": "test_left_brace",
            "location": 235,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_rule": {
            "name": "test_rule",
            "location": 239,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_shift_box": {
            "name": "test_shift_box",
            "location": 244,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_align": {
            "name": "test_align",
            "location": 251,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_endings": {
            "name": "test_endings",
            "location": 256,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_character": {
            "name": "test_character",
            "location": 261,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_accent": {
            "name": "test_accent",
            "location": 265,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_italic_correction": {
            "name": "test_italic_correction",
            "location": 270,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_discretionary": {
            "name": "test_discretionary",
            "location": 274,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_discretionary_hyphen": {
            "name": "test_discretionary_hyphen",
            "location": 278,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_math_shift": {
            "name": "test_math_shift",
            "location": 282,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_ignore_spaces": {
            "name": "test_ignore_spaces",
            "location": 286,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "process.resolve_cs": {
            "name": "resolve_cs",
            "location": 101,
            "return": [],
            "arguments": {
                "name": []
            }
        }
    },
    "nex-master/tests/test_condition_parsing.py": {
        "parser": {
            "name": "parser",
            "location": 9,
            "return": [],
            "arguments": {}
        },
        "test_if_num": {
            "name": "test_if_num",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "parser": [
                    "str"
                ]
            }
        },
        "test_if_dimen": {
            "name": "test_if_dimen",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "parser": [
                    "str",
                    "dict[str, typing.Sequence[str]]"
                ]
            }
        },
        "test_if_bool": {
            "name": "test_if_bool",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "parser": [
                    "str",
                    "None",
                    "dict[str, typing.Sequence[str]]"
                ]
            }
        },
        "test_if_odd": {
            "name": "test_if_odd",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "parser": [
                    "str",
                    "dict[str, typing.Sequence[str]]"
                ]
            }
        },
        "test_if_modes": {
            "name": "test_if_modes",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "parser": [
                    "str",
                    "None",
                    "dict[str, typing.Sequence[str]]"
                ]
            }
        },
        "test_if_case": {
            "name": "test_if_case",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "parser": [
                    "str",
                    "dict[str, typing.Sequence[str]]"
                ]
            }
        }
    },
    "nex-master/tests/test_dampf_utils.py": {
        "_test": {
            "name": "_test",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "signed": [],
                "n": [
                    "int"
                ]
            }
        },
        "test_bytes_needed": {
            "name": "test_bytes_needed",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "nex-master/tests/test_fonts.py": {
        "test_skew_char": {
            "name": "test_skew_char",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_hyphen_char": {
            "name": "test_hyphen_char",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "nex-master/tests/test_instructioner.py": {},
    "nex-master/tests/test_lexer.py": {
        "lex_string_to_tokens": {
            "name": "lex_string_to_tokens",
            "location": 15,
            "return": [
                "list[]"
            ],
            "arguments": {
                "s": [
                    "str",
                    "int",
                    "None"
                ]
            }
        },
        "test_trioing": {
            "name": "test_trioing",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_comments": {
            "name": "test_comments",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_skipping_blanks": {
            "name": "test_skipping_blanks",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_control_sequence": {
            "name": "test_control_sequence",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_control_sequence_spacing": {
            "name": "test_control_sequence_spacing",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_new_lines": {
            "name": "test_new_lines",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_tokenise": {
            "name": "test_tokenise",
            "location": 103,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "DummyCatCodeGetter.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DummyCatCodeGetter.get": {
            "name": "get",
            "location": 11,
            "return": [],
            "arguments": {
                "self": [],
                "char": [
                    "str"
                ]
            }
        }
    },
    "nex-master/tests/test_number_parsing.py": {
        "test_numbers": {
            "name": "test_numbers",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_dimens": {
            "name": "test_dimens",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_numbers.p": {
            "name": "p",
            "location": 11,
            "return": [],
            "arguments": {
                "s": []
            }
        },
        "test_numbers.basic_check": {
            "name": "basic_check",
            "location": 14,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "r": []
            }
        }
    },
    "nex-master/tests/test_program.py": {
        "test_make_input_chain": {
            "name": "test_make_input_chain",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_run_file": {
            "name": "test_run_file",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "nex-master/tests/test_reader.py": {
        "test_buffer_init": {
            "name": "test_buffer_init",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_next_char": {
            "name": "test_next_char",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_init_missing_file": {
            "name": "test_init_missing_file",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_init_file": {
            "name": "test_init_file",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_insert_start": {
            "name": "test_insert_start",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_insert_middle": {
            "name": "test_insert_middle",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_insert_end": {
            "name": "test_insert_end",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_peek": {
            "name": "test_peek",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_advance": {
            "name": "test_advance",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "nex-master/tests/test_registers.py": {
        "test_registers_empty": {
            "name": "test_registers_empty",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_registers_uninitialized": {
            "name": "test_registers_uninitialized",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_register_types": {
            "name": "test_register_types",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "nex-master/tests/test_router.py": {
        "test_undefined_control_sequence": {
            "name": "test_undefined_control_sequence",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_primitive_resolution": {
            "name": "test_primitive_resolution",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_parameter_resolution": {
            "name": "test_parameter_resolution",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_macro_definition": {
            "name": "test_macro_definition",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_short_hand_macro_definition": {
            "name": "test_short_hand_macro_definition",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_let_to_macro": {
            "name": "test_let_to_macro",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_let_to_primitive": {
            "name": "test_let_to_primitive",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_let_to_parameter": {
            "name": "test_let_to_parameter",
            "location": 119,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_let_to_character": {
            "name": "test_let_to_character",
            "location": 134,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "nex-master/tests/test_state.py": {
        "CTok": {
            "name": "CTok",
            "location": 21,
            "return": [
                "CommandToken"
            ],
            "arguments": {
                "command": [
                    "str",
                    "typing.Type"
                ],
                "value": [
                    "str",
                    "typing.Type"
                ]
            }
        },
        "BTok": {
            "name": "BTok",
            "location": 25,
            "return": [
                "BuiltToken"
            ],
            "arguments": {
                "type_": [
                    "typing.Type"
                ],
                "value": [
                    "typing.Type"
                ]
            }
        },
        "state": {
            "name": "state",
            "location": 30,
            "return": [],
            "arguments": {}
        },
        "write": {
            "name": "write",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "state": [
                    "str"
                ],
                "file_name": [
                    "str"
                ]
            }
        },
        "nr_tok": {
            "name": "nr_tok",
            "location": 46,
            "return": [],
            "arguments": {
                "n": [
                    "int",
                    "str"
                ]
            }
        },
        "test_single_letter": {
            "name": "test_single_letter",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "state": []
            }
        },
        "test_solo_accent": {
            "name": "test_solo_accent",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "state": []
            }
        },
        "test_paired_accent": {
            "name": "test_paired_accent",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "state": []
            }
        },
        "test_v_rule": {
            "name": "test_v_rule",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {
                "state": []
            }
        },
        "test_if_num": {
            "name": "test_if_num",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {
                "state": [
                    "str"
                ]
            }
        },
        "test_if_dimen": {
            "name": "test_if_dimen",
            "location": 112,
            "return": [
                "None"
            ],
            "arguments": {
                "state": [
                    "str"
                ]
            }
        },
        "test_if_odd": {
            "name": "test_if_odd",
            "location": 118,
            "return": [
                "None"
            ],
            "arguments": {
                "state": [
                    "str"
                ]
            }
        },
        "test_if_mode": {
            "name": "test_if_mode",
            "location": 126,
            "return": [
                "None"
            ],
            "arguments": {
                "state": []
            }
        },
        "test_if_case": {
            "name": "test_if_case",
            "location": 138,
            "return": [
                "None"
            ],
            "arguments": {
                "state": []
            }
        },
        "test_set_box": {
            "name": "test_set_box",
            "location": 145,
            "return": [
                "None"
            ],
            "arguments": {
                "state": []
            }
        },
        "test_set_box_void": {
            "name": "test_set_box_void",
            "location": 153,
            "return": [
                "None"
            ],
            "arguments": {
                "state": []
            }
        },
        "test_unbox": {
            "name": "test_unbox",
            "location": 160,
            "return": [
                "None"
            ],
            "arguments": {
                "state": []
            }
        },
        "test_unbox_bad_box_type": {
            "name": "test_unbox_bad_box_type",
            "location": 188,
            "return": [
                "None"
            ],
            "arguments": {
                "state": []
            }
        },
        "test_get_box_dimen": {
            "name": "test_get_box_dimen",
            "location": 195,
            "return": [
                "None"
            ],
            "arguments": {
                "state": [
                    "int"
                ]
            }
        },
        "test_space_factor": {
            "name": "test_space_factor",
            "location": 202,
            "return": [
                "None"
            ],
            "arguments": {
                "state": []
            }
        },
        "test_after_group": {
            "name": "test_after_group",
            "location": 228,
            "return": [
                "None"
            ],
            "arguments": {
                "state": []
            }
        },
        "test_after_group_scoped": {
            "name": "test_after_group_scoped",
            "location": 246,
            "return": [
                "None"
            ],
            "arguments": {
                "state": []
            }
        },
        "test_token_executor": {
            "name": "test_token_executor",
            "location": 268,
            "return": [
                "None"
            ],
            "arguments": {
                "state": [
                    "typing.Callable[, ]"
                ]
            }
        },
        "test_command_token_set_box": {
            "name": "test_command_token_set_box",
            "location": 276,
            "return": [
                "None"
            ],
            "arguments": {
                "state": [
                    "typing.Callable[int, tuple[]]"
                ]
            }
        },
        "test_command_token_get_box": {
            "name": "test_command_token_get_box",
            "location": 293,
            "return": [
                "None"
            ],
            "arguments": {
                "state": []
            }
        },
        "test_command_token_add_h_rule": {
            "name": "test_command_token_add_h_rule",
            "location": 311,
            "return": [
                "None"
            ],
            "arguments": {
                "state": [
                    "str",
                    "float"
                ]
            }
        },
        "test_command_token_code_assignment": {
            "name": "test_command_token_code_assignment",
            "location": 326,
            "return": [
                "None"
            ],
            "arguments": {
                "state": []
            }
        },
        "test_command_token_unbox": {
            "name": "test_command_token_unbox",
            "location": 340,
            "return": [
                "None"
            ],
            "arguments": {
                "state": []
            }
        },
        "test_command_token_message": {
            "name": "test_command_token_message",
            "location": 357,
            "return": [
                "None"
            ],
            "arguments": {
                "state": [
                    "str",
                    "typing.Callable[, ]",
                    "list[list[typing.Any]]",
                    "list[list[str]]"
                ]
            }
        },
        "DummyTokenQueue.replace_tokens_on_input": {
            "name": "replace_tokens_on_input",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tokens": [
                    "str",
                    "dict[, ]",
                    "bool"
                ]
            }
        }
    },
    "nex-master/tests/test_utils.py": {
        "test_ensure_extension": {
            "name": "test_ensure_extension",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_file_to_chars": {
            "name": "test_file_to_chars",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    }
}
{
    "numpy-stubs-master/runtests.py": {
        "find_missing": {
            "name": "find_missing",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {
                "module_name": [
                    "str",
                    "typing.Mapping"
                ]
            }
        },
        "run_pytest": {
            "name": "run_pytest",
            "location": 122,
            "return": [],
            "arguments": {
                "argv": []
            }
        },
        "main": {
            "name": "main",
            "location": 131,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "FindAttributes.__init__": {
            "name": "__init__",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FindAttributes.visit_FunctionDef": {
            "name": "visit_FunctionDef",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "FindAttributes.visit_ClassDef": {
            "name": "visit_ClassDef",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "FindAttributes.visit_AnnAssign": {
            "name": "visit_AnnAssign",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node": []
            }
        }
    },
    "numpy-stubs-master/setup.py": {
        "find_stubs": {
            "name": "find_stubs",
            "location": 5,
            "return": [
                "dict[str, list[typing.Union[str,list[]]]]"
            ],
            "arguments": {
                "package": [
                    "str"
                ]
            }
        }
    },
    "numpy-stubs-master/numpy-stubs/typing.py": {
        "_SupportsArray.__array__": {
            "name": "__array__",
            "location": 62,
            "return": [],
            "arguments": {
                "self": [],
                "dtype": []
            }
        }
    },
    "numpy-stubs-master/numpy-stubs/__init__.py": {
        "__getattr__": {
            "name": "__getattr__",
            "location": 48,
            "return": [],
            "arguments": {
                "name": []
            }
        },
        "array": {
            "name": "array",
            "location": 511,
            "return": [],
            "arguments": {
                "object": [],
                "dtype": [],
                "copy": [],
                "subok": [],
                "ndmin": []
            }
        },
        "zeros": {
            "name": "zeros",
            "location": 518,
            "return": [],
            "arguments": {
                "shape": [],
                "dtype": [],
                "order": []
            }
        },
        "ones": {
            "name": "ones",
            "location": 521,
            "return": [],
            "arguments": {
                "shape": [],
                "dtype": [],
                "order": []
            }
        },
        "empty": {
            "name": "empty",
            "location": 524,
            "return": [],
            "arguments": {
                "shape": [],
                "dtype": [],
                "order": []
            }
        },
        "zeros_like": {
            "name": "zeros_like",
            "location": 527,
            "return": [],
            "arguments": {
                "a": [],
                "dtype": [],
                "order": [],
                "subok": [],
                "shape": []
            }
        },
        "ones_like": {
            "name": "ones_like",
            "location": 534,
            "return": [],
            "arguments": {
                "a": [],
                "dtype": [],
                "order": [],
                "subok": [],
                "shape": []
            }
        },
        "empty_like": {
            "name": "empty_like",
            "location": 541,
            "return": [],
            "arguments": {
                "a": [],
                "dtype": [],
                "order": [],
                "subok": [],
                "shape": []
            }
        },
        "full": {
            "name": "full",
            "location": 548,
            "return": [],
            "arguments": {
                "shape": [],
                "fill_value": [],
                "dtype": [],
                "order": []
            }
        },
        "full_like": {
            "name": "full_like",
            "location": 551,
            "return": [],
            "arguments": {
                "a": [],
                "fill_value": [],
                "dtype": [],
                "order": [],
                "subok": [],
                "shape": []
            }
        },
        "count_nonzero": {
            "name": "count_nonzero",
            "location": 559,
            "return": [],
            "arguments": {
                "a": [],
                "axis": []
            }
        },
        "isfortran": {
            "name": "isfortran",
            "location": 562,
            "return": [],
            "arguments": {
                "a": []
            }
        },
        "argwhere": {
            "name": "argwhere",
            "location": 563,
            "return": [],
            "arguments": {
                "a": []
            }
        },
        "flatnonzero": {
            "name": "flatnonzero",
            "location": 564,
            "return": [],
            "arguments": {
                "a": []
            }
        },
        "correlate": {
            "name": "correlate",
            "location": 565,
            "return": [],
            "arguments": {
                "a": [],
                "v": [],
                "mode": []
            }
        },
        "convolve": {
            "name": "convolve",
            "location": 566,
            "return": [],
            "arguments": {
                "a": [],
                "v": [],
                "mode": []
            }
        },
        "outer": {
            "name": "outer",
            "location": 567,
            "return": [],
            "arguments": {
                "a": [],
                "b": [],
                "out": []
            }
        },
        "tensordot": {
            "name": "tensordot",
            "location": 568,
            "return": [],
            "arguments": {
                "a": [],
                "b": [],
                "axes": []
            }
        },
        "roll": {
            "name": "roll",
            "location": 575,
            "return": [],
            "arguments": {
                "a": [],
                "shift": [],
                "axis": []
            }
        },
        "rollaxis": {
            "name": "rollaxis",
            "location": 580,
            "return": [],
            "arguments": {
                "a": [],
                "axis": [],
                "start": []
            }
        },
        "moveaxis": {
            "name": "moveaxis",
            "location": 581,
            "return": [],
            "arguments": {
                "a": [],
                "source": [],
                "destination": []
            }
        },
        "cross": {
            "name": "cross",
            "location": 586,
            "return": [],
            "arguments": {
                "a": [],
                "b": [],
                "axisa": [],
                "axisb": [],
                "axisc": [],
                "axis": []
            }
        },
        "indices": {
            "name": "indices",
            "location": 594,
            "return": [],
            "arguments": {
                "dimensions": [],
                "dtype": [],
                "sparse": []
            }
        },
        "fromfunction": {
            "name": "fromfunction",
            "location": 597,
            "return": [],
            "arguments": {
                "function": [],
                "shape": []
            }
        },
        "isscalar": {
            "name": "isscalar",
            "location": 598,
            "return": [],
            "arguments": {
                "element": []
            }
        },
        "binary_repr": {
            "name": "binary_repr",
            "location": 599,
            "return": [],
            "arguments": {
                "num": [],
                "width": []
            }
        },
        "base_repr": {
            "name": "base_repr",
            "location": 600,
            "return": [],
            "arguments": {
                "number": [],
                "base": [],
                "padding": []
            }
        },
        "identity": {
            "name": "identity",
            "location": 601,
            "return": [],
            "arguments": {
                "n": [],
                "dtype": []
            }
        },
        "allclose": {
            "name": "allclose",
            "location": 602,
            "return": [],
            "arguments": {
                "a": [],
                "b": [],
                "rtol": [],
                "atol": [],
                "equal_nan": []
            }
        },
        "isclose": {
            "name": "isclose",
            "location": 609,
            "return": [],
            "arguments": {
                "a": [],
                "b": [],
                "rtol": [],
                "atol": [],
                "equal_nan": []
            }
        },
        "array_equal": {
            "name": "array_equal",
            "location": 616,
            "return": [],
            "arguments": {
                "a1": [],
                "a2": []
            }
        },
        "array_equiv": {
            "name": "array_equiv",
            "location": 617,
            "return": [],
            "arguments": {
                "a1": [],
                "a2": []
            }
        },
        "maximum_sctype": {
            "name": "maximum_sctype",
            "location": 840,
            "return": [],
            "arguments": {
                "t": []
            }
        },
        "issctype": {
            "name": "issctype",
            "location": 841,
            "return": [],
            "arguments": {
                "rep": []
            }
        },
        "obj2sctype": {
            "name": "obj2sctype",
            "location": 847,
            "return": [],
            "arguments": {
                "rep": [],
                "default": []
            }
        },
        "issubclass_": {
            "name": "issubclass_",
            "location": 850,
            "return": [],
            "arguments": {
                "arg1": [],
                "arg2": []
            }
        },
        "issubsctype": {
            "name": "issubsctype",
            "location": 851,
            "return": [],
            "arguments": {
                "arg1": [],
                "arg2": []
            }
        },
        "issubdtype": {
            "name": "issubdtype",
            "location": 854,
            "return": [],
            "arguments": {
                "arg1": [],
                "arg2": []
            }
        },
        "sctype2char": {
            "name": "sctype2char",
            "location": 855,
            "return": [],
            "arguments": {
                "sctype": []
            }
        },
        "find_common_type": {
            "name": "find_common_type",
            "location": 856,
            "return": [],
            "arguments": {
                "array_types": [],
                "scalar_types": []
            }
        },
        "take": {
            "name": "take",
            "location": 929,
            "return": [],
            "arguments": {
                "a": [],
                "indices": [],
                "axis": [],
                "out": [],
                "mode": []
            }
        },
        "reshape": {
            "name": "reshape",
            "location": 936,
            "return": [],
            "arguments": {
                "a": [],
                "newshape": [],
                "order": []
            }
        },
        "choose": {
            "name": "choose",
            "location": 952,
            "return": [],
            "arguments": {
                "a": [],
                "choices": [],
                "out": [],
                "mode": []
            }
        },
        "repeat": {
            "name": "repeat",
            "location": 958,
            "return": [],
            "arguments": {
                "a": [],
                "repeats": [],
                "axis": []
            }
        },
        "put": {
            "name": "put",
            "location": 961,
            "return": [],
            "arguments": {
                "a": [],
                "ind": [],
                "v": [],
                "mode": []
            }
        },
        "swapaxes": {
            "name": "swapaxes",
            "location": 964,
            "return": [],
            "arguments": {
                "a": [],
                "axis1": [],
                "axis2": []
            }
        },
        "transpose": {
            "name": "transpose",
            "location": 967,
            "return": [],
            "arguments": {
                "a": [],
                "axes": []
            }
        },
        "partition": {
            "name": "partition",
            "location": 970,
            "return": [],
            "arguments": {
                "a": [],
                "kth": [],
                "axis": [],
                "kind": [],
                "order": []
            }
        },
        "argpartition": {
            "name": "argpartition",
            "location": 994,
            "return": [],
            "arguments": {
                "a": [],
                "kth": [],
                "axis": [],
                "kind": [],
                "order": []
            }
        },
        "sort": {
            "name": "sort",
            "location": 1001,
            "return": [],
            "arguments": {
                "a": [],
                "axis": [],
                "kind": [],
                "order": []
            }
        },
        "argsort": {
            "name": "argsort",
            "location": 1007,
            "return": [],
            "arguments": {
                "a": [],
                "axis": [],
                "kind": [],
                "order": []
            }
        },
        "argmax": {
            "name": "argmax",
            "location": 1020,
            "return": [],
            "arguments": {
                "a": [],
                "axis": [],
                "out": []
            }
        },
        "argmin": {
            "name": "argmin",
            "location": 1032,
            "return": [],
            "arguments": {
                "a": [],
                "axis": [],
                "out": []
            }
        },
        "searchsorted": {
            "name": "searchsorted",
            "location": 1045,
            "return": [],
            "arguments": {
                "a": [],
                "v": [],
                "side": [],
                "sorter": []
            }
        },
        "resize": {
            "name": "resize",
            "location": 1051,
            "return": [],
            "arguments": {
                "a": [],
                "new_shape": []
            }
        },
        "squeeze": {
            "name": "squeeze",
            "location": 1055,
            "return": [],
            "arguments": {
                "a": [],
                "axis": []
            }
        },
        "diagonal": {
            "name": "diagonal",
            "location": 1056,
            "return": [],
            "arguments": {
                "a": [],
                "offset": [],
                "axis1": [],
                "axis2": []
            }
        },
        "trace": {
            "name": "trace",
            "location": 1062,
            "return": [],
            "arguments": {
                "a": [],
                "offset": [],
                "axis1": [],
                "axis2": [],
                "dtype": [],
                "out": []
            }
        },
        "ravel": {
            "name": "ravel",
            "location": 1070,
            "return": [],
            "arguments": {
                "a": [],
                "order": []
            }
        },
        "nonzero": {
            "name": "nonzero",
            "location": 1071,
            "return": [],
            "arguments": {
                "a": []
            }
        },
        "shape": {
            "name": "shape",
            "location": 1072,
            "return": [],
            "arguments": {
                "a": []
            }
        },
        "compress": {
            "name": "compress",
            "location": 1073,
            "return": [],
            "arguments": {
                "condition": [],
                "a": [],
                "axis": [],
                "out": []
            }
        },
        "dtype.__init__": {
            "name": "__init__",
            "location": 54,
            "return": [],
            "arguments": {
                "self": [],
                "obj": [],
                "align": [],
                "copy": []
            }
        },
        "dtype.__eq__": {
            "name": "__eq__",
            "location": 55,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "dtype.__ne__": {
            "name": "__ne__",
            "location": 56,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "dtype.__gt__": {
            "name": "__gt__",
            "location": 57,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "dtype.__ge__": {
            "name": "__ge__",
            "location": 58,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "dtype.__lt__": {
            "name": "__lt__",
            "location": 59,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "dtype.__le__": {
            "name": "__le__",
            "location": 60,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "dtype.alignment": {
            "name": "alignment",
            "location": 62,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "dtype.base": {
            "name": "base",
            "location": 64,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "dtype.byteorder": {
            "name": "byteorder",
            "location": 66,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "dtype.char": {
            "name": "char",
            "location": 68,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "dtype.descr": {
            "name": "descr",
            "location": 70,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "dtype.fields": {
            "name": "fields",
            "location": 72,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "dtype.flags": {
            "name": "flags",
            "location": 76,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "dtype.hasobject": {
            "name": "hasobject",
            "location": 78,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "dtype.isbuiltin": {
            "name": "isbuiltin",
            "location": 80,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "dtype.isnative": {
            "name": "isnative",
            "location": 82,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "dtype.isalignedstruct": {
            "name": "isalignedstruct",
            "location": 84,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "dtype.itemsize": {
            "name": "itemsize",
            "location": 86,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "dtype.kind": {
            "name": "kind",
            "location": 88,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "dtype.metadata": {
            "name": "metadata",
            "location": 90,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "dtype.name": {
            "name": "name",
            "location": 92,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "dtype.num": {
            "name": "num",
            "location": 94,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "dtype.shape": {
            "name": "shape",
            "location": 96,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "dtype.ndim": {
            "name": "ndim",
            "location": 98,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "dtype.subdtype": {
            "name": "subdtype",
            "location": 100,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "dtype.newbyteorder": {
            "name": "newbyteorder",
            "location": 101,
            "return": [],
            "arguments": {
                "self": [],
                "new_order": []
            }
        },
        "dtype.str": {
            "name": "str",
            "location": 105,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "dtype.type": {
            "name": "type",
            "location": 107,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_flagsobj.behaved": {
            "name": "behaved",
            "location": 117,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_flagsobj.c_contiguous": {
            "name": "c_contiguous",
            "location": 119,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_flagsobj.carray": {
            "name": "carray",
            "location": 121,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_flagsobj.contiguous": {
            "name": "contiguous",
            "location": 123,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_flagsobj.f_contiguous": {
            "name": "f_contiguous",
            "location": 125,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_flagsobj.farray": {
            "name": "farray",
            "location": 127,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_flagsobj.fnc": {
            "name": "fnc",
            "location": 129,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_flagsobj.forc": {
            "name": "forc",
            "location": 131,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_flagsobj.fortran": {
            "name": "fortran",
            "location": 133,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_flagsobj.num": {
            "name": "num",
            "location": 135,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_flagsobj.owndata": {
            "name": "owndata",
            "location": 137,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_flagsobj.__getitem__": {
            "name": "__getitem__",
            "location": 138,
            "return": [],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "_flagsobj.__setitem__": {
            "name": "__setitem__",
            "location": 139,
            "return": [],
            "arguments": {
                "self": [],
                "key": [],
                "value": []
            }
        },
        "flatiter.base": {
            "name": "base",
            "location": 145,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "flatiter.coords": {
            "name": "coords",
            "location": 147,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "flatiter.index": {
            "name": "index",
            "location": 149,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "flatiter.copy": {
            "name": "copy",
            "location": 150,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "flatiter.__iter__": {
            "name": "__iter__",
            "location": 151,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "flatiter.__next__": {
            "name": "__next__",
            "location": 152,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_ArrayOrScalarCommon.T": {
            "name": "T",
            "location": 160,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_ArrayOrScalarCommon.base": {
            "name": "base",
            "location": 162,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_ArrayOrScalarCommon.dtype": {
            "name": "dtype",
            "location": 164,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_ArrayOrScalarCommon.data": {
            "name": "data",
            "location": 166,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_ArrayOrScalarCommon.flags": {
            "name": "flags",
            "location": 168,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_ArrayOrScalarCommon.size": {
            "name": "size",
            "location": 170,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_ArrayOrScalarCommon.itemsize": {
            "name": "itemsize",
            "location": 172,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_ArrayOrScalarCommon.nbytes": {
            "name": "nbytes",
            "location": 174,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_ArrayOrScalarCommon.ndim": {
            "name": "ndim",
            "location": 176,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_ArrayOrScalarCommon.shape": {
            "name": "shape",
            "location": 178,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_ArrayOrScalarCommon.strides": {
            "name": "strides",
            "location": 180,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_ArrayOrScalarCommon.__array__": {
            "name": "__array__",
            "location": 181,
            "return": [],
            "arguments": {
                "self": [],
                "__dtype": []
            }
        },
        "_ArrayOrScalarCommon.__int__": {
            "name": "__int__",
            "location": 182,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_ArrayOrScalarCommon.__float__": {
            "name": "__float__",
            "location": 183,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_ArrayOrScalarCommon.__complex__": {
            "name": "__complex__",
            "location": 184,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_ArrayOrScalarCommon.__str__": {
            "name": "__str__",
            "location": 193,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_ArrayOrScalarCommon.__repr__": {
            "name": "__repr__",
            "location": 194,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_ArrayOrScalarCommon.__copy__": {
            "name": "__copy__",
            "location": 195,
            "return": [],
            "arguments": {
                "self": [],
                "order": []
            }
        },
        "_ArrayOrScalarCommon.__deepcopy__": {
            "name": "__deepcopy__",
            "location": 196,
            "return": [],
            "arguments": {
                "self": [],
                "memo": []
            }
        },
        "_ArrayOrScalarCommon.__lt__": {
            "name": "__lt__",
            "location": 197,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "_ArrayOrScalarCommon.__le__": {
            "name": "__le__",
            "location": 198,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "_ArrayOrScalarCommon.__eq__": {
            "name": "__eq__",
            "location": 199,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "_ArrayOrScalarCommon.__ne__": {
            "name": "__ne__",
            "location": 200,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "_ArrayOrScalarCommon.__gt__": {
            "name": "__gt__",
            "location": 201,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "_ArrayOrScalarCommon.__ge__": {
            "name": "__ge__",
            "location": 202,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "_ArrayOrScalarCommon.__add__": {
            "name": "__add__",
            "location": 203,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "_ArrayOrScalarCommon.__radd__": {
            "name": "__radd__",
            "location": 204,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "_ArrayOrScalarCommon.__iadd__": {
            "name": "__iadd__",
            "location": 205,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "_ArrayOrScalarCommon.__sub__": {
            "name": "__sub__",
            "location": 206,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "_ArrayOrScalarCommon.__rsub__": {
            "name": "__rsub__",
            "location": 207,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "_ArrayOrScalarCommon.__isub__": {
            "name": "__isub__",
            "location": 208,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "_ArrayOrScalarCommon.__mul__": {
            "name": "__mul__",
            "location": 209,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "_ArrayOrScalarCommon.__rmul__": {
            "name": "__rmul__",
            "location": 210,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "_ArrayOrScalarCommon.__imul__": {
            "name": "__imul__",
            "location": 211,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "_ArrayOrScalarCommon.__truediv__": {
            "name": "__truediv__",
            "location": 216,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "_ArrayOrScalarCommon.__rtruediv__": {
            "name": "__rtruediv__",
            "location": 217,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "_ArrayOrScalarCommon.__itruediv__": {
            "name": "__itruediv__",
            "location": 218,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "_ArrayOrScalarCommon.__floordiv__": {
            "name": "__floordiv__",
            "location": 219,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "_ArrayOrScalarCommon.__rfloordiv__": {
            "name": "__rfloordiv__",
            "location": 220,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "_ArrayOrScalarCommon.__ifloordiv__": {
            "name": "__ifloordiv__",
            "location": 221,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "_ArrayOrScalarCommon.__mod__": {
            "name": "__mod__",
            "location": 222,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "_ArrayOrScalarCommon.__rmod__": {
            "name": "__rmod__",
            "location": 223,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "_ArrayOrScalarCommon.__imod__": {
            "name": "__imod__",
            "location": 224,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "_ArrayOrScalarCommon.__divmod__": {
            "name": "__divmod__",
            "location": 225,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "_ArrayOrScalarCommon.__rdivmod__": {
            "name": "__rdivmod__",
            "location": 226,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "_ArrayOrScalarCommon.__pow__": {
            "name": "__pow__",
            "location": 228,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "_ArrayOrScalarCommon.__rpow__": {
            "name": "__rpow__",
            "location": 229,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "_ArrayOrScalarCommon.__ipow__": {
            "name": "__ipow__",
            "location": 230,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "_ArrayOrScalarCommon.__lshift__": {
            "name": "__lshift__",
            "location": 231,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "_ArrayOrScalarCommon.__rlshift__": {
            "name": "__rlshift__",
            "location": 232,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "_ArrayOrScalarCommon.__ilshift__": {
            "name": "__ilshift__",
            "location": 233,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "_ArrayOrScalarCommon.__rshift__": {
            "name": "__rshift__",
            "location": 234,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "_ArrayOrScalarCommon.__rrshift__": {
            "name": "__rrshift__",
            "location": 235,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "_ArrayOrScalarCommon.__irshift__": {
            "name": "__irshift__",
            "location": 236,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "_ArrayOrScalarCommon.__and__": {
            "name": "__and__",
            "location": 237,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "_ArrayOrScalarCommon.__rand__": {
            "name": "__rand__",
            "location": 238,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "_ArrayOrScalarCommon.__iand__": {
            "name": "__iand__",
            "location": 239,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "_ArrayOrScalarCommon.__xor__": {
            "name": "__xor__",
            "location": 240,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "_ArrayOrScalarCommon.__rxor__": {
            "name": "__rxor__",
            "location": 241,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "_ArrayOrScalarCommon.__ixor__": {
            "name": "__ixor__",
            "location": 242,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "_ArrayOrScalarCommon.__or__": {
            "name": "__or__",
            "location": 243,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "_ArrayOrScalarCommon.__ror__": {
            "name": "__ror__",
            "location": 244,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "_ArrayOrScalarCommon.__ior__": {
            "name": "__ior__",
            "location": 245,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "_ArrayOrScalarCommon.__neg__": {
            "name": "__neg__",
            "location": 249,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_ArrayOrScalarCommon.__pos__": {
            "name": "__pos__",
            "location": 250,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_ArrayOrScalarCommon.__abs__": {
            "name": "__abs__",
            "location": 251,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_ArrayOrScalarCommon.__invert__": {
            "name": "__invert__",
            "location": 252,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_ArrayOrScalarCommon.__getattr__": {
            "name": "__getattr__",
            "location": 254,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "ndarray.real": {
            "name": "real",
            "location": 262,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "ndarray.imag": {
            "name": "imag",
            "location": 266,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "ndarray.__new__": {
            "name": "__new__",
            "location": 267,
            "return": [],
            "arguments": {
                "cls": [],
                "shape": [],
                "dtype": [],
                "buffer": [],
                "offset": [],
                "strides": [],
                "order": []
            }
        },
        "ndarray.dtype": {
            "name": "dtype",
            "location": 277,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ndarray.ctypes": {
            "name": "ctypes",
            "location": 279,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ndarray.shape": {
            "name": "shape",
            "location": 283,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "ndarray.flat": {
            "name": "flat",
            "location": 285,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ndarray.strides": {
            "name": "strides",
            "location": 289,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "ndarray.item": {
            "name": "item",
            "location": 294,
            "return": [],
            "arguments": {
                "self": [],
                "args": []
            }
        },
        "ndarray.tolist": {
            "name": "tolist",
            "location": 295,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ndarray.itemset": {
            "name": "itemset",
            "location": 299,
            "return": [],
            "arguments": {
                "self": [],
                "__item": [],
                "__value": []
            }
        },
        "ndarray.tostring": {
            "name": "tostring",
            "location": 300,
            "return": [],
            "arguments": {
                "self": [],
                "order": []
            }
        },
        "ndarray.tobytes": {
            "name": "tobytes",
            "location": 301,
            "return": [],
            "arguments": {
                "self": [],
                "order": []
            }
        },
        "ndarray.tofile": {
            "name": "tofile",
            "location": 302,
            "return": [],
            "arguments": {
                "self": [],
                "fid": [],
                "sep": [],
                "format": []
            }
        },
        "ndarray.dump": {
            "name": "dump",
            "location": 305,
            "return": [],
            "arguments": {
                "self": [],
                "file": []
            }
        },
        "ndarray.dumps": {
            "name": "dumps",
            "location": 306,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ndarray.astype": {
            "name": "astype",
            "location": 307,
            "return": [],
            "arguments": {
                "self": [],
                "dtype": [],
                "order": [],
                "casting": [],
                "subok": [],
                "copy": []
            }
        },
        "ndarray.byteswap": {
            "name": "byteswap",
            "location": 315,
            "return": [],
            "arguments": {
                "self": [],
                "inplace": []
            }
        },
        "ndarray.copy": {
            "name": "copy",
            "location": 316,
            "return": [],
            "arguments": {
                "self": [],
                "order": []
            }
        },
        "ndarray.view": {
            "name": "view",
            "location": 322,
            "return": [],
            "arguments": {
                "self": [],
                "dtype": [],
                "type": []
            }
        },
        "ndarray.getfield": {
            "name": "getfield",
            "location": 325,
            "return": [],
            "arguments": {
                "self": [],
                "dtype": [],
                "offset": []
            }
        },
        "ndarray.setflags": {
            "name": "setflags",
            "location": 328,
            "return": [],
            "arguments": {
                "self": [],
                "write": [],
                "align": [],
                "uic": []
            }
        },
        "ndarray.fill": {
            "name": "fill",
            "location": 331,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "ndarray.reshape": {
            "name": "reshape",
            "location": 338,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ndarray.resize": {
            "name": "resize",
            "location": 342,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ndarray.transpose": {
            "name": "transpose",
            "location": 346,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ndarray.swapaxes": {
            "name": "swapaxes",
            "location": 347,
            "return": [],
            "arguments": {
                "self": [],
                "axis1": [],
                "axis2": []
            }
        },
        "ndarray.flatten": {
            "name": "flatten",
            "location": 348,
            "return": [],
            "arguments": {
                "self": [],
                "order": []
            }
        },
        "ndarray.ravel": {
            "name": "ravel",
            "location": 349,
            "return": [],
            "arguments": {
                "self": [],
                "order": []
            }
        },
        "ndarray.squeeze": {
            "name": "squeeze",
            "location": 350,
            "return": [],
            "arguments": {
                "self": [],
                "axis": []
            }
        },
        "ndarray.__len__": {
            "name": "__len__",
            "location": 356,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ndarray.__getitem__": {
            "name": "__getitem__",
            "location": 357,
            "return": [],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "ndarray.__setitem__": {
            "name": "__setitem__",
            "location": 358,
            "return": [],
            "arguments": {
                "self": [],
                "key": [],
                "value": []
            }
        },
        "ndarray.__iter__": {
            "name": "__iter__",
            "location": 359,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ndarray.__contains__": {
            "name": "__contains__",
            "location": 360,
            "return": [],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "ndarray.__index__": {
            "name": "__index__",
            "location": 361,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "generic.__init__": {
            "name": "__init__",
            "location": 373,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "generic.base": {
            "name": "base",
            "location": 375,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_real_generic.real": {
            "name": "real",
            "location": 379,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_real_generic.imag": {
            "name": "imag",
            "location": 381,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "bool_.__init__": {
            "name": "__init__",
            "location": 386,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "object_.__init__": {
            "name": "__init__",
            "location": 389,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "datetime64.__init__": {
            "name": "__init__",
            "location": 397,
            "return": [],
            "arguments": {
                "self": [],
                "_data": [],
                "_format": []
            }
        },
        "datetime64.__add__": {
            "name": "__add__",
            "location": 398,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "datetime64.__sub__": {
            "name": "__sub__",
            "location": 399,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "int8.__init__": {
            "name": "__init__",
            "location": 405,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "int16.__init__": {
            "name": "__init__",
            "location": 408,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "int32.__init__": {
            "name": "__init__",
            "location": 411,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "int64.__init__": {
            "name": "__init__",
            "location": 414,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "timedelta64.__init__": {
            "name": "__init__",
            "location": 417,
            "return": [],
            "arguments": {
                "self": [],
                "_data": [],
                "_format": []
            }
        },
        "timedelta64.__add__": {
            "name": "__add__",
            "location": 421,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "timedelta64.__sub__": {
            "name": "__sub__",
            "location": 422,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "timedelta64.__truediv__": {
            "name": "__truediv__",
            "location": 431,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "timedelta64.__mod__": {
            "name": "__mod__",
            "location": 432,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "uint8.__init__": {
            "name": "__init__",
            "location": 437,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "uint16.__init__": {
            "name": "__init__",
            "location": 440,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "uint32.__init__": {
            "name": "__init__",
            "location": 443,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "uint64.__init__": {
            "name": "__init__",
            "location": 446,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "float16.__init__": {
            "name": "__init__",
            "location": 452,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "float32.__init__": {
            "name": "__init__",
            "location": 455,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "float64.__init__": {
            "name": "__init__",
            "location": 458,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "complex64.__init__": {
            "name": "__init__",
            "location": 463,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "complex64.real": {
            "name": "real",
            "location": 467,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "complex64.imag": {
            "name": "imag",
            "location": 469,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "complex128.__init__": {
            "name": "__init__",
            "location": 472,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "complex128.real": {
            "name": "real",
            "location": 476,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "complex128.imag": {
            "name": "imag",
            "location": 478,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "void.__init__": {
            "name": "__init__",
            "location": 483,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "bytes_.__init__": {
            "name": "__init__",
            "location": 491,
            "return": [],
            "arguments": {
                "self": [],
                "value": [],
                "encoding": [],
                "errors": []
            }
        },
        "str_.__init__": {
            "name": "__init__",
            "location": 499,
            "return": [],
            "arguments": {
                "self": [],
                "value": [],
                "encoding": [],
                "errors": []
            }
        },
        "ufunc.__name__": {
            "name": "__name__",
            "location": 668,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ufunc.__call__": {
            "name": "__call__",
            "location": 669,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ufunc.nin": {
            "name": "nin",
            "location": 695,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ufunc.nout": {
            "name": "nout",
            "location": 697,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ufunc.nargs": {
            "name": "nargs",
            "location": 699,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ufunc.ntypes": {
            "name": "ntypes",
            "location": 701,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ufunc.types": {
            "name": "types",
            "location": 703,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ufunc.identity": {
            "name": "identity",
            "location": 715,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ufunc.signature": {
            "name": "signature",
            "location": 718,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ufunc.reduce": {
            "name": "reduce",
            "location": 724,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ufunc.accumulate": {
            "name": "accumulate",
            "location": 726,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ufunc.reduceat": {
            "name": "reduceat",
            "location": 728,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ufunc.outer": {
            "name": "outer",
            "location": 730,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ufunc.at": {
            "name": "at",
            "location": 734,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AxisError.__init__": {
            "name": "__init__",
            "location": 833,
            "return": [],
            "arguments": {
                "self": [],
                "axis": [],
                "ndim": [],
                "msg_prefix": []
            }
        },
        "_ArrayOrScalarCommon.__oct__": {
            "name": "__oct__",
            "location": 186,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_ArrayOrScalarCommon.__hex__": {
            "name": "__hex__",
            "location": 187,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_ArrayOrScalarCommon.__nonzero__": {
            "name": "__nonzero__",
            "location": 188,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_ArrayOrScalarCommon.__unicode__": {
            "name": "__unicode__",
            "location": 189,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_ArrayOrScalarCommon.__bool__": {
            "name": "__bool__",
            "location": 191,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_ArrayOrScalarCommon.__bytes__": {
            "name": "__bytes__",
            "location": 192,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_ArrayOrScalarCommon.__div__": {
            "name": "__div__",
            "location": 213,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "_ArrayOrScalarCommon.__rdiv__": {
            "name": "__rdiv__",
            "location": 214,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "_ArrayOrScalarCommon.__idiv__": {
            "name": "__idiv__",
            "location": 215,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "_ArrayOrScalarCommon.__matmul__": {
            "name": "__matmul__",
            "location": 247,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "_ArrayOrScalarCommon.__rmatmul__": {
            "name": "__rmatmul__",
            "location": 248,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "timedelta64.__div__": {
            "name": "__div__",
            "location": 427,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        }
    },
    "numpy-stubs-master/numpy-stubs/core/_internal.py": {
        "_ctypes.data": {
            "name": "data",
            "location": 7,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_ctypes.shape": {
            "name": "shape",
            "location": 9,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_ctypes.strides": {
            "name": "strides",
            "location": 11,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_ctypes.data_as": {
            "name": "data_as",
            "location": 12,
            "return": [],
            "arguments": {
                "self": [],
                "obj": []
            }
        },
        "_ctypes.shape_as": {
            "name": "shape_as",
            "location": 13,
            "return": [],
            "arguments": {
                "self": [],
                "obj": []
            }
        },
        "_ctypes.strides_as": {
            "name": "strides_as",
            "location": 14,
            "return": [],
            "arguments": {
                "self": [],
                "obj": []
            }
        },
        "_ctypes.get_data": {
            "name": "get_data",
            "location": 15,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_ctypes.get_shape": {
            "name": "get_shape",
            "location": 16,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_ctypes.get_strides": {
            "name": "get_strides",
            "location": 17,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_ctypes.get_as_parameter": {
            "name": "get_as_parameter",
            "location": 18,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "numpy-stubs-master/numpy-stubs/core/__init__.py": {},
    "numpy-stubs-master/scripts/find_ufuncs.py": {
        "main": {
            "name": "main",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "numpy-stubs-master/tests/test_stubs.py": {
        "get_test_cases": {
            "name": "get_test_cases",
            "location": 16,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "directory": [
                    "str",
                    "typing.Iterable[str]",
                    "bool",
                    "bytes",
                    "None"
                ]
            }
        },
        "test_success": {
            "name": "test_success",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "path": [
                    "str",
                    "typing.Sequence[str]",
                    "None"
                ]
            }
        },
        "test_fail": {
            "name": "test_fail",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "path": [
                    "str"
                ]
            }
        },
        "test_reveal": {
            "name": "test_reveal",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "path": [
                    "str"
                ]
            }
        },
        "test_code_runs": {
            "name": "test_code_runs",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {
                "path": [
                    "str"
                ]
            }
        }
    },
    "numpy-stubs-master/tests/fail/array_like.py": {},
    "numpy-stubs-master/tests/fail/fromnumeric.py": {},
    "numpy-stubs-master/tests/fail/ndarray.py": {},
    "numpy-stubs-master/tests/fail/numerictypes.py": {},
    "numpy-stubs-master/tests/fail/scalars.py": {
        "A.__float__": {
            "name": "__float__",
            "location": 43,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "numpy-stubs-master/tests/fail/simple.py": {},
    "numpy-stubs-master/tests/fail/ufuncs.py": {},
    "numpy-stubs-master/tests/fail/warnings_and_errors.py": {},
    "numpy-stubs-master/tests/pass/array_like.py": {
        "A.__array__": {
            "name": "__array__",
            "location": 26,
            "return": [],
            "arguments": {
                "self": [],
                "dtype": []
            }
        }
    },
    "numpy-stubs-master/tests/pass/fromnumeric.py": {},
    "numpy-stubs-master/tests/pass/ndarray_conversion.py": {},
    "numpy-stubs-master/tests/pass/ndarray_shape_manipulation.py": {},
    "numpy-stubs-master/tests/pass/numerictypes.py": {},
    "numpy-stubs-master/tests/pass/scalars.py": {
        "C.__complex__": {
            "name": "__complex__",
            "location": 6,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "B.__int__": {
            "name": "__int__",
            "location": 11,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "A.__float__": {
            "name": "__float__",
            "location": 16,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "numpy-stubs-master/tests/pass/simple.py": {
        "ndarray_func": {
            "name": "ndarray_func",
            "location": 11,
            "return": [
                "str",
                "bool",
                "typing.Sequence[]",
                "dict[str, typing.Any]"
            ],
            "arguments": {
                "x": [
                    "str",
                    "bool",
                    "typing.Sequence[]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "iterable_func": {
            "name": "iterable_func",
            "location": 70,
            "return": [
                "str",
                "bool",
                "typing.Sequence[]",
                "dict[str, typing.Any]"
            ],
            "arguments": {
                "x": [
                    "str",
                    "bool",
                    "typing.Sequence[]",
                    "dict[str, typing.Any]"
                ]
            }
        }
    },
    "numpy-stubs-master/tests/pass/simple_py3.py": {},
    "numpy-stubs-master/tests/pass/ufuncs.py": {},
    "numpy-stubs-master/tests/pass/warnings_and_errors.py": {},
    "numpy-stubs-master/tests/reveal/constants.py": {},
    "numpy-stubs-master/tests/reveal/fromnumeric.py": {},
    "numpy-stubs-master/tests/reveal/ndarray_conversion.py": {},
    "numpy-stubs-master/tests/reveal/ndarray_shape_manipulation.py": {},
    "numpy-stubs-master/tests/reveal/numerictypes.py": {},
    "numpy-stubs-master/tests/reveal/scalars.py": {},
    "numpy-stubs-master/tests/reveal/warnings_and_errors.py": {}
}
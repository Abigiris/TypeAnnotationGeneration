{
    "nycdb-k8-load-master/aws_schedule_tasks.py": {
        "create_input_str": {
            "name": "create_input_str",
            "location": 78,
            "return": [],
            "arguments": {
                "container_name": [
                    "str",
                    "bool"
                ],
                "dataset": [
                    "str",
                    "bool"
                ],
                "use_test_data": [
                    "str",
                    "bool"
                ]
            }
        },
        "delete_tasks": {
            "name": "delete_tasks",
            "location": 99,
            "return": [
                "None"
            ],
            "arguments": {
                "prefix": [
                    "list[int]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "create_task": {
            "name": "create_task",
            "location": 116,
            "return": [
                "None"
            ],
            "arguments": {
                "prefix": [
                    "str",
                    "float"
                ],
                "dataset": [
                    "list[dict[, ]]",
                    "dict[, ]",
                    "dict[str, typing.Any]",
                    "int"
                ],
                "use_test_data": [
                    "str",
                    "bool",
                    "dict[str, typing.Any]"
                ],
                "role_arn": [
                    "str",
                    "int",
                    "float",
                    "dict[, ]",
                    "None",
                    "list[str]",
                    "typing.AbstractSet"
                ],
                "cluster_arn": [
                    "str",
                    "int"
                ],
                "task_arn": [
                    "str",
                    "int"
                ],
                "container_name": [
                    "str",
                    "bool",
                    "dict[str, typing.Any]"
                ],
                "subnet": [
                    "str",
                    "int"
                ]
            }
        },
        "create_tasks": {
            "name": "create_tasks",
            "location": 174,
            "return": [
                "None"
            ],
            "arguments": {
                "prefix": [
                    "bool",
                    "str"
                ],
                "args": []
            }
        },
        "sanity_check": {
            "name": "sanity_check",
            "location": 223,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "main": {
            "name": "main",
            "location": 228,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "nycdb-k8-load-master/dbtool.py": {
        "get_tables_for_datasets": {
            "name": "get_tables_for_datasets",
            "location": 30,
            "return": [
                "list[int]"
            ],
            "arguments": {
                "names": [
                    "str"
                ]
            }
        },
        "validate_and_get_dataset_names": {
            "name": "validate_and_get_dataset_names",
            "location": 40,
            "return": [
                "list[]"
            ],
            "arguments": {
                "dsnames": []
            }
        },
        "get_rowcounts": {
            "name": "get_rowcounts",
            "location": 58,
            "return": [
                "typing.Generator[tuple[typing.Union[str,typing.Text]]]"
            ],
            "arguments": {
                "conn": [],
                "table_names": [
                    "list[str]",
                    "str"
                ],
                "schema": [
                    "typing.Text"
                ]
            }
        },
        "print_rowcounts": {
            "name": "print_rowcounts",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "conn": [
                    "str"
                ],
                "table_names": [
                    "str"
                ],
                "schema": [
                    "typing.Text"
                ]
            }
        },
        "show_rowcounts": {
            "name": "show_rowcounts",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "db_url": [
                    "str",
                    "bool"
                ],
                "dataset_names": [
                    "str",
                    "list[str]"
                ]
            }
        },
        "shell": {
            "name": "shell",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "db_url": [
                    "str",
                    "None"
                ]
            }
        },
        "list_lastmod": {
            "name": "list_lastmod",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "db_url": [
                    "str",
                    "None",
                    "dict[str, typing.Any]"
                ],
                "dataset_names": [
                    "list[str]"
                ]
            }
        },
        "reset_lastmod": {
            "name": "reset_lastmod",
            "location": 104,
            "return": [
                "None"
            ],
            "arguments": {
                "db_url": [
                    "str",
                    "bool"
                ],
                "dataset_names": [
                    "str",
                    "list[str]"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 116,
            "return": [
                "None"
            ],
            "arguments": {
                "argv": [
                    "typing.Callable[, ]",
                    "list[]",
                    "dict[str, typing.Any]",
                    "bool",
                    "str"
                ],
                "db_url": [
                    "str",
                    "dict[str, str]"
                ]
            }
        }
    },
    "nycdb-k8-load-master/k8s_build_jobs.py": {
        "get_env": {
            "name": "get_env",
            "location": 16,
            "return": [
                "dict[typing.Text, typing.Union[str,None]]"
            ],
            "arguments": {
                "name": [
                    "str",
                    "None"
                ]
            }
        },
        "slugify": {
            "name": "slugify",
            "location": 23,
            "return": [
                "str"
            ],
            "arguments": {
                "name": [
                    "str"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "jobs_dir": []
            }
        }
    },
    "nycdb-k8-load-master/load_dataset.py": {
        "create_temp_schema_name": {
            "name": "create_temp_schema_name",
            "location": 56,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "dataset": [
                    "str",
                    "list[str]",
                    "int"
                ]
            }
        },
        "get_temp_schema_prefix": {
            "name": "get_temp_schema_prefix",
            "location": 60,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "dataset": [
                    "bool",
                    "str",
                    "dict[, ]"
                ]
            }
        },
        "get_friendly_temp_schema_creation_time": {
            "name": "get_friendly_temp_schema_creation_time",
            "location": 64,
            "return": [],
            "arguments": {
                "name": [
                    "str"
                ]
            }
        },
        "get_temp_schemas": {
            "name": "get_temp_schemas",
            "location": 69,
            "return": [
                "list[]"
            ],
            "arguments": {
                "conn": [],
                "dataset": [
                    "str",
                    "int"
                ]
            }
        },
        "get_dataset_tables": {
            "name": "get_dataset_tables",
            "location": 79,
            "return": [
                "list[TableInfo]"
            ],
            "arguments": {}
        },
        "get_tables_for_dataset": {
            "name": "get_tables_for_dataset",
            "location": 91,
            "return": [
                "list[]"
            ],
            "arguments": {
                "dataset": [
                    "typing.Type"
                ]
            }
        },
        "get_urls_for_dataset": {
            "name": "get_urls_for_dataset",
            "location": 102,
            "return": [
                "list[]"
            ],
            "arguments": {
                "dataset": [
                    "str",
                    "bytes"
                ]
            }
        },
        "get_all_create_function_sql": {
            "name": "get_all_create_function_sql",
            "location": 108,
            "return": [
                "str"
            ],
            "arguments": {
                "root_dir": [],
                "sql_files": [
                    "list[str]",
                    "dict[str, str]"
                ]
            }
        },
        "get_all_create_function_sql_for_dataset": {
            "name": "get_all_create_function_sql_for_dataset",
            "location": 126,
            "return": [],
            "arguments": {
                "dataset": [
                    "str",
                    "None",
                    "tuple[str]"
                ]
            }
        },
        "run_sql_if_nonempty": {
            "name": "run_sql_if_nonempty",
            "location": 133,
            "return": [
                "None"
            ],
            "arguments": {
                "conn": [],
                "sql": [
                    "str",
                    "int",
                    "list[]"
                ],
                "initial_sql": [
                    "typing.Text"
                ]
            }
        },
        "collapse_whitespace": {
            "name": "collapse_whitespace",
            "location": 142,
            "return": [],
            "arguments": {
                "text": [
                    "str",
                    "int"
                ]
            }
        },
        "does_sql_create_functions": {
            "name": "does_sql_create_functions",
            "location": 146,
            "return": [
                "bool"
            ],
            "arguments": {
                "sql": [
                    "str",
                    "int",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "drop_tables_if_they_exist": {
            "name": "drop_tables_if_they_exist",
            "location": 150,
            "return": [
                "None"
            ],
            "arguments": {
                "conn": [],
                "tables": [
                    "str"
                ],
                "schema": [
                    "str"
                ]
            }
        },
        "save_and_reapply_permissions": {
            "name": "save_and_reapply_permissions",
            "location": 160,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "conn": [],
                "tables": [
                    "str"
                ],
                "schema": [
                    "str",
                    "None",
                    "typing.Callable[, ]"
                ]
            }
        },
        "ensure_schema_exists": {
            "name": "ensure_schema_exists",
            "location": 190,
            "return": [
                "None"
            ],
            "arguments": {
                "conn": [],
                "schema": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ]
            }
        },
        "create_and_enter_temporary_schema": {
            "name": "create_and_enter_temporary_schema",
            "location": 197,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "conn": [],
                "schema": [
                    "str",
                    "list[str]",
                    "int"
                ]
            }
        },
        "change_table_schemas": {
            "name": "change_table_schemas",
            "location": 225,
            "return": [
                "None"
            ],
            "arguments": {
                "conn": [],
                "tables": [
                    "str",
                    "list[]"
                ],
                "from_schema": [
                    "str"
                ],
                "to_schema": [
                    "str",
                    "list[dict[str, str]]",
                    "list[str]",
                    "bool",
                    "None"
                ]
            }
        },
        "sanity_check": {
            "name": "sanity_check",
            "location": 234,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "get_dbhash": {
            "name": "get_dbhash",
            "location": 238,
            "return": [
                "SqlDbHash"
            ],
            "arguments": {
                "conn": [
                    "bool",
                    "str",
                    "dict[, ]",
                    "bytes"
                ]
            }
        },
        "load_dataset": {
            "name": "load_dataset",
            "location": 243,
            "return": [
                "None"
            ],
            "arguments": {
                "dataset": [],
                "config": [
                    "Config"
                ],
                "force_check_urls": [
                    "bool"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 292,
            "return": [
                "None"
            ],
            "arguments": {
                "argv": []
            }
        },
        "Config.nycdb_args": {
            "name": "nycdb_args",
            "location": 33,
            "return": [
                "SimpleNamespace"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "nycdb-k8-load-master/wowutil.py": {
        "run_wow_sql": {
            "name": "run_wow_sql",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "conn": []
            }
        },
        "install_db_extensions": {
            "name": "install_db_extensions",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "conn": []
            }
        },
        "build": {
            "name": "build",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "db_url": [
                    "str",
                    "bool"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 97,
            "return": [
                "None"
            ],
            "arguments": {
                "argv": [
                    "typing.Callable[, ]",
                    "list[]",
                    "dict[str, typing.Any]",
                    "bool",
                    "str"
                ],
                "db_url": [
                    "str",
                    "int",
                    "None",
                    "list[dict[, ]]",
                    "typing.Sequence[str]",
                    "typing.Callable[, ]",
                    "dict[int, int]"
                ]
            }
        }
    },
    "nycdb-k8-load-master/lib/dbhash.py": {
        "AbstractDbHash.get": {
            "name": "get",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "typing.Iterable[str]"
                ]
            }
        },
        "AbstractDbHash.__setitem__": {
            "name": "__setitem__",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "bool"
                ],
                "value": [
                    "str",
                    "bool"
                ]
            }
        },
        "AbstractDbHash.__delitem__": {
            "name": "__delitem__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "float",
                    "int"
                ]
            }
        },
        "AbstractDbHash.__getitem__": {
            "name": "__getitem__",
            "location": 19,
            "return": [
                "dict[str, str]",
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str"
                ]
            }
        },
        "AbstractDbHash.__contains__": {
            "name": "__contains__",
            "location": 25,
            "return": [],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "list[]"
                ]
            }
        },
        "AbstractDbHash.set_or_delete": {
            "name": "set_or_delete",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "bytes",
                    "None"
                ],
                "value": [
                    "str",
                    "None"
                ]
            }
        },
        "DictDbHash.__init__": {
            "name": "__init__",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "d": [
                    "None",
                    "list[]",
                    "int",
                    "float",
                    "typing.Callable[list[], typing.Any]",
                    "str"
                ]
            }
        },
        "DictDbHash.get": {
            "name": "get",
            "location": 41,
            "return": [],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "int",
                    "bytes"
                ]
            }
        },
        "DictDbHash.__setitem__": {
            "name": "__setitem__",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "bytes",
                    "None",
                    "int"
                ],
                "value": [
                    "str",
                    "bytes",
                    "None",
                    "int"
                ]
            }
        },
        "DictDbHash.__delitem__": {
            "name": "__delitem__",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "bytes"
                ]
            }
        },
        "SqlDbHash.__init__": {
            "name": "__init__",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "conn": [
                    "dict[, ]",
                    "dict[str, typing.Any]",
                    "bool"
                ],
                "table": [
                    "str",
                    "list[]",
                    "None",
                    "dict[str, tuple[typing.Union[str,str]]]",
                    "typing.Callable[, ]"
                ],
                "autocommit": [
                    "bool"
                ]
            }
        },
        "SqlDbHash._init_db": {
            "name": "_init_db",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SqlDbHash._exec_sql": {
            "name": "_exec_sql",
            "location": 74,
            "return": [],
            "arguments": {
                "self": [],
                "sql": [
                    "str",
                    "float",
                    "tuple[typing.Union[str,str]]"
                ],
                "params": [
                    "tuple[]"
                ]
            }
        },
        "SqlDbHash.__setitem__": {
            "name": "__setitem__",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "int",
                    "None"
                ],
                "value": [
                    "str"
                ]
            }
        },
        "SqlDbHash.__delitem__": {
            "name": "__delitem__",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "bytes"
                ]
            }
        },
        "SqlDbHash.get": {
            "name": "get",
            "location": 98,
            "return": [
                "None",
                "str"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str"
                ]
            }
        }
    },
    "nycdb-k8-load-master/lib/db_perms.py": {
        "exec_grant_sql": {
            "name": "exec_grant_sql",
            "location": 1,
            "return": [
                "None"
            ],
            "arguments": {
                "conn": [],
                "sql": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ]
            }
        },
        "ensure_table_exists": {
            "name": "ensure_table_exists",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "conn": [],
                "table_name": [
                    "str",
                    "typing.Iterable[str]"
                ],
                "schema": [
                    "str",
                    "typing.Iterable[str]"
                ]
            }
        },
        "get_grant_sql": {
            "name": "get_grant_sql",
            "location": 22,
            "return": [
                "str"
            ],
            "arguments": {
                "conn": [],
                "table_name": [
                    "str",
                    "None"
                ],
                "schema": [
                    "typing.Text"
                ]
            }
        },
        "get_current_database": {
            "name": "get_current_database",
            "location": 53,
            "return": [],
            "arguments": {
                "conn": []
            }
        },
        "create_readonly_user": {
            "name": "create_readonly_user",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "conn": [],
                "user": [
                    "str"
                ],
                "password": [
                    "str"
                ]
            }
        }
    },
    "nycdb-k8-load-master/lib/lastmod.py": {
        "LastmodInfo.read_from_dbhash": {
            "name": "read_from_dbhash",
            "location": 13,
            "return": [
                "LastmodInfo"
            ],
            "arguments": {
                "url": [
                    "str",
                    "dict[, ]"
                ],
                "dbhash": [
                    "dict[, ]"
                ]
            }
        },
        "LastmodInfo.write_to_dbhash": {
            "name": "write_to_dbhash",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dbhash": [
                    "str",
                    "dict[, ]",
                    "typing.Mapping",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "LastmodInfo.from_response_headers": {
            "name": "from_response_headers",
            "location": 25,
            "return": [
                "LastmodInfo"
            ],
            "arguments": {
                "url": [
                    "str",
                    "typing.Mapping",
                    "dict[, ]",
                    "None"
                ],
                "headers": [
                    "dict[, ]"
                ]
            }
        },
        "LastmodInfo.to_request_headers": {
            "name": "to_request_headers",
            "location": 32,
            "return": [
                "dict[typing.Text, ]"
            ],
            "arguments": {
                "self": []
            }
        },
        "UrlModTracker.__init__": {
            "name": "__init__",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "urls": [
                    "str",
                    "bool",
                    "bytes"
                ],
                "dbhash": [
                    "str",
                    "bool",
                    "bytes"
                ]
            }
        },
        "UrlModTracker.did_any_urls_change": {
            "name": "did_any_urls_change",
            "location": 49,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "UrlModTracker.update_lastmods": {
            "name": "update_lastmods",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "nycdb-k8-load-master/lib/parse_created_tables.py": {
        "parse_created_tables": {
            "name": "parse_created_tables",
            "location": 12,
            "return": [
                "list[str]"
            ],
            "arguments": {
                "sql": [
                    "str",
                    "typing.Callable[None, None]",
                    "None",
                    "list[str]"
                ]
            }
        },
        "_parse_sql_file": {
            "name": "_parse_sql_file",
            "location": 31,
            "return": [],
            "arguments": {
                "path": []
            }
        },
        "parse_nycdb_created_tables": {
            "name": "parse_nycdb_created_tables",
            "location": 35,
            "return": [],
            "arguments": {
                "filenames": [
                    "list[str]",
                    "str",
                    "int"
                ]
            }
        },
        "parse_created_tables_in_dir": {
            "name": "parse_created_tables_in_dir",
            "location": 39,
            "return": [
                "list[]"
            ],
            "arguments": {
                "root_dir": [
                    "bool"
                ],
                "filenames": [
                    "list[str]",
                    "list[pathlib.Path]"
                ]
            }
        }
    },
    "nycdb-k8-load-master/lib/slack.py": {
        "post_to_webhook": {
            "name": "post_to_webhook",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "payload": [
                    "dict[str, typing.Any]",
                    "dict[, ]",
                    "str"
                ]
            }
        },
        "escape": {
            "name": "escape",
            "location": 24,
            "return": [],
            "arguments": {
                "text": [
                    "str",
                    "int"
                ]
            }
        },
        "send_payload": {
            "name": "send_payload",
            "location": 39,
            "return": [
                "bool"
            ],
            "arguments": {
                "payload": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ]
            }
        },
        "sendmsg": {
            "name": "sendmsg",
            "location": 64,
            "return": [],
            "arguments": {
                "text": [
                    "str",
                    "int"
                ],
                "is_safe": [
                    "bool"
                ]
            }
        },
        "hyperlink": {
            "name": "hyperlink",
            "location": 79,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "href": [
                    "str"
                ],
                "text": [
                    "str"
                ]
            }
        }
    },
    "nycdb-k8-load-master/lib/__init__.py": {},
    "nycdb-k8-load-master/tests/conftest.py": {
        "exec_outside_of_transaction": {
            "name": "exec_outside_of_transaction",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "sql": [
                    "str",
                    "int",
                    "float"
                ]
            }
        },
        "drop_db": {
            "name": "drop_db",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "dbname": [
                    "str"
                ]
            }
        },
        "create_db": {
            "name": "create_db",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "dbname": [
                    "str"
                ]
            }
        },
        "db": {
            "name": "db",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "conn": {
            "name": "conn",
            "location": 80,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "db": [
                    "bool"
                ]
            }
        },
        "make_conn": {
            "name": "make_conn",
            "location": 85,
            "return": [],
            "arguments": {}
        },
        "slack_outbox": {
            "name": "slack_outbox",
            "location": 90,
            "return": [
                "typing.Generator[list[]]"
            ],
            "arguments": {}
        },
        "test_db_env": {
            "name": "test_db_env",
            "location": 99,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "db": [
                    "bool"
                ]
            }
        }
    },
    "nycdb-k8-load-master/tests/test_aws_schedule_tasks.py": {
        "test_sanity_check_works": {
            "name": "test_sanity_check_works",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_create_input_str_works": {
            "name": "test_create_input_str_works",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "nycdb-k8-load-master/tests/test_dbhash.py": {
        "_test_dbhash_implementation": {
            "name": "_test_dbhash_implementation",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {
                "dbh": []
            }
        },
        "test_sqlite_sqldbhash": {
            "name": "test_sqlite_sqldbhash",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_dictdbhash_impl": {
            "name": "test_dictdbhash_impl",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_dictdbhash_defaults_to_empty_dict": {
            "name": "test_dictdbhash_defaults_to_empty_dict",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_postgres_sqldbhash": {
            "name": "test_postgres_sqldbhash",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "conn": [
                    "str"
                ]
            }
        }
    },
    "nycdb-k8-load-master/tests/test_dbtool.py": {
        "test_get_tables_for_datasets_works": {
            "name": "test_get_tables_for_datasets_works",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_validate_and_get_dataset_names_works": {
            "name": "test_validate_and_get_dataset_names_works",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_validate_and_get_dataset_names_raises_error": {
            "name": "test_validate_and_get_dataset_names_raises_error",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_shell_works": {
            "name": "test_shell_works",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_rowcounts_works": {
            "name": "test_rowcounts_works",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "test_db_env": [
                    "str"
                ],
                "capsys": []
            }
        },
        "load_dbhash": {
            "name": "load_dbhash",
            "location": 52,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {}
        },
        "test_list_lastmod_works": {
            "name": "test_list_lastmod_works",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "db": [
                    "bool"
                ],
                "capsys": [
                    "bool"
                ]
            }
        },
        "test_reset_lastmod_works": {
            "name": "test_reset_lastmod_works",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "db": [
                    "bool"
                ],
                "capsys": [
                    "bool"
                ]
            }
        },
        "test_list_lastmod_works.list_lastmod": {
            "name": "list_lastmod",
            "location": 59,
            "return": [],
            "arguments": {}
        }
    },
    "nycdb-k8-load-master/tests/test_db_perms.py": {
        "test_get_current_database_works": {
            "name": "test_get_current_database_works",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "conn": []
            }
        },
        "test_exec_grant_sql_does_nothing_if_sql_is_empty": {
            "name": "test_exec_grant_sql_does_nothing_if_sql_is_empty",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_get_grant_sql_raises_error_on_invalid_table": {
            "name": "test_get_grant_sql_raises_error_on_invalid_table",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "conn": [
                    "str"
                ]
            }
        },
        "test_get_grant_sql_works": {
            "name": "test_get_grant_sql_works",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "conn": []
            }
        }
    },
    "nycdb-k8-load-master/tests/test_k8s_build_jobs.py": {
        "test_build_jobs_works": {
            "name": "test_build_jobs_works",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "nycdb-k8-load-master/tests/test_lastmod.py": {
        "TestLastmodInfo.test_read_from_dbhash_works": {
            "name": "test_read_from_dbhash_works",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLastmodInfo.test_write_to_dbhash_works": {
            "name": "test_write_to_dbhash_works",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLastmodInfo.test_from_response_headers_works": {
            "name": "test_from_response_headers_works",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLastmodInfo.test_to_request_headers_works": {
            "name": "test_to_request_headers_works",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUrlModTracker.setup": {
            "name": "setup",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUrlModTracker.test_it_updates_lastmods": {
            "name": "test_it_updates_lastmods",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "requests_mock": []
            }
        },
        "TestUrlModTracker.test_it_reports_unchanged_urls": {
            "name": "test_it_reports_unchanged_urls",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "requests_mock": []
            }
        },
        "TestUrlModTracker.test_it_raises_on_bad_http_responses": {
            "name": "test_it_raises_on_bad_http_responses",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "requests_mock": []
            }
        }
    },
    "nycdb-k8-load-master/tests/test_load_dataset.py": {
        "test_get_dataset_tables_included_derived_tables": {
            "name": "test_get_dataset_tables_included_derived_tables",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "get_row_counts": {
            "name": "get_row_counts",
            "location": 25,
            "return": [],
            "arguments": {
                "conn": [
                    "dict[, ]",
                    "str",
                    "None",
                    "dict[str, set[str]]"
                ],
                "dataset": [
                    "str",
                    "list[str]",
                    "typing.Callable[, ]",
                    "None"
                ]
            }
        },
        "test_get_urls_for_dataset_works": {
            "name": "test_get_urls_for_dataset_works",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "run_dataset_specific_test_logic": {
            "name": "run_dataset_specific_test_logic",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "conn": [],
                "dataset": [
                    "bool",
                    "typing.AbstractSet",
                    "typing.Callable[, ]",
                    "list[str]",
                    "set[]"
                ]
            }
        },
        "test_load_dataset_works": {
            "name": "test_load_dataset_works",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "test_db_env": [
                    "str"
                ],
                "dataset": [
                    "str",
                    "list[str]"
                ]
            }
        },
        "test_load_dataset_fails_if_no_dataset_provided": {
            "name": "test_load_dataset_fails_if_no_dataset_provided",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "test_db_env": [
                    "str"
                ]
            }
        },
        "test_get_tables_for_dataset_raises_error_on_invalid_dataset": {
            "name": "test_get_tables_for_dataset_raises_error_on_invalid_dataset",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_temp_schema_naming_works": {
            "name": "test_temp_schema_naming_works",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_get_temp_schemas_works": {
            "name": "test_get_temp_schemas_works",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {
                "test_db_env": [
                    "str",
                    "bool"
                ],
                "conn": [
                    "bool",
                    "str"
                ]
            }
        },
        "test_exceptions_send_slack_msg": {
            "name": "test_exceptions_send_slack_msg",
            "location": 99,
            "return": [
                "None"
            ],
            "arguments": {
                "slack_outbox": [
                    "str"
                ]
            }
        },
        "test_unmodified_datasets_are_not_retrieved": {
            "name": "test_unmodified_datasets_are_not_retrieved",
            "location": 110,
            "return": [
                "None"
            ],
            "arguments": {
                "db": [],
                "requests_mock": [],
                "slack_outbox": []
            }
        },
        "test_does_sql_create_functions_works": {
            "name": "test_does_sql_create_functions_works",
            "location": 136,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_get_all_create_function_sql_for_dataset_conforms_to_expectations": {
            "name": "test_get_all_create_function_sql_for_dataset_conforms_to_expectations",
            "location": 145,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_get_all_create_function_sql_for_dataset_works": {
            "name": "test_get_all_create_function_sql_for_dataset_works",
            "location": 153,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "nycdb-k8-load-master/tests/test_mypy.py": {
        "test_mypy_works": {
            "name": "test_mypy_works",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "nycdb-k8-load-master/tests/test_parse_created_tables.py": {
        "test_it_returns_empty_list_when_no_tables_are_created": {
            "name": "test_it_returns_empty_list_when_no_tables_are_created",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_it_parses_create_table_statements": {
            "name": "test_it_parses_create_table_statements",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_it_parses_create_table_statements_2": {
            "name": "test_it_parses_create_table_statements_2",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_it_parses_nycdb_files": {
            "name": "test_it_parses_nycdb_files",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "nycdb-k8-load-master/tests/test_pyflakes.py": {
        "test_pyflakes_works": {
            "name": "test_pyflakes_works",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "nycdb-k8-load-master/tests/test_slack.py": {
        "test_sendmsg_returns_false_when_post_to_webhook_fails": {
            "name": "test_sendmsg_returns_false_when_post_to_webhook_fails",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {
                "requests_mock": [],
                "monkeypatch": [
                    "str",
                    "bytes"
                ]
            }
        },
        "test_sendmsg_returns_true_on_success": {
            "name": "test_sendmsg_returns_true_on_success",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "requests_mock": [],
                "monkeypatch": [
                    "str"
                ]
            }
        },
        "test_sendmsg_returns_false_when_settings_are_not_defined": {
            "name": "test_sendmsg_returns_false_when_settings_are_not_defined",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": [
                    "bool"
                ]
            }
        },
        "TestSendMsgPayload.test_text_is_escaped_by_default": {
            "name": "test_text_is_escaped_by_default",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSendMsgPayload.test_text_is_unescaped_if_specified": {
            "name": "test_text_is_unescaped_if_specified",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "nycdb-k8-load-master/tests/test_wowutil.py": {
        "load_dependee_datasets": {
            "name": "load_dependee_datasets",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "config": [
                    "dict[, ]",
                    "str",
                    "dict[str, typing.Any]",
                    "None",
                    "bool"
                ]
            }
        },
        "ensure_wow_works": {
            "name": "ensure_wow_works",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_it_works": {
            "name": "test_it_works",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "db": [
                    "bool"
                ],
                "slack_outbox": [
                    "bool"
                ]
            }
        }
    },
    "nycdb-k8-load-master/tests/__init__.py": {}
}
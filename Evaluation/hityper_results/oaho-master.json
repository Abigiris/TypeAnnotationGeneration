{
    "oaho-master/setup.py": {},
    "oaho-master/base/data_loader.py": {
        "DataLoader.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [],
                "mode": [
                    "int",
                    "str",
                    "dict[str, typing.Any]",
                    "dict[, ]"
                ]
            }
        },
        "DataLoader.input_fn": {
            "name": "input_fn",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataLoader._parse_example": {
            "name": "_parse_example",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "example": [
                    "int",
                    "str",
                    "typing.Iterable['Context']"
                ]
            }
        },
        "DataLoader.__len__": {
            "name": "__len__",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "oaho-master/base/model.py": {
        "BaseModel.__init__": {
            "name": "__init__",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": []
            }
        },
        "BaseModel.model": {
            "name": "model",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "features": [
                    "str",
                    "dict[str, tensorflow.Tensor]",
                    "bool",
                    "list[dict[, ]]"
                ],
                "labels": [
                    "str",
                    "dict[str, tensorflow.Tensor]",
                    "bool",
                    "list[dict[, ]]"
                ],
                "mode": [
                    "str",
                    "dict[str, tensorflow.Tensor]",
                    "bool",
                    "list[dict[, ]]"
                ]
            }
        },
        "BaseModel._create_model": {
            "name": "_create_model",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "bool",
                    "list[typing.Type]"
                ],
                "is_training": [
                    "bool",
                    "list[typing.Type]"
                ]
            }
        }
    },
    "oaho-master/base/trainer.py": {
        "BaseTrain.__init__": {
            "name": "__init__",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "int"
                ],
                "model": [
                    "dict[str, typing.Any]",
                    "typing.Mapping"
                ],
                "train": [
                    "dict[str, typing.Any]",
                    "typing.Mapping"
                ],
                "val": [
                    "dict[str, typing.Any]",
                    "typing.Mapping"
                ],
                "pred": [
                    "dict[str, typing.Any]",
                    "typing.Mapping"
                ]
            }
        },
        "BaseTrain.run": {
            "name": "run",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseTrain._export_model": {
            "name": "_export_model",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "estimator": [
                    "str",
                    "None",
                    "bool",
                    "dict[, ]"
                ],
                "save_location": [
                    "str",
                    "None",
                    "bool",
                    "dict[, ]"
                ]
            }
        },
        "BaseTrain._predict": {
            "name": "_predict",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "estimator": [
                    "int",
                    "str",
                    "typing.Iterable[C]"
                ],
                "pred_fn": [
                    "int",
                    "str",
                    "typing.Iterable[C]"
                ]
            }
        }
    },
    "oaho-master/base/__init__.py": {},
    "oaho-master/data_loader/data_loader.py": {
        "TFRecordDataLoader.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "dict[, ]"
                ],
                "mode": [
                    "dict[str, typing.Any]",
                    "str",
                    "None"
                ]
            }
        },
        "TFRecordDataLoader.input_fn": {
            "name": "input_fn",
            "location": 27,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TFRecordDataLoader._parse_example": {
            "name": "_parse_example",
            "location": 54,
            "return": [
                "tuple[dict[typing.Text, ]]"
            ],
            "arguments": {
                "self": [],
                "example": [
                    "typing.Sequence[int]",
                    "bytes"
                ]
            }
        },
        "TFRecordDataLoader._augment": {
            "name": "_augment",
            "location": 81,
            "return": [],
            "arguments": {
                "example": [
                    "int"
                ]
            }
        },
        "TFRecordDataLoader.__len__": {
            "name": "__len__",
            "location": 104,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "oaho-master/data_loader/oaho_loader.py": {
        "draw_grasp_images": {
            "name": "draw_grasp_images",
            "location": 9,
            "return": [],
            "arguments": {
                "grasps": [],
                "shape": []
            }
        },
        "TFRecordDataLoader.__init__": {
            "name": "__init__",
            "location": 27,
            "return": [],
            "arguments": {
                "self": [],
                "config": [],
                "mode": []
            }
        },
        "TFRecordDataLoader.input_fn": {
            "name": "input_fn",
            "location": 45,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TFRecordDataLoader._parse_example": {
            "name": "_parse_example",
            "location": 74,
            "return": [],
            "arguments": {
                "self": [],
                "example": []
            }
        },
        "TFRecordDataLoader.__len__": {
            "name": "__len__",
            "location": 163,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "oaho-master/data_loader/__init__.py": {},
    "oaho-master/initialisers/task.py": {
        "init": {
            "name": "init",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "oaho-master/initialisers/__init__.py": {},
    "oaho-master/metrics/oaho_evaluation.py": {
        "ExportSingleImageGroundtruth": {
            "name": "ExportSingleImageGroundtruth",
            "location": 254,
            "return": [],
            "arguments": {
                "image_id": [],
                "next_annotation_id": [],
                "groundtruth_grasps": []
            }
        },
        "ExportSingleImageDetectionBoxesToCoco": {
            "name": "ExportSingleImageDetectionBoxesToCoco",
            "location": 310,
            "return": [],
            "arguments": {
                "image_id": [],
                "detection_grasps": [],
                "detection_scores": []
            }
        },
        "OAHODetectionEvaluator.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "OAHODetectionEvaluator.clear": {
            "name": "clear",
            "location": 41,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "OAHODetectionEvaluator.add_single_ground_truth_image_info": {
            "name": "add_single_ground_truth_image_info",
            "location": 47,
            "return": [],
            "arguments": {
                "self": [],
                "image_id": [],
                "groundtruth_dict": []
            }
        },
        "OAHODetectionEvaluator.add_single_detected_image_info": {
            "name": "add_single_detected_image_info",
            "location": 76,
            "return": [],
            "arguments": {
                "self": [],
                "image_id": [],
                "detections_dict": []
            }
        },
        "OAHODetectionEvaluator.evaluate": {
            "name": "evaluate",
            "location": 116,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "OAHODetectionEvaluator.get_estimator_eval_metric_ops": {
            "name": "get_estimator_eval_metric_ops",
            "location": 195,
            "return": [],
            "arguments": {
                "self": [],
                "eval_dict": []
            }
        },
        "OAHODetectionEvaluator.get_estimator_eval_metric_ops.update_op": {
            "name": "update_op",
            "location": 222,
            "return": [],
            "arguments": {
                "image_id_batched": [],
                "groundtruth_grasps_batched": [],
                "detection_grasps_batched": []
            }
        },
        "OAHODetectionEvaluator.get_estimator_eval_metric_ops.first_value_func": {
            "name": "first_value_func",
            "location": 235,
            "return": [],
            "arguments": {}
        },
        "OAHODetectionEvaluator.get_estimator_eval_metric_ops.value_func_factory": {
            "name": "value_func_factory",
            "location": 240,
            "return": [],
            "arguments": {
                "metric_name": []
            }
        },
        "OAHODetectionEvaluator.get_estimator_eval_metric_ops.value_func_factory.value_func": {
            "name": "value_func",
            "location": 241,
            "return": [],
            "arguments": {}
        }
    },
    "oaho-master/models/oaho_model.py": {
        "gaussian_kernel": {
            "name": "gaussian_kernel",
            "location": 266,
            "return": [],
            "arguments": {
                "size": [
                    "int"
                ],
                "mean": [
                    "int",
                    "tuple[typing.Union[int,int]]",
                    "bytes",
                    "str"
                ],
                "std": [
                    "int",
                    "tuple[typing.Union[int,int]]",
                    "bytes",
                    "str"
                ]
            }
        },
        "OAHOModel.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "dict[, ]"
                ]
            }
        },
        "OAHOModel.model": {
            "name": "model",
            "location": 18,
            "return": [],
            "arguments": {
                "self": [],
                "features": [
                    "bytes"
                ],
                "labels": [
                    "str"
                ],
                "mode": [
                    "bytes",
                    "str",
                    "float",
                    "tuple[]",
                    "bool",
                    "None"
                ]
            }
        },
        "OAHOModel.encoder_block": {
            "name": "encoder_block",
            "location": 168,
            "return": [
                "int",
                "str",
                "float",
                "tuple[typing.Union[float,float]]"
            ],
            "arguments": {
                "input_tensor": [
                    "tuple[typing.Union[int,int]]",
                    "int"
                ],
                "feature_maps": [
                    "tuple[typing.Union[int,int]]",
                    "int"
                ],
                "kernel_size": [
                    "tuple[typing.Union[int,int]]",
                    "int"
                ],
                "strides": [
                    "tuple[typing.Union[int,int]]",
                    "int"
                ],
                "is_training": [
                    "bool",
                    "float"
                ]
            }
        },
        "OAHOModel._create_detection_head": {
            "name": "_create_detection_head",
            "location": 176,
            "return": [],
            "arguments": {
                "quality": [
                    "int",
                    "str",
                    "list[]"
                ],
                "angle": [
                    "int",
                    "str",
                    "float"
                ],
                "width": [
                    "int",
                    "str",
                    "float"
                ]
            }
        },
        "OAHOModel._create_model": {
            "name": "_create_model",
            "location": 206,
            "return": [
                "tuple[typing.Union[bytes,list[bytes]]]"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "int",
                    "typing.Iterable[T]",
                    "float"
                ],
                "is_training": [
                    "bool",
                    "tuple[typing.Union[int,...]]",
                    "None",
                    "str"
                ]
            }
        },
        "OAHOModel._create_model.decoder_block": {
            "name": "decoder_block",
            "location": 214,
            "return": [],
            "arguments": {
                "input_tensor": [],
                "feature_maps": [],
                "kernel_size": [],
                "strides": [],
                "is_training": [],
                "skip_connection": [
                    "None"
                ]
            }
        }
    },
    "oaho-master/models/oaho_model_deeplab.py": {
        "OAHOModelDeeplab.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "dict[, ]"
                ]
            }
        },
        "OAHOModelDeeplab._create_model": {
            "name": "_create_model",
            "location": 15,
            "return": [
                "tuple[typing.Union[bytes,list[bytes]]]"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "int",
                    "typing.Iterable[T]",
                    "float"
                ],
                "is_training": [
                    "bool",
                    "tuple[typing.Union[int,...]]",
                    "None",
                    "str"
                ]
            }
        },
        "OAHOModelDeeplab._create_model.decoder_block": {
            "name": "decoder_block",
            "location": 25,
            "return": [],
            "arguments": {
                "input_tensor": [],
                "feature_maps": [],
                "kernel_size": [],
                "strides": [],
                "is_training": [],
                "skip_connection": [
                    "None"
                ]
            }
        }
    },
    "oaho-master/models/oaho_model_factory.py": {
        "oaho_model_from_config": {
            "name": "oaho_model_from_config",
            "location": 10,
            "return": [
                "OAHOModel",
                "OAHOModelFCN",
                "OAHOModelDeeplab"
            ],
            "arguments": {
                "config": []
            }
        }
    },
    "oaho-master/models/oaho_model_fcn.py": {
        "OAHOModelFCN.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "dict[, ]"
                ]
            }
        },
        "OAHOModelFCN.encoder_block": {
            "name": "encoder_block",
            "location": 15,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "input_tensor": [
                    "tuple[typing.Union[int,int]]",
                    "int",
                    "float"
                ],
                "feature_maps": [
                    "tuple[typing.Union[int,int]]",
                    "int",
                    "float"
                ],
                "kernel_size": [
                    "tuple[typing.Union[int,int]]",
                    "int",
                    "float"
                ],
                "strides": [
                    "tuple[typing.Union[int,int]]",
                    "int",
                    "float"
                ]
            }
        },
        "OAHOModelFCN.decoder_block": {
            "name": "decoder_block",
            "location": 22,
            "return": [
                "str",
                "int",
                "float",
                "tuple[typing.Union[float,float]]"
            ],
            "arguments": {
                "input_tensor": [
                    "tuple[typing.Union[int,int]]",
                    "int",
                    "float"
                ],
                "feature_maps": [
                    "tuple[typing.Union[int,int]]",
                    "int",
                    "float"
                ],
                "kernel_size": [
                    "tuple[typing.Union[int,int]]",
                    "int",
                    "float"
                ],
                "strides": [
                    "tuple[typing.Union[int,int]]",
                    "int",
                    "float"
                ],
                "skip_connection": [
                    "None",
                    "int",
                    "dict[str, int]",
                    "typing.Callable[, ]"
                ]
            }
        },
        "OAHOModelFCN._create_model": {
            "name": "_create_model",
            "location": 30,
            "return": [
                "tuple[typing.Union[bytes,int,list[bytes]]]"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "int"
                ],
                "is_training": [
                    "bool",
                    "list[typing.Type]"
                ]
            }
        }
    },
    "oaho-master/models/__init__.py": {},
    "oaho-master/trainers/example_train.py": {
        "ExampleTrainer.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "dict[, ]"
                ],
                "model": [
                    "dict[, ]"
                ],
                "train": [
                    "dict[, ]"
                ],
                "val": [
                    "dict[, ]"
                ],
                "pred": [
                    "dict[, ]"
                ]
            }
        },
        "ExampleTrainer.run": {
            "name": "run",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ExampleTrainer._export_model": {
            "name": "_export_model",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "estimator": [],
                "save_location": [
                    "str",
                    "bool",
                    "None",
                    "list[tuple[typing.Union[int,int]]]",
                    "list[]"
                ]
            }
        },
        "ExampleTrainer._predict": {
            "name": "_predict",
            "location": 87,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": [],
                "estimator": [],
                "pred_fn": [
                    "typing.Callable[, ]",
                    "int",
                    "str"
                ]
            }
        }
    },
    "oaho-master/trainers/oaho_train.py": {
        "OAHOTrainer.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "dict[, ]"
                ],
                "model": [
                    "dict[, ]"
                ],
                "train": [
                    "dict[, ]"
                ],
                "val": [
                    "dict[, ]"
                ],
                "pred": [
                    "dict[, ]"
                ]
            }
        },
        "OAHOTrainer.run": {
            "name": "run",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "OAHOTrainer._export_model": {
            "name": "_export_model",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "estimator": [],
                "save_location": [
                    "str",
                    "bool",
                    "None",
                    "list[tuple[typing.Union[int,int]]]",
                    "list[]"
                ]
            }
        },
        "OAHOTrainer._predict": {
            "name": "_predict",
            "location": 101,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": [],
                "estimator": [],
                "pred_fn": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ]
            }
        }
    },
    "oaho-master/trainers/train.py": {
        "RawTrainer.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "dict[, ]"
                ],
                "model": [
                    "dict[, ]"
                ],
                "train": [
                    "dict[, ]"
                ],
                "val": [
                    "dict[, ]"
                ],
                "pred": [
                    "dict[, ]"
                ]
            }
        },
        "RawTrainer.run": {
            "name": "run",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RawTrainer._export_model": {
            "name": "_export_model",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "estimator": [],
                "save_location": [
                    "str",
                    "bool",
                    "None",
                    "list[tuple[typing.Union[int,int]]]",
                    "list[]"
                ]
            }
        },
        "RawTrainer._predict": {
            "name": "_predict",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "estimator": [
                    "int",
                    "str",
                    "typing.Iterable[C]"
                ],
                "pred_fn": [
                    "int",
                    "str",
                    "typing.Iterable[C]"
                ]
            }
        }
    },
    "oaho-master/trainers/__init__.py": {},
    "oaho-master/utils/grasp.py": {
        "_bb_text_to_no": {
            "name": "_bb_text_to_no",
            "location": 13,
            "return": [
                "list[int]"
            ],
            "arguments": {
                "l": [
                    "str"
                ],
                "offset": [
                    "tuple[int]"
                ]
            }
        },
        "detect_grasps": {
            "name": "detect_grasps",
            "location": 273,
            "return": [
                "list[Grasp]"
            ],
            "arguments": {
                "point_img": [
                    "int",
                    "float",
                    "str"
                ],
                "ang_img": [
                    "list[typing.Any]",
                    "bytes"
                ],
                "width_img": [
                    "None",
                    "str",
                    "bytes"
                ],
                "no_grasps": [
                    "int"
                ],
                "ang_threshold": [
                    "int"
                ]
            }
        },
        "BoundingBoxes.__init__": {
            "name": "__init__",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "bbs": [
                    "None",
                    "int",
                    "float"
                ]
            }
        },
        "BoundingBoxes.__getitem__": {
            "name": "__getitem__",
            "location": 29,
            "return": [],
            "arguments": {
                "self": [],
                "item": [
                    "list[str]"
                ]
            }
        },
        "BoundingBoxes.__iter__": {
            "name": "__iter__",
            "location": 32,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BoundingBoxes.__getattr__": {
            "name": "__getattr__",
            "location": 35,
            "return": [
                "typing.Callable[, ]"
            ],
            "arguments": {
                "self": [],
                "attr": [
                    "str"
                ]
            }
        },
        "BoundingBoxes.load_from_array": {
            "name": "load_from_array",
            "location": 43,
            "return": [],
            "arguments": {
                "cls": [
                    "list[int]",
                    "int",
                    "dict[, ]",
                    "str"
                ],
                "arr": [
                    "str"
                ]
            }
        },
        "BoundingBoxes.load_from_file": {
            "name": "load_from_file",
            "location": 54,
            "return": [],
            "arguments": {
                "cls": [
                    "str",
                    "bytes",
                    "typing.Type"
                ],
                "fname": [
                    "str",
                    "bytes"
                ]
            }
        },
        "BoundingBoxes.append": {
            "name": "append",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "bb": [
                    "int",
                    "str"
                ]
            }
        },
        "BoundingBoxes.copy": {
            "name": "copy",
            "location": 81,
            "return": [
                "BoundingBoxes"
            ],
            "arguments": {
                "self": []
            }
        },
        "BoundingBoxes.show": {
            "name": "show",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ax": [
                    "None",
                    "str",
                    "bool"
                ],
                "shape": [
                    "str"
                ]
            }
        },
        "BoundingBoxes.draw": {
            "name": "draw",
            "location": 98,
            "return": [
                "tuple[None]"
            ],
            "arguments": {
                "self": [],
                "shape": [
                    "int",
                    "tuple[typing.Union[int,int]]"
                ],
                "position": [
                    "bool"
                ],
                "angle": [
                    "bool"
                ],
                "width": [
                    "bool"
                ]
            }
        },
        "BoundingBoxes.to_array": {
            "name": "to_array",
            "location": 123,
            "return": [],
            "arguments": {
                "self": [],
                "pad_to": [
                    "int"
                ]
            }
        },
        "BoundingBoxes.center": {
            "name": "center",
            "location": 131,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BoundingBox.__init__": {
            "name": "__init__",
            "location": 140,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "points": [
                    "int",
                    "float"
                ]
            }
        },
        "BoundingBox.__str__": {
            "name": "__str__",
            "location": 143,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BoundingBox.angle": {
            "name": "angle",
            "location": 147,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "BoundingBox.as_grasp": {
            "name": "as_grasp",
            "location": 153,
            "return": [
                "Grasp"
            ],
            "arguments": {
                "self": []
            }
        },
        "BoundingBox.center": {
            "name": "center",
            "location": 157,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BoundingBox.length": {
            "name": "length",
            "location": 161,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BoundingBox.width": {
            "name": "width",
            "location": 167,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BoundingBox.polygon_coords": {
            "name": "polygon_coords",
            "location": 172,
            "return": [],
            "arguments": {
                "self": [],
                "shape": [
                    "None",
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ]
            }
        },
        "BoundingBox.compact_polygon_coords": {
            "name": "compact_polygon_coords",
            "location": 175,
            "return": [],
            "arguments": {
                "self": [],
                "shape": [
                    "None",
                    "float",
                    "int",
                    "str"
                ]
            }
        },
        "BoundingBox.iou": {
            "name": "iou",
            "location": 178,
            "return": [
                "int",
                "float"
            ],
            "arguments": {
                "self": [],
                "bb": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ],
                "angle_threshold": [
                    "int"
                ]
            }
        },
        "BoundingBox.copy": {
            "name": "copy",
            "location": 201,
            "return": [
                "BoundingBox"
            ],
            "arguments": {
                "self": []
            }
        },
        "BoundingBox.offset": {
            "name": "offset",
            "location": 204,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "offset": [
                    "float",
                    "list[float]"
                ]
            }
        },
        "BoundingBox.rotate": {
            "name": "rotate",
            "location": 207,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "angle": [
                    "float",
                    "int"
                ],
                "center": [
                    "float",
                    "list[float]"
                ]
            }
        },
        "BoundingBox.plot": {
            "name": "plot",
            "location": 217,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ax": [
                    "list[int]",
                    "str",
                    "float"
                ],
                "color": [
                    "None",
                    "list[int]",
                    "str",
                    "float"
                ]
            }
        },
        "BoundingBox.zoom": {
            "name": "zoom",
            "location": 221,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "factor": [
                    "float",
                    "int"
                ],
                "center": [
                    "float",
                    "list[float]"
                ]
            }
        },
        "Grasp.__init__": {
            "name": "__init__",
            "location": 236,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "center": [
                    "int",
                    "float",
                    "list[typing.Any]",
                    "None",
                    "bytes"
                ],
                "angle": [
                    "int",
                    "float",
                    "list[typing.Any]",
                    "None",
                    "bytes"
                ],
                "length": [
                    "int"
                ],
                "width": [
                    "int"
                ]
            }
        },
        "Grasp.as_bb": {
            "name": "as_bb",
            "location": 243,
            "return": [
                "BoundingBox"
            ],
            "arguments": {
                "self": []
            }
        },
        "Grasp.max_iou": {
            "name": "max_iou",
            "location": 261,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "bbs": [
                    "str"
                ]
            }
        },
        "Grasp.plot": {
            "name": "plot",
            "location": 269,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ax": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ],
                "color": [
                    "None",
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ]
            }
        }
    },
    "oaho-master/utils/make_tfrec.py": {
        "main": {
            "name": "main",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "_extract_data": {
            "name": "_extract_data",
            "location": 124,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "oaho-master/utils/oaho_visualization.py": {
        "save_image_array_as_png": {
            "name": "save_image_array_as_png",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "image": [
                    "str",
                    "tuple[typing.Union[int,int]]",
                    "tuple[]",
                    "float"
                ],
                "output_path": [
                    "str"
                ]
            }
        },
        "encode_image_array_as_png_str": {
            "name": "encode_image_array_as_png_str",
            "location": 52,
            "return": [],
            "arguments": {
                "image": [
                    "tuple[typing.Union[int,int]]",
                    "int"
                ]
            }
        },
        "draw_bounding_box_on_image_array": {
            "name": "draw_bounding_box_on_image_array",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "image": [
                    "bool",
                    "None",
                    "list[int]",
                    "list[float]",
                    "tuple[typing.Union[int,int]]"
                ],
                "center_x": [
                    "int",
                    "str"
                ],
                "center_y": [
                    "int",
                    "str"
                ],
                "angle": [
                    "int",
                    "str"
                ],
                "width": [
                    "int",
                    "str"
                ],
                "color": [
                    "typing.Text"
                ],
                "thickness": [
                    "int"
                ],
                "display_str_list": [
                    "tuple[]"
                ],
                "use_normalized_coordinates": [
                    "bool"
                ]
            }
        },
        "draw_bounding_box_on_image": {
            "name": "draw_bounding_box_on_image",
            "location": 104,
            "return": [
                "None"
            ],
            "arguments": {
                "image": [
                    "bool",
                    "tuple[typing.Union[int,int]]"
                ],
                "center_x": [
                    "bool"
                ],
                "center_y": [
                    "bool"
                ],
                "angle": [
                    "int",
                    "None",
                    "float",
                    "list[float]"
                ],
                "width": [
                    "int"
                ],
                "color": [
                    "typing.Text"
                ],
                "thickness": [
                    "int"
                ],
                "display_str_list": [
                    "tuple[]"
                ],
                "use_normalized_coordinates": [
                    "bool"
                ]
            }
        },
        "draw_bounding_boxes_on_image_array": {
            "name": "draw_bounding_boxes_on_image_array",
            "location": 186,
            "return": [
                "None"
            ],
            "arguments": {
                "image": [
                    "list[int]",
                    "list[float]",
                    "tuple[typing.Union[int,int]]",
                    "int"
                ],
                "boxes": [
                    "typing.Sequence[int]",
                    "None",
                    "str",
                    "bool"
                ],
                "color": [
                    "typing.Text"
                ],
                "thickness": [
                    "int"
                ],
                "display_str_list_list": [
                    "tuple[]"
                ]
            }
        },
        "draw_bounding_boxes_on_image": {
            "name": "draw_bounding_boxes_on_image",
            "location": 214,
            "return": [
                "None"
            ],
            "arguments": {
                "image": [
                    "bool"
                ],
                "boxes": [],
                "color": [
                    "typing.Text"
                ],
                "thickness": [
                    "int"
                ],
                "display_str_list_list": [
                    "tuple[]"
                ]
            }
        },
        "create_visualization_fn": {
            "name": "create_visualization_fn",
            "location": 249,
            "return": [],
            "arguments": {
                "include_segmentation": [
                    "bool"
                ]
            }
        },
        "_resize_original_image": {
            "name": "_resize_original_image",
            "location": 329,
            "return": [],
            "arguments": {
                "image": [
                    "typing.Callable[, ]",
                    "None",
                    "str",
                    "bytes"
                ],
                "image_shape": [
                    "bool",
                    "typing.Sequence[numpy.ndarray]"
                ]
            }
        },
        "draw_bounding_boxes_on_image_tensors": {
            "name": "draw_bounding_boxes_on_image_tensors",
            "location": 351,
            "return": [],
            "arguments": {
                "images": [
                    "str"
                ],
                "boxes": [
                    "bool",
                    "typing.Callable[, ]"
                ],
                "segmentation": [
                    "None",
                    "bool",
                    "typing.Callable[, ]"
                ],
                "max_boxes_to_draw": [
                    "int"
                ],
                "min_score_thresh": [
                    "float"
                ]
            }
        },
        "draw_side_by_side_evaluation_image": {
            "name": "draw_side_by_side_evaluation_image",
            "location": 419,
            "return": [
                "list[]"
            ],
            "arguments": {
                "eval_dict": [],
                "max_boxes_to_draw": [
                    "int"
                ],
                "min_score_thresh": [
                    "float"
                ],
                "use_normalized_coordinates": [
                    "bool"
                ]
            }
        },
        "draw_mask_on_image_array": {
            "name": "draw_mask_on_image_array",
            "location": 485,
            "return": [
                "None"
            ],
            "arguments": {
                "image": [
                    "int"
                ],
                "mask": [
                    "str",
                    "float",
                    "bytes"
                ],
                "color": [
                    "typing.Text"
                ],
                "alpha": [
                    "float"
                ]
            }
        },
        "draw_segmentation_on_image_array": {
            "name": "draw_segmentation_on_image_array",
            "location": 517,
            "return": [
                "None"
            ],
            "arguments": {
                "image": [],
                "segmentation": [
                    "int"
                ],
                "alpha": [
                    "float"
                ]
            }
        },
        "visualize_boxes_and_labels_on_image_array": {
            "name": "visualize_boxes_and_labels_on_image_array",
            "location": 548,
            "return": [
                "bool",
                "list[int]"
            ],
            "arguments": {
                "image": [
                    "bool",
                    "list[int]"
                ],
                "boxes": [
                    "int",
                    "None"
                ],
                "scores": [
                    "None",
                    "int",
                    "str"
                ],
                "segmentation": [
                    "None",
                    "int",
                    "list[int]"
                ],
                "instance_boundaries": [
                    "None",
                    "str",
                    "list[str]",
                    "dict[str, typing.Any]"
                ],
                "keypoints": [
                    "None",
                    "str",
                    "list[str]",
                    "dict[str, typing.Any]"
                ],
                "track_ids": [
                    "None",
                    "str",
                    "list[str]",
                    "dict[str, typing.Any]"
                ],
                "use_normalized_coordinates": [
                    "bool"
                ],
                "max_boxes_to_draw": [
                    "int"
                ],
                "min_score_thresh": [
                    "str"
                ],
                "agnostic_mode": [
                    "bool"
                ],
                "line_thickness": [
                    "int"
                ],
                "groundtruth_box_visualization_color": [
                    "typing.Text"
                ]
            }
        },
        "create_visualization_fn.visualization_py_func_fn": {
            "name": "visualization_py_func_fn",
            "location": 295,
            "return": [],
            "arguments": {}
        },
        "draw_bounding_boxes_on_image_tensors.draw_boxes": {
            "name": "draw_boxes",
            "location": 409,
            "return": [],
            "arguments": {
                "image_and_detections": []
            }
        },
        "EvalMetricOpsVisualization.__init__": {
            "name": "__init__",
            "location": 683,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "max_examples_to_draw": [
                    "int"
                ],
                "max_boxes_to_draw": [
                    "int"
                ],
                "min_score_thresh": [
                    "float"
                ],
                "use_normalized_coordinates": [
                    "bool"
                ],
                "summary_name_prefix": [
                    "typing.Text"
                ]
            }
        },
        "EvalMetricOpsVisualization.clear": {
            "name": "clear",
            "location": 708,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EvalMetricOpsVisualization.add_images": {
            "name": "add_images",
            "location": 711,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "images": [
                    "list[str]",
                    "list[]",
                    "str",
                    "list[tuple[typing.Union[bool,str]]]",
                    "None"
                ]
            }
        },
        "EvalMetricOpsVisualization.get_estimator_eval_metric_ops": {
            "name": "get_estimator_eval_metric_ops",
            "location": 721,
            "return": [
                "dict[, ]",
                "dict[, tuple[typing.Union[int,list[int],dict[, ],float,None,list[list[int]]]]]"
            ],
            "arguments": {
                "self": [],
                "eval_dict": [
                    "dict[, ]",
                    "int"
                ]
            }
        },
        "EvalMetricOpsVisualization.images_from_evaluation_dict": {
            "name": "images_from_evaluation_dict",
            "location": 795,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "eval_dict": [
                    "dict[, ]",
                    "int",
                    "str",
                    "dict[str, typing.Union[str,int]]",
                    "bytes",
                    "None"
                ]
            }
        },
        "OAHODetectionVisualizer.__init__": {
            "name": "__init__",
            "location": 813,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "max_examples_to_draw": [
                    "int"
                ],
                "max_boxes_to_draw": [
                    "int"
                ],
                "min_score_thresh": [
                    "float"
                ],
                "use_normalized_coordinates": [
                    "bool"
                ],
                "summary_name_prefix": [
                    "typing.Text"
                ]
            }
        },
        "OAHODetectionVisualizer.images_from_evaluation_dict": {
            "name": "images_from_evaluation_dict",
            "location": 826,
            "return": [],
            "arguments": {
                "self": [],
                "eval_dict": [
                    "list[typing.Callable[, ]]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "EvalMetricOpsVisualization.get_estimator_eval_metric_ops.get_images": {
            "name": "get_images",
            "location": 765,
            "return": [],
            "arguments": {}
        },
        "EvalMetricOpsVisualization.get_estimator_eval_metric_ops.image_summary_or_default_string": {
            "name": "image_summary_or_default_string",
            "location": 773,
            "return": [],
            "arguments": {
                "summary_name": [],
                "image": []
            }
        }
    },
    "oaho-master/utils/task_utils.py": {
        "process_config": {
            "name": "process_config",
            "location": 6,
            "return": [
                "dict[typing.Text, typing.Text]"
            ],
            "arguments": {}
        },
        "get_args": {
            "name": "get_args",
            "location": 16,
            "return": [],
            "arguments": {}
        }
    },
    "oaho-master/utils/test_architecture.py": {
        "get_example": {
            "name": "get_example",
            "location": 28,
            "return": [],
            "arguments": {
                "depth": [
                    "typing.Mapping"
                ],
                "width": [
                    "typing.Mapping"
                ],
                "height": [
                    "typing.Mapping"
                ],
                "grasps": [
                    "typing.Mapping"
                ]
            }
        },
        "fake_generator": {
            "name": "fake_generator",
            "location": 50,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {}
        },
        "parse_example": {
            "name": "parse_example",
            "location": 54,
            "return": [
                "tuple[dict[typing.Text, str]]"
            ],
            "arguments": {
                "example": [
                    "str",
                    "int",
                    "typing.IO"
                ]
            }
        },
        "update_op_fn": {
            "name": "update_op_fn",
            "location": 117,
            "return": [
                "None"
            ],
            "arguments": {
                "groundtruth_grasps_batched": [
                    "str",
                    "float",
                    "int",
                    "tuple[]",
                    "tuple[typing.Union[str,str,str]]"
                ],
                "detection_grasps_batched": [
                    "str",
                    "float",
                    "int",
                    "tuple[]",
                    "tuple[typing.Union[str,str,str]]"
                ]
            }
        },
        "gaussian_kernel": {
            "name": "gaussian_kernel",
            "location": 134,
            "return": [],
            "arguments": {
                "size": [
                    "int"
                ],
                "mean": [
                    "int",
                    "tuple[typing.Union[int,int]]",
                    "bytes",
                    "str"
                ],
                "std": [
                    "int",
                    "tuple[typing.Union[int,int]]",
                    "bytes",
                    "str"
                ]
            }
        },
        "plot_batch": {
            "name": "plot_batch",
            "location": 163,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "oaho-master/utils/test_playground.py": {
        "get_example": {
            "name": "get_example",
            "location": 9,
            "return": [],
            "arguments": {
                "depth": [
                    "typing.Mapping"
                ],
                "width": [
                    "typing.Mapping"
                ],
                "height": [
                    "typing.Mapping"
                ],
                "grasps": [
                    "typing.Mapping"
                ]
            }
        },
        "fake_generator": {
            "name": "fake_generator",
            "location": 31,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {}
        },
        "parse_example": {
            "name": "parse_example",
            "location": 35,
            "return": [
                "tuple[dict[typing.Text, str]]"
            ],
            "arguments": {
                "example": [
                    "str",
                    "int",
                    "typing.IO"
                ]
            }
        },
        "update_op_fn": {
            "name": "update_op_fn",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {
                "groundtruth_grasps_batched": [
                    "str",
                    "float",
                    "int",
                    "tuple[]",
                    "tuple[typing.Union[str,str,str]]"
                ],
                "detection_grasps_batched": [
                    "str",
                    "float",
                    "int",
                    "tuple[]",
                    "tuple[typing.Union[str,str,str]]"
                ]
            }
        },
        "gaussian_kernel": {
            "name": "gaussian_kernel",
            "location": 115,
            "return": [],
            "arguments": {
                "size": [
                    "int"
                ],
                "mean": [
                    "int",
                    "tuple[typing.Union[int,int]]",
                    "bytes",
                    "str"
                ],
                "std": [
                    "int",
                    "tuple[typing.Union[int,int]]",
                    "bytes",
                    "str"
                ]
            }
        }
    },
    "oaho-master/utils/__init__.py": {}
}
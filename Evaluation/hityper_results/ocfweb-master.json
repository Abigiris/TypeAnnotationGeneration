{
    "ocfweb-master/manage.py": {},
    "ocfweb-master/ocfweb/auth.py": {
        "login_required": {
            "name": "login_required",
            "location": 18,
            "return": [],
            "arguments": {
                "function": [
                    "typing.Callable[, ]",
                    "bool"
                ]
            }
        },
        "group_account_required": {
            "name": "group_account_required",
            "location": 29,
            "return": [],
            "arguments": {
                "function": [
                    "typing.Callable[, ]",
                    "str"
                ]
            }
        },
        "calnet_required": {
            "name": "calnet_required",
            "location": 48,
            "return": [],
            "arguments": {
                "fn": [
                    "int",
                    "str",
                    "typing.Iterable[C]"
                ]
            }
        },
        "login_required._decorator": {
            "name": "_decorator",
            "location": 19,
            "return": [
                "HttpResponseRedirect"
            ],
            "arguments": {
                "request": []
            }
        },
        "group_account_required._decorator": {
            "name": "_decorator",
            "location": 30,
            "return": [
                "HttpResponseRedirect"
            ],
            "arguments": {
                "request": []
            }
        },
        "calnet_required.wrapper": {
            "name": "wrapper",
            "location": 54,
            "return": [
                "HttpResponseRedirect"
            ],
            "arguments": {
                "request": []
            }
        }
    },
    "ocfweb-master/ocfweb/caching.py": {
        "cache_lookup": {
            "name": "cache_lookup",
            "location": 24,
            "return": [],
            "arguments": {
                "key": [
                    "str",
                    "bool"
                ]
            }
        },
        "cache_lookup_with_fallback": {
            "name": "cache_lookup_with_fallback",
            "location": 44,
            "return": [
                "typing.Generator[typing.Union[typing.Any,None,None]]",
                "dict[, ]",
                "None",
                "list[typing.Any]",
                "bool",
                "float",
                "str",
                "dict[str, str]"
            ],
            "arguments": {
                "key": [
                    "str",
                    "int",
                    "list[str]"
                ],
                "fallback": [
                    "str"
                ],
                "ttl": [
                    "None",
                    "str",
                    "int",
                    "typing.Hashable"
                ],
                "force_miss": [
                    "bool"
                ]
            }
        },
        "cache": {
            "name": "cache",
            "location": 80,
            "return": [],
            "arguments": {
                "ttl": [
                    "None",
                    "int",
                    "str",
                    "typing.Iterable[C]"
                ]
            }
        },
        "_make_key": {
            "name": "_make_key",
            "location": 116,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "key": [
                    "str",
                    "bytes",
                    "typing.Iterator"
                ]
            }
        },
        "_make_function_call_key": {
            "name": "_make_function_call_key",
            "location": 133,
            "return": [],
            "arguments": {
                "fn": [
                    "list[str]",
                    "bool",
                    "None",
                    "ValueError",
                    "dict[str, typing.Any]"
                ],
                "args": [],
                "kwargs": []
            }
        },
        "periodic": {
            "name": "periodic",
            "location": 237,
            "return": [],
            "arguments": {
                "period": [
                    "int",
                    "str",
                    "typing.Iterable[C]"
                ],
                "ttl": [
                    "None",
                    "int",
                    "str",
                    "typing.Iterable[C]"
                ]
            }
        },
        "cache.outer": {
            "name": "outer",
            "location": 105,
            "return": [],
            "arguments": {
                "fn": []
            }
        },
        "PeriodicFunction.__hash__": {
            "name": "__hash__",
            "location": 163,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "PeriodicFunction.__eq__": {
            "name": "__eq__",
            "location": 166,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "int",
                    "str",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "PeriodicFunction.__str__": {
            "name": "__str__",
            "location": 173,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "PeriodicFunction.function_call_key": {
            "name": "function_call_key",
            "location": 177,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PeriodicFunction.function_with_timestamp": {
            "name": "function_with_timestamp",
            "location": 181,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "PeriodicFunction.last_update": {
            "name": "last_update",
            "location": 191,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PeriodicFunction.seconds_since_last_update": {
            "name": "seconds_since_last_update",
            "location": 201,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PeriodicFunction.result": {
            "name": "result",
            "location": 210,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PeriodicFunction.update": {
            "name": "update",
            "location": 227,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "periodic.outer": {
            "name": "outer",
            "location": 274,
            "return": [],
            "arguments": {
                "fn": []
            }
        },
        "cache.outer.inner": {
            "name": "inner",
            "location": 106,
            "return": [],
            "arguments": {}
        }
    },
    "ocfweb-master/ocfweb/context_processors.py": {
        "get_base_css_classes": {
            "name": "get_base_css_classes",
            "location": 19,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "request": []
            }
        },
        "ocf_template_processor": {
            "name": "ocf_template_processor",
            "location": 29,
            "return": [
                "dict[typing.Text, typing.Union[str,bool]]"
            ],
            "arguments": {
                "request": []
            }
        }
    },
    "ocfweb-master/ocfweb/environment.py": {
        "ocfweb_version": {
            "name": "ocfweb_version",
            "location": 7,
            "return": [
                "typing.Text"
            ],
            "arguments": {}
        }
    },
    "ocfweb-master/ocfweb/settings.py": {
        "InvalidReferenceInTemplate.__mod__": {
            "name": "__mod__",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ref": [
                    "str"
                ]
            }
        }
    },
    "ocfweb-master/ocfweb/urls.py": {},
    "ocfweb-master/ocfweb/wsgi.py": {},
    "ocfweb-master/ocfweb/__init__.py": {},
    "ocfweb-master/ocfweb/about/lab.py": {
        "lab_open_source": {
            "name": "lab_open_source",
            "location": 6,
            "return": [],
            "arguments": {
                "request": [
                    "typing.Iterable[int]"
                ]
            }
        },
        "lab_vote": {
            "name": "lab_vote",
            "location": 16,
            "return": [],
            "arguments": {
                "request": [
                    "typing.Callable[, ]"
                ]
            }
        },
        "lab_survey": {
            "name": "lab_survey",
            "location": 26,
            "return": [],
            "arguments": {
                "request": [
                    "typing.Callable[, ]"
                ]
            }
        }
    },
    "ocfweb-master/ocfweb/about/staff.py": {
        "about_staff": {
            "name": "about_staff",
            "location": 6,
            "return": [],
            "arguments": {
                "request": [
                    "typing.Callable[, ]"
                ]
            }
        }
    },
    "ocfweb-master/ocfweb/about/__init__.py": {},
    "ocfweb-master/ocfweb/account/chpass.py": {
        "get_accounts_signatory_for": {
            "name": "get_accounts_signatory_for",
            "location": 30,
            "return": [],
            "arguments": {
                "calnet_uid": []
            }
        },
        "get_accounts_for": {
            "name": "get_accounts_for",
            "location": 48,
            "return": [],
            "arguments": {
                "calnet_uid": []
            }
        },
        "change_password": {
            "name": "change_password",
            "location": 59,
            "return": [],
            "arguments": {
                "request": []
            }
        },
        "get_accounts_signatory_for.flatten": {
            "name": "flatten",
            "location": 31,
            "return": [],
            "arguments": {
                "lst": []
            }
        },
        "ChpassForm.__init__": {
            "name": "__init__",
            "location": 132,
            "return": [],
            "arguments": {
                "self": [],
                "ocf_accounts": [],
                "calnet_uid": []
            }
        },
        "ChpassForm.clean_ocf_account": {
            "name": "clean_ocf_account",
            "location": 150,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ChpassForm.clean_confirm_password": {
            "name": "clean_confirm_password",
            "location": 170,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "ocfweb-master/ocfweb/account/commands.py": {
        "commands": {
            "name": "commands",
            "location": 13,
            "return": [],
            "arguments": {
                "request": [
                    "tuple[int]",
                    "dict[, ]"
                ]
            }
        }
    },
    "ocfweb-master/ocfweb/account/constants.py": {},
    "ocfweb-master/ocfweb/account/recommender.py": {
        "recommend": {
            "name": "recommend",
            "location": 10,
            "return": [],
            "arguments": {
                "real_name": [
                    "str"
                ],
                "n": [
                    "int"
                ]
            }
        }
    },
    "ocfweb-master/ocfweb/account/register.py": {
        "request_account": {
            "name": "request_account",
            "location": 39,
            "return": [],
            "arguments": {
                "request": []
            }
        },
        "recommend": {
            "name": "recommend",
            "location": 158,
            "return": [],
            "arguments": {
                "request": []
            }
        },
        "validate": {
            "name": "validate",
            "location": 171,
            "return": [],
            "arguments": {
                "request": []
            }
        },
        "wait_for_account": {
            "name": "wait_for_account",
            "location": 193,
            "return": [],
            "arguments": {
                "request": []
            }
        },
        "account_pending": {
            "name": "account_pending",
            "location": 224,
            "return": [],
            "arguments": {
                "request": []
            }
        },
        "account_created": {
            "name": "account_created",
            "location": 228,
            "return": [],
            "arguments": {
                "request": []
            }
        },
        "ApproveForm.__init__": {
            "name": "__init__",
            "location": 234,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ApproveForm.clean_verify_password": {
            "name": "clean_verify_password",
            "location": 287,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ApproveForm.clean_verify_contact_email": {
            "name": "clean_verify_contact_email",
            "location": 296,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ApproveForm.clean": {
            "name": "clean",
            "location": 306,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "ocfweb-master/ocfweb/account/urls.py": {},
    "ocfweb-master/ocfweb/account/vhost.py": {
        "available_domain": {
            "name": "available_domain",
            "location": 29,
            "return": [
                "bool"
            ],
            "arguments": {
                "domain": [
                    "str"
                ]
            }
        },
        "valid_domain_external": {
            "name": "valid_domain_external",
            "location": 35,
            "return": [
                "bool"
            ],
            "arguments": {
                "domain": [
                    "str",
                    "typing.Callable[A, None]",
                    "None"
                ]
            }
        },
        "request_vhost": {
            "name": "request_vhost",
            "location": 40,
            "return": [],
            "arguments": {
                "request": []
            }
        },
        "request_vhost_success": {
            "name": "request_vhost_success",
            "location": 164,
            "return": [],
            "arguments": {
                "request": [
                    "set[str]"
                ]
            }
        },
        "VirtualHostForm.__init__": {
            "name": "__init__",
            "location": 239,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "is_group": [
                    "bool"
                ]
            }
        },
        "VirtualHostForm.clean_requested_subdomain": {
            "name": "clean_requested_subdomain",
            "location": 274,
            "return": [
                "bytes",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "VirtualHostForm.clean_your_email": {
            "name": "clean_your_email",
            "location": 298,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "ocfweb-master/ocfweb/account/vhost_mail.py": {
        "vhost_mail": {
            "name": "vhost_mail",
            "location": 53,
            "return": [],
            "arguments": {
                "request": [
                    "typing.Callable[, ]"
                ]
            }
        },
        "vhost_mail_update": {
            "name": "vhost_mail_update",
            "location": 80,
            "return": [],
            "arguments": {
                "request": []
            }
        },
        "vhost_mail_csv_export": {
            "name": "vhost_mail_csv_export",
            "location": 151,
            "return": [
                "HttpResponse"
            ],
            "arguments": {
                "request": [],
                "domain": []
            }
        },
        "vhost_mail_csv_import": {
            "name": "vhost_mail_csv_import",
            "location": 175,
            "return": [],
            "arguments": {
                "request": [],
                "domain": [
                    "int"
                ]
            }
        },
        "_write_csv": {
            "name": "_write_csv",
            "location": 218,
            "return": [],
            "arguments": {
                "addresses": [
                    "str"
                ]
            }
        },
        "_parse_csv": {
            "name": "_parse_csv",
            "location": 232,
            "return": [
                "dict[, ]"
            ],
            "arguments": {
                "request": [],
                "domain": [
                    "int"
                ]
            }
        },
        "_parse_csv_forward_addrs": {
            "name": "_parse_csv_forward_addrs",
            "location": 266,
            "return": [
                "set[]"
            ],
            "arguments": {
                "string": [
                    "str"
                ]
            }
        },
        "_error": {
            "name": "_error",
            "location": 283,
            "return": [
                "None"
            ],
            "arguments": {
                "request": [],
                "msg": []
            }
        },
        "_redirect_back": {
            "name": "_redirect_back",
            "location": 288,
            "return": [],
            "arguments": {}
        },
        "_get_action": {
            "name": "_get_action",
            "location": 292,
            "return": [
                "str",
                "dict[str, typing.Any]",
                "dict[, ]",
                "None"
            ],
            "arguments": {
                "request": []
            }
        },
        "_parse_addr": {
            "name": "_parse_addr",
            "location": 302,
            "return": [
                "None",
                "tuple[typing.Optional[str]]"
            ],
            "arguments": {
                "addr": [
                    "str",
                    "bool"
                ],
                "allow_wildcard": [
                    "bool"
                ]
            }
        },
        "_get_addr": {
            "name": "_get_addr",
            "location": 321,
            "return": [
                "tuple[str]",
                "None"
            ],
            "arguments": {
                "request": [],
                "user": [
                    "str",
                    "bool"
                ],
                "field": [],
                "required": [
                    "bool"
                ]
            }
        },
        "_get_forward_to": {
            "name": "_get_forward_to",
            "location": 343,
            "return": [
                "None",
                "set[]"
            ],
            "arguments": {
                "request": []
            }
        },
        "_get_password": {
            "name": "_get_password",
            "location": 366,
            "return": [
                "REMOVE_PASSWORD"
            ],
            "arguments": {
                "request": [
                    "str"
                ],
                "addr_name": [
                    "str",
                    "None"
                ]
            }
        },
        "_get_vhost": {
            "name": "_get_vhost",
            "location": 385,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "user": [
                    "str",
                    "int",
                    "dict[str, dict[str, typing.Any]]"
                ],
                "domain": [
                    "str",
                    "int"
                ]
            }
        },
        "_find_addr": {
            "name": "_find_addr",
            "location": 392,
            "return": [],
            "arguments": {
                "c": [
                    "list[str]",
                    "str",
                    "list[tuple[typing.Union[str,str]]]",
                    "list[]"
                ],
                "vhost": [],
                "addr": [
                    "bool",
                    "list[str]",
                    "bytes",
                    "None"
                ]
            }
        },
        "_txn": {
            "name": "_txn",
            "location": 399,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {}
        }
    },
    "ocfweb-master/ocfweb/account/__init__.py": {},
    "ocfweb-master/ocfweb/account/templatetags/vhost_mail.py": {
        "address_to_parts": {
            "name": "address_to_parts",
            "location": 9,
            "return": [
                "list[bytes]"
            ],
            "arguments": {
                "address": [
                    "str",
                    "bytes"
                ]
            }
        }
    },
    "ocfweb-master/ocfweb/account/templatetags/__init__.py": {},
    "ocfweb-master/ocfweb/announcements/announcements.py": {
        "announcement": {
            "name": "announcement",
            "location": 41,
            "return": [],
            "arguments": {
                "title": [
                    "typing.Iterable[list[typing.Any]]",
                    "bool",
                    "None",
                    "str"
                ],
                "date": [
                    "typing.Iterable[list[typing.Any]]",
                    "bool",
                    "None",
                    "str"
                ],
                "path": [
                    "typing.Iterable[list[typing.Any]]",
                    "bool",
                    "None",
                    "str"
                ]
            }
        },
        "index": {
            "name": "index",
            "location": 56,
            "return": [],
            "arguments": {
                "request": [
                    "str",
                    "int"
                ]
            }
        },
        "eff_alliance": {
            "name": "eff_alliance",
            "location": 78,
            "return": [],
            "arguments": {
                "title": [],
                "request": []
            }
        },
        "renaming_announcement": {
            "name": "renaming_announcement",
            "location": 93,
            "return": [],
            "arguments": {
                "title": [],
                "request": []
            }
        },
        "printing_announcement": {
            "name": "printing_announcement",
            "location": 114,
            "return": [],
            "arguments": {
                "title": [],
                "request": []
            }
        },
        "hpc_survey": {
            "name": "hpc_survey",
            "location": 129,
            "return": [],
            "arguments": {
                "title": [],
                "request": []
            }
        },
        "hiring_2017": {
            "name": "hiring_2017",
            "location": 144,
            "return": [],
            "arguments": {
                "title": [],
                "request": []
            }
        },
        "hiring_2018": {
            "name": "hiring_2018",
            "location": 159,
            "return": [],
            "arguments": {
                "title": [],
                "request": []
            }
        },
        "Announcement.link": {
            "name": "link",
            "location": 25,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Announcement.route_name": {
            "name": "route_name",
            "location": 29,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "Announcement.datetime": {
            "name": "datetime",
            "location": 33,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "announcement.wrapper": {
            "name": "wrapper",
            "location": 42,
            "return": [],
            "arguments": {
                "fn": []
            }
        }
    },
    "ocfweb-master/ocfweb/announcements/urls.py": {},
    "ocfweb-master/ocfweb/announcements/__init__.py": {},
    "ocfweb-master/ocfweb/api/announce.py": {
        "get_blog_posts": {
            "name": "get_blog_posts",
            "location": 7,
            "return": [
                "JsonResponse"
            ],
            "arguments": {
                "request": [
                    "dict[str, typing.Any]"
                ]
            }
        }
    },
    "ocfweb-master/ocfweb/api/hours.py": {
        "get_hours_listing": {
            "name": "get_hours_listing",
            "location": 27,
            "return": [],
            "arguments": {}
        },
        "get_hours_today": {
            "name": "get_hours_today",
            "location": 31,
            "return": [
                "JsonResponse"
            ],
            "arguments": {
                "request": [
                    "dict[str, str]",
                    "dict[, ]"
                ]
            }
        },
        "JSONHoursEncoder.default": {
            "name": "default",
            "location": 15,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "int",
                    "dict[, ]",
                    "None"
                ]
            }
        }
    },
    "ocfweb-master/ocfweb/api/lab.py": {
        "_list_public_desktops": {
            "name": "_list_public_desktops",
            "location": 16,
            "return": [],
            "arguments": {}
        },
        "_get_desktops_in_use": {
            "name": "_get_desktops_in_use",
            "location": 21,
            "return": [
                "set[]"
            ],
            "arguments": {}
        },
        "desktop_usage": {
            "name": "desktop_usage",
            "location": 35,
            "return": [
                "JsonResponse"
            ],
            "arguments": {
                "request": [
                    "bool"
                ]
            }
        }
    },
    "ocfweb-master/ocfweb/api/meeting_hours.py": {
        "get_meetings_list": {
            "name": "get_meetings_list",
            "location": 8,
            "return": [
                "JsonResponse"
            ],
            "arguments": {
                "request": [
                    "dict[str, str]",
                    "dict[, ]"
                ]
            }
        },
        "get_next_meeting": {
            "name": "get_next_meeting",
            "location": 15,
            "return": [
                "JsonResponse"
            ],
            "arguments": {
                "request": [
                    "dict[str, str]",
                    "dict[, ]"
                ]
            }
        },
        "get_current_meeting": {
            "name": "get_current_meeting",
            "location": 29,
            "return": [
                "JsonResponse"
            ],
            "arguments": {
                "request": [
                    "dict[str, str]",
                    "dict[, ]"
                ]
            }
        }
    },
    "ocfweb-master/ocfweb/api/session_tracking.py": {
        "log_session": {
            "name": "log_session",
            "location": 34,
            "return": [
                "HttpResponse",
                "HttpResponseBadRequest"
            ],
            "arguments": {
                "request": []
            }
        },
        "_new_session": {
            "name": "_new_session",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "host": [
                    "str",
                    "list[list[int]]"
                ],
                "user": [
                    "str"
                ]
            }
        },
        "_session_exists": {
            "name": "_session_exists",
            "location": 81,
            "return": [
                "bool"
            ],
            "arguments": {
                "host": [
                    "str",
                    "bytes",
                    "None"
                ],
                "user": [
                    "str",
                    "bytes",
                    "None"
                ]
            }
        },
        "_refresh_session": {
            "name": "_refresh_session",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {
                "host": [
                    "str"
                ],
                "user": [
                    "str"
                ]
            }
        },
        "_close_sessions": {
            "name": "_close_sessions",
            "location": 103,
            "return": [
                "None"
            ],
            "arguments": {
                "host": [
                    "str",
                    "bool",
                    "list[dict[, ]]",
                    "typing.Mapping",
                    "tuple[typing.Union[int,int,int]]",
                    "dict[int, dict[str, typing.Any]]"
                ]
            }
        },
        "_get_desktops": {
            "name": "_get_desktops",
            "location": 114,
            "return": [
                "dict[, ]"
            ],
            "arguments": {}
        }
    },
    "ocfweb-master/ocfweb/api/shorturls.py": {
        "bounce_shorturl": {
            "name": "bounce_shorturl",
            "location": 11,
            "return": [
                "HttpResponseRedirect",
                "HttpResponseNotFound"
            ],
            "arguments": {
                "request": [
                    "bool"
                ],
                "slug": []
            }
        }
    },
    "ocfweb-master/ocfweb/api/staff_hours.py": {
        "get_staff_hours": {
            "name": "get_staff_hours",
            "location": 7,
            "return": [
                "JsonResponse"
            ],
            "arguments": {
                "request": [
                    "dict[str, str]",
                    "dict[, ]"
                ]
            }
        }
    },
    "ocfweb-master/ocfweb/api/stats.py": {
        "get_num_users_in_lab": {
            "name": "get_num_users_in_lab",
            "location": 16,
            "return": [
                "JsonResponse"
            ],
            "arguments": {
                "request": [
                    "dict[, ]"
                ]
            }
        },
        "get_staff_in_lab": {
            "name": "get_staff_in_lab",
            "location": 23,
            "return": [
                "JsonResponse"
            ],
            "arguments": {
                "request": [
                    "dict[str, str]"
                ]
            }
        },
        "get_printers_summary": {
            "name": "get_printers_summary",
            "location": 30,
            "return": [
                "JsonResponse"
            ],
            "arguments": {
                "request": [
                    "dict[str, str]",
                    "dict[, ]"
                ]
            }
        },
        "get_desktop_usage": {
            "name": "get_desktop_usage",
            "location": 38,
            "return": [
                "JsonResponse"
            ],
            "arguments": {
                "request": [
                    "dict[str, str]",
                    "dict[, ]"
                ]
            }
        },
        "get_mirrors_showcase": {
            "name": "get_mirrors_showcase",
            "location": 62,
            "return": [
                "JsonResponse"
            ],
            "arguments": {
                "request": [
                    "dict[str, str]",
                    "dict[, ]"
                ]
            }
        }
    },
    "ocfweb-master/ocfweb/api/urls.py": {},
    "ocfweb-master/ocfweb/api/__init__.py": {},
    "ocfweb-master/ocfweb/bin/run_periodic_functions.py": {
        "run_periodic_functions": {
            "name": "run_periodic_functions",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "main": {
            "name": "main",
            "location": 103,
            "return": [
                "int"
            ],
            "arguments": {
                "argv": [
                    "None",
                    "list[str]",
                    "list[]",
                    "str"
                ]
            }
        }
    },
    "ocfweb-master/ocfweb/bin/__init__.py": {},
    "ocfweb-master/ocfweb/component/blog.py": {
        "get_blog_posts": {
            "name": "get_blog_posts",
            "location": 60,
            "return": [],
            "arguments": {}
        },
        "Post.datetime": {
            "name": "datetime",
            "location": 33,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Post.from_element": {
            "name": "from_element",
            "location": 37,
            "return": [],
            "arguments": {
                "cls": [],
                "element": []
            }
        },
        "Post.from_element.grab_attr": {
            "name": "grab_attr",
            "location": 38,
            "return": [],
            "arguments": {
                "attr": []
            }
        }
    },
    "ocfweb-master/ocfweb/component/celery.py": {},
    "ocfweb-master/ocfweb/component/errors.py": {
        "ResponseException.__init__": {
            "name": "__init__",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "response": [
                    "list[dict[, ]]",
                    "dict[str, typing.Any]"
                ]
            }
        }
    },
    "ocfweb-master/ocfweb/component/forms.py": {
        "wrap_validator": {
            "name": "wrap_validator",
            "location": 15,
            "return": [],
            "arguments": {
                "validator": [
                    "int",
                    "str",
                    "typing.Iterable[C]"
                ]
            }
        },
        "wrap_validator.wrapped_validator": {
            "name": "wrapped_validator",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "ocfweb-master/ocfweb/component/graph.py": {
        "current_start_end": {
            "name": "current_start_end",
            "location": 23,
            "return": [
                "tuple[]"
            ],
            "arguments": {}
        },
        "canonical_graph": {
            "name": "canonical_graph",
            "location": 29,
            "return": [],
            "arguments": {
                "hot_path": [
                    "None",
                    "typing.Callable[..., typing.Any]",
                    "bool",
                    "typing.Sequence[str]",
                    "dict[, ]"
                ],
                "default_start_end": []
            }
        },
        "plot_to_image_bytes": {
            "name": "plot_to_image_bytes",
            "location": 96,
            "return": [],
            "arguments": {
                "fig": [
                    "str",
                    "int",
                    "float"
                ],
                "format": [
                    "typing.Text"
                ]
            }
        },
        "canonical_graph.decorator": {
            "name": "decorator",
            "location": 53,
            "return": [],
            "arguments": {
                "fn": []
            }
        },
        "canonical_graph.decorator.wrapper": {
            "name": "wrapper",
            "location": 54,
            "return": [
                "HttpResponse"
            ],
            "arguments": {
                "request": []
            }
        },
        "canonical_graph.decorator.wrapper._day_from_params": {
            "name": "_day_from_params",
            "location": 55,
            "return": [],
            "arguments": {
                "param": [],
                "default": []
            }
        }
    },
    "ocfweb-master/ocfweb/component/lab_status.py": {
        "get_lab_status": {
            "name": "get_lab_status",
            "location": 17,
            "return": [
                "LabStatus"
            ],
            "arguments": {}
        }
    },
    "ocfweb-master/ocfweb/component/markdown.py": {
        "markdown": {
            "name": "markdown",
            "location": 239,
            "return": [],
            "arguments": {
                "text": [
                    "str"
                ]
            }
        },
        "text_and_meta": {
            "name": "text_and_meta",
            "location": 244,
            "return": [
                "tuple[dict[, ]]"
            ],
            "arguments": {
                "f": []
            }
        },
        "markdown_and_toc": {
            "name": "markdown_and_toc",
            "location": 262,
            "return": [
                "tuple[typing.Union[str,tuple[slice],int,list[],list[str],dict[str, list[str]]]]"
            ],
            "arguments": {
                "text": [
                    "str"
                ]
            }
        },
        "MixinBase.__init__": {
            "name": "__init__",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "rules": [
                    "int",
                    "str",
                    "typing.Sequence[T]",
                    "list[tuple[typing.Union[int,float]]]"
                ],
                "default_rules": [
                    "int",
                    "str",
                    "typing.Sequence[T]",
                    "list[tuple[typing.Union[int,float]]]"
                ]
            }
        },
        "HtmlCommentsLexerMixin.enable_html_comments": {
            "name": "enable_html_comments",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HtmlCommentsLexerMixin.output_html_comment": {
            "name": "output_html_comment",
            "location": 46,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": [],
                "m": [
                    "int",
                    "typing.Match",
                    "typing.Generator[]",
                    "list[int]",
                    "None",
                    "bytes",
                    "list[dict[, ]]"
                ]
            }
        },
        "HtmlCommentsLexerMixin.parse_html_comment": {
            "name": "parse_html_comment",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "m": [
                    "int",
                    "str",
                    "typing.Iterable[C]"
                ]
            }
        },
        "BackslashLineBreakLexerMixin.enable_backslash_line_breaks": {
            "name": "enable_backslash_line_breaks",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BackslashLineBreakLexerMixin.output_backslash_line_break": {
            "name": "output_backslash_line_break",
            "location": 78,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": [],
                "m": [
                    "typing.Match",
                    "str",
                    "bool"
                ]
            }
        },
        "CodeRendererMixin.block_code": {
            "name": "block_code",
            "location": 87,
            "return": [],
            "arguments": {
                "self": [],
                "code": [
                    "str",
                    "bytes"
                ],
                "lang": [
                    "str"
                ]
            }
        },
        "DjangoLinkInlineLexerMixin.enable_django_links": {
            "name": "enable_django_links",
            "location": 114,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DjangoLinkInlineLexerMixin.output_django_link": {
            "name": "output_django_link",
            "location": 125,
            "return": [],
            "arguments": {
                "self": [],
                "m": []
            }
        },
        "HeaderRendererMixin.reset_toc": {
            "name": "reset_toc",
            "location": 161,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HeaderRendererMixin.get_toc": {
            "name": "get_toc",
            "location": 165,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HeaderRendererMixin.header": {
            "name": "header",
            "location": 168,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str"
                ],
                "level": [
                    "str",
                    "int"
                ],
                "raw": [
                    "None",
                    "str",
                    "list[tuple[typing.Union[str,str]]]"
                ]
            }
        },
        "text_and_meta.repl": {
            "name": "repl",
            "location": 253,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "match": []
            }
        },
        "DjangoLinkInlineLexerMixin.output_django_link.href": {
            "name": "href",
            "location": 128,
            "return": [],
            "arguments": {
                "link": [],
                "fragment": []
            }
        }
    },
    "ocfweb-master/ocfweb/component/session.py": {
        "is_logged_in": {
            "name": "is_logged_in",
            "location": 8,
            "return": [
                "bool"
            ],
            "arguments": {
                "request": [
                    "dict[str, typing.Any]",
                    "str"
                ]
            }
        },
        "logged_in_user": {
            "name": "logged_in_user",
            "location": 13,
            "return": [],
            "arguments": {
                "request": []
            }
        },
        "login": {
            "name": "login",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "request": [
                    "str",
                    "None"
                ],
                "user": [
                    "str"
                ]
            }
        },
        "logout": {
            "name": "logout",
            "location": 24,
            "return": [
                "bool"
            ],
            "arguments": {
                "request": [
                    "typing.Callable[, ]"
                ]
            }
        }
    },
    "ocfweb-master/ocfweb/component/__init__.py": {},
    "ocfweb-master/ocfweb/docs/doc.py": {
        "Document.category": {
            "name": "category",
            "location": 9,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Document.category_for_sidebar": {
            "name": "category_for_sidebar",
            "location": 17,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Document.edit_url": {
            "name": "edit_url",
            "location": 32,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Document.history_url": {
            "name": "history_url",
            "location": 41,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "ocfweb-master/ocfweb/docs/markdown_based.py": {
        "render_markdown_doc": {
            "name": "render_markdown_doc",
            "location": 34,
            "return": [],
            "arguments": {
                "path": [],
                "meta": [],
                "text": [],
                "doc": [],
                "request": []
            }
        },
        "get_markdown_docs": {
            "name": "get_markdown_docs",
            "location": 57,
            "return": [],
            "arguments": {}
        }
    },
    "ocfweb-master/ocfweb/docs/urls.py": {
        "render_doc": {
            "name": "render_doc",
            "location": 49,
            "return": [],
            "arguments": {
                "request": [
                    "str",
                    "list[str]"
                ],
                "doc_name": [
                    "str"
                ]
            }
        },
        "send_redirect": {
            "name": "send_redirect",
            "location": 57,
            "return": [],
            "arguments": {
                "request": [
                    "typing.BinaryIO",
                    "str"
                ],
                "redir_src": [
                    "str"
                ]
            }
        },
        "doc_name": {
            "name": "doc_name",
            "location": 63,
            "return": [
                "str"
            ],
            "arguments": {
                "doc_name": [
                    "str",
                    "list[str]"
                ]
            }
        }
    },
    "ocfweb-master/ocfweb/docs/__init__.py": {},
    "ocfweb-master/ocfweb/docs/templatetags/docs.py": {
        "doc_tree": {
            "name": "doc_tree",
            "location": 27,
            "return": [
                "dict[typing.Text, typing.Union[bool,None,str]]"
            ],
            "arguments": {
                "root": [
                    "typing.Text"
                ],
                "suppress_root": [
                    "bool"
                ],
                "cur_path": [
                    "None",
                    "str",
                    "bool"
                ],
                "exclude": [
                    "typing.Text"
                ]
            }
        },
        "doc_toc": {
            "name": "doc_toc",
            "location": 67,
            "return": [
                "dict[typing.Text, typing.Union[typing.Text,bool]]"
            ],
            "arguments": {
                "toc": [],
                "collapsible": [
                    "bool"
                ]
            }
        },
        "Node.url_path": {
            "name": "url_path",
            "location": 19,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "doc_tree._make_tree": {
            "name": "_make_tree",
            "location": 39,
            "return": [
                "Node"
            ],
            "arguments": {
                "root": []
            }
        }
    },
    "ocfweb-master/ocfweb/docs/templatetags/__init__.py": {},
    "ocfweb-master/ocfweb/docs/views/account_policies.py": {
        "account_policies": {
            "name": "account_policies",
            "location": 8,
            "return": [],
            "arguments": {
                "doc": [
                    "dict[, ]",
                    "list[]"
                ],
                "request": [
                    "dict[, ]",
                    "list[]"
                ]
            }
        }
    },
    "ocfweb-master/ocfweb/docs/views/buster_upgrade.py": {
        "_get_servers": {
            "name": "_get_servers",
            "location": 42,
            "return": [
                "tuple[]"
            ],
            "arguments": {}
        },
        "buster_upgrade": {
            "name": "buster_upgrade",
            "location": 205,
            "return": [],
            "arguments": {
                "doc": [
                    "str",
                    "int"
                ],
                "request": [
                    "str",
                    "int"
                ]
            }
        },
        "ThingToUpgrade.from_hostname": {
            "name": "from_hostname",
            "location": 31,
            "return": [],
            "arguments": {
                "cls": [
                    "int",
                    "str",
                    "bytes"
                ],
                "hostname": [
                    "str"
                ],
                "status": [],
                "comments": [
                    "None",
                    "int",
                    "str",
                    "bytes"
                ]
            }
        }
    },
    "ocfweb-master/ocfweb/docs/views/commands.py": {
        "commands": {
            "name": "commands",
            "location": 87,
            "return": [],
            "arguments": {
                "doc": [
                    "dict[, ]"
                ],
                "request": [
                    "dict[, ]"
                ]
            }
        }
    },
    "ocfweb-master/ocfweb/docs/views/hosting_badges.py": {
        "hosting_badges": {
            "name": "hosting_badges",
            "location": 9,
            "return": [],
            "arguments": {
                "doc": [],
                "request": []
            }
        }
    },
    "ocfweb-master/ocfweb/docs/views/index.py": {
        "docs_index": {
            "name": "docs_index",
            "location": 6,
            "return": [],
            "arguments": {
                "request": [
                    "typing.Callable[, ]"
                ]
            }
        }
    },
    "ocfweb-master/ocfweb/docs/views/lab.py": {
        "lab": {
            "name": "lab",
            "location": 12,
            "return": [],
            "arguments": {
                "doc": [
                    "dict[, ]"
                ],
                "request": [
                    "dict[, ]"
                ]
            }
        }
    },
    "ocfweb-master/ocfweb/docs/views/officers.py": {
        "_bod_terms": {
            "name": "_bod_terms",
            "location": 125,
            "return": [],
            "arguments": {}
        },
        "officers": {
            "name": "officers",
            "location": 360,
            "return": [],
            "arguments": {
                "doc": [],
                "request": []
            }
        },
        "Term.__init__": {
            "name": "__init__",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [],
                "gms": [],
                "sms": [],
                "dgms": [
                    "None"
                ],
                "dsms": [
                    "None"
                ],
                "heads": [
                    "None"
                ]
            }
        },
        "Officer.from_uid_or_info": {
            "name": "from_uid_or_info",
            "location": 66,
            "return": [],
            "arguments": {
                "cls": [],
                "uid_or_info": []
            }
        },
        "Officer.full_term": {
            "name": "full_term",
            "location": 87,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Officer.__str__": {
            "name": "__str__",
            "location": 90,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "ocfweb-master/ocfweb/docs/views/servers.py": {
        "is_hidden": {
            "name": "is_hidden",
            "location": 85,
            "return": [
                "bool"
            ],
            "arguments": {
                "host": [
                    "str"
                ]
            }
        },
        "query_puppet": {
            "name": "query_puppet",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {
                "query": [
                    "str"
                ]
            }
        },
        "format_query_output": {
            "name": "format_query_output",
            "location": 107,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "item": []
            }
        },
        "ldap_to_host": {
            "name": "ldap_to_host",
            "location": 112,
            "return": [
                "tuple[Host]"
            ],
            "arguments": {
                "item": []
            }
        },
        "get_hosts": {
            "name": "get_hosts",
            "location": 120,
            "return": [
                "list[Host]"
            ],
            "arguments": {}
        },
        "servers": {
            "name": "servers",
            "location": 171,
            "return": [],
            "arguments": {
                "doc": [
                    "int",
                    "str"
                ],
                "request": [
                    "int",
                    "str"
                ]
            }
        },
        "Host.from_ldap": {
            "name": "from_ldap",
            "location": 25,
            "return": [],
            "arguments": {
                "cls": [
                    "str",
                    "typing.Type"
                ],
                "hostname": [
                    "str",
                    "tuple[typing.Union[str,str]]"
                ],
                "type": [
                    "typing.Text"
                ],
                "children": [
                    "tuple[]"
                ]
            }
        },
        "Host.ipv4": {
            "name": "ipv4",
            "location": 39,
            "return": [
                "str",
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "Host.ipv6": {
            "name": "ipv6",
            "location": 47,
            "return": [
                "str",
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "Host.english_type": {
            "name": "english_type",
            "location": 54,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Host.has_munin": {
            "name": "has_munin",
            "location": 68,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Host.__key": {
            "name": "__key",
            "location": 71,
            "return": [
                "tuple[typing.Union[int,float]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Host.__lt__": {
            "name": "__lt__",
            "location": 81,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other_host": []
            }
        }
    },
    "ocfweb-master/ocfweb/docs/views/shorturl.py": {
        "shorturl": {
            "name": "shorturl",
            "location": 8,
            "return": [],
            "arguments": {
                "doc": [],
                "request": []
            }
        }
    },
    "ocfweb-master/ocfweb/docs/views/__init__.py": {},
    "ocfweb-master/ocfweb/lab_reservations/reserve.py": {
        "request_reservation": {
            "name": "request_reservation",
            "location": 102,
            "return": [],
            "arguments": {
                "request": [
                    "tuple[int]",
                    "dict[, ]"
                ]
            }
        },
        "request_reservation_success": {
            "name": "request_reservation_success",
            "location": 137,
            "return": [],
            "arguments": {
                "request": [
                    "set[str]"
                ]
            }
        },
        "send_request_to_officers": {
            "name": "send_request_to_officers",
            "location": 141,
            "return": [
                "None"
            ],
            "arguments": {
                "request": []
            }
        },
        "send_request_confirmation": {
            "name": "send_request_confirmation",
            "location": 153,
            "return": [
                "None"
            ],
            "arguments": {
                "request": []
            }
        },
        "NewReservationRequest.to_dict": {
            "name": "to_dict",
            "location": 34,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RequestForm.clean_verify_": {
            "name": "clean_verify_",
            "location": 92,
            "return": [
                "str",
                "dict[str, str]",
                "dict[str, typing.Union[int,str]]",
                "list[]",
                "int",
                "dict[typing.Union[str,None], str]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "ocfweb-master/ocfweb/lab_reservations/urls.py": {},
    "ocfweb-master/ocfweb/login/calnet.py": {
        "_service_url": {
            "name": "_service_url",
            "location": 15,
            "return": [
                "str",
                "dict[typing.Any, str]",
                "list[str]"
            ],
            "arguments": {
                "request": [],
                "next_page": [
                    "str",
                    "None",
                    "dict[, ]"
                ]
            }
        },
        "_redirect_url": {
            "name": "_redirect_url",
            "location": 25,
            "return": [
                "list[dict[str, str]]",
                "str",
                "dict[str, str]"
            ],
            "arguments": {
                "request": []
            }
        },
        "_login_url": {
            "name": "_login_url",
            "location": 34,
            "return": [
                "str"
            ],
            "arguments": {
                "service": [
                    "str",
                    "float"
                ]
            }
        },
        "_logout_url": {
            "name": "_logout_url",
            "location": 44,
            "return": [
                "str"
            ],
            "arguments": {
                "request": [],
                "next_page": [
                    "None",
                    "str",
                    "bytes"
                ]
            }
        },
        "_next_page_response": {
            "name": "_next_page_response",
            "location": 53,
            "return": [
                "HttpResponseRedirect",
                "HttpResponse"
            ],
            "arguments": {
                "next_page": [
                    "str",
                    "None",
                    "list[str]",
                    "dict[str, typing.Any]",
                    "int",
                    "bytes"
                ]
            }
        },
        "login": {
            "name": "login",
            "location": 62,
            "return": [
                "HttpResponseForbidden",
                "HttpResponseRedirect"
            ],
            "arguments": {
                "request": [],
                "next_page": [
                    "None"
                ]
            }
        },
        "logout": {
            "name": "logout",
            "location": 84,
            "return": [
                "HttpResponseRedirect"
            ],
            "arguments": {
                "request": [],
                "next_page": [
                    "None"
                ]
            }
        }
    },
    "ocfweb-master/ocfweb/login/ocf.py": {
        "_valid_return_path": {
            "name": "_valid_return_path",
            "location": 24,
            "return": [],
            "arguments": {
                "return_to": [
                    "str",
                    "dict[str, dict[, ]]"
                ]
            }
        },
        "login": {
            "name": "login",
            "location": 32,
            "return": [],
            "arguments": {
                "request": []
            }
        },
        "logout": {
            "name": "logout",
            "location": 78,
            "return": [],
            "arguments": {
                "request": []
            }
        },
        "redirect_back": {
            "name": "redirect_back",
            "location": 102,
            "return": [
                "HttpResponseRedirect"
            ],
            "arguments": {
                "request": [
                    "dict[, ]"
                ]
            }
        },
        "LoginForm.clean_username": {
            "name": "clean_username",
            "location": 125,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "ocfweb-master/ocfweb/login/urls.py": {},
    "ocfweb-master/ocfweb/login/__init__.py": {},
    "ocfweb-master/ocfweb/main/favicon.py": {
        "favicon": {
            "name": "favicon",
            "location": 8,
            "return": [
                "HttpResponse"
            ],
            "arguments": {
                "request": [
                    "bool"
                ]
            }
        }
    },
    "ocfweb-master/ocfweb/main/home.py": {
        "get_staff_hours": {
            "name": "get_staff_hours",
            "location": 18,
            "return": [],
            "arguments": {}
        },
        "home": {
            "name": "home",
            "location": 22,
            "return": [],
            "arguments": {
                "request": [
                    "str",
                    "typing.Mapping"
                ]
            }
        }
    },
    "ocfweb-master/ocfweb/main/hosting_logos.py": {
        "get_image": {
            "name": "get_image",
            "location": 43,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "image": [
                    "list[str]",
                    "str",
                    "int",
                    "dict[, ]"
                ]
            }
        },
        "hosting_logo": {
            "name": "hosting_logo",
            "location": 62,
            "return": [
                "HttpResponse"
            ],
            "arguments": {
                "request": [
                    "int",
                    "list[tuple[typing.Union[str,str]]]"
                ],
                "image": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "ocfweb-master/ocfweb/main/robots.py": {
        "robots_dot_txt": {
            "name": "robots_dot_txt",
            "location": 8,
            "return": [
                "HttpResponse"
            ],
            "arguments": {
                "request": [
                    "bool"
                ]
            }
        }
    },
    "ocfweb-master/ocfweb/main/security.py": {
        "security_dot_txt": {
            "name": "security_dot_txt",
            "location": 10,
            "return": [
                "HttpResponse"
            ],
            "arguments": {
                "request": [
                    "bool"
                ]
            }
        }
    },
    "ocfweb-master/ocfweb/main/staff_hours.py": {
        "get_staff_hours": {
            "name": "get_staff_hours",
            "location": 15,
            "return": [],
            "arguments": {}
        },
        "staff_hours": {
            "name": "staff_hours",
            "location": 19,
            "return": [],
            "arguments": {
                "request": [
                    "str",
                    "dict[, ]"
                ]
            }
        }
    },
    "ocfweb-master/ocfweb/main/__init__.py": {},
    "ocfweb-master/ocfweb/main/templatetags/staff_hours.py": {
        "gravatar": {
            "name": "gravatar",
            "location": 9,
            "return": [],
            "arguments": {
                "staffer": [],
                "size": [
                    "int",
                    "typing.Iterable[]",
                    "str"
                ]
            }
        }
    },
    "ocfweb-master/ocfweb/main/templatetags/__init__.py": {},
    "ocfweb-master/ocfweb/middleware/errors.py": {
        "sanitize": {
            "name": "sanitize",
            "location": 23,
            "return": [],
            "arguments": {
                "msg": [
                    "str",
                    "float",
                    "int"
                ]
            }
        },
        "sanitize_wsgi_context": {
            "name": "sanitize_wsgi_context",
            "location": 31,
            "return": [],
            "arguments": {
                "headers": [
                    "dict[, ]",
                    "str",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "OcflibErrorMiddleware.__init__": {
            "name": "__init__",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "get_response": [
                    "dict[, ]",
                    "str"
                ]
            }
        },
        "OcflibErrorMiddleware.__call__": {
            "name": "__call__",
            "location": 45,
            "return": [],
            "arguments": {
                "self": [],
                "request": []
            }
        },
        "OcflibErrorMiddleware.process_exception": {
            "name": "process_exception",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "request": [],
                "exception": [
                    "str"
                ]
            }
        }
    },
    "ocfweb-master/ocfweb/middleware/__init__.py": {},
    "ocfweb-master/ocfweb/stats/accounts.py": {
        "stats_accounts": {
            "name": "stats_accounts",
            "location": 20,
            "return": [],
            "arguments": {
                "request": [
                    "dict[, ]"
                ]
            }
        },
        "_get_account_stats": {
            "name": "_get_account_stats",
            "location": 48,
            "return": [
                "dict[typing.Text, list[]]"
            ],
            "arguments": {}
        }
    },
    "ocfweb-master/ocfweb/stats/daily_graph.py": {
        "_daily_graph_image": {
            "name": "_daily_graph_image",
            "location": 27,
            "return": [
                "HttpResponse"
            ],
            "arguments": {
                "day": [
                    "None",
                    "int",
                    "dict[str, typing.Any]",
                    "float",
                    "str",
                    "typing.Sequence[int]"
                ]
            }
        },
        "daily_graph_image": {
            "name": "daily_graph_image",
            "location": 37,
            "return": [],
            "arguments": {
                "request": []
            }
        },
        "get_open_close": {
            "name": "get_open_close",
            "location": 58,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "day": [
                    "None",
                    "str"
                ]
            }
        },
        "get_daily_plot": {
            "name": "get_daily_plot",
            "location": 88,
            "return": [
                "Figure"
            ],
            "arguments": {
                "day": [
                    "int"
                ]
            }
        }
    },
    "ocfweb-master/ocfweb/stats/job_frequency.py": {
        "pyday_to_sqlday": {
            "name": "pyday_to_sqlday",
            "location": 20,
            "return": [
                "int",
                "float"
            ],
            "arguments": {
                "pyday": [
                    "int",
                    "float",
                    "list[int]",
                    "list[list[str]]"
                ]
            }
        },
        "_jobs_graph_image": {
            "name": "_jobs_graph_image",
            "location": 26,
            "return": [
                "HttpResponse"
            ],
            "arguments": {
                "day": [
                    "None",
                    "int",
                    "dict[str, typing.Any]",
                    "float",
                    "str",
                    "typing.Sequence[int]"
                ]
            }
        },
        "daily_jobs_image": {
            "name": "daily_jobs_image",
            "location": 36,
            "return": [],
            "arguments": {
                "request": []
            }
        },
        "get_jobs_plot": {
            "name": "get_jobs_plot",
            "location": 57,
            "return": [
                "Figure"
            ],
            "arguments": {
                "day": []
            }
        }
    },
    "ocfweb-master/ocfweb/stats/mirrors.py": {
        "stats_mirrors": {
            "name": "stats_mirrors",
            "location": 18,
            "return": [],
            "arguments": {
                "request": [
                    "str"
                ]
            }
        },
        "bandwidth_semester": {
            "name": "bandwidth_semester",
            "location": 40,
            "return": [
                "tuple[typing.Union[bool,list[],str,float,list[tuple[]]]]"
            ],
            "arguments": {
                "humanize": [
                    "bool"
                ]
            }
        },
        "bandwidth_all_time": {
            "name": "bandwidth_all_time",
            "location": 57,
            "return": [
                "tuple[typing.Union[str,int,None,list[tuple[]]]]"
            ],
            "arguments": {}
        }
    },
    "ocfweb-master/ocfweb/stats/printing.py": {
        "stats_printing": {
            "name": "stats_printing",
            "location": 26,
            "return": [],
            "arguments": {
                "request": [
                    "int"
                ]
            }
        },
        "semester_histogram": {
            "name": "semester_histogram",
            "location": 43,
            "return": [
                "HttpResponse"
            ],
            "arguments": {
                "request": [
                    "bool"
                ]
            }
        },
        "_semester_histogram": {
            "name": "_semester_histogram",
            "location": 51,
            "return": [
                "Figure"
            ],
            "arguments": {}
        },
        "_toner_changes": {
            "name": "_toner_changes",
            "location": 72,
            "return": [
                "list[tuple[typing.Text]]"
            ],
            "arguments": {}
        },
        "_toner_used_by_printer": {
            "name": "_toner_used_by_printer",
            "location": 82,
            "return": [
                "float"
            ],
            "arguments": {
                "printer": [
                    "str",
                    "float",
                    "int",
                    "dict[str, int]"
                ],
                "cutoff": [
                    "float"
                ],
                "since": []
            }
        },
        "_pages_per_day": {
            "name": "_pages_per_day",
            "location": 146,
            "return": [
                "dict[, ]"
            ],
            "arguments": {}
        },
        "_pages_printed_for_printer": {
            "name": "_pages_printed_for_printer",
            "location": 172,
            "return": [
                "list[tuple[]]"
            ],
            "arguments": {
                "printer": [
                    "float",
                    "str",
                    "list[str]",
                    "int"
                ],
                "resolution": [
                    "int"
                ]
            }
        },
        "_pages_printed_data": {
            "name": "_pages_printed_data",
            "location": 199,
            "return": [
                "list[dict[typing.Text, typing.Union[typing.Text,bool]]]"
            ],
            "arguments": {}
        },
        "pages_printed": {
            "name": "pages_printed",
            "location": 210,
            "return": [],
            "arguments": {
                "request": []
            }
        }
    },
    "ocfweb-master/ocfweb/stats/semester_job.py": {
        "weekday_jobs_image": {
            "name": "weekday_jobs_image",
            "location": 20,
            "return": [
                "HttpResponse"
            ],
            "arguments": {
                "request": [
                    "float",
                    "list[str]",
                    "str"
                ],
                "start_day": [
                    "int",
                    "str",
                    "None"
                ],
                "end_day": [
                    "int",
                    "str",
                    "None"
                ]
            }
        },
        "weekend_jobs_image": {
            "name": "weekend_jobs_image",
            "location": 28,
            "return": [
                "HttpResponse"
            ],
            "arguments": {
                "request": [
                    "float",
                    "list[str]",
                    "str"
                ],
                "start_day": [
                    "int",
                    "str",
                    "None"
                ],
                "end_day": [
                    "int",
                    "str",
                    "None"
                ]
            }
        },
        "freq_plot": {
            "name": "freq_plot",
            "location": 66,
            "return": [
                "Figure"
            ],
            "arguments": {
                "data": [],
                "title": [
                    "typing.Sequence[typing.Any]",
                    "str",
                    "bool"
                ],
                "ylab": [
                    "typing.Text"
                ]
            }
        },
        "get_jobs_plot": {
            "name": "get_jobs_plot",
            "location": 90,
            "return": [],
            "arguments": {
                "graph": [
                    "bool",
                    "typing.Mapping",
                    "str"
                ],
                "start_day": [
                    "int",
                    "tuple[typing.Union[int,int]]",
                    "list[typing.Any]",
                    "None"
                ],
                "end_day": [
                    "int",
                    "tuple[typing.Union[int,int]]",
                    "list[typing.Any]",
                    "None"
                ]
            }
        }
    },
    "ocfweb-master/ocfweb/stats/session_count.py": {
        "_todays_session_image": {
            "name": "_todays_session_image",
            "location": 19,
            "return": [],
            "arguments": {}
        },
        "session_count_image": {
            "name": "session_count_image",
            "location": 24,
            "return": [],
            "arguments": {
                "request": [
                    "float",
                    "str",
                    "bool"
                ],
                "start_day": [
                    "int",
                    "str",
                    "float"
                ],
                "end_day": [
                    "int",
                    "str",
                    "float"
                ]
            }
        },
        "_sessions_image": {
            "name": "_sessions_image",
            "location": 28,
            "return": [
                "HttpResponse"
            ],
            "arguments": {
                "start_day": [
                    "int",
                    "None",
                    "str"
                ],
                "end_day": [
                    "int",
                    "None",
                    "str"
                ]
            }
        },
        "get_sessions_plot": {
            "name": "get_sessions_plot",
            "location": 35,
            "return": [
                "Figure"
            ],
            "arguments": {
                "start_day": [],
                "end_day": []
            }
        }
    },
    "ocfweb-master/ocfweb/stats/session_length.py": {
        "current_start_end": {
            "name": "current_start_end",
            "location": 21,
            "return": [
                "tuple[]"
            ],
            "arguments": {}
        },
        "_todays_session_image": {
            "name": "_todays_session_image",
            "location": 28,
            "return": [],
            "arguments": {}
        },
        "session_length_image": {
            "name": "session_length_image",
            "location": 36,
            "return": [],
            "arguments": {
                "request": [
                    "float",
                    "str",
                    "bool"
                ],
                "start_day": [
                    "int",
                    "str",
                    "float"
                ],
                "end_day": [
                    "int",
                    "str",
                    "float"
                ]
            }
        },
        "_sessions_image": {
            "name": "_sessions_image",
            "location": 40,
            "return": [
                "HttpResponse"
            ],
            "arguments": {
                "start_day": [
                    "int",
                    "None",
                    "str"
                ],
                "end_day": [
                    "int",
                    "None",
                    "str"
                ]
            }
        },
        "get_sessions_plot": {
            "name": "get_sessions_plot",
            "location": 47,
            "return": [
                "Figure"
            ],
            "arguments": {
                "start_day": [],
                "end_day": []
            }
        }
    },
    "ocfweb-master/ocfweb/stats/session_stats.py": {
        "top_staff_alltime": {
            "name": "top_staff_alltime",
            "location": 16,
            "return": [],
            "arguments": {}
        },
        "top_staff_semester": {
            "name": "top_staff_semester",
            "location": 21,
            "return": [],
            "arguments": {}
        },
        "session_stats": {
            "name": "session_stats",
            "location": 25,
            "return": [],
            "arguments": {
                "request": [
                    "dict[, ]"
                ]
            }
        }
    },
    "ocfweb-master/ocfweb/stats/summary.py": {
        "desktop_profiles": {
            "name": "desktop_profiles",
            "location": 32,
            "return": [
                "list[]"
            ],
            "arguments": {}
        },
        "staff_in_lab": {
            "name": "staff_in_lab",
            "location": 54,
            "return": [],
            "arguments": {}
        },
        "top_staff_alltime": {
            "name": "top_staff_alltime",
            "location": 59,
            "return": [],
            "arguments": {}
        },
        "top_staff_semester": {
            "name": "top_staff_semester",
            "location": 64,
            "return": [],
            "arguments": {}
        },
        "users_in_lab_count": {
            "name": "users_in_lab_count",
            "location": 69,
            "return": [],
            "arguments": {}
        },
        "staff_in_lab_count": {
            "name": "staff_in_lab_count",
            "location": 74,
            "return": [],
            "arguments": {}
        },
        "printers": {
            "name": "printers",
            "location": 79,
            "return": [
                "list[]"
            ],
            "arguments": {}
        },
        "summary": {
            "name": "summary",
            "location": 95,
            "return": [],
            "arguments": {
                "request": [
                    "int",
                    "dict[, ]"
                ]
            }
        },
        "printers.silence": {
            "name": "silence",
            "location": 80,
            "return": [],
            "arguments": {
                "f": []
            }
        },
        "printers.silence.inner": {
            "name": "inner",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "ocfweb-master/ocfweb/stats/urls.py": {},
    "ocfweb-master/ocfweb/stats/__init__.py": {},
    "ocfweb-master/ocfweb/stats/templatetags/stats.py": {
        "stats_navbar": {
            "name": "stats_navbar",
            "location": 15,
            "return": [
                "dict[typing.Text, list[]]"
            ],
            "arguments": {
                "context": []
            }
        }
    },
    "ocfweb-master/ocfweb/stats/templatetags/__init__.py": {},
    "ocfweb-master/ocfweb/templatetags/common.py": {
        "getitem": {
            "name": "getitem",
            "location": 12,
            "return": [],
            "arguments": {
                "obj": [],
                "item": [
                    "typing.Sequence[]",
                    "typing.Iterable[T]"
                ]
            }
        },
        "sum_values": {
            "name": "sum_values",
            "location": 22,
            "return": [
                "bool"
            ],
            "arguments": {
                "obj": [
                    "dict[, ]"
                ]
            }
        },
        "sort": {
            "name": "sort",
            "location": 28,
            "return": [
                "list[str]"
            ],
            "arguments": {
                "items": [
                    "list[str]"
                ]
            }
        },
        "join": {
            "name": "join",
            "location": 41,
            "return": [
                "str"
            ],
            "arguments": {
                "items": [
                    "str"
                ],
                "s": [
                    "str"
                ]
            }
        },
        "json": {
            "name": "json",
            "location": 51,
            "return": [],
            "arguments": {
                "obj": [
                    "dict[, ]",
                    "str",
                    "int",
                    "None"
                ]
            }
        }
    },
    "ocfweb-master/ocfweb/templatetags/google_maps.py": {
        "google_map": {
            "name": "google_map",
            "location": 19,
            "return": [
                "dict[typing.Text, typing.Union[float,bool,typing.Mapping,typing.Text]]"
            ],
            "arguments": {
                "width": [
                    "float",
                    "bool",
                    "typing.Mapping"
                ],
                "height": [
                    "float",
                    "bool",
                    "typing.Mapping"
                ],
                "show_info": [
                    "bool"
                ]
            }
        },
        "google_map_static": {
            "name": "google_map_static",
            "location": 32,
            "return": [
                "dict[typing.Text, typing.Union[str,float,int,None]]"
            ],
            "arguments": {
                "width": [
                    "float",
                    "str",
                    "int",
                    "None"
                ],
                "height": [
                    "float",
                    "str",
                    "int",
                    "None"
                ],
                "display_width": [
                    "float",
                    "str",
                    "int",
                    "None"
                ]
            }
        }
    },
    "ocfweb-master/ocfweb/templatetags/lab_hours.py": {
        "lab_hours_holiday": {
            "name": "lab_hours_holiday",
            "location": 12,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "holidays": [],
                "when": [
                    "None"
                ]
            }
        },
        "lab_hours_time": {
            "name": "lab_hours_time",
            "location": 23,
            "return": [
                "str",
                "typing.Text"
            ],
            "arguments": {
                "hours": []
            }
        }
    },
    "ocfweb-master/ocfweb/templatetags/pygments.py": {
        "pygments": {
            "name": "pygments",
            "location": 34,
            "return": [
                "PygmentsNode"
            ],
            "arguments": {
                "parser": [],
                "token": []
            }
        },
        "PygmentsNode.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "nodes": [
                    "str",
                    "list[dict[str, typing.Any]]",
                    "int",
                    "typing.Callable[..., T]"
                ],
                "lang": [
                    "str",
                    "list[dict[str, typing.Any]]",
                    "int",
                    "typing.Callable[..., T]"
                ]
            }
        },
        "PygmentsNode.render": {
            "name": "render",
            "location": 20,
            "return": [],
            "arguments": {
                "self": [],
                "context": [
                    "str",
                    "bool"
                ]
            }
        }
    },
    "ocfweb-master/ocfweb/templatetags/ui_components.py": {
        "progress_bar": {
            "name": "progress_bar",
            "location": 9,
            "return": [
                "dict[typing.Text, typing.Union[int,str,float]]"
            ],
            "arguments": {
                "label": [
                    "int",
                    "str",
                    "float"
                ],
                "value": [
                    "int",
                    "float"
                ],
                "max": [
                    "int",
                    "float"
                ]
            }
        }
    },
    "ocfweb-master/ocfweb/templatetags/__init__.py": {},
    "ocfweb-master/ocfweb/test/periodic.py": {
        "test_list_periodic_functions": {
            "name": "test_list_periodic_functions",
            "location": 10,
            "return": [],
            "arguments": {
                "request": []
            }
        }
    },
    "ocfweb-master/ocfweb/test/session.py": {
        "test_session": {
            "name": "test_session",
            "location": 7,
            "return": [
                "HttpResponse"
            ],
            "arguments": {
                "request": []
            }
        }
    },
    "ocfweb-master/ocfweb/test/__init__.py": {},
    "ocfweb-master/ocfweb/tv/main.py": {
        "tv_main": {
            "name": "tv_main",
            "location": 9,
            "return": [],
            "arguments": {
                "request": []
            }
        },
        "tv_labmap": {
            "name": "tv_labmap",
            "location": 19,
            "return": [],
            "arguments": {
                "request": [
                    "bool"
                ]
            }
        }
    },
    "ocfweb-master/ocfweb/tv/urls.py": {},
    "ocfweb-master/ocfweb/tv/__init__.py": {},
    "ocfweb-master/ocfweb/tv/templatetags/tv_formatting.py": {
        "tv_lab_hours": {
            "name": "tv_lab_hours",
            "location": 7,
            "return": [
                "str"
            ],
            "arguments": {
                "hour": []
            }
        },
        "tv_lab_hours_css": {
            "name": "tv_lab_hours_css",
            "location": 18,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "hours": []
            }
        }
    },
    "ocfweb-master/tests/caching_test.py": {
        "mock_ocfweb_version": {
            "name": "mock_ocfweb_version",
            "location": 110,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {}
        },
        "TestCacheLookupWithFallback.test_evaluates_fallback_on_miss": {
            "name": "test_evaluates_fallback_on_miss",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCacheLookupWithFallback.test_uses_cache_on_hit": {
            "name": "test_uses_cache_on_hit",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCacheDecorator.test_evaluates_function_on_miss": {
            "name": "test_evaluates_function_on_miss",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCacheDecorator.test_evaluates_function_on_miss_with_args": {
            "name": "test_evaluates_function_on_miss_with_args",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCacheDecorator.test_uses_cache_on_hit": {
            "name": "test_uses_cache_on_hit",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCacheDecorator.test_different_args_cached_separately": {
            "name": "test_different_args_cached_separately",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCacheDecorator.test_different_functions_cached_separately": {
            "name": "test_different_functions_cached_separately",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCacheKeys.test_make_key": {
            "name": "test_make_key",
            "location": 117,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_ocfweb_version": [
                    "str"
                ]
            }
        },
        "TestCacheKeys.test_make_function_call_key": {
            "name": "test_make_function_call_key",
            "location": 124,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_ocfweb_version": [
                    "str"
                ]
            }
        },
        "TestPeriodicDecorator.test_evaluates_function_on_miss": {
            "name": "test_evaluates_function_on_miss",
            "location": 148,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPeriodicDecorator.test_uses_cache_on_hit": {
            "name": "test_uses_cache_on_hit",
            "location": 155,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPeriodicDecorator.test_different_functions_cached_separately": {
            "name": "test_different_functions_cached_separately",
            "location": 169,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "ocfweb-master/tests/conftest.py": {
        "client": {
            "name": "client",
            "location": 10,
            "return": [
                "Client"
            ],
            "arguments": {}
        },
        "in_testing_environment": {
            "name": "in_testing_environment",
            "location": 15,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {}
        },
        "_logged_in_client": {
            "name": "_logged_in_client",
            "location": 20,
            "return": [
                "Client"
            ],
            "arguments": {
                "user": [
                    "bool"
                ]
            }
        },
        "client_guser": {
            "name": "client_guser",
            "location": 29,
            "return": [],
            "arguments": {}
        },
        "client_ggroup": {
            "name": "client_ggroup",
            "location": 34,
            "return": [],
            "arguments": {}
        },
        "clean_cache": {
            "name": "clean_cache",
            "location": 39,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {}
        }
    },
    "ocfweb-master/tests/end_to_end_test.py": {
        "assert_does_not_error": {
            "name": "assert_does_not_error",
            "location": 12,
            "return": [],
            "arguments": {
                "client": [],
                "path": []
            }
        },
        "_get_reversed_urlpatterns": {
            "name": "_get_reversed_urlpatterns",
            "location": 43,
            "return": [],
            "arguments": {
                "urlpatterns": []
            }
        },
        "test_view_does_not_error_with_default_args": {
            "name": "test_view_does_not_error_with_default_args",
            "location": 59,
            "return": [],
            "arguments": {
                "client": [],
                "path": []
            }
        }
    },
    "ocfweb-master/tests/__init__.py": {},
    "ocfweb-master/tests/account/vhost_mail_test.py": {
        "test_view_requires_login": {
            "name": "test_view_requires_login",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "view": [
                    "dict[, ]"
                ],
                "client": []
            }
        },
        "test_view_requires_group_account": {
            "name": "test_view_requires_group_account",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "view": [
                    "dict[, ]"
                ],
                "client_guser": []
            }
        },
        "test_main_view_works": {
            "name": "test_main_view_works",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "client_ggroup": [
                    "str"
                ]
            }
        },
        "mock_ggroup_vhost": {
            "name": "mock_ggroup_vhost",
            "location": 84,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {}
        },
        "mock_txn": {
            "name": "mock_txn",
            "location": 110,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {}
        },
        "mock_messages": {
            "name": "mock_messages",
            "location": 116,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {}
        },
        "test_update_add_new_addr": {
            "name": "test_update_add_new_addr",
            "location": 140,
            "return": [
                "None"
            ],
            "arguments": {
                "addr": [
                    "str",
                    "int"
                ],
                "password": [
                    "bool",
                    "str"
                ],
                "expected_password": [
                    "bool",
                    "str"
                ],
                "client_ggroup": [
                    "str"
                ],
                "mock_ggroup_vhost": [
                    "bool",
                    "str"
                ],
                "mock_messages": [
                    "str"
                ],
                "mock_txn": [
                    "bool",
                    "str"
                ]
            }
        },
        "test_update_add_new_addr_already_exists": {
            "name": "test_update_add_new_addr_already_exists",
            "location": 174,
            "return": [
                "None"
            ],
            "arguments": {
                "client_ggroup": [
                    "str"
                ],
                "mock_ggroup_vhost": [],
                "mock_messages": [],
                "mock_txn": []
            }
        },
        "test_update_fails_to_add_addr_to_bad_vhost": {
            "name": "test_update_fails_to_add_addr_to_bad_vhost",
            "location": 192,
            "return": [
                "None"
            ],
            "arguments": {
                "client_ggroup": [
                    "str"
                ],
                "mock_ggroup_vhost": [],
                "mock_messages": [],
                "mock_txn": []
            }
        },
        "test_update_delete_addr": {
            "name": "test_update_delete_addr",
            "location": 210,
            "return": [
                "None"
            ],
            "arguments": {
                "client_ggroup": [
                    "str"
                ],
                "mock_ggroup_vhost": [],
                "mock_messages": [],
                "mock_txn": []
            }
        },
        "test_update_delete_addr_nonexistent": {
            "name": "test_update_delete_addr_nonexistent",
            "location": 230,
            "return": [
                "None"
            ],
            "arguments": {
                "client_ggroup": [
                    "str"
                ],
                "mock_ggroup_vhost": [],
                "mock_messages": [],
                "mock_txn": []
            }
        },
        "test_update_replace_some_stuff": {
            "name": "test_update_replace_some_stuff",
            "location": 247,
            "return": [
                "None"
            ],
            "arguments": {
                "client_ggroup": [
                    "str"
                ],
                "mock_ggroup_vhost": [],
                "mock_messages": [],
                "mock_txn": []
            }
        },
        "test_update_remove_password": {
            "name": "test_update_remove_password",
            "location": 278,
            "return": [
                "None"
            ],
            "arguments": {
                "client_ggroup": [
                    "str"
                ],
                "mock_ggroup_vhost": [],
                "mock_messages": [],
                "mock_txn": []
            }
        },
        "test_update_replace_noop": {
            "name": "test_update_replace_noop",
            "location": 307,
            "return": [
                "None"
            ],
            "arguments": {
                "client_ggroup": [
                    "str"
                ],
                "mock_ggroup_vhost": [],
                "mock_messages": [],
                "mock_txn": []
            }
        },
        "test_update_replace_addr_nonexistent": {
            "name": "test_update_replace_addr_nonexistent",
            "location": 335,
            "return": [
                "None"
            ],
            "arguments": {
                "client_ggroup": [
                    "str"
                ],
                "mock_ggroup_vhost": [],
                "mock_messages": [],
                "mock_txn": []
            }
        },
        "test_update_replace_addr_bad_forward_to": {
            "name": "test_update_replace_addr_bad_forward_to",
            "location": 360,
            "return": [
                "None"
            ],
            "arguments": {
                "forward_to": [],
                "expected_error": [],
                "client_ggroup": [],
                "mock_ggroup_vhost": [],
                "mock_messages": [],
                "mock_txn": []
            }
        },
        "test_update_cant_move_addr_across_vhosts": {
            "name": "test_update_cant_move_addr_across_vhosts",
            "location": 385,
            "return": [
                "None"
            ],
            "arguments": {
                "client_ggroup": [
                    "str"
                ],
                "mock_ggroup_vhost": [],
                "mock_messages": [],
                "mock_txn": []
            }
        },
        "fake_request": {
            "name": "fake_request",
            "location": 403,
            "return": [],
            "arguments": {}
        },
        "assert_resp_is_redirect": {
            "name": "assert_resp_is_redirect",
            "location": 407,
            "return": [
                "None"
            ],
            "arguments": {
                "resp": [
                    "str",
                    "int"
                ]
            }
        },
        "test_error": {
            "name": "test_error",
            "location": 413,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_redirect_back": {
            "name": "test_redirect_back",
            "location": 425,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "fake_error": {
            "name": "fake_error",
            "location": 430,
            "return": [
                "typing.Generator[FakeError]"
            ],
            "arguments": {}
        },
        "test_get_action_valid": {
            "name": "test_get_action_valid",
            "location": 442,
            "return": [
                "None"
            ],
            "arguments": {
                "action": [
                    "str"
                ]
            }
        },
        "test_get_action_invalid": {
            "name": "test_get_action_invalid",
            "location": 447,
            "return": [
                "None"
            ],
            "arguments": {
                "action": [
                    "dict[, ]"
                ],
                "fake_error": []
            }
        },
        "test_parse_addr_success": {
            "name": "test_parse_addr_success",
            "location": 461,
            "return": [
                "None"
            ],
            "arguments": {
                "addr": [],
                "expected": [],
                "allow_wildcard": []
            }
        },
        "test_parse_addr_invalid": {
            "name": "test_parse_addr_invalid",
            "location": 480,
            "return": [
                "None"
            ],
            "arguments": {
                "addr": [
                    "bool"
                ],
                "allow_wildcard": [
                    "bool"
                ]
            }
        },
        "test_parse_addr_wildcards": {
            "name": "test_parse_addr_wildcards",
            "location": 491,
            "return": [
                "None"
            ],
            "arguments": {
                "addr": [
                    "str",
                    "tuple[typing.Union[int,int]]"
                ]
            }
        },
        "test_get_addr_valid": {
            "name": "test_get_addr_valid",
            "location": 507,
            "return": [
                "None"
            ],
            "arguments": {
                "addr": [
                    "str",
                    "int",
                    "list[]",
                    "dict[, ]"
                ],
                "name": [
                    "str",
                    "int",
                    "list[]",
                    "dict[, ]"
                ],
                "domain": [
                    "str",
                    "int",
                    "list[]",
                    "dict[, ]"
                ],
                "required": [
                    "str",
                    "int",
                    "list[]",
                    "dict[, ]"
                ]
            }
        },
        "test_get_addr_not_provided": {
            "name": "test_get_addr_not_provided",
            "location": 518,
            "return": [
                "None"
            ],
            "arguments": {
                "fake_error": []
            }
        },
        "test_get_addr_invalid_addr": {
            "name": "test_get_addr_invalid_addr",
            "location": 539,
            "return": [
                "None"
            ],
            "arguments": {
                "addr": [
                    "typing.Callable[, ]"
                ],
                "required": [],
                "fake_error": [
                    "str",
                    "None"
                ]
            }
        },
        "test_get_addr_no_permission": {
            "name": "test_get_addr_no_permission",
            "location": 558,
            "return": [
                "None"
            ],
            "arguments": {
                "addr": [],
                "domain": [
                    "dict[, ]",
                    "dict[str, typing.Any]"
                ],
                "required": [],
                "fake_error": []
            }
        },
        "test_get_forward_to_valid": {
            "name": "test_get_forward_to_valid",
            "location": 590,
            "return": [
                "None"
            ],
            "arguments": {
                "forward_to": [
                    "str"
                ],
                "expected": [
                    "bool"
                ]
            }
        },
        "test_get_forward_to_no_addrs_provided": {
            "name": "test_get_forward_to_no_addrs_provided",
            "location": 596,
            "return": [
                "None"
            ],
            "arguments": {
                "forward_to": [
                    "str"
                ],
                "fake_error": [
                    "str",
                    "bool",
                    "dict[str, typing.Any]",
                    "None"
                ]
            }
        },
        "test_get_forward_to_invalid_addrs_provided": {
            "name": "test_get_forward_to_invalid_addrs_provided",
            "location": 609,
            "return": [
                "None"
            ],
            "arguments": {
                "forward_to": [],
                "first_invalid": [
                    "dict[, ]",
                    "dict[str, typing.Any]",
                    "list[str]"
                ],
                "fake_error": []
            }
        },
        "test_get_password_no_name": {
            "name": "test_get_password_no_name",
            "location": 615,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_get_password_valid": {
            "name": "test_get_password_valid",
            "location": 619,
            "return": [
                "None"
            ],
            "arguments": {
                "fake_error": [
                    "list[str]",
                    "bool",
                    "str"
                ]
            }
        },
        "test_get_password_fails_strength_check": {
            "name": "test_get_password_fails_strength_check",
            "location": 628,
            "return": [
                "None"
            ],
            "arguments": {
                "fake_error": [
                    "str"
                ]
            }
        },
        "test_get_password_not_present": {
            "name": "test_get_password_not_present",
            "location": 640,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_get_password_empty": {
            "name": "test_get_password_empty",
            "location": 645,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "fake_vhosts_for_user": {
            "name": "fake_vhosts_for_user",
            "location": 651,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {}
        },
        "test_get_vhost_success": {
            "name": "test_get_vhost_success",
            "location": 663,
            "return": [
                "None"
            ],
            "arguments": {
                "domain": [
                    "str"
                ]
            }
        },
        "test_get_vhost_failure": {
            "name": "test_get_vhost_failure",
            "location": 669,
            "return": [
                "None"
            ],
            "arguments": {
                "domain": [
                    "str",
                    "dict[, ]"
                ]
            }
        },
        "fake_vhost": {
            "name": "fake_vhost",
            "location": 674,
            "return": [],
            "arguments": {}
        },
        "test_find_addr_success": {
            "name": "test_find_addr_success",
            "location": 686,
            "return": [
                "None"
            ],
            "arguments": {
                "addr": [],
                "fake_vhost": []
            }
        },
        "test_find_addr_failure": {
            "name": "test_find_addr_failure",
            "location": 691,
            "return": [
                "None"
            ],
            "arguments": {
                "addr": [],
                "fake_vhost": []
            }
        },
        "fake_cursor": {
            "name": "fake_cursor",
            "location": 696,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {}
        },
        "test_txn_commits_on_success": {
            "name": "test_txn_commits_on_success",
            "location": 708,
            "return": [
                "None"
            ],
            "arguments": {
                "fake_cursor": [
                    "dict[, ]"
                ]
            }
        },
        "test_txn_rolls_back_and_raises_on_failure": {
            "name": "test_txn_rolls_back_and_raises_on_failure",
            "location": 715,
            "return": [
                "None"
            ],
            "arguments": {
                "fake_cursor": [
                    "dict[, ]"
                ]
            }
        },
        "test_parse_csv_forward_addrs_success": {
            "name": "test_parse_csv_forward_addrs_success",
            "location": 731,
            "return": [
                "None"
            ],
            "arguments": {
                "addrs": [
                    "str",
                    "dict[str, typing.Any]"
                ],
                "expected": [
                    "str",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "test_parse_csv_forward_addrs_failure": {
            "name": "test_parse_csv_forward_addrs_failure",
            "location": 744,
            "return": [
                "None"
            ],
            "arguments": {
                "addrs": [
                    "str",
                    "float"
                ]
            }
        },
        "test_parse_csv_example_success": {
            "name": "test_parse_csv_example_success",
            "location": 750,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_parse_csv_failure": {
            "name": "test_parse_csv_failure",
            "location": 772,
            "return": [
                "None"
            ],
            "arguments": {
                "csv_text": [
                    "str"
                ],
                "fake_error": [
                    "int",
                    "str",
                    "float"
                ]
            }
        },
        "test_write_csv_has_correct_format": {
            "name": "test_write_csv_has_correct_format",
            "location": 780,
            "return": [
                "None"
            ],
            "arguments": {
                "mock_ggroup_vhost": []
            }
        },
        "check_csv_has_addresses": {
            "name": "check_csv_has_addresses",
            "location": 790,
            "return": [
                "None"
            ],
            "arguments": {
                "csv_str": [
                    "str"
                ],
                "addresses": [
                    "str"
                ]
            }
        },
        "test_write_csv_has_expected_rows": {
            "name": "test_write_csv_has_expected_rows",
            "location": 800,
            "return": [
                "None"
            ],
            "arguments": {
                "mock_ggroup_vhost": []
            }
        },
        "test_parse_then_write_csv_is_noop": {
            "name": "test_parse_then_write_csv_is_noop",
            "location": 807,
            "return": [
                "None"
            ],
            "arguments": {
                "mock_ggroup_vhost": []
            }
        },
        "test_import_csv_success": {
            "name": "test_import_csv_success",
            "location": 826,
            "return": [
                "None"
            ],
            "arguments": {
                "client_ggroup": [],
                "mock_ggroup_vhost": [],
                "mock_messages": [],
                "mock_txn": []
            }
        },
        "test_import_noop_csv": {
            "name": "test_import_noop_csv",
            "location": 873,
            "return": [
                "None"
            ],
            "arguments": {
                "client_ggroup": [],
                "mock_ggroup_vhost": [],
                "mock_messages": [],
                "mock_txn": []
            }
        },
        "test_import_empty_csv": {
            "name": "test_import_empty_csv",
            "location": 893,
            "return": [
                "None"
            ],
            "arguments": {
                "client_ggroup": [],
                "mock_ggroup_vhost": [],
                "mock_messages": [],
                "mock_txn": []
            }
        },
        "test_import_csv_missing": {
            "name": "test_import_csv_missing",
            "location": 911,
            "return": [
                "None"
            ],
            "arguments": {
                "client_ggroup": [],
                "mock_ggroup_vhost": [],
                "mock_messages": [],
                "mock_txn": []
            }
        },
        "test_import_csv_bad_vhost_fails": {
            "name": "test_import_csv_bad_vhost_fails",
            "location": 922,
            "return": [
                "None"
            ],
            "arguments": {
                "client_ggroup": [],
                "mock_ggroup_vhost": [],
                "mock_messages": [],
                "mock_txn": []
            }
        },
        "test_import_invalid_csv_fails": {
            "name": "test_import_invalid_csv_fails",
            "location": 951,
            "return": [
                "None"
            ],
            "arguments": {
                "csv_str": [],
                "expected_err": [],
                "client_ggroup": [],
                "mock_ggroup_vhost": [],
                "mock_messages": [],
                "mock_txn": []
            }
        },
        "test_export_csv_works": {
            "name": "test_export_csv_works",
            "location": 969,
            "return": [
                "None"
            ],
            "arguments": {
                "client_ggroup": [],
                "mock_ggroup_vhost": [],
                "mock_txn": []
            }
        },
        "test_export_csv_bad_vhost_fails": {
            "name": "test_export_csv_bad_vhost_fails",
            "location": 979,
            "return": [
                "None"
            ],
            "arguments": {
                "client_ggroup": [],
                "mock_ggroup_vhost": [],
                "mock_txn": [],
                "mock_messages": []
            }
        },
        "VerifyPassword.__init__": {
            "name": "__init__",
            "location": 123,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "password": [
                    "str",
                    "int"
                ]
            }
        },
        "VerifyPassword.__eq__": {
            "name": "__eq__",
            "location": 126,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "bool",
                    "None",
                    "float",
                    "str"
                ]
            }
        },
        "fake_error._fake_error": {
            "name": "_fake_error",
            "location": 434,
            "return": [
                "None"
            ],
            "arguments": {
                "request": [],
                "msg": []
            }
        },
        "test_get_password_fails_strength_check.fake_validate": {
            "name": "fake_validate",
            "location": 629,
            "return": [
                "None"
            ],
            "arguments": {
                "addr_name": [],
                "password": [],
                "strength_check": [
                    "bool"
                ]
            }
        },
        "fake_cursor.side_effect": {
            "name": "side_effect",
            "location": 700,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {}
        }
    },
    "ocfweb-master/tests/account/vhost_test.py": {
        "test_available_domain": {
            "name": "test_available_domain",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "domain": [
                    "str",
                    "int"
                ],
                "expected": [
                    "str",
                    "int"
                ]
            }
        },
        "test_valid_domain_external": {
            "name": "test_valid_domain_external",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "domain": [
                    "str",
                    "dict[, ]"
                ],
                "expected": [
                    "str",
                    "dict[, ]"
                ]
            }
        }
    },
    "ocfweb-master/tests/account/__init__.py": {},
    "ocfweb-master/tests/api/session_tracking_test.py": {
        "test_view_requires_post": {
            "name": "test_view_requires_post",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [
                    "dict[, ]"
                ]
            }
        },
        "test_view_requires_ocf_ip": {
            "name": "test_view_requires_ocf_ip",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "source": [
                    "str"
                ],
                "client": [
                    "dict[, ]"
                ]
            }
        },
        "test_failure_on_invalid_data": {
            "name": "test_failure_on_invalid_data",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [],
                "data": [
                    "dict[, ]",
                    "None",
                    "str"
                ]
            }
        },
        "mock_new_session": {
            "name": "mock_new_session",
            "location": 78,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {}
        },
        "mock_session_exists": {
            "name": "mock_session_exists",
            "location": 84,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {}
        },
        "mock_refresh_session": {
            "name": "mock_refresh_session",
            "location": 90,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {}
        },
        "mock_close_sessions": {
            "name": "mock_close_sessions",
            "location": 96,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {}
        },
        "test_create_new_session": {
            "name": "test_create_new_session",
            "location": 105,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [
                    "str",
                    "dict[, ]"
                ],
                "mock_new_session": [],
                "mock_refresh_session": [],
                "mock_close_sessions": []
            }
        },
        "test_refresh_session": {
            "name": "test_refresh_session",
            "location": 131,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [],
                "mock_refresh_session": [],
                "mock_new_session": [],
                "mock_close_sessions": []
            }
        },
        "test_close_session": {
            "name": "test_close_session",
            "location": 157,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [],
                "mock_close_sessions": [],
                "mock_refresh_session": [],
                "mock_session_exists": [],
                "mock_new_session": []
            }
        }
    },
    "ocfweb-master/tests/component/markdown_test.py": {
        "assert_markdown": {
            "name": "assert_markdown",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "content": [
                    "str",
                    "int",
                    "typing.Iterable[typing.Iterable[str]]"
                ],
                "expected_html": [
                    "str",
                    "None"
                ],
                "expected_toc": [
                    "None",
                    "str",
                    "typing.Any"
                ]
            }
        },
        "test_simple_markdown": {
            "name": "test_simple_markdown",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_backslash_linebreak": {
            "name": "test_backslash_linebreak",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_comments_get_stripped": {
            "name": "test_comments_get_stripped",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_code_rendering": {
            "name": "test_code_rendering",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "language": [
                    "str",
                    "int",
                    "typing.Mapping"
                ]
            }
        },
        "test_django_links": {
            "name": "test_django_links",
            "location": 101,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_header_default_id": {
            "name": "test_header_default_id",
            "location": 115,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_header_custom_id": {
            "name": "test_header_custom_id",
            "location": 126,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_header_with_collision_automatic": {
            "name": "test_header_with_collision_automatic",
            "location": 137,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_header_with_collision_manual": {
            "name": "test_header_with_collision_manual",
            "location": 150,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_table_of_contents": {
            "name": "test_table_of_contents",
            "location": 161,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_text_and_meta": {
            "name": "test_text_and_meta",
            "location": 191,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "ocfweb-master/tests/component/__init__.py": {},
    "ocfweb-master/tests/docs/docs_test.py": {
        "test_doc_does_not_error": {
            "name": "test_doc_does_not_error",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [
                    "str",
                    "tuple[typing.Union[str,str,str]]",
                    "None"
                ],
                "doc_name": [
                    "str"
                ]
            }
        }
    },
    "ocfweb-master/tests/docs/__init__.py": {},
    "ocfweb-master/tests/main/hosting_logos_test.py": {
        "test_images_load": {
            "name": "test_images_load",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "path": [
                    "str"
                ],
                "image": [
                    "str"
                ],
                "client": []
            }
        },
        "test_svg_images_load": {
            "name": "test_svg_images_load",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "path": [],
                "image": [],
                "client": []
            }
        },
        "test_legacy_images_redirect": {
            "name": "test_legacy_images_redirect",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "image": [],
                "client": []
            }
        }
    },
    "ocfweb-master/tests/main/robots_test.py": {
        "tests_robots_dot_txt": {
            "name": "tests_robots_dot_txt",
            "location": 1,
            "return": [
                "None"
            ],
            "arguments": {
                "client": []
            }
        }
    },
    "ocfweb-master/tests/main/__init__.py": {},
    "ocfweb-master/tests/middleware/errors_test.py": {
        "test_sanitize": {
            "name": "test_sanitize",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_sanitize_wsgi_context": {
            "name": "test_sanitize_wsgi_context",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    }
}
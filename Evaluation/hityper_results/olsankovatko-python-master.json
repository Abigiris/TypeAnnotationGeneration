{
    "olsankovatko-python-master/src/manage.py": {},
    "olsankovatko-python-master/src/engine/crates.py": {
        "Court.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "identifier": [
                    "bool",
                    "None",
                    "typing.Type"
                ],
                "is_empty": [
                    "bool",
                    "None",
                    "typing.Type"
                ]
            }
        },
        "Court.identifier": {
            "name": "identifier",
            "location": 16,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Court.is_empty": {
            "name": "is_empty",
            "location": 20,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Court.__repr__": {
            "name": "__repr__",
            "location": 23,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "Slot.__init__": {
            "name": "__init__",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "time_from": [
                    "bool"
                ]
            }
        },
        "Slot.add_court": {
            "name": "add_court",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "court": [
                    "float",
                    "int"
                ]
            }
        },
        "Slot.get_courts": {
            "name": "get_courts",
            "location": 35,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Slot.get_time_from": {
            "name": "get_time_from",
            "location": 38,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Slot.__repr__": {
            "name": "__repr__",
            "location": 42,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "Day.__init__": {
            "name": "__init__",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "date": []
            }
        },
        "Day.add_slot": {
            "name": "add_slot",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "slot": [
                    "float",
                    "int"
                ]
            }
        },
        "Day.get_slots": {
            "name": "get_slots",
            "location": 55,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Day.get_date": {
            "name": "get_date",
            "location": 58,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Day.__repr__": {
            "name": "__repr__",
            "location": 61,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "Schedule.__init__": {
            "name": "__init__",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Schedule.add_day": {
            "name": "add_day",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "day": [
                    "typing.Callable[[], T]",
                    "float"
                ]
            }
        },
        "Schedule.get_days": {
            "name": "get_days",
            "location": 72,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Schedule.__repr__": {
            "name": "__repr__",
            "location": 75,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "Schedule.__eq__": {
            "name": "__eq__",
            "location": 78,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        }
    },
    "olsankovatko-python-master/src/engine/exceptions.py": {},
    "olsankovatko-python-master/src/engine/parser.py": {
        "Parser.parse_schedule": {
            "name": "parse_schedule",
            "location": 14,
            "return": [
                "Schedule"
            ],
            "arguments": {
                "self": [],
                "html_page": [
                    "float"
                ]
            }
        },
        "Parser.generate_matrix": {
            "name": "generate_matrix",
            "location": 57,
            "return": [],
            "arguments": {
                "first_slot_time": [
                    "float",
                    "int"
                ],
                "last_slot_time": [
                    "int",
                    "float"
                ],
                "slot_length": [
                    "int"
                ],
                "court_ids": [
                    "list[str]",
                    "list[int]",
                    "list[bytes]"
                ]
            }
        },
        "Parser.extract_date_string": {
            "name": "extract_date_string",
            "location": 107,
            "return": [],
            "arguments": {
                "table_tag": [
                    "str",
                    "dict[str, str]",
                    "None"
                ]
            }
        },
        "Parser.parse_day_date": {
            "name": "parse_day_date",
            "location": 114,
            "return": [],
            "arguments": {
                "date_string": [
                    "str"
                ],
                "reference_date": [
                    "None",
                    "str",
                    "int",
                    "typing.Sequence[str]"
                ]
            }
        },
        "Parser.get_schedule_data": {
            "name": "get_schedule_data",
            "location": 129,
            "return": [],
            "arguments": {
                "html_page": [
                    "str"
                ]
            }
        },
        "Parser.expand_entries": {
            "name": "expand_entries",
            "location": 136,
            "return": [
                "list[dict[typing.Text, str]]"
            ],
            "arguments": {
                "self": [],
                "start": [
                    "str"
                ],
                "end": [
                    "str"
                ],
                "event_id": [
                    "str"
                ]
            }
        },
        "Parser.generate_slots_from_matrix": {
            "name": "generate_slots_from_matrix",
            "location": 154,
            "return": [
                "list[list[Slot]]"
            ],
            "arguments": {
                "self": [],
                "matrix": [
                    "dict[str, typing.Any]",
                    "dict[, ]",
                    "dict[str, dict[str, str]]"
                ]
            }
        }
    },
    "olsankovatko-python-master/src/engine/slot_finder.py": {
        "DesiredSlot.__init__": {
            "name": "__init__",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "court_priorities": [
                    "bool",
                    "float",
                    "str",
                    "tuple[]"
                ],
                "start_time": [
                    "float",
                    "int",
                    "str",
                    "None"
                ]
            }
        },
        "DesiredSlot.court_names": {
            "name": "court_names",
            "location": 12,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DesiredSlot.start_time": {
            "name": "start_time",
            "location": 16,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FoundSlot.__init__": {
            "name": "__init__",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "court_name": [
                    "str",
                    "list[str]",
                    "float",
                    "typing.Sequence[str]",
                    "bool"
                ],
                "start_time": [
                    "float",
                    "int"
                ]
            }
        },
        "FoundSlot.court_name": {
            "name": "court_name",
            "location": 26,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FoundSlot.start_time": {
            "name": "start_time",
            "location": 30,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FoundSlot.__repr__": {
            "name": "__repr__",
            "location": 33,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "FoundSlot.__eq__": {
            "name": "__eq__",
            "location": 36,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "SlotFinder.find_empty_slot": {
            "name": "find_empty_slot",
            "location": 41,
            "return": [
                "FoundSlot",
                "None"
            ],
            "arguments": {
                "self": [],
                "schedule": [],
                "desired_slot": [
                    "str"
                ]
            }
        }
    },
    "olsankovatko-python-master/src/engine/__init__.py": {},
    "olsankovatko-python-master/src/engine/tests/parser_test.py": {
        "ParserTestCase.test_parse_response": {
            "name": "test_parse_response",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ParserTestCase.test_date_parsing": {
            "name": "test_date_parsing",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ParserTestCase.test_slot_finder": {
            "name": "test_slot_finder",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ParserTestCase.test_generate_matrix": {
            "name": "test_generate_matrix",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ParserTestCase.provide_slot_finder": {
            "name": "provide_slot_finder",
            "location": 73,
            "return": [
                "list[typing.Union[list[typing.Union[DesiredSlot,FoundSlot]],list[typing.Optional[DesiredSlot]]]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ParserTestCase.provide_schedule": {
            "name": "provide_schedule",
            "location": 96,
            "return": [
                "Schedule"
            ],
            "arguments": {}
        }
    },
    "olsankovatko-python-master/src/engine/tests/__init__.py": {},
    "olsankovatko-python-master/src/olsankovatko/settings.py": {},
    "olsankovatko-python-master/src/olsankovatko/urls.py": {},
    "olsankovatko-python-master/src/olsankovatko/wsgi.py": {},
    "olsankovatko-python-master/src/olsankovatko/__init__.py": {},
    "olsankovatko-python-master/src/reservations/admin.py": {},
    "olsankovatko-python-master/src/reservations/apps.py": {},
    "olsankovatko-python-master/src/reservations/models.py": {
        "Sport.__str__": {
            "name": "__str__",
            "location": 11,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Court.__str__": {
            "name": "__str__",
            "location": 27,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "olsankovatko-python-master/src/reservations/tests.py": {},
    "olsankovatko-python-master/src/reservations/views.py": {},
    "olsankovatko-python-master/src/reservations/__init__.py": {},
    "olsankovatko-python-master/src/reservations/migrations/0001_initial.py": {},
    "olsankovatko-python-master/src/reservations/migrations/0002_auto_20181224_1206.py": {},
    "olsankovatko-python-master/src/reservations/migrations/0003_sport_olsanka_id.py": {},
    "olsankovatko-python-master/src/reservations/migrations/0004_court.py": {},
    "olsankovatko-python-master/src/reservations/migrations/__init__.py": {}
}
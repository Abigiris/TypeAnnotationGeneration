{
    "opportunity-master/sentry.conf.py": {},
    "opportunity-master/app/run_app.py": {
        "run": {
            "name": "run",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "opportunity-master/app/setup.py": {},
    "opportunity-master/app/app/api.py": {
        "get_data_from_json": {
            "name": "get_data_from_json",
            "location": 22,
            "return": [
                "dict[str, typing.Any]",
                "bytes",
                "dict[, ]",
                "dict[str, int]",
                "str",
                "None"
            ],
            "arguments": {}
        },
        "get_query_string_params": {
            "name": "get_query_string_params",
            "location": 31,
            "return": [
                "dict[, ]"
            ],
            "arguments": {}
        },
        "get_resource": {
            "name": "get_resource",
            "location": 36,
            "return": [
                "list[]"
            ],
            "arguments": {
                "Resource": [
                    "str",
                    "int",
                    "dict[str, typing.Any]"
                ],
                "ID": [
                    "str",
                    "None",
                    "int"
                ]
            }
        },
        "create_resource": {
            "name": "create_resource",
            "location": 47,
            "return": [],
            "arguments": {
                "Resource": []
            }
        },
        "update_resource": {
            "name": "update_resource",
            "location": 67,
            "return": [],
            "arguments": {
                "Resource": [
                    "str",
                    "int",
                    "None"
                ],
                "ID": [
                    "None",
                    "str",
                    "bool"
                ]
            }
        },
        "delete_resource": {
            "name": "delete_resource",
            "location": 105,
            "return": [],
            "arguments": {
                "Resource": [
                    "str",
                    "int"
                ],
                "ID": [
                    "str"
                ]
            }
        },
        "get_create_update_or_delete": {
            "name": "get_create_update_or_delete",
            "location": 128,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "resource": [
                    "str",
                    "int",
                    "dict[str, str]"
                ],
                "ID": [
                    "None",
                    "bool",
                    "str",
                    "dict[tuple[typing.Union[typing.Any,str]], int]"
                ]
            }
        }
    },
    "opportunity-master/app/app/app.py": {
        "Base.__repr__": {
            "name": "__repr__",
            "location": 41,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "Base.to_dict": {
            "name": "to_dict",
            "location": 44,
            "return": [
                "dict[typing.Text, ]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Base.from_dict": {
            "name": "from_dict",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "dict[str, typing.Any]",
                    "dict[, ]",
                    "None",
                    "int"
                ],
                "model_dict": [
                    "dict[str, typing.Any]",
                    "dict[, ]",
                    "None",
                    "int"
                ]
            }
        },
        "Base.update_from_dict": {
            "name": "update_from_dict",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "model_dict": []
            }
        },
        "Base.delete": {
            "name": "delete",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "opportunity-master/app/app/config.py": {},
    "opportunity-master/app/app/constants.py": {},
    "opportunity-master/app/app/models.py": {
        "Camera.from_dict": {
            "name": "from_dict",
            "location": 15,
            "return": [],
            "arguments": {
                "cls": [
                    "str",
                    "dict[, ]",
                    "typing.NamedTuple",
                    "bool"
                ],
                "camera_dict": [
                    "str"
                ]
            }
        },
        "Camera.to_dict": {
            "name": "to_dict",
            "location": 20,
            "return": [
                "dict[typing.Text, ]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Camera.update_from_dict": {
            "name": "update_from_dict",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "camera_dict": []
            }
        },
        "ProductType.from_dict": {
            "name": "from_dict",
            "location": 42,
            "return": [],
            "arguments": {
                "cls": [
                    "str",
                    "bytes"
                ],
                "type_dict": [
                    "str",
                    "bytes"
                ]
            }
        },
        "ProductType.to_dict": {
            "name": "to_dict",
            "location": 47,
            "return": [
                "dict[typing.Text, ]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ProductType.update_from_dict": {
            "name": "update_from_dict",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "type_dict": [
                    "str",
                    "list[str]"
                ]
            }
        },
        "Image.from_dict": {
            "name": "from_dict",
            "location": 81,
            "return": [],
            "arguments": {
                "cls": [
                    "str",
                    "None"
                ],
                "image_dict": [
                    "str"
                ]
            }
        },
        "Image.to_dict": {
            "name": "to_dict",
            "location": 91,
            "return": [
                "dict[typing.Text, ]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Image.update_from_dict": {
            "name": "update_from_dict",
            "location": 107,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "image_dict": [
                    "str"
                ]
            }
        }
    },
    "opportunity-master/app/app/__init__.py": {},
    "opportunity-master/app/tests/conftest.py": {
        "turn_off_sentry": {
            "name": "turn_off_sentry",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "docker_container": {
            "name": "docker_container",
            "location": 20,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {}
        },
        "application": {
            "name": "application",
            "location": 55,
            "return": [],
            "arguments": {}
        },
        "session": {
            "name": "session",
            "location": 62,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "application": [
                    "list[str]",
                    "bool",
                    "list[dict[str, typing.Any]]"
                ],
                "docker_container": [
                    "list[str]",
                    "bool",
                    "list[dict[str, typing.Any]]"
                ]
            }
        }
    },
    "opportunity-master/app/tests/test_api.py": {
        "test_get_query_string_params": {
            "name": "test_get_query_string_params",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "application": []
            }
        },
        "test_get_resource_empty": {
            "name": "test_get_resource_empty",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "session": [
                    "bool"
                ],
                "application": []
            }
        },
        "test_get_resource_single_item": {
            "name": "test_get_resource_single_item",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "session": []
            }
        },
        "test_get_resource_not_found": {
            "name": "test_get_resource_not_found",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "session": [
                    "bool"
                ]
            }
        },
        "test_get_resource_multiple_items": {
            "name": "test_get_resource_multiple_items",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "session": [],
                "application": []
            }
        },
        "test_get_data_from_json": {
            "name": "test_get_data_from_json",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "application": []
            }
        },
        "test_create_resource": {
            "name": "test_create_resource",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "session": [
                    "str",
                    "bool"
                ],
                "application": []
            }
        },
        "test_update_resource": {
            "name": "test_update_resource",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "session": [],
                "application": []
            }
        },
        "test_delete_resource": {
            "name": "test_delete_resource",
            "location": 113,
            "return": [
                "None"
            ],
            "arguments": {
                "session": []
            }
        },
        "test_get_create_update_or_delete": {
            "name": "test_get_create_update_or_delete",
            "location": 130,
            "return": [
                "None"
            ],
            "arguments": {
                "session": [
                    "bool"
                ],
                "application": []
            }
        }
    },
    "opportunity-master/app/tests/test_models.py": {
        "image_session": {
            "name": "image_session",
            "location": 84,
            "return": [],
            "arguments": {
                "session": []
            }
        },
        "TestCamera.test_to_dict": {
            "name": "test_to_dict",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "session": []
            }
        },
        "TestCamera.test_from_dict": {
            "name": "test_from_dict",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCamera.test_update_from_dict": {
            "name": "test_update_from_dict",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCamera.test_delete": {
            "name": "test_delete",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "session": []
            }
        },
        "TestCamera.test_name_is_unique": {
            "name": "test_name_is_unique",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "session": []
            }
        },
        "TestProductType.test_to_dict": {
            "name": "test_to_dict",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "session": []
            }
        },
        "TestProductType.test_from_dict": {
            "name": "test_from_dict",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestProductType.test_update_from_dict": {
            "name": "test_update_from_dict",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestProductType.test_delete": {
            "name": "test_delete",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "session": []
            }
        },
        "TestProductType.test_name_is_unique": {
            "name": "test_name_is_unique",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "session": []
            }
        },
        "TestImage.init_image": {
            "name": "init_image",
            "location": 95,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestImage.test_to_dict": {
            "name": "test_to_dict",
            "location": 105,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "image_session": [
                    "str",
                    "dict[str, str]",
                    "None",
                    "dict[, ]"
                ]
            }
        },
        "TestImage.test_from_dict": {
            "name": "test_from_dict",
            "location": 120,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestImage.test_update_from_dict": {
            "name": "test_update_from_dict",
            "location": 139,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestImage.test_delete": {
            "name": "test_delete",
            "location": 158,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "image_session": [
                    "typing.Any",
                    "None",
                    "int"
                ]
            }
        },
        "TestImage.test_name_is_unique": {
            "name": "test_name_is_unique",
            "location": 166,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "image_session": [
                    "dict[, ]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "TestImage.test_many_to_one_relationships": {
            "name": "test_many_to_one_relationships",
            "location": 175,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "image_session": [
                    "dict[, ]",
                    "typing.Callable[T, bool]"
                ]
            }
        }
    },
    "opportunity-master/app/tests/__init__.py": {},
    "opportunity-master/docs/conf.py": {},
    "opportunity-master/stubs/aioredis.py": {},
    "opportunity-master/stubs/async_lru.py": {
        "alru_cache": {
            "name": "alru_cache",
            "location": 3,
            "return": [],
            "arguments": {
                "fn": [],
                "maxsize": [],
                "typed": [],
                "cls": [],
                "kwargs": [],
                "cache_exceptions": [],
                "loop": []
            }
        }
    },
    "opportunity-master/stubs/pvl.py": {
        "loads": {
            "name": "loads",
            "location": 33,
            "return": [],
            "arguments": {
                "data": [],
                "cls": [],
                "strict": []
            }
        },
        "dumps": {
            "name": "dumps",
            "location": 34,
            "return": [],
            "arguments": {
                "module": []
            }
        },
        "OrderedMultiDict.__getitem__": {
            "name": "__getitem__",
            "location": 8,
            "return": [],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "OrderedMultiDict.__setitem__": {
            "name": "__setitem__",
            "location": 9,
            "return": [],
            "arguments": {
                "self": [],
                "key": [],
                "value": []
            }
        },
        "OrderedMultiDict.__iter__": {
            "name": "__iter__",
            "location": 10,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "OrderedMultiDict.__len__": {
            "name": "__len__",
            "location": 11,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "OrderedMultiDict.copy": {
            "name": "copy",
            "location": 12,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PVLModule.valid": {
            "name": "valid",
            "location": 18,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PVLModule.copy": {
            "name": "copy",
            "location": 19,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PVLDecoder.set_strict": {
            "name": "set_strict",
            "location": 24,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PVLDecoder.decode": {
            "name": "decode",
            "location": 25,
            "return": [],
            "arguments": {
                "self": [],
                "stream": []
            }
        }
    },
    "opportunity-master/stubs/__init__.py": {},
    "opportunity-master/web/run_app.py": {},
    "opportunity-master/web/setup.py": {},
    "opportunity-master/web/tests/conftest.py": {
        "turn_off_sentry": {
            "name": "turn_off_sentry",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "loop": {
            "name": "loop",
            "location": 21,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {}
        },
        "event_loop": {
            "name": "event_loop",
            "location": 27,
            "return": [
                "typing.Generator[float]"
            ],
            "arguments": {
                "loop": [
                    "float"
                ]
            }
        }
    },
    "opportunity-master/web/tests/test_app.py": {},
    "opportunity-master/web/tests/test_pdsimage.py": {},
    "opportunity-master/web/tests/test_redis_cache.py": {},
    "opportunity-master/web/tests/__init__.py": {},
    "opportunity-master/web/web/app.py": {
        "SessionQuart.__init__": {
            "name": "__init__",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "opportunity-master/web/web/constants.py": {},
    "opportunity-master/web/web/pdsimage.py": {
        "PDSImage.__init__": {
            "name": "__init__",
            "location": 210,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict[str, typing.Any]",
                    "list[]",
                    "str",
                    "dict[str, str]",
                    "dict[, ]",
                    "None"
                ],
                "label": [
                    "bool",
                    "str",
                    "list[str]",
                    "None"
                ]
            }
        },
        "PDSImage.__repr__": {
            "name": "__repr__",
            "location": 214,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "opportunity-master/web/web/redis_cache.py": {
        "RedisCache.__init__": {
            "name": "__init__",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "rcache": [
                    "int",
                    "float"
                ]
            }
        },
        "HashCache.__repr__": {
            "name": "__repr__",
            "location": 60,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "opportunity-master/web/web/__init__.py": {}
}
{
    "pacman-master/pacman.py": {
        "pacman": {
            "name": "pacman",
            "location": 21,
            "return": [
                "list[]"
            ],
            "arguments": {
                "input_filename": [
                    "str"
                ]
            }
        }
    },
    "pacman-master/app/board.py": {
        "Board.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "int",
                    "str"
                ],
                "y": [
                    "int",
                    "str",
                    "tuple[typing.Union[float,float]]"
                ],
                "walls": [
                    "int",
                    "float"
                ]
            }
        },
        "Board.height": {
            "name": "height",
            "location": 19,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Board.width": {
            "name": "width",
            "location": 22,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Board.is_valid_move": {
            "name": "is_valid_move",
            "location": 25,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "int"
                ],
                "y": [
                    "int"
                ]
            }
        }
    },
    "pacman-master/app/board_test.py": {
        "BoardTests.test_valid": {
            "name": "test_valid",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BoardTests.test_invalid_s": {
            "name": "test_invalid_s",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BoardTests.test_invalid_n": {
            "name": "test_invalid_n",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BoardTests.test_invalid_e": {
            "name": "test_invalid_e",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BoardTests.test_invalid_w": {
            "name": "test_invalid_w",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BoardTests.test_height": {
            "name": "test_height",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BoardTests.test_width": {
            "name": "test_width",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BoardTests.test_move_in_a_wall": {
            "name": "test_move_in_a_wall",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BoardTests.test_move_near_a_wall": {
            "name": "test_move_near_a_wall",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pacman-master/app/game_orchestrator.py": {
        "GameOrchestrator.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "input_data": [
                    "int",
                    "dict[, ]",
                    "list[dict[str, typing.Any]]"
                ]
            }
        },
        "GameOrchestrator.play": {
            "name": "play",
            "location": 29,
            "return": [
                "tuple[typing.Union[str,int]]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pacman-master/app/game_orchestrator_test.py": {
        "GameOrchestratorTests.test_invalid_position_not_in": {
            "name": "test_invalid_position_not_in",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GameOrchestratorTests.test_invalid_position_wall": {
            "name": "test_invalid_position_wall",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GameOrchestratorTests.test_game_without_bumping_in_a_wall": {
            "name": "test_game_without_bumping_in_a_wall",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GameOrchestratorTests.test_game_with_coming_back_on_previous_steps": {
            "name": "test_game_with_coming_back_on_previous_steps",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GameOrchestratorTests.test_game_with_bumping_on_wall": {
            "name": "test_game_with_bumping_on_wall",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GameOrchestratorTests.test_game_with_bumping_on_edge": {
            "name": "test_game_with_bumping_on_edge",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pacman-master/app/the_pacman.py": {
        "ThePacman.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "float",
                    "int"
                ],
                "y": [
                    "int",
                    "tuple[typing.Union[int,int]]",
                    "str"
                ]
            }
        },
        "ThePacman.move": {
            "name": "move",
            "location": 15,
            "return": [],
            "arguments": {
                "self": [],
                "direction": [
                    "int",
                    "str",
                    "typing.Iterable['Context']"
                ]
            }
        },
        "ThePacman.coord": {
            "name": "coord",
            "location": 21,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ThePacman.modify_location": {
            "name": "modify_location",
            "location": 24,
            "return": [
                "ThePacman"
            ],
            "arguments": {
                "self": [],
                "dx": [
                    "bool",
                    "list[]"
                ],
                "dy": [
                    "bool",
                    "list[]"
                ]
            }
        }
    },
    "pacman-master/app/the_pacman_test.py": {
        "ThePacmanTests.test_go_s": {
            "name": "test_go_s",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ThePacmanTests.test_go_n": {
            "name": "test_go_n",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ThePacmanTests.test_go_e": {
            "name": "test_go_e",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ThePacmanTests.test_go_w": {
            "name": "test_go_w",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pacman-master/app/__init__.py": {},
    "pacman-master/resources/resource_loader.py": {
        "load_input": {
            "name": "load_input",
            "location": 23,
            "return": [
                "Input"
            ],
            "arguments": {
                "filename": [
                    "str",
                    "list[str]"
                ]
            }
        },
        "load": {
            "name": "load",
            "location": 72,
            "return": [
                "Resources"
            ],
            "arguments": {
                "input_filename": [
                    "typing.Text"
                ]
            }
        },
        "load_input.process_moves": {
            "name": "process_moves",
            "location": 30,
            "return": [
                "list[]"
            ],
            "arguments": {
                "line": [],
                "line_number": []
            }
        },
        "load_input.process_coord": {
            "name": "process_coord",
            "location": 44,
            "return": [
                "tuple[int]"
            ],
            "arguments": {
                "line": [],
                "line_number": []
            }
        }
    },
    "pacman-master/resources/resource_loader_test.py": {
        "ResourceLoaderTests.test_load_input_good": {
            "name": "test_load_input_good",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ResourceLoaderTests.test_load_input_no_wall": {
            "name": "test_load_input_no_wall",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ResourceLoaderTests.test_load_input_coord_error": {
            "name": "test_load_input_coord_error",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ResourceLoaderTests.test_load_input_moves_error": {
            "name": "test_load_input_moves_error",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ResourceLoaderTests.test_load_input_missing_size": {
            "name": "test_load_input_missing_size",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pacman-master/resources/__init__.py": {},
    "pacman-master/util/exception.py": {},
    "pacman-master/util/logger.py": {
        "setup": {
            "name": "setup",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "default_path": [
                    "str"
                ],
                "default_level": [],
                "env_key": [
                    "typing.Text"
                ]
            }
        }
    },
    "pacman-master/util/__init__.py": {}
}
{
    "parallel-html-scraper-master/setup.py": {
        "main": {
            "name": "main",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "parallel-html-scraper-master/tasks.py": {
        "_delete_file": {
            "name": "_delete_file",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "file": []
            }
        },
        "style": {
            "name": "style",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "context": [
                    "dict[str, typing.Any]",
                    "dict[, ]",
                    "bool"
                ],
                "check": [
                    "bool"
                ]
            }
        },
        "isort": {
            "name": "isort",
            "location": 51,
            "return": [],
            "arguments": {
                "context": [],
                "check": [
                    "bool"
                ]
            }
        },
        "pipenv_setup": {
            "name": "pipenv_setup",
            "location": 57,
            "return": [],
            "arguments": {
                "context": [],
                "check": [
                    "bool"
                ]
            }
        },
        "black": {
            "name": "black",
            "location": 63,
            "return": [],
            "arguments": {
                "context": [],
                "check": [
                    "bool"
                ]
            }
        },
        "lint_flake8": {
            "name": "lint_flake8",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "context": []
            }
        },
        "lint_pylint": {
            "name": "lint_pylint",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "context": []
            }
        },
        "lint_mypy": {
            "name": "lint_mypy",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "context": []
            }
        },
        "lint": {
            "name": "lint",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {
                "_context": [
                    "int",
                    "str",
                    "typing.Iterable['Context']"
                ]
            }
        },
        "radon_cc": {
            "name": "radon_cc",
            "location": 101,
            "return": [
                "None"
            ],
            "arguments": {
                "context": []
            }
        },
        "radon_mi": {
            "name": "radon_mi",
            "location": 109,
            "return": [
                "None"
            ],
            "arguments": {
                "context": []
            }
        },
        "radon": {
            "name": "radon",
            "location": 117,
            "return": [
                "None"
            ],
            "arguments": {
                "_context": [
                    "int",
                    "str",
                    "typing.Iterable['Context']"
                ]
            }
        },
        "xenon": {
            "name": "xenon",
            "location": 124,
            "return": [
                "None"
            ],
            "arguments": {
                "context": []
            }
        },
        "test": {
            "name": "test",
            "location": 132,
            "return": [
                "None"
            ],
            "arguments": {
                "context": []
            }
        },
        "coverage": {
            "name": "coverage",
            "location": 141,
            "return": [
                "None"
            ],
            "arguments": {
                "context": [],
                "publish": [
                    "bool"
                ],
                "xml": [
                    "bool"
                ]
            }
        },
        "clean_build": {
            "name": "clean_build",
            "location": 160,
            "return": [
                "None"
            ],
            "arguments": {
                "context": []
            }
        },
        "clean_python": {
            "name": "clean_python",
            "location": 172,
            "return": [
                "None"
            ],
            "arguments": {
                "context": []
            }
        },
        "clean_tests": {
            "name": "clean_tests",
            "location": 183,
            "return": [
                "None"
            ],
            "arguments": {
                "_context": [
                    "bool",
                    "typing.Callable[[], bytes]",
                    "dict[scripts.node_integration_tests.playbooks.test_config_base.NodeId, pathlib.Path]",
                    "BaseException"
                ]
            }
        },
        "clean": {
            "name": "clean",
            "location": 192,
            "return": [
                "None"
            ],
            "arguments": {
                "_context": [
                    "int",
                    "str",
                    "typing.Iterable['Context']"
                ]
            }
        },
        "dist": {
            "name": "dist",
            "location": 199,
            "return": [
                "None"
            ],
            "arguments": {
                "context": []
            }
        }
    },
    "parallel-html-scraper-master/parallelhtmlscraper/exceptions.py": {
        "HttpTimeoutError.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HttpTimeoutError.__str__": {
            "name": "__str__",
            "location": 17,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "parallel-html-scraper-master/parallelhtmlscraper/html_analyzer.py": {},
    "parallel-html-scraper-master/parallelhtmlscraper/html_request_coroutine.py": {
        "HtmlRequestCoroutine.__init__": {
            "name": "__init__",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "parallel-html-scraper-master/parallelhtmlscraper/html_text_load_coroutine.py": {},
    "parallel-html-scraper-master/parallelhtmlscraper/parallel_html_request_coroutine.py": {},
    "parallel-html-scraper-master/parallelhtmlscraper/parallel_html_scraper.py": {
        "ParallelHtmlScraper.execute": {
            "name": "execute",
            "location": 27,
            "return": [],
            "arguments": {
                "base_url": [
                    "int",
                    "str",
                    "typing.Iterable[str]"
                ],
                "list_url": [
                    "int",
                    "str",
                    "typing.Iterable[str]"
                ],
                "analyzer": [
                    "int",
                    "str",
                    "typing.Iterable[str]"
                ]
            }
        }
    },
    "parallel-html-scraper-master/parallelhtmlscraper/__init__.py": {},
    "parallel-html-scraper-master/tests/conftest.py": {
        "mock_aioresponse": {
            "name": "mock_aioresponse",
            "location": 14,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {}
        },
        "html_byte": {
            "name": "html_byte",
            "location": 20,
            "return": [
                "typing.Generator[int]"
            ],
            "arguments": {
                "resource_path_root": [
                    "dict[, ]",
                    "int"
                ],
                "request": [
                    "dict[, ]",
                    "int"
                ]
            }
        },
        "client_response_html_byte": {
            "name": "client_response_html_byte",
            "location": 38,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "resource_path_root": [
                    "bool",
                    "str"
                ],
                "request": [
                    "bool",
                    "str"
                ],
                "mock_aioresponse": [
                    "dict[str, str]",
                    "str",
                    "bool",
                    "typing.IO"
                ]
            }
        },
        "client_response": {
            "name": "client_response",
            "location": 47,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "mock_aioresponse": [
                    "str",
                    "float",
                    "None"
                ],
                "request": [
                    "str",
                    "float",
                    "None"
                ]
            }
        },
        "generate_client_response": {
            "name": "generate_client_response",
            "location": 52,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "mock_aioresponse": [
                    "str",
                    "set[str]",
                    "typing.IO",
                    "bool"
                ],
                "aioresponse_parameter": [
                    "str",
                    "set[str]",
                    "typing.IO",
                    "bool"
                ]
            }
        }
    },
    "parallel-html-scraper-master/tests/test_hrml_analyzer.py": {},
    "parallel-html-scraper-master/tests/test_html_request_coroutine.py": {},
    "parallel-html-scraper-master/tests/test_html_text_load_coroutine.py": {},
    "parallel-html-scraper-master/tests/test_parallel_url_scraper.py": {
        "TestParallelHtmlScraper.test": {
            "name": "test",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [],
                "mock_aioresponse": [],
                "monkeypatch": [],
                "resource_path_root": []
            }
        }
    },
    "parallel-html-scraper-master/tests/__init__.py": {},
    "parallel-html-scraper-master/tests/testlibraries/analyzer_for_test.py": {},
    "parallel-html-scraper-master/tests/testlibraries/__init__.py": {}
}
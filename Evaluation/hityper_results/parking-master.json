{
    "parking-master/setup.py": {},
    "parking-master/parking/__init__.py": {},
    "parking-master/parking/backend/__init__.py": {},
    "parking-master/parking/backend/__main__.py": {
        "make_app": {
            "name": "make_app",
            "location": 15,
            "return": [],
            "arguments": {
                "url": [
                    "bool",
                    "str"
                ],
                "init_tables": [
                    "bool"
                ],
                "reset_tables": [
                    "bool"
                ]
            }
        },
        "make_and_run_app": {
            "name": "make_and_run_app",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "url": [
                    "bool",
                    "str",
                    "typing.Callable[[], str]",
                    "None",
                    "list[str]"
                ],
                "init_tables": [
                    "bool"
                ],
                "reset_tables": [
                    "bool"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "temp_db": [
                    "bool",
                    "str",
                    "list[]",
                    "dict[, ]"
                ],
                "db_url": [
                    "str",
                    "bool"
                ],
                "reset_tables": [
                    "str",
                    "bool"
                ]
            }
        }
    },
    "parking-master/parking/backend/db/dbaccess.py": {},
    "parking-master/parking/backend/db/sql_constants.py": {},
    "parking-master/parking/backend/db/__init__.py": {},
    "parking-master/parking/backend/engine/alloc_engine.py": {
        "AllocationEngine.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dba": [
                    "bool",
                    "str",
                    "None"
                ],
                "user_sessions": [
                    "str",
                    "None"
                ]
            }
        },
        "AllocationEngine.recalculate_allocations.sort_func": {
            "name": "sort_func",
            "location": 62,
            "return": [],
            "arguments": {
                "elem": []
            }
        }
    },
    "parking-master/parking/backend/engine/__init__.py": {},
    "parking-master/parking/backend/sensor_server/rest_server.py": {
        "ParkingLotHandlerBase.initialize": {
            "name": "initialize",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dba": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ]
            }
        },
        "ParkingLotHandlerBase.write_error": {
            "name": "write_error",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "status_code": [
                    "int",
                    "str",
                    "list[str]"
                ]
            }
        },
        "ParkingLotHandlerBase.prepare": {
            "name": "prepare",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ParkingLotHandlerBase.load_from_json_data": {
            "name": "load_from_json_data",
            "location": 31,
            "return": [],
            "arguments": {
                "cls": [
                    "dict[, ]",
                    "str",
                    "typing.Sequence[str]"
                ],
                "json_data": [
                    "dict[, ]",
                    "str",
                    "typing.Sequence[str]"
                ],
                "err_msg": [
                    "str",
                    "dict[str, typing.Any]",
                    "bool",
                    "typing.Type",
                    "dict[, ]",
                    "typing.Mapping"
                ]
            }
        },
        "IndividualLotAvailableHandler.initialize": {
            "name": "initialize",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dba": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ],
                "engine": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ]
            }
        },
        "IndividualLotDeleteHandler.initialize": {
            "name": "initialize",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dba": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ]
            }
        }
    },
    "parking-master/parking/backend/sensor_server/__init__.py": {},
    "parking-master/parking/backend/user_server/session.py": {
        "UserSessions.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserSessions.add_user": {
            "name": "add_user",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "user_id": [
                    "str",
                    "bool",
                    "list[str]",
                    "None"
                ],
                "session": [
                    "str",
                    "bool",
                    "list[str]",
                    "None"
                ]
            }
        },
        "UserSessions.remove_user": {
            "name": "remove_user",
            "location": 26,
            "return": [],
            "arguments": {
                "self": [],
                "user_id": [
                    "int",
                    "str",
                    "typing.Callable[, ]"
                ]
            }
        },
        "UserSessions.get_user": {
            "name": "get_user",
            "location": 29,
            "return": [],
            "arguments": {
                "self": [],
                "user_id": [
                    "int",
                    "str"
                ]
            }
        },
        "UserSessions.update_user_location": {
            "name": "update_user_location",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "user_id": [
                    "str",
                    "int"
                ],
                "location": [
                    "str",
                    "int"
                ]
            }
        },
        "UserSessions.add_user_rejection": {
            "name": "add_user_rejection",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "user_id": [
                    "int",
                    "list[int]",
                    "str"
                ],
                "parking_id": [
                    "int",
                    "list[int]",
                    "str"
                ]
            }
        },
        "UserSessions.deallocate": {
            "name": "deallocate",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "user_id": [
                    "str"
                ]
            }
        }
    },
    "parking-master/parking/backend/user_server/wsserver.py": {
        "UserWSHandler.check_origin": {
            "name": "check_origin",
            "location": 17,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "origin": [
                    "int",
                    "str",
                    "typing.Iterable[C]"
                ]
            }
        },
        "UserWSHandler.initialize": {
            "name": "initialize",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "usessions": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ],
                "engine": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ]
            }
        },
        "UserWSHandler.open": {
            "name": "open",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "user_id": [
                    "int"
                ]
            }
        },
        "UserWSHandler.handle_location_update": {
            "name": "handle_location_update",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "str"
                ]
            }
        },
        "UserWSHandler.handle_parking_rejection": {
            "name": "handle_parking_rejection",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "str",
                    "int"
                ]
            }
        },
        "UserWSHandler.handle_parking_cancellation": {
            "name": "handle_parking_cancellation",
            "location": 105,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "str",
                    "int"
                ]
            }
        },
        "UserWSHandler.handle_deallocation": {
            "name": "handle_deallocation",
            "location": 109,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserWSHandler.on_close": {
            "name": "on_close",
            "location": 113,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserWSHandler.write_as_json": {
            "name": "write_as_json",
            "location": 119,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "model": [
                    "int"
                ]
            }
        }
    },
    "parking-master/parking/backend/user_server/__init__.py": {},
    "parking-master/parking/shared/clients.py": {
        "ParkingLotRest.__init__": {
            "name": "__init__",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "base_url": [
                    "str",
                    "int",
                    "dict[str, typing.Any]"
                ],
                "http_client": [
                    "str",
                    "bool",
                    "list[typing.Callable[, ]]"
                ]
            }
        },
        "CarWebsocket.__init__": {
            "name": "__init__",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ws": [
                    "int",
                    "float"
                ],
                "receive_callbacks": [
                    "None",
                    "int",
                    "float"
                ]
            }
        },
        "CarWebsocket._on_message": {
            "name": "_on_message",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "int",
                    "str",
                    "dict[, ]"
                ]
            }
        },
        "CarWebsocket.receive": {
            "name": "receive",
            "location": 100,
            "return": [],
            "arguments": {
                "self": [],
                "message_type": [
                    "str",
                    "BaseException"
                ]
            }
        }
    },
    "parking-master/parking/shared/location.py": {},
    "parking-master/parking/shared/rest_models.py": {},
    "parking-master/parking/shared/util.py": {
        "ensure": {
            "name": "ensure",
            "location": 5,
            "return": [],
            "arguments": {
                "t": [
                    "str",
                    "bool",
                    "typing.Type",
                    "list[str]",
                    "typing.Any",
                    "None"
                ],
                "allow_none": [
                    "bool"
                ]
            }
        },
        "serialize_model": {
            "name": "serialize_model",
            "location": 23,
            "return": [],
            "arguments": {
                "model": [
                    "str"
                ]
            }
        },
        "validate_pos": {
            "name": "validate_pos",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "int",
                    "dict[str, typing.Any]",
                    "list[]",
                    "typing.Pattern"
                ],
                "attribute": [
                    "int",
                    "str",
                    "typing.Type"
                ],
                "value": [
                    "int"
                ]
            }
        },
        "validate_non_neg": {
            "name": "validate_non_neg",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "dict[str, object]",
                    "list[dict[, ]]",
                    "list[dict[str, typing.Any]]",
                    "bool",
                    "typing.Type"
                ],
                "attribute": [
                    "str",
                    "int",
                    "None",
                    "typing.Any",
                    "typing.Type"
                ],
                "value": [
                    "bool"
                ]
            }
        },
        "enforce_type": {
            "name": "enforce_type",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "list[]",
                    "bool"
                ],
                "attribute": [
                    "int",
                    "typing.Any",
                    "None",
                    "str"
                ],
                "value": [
                    "str",
                    "bool",
                    "dict[, ]",
                    "typing.Type",
                    "typing.Callable[, ]"
                ]
            }
        },
        "ensure.check": {
            "name": "check",
            "location": 11,
            "return": [
                "t",
                "None"
            ],
            "arguments": {
                "t2": []
            }
        }
    },
    "parking-master/parking/shared/ws_models.py": {
        "deserialize_ws_message": {
            "name": "deserialize_ws_message",
            "location": 105,
            "return": [],
            "arguments": {
                "data": [
                    "dict[str, typing.Any]",
                    "str",
                    "None",
                    "list[str]",
                    "dict[, ]",
                    "dict[str, str]"
                ]
            }
        }
    },
    "parking-master/parking/shared/__init__.py": {},
    "parking-master/simulation/simulation.py": {
        "geodistance": {
            "name": "geodistance",
            "location": 422,
            "return": [],
            "arguments": {
                "ax": [],
                "ay": [],
                "bx": [],
                "by": []
            }
        },
        "get_route": {
            "name": "get_route",
            "location": 746,
            "return": [],
            "arguments": {
                "start": [],
                "end": [],
                "now": [],
                "speed": []
            }
        },
        "get_random_point": {
            "name": "get_random_point",
            "location": 771,
            "return": [],
            "arguments": {
                "manager": [],
                "rn": []
            }
        },
        "SimManager.__init__": {
            "name": "__init__",
            "location": 23,
            "return": [],
            "arguments": {
                "self": [],
                "num_spaces": [],
                "min_spaces_per_lot": [],
                "max_spaces_per_lot": [],
                "num_cars": [],
                "num_rogues": [],
                "width": [],
                "height": [],
                "parking_lot_seed": [],
                "car_seed": [],
                "max_time": [],
                "app_url": []
            }
        },
        "SimManager.point_to_location": {
            "name": "point_to_location",
            "location": 126,
            "return": [],
            "arguments": {
                "self": [],
                "x": [],
                "y": []
            }
        },
        "SimManager.loc_to_point": {
            "name": "loc_to_point",
            "location": 131,
            "return": [],
            "arguments": {
                "self": [],
                "loc": []
            }
        },
        "SimManager.random_edge_square": {
            "name": "random_edge_square",
            "location": 136,
            "return": [],
            "arguments": {
                "self": [],
                "rn": []
            }
        },
        "SimManager.random_square": {
            "name": "random_square",
            "location": 146,
            "return": [],
            "arguments": {
                "self": [],
                "rn": []
            }
        },
        "Graph.__init__": {
            "name": "__init__",
            "location": 333,
            "return": [],
            "arguments": {
                "self": [],
                "manager": [],
                "stats": [],
                "ceiling": [],
                "xlabel": [],
                "ylabeltop": [],
                "ylabelbottom": []
            }
        },
        "Graph.draw": {
            "name": "draw",
            "location": 341,
            "return": [],
            "arguments": {
                "self": [],
                "canvas": [],
                "top_left_x": [],
                "top_left_y": [],
                "bottom_right_x": [],
                "bottom_right_y": []
            }
        },
        "BarGraph.__init__": {
            "name": "__init__",
            "location": 346,
            "return": [],
            "arguments": {
                "self": [],
                "manager": [],
                "stats": [],
                "ceiling": [],
                "xlabel": [],
                "ylabeltop": [],
                "ylabelbottom": []
            }
        },
        "BarGraph.draw": {
            "name": "draw",
            "location": 349,
            "return": [],
            "arguments": {
                "self": [],
                "w": [],
                "top_left_x": [],
                "top_left_y": [],
                "bottom_right_x": [],
                "bottom_right_y": []
            }
        },
        "LineGraph.__init__": {
            "name": "__init__",
            "location": 381,
            "return": [],
            "arguments": {
                "self": [],
                "manager": [],
                "stats": [],
                "ceiling": [],
                "xlabel": [],
                "ylabeltop": [],
                "ylabelbottom": []
            }
        },
        "LineGraph.draw": {
            "name": "draw",
            "location": 384,
            "return": [],
            "arguments": {
                "self": [],
                "w": [],
                "top_left_x": [],
                "top_left_y": [],
                "bottom_right_x": [],
                "bottom_right_y": []
            }
        },
        "Waypoint.__init__": {
            "name": "__init__",
            "location": 416,
            "return": [],
            "arguments": {
                "self": [],
                "timestamp": [],
                "lat": [],
                "long": []
            }
        },
        "RogueCar.__init__": {
            "name": "__init__",
            "location": 441,
            "return": [],
            "arguments": {
                "self": [],
                "starttime": [],
                "loc": [],
                "dest": [],
                "manager": []
            }
        },
        "RogueCar.get_position": {
            "name": "get_position",
            "location": 520,
            "return": [],
            "arguments": {
                "self": [],
                "now": []
            }
        },
        "RogueCar.park": {
            "name": "park",
            "location": 556,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Car.__init__": {
            "name": "__init__",
            "location": 617,
            "return": [],
            "arguments": {
                "self": [],
                "loc": [],
                "manager": [],
                "cli": []
            }
        },
        "Car.distance_to": {
            "name": "distance_to",
            "location": 635,
            "return": [],
            "arguments": {
                "self": [],
                "x": [],
                "y": [],
                "now": []
            }
        },
        "Car.get_position": {
            "name": "get_position",
            "location": 639,
            "return": [],
            "arguments": {
                "self": [],
                "now": []
            }
        },
        "Car.park": {
            "name": "park",
            "location": 714,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Attempt.__init__": {
            "name": "__init__",
            "location": 781,
            "return": [],
            "arguments": {
                "self": [],
                "arrival": [],
                "duration": [],
                "car": []
            }
        },
        "ParkingLot.__init__": {
            "name": "__init__",
            "location": 788,
            "return": [],
            "arguments": {
                "self": [],
                "lot": [],
                "client": [],
                "manager": [],
                "available": []
            }
        }
    },
    "parking-master/simulation/testserver.py": {},
    "parking-master/simulation/testspaceserver.py": {
        "MyHandler.post": {
            "name": "post",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "parking-master/simulation/__init__.py": {},
    "parking-master/simulation/__main__.py": {
        "main": {
            "name": "main",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "base_url": [
                    "int"
                ],
                "num_spaces": [
                    "int"
                ],
                "num_cars": [
                    "int"
                ],
                "num_rogues": [
                    "int"
                ],
                "spaces_per_lot": [
                    "int"
                ],
                "parking_seed": [
                    "int",
                    "tuple[typing.Union[int,int]]",
                    "float"
                ],
                "car_seed": [
                    "int",
                    "tuple[typing.Union[int,int]]",
                    "float"
                ],
                "headless": [
                    "bool"
                ]
            }
        }
    },
    "parking-master/tests/conftest.py": {
        "postgresql": {
            "name": "postgresql",
            "location": 8,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {}
        },
        "app": {
            "name": "app",
            "location": 15,
            "return": [],
            "arguments": {
                "postgresql": []
            }
        }
    },
    "parking-master/tests/test_db.py": {
        "teardown_module": {
            "name": "teardown_module",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "module": [
                    "list[tuple[typing.Union[str,str]]]",
                    "dict[str, tuple[typing.Union[str,str]]]",
                    "str"
                ]
            }
        }
    },
    "parking-master/tests/test_engine.py": {},
    "parking-master/tests/test_location_model.py": {
        "test_location_cons": {
            "name": "test_location_cons",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_location_missing_arg": {
            "name": "test_location_missing_arg",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_location_incorrect_arg_type": {
            "name": "test_location_incorrect_arg_type",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "parking-master/tests/test_model_util.py": {
        "test_serialize_model": {
            "name": "test_serialize_model",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_serialize_model_raises_error": {
            "name": "test_serialize_model_raises_error",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "parking-master/tests/test_rest_models.py": {
        "test_correct_parkinglot_cons": {
            "name": "test_correct_parkinglot_cons",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_missing_parkinglot_arg": {
            "name": "test_missing_parkinglot_arg",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_incorrect_parkinglot_arg_type": {
            "name": "test_incorrect_parkinglot_arg_type",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_incorrect_parkinglot_arg": {
            "name": "test_incorrect_parkinglot_arg",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_zero_capacity_parkinglot": {
            "name": "test_zero_capacity_parkinglot",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_parkinglot_deser_ser": {
            "name": "test_parkinglot_deser_ser",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_parkinglot_creation_resp_id": {
            "name": "test_parkinglot_creation_resp_id",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_parkinglot_creation_resp_neg_id": {
            "name": "test_parkinglot_creation_resp_neg_id",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_space_available_neg": {
            "name": "test_space_available_neg",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_price_available_neg": {
            "name": "test_price_available_neg",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "parking-master/tests/test_rest_server.py": {
        "postgresql": {
            "name": "postgresql",
            "location": 18,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {}
        },
        "app": {
            "name": "app",
            "location": 30,
            "return": [],
            "arguments": {
                "postgresql": []
            }
        },
        "io_loop": {
            "name": "io_loop",
            "location": 44,
            "return": [],
            "arguments": {}
        },
        "plr": {
            "name": "plr",
            "location": 49,
            "return": [
                "ParkingLotRest"
            ],
            "arguments": {
                "base_url": [
                    "str",
                    "list[str]",
                    "None",
                    "list[]"
                ],
                "http_client": [
                    "str",
                    "list[str]",
                    "None",
                    "list[]"
                ]
            }
        }
    },
    "parking-master/tests/test_simulation.py": {},
    "parking-master/tests/test_user_server.py": {
        "user_id": {
            "name": "user_id",
            "location": 25,
            "return": [
                "typing.Text"
            ],
            "arguments": {}
        },
        "dbaccess": {
            "name": "dbaccess",
            "location": 30,
            "return": [
                "DbAccess"
            ],
            "arguments": {
                "mocker": [
                    "int",
                    "tuple[typing.Union[int,int]]",
                    "float"
                ]
            }
        },
        "usessions": {
            "name": "usessions",
            "location": 37,
            "return": [
                "UserSessions"
            ],
            "arguments": {}
        },
        "engine": {
            "name": "engine",
            "location": 42,
            "return": [
                "AllocationEngine"
            ],
            "arguments": {
                "dbaccess": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ],
                "usessions": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ]
            }
        },
        "app": {
            "name": "app",
            "location": 47,
            "return": [
                "str",
                "typing.Final"
            ],
            "arguments": {
                "usessions": [
                    "str"
                ],
                "engine": [
                    "str"
                ]
            }
        },
        "ws_url": {
            "name": "ws_url",
            "location": 53,
            "return": [
                "str"
            ],
            "arguments": {
                "http_server": [
                    "bool",
                    "typing.Iterator",
                    "tuple[typing.Union[int,int]]"
                ],
                "http_port": [
                    "str",
                    "float"
                ]
            }
        }
    },
    "parking-master/tests/test_wsclient.py": {
        "app": {
            "name": "app",
            "location": 27,
            "return": [
                "dict[str, typing.Any]",
                "BaseException",
                "None"
            ],
            "arguments": {}
        },
        "io_loop": {
            "name": "io_loop",
            "location": 33,
            "return": [],
            "arguments": {}
        },
        "ws_url": {
            "name": "ws_url",
            "location": 38,
            "return": [
                "str"
            ],
            "arguments": {
                "base_url": [
                    "str"
                ]
            }
        },
        "EchoServer.open": {
            "name": "open",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EchoServer.on_message": {
            "name": "on_message",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "str",
                    "int"
                ]
            }
        },
        "EchoServer.on_close": {
            "name": "on_close",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "parking-master/tests/test_ws_models.py": {
        "test_deserialize_valid_ws_msg": {
            "name": "test_deserialize_valid_ws_msg",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_deserialize_invalid_type_ws_msg": {
            "name": "test_deserialize_invalid_type_ws_msg",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_message_type": {
            "name": "test_message_type",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    }
}
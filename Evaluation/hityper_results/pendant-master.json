{
    "pendant-master/setup.py": {},
    "pendant-master/docs/conf.py": {},
    "pendant-master/pendant/util.py": {
        "format_ISO8601": {
            "name": "format_ISO8601",
            "location": 30,
            "return": [],
            "arguments": {
                "moment": []
            }
        },
        "ExitCode.__new__": {
            "name": "__new__",
            "location": 16,
            "return": [],
            "arguments": {
                "cls": [
                    "int",
                    "str",
                    "bytes"
                ],
                "exit_code": [
                    "int",
                    "str",
                    "bytes"
                ]
            }
        },
        "ExitCode.is_ok": {
            "name": "is_ok",
            "location": 21,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ExitCode.__repr__": {
            "name": "__repr__",
            "location": 25,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pendant-master/pendant/__init__.py": {},
    "pendant-master/pendant/aws/batch.py": {
        "JobDefinition.__new__": {
            "name": "__new__",
            "location": 32,
            "return": [
                "float",
                "str",
                "int",
                "tuple[typing.Union[typing.Any,typing.Any,typing.Any,typing.Any,typing.Any,typing.Any,typing.Any]]",
                "dict[str, float]"
            ],
            "arguments": {
                "cls": [
                    "list[str]",
                    "None",
                    "typing.Sequence[T]",
                    "bool"
                ]
            }
        },
        "JobDefinition.name": {
            "name": "name",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "JobDefinition.parameters": {
            "name": "parameters",
            "location": 44,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "JobDefinition.revision": {
            "name": "revision",
            "location": 49,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "JobDefinition.validate": {
            "name": "validate",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "JobDefinition.at_revision": {
            "name": "at_revision",
            "location": 57,
            "return": [
                "JobDefinition"
            ],
            "arguments": {
                "self": [],
                "revision": [
                    "typing.Callable[typing.Mapping, T]",
                    "list[]",
                    "list[list[str]]",
                    "int",
                    "str",
                    "tuple[]"
                ]
            }
        },
        "JobDefinition.make_job_name": {
            "name": "make_job_name",
            "location": 62,
            "return": [],
            "arguments": {
                "self": [],
                "moment": [
                    "None",
                    "str",
                    "list[B]"
                ]
            }
        },
        "JobDefinition.to_dict": {
            "name": "to_dict",
            "location": 67,
            "return": [
                "dict[, str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "JobDefinition.__str__": {
            "name": "__str__",
            "location": 72,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "JobDefinition.__repr__": {
            "name": "__repr__",
            "location": 75,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "BatchJob.__init__": {
            "name": "__init__",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "definition": []
            }
        },
        "BatchJob.container_overrides": {
            "name": "container_overrides",
            "location": 106,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BatchJob.job_id": {
            "name": "job_id",
            "location": 111,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BatchJob.queue": {
            "name": "queue",
            "location": 116,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BatchJob.describe_job": {
            "name": "describe_job",
            "location": 121,
            "return": [
                "str",
                "dict[, ]"
            ],
            "arguments": {
                "job_id": [
                    "str",
                    "int"
                ]
            }
        },
        "BatchJob.describe_jobs": {
            "name": "describe_jobs",
            "location": 127,
            "return": [
                "list[dict[, ]]"
            ],
            "arguments": {
                "job_ids": [
                    "list[str]",
                    "str",
                    "int",
                    "typing.Mapping"
                ]
            }
        },
        "BatchJob.status": {
            "name": "status",
            "location": 132,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BatchJob.cancel": {
            "name": "cancel",
            "location": 142,
            "return": [
                "dict[, ]",
                "dict[typing.Any, int]"
            ],
            "arguments": {
                "self": [],
                "reason": [
                    "str",
                    "dict[, ]"
                ]
            }
        },
        "BatchJob.terminate": {
            "name": "terminate",
            "location": 156,
            "return": [
                "dict[, ]",
                "dict[typing.Any, int]"
            ],
            "arguments": {
                "self": [],
                "reason": [
                    "str",
                    "dict[, ]"
                ]
            }
        },
        "BatchJob.is_running": {
            "name": "is_running",
            "location": 174,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "BatchJob.is_runnable": {
            "name": "is_runnable",
            "location": 178,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "BatchJob.is_submitted": {
            "name": "is_submitted",
            "location": 182,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BatchJob.submit": {
            "name": "submit",
            "location": 186,
            "return": [
                "SubmitJobResponse"
            ],
            "arguments": {
                "self": [],
                "queue": [
                    "dict[, ]",
                    "str"
                ],
                "container_overrides": [
                    "None",
                    "list[str]",
                    "typing.Mapping"
                ]
            }
        },
        "BatchJob.log_stream_name": {
            "name": "log_stream_name",
            "location": 220,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BatchJob.log_stream_events": {
            "name": "log_stream_events",
            "location": 230,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BatchJob.__repr__": {
            "name": "__repr__",
            "location": 244,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pendant-master/pendant/aws/exception.py": {},
    "pendant-master/pendant/aws/logs.py": {
        "LogEvent.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "record": [
                    "dict[, ]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "LogEvent.__repr__": {
            "name": "__repr__",
            "location": 21,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "AwsLogUtil.__init__": {
            "name": "__init__",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AwsLogUtil.get_log_events": {
            "name": "get_log_events",
            "location": 36,
            "return": [
                "list[LogEvent]"
            ],
            "arguments": {
                "self": [],
                "group_name": [
                    "str",
                    "bool"
                ],
                "stream_name": [
                    "str",
                    "bool"
                ]
            }
        }
    },
    "pendant-master/pendant/aws/response.py": {
        "SubmitJobResponse.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "response": [
                    "dict[, ]",
                    "dict[str, str]"
                ]
            }
        },
        "SubmitJobResponse.is_ok": {
            "name": "is_ok",
            "location": 21,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "SubmitJobResponse.http_code": {
            "name": "http_code",
            "location": 25,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pendant-master/pendant/aws/s3.py": {
        "s3api_head_object": {
            "name": "s3api_head_object",
            "location": 135,
            "return": [],
            "arguments": {
                "bucket": [
                    "str",
                    "typing.Iterator"
                ],
                "key": [
                    "str",
                    "typing.Iterator"
                ],
                "profile": [
                    "typing.Text"
                ]
            }
        },
        "s3api_object_exists": {
            "name": "s3api_object_exists",
            "location": 152,
            "return": [
                "bool"
            ],
            "arguments": {
                "bucket": [
                    "str",
                    "bool"
                ],
                "key": [
                    "str",
                    "bool"
                ],
                "profile": [
                    "typing.Text"
                ]
            }
        },
        "s3_object_exists": {
            "name": "s3_object_exists",
            "location": 168,
            "return": [
                "bool"
            ],
            "arguments": {
                "bucket": [
                    "str"
                ],
                "key": [
                    "str"
                ]
            }
        },
        "S3Uri.__init__": {
            "name": "__init__",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ]
            }
        },
        "S3Uri.__add__": {
            "name": "__add__",
            "location": 43,
            "return": [
                "S3Uri"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "str",
                    "typing.Callable[, ]",
                    "bool"
                ]
            }
        },
        "S3Uri.__floordiv__": {
            "name": "__floordiv__",
            "location": 49,
            "return": [
                "S3Uri"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "str",
                    "list[str]",
                    "bool"
                ]
            }
        },
        "S3Uri.__truediv__": {
            "name": "__truediv__",
            "location": 58,
            "return": [
                "S3Uri"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "str",
                    "list[str]",
                    "bool"
                ]
            }
        },
        "S3Uri.scheme": {
            "name": "scheme",
            "location": 68,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "S3Uri.bucket": {
            "name": "bucket",
            "location": 80,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "S3Uri.key": {
            "name": "key",
            "location": 93,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "S3Uri.add_suffix": {
            "name": "add_suffix",
            "location": 105,
            "return": [],
            "arguments": {
                "self": [],
                "suffix": []
            }
        },
        "S3Uri.object_exists": {
            "name": "object_exists",
            "location": 124,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "S3Uri.__str__": {
            "name": "__str__",
            "location": 128,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "S3Uri.__repr__": {
            "name": "__repr__",
            "location": 131,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pendant-master/pendant/aws/__init__.py": {
        "cli": {
            "name": "cli",
            "location": 13,
            "return": [],
            "arguments": {
                "command": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "pendant-master/tests/test_pendant_aws.py": {
        "test_bucket": {
            "name": "test_bucket",
            "location": 71,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {}
        },
        "test_s3_uri": {
            "name": "test_s3_uri",
            "location": 78,
            "return": [
                "S3Uri"
            ],
            "arguments": {}
        },
        "test_job_definition": {
            "name": "test_job_definition",
            "location": 83,
            "return": [
                "DemoJobDefinition"
            ],
            "arguments": {
                "test_s3_uri": [
                    "tuple[int]",
                    "int",
                    "list[list[float]]"
                ],
                "test_bucket": [
                    "bool",
                    "str",
                    "list[tuple[typing.Union[str,str]]]",
                    "float"
                ]
            }
        },
        "test_aws_batch_batch_job": {
            "name": "test_aws_batch_batch_job",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {
                "test_bucket": [],
                "test_job_definition": [
                    "bool"
                ],
                "test_s3_uri": [
                    "bool",
                    "str",
                    "list[str]"
                ]
            }
        },
        "test_aws_batch_job_definition_validate": {
            "name": "test_aws_batch_job_definition_validate",
            "location": 128,
            "return": [
                "None"
            ],
            "arguments": {
                "test_bucket": [],
                "test_job_definition": [],
                "test_s3_uri": [
                    "bool",
                    "str",
                    "list[str]"
                ]
            }
        },
        "test_aws_batch_job_definition_default_values": {
            "name": "test_aws_batch_job_definition_default_values",
            "location": 135,
            "return": [
                "None"
            ],
            "arguments": {
                "test_job_definition": [
                    "str",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "test_aws_batch_job_definition_at_revision": {
            "name": "test_aws_batch_job_definition_at_revision",
            "location": 143,
            "return": [
                "None"
            ],
            "arguments": {
                "test_job_definition": []
            }
        },
        "test_aws_batch_job_definition_make_name": {
            "name": "test_aws_batch_job_definition_make_name",
            "location": 151,
            "return": [
                "None"
            ],
            "arguments": {
                "test_job_definition": [
                    "bool",
                    "typing.Callable[L, None]",
                    "str"
                ]
            }
        },
        "test_aws_batch_job_definition_to_dict": {
            "name": "test_aws_batch_job_definition_to_dict",
            "location": 157,
            "return": [
                "None"
            ],
            "arguments": {
                "test_job_definition": [],
                "test_s3_uri": [
                    "str"
                ]
            }
        },
        "test_aws_logs_log_util": {
            "name": "test_aws_logs_log_util",
            "location": 167,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_aws_logs_event_log": {
            "name": "test_aws_logs_event_log",
            "location": 171,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_aws_response_submit_job_response": {
            "name": "test_aws_response_submit_job_response",
            "location": 183,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_aws_response_submit_job_empty_response": {
            "name": "test_aws_response_submit_job_empty_response",
            "location": 191,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_aws_s3_s3uri_object_exists": {
            "name": "test_aws_s3_s3uri_object_exists",
            "location": 200,
            "return": [
                "None"
            ],
            "arguments": {
                "test_bucket": []
            }
        },
        "test_aws_s3_s3uri_bad_pattern": {
            "name": "test_aws_s3_s3uri_bad_pattern",
            "location": 206,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_aws_s3_s3uri_add_to_path": {
            "name": "test_aws_s3_s3uri_add_to_path",
            "location": 215,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_aws_s3_s3uri_fancy_division": {
            "name": "test_aws_s3_s3uri_fancy_division",
            "location": 225,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_aws_s3_s3uri_scheme": {
            "name": "test_aws_s3_s3uri_scheme",
            "location": 249,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_aws_s3_s3uri_bucket": {
            "name": "test_aws_s3_s3uri_bucket",
            "location": 253,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_aws_s3_s3uri_key": {
            "name": "test_aws_s3_s3uri_key",
            "location": 257,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_aws_s3_s3uri_str": {
            "name": "test_aws_s3_s3uri_str",
            "location": 270,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_aws_s3_s3api_head_object": {
            "name": "test_aws_s3_s3api_head_object",
            "location": 277,
            "return": [
                "None"
            ],
            "arguments": {
                "test_bucket": []
            }
        },
        "test_aws_s3_s3api_object_exists": {
            "name": "test_aws_s3_s3api_object_exists",
            "location": 286,
            "return": [
                "None"
            ],
            "arguments": {
                "test_bucket": []
            }
        },
        "test_aws_s3_s3_object_exists": {
            "name": "test_aws_s3_s3_object_exists",
            "location": 293,
            "return": [
                "None"
            ],
            "arguments": {
                "test_bucket": []
            }
        },
        "test_job_definition.DemoJobDefinition.__init__": {
            "name": "__init__",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "s3_uri": []
            }
        },
        "test_job_definition.DemoJobDefinition.name": {
            "name": "name",
            "location": 89,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "test_job_definition.DemoJobDefinition.validate": {
            "name": "validate",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pendant-master/tests/test_pendant_util.py": {
        "test_exit_code": {
            "name": "test_exit_code",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "integer": [
                    "str",
                    "bool"
                ]
            }
        }
    }
}
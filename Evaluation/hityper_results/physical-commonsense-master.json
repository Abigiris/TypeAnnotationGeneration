{
    "physical-commonsense-master/pc/baselines.py": {
        "_random": {
            "name": "_random",
            "location": 30,
            "return": [],
            "arguments": {
                "y_labels_train": [
                    "list[str]"
                ],
                "y_train": [
                    "list[str]"
                ],
                "y_labels_test": [
                    "list[str]"
                ],
                "y_test_shape": [
                    "tuple[int]",
                    "int",
                    "list[str]"
                ]
            }
        },
        "_all_0": {
            "name": "_all_0",
            "location": 39,
            "return": [],
            "arguments": {
                "y_labels_train": [
                    "list[str]",
                    "int",
                    "None"
                ],
                "y_train": [
                    "list[str]",
                    "int",
                    "None"
                ],
                "y_labels_test": [
                    "list[str]",
                    "int",
                    "None"
                ],
                "y_test_shape": [
                    "tuple[int]",
                    "bool",
                    "list[str]",
                    "None"
                ]
            }
        },
        "_all_1": {
            "name": "_all_1",
            "location": 48,
            "return": [],
            "arguments": {
                "y_labels_train": [
                    "list[str]",
                    "int",
                    "None"
                ],
                "y_train": [
                    "list[str]",
                    "int",
                    "None"
                ],
                "y_labels_test": [
                    "list[str]",
                    "int",
                    "None"
                ],
                "y_test_shape": [
                    "tuple[int]",
                    "bool",
                    "list[str]",
                    "None"
                ]
            }
        },
        "_maj_naive": {
            "name": "_maj_naive",
            "location": 57,
            "return": [],
            "arguments": {
                "y_labels_train": [
                    "list[str]",
                    "tuple[int]"
                ],
                "y_train": [],
                "y_labels_test": [
                    "list[str]",
                    "tuple[int]"
                ],
                "y_test_shape": [
                    "list[str]",
                    "tuple[int]"
                ]
            }
        },
        "_maj_cat": {
            "name": "_maj_cat",
            "location": 68,
            "return": [],
            "arguments": {
                "y_labels_train": [],
                "y_train": [
                    "list[int]",
                    "list[list[int]]",
                    "int"
                ],
                "y_labels_test": [],
                "y_test_shape": [
                    "str",
                    "bool",
                    "list[T]",
                    "None"
                ]
            }
        },
        "baseline": {
            "name": "baseline",
            "location": 94,
            "return": [
                "str"
            ],
            "arguments": {
                "func": [
                    "str",
                    "bool",
                    "list[T]",
                    "tuple[]"
                ],
                "name": [
                    "str"
                ],
                "shortname": [
                    "str"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 132,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "physical-commonsense-master/pc/bert.py": {
        "make_epoch_runner": {
            "name": "make_epoch_runner",
            "location": 128,
            "return": [],
            "arguments": {
                "task": [
                    "list[str]",
                    "str",
                    "list[T]",
                    "dict[str, typing.Any]"
                ],
                "device": [
                    "list[str]",
                    "str",
                    "list[T]",
                    "dict[str, typing.Any]"
                ],
                "model": [
                    "list[str]",
                    "str",
                    "list[T]",
                    "dict[str, typing.Any]"
                ],
                "optimizer": [
                    "list[str]",
                    "str",
                    "list[T]",
                    "dict[str, typing.Any]"
                ],
                "scheduler": [
                    "list[str]",
                    "str",
                    "list[T]",
                    "dict[str, typing.Any]"
                ],
                "viz": [
                    "list[str]",
                    "str",
                    "list[T]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 217,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "BertDataset.__init__": {
            "name": "__init__",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "task": [
                    "dict[str, typing.Any]",
                    "str",
                    "list[T]"
                ],
                "train": [],
                "seq_len": [
                    "int"
                ]
            }
        },
        "BertDataset.__len__": {
            "name": "__len__",
            "location": 98,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "BertDataset.__getitem__": {
            "name": "__getitem__",
            "location": 101,
            "return": [
                "dict[typing.Text, ]"
            ],
            "arguments": {
                "self": [],
                "i": [
                    "int",
                    "str",
                    "tuple[float]"
                ]
            }
        },
        "make_epoch_runner.epoch": {
            "name": "epoch",
            "location": 133,
            "return": [],
            "arguments": {
                "loader": [],
                "data_len": [],
                "train": [],
                "split": [],
                "global_i": []
            }
        }
    },
    "physical-commonsense-master/pc/data.py": {
        "_read": {
            "name": "_read",
            "location": 67,
            "return": [
                "list[]"
            ],
            "arguments": {
                "path": [
                    "str"
                ]
            }
        },
        "_expand": {
            "name": "_expand",
            "location": 72,
            "return": [
                "tuple[list[str]]"
            ],
            "arguments": {
                "df": []
            }
        },
        "_train_test_df_split": {
            "name": "_train_test_df_split",
            "location": 89,
            "return": [
                "tuple[typing.Union[int,str,list[float],typing.Mapping,list[str],list[list[typing.Any]]]]"
            ],
            "arguments": {
                "df": [
                    "int",
                    "list[]",
                    "str"
                ],
                "train_uid_path": [
                    "list[str]",
                    "str",
                    "tuple[typing.Union[str,str]]",
                    "typing.Pattern"
                ],
                "test_uid_path": [
                    "str"
                ]
            }
        },
        "_train_test_df_expand": {
            "name": "_train_test_df_expand",
            "location": 102,
            "return": [
                "tuple[tuple[typing.Union[str,tuple[str],bool,list[str],typing.TextIO]]]"
            ],
            "arguments": {
                "df": [
                    "str"
                ],
                "train_uid_path": [
                    "str"
                ],
                "test_uid_path": [
                    "str"
                ]
            }
        },
        "_get_abstract_objects_properties": {
            "name": "_get_abstract_objects_properties",
            "location": 114,
            "return": [],
            "arguments": {}
        },
        "_get_situated_objects_properties": {
            "name": "_get_situated_objects_properties",
            "location": 127,
            "return": [],
            "arguments": {}
        },
        "_get_situated_objects_affordances": {
            "name": "_get_situated_objects_affordances",
            "location": 140,
            "return": [
                "tuple[tuple[list[str]]]"
            ],
            "arguments": {}
        },
        "_get_situated_affordances_properties": {
            "name": "_get_situated_affordances_properties",
            "location": 175,
            "return": [
                "tuple[tuple[list[str]]]"
            ],
            "arguments": {}
        },
        "get": {
            "name": "get",
            "location": 220,
            "return": [],
            "arguments": {
                "task": [
                    "dict[str, typing.Any]"
                ]
            }
        },
        "_get_wordembedding_name_map": {
            "name": "_get_wordembedding_name_map",
            "location": 248,
            "return": [
                "dict[, ]"
            ],
            "arguments": {
                "path": [
                    "str",
                    "bool"
                ]
            }
        },
        "_wordembedding_words_objects_properties": {
            "name": "_wordembedding_words_objects_properties",
            "location": 254,
            "return": [
                "list[tuple[int]]"
            ],
            "arguments": {
                "labels": [
                    "list[str]",
                    "list[]"
                ]
            }
        },
        "_wordembedding_words_objects_affordances": {
            "name": "_wordembedding_words_objects_affordances",
            "location": 269,
            "return": [
                "list[tuple[typing.Union[int,str]]]"
            ],
            "arguments": {
                "labels": [
                    "list[int]",
                    "str",
                    "list[str]",
                    "tuple[typing.Union[typing.Sequence[typing.Any],typing.Sequence[typing.Any]]]",
                    "set[str]"
                ]
            }
        },
        "_wordembedding_words_affordances_properties": {
            "name": "_wordembedding_words_affordances_properties",
            "location": 285,
            "return": [
                "list[tuple[typing.Union[str,list[str],typing.Any]]]"
            ],
            "arguments": {
                "labels": [
                    "list[str]",
                    "list[]"
                ]
            }
        },
        "_wordembedding": {
            "name": "_wordembedding",
            "location": 301,
            "return": [],
            "arguments": {
                "task": [
                    "dict[, ]",
                    "dict[str, list[dict[, ]]]"
                ],
                "labels": [],
                "archive_path": [
                    "str",
                    "tuple[str]"
                ],
                "d": [
                    "list[int]",
                    "list[str]",
                    "list[]",
                    "list[dict[str, typing.Any]]"
                ]
            }
        },
        "glove": {
            "name": "glove",
            "location": 332,
            "return": [],
            "arguments": {
                "task": [
                    "list[str]",
                    "dict[, ]",
                    "list[]"
                ],
                "labels": [
                    "list[str]",
                    "dict[, ]",
                    "list[]"
                ]
            }
        },
        "dep_embs": {
            "name": "dep_embs",
            "location": 338,
            "return": [],
            "arguments": {
                "task": [
                    "list[str]",
                    "dict[, ]",
                    "list[]"
                ],
                "labels": [
                    "list[str]",
                    "dict[, ]",
                    "list[]"
                ]
            }
        },
        "_uids2sentidx": {
            "name": "_uids2sentidx",
            "location": 342,
            "return": [],
            "arguments": {
                "task": [
                    "list[str]",
                    "dict[str, str]",
                    "bool",
                    "str"
                ],
                "labels": [
                    "list[str]",
                    "dict[, ]",
                    "tuple[str]",
                    "list[]"
                ]
            }
        },
        "_ctx_emb": {
            "name": "_ctx_emb",
            "location": 361,
            "return": [],
            "arguments": {
                "task": [
                    "list[str]",
                    "int",
                    "None",
                    "collections.abc.Awaitable[]"
                ],
                "labels": [
                    "list[str]",
                    "int",
                    "None",
                    "collections.abc.Awaitable[]"
                ],
                "archive_path": [
                    "str",
                    "tuple[str]",
                    "list[str]",
                    "bool"
                ]
            }
        },
        "elmo": {
            "name": "elmo",
            "location": 369,
            "return": [],
            "arguments": {
                "task": [
                    "list[str]",
                    "dict[, ]"
                ],
                "labels": [
                    "list[str]",
                    "dict[, ]"
                ]
            }
        },
        "features": {
            "name": "features",
            "location": 373,
            "return": [],
            "arguments": {
                "task": [
                    "list[str]",
                    "str",
                    "int"
                ],
                "variant": [
                    "bool",
                    "str",
                    "None",
                    "dict[, ]"
                ],
                "x_labels": [
                    "list[str]",
                    "list[T]",
                    "None",
                    "str"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 390,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "physical-commonsense-master/pc/experiments.py": {
        "main": {
            "name": "main",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "physical-commonsense-master/pc/graph.py": {
        "get_cms": {
            "name": "get_cms",
            "location": 16,
            "return": [
                "dict[, ]"
            ],
            "arguments": {
                "path": [
                    "str"
                ]
            }
        },
        "_setup": {
            "name": "_setup",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "figsize": [
                    "tuple[float]"
                ]
            }
        },
        "build_prop_cat_graph": {
            "name": "build_prop_cat_graph",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "cat2props": [
                    "dict[str, list[str]]",
                    "dict[str, dict[str, str]]",
                    "dict[, ]"
                ],
                "prop2cm": [],
                "prop2human": [
                    "str",
                    "list[str]"
                ],
                "metric": [
                    "bool"
                ]
            }
        },
        "build_prop_aff_graph": {
            "name": "build_prop_aff_graph",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "prop2cm": [
                    "dict[str, list[str]]",
                    "dict[str, dict[str, str]]",
                    "dict[, ]"
                ],
                "aff2cm": [
                    "dict[str, list[str]]",
                    "dict[str, dict[str, str]]",
                    "dict[, ]"
                ]
            }
        },
        "build_item_freqs_vs_f1": {
            "name": "build_item_freqs_vs_f1",
            "location": 101,
            "return": [
                "None"
            ],
            "arguments": {
                "item_freqs": [],
                "item2cm": [
                    "dict[, ]",
                    "dict[str, dict[str, str]]",
                    "dict[str, bool]"
                ],
                "freq_lab": [
                    "str",
                    "bool",
                    "list[float]"
                ],
                "out_path": [
                    "str",
                    "bool"
                ],
                "title": [
                    "None",
                    "str",
                    "int",
                    "typing.Any"
                ],
                "f1_lab": [
                    "typing.Text"
                ]
            }
        },
        "build_prop_freqs_vs_acc": {
            "name": "build_prop_freqs_vs_acc",
            "location": 128,
            "return": [
                "None"
            ],
            "arguments": {
                "prop_freqs": [
                    "dict[, ]",
                    "dict[str, list[str]]",
                    "dict[str, str]"
                ],
                "prop2cm": [
                    "str",
                    "list[typing.Any]"
                ],
                "freq_lab": [
                    "str",
                    "bool"
                ],
                "out_path": [
                    "str",
                    "bool",
                    "list[str]",
                    "None"
                ]
            }
        },
        "build_freq_vs_freq": {
            "name": "build_freq_vs_freq",
            "location": 146,
            "return": [
                "None"
            ],
            "arguments": {
                "freq1": [
                    "dict[str, float]",
                    "dict[, ]",
                    "dict[str, bool]"
                ],
                "freq2": [
                    "str",
                    "list[str]"
                ],
                "freq1_lab": [
                    "str"
                ],
                "freq2_lab": [
                    "str"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 164,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "physical-commonsense-master/pc/human.py": {
        "create": {
            "name": "create",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "get_gold": {
            "name": "get_gold",
            "location": 54,
            "return": [],
            "arguments": {
                "path": [
                    "str"
                ],
                "lim": [
                    "None",
                    "str"
                ]
            }
        },
        "get_labels": {
            "name": "get_labels",
            "location": 62,
            "return": [
                "list[]"
            ],
            "arguments": {
                "path": [
                    "str"
                ],
                "lim": [
                    "int",
                    "None"
                ]
            }
        },
        "get_anns": {
            "name": "get_anns",
            "location": 70,
            "return": [],
            "arguments": {
                "path": [
                    "str"
                ],
                "lim": [
                    "None",
                    "str"
                ]
            }
        },
        "evaluate_round1": {
            "name": "evaluate_round1",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "main": {
            "name": "main",
            "location": 107,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "physical-commonsense-master/pc/metrics.py": {
        "cms": {
            "name": "cms",
            "location": 11,
            "return": [
                "dict[, dict[typing.Text, dict[, ]]]"
            ],
            "arguments": {
                "y_hat": [],
                "y": [],
                "y_labels": [
                    "list[str]",
                    "str"
                ]
            }
        },
        "prf1": {
            "name": "prf1",
            "location": 54,
            "return": [
                "tuple[float]"
            ],
            "arguments": {
                "cm": [
                    "str"
                ]
            }
        },
        "mc_nemar": {
            "name": "mc_nemar",
            "location": 94,
            "return": [],
            "arguments": {
                "results_1": [],
                "results_2": [
                    "dict[str, set[str]]",
                    "str"
                ]
            }
        },
        "report": {
            "name": "report",
            "location": 118,
            "return": [
                "tuple[typing.Union[int,dict[str, typing.Union[int,float]]]]"
            ],
            "arguments": {
                "y_hat": [],
                "y": [],
                "y_labels": [
                    "bool"
                ],
                "task_labels": [
                    "list[str]",
                    "str",
                    "int"
                ]
            }
        }
    },
    "physical-commonsense-master/pc/models.py": {
        "mlp": {
            "name": "mlp",
            "location": 46,
            "return": [],
            "arguments": {
                "d_in": [
                    "int",
                    "float"
                ],
                "input_dropout": [
                    "int",
                    "float"
                ],
                "h": [
                    "int",
                    "float"
                ],
                "activation": [
                    "int",
                    "float"
                ],
                "inner_dropout": [
                    "int",
                    "float"
                ],
                "d_out": [
                    "int",
                    "float"
                ]
            }
        },
        "init_weights": {
            "name": "init_weights",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "m": [
                    "typing.Sequence['cirq.Qid']",
                    "typing.Iterable[str]",
                    "int",
                    "None"
                ]
            }
        },
        "make_batcher": {
            "name": "make_batcher",
            "location": 75,
            "return": [],
            "arguments": {
                "x": [
                    "bool"
                ],
                "y": [
                    "bool"
                ],
                "batch_size": [
                    "bool"
                ]
            }
        },
        "train": {
            "name": "train",
            "location": 91,
            "return": [
                "None",
                "tuple[]"
            ],
            "arguments": {
                "model": [
                    "set[int]"
                ],
                "x_np": [
                    "int",
                    "tuple[]",
                    "list[]",
                    "float"
                ],
                "y_np": [
                    "int",
                    "dict[str, tuple[typing.Union[str,str]]]",
                    "float"
                ],
                "config": [
                    "str"
                ]
            }
        },
        "test": {
            "name": "test",
            "location": 145,
            "return": [],
            "arguments": {
                "model": [],
                "x_np": [
                    "int",
                    "float",
                    "tuple[int]"
                ],
                "y_np": [
                    "int",
                    "float",
                    "list[int]",
                    "None",
                    "set[str]",
                    "list[dict[str, str]]"
                ],
                "centering": [
                    "tuple[typing.Union[torch.Tensor,torch.Tensor]]",
                    "None",
                    "bool"
                ],
                "config": [
                    "dict[str, typing.Any]",
                    "bool",
                    "typing.Callable[, ]"
                ]
            }
        },
        "cv": {
            "name": "cv",
            "location": 169,
            "return": [
                "None"
            ],
            "arguments": {
                "task": [
                    "str",
                    "dict[str, typing.Any]",
                    "dict[, ]"
                ],
                "variant": [
                    "str",
                    "dict[str, typing.Any]",
                    "list[str]"
                ],
                "model": [
                    "dict[str, typing.Any]"
                ],
                "config": [
                    "dict[str, typing.Any]"
                ]
            }
        },
        "train_and_test": {
            "name": "train_and_test",
            "location": 200,
            "return": [],
            "arguments": {
                "task": [
                    "str",
                    "dict[str, typing.Any]",
                    "typing.Type"
                ],
                "variant": [
                    "typing.Callable[, ]",
                    "dict[str, typing.Any]",
                    "dict[, ]"
                ],
                "model": [
                    "dict[str, typing.Any]"
                ],
                "config": [
                    "dict[str, typing.Any]"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 220,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "make_batcher.batcher": {
            "name": "batcher",
            "location": 83,
            "return": [
                "typing.Generator[tuple[]]"
            ],
            "arguments": {}
        }
    },
    "physical-commonsense-master/pc/significance.py": {
        "get_symbol": {
            "name": "get_symbol",
            "location": 25,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "p": [
                    "bool"
                ]
            }
        },
        "get_data": {
            "name": "get_data",
            "location": 37,
            "return": [],
            "arguments": {
                "task": [
                    "str",
                    "bool"
                ],
                "method": [
                    "str",
                    "bool"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "physical-commonsense-master/pc/util.py": {
        "np2str": {
            "name": "np2str",
            "location": 8,
            "return": [],
            "arguments": {
                "a": []
            }
        },
        "str2np": {
            "name": "str2np",
            "location": 19,
            "return": [],
            "arguments": {
                "s": [
                    "str"
                ]
            }
        }
    },
    "physical-commonsense-master/scripts/perdatum_to_category.py": {
        "main": {
            "name": "main",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    }
}
{
    "pik-django-utils-master/conftest.py": {
        "pytest_configure": {
            "name": "pytest_configure",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "base_url": {
            "name": "base_url",
            "location": 17,
            "return": [],
            "arguments": {
                "live_server": [
                    "str",
                    "None",
                    "int",
                    "dict[str, typing.Sequence[str]]"
                ]
            }
        },
        "celery_session_app": {
            "name": "celery_session_app",
            "location": 24,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "request": [
                    "dict[str, typing.Any]"
                ]
            }
        },
        "celery_session_worker": {
            "name": "celery_session_worker",
            "location": 30,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "request": [
                    "bool",
                    "str",
                    "None",
                    "float",
                    "typing.Mapping"
                ],
                "celery_session_app": [
                    "bool",
                    "str",
                    "None"
                ],
                "celery_worker_pool": [
                    "bool",
                    "str",
                    "None"
                ],
                "celery_worker_parameters": [
                    "bool",
                    "str",
                    "None"
                ]
            }
        },
        "_skip_sensitive": {
            "name": "_skip_sensitive",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "request": [
                    "bool"
                ]
            }
        },
        "assert_num_queries_lte": {
            "name": "assert_num_queries_lte",
            "location": 49,
            "return": [],
            "arguments": {
                "pytestconfig": [
                    "int",
                    "str",
                    "list[str]"
                ]
            }
        },
        "assert_num_queries_lte._assert_num_queries": {
            "name": "_assert_num_queries",
            "location": 54,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "num": []
            }
        }
    },
    "pik-django-utils-master/setup.py": {},
    "pik-django-utils-master/pik/__init__.py": {},
    "pik-django-utils-master/pik/core/cache.py": {
        "cachedmethod": {
            "name": "cachedmethod",
            "location": 8,
            "return": [],
            "arguments": {
                "key": [
                    "str",
                    "float",
                    "int"
                ],
                "ttl": [
                    "int"
                ],
                "cachename": [
                    "typing.Text"
                ]
            }
        },
        "cachedmethod.wrapper": {
            "name": "wrapper",
            "location": 89,
            "return": [],
            "arguments": {
                "method": []
            }
        },
        "cachedmethod.wrapper.decorator": {
            "name": "decorator",
            "location": 95,
            "return": [],
            "arguments": {}
        }
    },
    "pik-django-utils-master/pik/core/__init__.py": {},
    "pik-django-utils-master/pik/core/clear_history/tasks.py": {
        "clear_history": {
            "name": "clear_history",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "pik-django-utils-master/pik/core/clear_history/__init__.py": {},
    "pik-django-utils-master/pik/core/clear_history/management/__init__.py": {},
    "pik-django-utils-master/pik/core/clear_history/management/commands/clear_history.py": {
        "Command.handle": {
            "name": "handle",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pik-django-utils-master/pik/core/clear_history/management/commands/__init__.py": {},
    "pik-django-utils-master/pik/core/models/base.py": {},
    "pik-django-utils-master/pik/core/models/dated.py": {},
    "pik-django-utils-master/pik/core/models/historized.py": {},
    "pik-django-utils-master/pik/core/models/owned.py": {},
    "pik-django-utils-master/pik/core/models/soft_deleted.py": {
        "_get_field_by_name": {
            "name": "_get_field_by_name",
            "location": 14,
            "return": [],
            "arguments": {
                "model": [
                    "dict[, ]",
                    "str",
                    "bool"
                ],
                "field": [
                    "dict[str, typing.Any]",
                    "tuple[typing.Union[str,str]]",
                    "None",
                    "typing.Type"
                ]
            }
        },
        "_has_field": {
            "name": "_has_field",
            "location": 22,
            "return": [
                "bool"
            ],
            "arguments": {
                "model": [
                    "typing.Type",
                    "str",
                    "None"
                ],
                "field": [
                    "typing.Type",
                    "str",
                    "None"
                ]
            }
        },
        "_cascade_soft_delete": {
            "name": "_cascade_soft_delete",
            "location": 30,
            "return": [
                "NestedObjects"
            ],
            "arguments": {
                "inst_or_qs": [],
                "using": [
                    "bool",
                    "str",
                    "typing.Sequence[str]",
                    "None"
                ],
                "keep_parents": [
                    "bool"
                ]
            }
        },
        "_delete_collected": {
            "name": "_delete_collected",
            "location": 60,
            "return": [],
            "arguments": {
                "collector": []
            }
        },
        "_BaseSoftDeletedQuerySet.delete": {
            "name": "delete",
            "location": 66,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_BaseSoftDeletedQuerySet.hard_delete": {
            "name": "hard_delete",
            "location": 86,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_BaseSoftDeletedQuerySet.restore": {
            "name": "restore",
            "location": 92,
            "return": [
                "dict[typing.Text, None]"
            ],
            "arguments": {
                "self": []
            }
        },
        "_BaseSoftDeletedQuerySet.get_restore_or_create": {
            "name": "get_restore_or_create",
            "location": 98,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_BaseSoftDeletedQuerySet.update_restore_or_create": {
            "name": "update_restore_or_create",
            "location": 104,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SoftObjectsQuerySet.__init__": {
            "name": "__init__",
            "location": 124,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SoftDeletedObjectsQuerySet.__init__": {
            "name": "__init__",
            "location": 131,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AllObjectsQuerySet.__init__": {
            "name": "__init__",
            "location": 138,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AllObjectsQuerySet.is_deleted": {
            "name": "is_deleted",
            "location": 142,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AllObjectsQuerySet.is_not_deleted": {
            "name": "is_not_deleted",
            "location": 145,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SoftDeleted.delete": {
            "name": "delete",
            "location": 167,
            "return": [
                "tuple[typing.Union[int,dict[, ]]]"
            ],
            "arguments": {
                "self": [],
                "using": [
                    "None",
                    "int",
                    "typing.Sequence[S]",
                    "tuple[typing.Union[int,int]]"
                ],
                "keep_parents": [
                    "bool"
                ]
            }
        },
        "SoftDeleted.hard_delete": {
            "name": "hard_delete",
            "location": 182,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SoftDeleted.restore": {
            "name": "restore",
            "location": 189,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pik-django-utils-master/pik/core/models/uided.py": {
        "_new_uid": {
            "name": "_new_uid",
            "location": 8,
            "return": [],
            "arguments": {}
        },
        "Uided.suid": {
            "name": "suid",
            "location": 16,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Uided.stype": {
            "name": "stype",
            "location": 20,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Uided.__str__": {
            "name": "__str__",
            "location": 23,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PUided.suid": {
            "name": "suid",
            "location": 37,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "PUided.stype": {
            "name": "stype",
            "location": 41,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PUided.__str__": {
            "name": "__str__",
            "location": 44,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "pik-django-utils-master/pik/core/models/versioned.py": {
        "Versioned.save": {
            "name": "save",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Versioned.optimistic_concurrency_update": {
            "name": "optimistic_concurrency_update",
            "location": 24,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pik-django-utils-master/pik/core/models/_collector_delete.py": {
        "_is_soft_excluded": {
            "name": "_is_soft_excluded",
            "location": 20,
            "return": [],
            "arguments": {
                "model": []
            }
        },
        "_delete": {
            "name": "_delete",
            "location": 28,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "get_extra_restriction_patch": {
            "name": "get_extra_restriction_patch",
            "location": 120,
            "return": [],
            "arguments": {
                "func": []
            }
        },
        "get_extra_restriction_patch.wrapper": {
            "name": "wrapper",
            "location": 121,
            "return": [],
            "arguments": {
                "self": [],
                "where_class": [],
                "alias": [],
                "related_alias": []
            }
        }
    },
    "pik-django-utils-master/pik/core/models/__init__.py": {},
    "pik-django-utils-master/pik/core/models/fields/inheritance.py": {
        "InheritPrimaryUidField.__init__": {
            "name": "__init__",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "to": [
                    "int",
                    "dict[, ]",
                    "tuple[typing.Union[int,int]]"
                ]
            }
        },
        "InheritPrimaryUidField.get_pk_value_on_save": {
            "name": "get_pk_value_on_save",
            "location": 55,
            "return": [],
            "arguments": {
                "self": [],
                "instance": [
                    "bool",
                    "str",
                    "None",
                    "float",
                    "complex"
                ]
            }
        }
    },
    "pik-django-utils-master/pik/core/models/fields/__init__.py": {},
    "pik-django-utils-master/pik/core/shortcuts/model_objects.py": {
        "_update_m2m_fields": {
            "name": "_update_m2m_fields",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "_obj": [
                    "str",
                    "dict[, ]",
                    "list[dict[str, typing.Any]]"
                ]
            }
        },
        "_get_m2m_kwargs": {
            "name": "_get_m2m_kwargs",
            "location": 18,
            "return": [
                "tuple[dict[, ]]"
            ],
            "arguments": {
                "_model": [
                    "str",
                    "None",
                    "dict[, ]",
                    "typing.Sequence[services.seating.models.seaSeat]",
                    "dict[str, set[str]]"
                ]
            }
        },
        "get_object_or_none": {
            "name": "get_object_or_none",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "source": [
                    "str",
                    "int",
                    "list[]",
                    "typing.Type",
                    "None"
                ]
            }
        },
        "validate_and_create_object": {
            "name": "validate_and_create_object",
            "location": 42,
            "return": [],
            "arguments": {
                "model": [
                    "typing.Type"
                ]
            }
        },
        "validate_and_update_object": {
            "name": "validate_and_update_object",
            "location": 66,
            "return": [
                "tuple[list[list[]]]"
            ],
            "arguments": {
                "obj": []
            }
        },
        "update_or_create_object": {
            "name": "update_or_create_object",
            "location": 101,
            "return": [
                "tuple[typing.Union[list[],bool]]"
            ],
            "arguments": {
                "source": [
                    "str",
                    "None",
                    "dict[, ]",
                    "typing.Type",
                    "dict[str, typing.Any]"
                ],
                "search_keys": [
                    "None",
                    "dict[, ]",
                    "str",
                    "int",
                    "tuple[typing.Union[str,str]]"
                ]
            }
        }
    },
    "pik-django-utils-master/pik/core/shortcuts/request.py": {
        "get_current_request": {
            "name": "get_current_request",
            "location": 7,
            "return": [],
            "arguments": {}
        }
    },
    "pik-django-utils-master/pik/core/shortcuts/__init__.py": {},
    "pik-django-utils-master/pik/core/tests/fixtures.py": {
        "create_user": {
            "name": "create_user",
            "location": 7,
            "return": [],
            "arguments": {
                "username": [
                    "None",
                    "str",
                    "dict[str, str]",
                    "list[str]"
                ],
                "password": [
                    "None",
                    "str",
                    "float",
                    "int",
                    "typing.TextIO"
                ]
            }
        },
        "get_user": {
            "name": "get_user",
            "location": 38,
            "return": [],
            "arguments": {
                "username": [
                    "None",
                    "str",
                    "bool"
                ]
            }
        }
    },
    "pik-django-utils-master/pik/core/tests/__init__.py": {},
    "pik-django-utils-master/pik/libs/__init__.py": {},
    "pik-django-utils-master/pik/utils/normalization.py": {
        "normalize": {
            "name": "normalize",
            "location": 11,
            "return": [],
            "arguments": {
                "text": []
            }
        },
        "company_name_normalization": {
            "name": "company_name_normalization",
            "location": 30,
            "return": [
                "str"
            ],
            "arguments": {
                "name": []
            }
        }
    },
    "pik-django-utils-master/pik/utils/__init__.py": {},
    "pik-django-utils-master/tests/test_api_imports.py": {
        "pik_module": {
            "name": "pik_module",
            "location": 7,
            "return": [],
            "arguments": {
                "request": [
                    "typing.Callable[, ]"
                ]
            }
        },
        "test_import_pik_namespace": {
            "name": "test_import_pik_namespace",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_import_pik_packages": {
            "name": "test_import_pik_packages",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "pik_module": []
            }
        }
    },
    "pik-django-utils-master/tests/__init__.py": {},
    "pik-django-utils-master/test_core_models/__init__.py": {},
    "pik-django-utils-master/test_core_models/models/base.py": {},
    "pik-django-utils-master/test_core_models/models/dated.py": {},
    "pik-django-utils-master/test_core_models/models/historized.py": {},
    "pik-django-utils-master/test_core_models/models/owned.py": {},
    "pik-django-utils-master/test_core_models/models/soft_deleted1.py": {
        "BaseTestModel.__str__": {
            "name": "__str__",
            "location": 13,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pik-django-utils-master/test_core_models/models/soft_deleted2.py": {},
    "pik-django-utils-master/test_core_models/models/soft_deleted3.py": {
        "_BaseBasePHistoricalTestModel.__str__": {
            "name": "__str__",
            "location": 12,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ChildModel.get_type_for_instance": {
            "name": "get_type_for_instance",
            "location": 78,
            "return": [],
            "arguments": {
                "cls": [
                    "typing.Type",
                    "str",
                    "None"
                ]
            }
        },
        "ChildModel.save": {
            "name": "save",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pik-django-utils-master/test_core_models/models/uided.py": {},
    "pik-django-utils-master/test_core_models/models/versioned.py": {},
    "pik-django-utils-master/test_core_models/models/__init__.py": {},
    "pik-django-utils-master/test_core_models/tests/factories.py": {},
    "pik-django-utils-master/test_core_models/tests/test_models_base.py": {
        "historical_model": {
            "name": "historical_model",
            "location": 11,
            "return": [],
            "arguments": {
                "request": [
                    "str",
                    "set[str]",
                    "tuple[typing.Union[int,int]]"
                ]
            }
        },
        "test_historical_protocol": {
            "name": "test_historical_protocol",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "historical_model": [
                    "str"
                ]
            }
        },
        "test_historical_protocol_fields": {
            "name": "test_historical_protocol_fields",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "historical_model": [
                    "bool"
                ]
            }
        },
        "test_historical_protocol_update": {
            "name": "test_historical_protocol_update",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "historical_model": [
                    "int"
                ]
            }
        },
        "test_historical_protocol_history": {
            "name": "test_historical_protocol_history",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "historical_model": [
                    "str"
                ],
                "settings": []
            }
        }
    },
    "pik-django-utils-master/test_core_models/tests/test_models_dated.py": {
        "dated_model": {
            "name": "dated_model",
            "location": 13,
            "return": [],
            "arguments": {
                "request": [
                    "typing.Callable[, ]"
                ]
            }
        },
        "test_dated_protocol": {
            "name": "test_dated_protocol",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "dated_model": [
                    "list[str]",
                    "None"
                ]
            }
        }
    },
    "pik-django-utils-master/test_core_models/tests/test_models_historized.py": {
        "historized_model": {
            "name": "historized_model",
            "location": 10,
            "return": [],
            "arguments": {
                "request": [
                    "str",
                    "set[str]",
                    "tuple[typing.Union[int,int]]"
                ]
            }
        },
        "test_historized_protocol": {
            "name": "test_historized_protocol",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "historized_model": [
                    "str"
                ],
                "settings": []
            }
        }
    },
    "pik-django-utils-master/test_core_models/tests/test_models_owned.py": {
        "owned_model": {
            "name": "owned_model",
            "location": 12,
            "return": [],
            "arguments": {
                "request": [
                    "str",
                    "set[str]",
                    "tuple[typing.Union[int,int]]"
                ]
            }
        },
        "null_owned_model": {
            "name": "null_owned_model",
            "location": 19,
            "return": [],
            "arguments": {
                "request": [
                    "str"
                ]
            }
        },
        "test_owned_protocol": {
            "name": "test_owned_protocol",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "owned_model": [
                    "str"
                ]
            }
        },
        "test_owned_protocol_no_user_problem": {
            "name": "test_owned_protocol_no_user_problem",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "owned_model": [
                    "typing.Type"
                ]
            }
        },
        "test_null_owned_protocol": {
            "name": "test_null_owned_protocol",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "null_owned_model": [
                    "str",
                    "int",
                    "typing.Type"
                ]
            }
        },
        "test_null_owned_protocol_on_user_ok": {
            "name": "test_null_owned_protocol_on_user_ok",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "null_owned_model": [
                    "typing.Callable[, ]",
                    "str"
                ]
            }
        }
    },
    "pik-django-utils-master/test_core_models/tests/test_models_soft_deleted1.py": {
        "TestDelete.setUp": {
            "name": "setUp",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDelete.test_deletion": {
            "name": "test_deletion",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDelete.test_depended": {
            "name": "test_depended",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDelete.test_non_removable_depended": {
            "name": "test_non_removable_depended",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDelete.test_non_removable_nullable_depended": {
            "name": "test_non_removable_nullable_depended",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDelete.test_removable_nullable_depended": {
            "name": "test_removable_nullable_depended",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDelete.test_remove_removable_nullable_depended": {
            "name": "test_remove_removable_nullable_depended",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDelete.test_permanent_depended": {
            "name": "test_permanent_depended",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDelete.test_related": {
            "name": "test_related",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDelete.test_double_delete": {
            "name": "test_double_delete",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDelete.test_restore": {
            "name": "test_restore",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestIntegration.test_prefetch_bug": {
            "name": "test_prefetch_bug",
            "location": 132,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestIntegration.test_related_manager_bug": {
            "name": "test_related_manager_bug",
            "location": 138,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestIntegration.test_m2m_manager": {
            "name": "test_m2m_manager",
            "location": 145,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestIntegration.test_m2m_manager_clear": {
            "name": "test_m2m_manager_clear",
            "location": 151,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestIntegration.test_m2m_manager_delete": {
            "name": "test_m2m_manager_delete",
            "location": 163,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestIntegration.test_m2m_manager_delete_obj": {
            "name": "test_m2m_manager_delete_obj",
            "location": 175,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestIntegration.test_m2m_prefetch_related": {
            "name": "test_m2m_prefetch_related",
            "location": 187,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestIntegration.test_m2m_all_objects": {
            "name": "test_m2m_all_objects",
            "location": 195,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestIntegration.test_m2m_deleted_through": {
            "name": "test_m2m_deleted_through",
            "location": 201,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCustomQSMethods.test_get_restore_or_create__get": {
            "name": "test_get_restore_or_create__get",
            "location": 209,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCustomQSMethods.test_get_restore_or_create__restore": {
            "name": "test_get_restore_or_create__restore",
            "location": 213,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCustomQSMethods.test_get_restore_or_create__create": {
            "name": "test_get_restore_or_create__create",
            "location": 237,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCustomQSMethods.test_restore": {
            "name": "test_restore",
            "location": 243,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCustomQSMethods.test_update_restore_or_create__update": {
            "name": "test_update_restore_or_create__update",
            "location": 249,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCustomQSMethods.test_update_restore_or_create__restore": {
            "name": "test_update_restore_or_create__restore",
            "location": 253,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCustomQSMethods.test_update_restore_or_create__create": {
            "name": "test_update_restore_or_create__create",
            "location": 277,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDelete.test_double_delete.post_delete_receiver": {
            "name": "post_delete_receiver",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "TestDelete.test_double_delete.post_save_receiver": {
            "name": "post_save_receiver",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "TestDelete.test_restore.pre_restore_receiver": {
            "name": "pre_restore_receiver",
            "location": 110,
            "return": [
                "None"
            ],
            "arguments": {
                "sender": [],
                "instance": []
            }
        },
        "TestDelete.test_restore.post_restore_receiver": {
            "name": "post_restore_receiver",
            "location": 113,
            "return": [
                "None"
            ],
            "arguments": {
                "sender": [],
                "instance": []
            }
        },
        "TestCustomQSMethods.test_get_restore_or_create__restore.pre_restore_receiver": {
            "name": "pre_restore_receiver",
            "location": 217,
            "return": [
                "None"
            ],
            "arguments": {
                "sender": [],
                "instance": []
            }
        },
        "TestCustomQSMethods.test_get_restore_or_create__restore.post_restore_receiver": {
            "name": "post_restore_receiver",
            "location": 220,
            "return": [
                "None"
            ],
            "arguments": {
                "sender": [],
                "instance": []
            }
        },
        "TestCustomQSMethods.test_update_restore_or_create__restore.pre_restore_receiver": {
            "name": "pre_restore_receiver",
            "location": 257,
            "return": [
                "None"
            ],
            "arguments": {
                "sender": [],
                "instance": []
            }
        },
        "TestCustomQSMethods.test_update_restore_or_create__restore.post_restore_receiver": {
            "name": "post_restore_receiver",
            "location": 260,
            "return": [
                "None"
            ],
            "arguments": {
                "sender": [],
                "instance": []
            }
        }
    },
    "pik-django-utils-master/test_core_models/tests/test_models_soft_deleted2.py": {
        "test_built_in_cascade": {
            "name": "test_built_in_cascade",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {
                "settings": [
                    "str",
                    "bool"
                ]
            }
        },
        "test_cascade_delete": {
            "name": "test_cascade_delete",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "settings": []
            }
        },
        "test_cascade_delete_qs": {
            "name": "test_cascade_delete_qs",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "settings": []
            }
        },
        "test_cascade_nullable": {
            "name": "test_cascade_nullable",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_cascade_set_null": {
            "name": "test_cascade_set_null",
            "location": 101,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_cascade_set_null_qs": {
            "name": "test_cascade_set_null_qs",
            "location": 121,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_cascade_set_default": {
            "name": "test_cascade_set_default",
            "location": 141,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "pik-django-utils-master/test_core_models/tests/test_models_soft_deleted3.py": {
        "test_all_objects_is_deleted_filter": {
            "name": "test_all_objects_is_deleted_filter",
            "location": 161,
            "return": [
                "None"
            ],
            "arguments": {
                "settings": [
                    "str"
                ]
            }
        },
        "test_deleted_model_from_exclude_list": {
            "name": "test_deleted_model_from_exclude_list",
            "location": 182,
            "return": [
                "None"
            ],
            "arguments": {
                "settings": [
                    "str"
                ]
            }
        },
        "test_delete_not_soft_deleted": {
            "name": "test_delete_not_soft_deleted",
            "location": 195,
            "return": [
                "None"
            ],
            "arguments": {
                "settings": []
            }
        },
        "test_delete_parent_soft_deleted": {
            "name": "test_delete_parent_soft_deleted",
            "location": 207,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_delete_child_soft_deleted": {
            "name": "test_delete_child_soft_deleted",
            "location": 218,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "TestDeleteSoftDeletedModel.test_delete": {
            "name": "test_delete",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDeleteSoftDeletedModel.test_delete_historized": {
            "name": "test_delete_historized",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDeleteSoftDeletedModel.test_restore": {
            "name": "test_restore",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDeleteSoftDeletedModel.test_hard_delete_instance": {
            "name": "test_hard_delete_instance",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "settings": [
                    "typing.Type",
                    "str"
                ],
                "safe_mode": [
                    "typing.Type",
                    "str"
                ]
            }
        },
        "TestDeletedRelatedModel.test_cascade_delete": {
            "name": "test_cascade_delete",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDeletedRelatedModel.test_set_null_delete": {
            "name": "test_set_null_delete",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDeletedRelatedModel.test_cascade_with_already_deleted": {
            "name": "test_cascade_with_already_deleted",
            "location": 121,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDeletedRelatedModel.test_delete_cascade_not_soft_deleted_forbidden": {
            "name": "test_delete_cascade_not_soft_deleted_forbidden",
            "location": 132,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "settings": [
                    "str"
                ]
            }
        },
        "TestDeletedRelatedModel.test_delete_cascade_not_soft_deleted": {
            "name": "test_delete_cascade_not_soft_deleted",
            "location": 142,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "settings": []
            }
        }
    },
    "pik-django-utils-master/test_core_models/tests/test_models_uided.py": {
        "uided_model": {
            "name": "uided_model",
            "location": 10,
            "return": [],
            "arguments": {
                "request": [
                    "str",
                    "set[str]",
                    "tuple[typing.Union[int,int]]"
                ]
            }
        },
        "puided_model": {
            "name": "puided_model",
            "location": 17,
            "return": [],
            "arguments": {
                "request": [
                    "str",
                    "set[str]",
                    "tuple[typing.Union[int,int]]"
                ]
            }
        },
        "test_uided_protocol": {
            "name": "test_uided_protocol",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "uided_model": [
                    "str"
                ]
            }
        },
        "test_puided_protocol": {
            "name": "test_puided_protocol",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "puided_model": [
                    "str"
                ]
            }
        }
    },
    "pik-django-utils-master/test_core_models/tests/test_models_versioned.py": {
        "versioned_model": {
            "name": "versioned_model",
            "location": 10,
            "return": [],
            "arguments": {
                "request": [
                    "str",
                    "set[str]",
                    "tuple[typing.Union[int,int]]"
                ]
            }
        },
        "strict_versioned_model": {
            "name": "strict_versioned_model",
            "location": 17,
            "return": [],
            "arguments": {
                "request": [
                    "str"
                ]
            }
        },
        "test_versioned_protocol": {
            "name": "test_versioned_protocol",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "versioned_model": [
                    "str"
                ]
            }
        },
        "test_strict_versioned_protocol": {
            "name": "test_strict_versioned_protocol",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "strict_versioned_model": [
                    "str",
                    "int",
                    "typing.Type"
                ]
            }
        },
        "test_optimistic_concurrency_update": {
            "name": "test_optimistic_concurrency_update",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "versioned_model": [
                    "typing.Type"
                ]
            }
        }
    },
    "pik-django-utils-master/test_core_models/tests/__init__.py": {},
    "pik-django-utils-master/test_core_models_fields/__init__.py": {},
    "pik-django-utils-master/test_core_models_fields/models/base.py": {
        "Building.__str__": {
            "name": "__str__",
            "location": 9,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "BuildingPart.__str__": {
            "name": "__str__",
            "location": 24,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pik-django-utils-master/test_core_models_fields/models/__init__.py": {},
    "pik-django-utils-master/test_core_models_fields/tests/test_models_base.py": {
        "test_create_parent_without_child": {
            "name": "test_create_parent_without_child",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_every_child_will_create_new_parent": {
            "name": "test_every_child_will_create_new_parent",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_child_will_create_new_parent_with_the_same_address_and_uid": {
            "name": "test_child_will_create_new_parent_with_the_same_address_and_uid",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_parent_address_unique_constraint": {
            "name": "test_parent_address_unique_constraint",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_child_ptr_uid_the_same_as_parent": {
            "name": "test_child_ptr_uid_the_same_as_parent",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "pik-django-utils-master/test_core_models_fields/tests/__init__.py": {},
    "pik-django-utils-master/test_core_shortcuts/__init__.py": {},
    "pik-django-utils-master/test_core_shortcuts/models/base.py": {},
    "pik-django-utils-master/test_core_shortcuts/models/__init__.py": {},
    "pik-django-utils-master/test_core_shortcuts/tests/factories.py": {
        "MySimpleModelFactory.names": {
            "name": "names",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "create": [
                    "int",
                    "str",
                    "typing.Type"
                ],
                "extracted": [
                    "str"
                ]
            }
        }
    },
    "pik-django-utils-master/test_core_shortcuts/tests/test_model_objects_shortcuts.py": {
        "test_model": {
            "name": "test_model",
            "location": 20,
            "return": [],
            "arguments": {
                "request": [
                    "str"
                ]
            }
        },
        "test_get_object_or_none": {
            "name": "test_get_object_or_none",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "test_model": [
                    "list[str]"
                ]
            }
        },
        "test_get_object_or_none_queryset": {
            "name": "test_get_object_or_none_queryset",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "test_model": [
                    "list[str]"
                ]
            }
        },
        "test_get_object_or_none_manager": {
            "name": "test_get_object_or_none_manager",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "test_model": [
                    "list[str]"
                ]
            }
        },
        "test_get_object_or_none_args": {
            "name": "test_get_object_or_none_args",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "test_model": [
                    "list[str]"
                ]
            }
        },
        "test_validate_and_create_object": {
            "name": "test_validate_and_create_object",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "test_model": [
                    "list[str]",
                    "str"
                ]
            }
        },
        "test_validate_and_update_object__update": {
            "name": "test_validate_and_update_object__update",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "test_model": [
                    "list[str]"
                ]
            }
        },
        "test_validate_and_update_object__no_update": {
            "name": "test_validate_and_update_object__no_update",
            "location": 97,
            "return": [
                "None"
            ],
            "arguments": {
                "test_model": [
                    "list[str]"
                ]
            }
        },
        "test_update_or_create_object__create_without_search": {
            "name": "test_update_or_create_object__create_without_search",
            "location": 113,
            "return": [
                "None"
            ],
            "arguments": {
                "test_model": [
                    "str"
                ]
            }
        },
        "test_update_or_create_object__create": {
            "name": "test_update_or_create_object__create",
            "location": 129,
            "return": [
                "None"
            ],
            "arguments": {
                "test_model": [
                    "list[str]"
                ]
            }
        },
        "test_update_or_create_object__no_update": {
            "name": "test_update_or_create_object__no_update",
            "location": 146,
            "return": [
                "None"
            ],
            "arguments": {
                "test_model": [
                    "list[str]"
                ]
            }
        },
        "test_update_or_create_object_with_queryset": {
            "name": "test_update_or_create_object_with_queryset",
            "location": 163,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "TestNotCallM2MUpdate.test_update_or_create_object": {
            "name": "test_update_or_create_object",
            "location": 180,
            "return": [
                "None"
            ],
            "arguments": {
                "_update_m2m_fields": []
            }
        }
    },
    "pik-django-utils-master/test_core_shortcuts/tests/__init__.py": {},
    "pik-django-utils-master/test_project/celery.py": {
        "debug_task": {
            "name": "debug_task",
            "location": 21,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pik-django-utils-master/test_project/settings.py": {},
    "pik-django-utils-master/test_project/urls.py": {},
    "pik-django-utils-master/test_project/__init__.py": {}
}
{
    "pillest-master/boop/setup.py": {},
    "pillest-master/boop/boop/colours.py": {
        "random_saturation": {
            "name": "random_saturation",
            "location": 16,
            "return": [],
            "arguments": {}
        },
        "random_rgb": {
            "name": "random_rgb",
            "location": 27,
            "return": [
                "tuple[]"
            ],
            "arguments": {}
        },
        "random_palette": {
            "name": "random_palette",
            "location": 37,
            "return": [
                "list[]"
            ],
            "arguments": {
                "number_of_colours": [
                    "int"
                ],
                "mode": [
                    "typing.Text"
                ]
            }
        },
        "adjust_saturation": {
            "name": "adjust_saturation",
            "location": 65,
            "return": [
                "tuple[]",
                "int"
            ],
            "arguments": {
                "ratio": [
                    "int"
                ],
                "colour": [
                    "str"
                ]
            }
        },
        "add_colours": {
            "name": "add_colours",
            "location": 76,
            "return": [
                "tuple[]",
                "int"
            ],
            "arguments": {
                "c1": [
                    "typing.DefaultDict",
                    "str",
                    "int"
                ],
                "c2": [
                    "typing.DefaultDict",
                    "str",
                    "int"
                ]
            }
        }
    },
    "pillest-master/boop/boop/images.py": {
        "get_pixel": {
            "name": "get_pixel",
            "location": 10,
            "return": [],
            "arguments": {
                "image": [],
                "location": [
                    "tuple[typing.Union[int,int]]",
                    "str",
                    "bool",
                    "list[int]"
                ]
            }
        },
        "put_pixel": {
            "name": "put_pixel",
            "location": 17,
            "return": [],
            "arguments": {
                "image": [],
                "location": [
                    "tuple[typing.Union[int,int]]",
                    "str",
                    "bool"
                ],
                "colour": [
                    "tuple[typing.Union[int,int]]",
                    "str",
                    "bool"
                ]
            }
        }
    },
    "pillest-master/boop/boop/main.py": {
        "add_ball": {
            "name": "add_ball",
            "location": 12,
            "return": [
                "int",
                "float",
                "list[int]",
                "list[float]",
                "str"
            ],
            "arguments": {
                "image": [
                    "int",
                    "float",
                    "list[int]",
                    "list[float]",
                    "str"
                ],
                "ball_centre_location": [
                    "tuple[]",
                    "list[]",
                    "tuple[typing.Union[int,int]]",
                    "str"
                ],
                "solid_colour_radius": [
                    "int"
                ],
                "fade_distance": [
                    "int",
                    "float"
                ],
                "inverted": [
                    "float",
                    "int"
                ],
                "colour": [
                    "float",
                    "int"
                ]
            }
        },
        "make_random_ball_image": {
            "name": "make_random_ball_image",
            "location": 67,
            "return": [],
            "arguments": {
                "image_size": [
                    "bool"
                ],
                "number_of_dots": [
                    "bool",
                    "str"
                ],
                "centre_range": [
                    "tuple[typing.Union[int,int]]",
                    "int"
                ],
                "fade_range": [
                    "tuple[typing.Union[int,int]]",
                    "int"
                ],
                "palette": [
                    "bool",
                    "str"
                ],
                "mode": [
                    "bool"
                ]
            }
        },
        "random_ball": {
            "name": "random_ball",
            "location": 81,
            "return": [
                "tuple[tuple[]]"
            ],
            "arguments": {
                "size": [
                    "int",
                    "typing.Iterator",
                    "float"
                ],
                "centre_range": [
                    "int",
                    "float"
                ],
                "fade_range": [
                    "int",
                    "list[int]",
                    "tuple[]",
                    "str"
                ],
                "colour_generator": [
                    "None",
                    "int",
                    "typing.Iterator"
                ]
            }
        },
        "reduce_palette": {
            "name": "reduce_palette",
            "location": 97,
            "return": [],
            "arguments": {
                "image": [
                    "float",
                    "int",
                    "list[float]",
                    "list[str]",
                    "tuple[int]"
                ],
                "palette_size": [
                    "float",
                    "int",
                    "list[float]",
                    "list[str]",
                    "tuple[int]"
                ]
            }
        },
        "apply_pallete": {
            "name": "apply_pallete",
            "location": 101,
            "return": [],
            "arguments": {
                "palette_image": [],
                "palette": [
                    "int"
                ],
                "image": [
                    "str",
                    "int",
                    "float"
                ]
            }
        },
        "greyscale_balls": {
            "name": "greyscale_balls",
            "location": 106,
            "return": [],
            "arguments": {}
        },
        "randomcolour_balls": {
            "name": "randomcolour_balls",
            "location": 110,
            "return": [],
            "arguments": {}
        },
        "white_balls": {
            "name": "white_balls",
            "location": 114,
            "return": [],
            "arguments": {}
        },
        "draw_balls_into_image": {
            "name": "draw_balls_into_image",
            "location": 119,
            "return": [
                "None"
            ],
            "arguments": {
                "image": [
                    "int",
                    "tuple[typing.Union[int,int]]"
                ],
                "ball_details": [
                    "str",
                    "tuple[typing.Union[int,int,int]]"
                ]
            }
        },
        "shrink_balls": {
            "name": "shrink_balls",
            "location": 124,
            "return": [
                "list[tuple[int]]"
            ],
            "arguments": {
                "ball_details": [
                    "str"
                ]
            }
        },
        "shrink_balls_alt": {
            "name": "shrink_balls_alt",
            "location": 136,
            "return": [
                "list[tuple[int]]"
            ],
            "arguments": {
                "ball_details": [
                    "str"
                ]
            }
        },
        "fading_balls_images": {
            "name": "fading_balls_images",
            "location": 155,
            "return": [
                "list[]"
            ],
            "arguments": {
                "dirpath": [
                    "float",
                    "bool"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 199,
            "return": [
                "int"
            ],
            "arguments": {
                "dirname": [
                    "str",
                    "bool"
                ],
                "debug": [
                    "str"
                ]
            }
        }
    },
    "pillest-master/boop/boop/maths.py": {
        "clip": {
            "name": "clip",
            "location": 6,
            "return": [],
            "arguments": {
                "item": [
                    "list['cirq.Qid']",
                    "str"
                ],
                "min": [
                    "None",
                    "list['cirq.Qid']",
                    "str"
                ],
                "max": [
                    "None",
                    "list['cirq.Qid']",
                    "str"
                ]
            }
        },
        "distance_between_points_ints_only": {
            "name": "distance_between_points_ints_only",
            "location": 10,
            "return": [],
            "arguments": {
                "x1": [
                    "float",
                    "int"
                ],
                "y1": [
                    "int"
                ],
                "x2": [
                    "float",
                    "int"
                ],
                "y2": [
                    "int"
                ]
            }
        }
    },
    "pillest-master/boop/boop/output.py": {
        "save": {
            "name": "save",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "image": [
                    "str"
                ],
                "filename": [
                    "str",
                    "typing.Callable[str, str]"
                ],
                "directory_path": [
                    "str",
                    "typing.Callable[str, str]"
                ],
                "display": [
                    "bool"
                ]
            }
        },
        "get_root_path": {
            "name": "get_root_path",
            "location": 38,
            "return": [],
            "arguments": {}
        },
        "make_image_set_path": {
            "name": "make_image_set_path",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "image_set_name": [
                    "str",
                    "bytes"
                ]
            }
        },
        "show": {
            "name": "show",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "filepath": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ]
            }
        }
    },
    "pillest-master/boop/boop/__init__.py": {},
    "pillest-master/boop/tests/test_colours.py": {
        "test_random_saturation_calls_random_with_expected_params": {
            "name": "test_random_saturation_calls_random_with_expected_params",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "mocked_class": []
            }
        },
        "test_random_rgb_calls_random_saturation_three_times": {
            "name": "test_random_rgb_calls_random_saturation_three_times",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "mocked_class": []
            }
        },
        "test_adjust_saturation_where_colour_is_iterable_and_ratio_is_zero_expected_result": {
            "name": "test_adjust_saturation_where_colour_is_iterable_and_ratio_is_zero_expected_result",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_adjust_saturation_where_colour_is_iterable_and_ratio_is_more_than_1_expected_result": {
            "name": "test_adjust_saturation_where_colour_is_iterable_and_ratio_is_more_than_1_expected_result",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_adjust_saturation_where_colour_is_iterable_and_ratio_is_less_than_1_expected_result": {
            "name": "test_adjust_saturation_where_colour_is_iterable_and_ratio_is_less_than_1_expected_result",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_adjust_saturation_where_colour_is_iterable_and_ratio_is_1_expected_result": {
            "name": "test_adjust_saturation_where_colour_is_iterable_and_ratio_is_1_expected_result",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_adjust_saturation_where_colour_is_number_and_ratio_is_zero_expected_result": {
            "name": "test_adjust_saturation_where_colour_is_number_and_ratio_is_zero_expected_result",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_adjust_saturation_where_colour_is_number_and_ratio_is_more_than_1_expected_result": {
            "name": "test_adjust_saturation_where_colour_is_number_and_ratio_is_more_than_1_expected_result",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_adjust_saturation_where_colour_is_number_and_ratio_is_less_than_1_expected_result": {
            "name": "test_adjust_saturation_where_colour_is_number_and_ratio_is_less_than_1_expected_result",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_adjust_saturation_where_colour_is_number_and_ratio_is_1_expected_result": {
            "name": "test_adjust_saturation_where_colour_is_number_and_ratio_is_1_expected_result",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_adjust_saturation_where_ratio_is_less_than_1": {
            "name": "test_adjust_saturation_where_ratio_is_less_than_1",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_random_palette_default_generator_zero_colours_expected_result": {
            "name": "test_random_palette_default_generator_zero_colours_expected_result",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_random_palette_default_generator_with_one_colour_called_once": {
            "name": "test_random_palette_default_generator_with_one_colour_called_once",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "mocked_method": []
            }
        },
        "test_random_palette_default_generator_with_one_colour_expected_result": {
            "name": "test_random_palette_default_generator_with_one_colour_expected_result",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_random_palette_default_generator_many_colours_called_that_many_times": {
            "name": "test_random_palette_default_generator_many_colours_called_that_many_times",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "mocked_method": []
            }
        },
        "test_random_palette_default_generator_with_many_colours_expected_result": {
            "name": "test_random_palette_default_generator_with_many_colours_expected_result",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_random_palette_rgb_mode_zero_colours_expected_result": {
            "name": "test_random_palette_rgb_mode_zero_colours_expected_result",
            "location": 104,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_random_palette_l_mode_with_one_colour_called_once": {
            "name": "test_random_palette_l_mode_with_one_colour_called_once",
            "location": 109,
            "return": [
                "None"
            ],
            "arguments": {
                "mocked_method": []
            }
        },
        "test_random_palette_l_mode_with_one_colour_expected_result": {
            "name": "test_random_palette_l_mode_with_one_colour_expected_result",
            "location": 114,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_random_palette_l_mode_many_colours_called_that_many_times": {
            "name": "test_random_palette_l_mode_many_colours_called_that_many_times",
            "location": 119,
            "return": [
                "None"
            ],
            "arguments": {
                "mocked_method": []
            }
        },
        "test_random_palette_l_mode_with_many_colours_expected_result": {
            "name": "test_random_palette_l_mode_with_many_colours_expected_result",
            "location": 127,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_random_palette_rgb_mode_with_one_colour_called_once": {
            "name": "test_random_palette_rgb_mode_with_one_colour_called_once",
            "location": 132,
            "return": [
                "None"
            ],
            "arguments": {
                "mocked_method": []
            }
        },
        "test_random_palette_rgb_mode_with_one_colour_expected_result": {
            "name": "test_random_palette_rgb_mode_with_one_colour_expected_result",
            "location": 137,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_random_palette_rgb_mode_many_colours_called_that_many_times": {
            "name": "test_random_palette_rgb_mode_many_colours_called_that_many_times",
            "location": 142,
            "return": [
                "None"
            ],
            "arguments": {
                "mocked_method": []
            }
        },
        "test_random_palette_rgb_mode_with_many_colours_expected_result": {
            "name": "test_random_palette_rgb_mode_with_many_colours_expected_result",
            "location": 150,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_add_colours_array": {
            "name": "test_add_colours_array",
            "location": 154,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_add_colours_array_clipping": {
            "name": "test_add_colours_array_clipping",
            "location": 159,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_add_colours_number": {
            "name": "test_add_colours_number",
            "location": 164,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_add_colours_number_clipping": {
            "name": "test_add_colours_number_clipping",
            "location": 169,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "pillest-master/boop/tests/test_math,py.py": {
        "test_clip_with_min_and_max_calls_numpy": {
            "name": "test_clip_with_min_and_max_calls_numpy",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "mocked_method": []
            }
        },
        "test_clip_with_min_calls_numpy": {
            "name": "test_clip_with_min_calls_numpy",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "mocked_method": []
            }
        },
        "test_clip_with_max_calls_numpy": {
            "name": "test_clip_with_max_calls_numpy",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "mocked_method": []
            }
        }
    },
    "pillest-master/boop/tests/__init__.py": {}
}
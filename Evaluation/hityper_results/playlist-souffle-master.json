{
    "playlist-souffle-master/setup.py": {},
    "playlist-souffle-master/playlist_souffle/souffle_playlist.py": {
        "souffle_playlist": {
            "name": "souffle_playlist",
            "location": 11,
            "return": [],
            "arguments": {
                "spotify": [],
                "playlist_uri": [
                    "bool",
                    "float"
                ],
                "souffle_by": [
                    "int",
                    "float",
                    "None"
                ],
                "souffle_time": [
                    "float",
                    "str",
                    "int",
                    "None"
                ]
            }
        }
    },
    "playlist-souffle-master/playlist_souffle/__init__.py": {},
    "playlist-souffle-master/playlist_souffle/definitions/exception.py": {
        "SouffleSpotifyError.__str__": {
            "name": "__str__",
            "location": 26,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "playlist-souffle-master/playlist_souffle/definitions/playlist.py": {},
    "playlist-souffle-master/playlist_souffle/definitions/track.py": {},
    "playlist-souffle-master/playlist_souffle/definitions/__init__.py": {},
    "playlist-souffle-master/playlist_souffle/delivery/__init__.py": {},
    "playlist-souffle-master/playlist_souffle/delivery/aws_lambda/fetch_spotify_access_token.py": {
        "fetch_spotify_access_token": {
            "name": "fetch_spotify_access_token",
            "location": 20,
            "return": [],
            "arguments": {
                "refresh_token": [
                    "str"
                ],
                "client_id": [
                    "str"
                ],
                "client_secret": [
                    "str"
                ]
            }
        },
        "handler": {
            "name": "handler",
            "location": 64,
            "return": [],
            "arguments": {
                "event": [
                    "int",
                    "list[]",
                    "dict[str, typing.Any]"
                ],
                "context": [
                    "dict[str, typing.Any]",
                    "list[]",
                    "int"
                ]
            }
        }
    },
    "playlist-souffle-master/playlist_souffle/delivery/aws_lambda/fetch_spotify_refresh_token.py": {
        "fetch_spotify_refresh_token": {
            "name": "fetch_spotify_refresh_token",
            "location": 20,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "authorization_token": [
                    "str"
                ],
                "redirect_uri": [
                    "str",
                    "bool",
                    "dict[str, typing.Any]"
                ],
                "client_id": [
                    "str"
                ],
                "client_secret": [
                    "str"
                ]
            }
        },
        "handler": {
            "name": "handler",
            "location": 72,
            "return": [],
            "arguments": {
                "event": [
                    "str"
                ],
                "context": [
                    "dict[str, typing.Any]",
                    "list[]",
                    "int"
                ]
            }
        }
    },
    "playlist-souffle-master/playlist_souffle/delivery/aws_lambda/souffle_playlist.py": {
        "generate_spotify_exception_response": {
            "name": "generate_spotify_exception_response",
            "location": 21,
            "return": [],
            "arguments": {
                "exception": [
                    "str",
                    "Exception",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "handler": {
            "name": "handler",
            "location": 34,
            "return": [],
            "arguments": {
                "event": [
                    "str"
                ],
                "context": [
                    "dict[str, typing.Any]",
                    "list[]",
                    "int"
                ]
            }
        }
    },
    "playlist-souffle-master/playlist_souffle/delivery/aws_lambda/util.py": {
        "setup_sentry": {
            "name": "setup_sentry",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "decrypt_kms_string": {
            "name": "decrypt_kms_string",
            "location": 31,
            "return": [],
            "arguments": {
                "encrypted_string": [
                    "str",
                    "bytes",
                    "list[str]"
                ]
            }
        },
        "extract_bearer_token": {
            "name": "extract_bearer_token",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "string": [
                    "str"
                ]
            }
        },
        "extract_bearer_token_from_api_event": {
            "name": "extract_bearer_token_from_api_event",
            "location": 70,
            "return": [
                "frozenset",
                "set[str]",
                "list[typing.Union[typing.Any,typing.Any]]",
                "list[str]"
            ],
            "arguments": {
                "event": [
                    "list[]",
                    "str"
                ]
            }
        },
        "generate_api_gateway_response": {
            "name": "generate_api_gateway_response",
            "location": 88,
            "return": [
                "dict[typing.Union[tuple[typing.Union[typing.Text,dict[str, str]]],tuple[typing.Union[typing.Text,int]],tuple[typing.Optional[typing.Text]],tuple[typing.Union[typing.Text,dict[, ]]],tuple[typing.Union[typing.Text,list[dict[str, typing.Any]]]]], typing.Union[tuple[typing.Union[typing.Text,dict[str, str]]],tuple[typing.Union[typing.Text,int]],tuple[typing.Optional[typing.Text]],tuple[typing.Union[typing.Text,dict[, ]]],tuple[typing.Union[typing.Text,list[dict[str, typing.Any]]]]]]"
            ],
            "arguments": {
                "status_code": [
                    "str",
                    "dict[str, str]",
                    "int",
                    "None",
                    "dict[, ]",
                    "list[dict[str, typing.Any]]"
                ],
                "headers": [
                    "None",
                    "str",
                    "dict[str, str]",
                    "int",
                    "dict[, ]",
                    "list[dict[str, typing.Any]]"
                ],
                "body": [
                    "None",
                    "str",
                    "dict[str, str]",
                    "int",
                    "dict[, ]",
                    "list[dict[str, typing.Any]]"
                ]
            }
        },
        "with_cors": {
            "name": "with_cors",
            "location": 102,
            "return": [],
            "arguments": {
                "allow_origin": [
                    "bool"
                ],
                "allow_credentials": [
                    "bool"
                ],
                "expose_headers": [
                    "None",
                    "bool"
                ]
            }
        },
        "with_cors.decorate": {
            "name": "decorate",
            "location": 121,
            "return": [],
            "arguments": {
                "func": []
            }
        },
        "with_cors.decorate.inner": {
            "name": "inner",
            "location": 123,
            "return": [
                "dict[typing.Text, dict[typing.Text, ]]"
            ],
            "arguments": {}
        }
    },
    "playlist-souffle-master/playlist_souffle/delivery/aws_lambda/__init__.py": {},
    "playlist-souffle-master/playlist_souffle/entities/souffler.py": {
        "generate_souffled_playlist": {
            "name": "generate_souffled_playlist",
            "location": 15,
            "return": [
                "Playlist"
            ],
            "arguments": {
                "original_playlist": [
                    "bool",
                    "typing.Callable[, ]",
                    "str"
                ],
                "souffle_by": [
                    "str",
                    "int",
                    "typing.Callable[, ]",
                    "dict[str, typing.Any]"
                ],
                "related_tracks_by_track": [
                    "bool",
                    "list[typing.Any]",
                    "None"
                ],
                "souffle_time": [
                    "str",
                    "int",
                    "typing.Callable[, ]",
                    "dict[str, typing.Any]"
                ]
            }
        }
    },
    "playlist-souffle-master/playlist_souffle/entities/souffler_util.py": {
        "generate_souffle_description": {
            "name": "generate_souffle_description",
            "location": 16,
            "return": [
                "str"
            ],
            "arguments": {
                "original_name": [
                    "str",
                    "None",
                    "dict[str, typing.Any]"
                ],
                "souffle_by": [
                    "str",
                    "None",
                    "dict[str, typing.Any]"
                ],
                "time_of_souffle": [
                    "str",
                    "None",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "generate_souffle_name": {
            "name": "generate_souffle_name",
            "location": 31,
            "return": [
                "str"
            ],
            "arguments": {
                "original_name": [
                    "str"
                ]
            }
        },
        "souffle_tracks": {
            "name": "souffle_tracks",
            "location": 59,
            "return": [
                "list[typing.Union[int,str]]"
            ],
            "arguments": {
                "tracks": [
                    "list[typing.Union[int,str,str]]",
                    "list[]"
                ],
                "related_tracks_by_track": [
                    "str"
                ]
            }
        }
    },
    "playlist-souffle-master/playlist_souffle/entities/__init__.py": {},
    "playlist-souffle-master/playlist_souffle/gateways/spotify.py": {
        "SpotifyGateway.__init__": {
            "name": "__init__",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "access_token": [
                    "str",
                    "None"
                ]
            }
        },
        "SpotifyGateway.fetch_playlist": {
            "name": "fetch_playlist",
            "location": 39,
            "return": [
                "Playlist"
            ],
            "arguments": {
                "self": [],
                "playlist_uri": [
                    "str"
                ]
            }
        },
        "SpotifyGateway.fetch_related_tracks": {
            "name": "fetch_related_tracks",
            "location": 55,
            "return": [
                "set[]"
            ],
            "arguments": {
                "self": [],
                "track": [
                    "str",
                    "bool",
                    "tuple[]"
                ],
                "related_by": [
                    "int",
                    "str"
                ]
            }
        },
        "SpotifyGateway.fetch_related_tracks_by_track": {
            "name": "fetch_related_tracks_by_track",
            "location": 74,
            "return": [],
            "arguments": {
                "self": [],
                "tracks": [
                    "dict[, ]",
                    "tuple[typing.Union[str,...]]",
                    "None",
                    "list[float]",
                    "str"
                ],
                "related_by": [
                    "dict[, ]",
                    "tuple[typing.Union[str,...]]",
                    "None",
                    "list[float]",
                    "str"
                ]
            }
        },
        "SpotifyGateway.create_playlist": {
            "name": "create_playlist",
            "location": 88,
            "return": [],
            "arguments": {
                "self": [],
                "playlist": [
                    "bool",
                    "dict[, ]",
                    "str",
                    "None"
                ],
                "is_public": [
                    "bool"
                ]
            }
        },
        "SpotifyGateway.fetch_current_user_id": {
            "name": "fetch_current_user_id",
            "location": 116,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "playlist-souffle-master/playlist_souffle/gateways/spotify_util.py": {
        "raise_spotipy_error_as_souffle_error": {
            "name": "raise_spotipy_error_as_souffle_error",
            "location": 26,
            "return": [],
            "arguments": {
                "func": [
                    "typing.Callable[, ]",
                    "str"
                ]
            }
        },
        "pluck_track": {
            "name": "pluck_track",
            "location": 42,
            "return": [
                "Track"
            ],
            "arguments": {
                "track_record": [
                    "str"
                ],
                "artist": [
                    "None",
                    "str",
                    "typing.Type",
                    "dict[str, typing.Any]",
                    "int"
                ],
                "album": [
                    "None",
                    "str",
                    "typing.Type",
                    "dict[str, typing.Any]",
                    "int"
                ]
            }
        },
        "fetch_playlist_metadata": {
            "name": "fetch_playlist_metadata",
            "location": 58,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "playlist_id": [
                    "str",
                    "int",
                    "None"
                ],
                "bearer_token": [
                    "str",
                    "int",
                    "None"
                ]
            }
        },
        "fetch_playlist_track_data": {
            "name": "fetch_playlist_track_data",
            "location": 69,
            "return": [
                "list[]"
            ],
            "arguments": {
                "playlist_id": [
                    "str",
                    "int"
                ],
                "bearer_token": [
                    "str",
                    "int"
                ]
            }
        },
        "raise_spotipy_error_as_souffle_error.inner": {
            "name": "inner",
            "location": 31,
            "return": [],
            "arguments": {}
        }
    },
    "playlist-souffle-master/playlist_souffle/gateways/__init__.py": {},
    "playlist-souffle-master/scripts/souffle_tester.py": {
        "_parse_args": {
            "name": "_parse_args",
            "location": 15,
            "return": [],
            "arguments": {}
        },
        "souffle_invoke_local": {
            "name": "souffle_invoke_local",
            "location": 64,
            "return": [],
            "arguments": {
                "access_token": [
                    "str",
                    "None"
                ]
            }
        },
        "souffle_invoke_http": {
            "name": "souffle_invoke_http",
            "location": 100,
            "return": [],
            "arguments": {
                "access_token": [
                    "str",
                    "None",
                    "int",
                    "dict[str, str]"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 119,
            "return": [
                "int"
            ],
            "arguments": {}
        }
    },
    "playlist-souffle-master/tests/__init__.py": {},
    "playlist-souffle-master/tests/integration/test_use_cases_souffle_playlist.py": {
        "art_tatum_tracks": {
            "name": "art_tatum_tracks",
            "location": 62,
            "return": [
                "list[Track]"
            ],
            "arguments": {}
        },
        "the_xx_tracks": {
            "name": "the_xx_tracks",
            "location": 69,
            "return": [
                "list[Track]"
            ],
            "arguments": {}
        },
        "TestSoufflePlaylist.test_two_tracks_simple": {
            "name": "test_two_tracks_simple",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "art_tatum_tracks": [
                    "str"
                ],
                "the_xx_tracks": [
                    "str"
                ]
            }
        }
    },
    "playlist-souffle-master/tests/unit/test_delivery_aws_lambda_util.py": {
        "TestExtractBearerToken.test_valid_bearer_token": {
            "name": "test_valid_bearer_token",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestExtractBearerToken.test_empty_bearer_token": {
            "name": "test_empty_bearer_token",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestExtractBearerToken.test_empty_string": {
            "name": "test_empty_string",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestExtractBearerToken.test_missing_bearer_prefix": {
            "name": "test_missing_bearer_prefix",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestExtractBearerToken.test_two_tokens": {
            "name": "test_two_tokens",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestExtractBearerTokenFromApiEvent.test_valid_event": {
            "name": "test_valid_event",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestExtractBearerTokenFromApiEvent.test_missing_headers": {
            "name": "test_missing_headers",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestExtractBearerTokenFromApiEvent.test_headers_is_none": {
            "name": "test_headers_is_none",
            "location": 107,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestExtractBearerTokenFromApiEvent.test_missing_authorization": {
            "name": "test_missing_authorization",
            "location": 123,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestExtractBearerTokenFromApiEvent.test_invalid_bearer_token": {
            "name": "test_invalid_bearer_token",
            "location": 138,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGenerateApiGatewayResponse.test_no_header_or_body": {
            "name": "test_no_header_or_body",
            "location": 157,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGenerateApiGatewayResponse.test_scalar_body_fields": {
            "name": "test_scalar_body_fields",
            "location": 168,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGenerateApiGatewayResponse.test_complex_body_fields": {
            "name": "test_complex_body_fields",
            "location": 191,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGenerateApiGatewayResponse.test_headers": {
            "name": "test_headers",
            "location": 211,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "playlist-souffle-master/tests/unit/test_entities_souffler.py": {
        "dummy_track": {
            "name": "dummy_track",
            "location": 96,
            "return": [
                "Track"
            ],
            "arguments": {}
        },
        "blood_bank_ep": {
            "name": "blood_bank_ep",
            "location": 101,
            "return": [
                "list[Track]"
            ],
            "arguments": {}
        },
        "soultrane": {
            "name": "soultrane",
            "location": 108,
            "return": [
                "list[Track]"
            ],
            "arguments": {}
        },
        "TestSouffleTracks.test_empty_input": {
            "name": "test_empty_input",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSouffleTracks.test_one_track_with_one_related_track": {
            "name": "test_one_track_with_one_related_track",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dummy_track": [
                    "str",
                    "float"
                ]
            }
        },
        "TestSouffleTracks.test_souffle_album": {
            "name": "test_souffle_album",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "blood_bank_ep": [
                    "set[typing.Union[int,str,str,str,str,str,str,str,str,str,str,str,str]]",
                    "str"
                ]
            }
        },
        "TestSouffleTracks.test_two_tracks_different_related_tracks": {
            "name": "test_two_tracks_different_related_tracks",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "blood_bank_ep": [
                    "str"
                ],
                "soultrane": [
                    "str"
                ]
            }
        },
        "TestSouffleTracks.test_two_tracks_same_related_tracks": {
            "name": "test_two_tracks_same_related_tracks",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "blood_bank_ep": []
            }
        }
    },
    "playlist-souffle-master/tests/unit/test_gateways_spotify.py": {
        "blood_bank_ep": {
            "name": "blood_bank_ep",
            "location": 217,
            "return": [
                "list[Track]"
            ],
            "arguments": {}
        },
        "soultrane": {
            "name": "soultrane",
            "location": 224,
            "return": [
                "list[Track]"
            ],
            "arguments": {}
        },
        "spotify_track_object": {
            "name": "spotify_track_object",
            "location": 236,
            "return": [
                "dict[typing.Text, typing.Union[dict[typing.Text, typing.Text],list[dict[typing.Text, typing.Text]],typing.Text]]"
            ],
            "arguments": {}
        },
        "spotify_track_object_two_artists": {
            "name": "spotify_track_object_two_artists",
            "location": 245,
            "return": [
                "dict[typing.Text, typing.Union[dict[typing.Text, typing.Text],list[dict[typing.Text, typing.Text]],typing.Text]]"
            ],
            "arguments": {}
        },
        "spotify_playlist_tracks_response": {
            "name": "spotify_playlist_tracks_response",
            "location": 255,
            "return": [
                "dict[typing.Text, list[dict[typing.Text, dict[typing.Text, typing.Union[dict[typing.Text, typing.Text],list[dict[typing.Text, typing.Text]],typing.Text]]]]]"
            ],
            "arguments": {}
        },
        "TestSpotifyUtil.test_fetch_playlist_track_data": {
            "name": "test_fetch_playlist_track_data",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "spotify_playlist_tracks_response": [
                    "bytes"
                ]
            }
        },
        "TestSpotifyUtil.test_pluck_track_simple": {
            "name": "test_pluck_track_simple",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "spotify_track_object": [
                    "int",
                    "tuple[typing.Union[float,float,float,float,float]]",
                    "float",
                    "str"
                ]
            }
        },
        "TestSpotifyUtil.test_pluck_track_provide_artist": {
            "name": "test_pluck_track_provide_artist",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "spotify_track_object": []
            }
        },
        "TestSpotifyUtil.test_pluck_track_provide_album": {
            "name": "test_pluck_track_provide_album",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "spotify_track_object": []
            }
        },
        "TestSpotifyUtil.test_pluck_track_with_two_albums": {
            "name": "test_pluck_track_with_two_albums",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "spotify_track_object_two_artists": [
                    "int",
                    "tuple[typing.Union[float,float,float,float,float]]",
                    "float",
                    "str"
                ]
            }
        },
        "TestRaiseSpotipyErrorAsSouffleError.test_function_that_returns_and_doesnt_raise": {
            "name": "test_function_that_returns_and_doesnt_raise",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRaiseSpotipyErrorAsSouffleError.test_function_that_doesnt_return_and_doesnt_raise": {
            "name": "test_function_that_doesnt_return_and_doesnt_raise",
            "location": 128,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRaiseSpotipyErrorAsSouffleError.test_function_that_raises_runtime_errro": {
            "name": "test_function_that_raises_runtime_errro",
            "location": 116,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRaiseSpotipyErrorAsSouffleError.test_function_that_raises_spotipy_error": {
            "name": "test_function_that_raises_spotipy_error",
            "location": 139,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFetchRelatedTracksByTrack.test_one_track": {
            "name": "test_one_track",
            "location": 163,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "blood_bank_ep": [
                    "str"
                ]
            }
        },
        "TestFetchRelatedTracksByTrack.test_two_tracks": {
            "name": "test_two_tracks",
            "location": 186,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "blood_bank_ep": [],
                "soultrane": []
            }
        },
        "TestRaiseSpotipyErrorAsSouffleError.test_function_that_returns_and_doesnt_raise.func": {
            "name": "func",
            "location": 96,
            "return": [
                "int"
            ],
            "arguments": {}
        },
        "TestRaiseSpotipyErrorAsSouffleError.test_function_that_doesnt_return_and_doesnt_raise.func": {
            "name": "func",
            "location": 133,
            "return": [
                "int"
            ],
            "arguments": {}
        },
        "TestRaiseSpotipyErrorAsSouffleError.test_function_that_raises_runtime_errro.func": {
            "name": "func",
            "location": 120,
            "return": [
                "int"
            ],
            "arguments": {}
        },
        "TestRaiseSpotipyErrorAsSouffleError.test_function_that_raises_spotipy_error.func": {
            "name": "func",
            "location": 147,
            "return": [
                "int"
            ],
            "arguments": {}
        },
        "TestFetchRelatedTracksByTrack.test_two_tracks.side_effect": {
            "name": "side_effect",
            "location": 195,
            "return": [
                "set[]"
            ],
            "arguments": {
                "track": [],
                "related_by": []
            }
        }
    },
    "playlist-souffle-master/tests/unit/__init__.py": {}
}
{
    "plume-master/plume.py": {
        "_nested_get": {
            "name": "_nested_get",
            "location": 15,
            "return": [
                "str",
                "None"
            ],
            "arguments": {
                "document": [
                    "str"
                ],
                "field": [
                    "str"
                ]
            }
        },
        "_nested_pop": {
            "name": "_nested_pop",
            "location": 26,
            "return": [
                "dict[str, list[str]]",
                "list[]",
                "list[float]",
                "None"
            ],
            "arguments": {
                "document": [
                    "list[float]"
                ],
                "field": [
                    "str"
                ]
            }
        },
        "_nested_set": {
            "name": "_nested_set",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "document": [],
                "field": [
                    "str"
                ],
                "value": [
                    "str",
                    "int",
                    "None",
                    "typing.Mapping"
                ]
            }
        },
        "transactional": {
            "name": "transactional",
            "location": 260,
            "return": [],
            "arguments": {
                "fun": [
                    "int",
                    "str",
                    "typing.Iterable[C]"
                ]
            }
        },
        "Selector.get_selector": {
            "name": "get_selector",
            "location": 50,
            "return": [
                "Equal",
                "ImplicitAnd",
                "And",
                "Or"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str"
                ],
                "expression": []
            }
        },
        "Selector.get_field_selector": {
            "name": "get_field_selector",
            "location": 64,
            "return": [
                "Equal",
                "GreaterThan",
                "GreaterThanOrEqual",
                "LowerThan",
                "LowerThanOrEqual",
                "NotEqual"
            ],
            "arguments": {
                "self": [],
                "field": [
                    "str"
                ],
                "operator": [
                    "str",
                    "typing.Pattern",
                    "list[typing.Union[typing.Any,typing.Any]]",
                    "int",
                    "list[tuple[typing.Union[str,str]]]",
                    "list[str]"
                ],
                "value": [
                    "str"
                ]
            }
        },
        "And.__init__": {
            "name": "__init__",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "expressions": [
                    "list[]"
                ]
            }
        },
        "And.is_empty": {
            "name": "is_empty",
            "location": 89,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "And.match": {
            "name": "match",
            "location": 92,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "document": [
                    "dict[, ]",
                    "str",
                    "typing.Pattern",
                    "list[]",
                    "set[]"
                ]
            }
        },
        "And.sql": {
            "name": "sql",
            "location": 98,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "indexed_fields": [
                    "bool",
                    "str",
                    "list[float]"
                ]
            }
        },
        "ImplicitAnd.__init__": {
            "name": "__init__",
            "location": 116,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "field": [
                    "typing.Type",
                    "None",
                    "tuple[typing.Union[str,str]]"
                ],
                "expression": [
                    "dict[, ]",
                    "dict[str, typing.Any]",
                    "dict[str, list[typing.Callable[, ]]]"
                ]
            }
        },
        "Or.__init__": {
            "name": "__init__",
            "location": 131,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "expressions": [
                    "list[]"
                ]
            }
        },
        "Or.match": {
            "name": "match",
            "location": 138,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "document": [
                    "dict[, ]",
                    "str",
                    "typing.Pattern",
                    "list[]",
                    "set[]"
                ]
            }
        },
        "Or.sql": {
            "name": "sql",
            "location": 144,
            "return": [
                "None",
                "typing.Text"
            ],
            "arguments": {
                "self": [],
                "indexed_fields": [
                    "bool",
                    "str",
                    "list[float]"
                ]
            }
        },
        "ComparisonSelector.__init__": {
            "name": "__init__",
            "location": 162,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "field": [
                    "int",
                    "str",
                    "typing.Callable[, ]",
                    "typing.Any",
                    "None"
                ],
                "value": [
                    "float",
                    "str",
                    "list[str]",
                    "typing.Callable[None, bool]"
                ]
            }
        },
        "ComparisonSelector.match": {
            "name": "match",
            "location": 166,
            "return": [],
            "arguments": {
                "self": [],
                "document": [
                    "dict[, ]",
                    "typing.Type"
                ]
            }
        },
        "ComparisonSelector.sql": {
            "name": "sql",
            "location": 172,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "indexed_fields": [
                    "dict[str, typing.Any]",
                    "typing.Container",
                    "typing.AbstractSet",
                    "str",
                    "list[str]",
                    "dict[, ]"
                ]
            }
        },
        "Equal.sql": {
            "name": "sql",
            "location": 184,
            "return": [
                "None",
                "str"
            ],
            "arguments": {
                "self": [],
                "indexed_fields": [
                    "dict[str, typing.Any]",
                    "typing.Container",
                    "typing.AbstractSet",
                    "str",
                    "list[str]",
                    "dict[, ]"
                ]
            }
        },
        "NotEqual.sql": {
            "name": "sql",
            "location": 226,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "indexed_fields": [
                    "dict[str, typing.Any]",
                    "typing.Container",
                    "typing.AbstractSet",
                    "str",
                    "list[str]",
                    "dict[, ]"
                ]
            }
        },
        "Transaction.__init__": {
            "name": "__init__",
            "location": 247,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "connection": [
                    "int",
                    "float"
                ]
            }
        },
        "Transaction.__enter__": {
            "name": "__enter__",
            "location": 250,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Transaction.__exit__": {
            "name": "__exit__",
            "location": 253,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "exc_type": [
                    "typing.Type",
                    "None",
                    "str",
                    "BaseException",
                    "Exception"
                ],
                "exc_val": [
                    "typing.Type",
                    "None",
                    "str",
                    "BaseException",
                    "Exception"
                ],
                "exc_tb": [
                    "typing.Type",
                    "None",
                    "str",
                    "BaseException",
                    "Exception"
                ]
            }
        },
        "transactional.transactional_wrapper": {
            "name": "transactional_wrapper",
            "location": 262,
            "return": [],
            "arguments": {}
        },
        "SelectQuery.__init__": {
            "name": "__init__",
            "location": 279,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "collection": [
                    "int"
                ],
                "indexed_fields": [
                    "list[]",
                    "set[object]"
                ],
                "query": [
                    "dict[str, typing.Any]",
                    "dict[, ]"
                ],
                "projection": [
                    "dict[, ]",
                    "list[dict[, ]]",
                    "typing.Type"
                ],
                "limit": [
                    "None",
                    "int"
                ]
            }
        },
        "SelectQuery.match_many": {
            "name": "match_many",
            "location": 301,
            "return": [
                "list[str]",
                "typing.Generator[typing.Text]"
            ],
            "arguments": {
                "self": [],
                "documents": [
                    "str"
                ]
            }
        },
        "SelectQuery.match_one": {
            "name": "match_one",
            "location": 312,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": [],
                "documents": [
                    "str",
                    "list[]"
                ]
            }
        },
        "SelectQuery._projection_is_index_only": {
            "name": "_projection_is_index_only",
            "location": 320,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SelectQuery._skim": {
            "name": "_skim",
            "location": 325,
            "return": [
                "dict[, ]",
                "dict[str, set[str]]",
                "bytes",
                "list[dict[str, typing.Any]]",
                "str",
                "typing.Type"
            ],
            "arguments": {
                "self": [],
                "document": [
                    "dict[str, set[str]]",
                    "bytes",
                    "list[dict[str, typing.Any]]",
                    "str",
                    "typing.Type"
                ]
            }
        },
        "SelectQuery._sql_query": {
            "name": "_sql_query",
            "location": 339,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "SelectQuery.execute": {
            "name": "execute",
            "location": 360,
            "return": [
                "dict[, ]",
                "list[dict[, ]]",
                "list[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ReplaceQuery.__init__": {
            "name": "__init__",
            "location": 396,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "collection": [
                    "int"
                ],
                "indexed_fields": [
                    "list[]",
                    "set[object]"
                ],
                "query": [
                    "dict[str, typing.Any]",
                    "dict[, ]"
                ],
                "replacement": [
                    "int"
                ],
                "upsert": [
                    "int"
                ]
            }
        },
        "ReplaceQuery._match_one": {
            "name": "_match_one",
            "location": 405,
            "return": [
                "str",
                "tuple[]",
                "tuple[None]"
            ],
            "arguments": {
                "self": [],
                "documents": [
                    "str"
                ]
            }
        },
        "ReplaceQuery._sql_query": {
            "name": "_sql_query",
            "location": 417,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ReplaceQuery.execute": {
            "name": "execute",
            "location": 430,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CreateIndexQuery.__init__": {
            "name": "__init__",
            "location": 472,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "collection": [
                    "typing.Mapping",
                    "int",
                    "str"
                ],
                "keys": [
                    "dict[, ]",
                    "dict[str, typing.Any]",
                    "list[dict[str, typing.Any]]",
                    "list[str]",
                    "str",
                    "None"
                ]
            }
        },
        "CreateIndexQuery._prepare_index_keys": {
            "name": "_prepare_index_keys",
            "location": 477,
            "return": [
                "list[list[]]"
            ],
            "arguments": {
                "self": [],
                "keys": [
                    "str",
                    "typing.Callable[, ]",
                    "list[]",
                    "float"
                ]
            }
        },
        "CreateIndexQuery._prepare_index_columns": {
            "name": "_prepare_index_columns",
            "location": 500,
            "return": [
                "list[typing.Text]"
            ],
            "arguments": {
                "self": [],
                "index_keys": [
                    "str",
                    "list[dict[str, typing.Any]]"
                ]
            }
        },
        "CreateIndexQuery._feed_index": {
            "name": "_feed_index",
            "location": 517,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "indexed_fields": []
            }
        },
        "CreateIndexQuery.execute": {
            "name": "execute",
            "location": 546,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Collection.__init__": {
            "name": "__init__",
            "location": 602,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "db": [
                    "str",
                    "int",
                    "typing.Sequence[]"
                ],
                "name": [
                    "str",
                    "dict[str, typing.Any]",
                    "list[str]",
                    "dict[, ]"
                ]
            }
        },
        "Collection._register": {
            "name": "_register",
            "location": 616,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Collection.create_index": {
            "name": "create_index",
            "location": 636,
            "return": [],
            "arguments": {
                "self": [],
                "keys": [
                    "str",
                    "bytes",
                    "int"
                ]
            }
        },
        "Collection.register_index": {
            "name": "register_index",
            "location": 643,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "list[str]",
                    "typing.Callable[[], T]",
                    "int"
                ],
                "new_indexed_fields": [
                    "str",
                    "list[str]"
                ]
            }
        },
        "Collection.find": {
            "name": "find",
            "location": 658,
            "return": [],
            "arguments": {
                "self": [],
                "query": [
                    "str",
                    "bool",
                    "dict[str, typing.Any]"
                ],
                "projection": [
                    "None",
                    "str",
                    "bool",
                    "dict[str, typing.Any]"
                ],
                "limit": [
                    "None",
                    "str",
                    "bool",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "Collection.find_one": {
            "name": "find_one",
            "location": 668,
            "return": [],
            "arguments": {
                "self": [],
                "query": [
                    "str",
                    "bool",
                    "dict[str, typing.Any]"
                ],
                "projection": [
                    "None",
                    "str",
                    "bool",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "Collection.insert_one": {
            "name": "insert_one",
            "location": 678,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "document": [
                    "dict[str, typing.Any]",
                    "typing.Type",
                    "dict[str, set[str]]"
                ]
            }
        },
        "Collection.insert_many": {
            "name": "insert_many",
            "location": 702,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "documents": [
                    "list[]",
                    "dict[, ]",
                    "str",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "Collection.replace_one": {
            "name": "replace_one",
            "location": 731,
            "return": [],
            "arguments": {
                "self": [],
                "query": [
                    "str",
                    "typing.Type",
                    "dict[, ]"
                ],
                "replacement": [
                    "str",
                    "typing.Type",
                    "dict[, ]"
                ],
                "upsert": [
                    "bool"
                ]
            }
        },
        "Database.__init__": {
            "name": "__init__",
            "location": 744,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "dict[str, typing.Any]",
                    "list[str]",
                    "dict[, ]"
                ]
            }
        },
        "Database.__getattr__": {
            "name": "__getattr__",
            "location": 770,
            "return": [
                "Collection"
            ],
            "arguments": {
                "self": [],
                "collection_name": [
                    "str",
                    "int",
                    "set[str]",
                    "None"
                ]
            }
        }
    },
    "plume-master/setup.py": {},
    "plume-master/tests/collection_create_index_test.py": {
        "TestCollectionCreateIndex.test_create_index_on_single_text_field": {
            "name": "test_create_index_on_single_text_field",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCollectionCreateIndex.test_create_index_on_single_integer_field": {
            "name": "test_create_index_on_single_integer_field",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCollectionCreateIndex.test_create_index_on_single_real_field": {
            "name": "test_create_index_on_single_real_field",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCollectionCreateIndex.test_create_index_on_nested_field": {
            "name": "test_create_index_on_nested_field",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCollectionCreateIndex.test_create_multiple_single_field_indexes": {
            "name": "test_create_multiple_single_field_indexes",
            "location": 132,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCollectionCreateIndex.test_create_index_with_multiple_fields": {
            "name": "test_create_index_with_multiple_fields",
            "location": 172,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCollectionCreateIndex.test_create_index_on_same_field": {
            "name": "test_create_index_on_same_field",
            "location": 207,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCollectionCreateIndexOnExistingData.setup": {
            "name": "setup",
            "location": 241,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCollectionCreateIndexOnExistingData.test_create_index_on_single_text_field": {
            "name": "test_create_index_on_single_text_field",
            "location": 246,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCollectionCreateIndexOnExistingData.test_create_index_on_single_integer_field": {
            "name": "test_create_index_on_single_integer_field",
            "location": 263,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCollectionCreateIndexOnExistingData.test_create_index_on_nested_field": {
            "name": "test_create_index_on_nested_field",
            "location": 279,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCollectionCreateIndexOnExistingData.test_create_multiple_single_field_indexes": {
            "name": "test_create_multiple_single_field_indexes",
            "location": 301,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "plume-master/tests/collection_find_one_test.py": {
        "TestCollectionFindOne.setup_class": {
            "name": "setup_class",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "typing.Callable[, ]",
                    "typing.Type",
                    "None"
                ]
            }
        },
        "TestCollectionFindOne.setup": {
            "name": "setup",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCollectionFindOne.test_equal_selector": {
            "name": "test_equal_selector",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCollectionFindOne.test_equal_selector_on_nested_field": {
            "name": "test_equal_selector_on_nested_field",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCollectionFindOne.test_not_equal_selector": {
            "name": "test_not_equal_selector",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCollectionFindOne.test_greater_than_selector": {
            "name": "test_greater_than_selector",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCollectionFindOne.test_greater_than_equals_selector": {
            "name": "test_greater_than_equals_selector",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCollectionFindOne.test_lower_than_selector": {
            "name": "test_lower_than_selector",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCollectionFindOne.test_lower_than_equal_selector": {
            "name": "test_lower_than_equal_selector",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCollectionFindOne.test_projection_include_field": {
            "name": "test_projection_include_field",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCollectionFindOne.test_projection_include_nested_field": {
            "name": "test_projection_include_nested_field",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCollectionFindOne.test_projection_exclude_field": {
            "name": "test_projection_exclude_field",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCollectionFindOne.test_projection_exclude_nested_field": {
            "name": "test_projection_exclude_nested_field",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCollectionFindOneWithIndex.setup": {
            "name": "setup",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCollectionFindOneWithIndex.test_find_on_single_indexed_integer_field": {
            "name": "test_find_on_single_indexed_integer_field",
            "location": 116,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCollectionFindOneWithIndex.test_find_on_nested_indexed_field": {
            "name": "test_find_on_nested_indexed_field",
            "location": 123,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCollectionFindOneWithIndex.test_projection_include_indexed_field": {
            "name": "test_projection_include_indexed_field",
            "location": 132,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCollectionFindOneWithIndex.test_projection_include_non_indexed_field": {
            "name": "test_projection_include_non_indexed_field",
            "location": 141,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCollectionFindOneWithIndex.test_projection_include_nested_indexed_field": {
            "name": "test_projection_include_nested_indexed_field",
            "location": 149,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "plume-master/tests/collection_find_test.py": {
        "TestCollectionFind.setup_class": {
            "name": "setup_class",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "typing.Callable[, ]",
                    "typing.Type",
                    "None"
                ]
            }
        },
        "TestCollectionFind.setup": {
            "name": "setup",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCollectionFind.test_equal_selector": {
            "name": "test_equal_selector",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCollectionFind.test_equal_selector_on_nested_field": {
            "name": "test_equal_selector_on_nested_field",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCollectionFind.test_not_equal_selector": {
            "name": "test_not_equal_selector",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCollectionFind.test_greater_than_selector": {
            "name": "test_greater_than_selector",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCollectionFind.test_greater_than_equals_selector": {
            "name": "test_greater_than_equals_selector",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCollectionFind.test_lower_than_selector": {
            "name": "test_lower_than_selector",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCollectionFind.test_lower_than_equal_selector": {
            "name": "test_lower_than_equal_selector",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCollectionFind.test_projection_include_field": {
            "name": "test_projection_include_field",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCollectionFind.test_projection_include_nested_field": {
            "name": "test_projection_include_nested_field",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCollectionFind.test_projection_exclude_field": {
            "name": "test_projection_exclude_field",
            "location": 102,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCollectionFind.test_projection_exclude_nested_field": {
            "name": "test_projection_exclude_nested_field",
            "location": 116,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCollectionFindWithIndex.setup": {
            "name": "setup",
            "location": 142,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCollectionFindWithIndex.test_find_on_single_indexed_text_field": {
            "name": "test_find_on_single_indexed_text_field",
            "location": 152,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCollectionFindWithIndex.test_find_on_single_indexed_integer_field": {
            "name": "test_find_on_single_indexed_integer_field",
            "location": 160,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCollectionFindWithIndex.test_find_on_nested_indexed_field": {
            "name": "test_find_on_nested_indexed_field",
            "location": 169,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCollectionFindWithIndex.test_selection_and_projection_on_index_field_only": {
            "name": "test_selection_and_projection_on_index_field_only",
            "location": 179,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCollectionFindWithIndex.test_projection_include_non_indexed_field": {
            "name": "test_projection_include_non_indexed_field",
            "location": 190,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCollectionFindWithIndex.test_projection_include_nested_indexed_field": {
            "name": "test_projection_include_nested_indexed_field",
            "location": 199,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "plume-master/tests/collection_insert_many_test.py": {
        "InsertManyBaseTest.setup": {
            "name": "setup",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCollectionInsertMany.test_insert_document_add_new_rows": {
            "name": "test_insert_document_add_new_rows",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCollectionInsertMany.test_retrieve_document_values": {
            "name": "test_retrieve_document_values",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCollectionInsertManyWithIndex.test_insert_with_single_field_index": {
            "name": "test_insert_with_single_field_index",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCollectionInsertManyWithIndex.test_insert_with_single_nested_field_index": {
            "name": "test_insert_with_single_nested_field_index",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCollectionInsertManyWithIndex.test_insert_with_single_field_index_with_missing_field": {
            "name": "test_insert_with_single_field_index_with_missing_field",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCollectionInsertManyWithIndex.test_insert_many_with_multiple_single_field_indexes": {
            "name": "test_insert_many_with_multiple_single_field_indexes",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "plume-master/tests/collection_insert_one_test.py": {
        "InsertOneBaseTest.setup": {
            "name": "setup",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCollectionInsertOne.test_insert_document_add_new_row": {
            "name": "test_insert_document_add_new_row",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCollectionInsertOne.test_retrieve_document_values": {
            "name": "test_retrieve_document_values",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCollectionInsertOneWithIndex.test_insert_one_with_single_field_index": {
            "name": "test_insert_one_with_single_field_index",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCollectionInsertOneWithIndex.test_insert_one_with_single_field_index_with_missing_field": {
            "name": "test_insert_one_with_single_field_index_with_missing_field",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCollectionInsertOneWithIndex.test_insert_one_with_index_on_single_nest_field": {
            "name": "test_insert_one_with_index_on_single_nest_field",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCollectionInsertOneWithIndex.test_insert_one_with_multiple_single_field_indexes": {
            "name": "test_insert_one_with_multiple_single_field_indexes",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "plume-master/tests/collection_replace_one_test.py": {
        "TestCollectionReplaceOne.test_replace": {
            "name": "test_replace",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCollectionReplaceOne.test_upsert": {
            "name": "test_upsert",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCollectionReplaceOneWithIndex.test_replace": {
            "name": "test_replace",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCollectionReplaceOneWithIndex.test_upsert": {
            "name": "test_upsert",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "plume-master/tests/collection_test.py": {
        "TestCollectionCreation.test_create_and_register_collection": {
            "name": "test_create_and_register_collection",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "plume-master/tests/factories.py": {
        "MetaProfile.add_social_media_profile": {
            "name": "add_social_media_profile",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "create": [
                    "int",
                    "str",
                    "typing.Callable[, ]"
                ],
                "extracted": [
                    "int",
                    "str",
                    "typing.Callable[, ]"
                ]
            }
        }
    },
    "plume-master/tests/plumedb_test.py": {
        "TestDatabase.test_create_database": {
            "name": "test_create_database",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDatabase.test_create_plume_master_if_not_exists": {
            "name": "test_create_plume_master_if_not_exists",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDatabase.test_new_database_does_not_contain_collections": {
            "name": "test_new_database_does_not_contain_collections",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDatabase.test_returns_collection_if_not_exists": {
            "name": "test_returns_collection_if_not_exists",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDatabase.teardown": {
            "name": "teardown",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "plume-master/tests/selection_test.py": {
        "TestSQLSelection.setup_class": {
            "name": "setup_class",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "typing.Callable[, ]",
                    "bool",
                    "set[str]"
                ]
            }
        },
        "TestSQLSelection.test_select_non_indexed_field": {
            "name": "test_select_non_indexed_field",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSQLSelection.test_select_indexed_text_field": {
            "name": "test_select_indexed_text_field",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSQLSelection.test_select_indexed_integer_field": {
            "name": "test_select_indexed_integer_field",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSQLSelection.test_select_indexed_float_field": {
            "name": "test_select_indexed_float_field",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSQLSelection.test_select_implicit_and": {
            "name": "test_select_implicit_and",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSQLSelection.test_select_implicit_and_on_non_indexed_field": {
            "name": "test_select_implicit_and_on_non_indexed_field",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSQLSelection.test_select_and_two_fields": {
            "name": "test_select_and_two_fields",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSQLSelection.test_select_and": {
            "name": "test_select_and",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSQLSelection.test_select_and_with_implicit_and": {
            "name": "test_select_and_with_implicit_and",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSQLSelection.test_select_or_on_same_indexed_field": {
            "name": "test_select_or_on_same_indexed_field",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSQLSelection.test_select_or_in_implicit_and": {
            "name": "test_select_or_in_implicit_and",
            "location": 122,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSQLSelection.test_select_or_with_nested_and_clause": {
            "name": "test_select_or_with_nested_and_clause",
            "location": 143,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSQLSelection.test_select_or_with_nested_with_clause_not_indexed": {
            "name": "test_select_or_with_nested_with_clause_not_indexed",
            "location": 166,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSQLSelection.test_projection_include_indexed_field": {
            "name": "test_projection_include_indexed_field",
            "location": 185,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSQLSelection.test_projection_include_non_indexed_field": {
            "name": "test_projection_include_non_indexed_field",
            "location": 197,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSQLSelection.test_projection_exclude_indexed_field": {
            "name": "test_projection_exclude_indexed_field",
            "location": 209,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSQLSelection.test_projection_exclude_non_indexed_field": {
            "name": "test_projection_exclude_non_indexed_field",
            "location": 221,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "plume-master/tests/utils.py": {
        "collection_is_registered": {
            "name": "collection_is_registered",
            "location": 25,
            "return": [],
            "arguments": {
                "db": [
                    "str"
                ],
                "collection_name": [
                    "str"
                ]
            }
        },
        "table_info": {
            "name": "table_info",
            "location": 35,
            "return": [],
            "arguments": {
                "db": [
                    "tuple[typing.Union[float,float]]",
                    "int",
                    "dict[str, typing.Any]",
                    "typing.Mapping",
                    "str",
                    "bytes"
                ],
                "table_name": [
                    "str"
                ]
            }
        },
        "index_list": {
            "name": "index_list",
            "location": 40,
            "return": [],
            "arguments": {
                "db": [
                    "tuple[typing.Union[float,float]]",
                    "bool",
                    "dict[str, typing.Any]",
                    "typing.Mapping",
                    "str",
                    "bytes"
                ],
                "table_name": [
                    "str"
                ]
            }
        },
        "with_index": {
            "name": "with_index",
            "location": 45,
            "return": [],
            "arguments": {}
        },
        "with_documents": {
            "name": "with_documents",
            "location": 56,
            "return": [],
            "arguments": {}
        },
        "WritingBaseTest.setup": {
            "name": "setup",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "WritingBaseTest.teardown": {
            "name": "teardown",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ReadingBaseTest.setup_class": {
            "name": "setup_class",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "int",
                    "typing.Type",
                    "str",
                    "typing.IO"
                ]
            }
        },
        "ReadingBaseTest.teardown_class": {
            "name": "teardown_class",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "with_index.with_index_decorator": {
            "name": "with_index_decorator",
            "location": 46,
            "return": [],
            "arguments": {
                "fun": []
            }
        },
        "with_documents.with_documents_decorator": {
            "name": "with_documents_decorator",
            "location": 57,
            "return": [],
            "arguments": {
                "fun": []
            }
        },
        "with_index.with_index_decorator.inner_with_index": {
            "name": "inner_with_index",
            "location": 47,
            "return": [],
            "arguments": {}
        },
        "with_documents.with_documents_decorator.inner_with_documents": {
            "name": "inner_with_documents",
            "location": 58,
            "return": [],
            "arguments": {}
        }
    }
}
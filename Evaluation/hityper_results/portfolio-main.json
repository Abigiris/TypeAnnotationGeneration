{
    "portfolio-main/conftest.py": {
        "pytest_addoption": {
            "name": "pytest_addoption",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "parser": []
            }
        },
        "pytest_configure": {
            "name": "pytest_configure",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "config": []
            }
        },
        "pytest_collection_modifyitems": {
            "name": "pytest_collection_modifyitems",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "config": [],
                "items": [
                    "list[]",
                    "dict[, ]",
                    "str"
                ]
            }
        }
    },
    "portfolio-main/manage.py": {},
    "portfolio-main/aa_project/urls.py": {},
    "portfolio-main/aa_project/wsgi.py": {},
    "portfolio-main/aa_project/__init__.py": {},
    "portfolio-main/aa_project/settings/base.py": {},
    "portfolio-main/aa_project/settings/dev.py": {
        "skip_static_requests": {
            "name": "skip_static_requests",
            "location": 50,
            "return": [
                "bool"
            ],
            "arguments": {
                "record": [
                    "typing.Callable[..., str]",
                    "typing.Sequence[str]",
                    "list[]",
                    "dict[str, typing.Any]",
                    "tuple[]",
                    "list[str]",
                    "dict[, ]"
                ]
            }
        },
        "skip_debug_requests": {
            "name": "skip_debug_requests",
            "location": 54,
            "return": [
                "bool"
            ],
            "arguments": {
                "record": [
                    "dict[str, typing.Any]",
                    "dict[, ]",
                    "tuple[]"
                ]
            }
        }
    },
    "portfolio-main/aa_project/settings/prod.py": {},
    "portfolio-main/aa_project/settings/__init__.py": {},
    "portfolio-main/aa_project/settings/pytest/pytest.py": {
        "SimplePasswordHasher.salt": {
            "name": "salt",
            "location": 67,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "SimplePasswordHasher.encode": {
            "name": "encode",
            "location": 70,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": [],
                "password": [
                    "str"
                ],
                "salt": [
                    "str"
                ]
            }
        },
        "SimplePasswordHasher.verify": {
            "name": "verify",
            "location": 73,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "password": [
                    "str"
                ],
                "encoded": [
                    "str"
                ]
            }
        },
        "SimplePasswordHasher.safe_summary": {
            "name": "safe_summary",
            "location": 78,
            "return": [
                "dict[typing.Text, typing.Union[typing.Text,bytes]]"
            ],
            "arguments": {
                "self": [],
                "encoded": [
                    "str",
                    "bytes"
                ]
            }
        }
    },
    "portfolio-main/aa_project/tests/test_base.py": {
        "TestLoginLogoutUTLs.test_login_url": {
            "name": "test_login_url",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLoginLogoutUTLs.test_login_redirect_url": {
            "name": "test_login_redirect_url",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLoginLogoutUTLs.test_logout_redirect_url": {
            "name": "test_logout_redirect_url",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestThirdPartyAppsAreInstalled.test_whitenoise_in_installed_apps": {
            "name": "test_whitenoise_in_installed_apps",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestThirdPartyAppsAreInstalled.test_rest_framework_in_installed_apps": {
            "name": "test_rest_framework_in_installed_apps",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestThirdPartyAppsAreInstalled.test_guardian_in_installed_apps": {
            "name": "test_guardian_in_installed_apps",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestThirdPartyAppsAreInstalled.test_crispy_forms_in_installed_apps": {
            "name": "test_crispy_forms_in_installed_apps",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestThirdPartyAppsAreInstalled.test_bootstrap4_in_installed_apps": {
            "name": "test_bootstrap4_in_installed_apps",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestThirdPartyAppsAreInstalled.test_storages_in_installed_apps": {
            "name": "test_storages_in_installed_apps",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestThirdPartyAppsAreInstalled.test_captcha_in_installed_apps": {
            "name": "test_captcha_in_installed_apps",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestThirdPartyAppsAreInstalled.test_widget_tweaks_in_installed_apps": {
            "name": "test_widget_tweaks_in_installed_apps",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestThirdPartyAppsAreInstalled.test_tinymce_in_installed_apps": {
            "name": "test_tinymce_in_installed_apps",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMiddlewareIsConfigured.test_whitenoise_is_in_middleware_config": {
            "name": "test_whitenoise_is_in_middleware_config",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTemplatesAreConfigured.test_template_backend_is_configured": {
            "name": "test_template_backend_is_configured",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTemplatesAreConfigured.test_template_directories_are_present": {
            "name": "test_template_directories_are_present",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDatabaseIsSecurelyConfigured.test_secure_database_setup": {
            "name": "test_secure_database_setup",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEmailProviderConfigured.test_amazon_ses_setup": {
            "name": "test_amazon_ses_setup",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "portfolio-main/aa_project/tests/test_prod.py": {
        "TestAllowedHostsConfigured.test_allowed_hosts_have_required_hosts": {
            "name": "test_allowed_hosts_have_required_hosts",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPreDeploymentChecklistCompleted.test_checklist_completed": {
            "name": "test_checklist_completed",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "portfolio-main/aa_project/tests/__init__.py": {},
    "portfolio-main/apps/conftest.py": {
        "random_user": {
            "name": "random_user",
            "location": 22,
            "return": [],
            "arguments": {
                "django_user_model": [
                    "None",
                    "dict[, ]",
                    "str"
                ]
            }
        },
        "third_user_as_author": {
            "name": "third_user_as_author",
            "location": 28,
            "return": [],
            "arguments": {
                "django_user_model": [
                    "str",
                    "None",
                    "list[dict[, ]]",
                    "list[]",
                    "list[dict[str, typing.Any]]",
                    "typing.Type",
                    "bytes"
                ]
            }
        },
        "test_password": {
            "name": "test_password",
            "location": 34,
            "return": [],
            "arguments": {}
        },
        "auth_user": {
            "name": "auth_user",
            "location": 40,
            "return": [],
            "arguments": {
                "client": [
                    "str",
                    "bool",
                    "tuple[]"
                ],
                "django_user_model": [
                    "str"
                ],
                "test_password": [
                    "str"
                ]
            }
        },
        "device_auth_user": {
            "name": "device_auth_user",
            "location": 55,
            "return": [],
            "arguments": {
                "client": [
                    "str",
                    "None",
                    "int"
                ],
                "auth_user": [],
                "test_password": [
                    "str",
                    "None",
                    "int"
                ]
            }
        },
        "email_auth_user": {
            "name": "email_auth_user",
            "location": 63,
            "return": [],
            "arguments": {
                "client": [
                    "str"
                ],
                "auth_user": [],
                "test_password": [
                    "str"
                ]
            }
        },
        "unauth_user": {
            "name": "unauth_user",
            "location": 79,
            "return": [
                "AnonymousUser"
            ],
            "arguments": {}
        },
        "all_users": {
            "name": "all_users",
            "location": 85,
            "return": [],
            "arguments": {
                "request": [],
                "auth_user": [
                    "str",
                    "bool",
                    "None",
                    "dict[, ]"
                ],
                "unauth_user": [
                    "str",
                    "bool",
                    "None",
                    "dict[, ]"
                ]
            }
        },
        "fixed_user": {
            "name": "fixed_user",
            "location": 100,
            "return": [],
            "arguments": {
                "django_user_model": [
                    "str"
                ]
            }
        },
        "li_sec_user": {
            "name": "li_sec_user",
            "location": 115,
            "return": [],
            "arguments": {
                "django_user_model": [
                    "str"
                ],
                "client": [
                    "str",
                    "bytes",
                    "list[tuple[typing.Union[int,int]]]"
                ],
                "test_password": [
                    "str",
                    "bytes",
                    "list[tuple[typing.Union[int,int]]]"
                ]
            }
        },
        "pub_post": {
            "name": "pub_post",
            "location": 131,
            "return": [],
            "arguments": {
                "random_user": [
                    "str",
                    "int",
                    "dict[, ]"
                ]
            }
        },
        "draft_posts": {
            "name": "draft_posts",
            "location": 137,
            "return": [],
            "arguments": {
                "third_user_as_author": [
                    "float",
                    "str",
                    "typing.Callable[, ]",
                    "dict[str, dict[str, typing.Any]]"
                ]
            }
        },
        "pub_posts": {
            "name": "pub_posts",
            "location": 143,
            "return": [],
            "arguments": {
                "third_user_as_author": [
                    "float",
                    "str",
                    "typing.Callable[, ]",
                    "dict[str, dict[str, typing.Any]]"
                ]
            }
        },
        "category": {
            "name": "category",
            "location": 149,
            "return": [],
            "arguments": {}
        },
        "search_terms": {
            "name": "search_terms",
            "location": 155,
            "return": [],
            "arguments": {
                "request": [
                    "typing.Callable[, ]"
                ]
            }
        },
        "test_image": {
            "name": "test_image",
            "location": 161,
            "return": [
                "InMemoryUploadedFile"
            ],
            "arguments": {}
        },
        "sample_post_data": {
            "name": "sample_post_data",
            "location": 174,
            "return": [
                "dict[typing.Text, typing.Union[typing.Text,int]]"
            ],
            "arguments": {}
        },
        "sample_user_data": {
            "name": "sample_user_data",
            "location": 189,
            "return": [
                "dict[typing.Text, typing.Text]"
            ],
            "arguments": {}
        }
    },
    "portfolio-main/apps/helpers.py": {
        "add_middleware_to_request": {
            "name": "add_middleware_to_request",
            "location": 7,
            "return": [
                "dict[, ]"
            ],
            "arguments": {
                "request": [
                    "dict[, ]"
                ],
                "middleware_class": [
                    "bytes"
                ]
            }
        },
        "add_middlewares": {
            "name": "add_middlewares",
            "location": 17,
            "return": [],
            "arguments": {
                "request": []
            }
        }
    },
    "portfolio-main/apps/__init__.py": {},
    "portfolio-main/apps/api/apps.py": {},
    "portfolio-main/apps/api/serializers.py": {
        "PostSerializer.get_status": {
            "name": "get_status",
            "location": 105,
            "return": [],
            "arguments": {
                "self": [],
                "obj": []
            }
        }
    },
    "portfolio-main/apps/api/urls.py": {},
    "portfolio-main/apps/api/views.py": {},
    "portfolio-main/apps/api/__init__.py": {},
    "portfolio-main/apps/api/tests/test_urls.py": {
        "TestURLs.test_category_list_api_url": {
            "name": "test_category_list_api_url",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestURLs.test_post_list_api_url": {
            "name": "test_post_list_api_url",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestURLs.test_post_detail_api_url": {
            "name": "test_post_detail_api_url",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "portfolio-main/apps/api/tests/test_views.py": {
        "TestCategoryListAPIView.test_site_visitor_can_access_category_list_api": {
            "name": "test_site_visitor_can_access_category_list_api",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "dict[, ]"
                ],
                "rf": [],
                "unauth_user": [
                    "int"
                ]
            }
        },
        "TestCategoryListAPIView.test_auth_user_can_access_category_list_api": {
            "name": "test_auth_user_can_access_category_list_api",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "tuple[typing.Union[str,str]]",
                    "str",
                    "dict[, ]"
                ],
                "rf": [
                    "dict[str, str]"
                ],
                "auth_user": [
                    "str",
                    "None",
                    "bool"
                ]
            }
        },
        "TestPostListAPIView.test_site_visitor_can_access_post_list_api": {
            "name": "test_site_visitor_can_access_post_list_api",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "dict[, ]"
                ],
                "rf": [
                    "dict[, ]"
                ],
                "unauth_user": [
                    "int"
                ]
            }
        },
        "TestPostListAPIView.test_auth_user_can_access_post_list_api": {
            "name": "test_auth_user_can_access_post_list_api",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "tuple[typing.Union[str,str]]",
                    "str",
                    "dict[, ]"
                ],
                "rf": [
                    "dict[str, str]"
                ],
                "auth_user": [
                    "str",
                    "int",
                    "None"
                ]
            }
        },
        "TestPostDetailAPIView.test_site_visitor_can_access_post_detail_api": {
            "name": "test_site_visitor_can_access_post_detail_api",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "dict[str, typing.Any]"
                ],
                "rf": [
                    "dict[, ]"
                ],
                "unauth_user": [
                    "float"
                ],
                "pub_post": [
                    "dict[str, typing.Any]",
                    "int"
                ]
            }
        },
        "TestPostDetailAPIView.test_auth_user_can_access_post_detail_api": {
            "name": "test_auth_user_can_access_post_detail_api",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "request": [],
                "rf": [
                    "dict[, ]"
                ],
                "auth_user": [
                    "str",
                    "float"
                ],
                "pub_post": [
                    "int"
                ]
            }
        }
    },
    "portfolio-main/apps/api/tests/__init__.py": {},
    "portfolio-main/apps/blog/admin.py": {
        "CategoryAdmin.get_queryset": {
            "name": "get_queryset",
            "location": 15,
            "return": [
                "int",
                "dict[, ]",
                "list[]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "str",
                    "None",
                    "int"
                ]
            }
        },
        "CategoryAdmin.post_count": {
            "name": "post_count",
            "location": 22,
            "return": [],
            "arguments": {
                "self": [],
                "obj": [
                    "str"
                ]
            }
        },
        "PostAdmin.post_image": {
            "name": "post_image",
            "location": 48,
            "return": [],
            "arguments": {
                "self": [],
                "obj": [
                    "int",
                    "typing.Type",
                    "dict[str, int]"
                ]
            }
        }
    },
    "portfolio-main/apps/blog/apps.py": {},
    "portfolio-main/apps/blog/feeds.py": {
        "LatestPostsFeed.items": {
            "name": "items",
            "location": 13,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LatestPostsFeed.item_title": {
            "name": "item_title",
            "location": 16,
            "return": [],
            "arguments": {
                "self": [],
                "item": [
                    "str"
                ]
            }
        },
        "LatestPostsFeed.item_description": {
            "name": "item_description",
            "location": 19,
            "return": [],
            "arguments": {
                "self": [],
                "item": [
                    "dict[, ]",
                    "dict[str, typing.Any]",
                    "bool",
                    "list[str]",
                    "dict[str, object]"
                ]
            }
        },
        "LatestPostsFeed.item_author_name": {
            "name": "item_author_name",
            "location": 22,
            "return": [],
            "arguments": {
                "self": [],
                "item": [
                    "str",
                    "list[tuple[typing.Union[str,str]]]",
                    "list[str]",
                    "dict[str, str]",
                    "list[]"
                ]
            }
        },
        "LatestPostsFeed.item_pubdate": {
            "name": "item_pubdate",
            "location": 25,
            "return": [],
            "arguments": {
                "self": [],
                "item": [
                    "str",
                    "list[fonduer.candidates.models.Candidate]",
                    "tuple[str]",
                    "int"
                ]
            }
        },
        "LatestPostsFeed.item_updateddate": {
            "name": "item_updateddate",
            "location": 28,
            "return": [],
            "arguments": {
                "self": [],
                "item": [
                    "str",
                    "list[fonduer.candidates.models.Candidate]",
                    "tuple[str]",
                    "int"
                ]
            }
        },
        "LatestPostsFeed.item_enclosures": {
            "name": "item_enclosures",
            "location": 31,
            "return": [
                "list[Enclosure]"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "str",
                    "typing.Sequence[str]"
                ]
            }
        }
    },
    "portfolio-main/apps/blog/forms.py": {
        "PostForm.__init__": {
            "name": "__init__",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PostForm.clean_title": {
            "name": "clean_title",
            "location": 26,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "portfolio-main/apps/blog/managers.py": {
        "PublishedManager.get_queryset": {
            "name": "get_queryset",
            "location": 5,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "portfolio-main/apps/blog/models.py": {
        "Category.__str__": {
            "name": "__str__",
            "location": 26,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Category.get_absolute_url": {
            "name": "get_absolute_url",
            "location": 29,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Post.__str__": {
            "name": "__str__",
            "location": 71,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Post.word_count": {
            "name": "word_count",
            "location": 75,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Post.reading_time": {
            "name": "reading_time",
            "location": 79,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Post.publish_year": {
            "name": "publish_year",
            "location": 83,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Post.num_draft_posts": {
            "name": "num_draft_posts",
            "location": 87,
            "return": [],
            "arguments": {}
        },
        "Post.save": {
            "name": "save",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Post.get_absolute_url": {
            "name": "get_absolute_url",
            "location": 109,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Post.get_excerpt": {
            "name": "get_excerpt",
            "location": 112,
            "return": [],
            "arguments": {
                "self": [],
                "char": [
                    "str",
                    "bytes",
                    "None"
                ]
            }
        }
    },
    "portfolio-main/apps/blog/search.py": {
        "cleanup_string": {
            "name": "cleanup_string",
            "location": 4,
            "return": [],
            "arguments": {
                "q": [
                    "str",
                    "list[str]",
                    "int",
                    "None"
                ]
            }
        }
    },
    "portfolio-main/apps/blog/sitemap.py": {
        "CategorySitemap.items": {
            "name": "items",
            "location": 10,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PostSitemap.items": {
            "name": "items",
            "location": 18,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PostSitemap.lastmod": {
            "name": "lastmod",
            "location": 21,
            "return": [],
            "arguments": {
                "self": [],
                "obj": [
                    "int",
                    "float",
                    "tuple[typing.Union[float,float]]",
                    "list[str]"
                ]
            }
        }
    },
    "portfolio-main/apps/blog/urls.py": {},
    "portfolio-main/apps/blog/views.py": {
        "PostView.get_context_data": {
            "name": "get_context_data",
            "location": 28,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PostCreateView.form_valid": {
            "name": "form_valid",
            "location": 40,
            "return": [],
            "arguments": {
                "self": [],
                "form": []
            }
        },
        "PostCreateView.get_success_url": {
            "name": "get_success_url",
            "location": 44,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ContentsListView.get_context_data": {
            "name": "get_context_data",
            "location": 70,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AuthorPostListView.get_queryset": {
            "name": "get_queryset",
            "location": 83,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AuthorPostListView.get_context_data": {
            "name": "get_context_data",
            "location": 87,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CategoryPostListView.get_queryset": {
            "name": "get_queryset",
            "location": 100,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CategoryPostListView.get_context_data": {
            "name": "get_context_data",
            "location": 104,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SearchResultsView.get_queryset": {
            "name": "get_queryset",
            "location": 122,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SearchResultsView.get_context_data": {
            "name": "get_context_data",
            "location": 145,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PostDetailView.get_context_data": {
            "name": "get_context_data",
            "location": 158,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PostUpdateView.form_valid": {
            "name": "form_valid",
            "location": 179,
            "return": [],
            "arguments": {
                "self": [],
                "form": []
            }
        },
        "PostUpdateView.test_func": {
            "name": "test_func",
            "location": 183,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "PostDeleteView.test_func": {
            "name": "test_func",
            "location": 194,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "portfolio-main/apps/blog/__init__.py": {},
    "portfolio-main/apps/blog/migrations/0001_initial.py": {},
    "portfolio-main/apps/blog/migrations/0002_auto_20200921_1523.py": {},
    "portfolio-main/apps/blog/migrations/0003_auto_20200922_2116.py": {},
    "portfolio-main/apps/blog/migrations/0004_auto_20200930_2049.py": {},
    "portfolio-main/apps/blog/migrations/0005_auto_20200930_2054.py": {},
    "portfolio-main/apps/blog/migrations/__init__.py": {},
    "portfolio-main/apps/blog/templatetags/blog_tags.py": {
        "category_sidebar": {
            "name": "category_sidebar",
            "location": 10,
            "return": [
                "dict[typing.Text, typing.Union[typing.Generator[typing.Union[typing.Any,None,None]],tuple[typing.Union[str,str]]]]"
            ],
            "arguments": {}
        }
    },
    "portfolio-main/apps/blog/templatetags/__init__.py": {},
    "portfolio-main/apps/blog/tests/helpers.py": {
        "get_search_strings": {
            "name": "get_search_strings",
            "location": 8,
            "return": [
                "list[]"
            ],
            "arguments": {}
        }
    },
    "portfolio-main/apps/blog/tests/test_blog_tags.py": {
        "TestCategorySidebar.test_category_sidebar": {
            "name": "test_category_sidebar",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "portfolio-main/apps/blog/tests/test_forms.py": {
        "TestPostForm.test_form_tests_for_all_fields": {
            "name": "test_form_tests_for_all_fields",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sample_post_data": []
            }
        },
        "TestPostForm.test_date_fields_not_in_form": {
            "name": "test_date_fields_not_in_form",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPostForm.test_empty_form_is_invalid": {
            "name": "test_empty_form_is_invalid",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPostForm.test_form_title_requires_min_num_chars": {
            "name": "test_form_title_requires_min_num_chars",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sample_post_data": []
            }
        },
        "TestPostForm.test_form_title_is_cleaned": {
            "name": "test_form_title_is_cleaned",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sample_post_data": [
                    "str"
                ]
            }
        },
        "TestPostForm.test_title_field_contains_help_text": {
            "name": "test_title_field_contains_help_text",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sample_post_data": [
                    "str"
                ]
            }
        },
        "TestPostForm.test_content_field_is_required": {
            "name": "test_content_field_is_required",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sample_post_data": [
                    "str"
                ]
            }
        },
        "TestPostForm.test_categories_field_is_required": {
            "name": "test_categories_field_is_required",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sample_post_data": [
                    "str"
                ]
            }
        },
        "TestPostForm.test_categories_field_contains_help_text": {
            "name": "test_categories_field_contains_help_text",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sample_post_data": [
                    "str"
                ]
            }
        },
        "TestPostForm.test_form_still_submits_without_image": {
            "name": "test_form_still_submits_without_image",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sample_post_data": [
                    "str"
                ]
            }
        },
        "TestPostForm.test_image_field_contains_help_text": {
            "name": "test_image_field_contains_help_text",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sample_post_data": [
                    "str"
                ]
            }
        },
        "TestPostForm.test_status_field_is_required": {
            "name": "test_status_field_is_required",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sample_post_data": [
                    "int",
                    "str"
                ]
            }
        }
    },
    "portfolio-main/apps/blog/tests/test_models.py": {
        "TestCategory.test_name_is_charfield": {
            "name": "test_name_is_charfield",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCategory.test_slug_is_slugfield": {
            "name": "test_slug_is_slugfield",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCategory.test_created_date_is_datefield": {
            "name": "test_created_date_is_datefield",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCategory.test_category_str": {
            "name": "test_category_str",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCategory.test_get_absolute_url": {
            "name": "test_get_absolute_url",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPost.test_title_is_charfield": {
            "name": "test_title_is_charfield",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPost.test_slug_is_slugfield": {
            "name": "test_slug_is_slugfield",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPost.test_slugification": {
            "name": "test_slugification",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPost.test_unique_slug_created": {
            "name": "test_unique_slug_created",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPost.test_content_is_htmlfield": {
            "name": "test_content_is_htmlfield",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPost.test_reference_url_is_urlfield": {
            "name": "test_reference_url_is_urlfield",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPost.test_publish_date_is_datetimefield": {
            "name": "test_publish_date_is_datetimefield",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPost.test_publish_date_generates": {
            "name": "test_publish_date_generates",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPost.test_updated_date_is_datetimefield": {
            "name": "test_updated_date_is_datetimefield",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPost.test_updated_date_generates": {
            "name": "test_updated_date_generates",
            "location": 101,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPost.test_image_is_imagefield": {
            "name": "test_image_is_imagefield",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPost.test_status_is_integerfield": {
            "name": "test_status_is_integerfield",
            "location": 111,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPost.test_status_defaults_as_draft": {
            "name": "test_status_defaults_as_draft",
            "location": 116,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPost.test_author_is_foreignkeyfield": {
            "name": "test_author_is_foreignkeyfield",
            "location": 120,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPost.test_categories_is_manytomanyfield": {
            "name": "test_categories_is_manytomanyfield",
            "location": 125,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPost.test_word_count": {
            "name": "test_word_count",
            "location": 130,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPost.test_reading_time": {
            "name": "test_reading_time",
            "location": 135,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPost.test_get_excerpt": {
            "name": "test_get_excerpt",
            "location": 141,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPost.test_post_str": {
            "name": "test_post_str",
            "location": 146,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPost.test_publish_year": {
            "name": "test_publish_year",
            "location": 150,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPost.test_num_draft_posts": {
            "name": "test_num_draft_posts",
            "location": 155,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPost.test_published_posts_manager": {
            "name": "test_published_posts_manager",
            "location": 162,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPost.test_get_absolute_url": {
            "name": "test_get_absolute_url",
            "location": 169,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPost.test_multiple_post_slugs_appends_instance_id": {
            "name": "test_multiple_post_slugs_appends_instance_id",
            "location": 173,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "portfolio-main/apps/blog/tests/test_urls.py": {
        "TestUrls.test_blog_home": {
            "name": "test_blog_home",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUrls.test_author_posts": {
            "name": "test_author_posts",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUrls.test_category_posts": {
            "name": "test_category_posts",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUrls.test_post_create": {
            "name": "test_post_create",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUrls.test_post_detail": {
            "name": "test_post_detail",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUrls.test_post_update": {
            "name": "test_post_update",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUrls.test_post_delete": {
            "name": "test_post_delete",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUrls.test_search": {
            "name": "test_search",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUrls.test_search_results": {
            "name": "test_search_results",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUrls.test_index": {
            "name": "test_index",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUrls.test_contents": {
            "name": "test_contents",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "portfolio-main/apps/blog/tests/test_views.py": {
        "TestHomeView.test_all_users_can_access": {
            "name": "test_all_users_can_access",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "rf": [
                    "dict[, ]"
                ],
                "all_users": []
            }
        },
        "TestAuthorPostListView.test_all_users_can_access": {
            "name": "test_all_users_can_access",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "rf": [],
                "pub_posts": [],
                "all_users": []
            }
        },
        "TestCategoryPostListView.test_all_users_can_access": {
            "name": "test_all_users_can_access",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "rf": [
                    "dict[, ]"
                ],
                "category": [],
                "all_users": []
            }
        },
        "TestPostDetailView.test_all_users_can_access": {
            "name": "test_all_users_can_access",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "rf": [],
                "pub_post": [
                    "bool"
                ],
                "all_users": []
            }
        },
        "TestPostCreateView.test_auth_user_can_access": {
            "name": "test_auth_user_can_access",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "rf": [
                    "str"
                ],
                "auth_user": [
                    "str",
                    "tuple[typing.Union[str,str]]"
                ]
            }
        },
        "TestPostCreateView.test_unauth_user_cannot_access": {
            "name": "test_unauth_user_cannot_access",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "rf": [],
                "unauth_user": [
                    "str"
                ]
            }
        },
        "TestPostUpdateView.test_author_can_access": {
            "name": "test_author_can_access",
            "location": 95,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "rf": [],
                "pub_post": [
                    "str"
                ]
            }
        },
        "TestPostUpdateView.test_unauth_user_cannot_access": {
            "name": "test_unauth_user_cannot_access",
            "location": 104,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "rf": [],
                "unauth_user": [
                    "str"
                ],
                "pub_post": [
                    "int"
                ]
            }
        },
        "TestPostUpdateView.test_author_can_update": {
            "name": "test_author_can_update",
            "location": 115,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "rf": [],
                "pub_post": [
                    "str"
                ]
            }
        },
        "TestPostDeleteView.test_author_can_delete": {
            "name": "test_author_can_delete",
            "location": 126,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "rf": [],
                "pub_post": [
                    "str"
                ]
            }
        },
        "TestPostDeleteView.test_unauth_user_cannot_delete": {
            "name": "test_unauth_user_cannot_delete",
            "location": 135,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "rf": [],
                "unauth_user": [],
                "pub_post": [
                    "bool"
                ]
            }
        },
        "TestSearchView.test_all_users_can_access": {
            "name": "test_all_users_can_access",
            "location": 149,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "rf": [
                    "dict[, ]"
                ],
                "all_users": []
            }
        },
        "TestSearchResultsView.test_all_users_can_access_searches": {
            "name": "test_all_users_can_access_searches",
            "location": 164,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "rf": [],
                "pub_posts": [],
                "search_terms": [
                    "str"
                ],
                "all_users": []
            }
        },
        "TestContentsListView.test_all_users_can_access": {
            "name": "test_all_users_can_access",
            "location": 179,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "rf": [],
                "pub_posts": [],
                "all_users": []
            }
        }
    },
    "portfolio-main/apps/blog/tests/__init__.py": {},
    "portfolio-main/apps/contacts/admin.py": {},
    "portfolio-main/apps/contacts/apps.py": {},
    "portfolio-main/apps/contacts/forms.py": {
        "ContactForm.__init__": {
            "name": "__init__",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "portfolio-main/apps/contacts/models.py": {
        "Contact.__str__": {
            "name": "__str__",
            "location": 11,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Contact.full_name": {
            "name": "full_name",
            "location": 15,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "portfolio-main/apps/contacts/urls.py": {},
    "portfolio-main/apps/contacts/views.py": {
        "ContactFormView.form_valid": {
            "name": "form_valid",
            "location": 14,
            "return": [],
            "arguments": {
                "self": [],
                "form": []
            }
        }
    },
    "portfolio-main/apps/contacts/__init__.py": {},
    "portfolio-main/apps/contacts/migrations/0001_initial.py": {},
    "portfolio-main/apps/contacts/migrations/__init__.py": {},
    "portfolio-main/apps/contacts/tests/conftest.py": {
        "random_contact": {
            "name": "random_contact",
            "location": 16,
            "return": [],
            "arguments": {}
        },
        "contact_data": {
            "name": "contact_data",
            "location": 22,
            "return": [
                "dict[typing.Text, typing.Text]"
            ],
            "arguments": {}
        }
    },
    "portfolio-main/apps/contacts/tests/helpers.py": {},
    "portfolio-main/apps/contacts/tests/test_forms.py": {
        "TestCandidateRegisterForm.test_candidate_register_form": {
            "name": "test_candidate_register_form",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "first_name": [
                    "str"
                ],
                "last_name": [
                    "str"
                ],
                "email": [
                    "str"
                ],
                "message": [
                    "str"
                ],
                "captcha": [
                    "str"
                ],
                "validity": [
                    "str",
                    "bool",
                    "dict[str, typing.Any]",
                    "None"
                ]
            }
        }
    },
    "portfolio-main/apps/contacts/tests/test_models.py": {
        "TestContact.test_single_contact_save": {
            "name": "test_single_contact_save",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "random_contact": []
            }
        },
        "TestContact.test_multi_contact_saves": {
            "name": "test_multi_contact_saves",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestContact.test_can_delete_contact": {
            "name": "test_can_delete_contact",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestContact.test_first_name_is_charfield": {
            "name": "test_first_name_is_charfield",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "random_contact": []
            }
        },
        "TestContact.test_last_name_is_charfield": {
            "name": "test_last_name_is_charfield",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "random_contact": [
                    "typing.Callable[, ]"
                ]
            }
        },
        "TestContact.test_email_is_emailfield": {
            "name": "test_email_is_emailfield",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "random_contact": []
            }
        },
        "TestContact.test_message_is_textfield": {
            "name": "test_message_is_textfield",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "random_contact": []
            }
        },
        "TestContact.test_submit_date_is_datetimefield": {
            "name": "test_submit_date_is_datetimefield",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "random_contact": []
            }
        },
        "TestContact.test_full_name": {
            "name": "test_full_name",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestContact.test_contact_str": {
            "name": "test_contact_str",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "portfolio-main/apps/contacts/tests/test_urls.py": {
        "TestURLs.test_contact": {
            "name": "test_contact",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestURLs.test_contact_submitted": {
            "name": "test_contact_submitted",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "portfolio-main/apps/contacts/tests/test_views.py": {
        "TestGetContactViews.test_contact_form_view": {
            "name": "test_contact_form_view",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "rf": [],
                "all_users": [
                    "None"
                ]
            }
        },
        "TestGetContactViews.test_contact_submitted_view": {
            "name": "test_contact_submitted_view",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "rf": [],
                "all_users": [
                    "None"
                ]
            }
        },
        "TestPostContactView.test_contact_form_post_view": {
            "name": "test_contact_form_post_view",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "rf": [],
                "contact_data": [
                    "list[typing.Type]",
                    "None"
                ]
            }
        }
    },
    "portfolio-main/apps/contacts/tests/__init__.py": {},
    "portfolio-main/apps/countdown_letters/admin.py": {},
    "portfolio-main/apps/countdown_letters/apps.py": {},
    "portfolio-main/apps/countdown_letters/forms.py": {},
    "portfolio-main/apps/countdown_letters/logic.py": {
        "get_letters_chosen": {
            "name": "get_letters_chosen",
            "location": 82,
            "return": [
                "str"
            ],
            "arguments": {
                "num_vowels": [
                    "int",
                    "typing.Sequence[str]",
                    "float"
                ]
            }
        },
        "get_words": {
            "name": "get_words",
            "location": 107,
            "return": [
                "set[]"
            ],
            "arguments": {}
        },
        "get_shortlisted_words": {
            "name": "get_shortlisted_words",
            "location": 119,
            "return": [
                "list[list[]]"
            ],
            "arguments": {
                "words": [
                    "dict[, ]"
                ],
                "letters": [
                    "bytes",
                    "tuple[typing.Union[int,int]]"
                ]
            }
        },
        "get_longest_possible_word": {
            "name": "get_longest_possible_word",
            "location": 140,
            "return": [
                "str",
                "None"
            ],
            "arguments": {
                "shortlisted_words": [
                    "str",
                    "dict[, ]"
                ]
            }
        },
        "get_game_score": {
            "name": "get_game_score",
            "location": 152,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "word_len": [
                    "int",
                    "str"
                ]
            }
        },
        "get_lemmas_response_json": {
            "name": "get_lemmas_response_json",
            "location": 157,
            "return": [],
            "arguments": {
                "word": [
                    "str"
                ]
            }
        },
        "lookup_definition_data": {
            "name": "lookup_definition_data",
            "location": 167,
            "return": [
                "dict[typing.Text, typing.Text]"
            ],
            "arguments": {
                "word": [
                    "str",
                    "float",
                    "int"
                ]
            }
        },
        "get_result": {
            "name": "get_result",
            "location": 191,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "player_word": [],
                "comp_word": []
            }
        },
        "GameSetup.get_weighted_vowels": {
            "name": "get_weighted_vowels",
            "location": 28,
            "return": [
                "list[typing.Text]"
            ],
            "arguments": {}
        },
        "GameSetup.get_weighted_consonants": {
            "name": "get_weighted_consonants",
            "location": 47,
            "return": [
                "list[typing.Text]"
            ],
            "arguments": {}
        }
    },
    "portfolio-main/apps/countdown_letters/models.py": {
        "LettersGame.entry_year": {
            "name": "entry_year",
            "location": 23,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "portfolio-main/apps/countdown_letters/oxford_api.py": {},
    "portfolio-main/apps/countdown_letters/urls.py": {},
    "portfolio-main/apps/countdown_letters/utils.py": {
        "build_game_screen_url": {
            "name": "build_game_screen_url",
            "location": 9,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "num_vowels_selected": [
                    "int",
                    "dict[int, int]"
                ]
            }
        },
        "build_results_screen_url": {
            "name": "build_results_screen_url",
            "location": 21,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "letters_chosen": [
                    "str",
                    "typing.IO"
                ],
                "players_word": [
                    "str",
                    "typing.IO"
                ]
            }
        },
        "create_record": {
            "name": "create_record",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "context": []
            }
        }
    },
    "portfolio-main/apps/countdown_letters/validations.py": {
        "is_in_oxford_api": {
            "name": "is_in_oxford_api",
            "location": 12,
            "return": [
                "bool"
            ],
            "arguments": {
                "word": [
                    "str"
                ]
            }
        },
        "is_eligible_answer": {
            "name": "is_eligible_answer",
            "location": 21,
            "return": [
                "bool"
            ],
            "arguments": {
                "answer": [
                    "str",
                    "list[int]",
                    "tuple[str]"
                ],
                "letters": [
                    "str",
                    "list[int]",
                    "tuple[str]"
                ]
            }
        }
    },
    "portfolio-main/apps/countdown_letters/views.py": {
        "selection_screen": {
            "name": "selection_screen",
            "location": 7,
            "return": [],
            "arguments": {
                "request": []
            }
        },
        "game_screen": {
            "name": "game_screen",
            "location": 23,
            "return": [],
            "arguments": {
                "request": []
            }
        },
        "results_screen": {
            "name": "results_screen",
            "location": 39,
            "return": [],
            "arguments": {
                "request": [
                    "int",
                    "str"
                ]
            }
        }
    },
    "portfolio-main/apps/countdown_letters/__init__.py": {},
    "portfolio-main/apps/countdown_letters/migrations/0001_initial.py": {},
    "portfolio-main/apps/countdown_letters/migrations/__init__.py": {},
    "portfolio-main/apps/countdown_letters/tests/conftest.py": {
        "vcr_config": {
            "name": "vcr_config",
            "location": 11,
            "return": [
                "dict[typing.Text, list[tuple[typing.Text]]]"
            ],
            "arguments": {}
        },
        "expected_vowels_list": {
            "name": "expected_vowels_list",
            "location": 23,
            "return": [
                "list[typing.Text]"
            ],
            "arguments": {}
        },
        "expected_consonants_list": {
            "name": "expected_consonants_list",
            "location": 33,
            "return": [
                "list[typing.Text]"
            ],
            "arguments": {}
        },
        "shortlisted_words": {
            "name": "shortlisted_words",
            "location": 45,
            "return": [
                "list[tuple[typing.Union[typing.Text,int]]]"
            ],
            "arguments": {}
        },
        "false_shortlisted_words": {
            "name": "false_shortlisted_words",
            "location": 64,
            "return": [
                "list[tuple[typing.Union[typing.Text,int]]]"
            ],
            "arguments": {}
        },
        "given_answers_list": {
            "name": "given_answers_list",
            "location": 74,
            "return": [
                "list[typing.Text]"
            ],
            "arguments": {}
        },
        "letters_game": {
            "name": "letters_game",
            "location": 81,
            "return": [],
            "arguments": {}
        }
    },
    "portfolio-main/apps/countdown_letters/tests/test_logic.py": {
        "test_get_letters_chosen": {
            "name": "test_get_letters_chosen",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "num_vowels": [
                    "float",
                    "int",
                    "None"
                ]
            }
        },
        "test_get_words": {
            "name": "test_get_words",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_get_shortlisted_words": {
            "name": "test_get_shortlisted_words",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_get_longest_possible_word": {
            "name": "test_get_longest_possible_word",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "shortlisted_words": []
            }
        },
        "test_get_longest_possible_word_returns_none": {
            "name": "test_get_longest_possible_word_returns_none",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {
                "false_shortlisted_words": [
                    "int",
                    "float",
                    "tuple[typing.Union[int,int]]"
                ]
            }
        },
        "test_get_game_score": {
            "name": "test_get_game_score",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {
                "word_len": [
                    "int"
                ]
            }
        },
        "test_get_lemmas_response_json": {
            "name": "test_get_lemmas_response_json",
            "location": 111,
            "return": [
                "None"
            ],
            "arguments": {
                "word": [
                    "str"
                ]
            }
        },
        "test_lookup_definition_data_valid_word": {
            "name": "test_lookup_definition_data_valid_word",
            "location": 124,
            "return": [
                "None"
            ],
            "arguments": {
                "word": [
                    "typing.Text"
                ]
            }
        },
        "test_lookup_definition_data_invalid_word": {
            "name": "test_lookup_definition_data_invalid_word",
            "location": 145,
            "return": [
                "None"
            ],
            "arguments": {
                "word": [
                    "typing.Text"
                ]
            }
        },
        "test_get_result": {
            "name": "test_get_result",
            "location": 154,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "TestGameSetup.test_get_weighted_vowels": {
            "name": "test_get_weighted_vowels",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "expected_vowels_list": [
                    "str",
                    "list[int]",
                    "typing.Type",
                    "typing.Callable[, ]",
                    "int"
                ]
            }
        },
        "TestGameSetup.test_get_weighted_consonants": {
            "name": "test_get_weighted_consonants",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "expected_consonants_list": [
                    "str",
                    "list[int]",
                    "typing.Type",
                    "typing.Callable[, ]",
                    "int"
                ]
            }
        }
    },
    "portfolio-main/apps/countdown_letters/tests/test_models.py": {
        "TestLettersGame.test_single_letters_game_saves": {
            "name": "test_single_letters_game_saves",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "letters_game": []
            }
        },
        "TestLettersGame.test_multi_letters_game_saves": {
            "name": "test_multi_letters_game_saves",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLettersGame.test_can_delete_letters_game": {
            "name": "test_can_delete_letters_game",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLettersGame.test_letters_chosen_is_charfield": {
            "name": "test_letters_chosen_is_charfield",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "letters_game": [
                    "str",
                    "set[]"
                ]
            }
        },
        "TestLettersGame.test_players_word_is_charfield": {
            "name": "test_players_word_is_charfield",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "letters_game": [
                    "str",
                    "set[]"
                ]
            }
        },
        "TestLettersGame.test_comp_word_is_charfield": {
            "name": "test_comp_word_is_charfield",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "letters_game": [
                    "str",
                    "set[]"
                ]
            }
        },
        "TestLettersGame.test_eligible_answer_is_charfield": {
            "name": "test_eligible_answer_is_charfield",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "letters_game": [
                    "str",
                    "set[]"
                ]
            }
        },
        "TestLettersGame.test_winning_word_is_charfield": {
            "name": "test_winning_word_is_charfield",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "letters_game": [
                    "str",
                    "set[]"
                ]
            }
        },
        "TestLettersGame.test_player_word_len_is_integerfield": {
            "name": "test_player_word_len_is_integerfield",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "letters_game": [
                    "str",
                    "set[]"
                ]
            }
        },
        "TestLettersGame.test_comp_word_len_is_integerfield": {
            "name": "test_comp_word_len_is_integerfield",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "letters_game": [
                    "str",
                    "set[]"
                ]
            }
        },
        "TestLettersGame.test_player_score_is_integerfield": {
            "name": "test_player_score_is_integerfield",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "letters_game": [
                    "str",
                    "set[]"
                ]
            }
        },
        "TestLettersGame.test_comp_score_is_integerfield": {
            "name": "test_comp_score_is_integerfield",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "letters_game": [
                    "str",
                    "set[]"
                ]
            }
        },
        "TestLettersGame.test_definition_is_textfield": {
            "name": "test_definition_is_textfield",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "letters_game": [
                    "str",
                    "set[]"
                ]
            }
        },
        "TestLettersGame.test_word_class_is_charfield": {
            "name": "test_word_class_is_charfield",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "letters_game": [
                    "str",
                    "set[]"
                ]
            }
        },
        "TestLettersGame.test_result_is_charfield": {
            "name": "test_result_is_charfield",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "letters_game": [
                    "str",
                    "set[]"
                ]
            }
        },
        "TestLettersGame.test_entry_date_is_datefield": {
            "name": "test_entry_date_is_datefield",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "letters_game": [
                    "str",
                    "set[]"
                ]
            }
        },
        "TestLettersGame.test_entry_year": {
            "name": "test_entry_year",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "letters_game": [
                    "bool"
                ]
            }
        }
    },
    "portfolio-main/apps/countdown_letters/tests/test_urls.py": {
        "test_selection_screen": {
            "name": "test_selection_screen",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_game_screen": {
            "name": "test_game_screen",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_results_screen": {
            "name": "test_results_screen",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "portfolio-main/apps/countdown_letters/tests/test_utils.py": {
        "TestURL.test_build_game_screen_url": {
            "name": "test_build_game_screen_url",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestURL.test_build_results_screen_url": {
            "name": "test_build_results_screen_url",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "portfolio-main/apps/countdown_letters/tests/test_validations.py": {
        "test_is_in_oxford_api": {
            "name": "test_is_in_oxford_api",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "test_word": []
            }
        },
        "test_is_eligible_answer": {
            "name": "test_is_eligible_answer",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "given_answers_list": [
                    "str"
                ],
                "letters": [
                    "typing.Text"
                ]
            }
        }
    },
    "portfolio-main/apps/countdown_letters/tests/test_views.py": {
        "test_get_selection_screen": {
            "name": "test_get_selection_screen",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "client": []
            }
        },
        "test_post_selection_screen": {
            "name": "test_post_selection_screen",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [],
                "num_vowels_selected": [
                    "list[dict[str, typing.Any]]",
                    "int"
                ]
            }
        },
        "test_form_not_valid": {
            "name": "test_form_not_valid",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [],
                "num_vowels": [
                    "int",
                    "str"
                ]
            }
        },
        "test_get_game_screen": {
            "name": "test_get_game_screen",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "client": []
            }
        },
        "test_get_results_screen": {
            "name": "test_get_results_screen",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "client": []
            }
        }
    },
    "portfolio-main/apps/countdown_letters/tests/__init__.py": {},
    "portfolio-main/apps/countdown_numbers/admin.py": {},
    "portfolio-main/apps/countdown_numbers/apps.py": {},
    "portfolio-main/apps/countdown_numbers/forms.py": {},
    "portfolio-main/apps/countdown_numbers/logic.py": {
        "get_numbers_chosen": {
            "name": "get_numbers_chosen",
            "location": 14,
            "return": [],
            "arguments": {
                "num_from_top": []
            }
        },
        "get_target_number": {
            "name": "get_target_number",
            "location": 42,
            "return": [],
            "arguments": {}
        },
        "build_game_url": {
            "name": "build_game_url",
            "location": 47,
            "return": [],
            "arguments": {
                "num_from_top": []
            }
        },
        "get_game_nums": {
            "name": "get_game_nums",
            "location": 56,
            "return": [],
            "arguments": {
                "number_chosen": []
            }
        },
        "get_player_num_achieved": {
            "name": "get_player_num_achieved",
            "location": 61,
            "return": [],
            "arguments": {
                "players_calc": []
            }
        },
        "get_game_calcs": {
            "name": "get_game_calcs",
            "location": 66,
            "return": [],
            "arguments": {
                "game_nums": [],
                "stop_on": []
            }
        },
        "get_best_solution": {
            "name": "get_best_solution",
            "location": 102,
            "return": [],
            "arguments": {
                "game_nums": [],
                "target": []
            }
        },
        "get_score_awarded": {
            "name": "get_score_awarded",
            "location": 115,
            "return": [],
            "arguments": {
                "target_number": [],
                "num_achieved": []
            }
        },
        "get_game_result": {
            "name": "get_game_result",
            "location": 131,
            "return": [],
            "arguments": {
                "target": [],
                "answers": []
            }
        }
    },
    "portfolio-main/apps/countdown_numbers/models.py": {
        "NumbersGame.entry_year": {
            "name": "entry_year",
            "location": 20,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "portfolio-main/apps/countdown_numbers/urls.py": {},
    "portfolio-main/apps/countdown_numbers/utils.py": {
        "create_record": {
            "name": "create_record",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {
                "context": [
                    "str"
                ]
            }
        }
    },
    "portfolio-main/apps/countdown_numbers/validations.py": {
        "check_chars": {
            "name": "check_chars",
            "location": 11,
            "return": [],
            "arguments": {
                "players_calc": [
                    "str",
                    "typing.Iterable[typing.Sequence[str]]",
                    "typing.Sequence[str]"
                ]
            }
        },
        "check_brackets": {
            "name": "check_brackets",
            "location": 22,
            "return": [
                "bool"
            ],
            "arguments": {
                "players_calc": [
                    "list[list[str]]"
                ]
            }
        },
        "check_legal_chars_seq": {
            "name": "check_legal_chars_seq",
            "location": 27,
            "return": [
                "bool"
            ],
            "arguments": {
                "players_calc": [
                    "str"
                ]
            }
        },
        "strip_spaces": {
            "name": "strip_spaces",
            "location": 37,
            "return": [
                "str"
            ],
            "arguments": {
                "players_calc": [
                    "str"
                ]
            }
        },
        "calc_entered_is_valid": {
            "name": "calc_entered_is_valid",
            "location": 42,
            "return": [],
            "arguments": {
                "players_calc": [
                    "str",
                    "int"
                ]
            }
        },
        "output_message": {
            "name": "output_message",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "request": [],
                "checks": [
                    "int"
                ]
            }
        },
        "get_permissible_nums": {
            "name": "get_permissible_nums",
            "location": 70,
            "return": [],
            "arguments": {
                "request": []
            }
        },
        "get_nums_used": {
            "name": "get_nums_used",
            "location": 75,
            "return": [],
            "arguments": {
                "players_calc": [
                    "str",
                    "bool"
                ]
            }
        },
        "is_calc_valid": {
            "name": "is_calc_valid",
            "location": 82,
            "return": [
                "bool"
            ],
            "arguments": {
                "request": [
                    "str",
                    "list[dict[str, typing.Any]]"
                ],
                "players_calc": [
                    "dict[str, typing.Any]"
                ]
            }
        }
    },
    "portfolio-main/apps/countdown_numbers/views.py": {
        "selection_screen": {
            "name": "selection_screen",
            "location": 12,
            "return": [],
            "arguments": {
                "request": []
            }
        },
        "game_screen": {
            "name": "game_screen",
            "location": 25,
            "return": [],
            "arguments": {
                "request": [
                    "str"
                ]
            }
        },
        "results_screen": {
            "name": "results_screen",
            "location": 52,
            "return": [],
            "arguments": {
                "request": []
            }
        }
    },
    "portfolio-main/apps/countdown_numbers/__init__.py": {},
    "portfolio-main/apps/countdown_numbers/migrations/0001_initial.py": {},
    "portfolio-main/apps/countdown_numbers/migrations/__init__.py": {},
    "portfolio-main/apps/countdown_numbers/templatetags/template_helpers.py": {
        "remove_brackets": {
            "name": "remove_brackets",
            "location": 14,
            "return": [],
            "arguments": {
                "value": [
                    "str",
                    "int",
                    "typing.Sequence[str]"
                ]
            }
        },
        "add_spacing": {
            "name": "add_spacing",
            "location": 19,
            "return": [
                "str"
            ],
            "arguments": {
                "value": [
                    "dict[, ]",
                    "str",
                    "dict[str, set[str]]"
                ]
            }
        },
        "change_symbols": {
            "name": "change_symbols",
            "location": 31,
            "return": [],
            "arguments": {
                "value": [
                    "str",
                    "typing.AnyStr"
                ]
            }
        }
    },
    "portfolio-main/apps/countdown_numbers/templatetags/__init__.py": {},
    "portfolio-main/apps/countdown_numbers/tests/conftest.py": {
        "numbers_game": {
            "name": "numbers_game",
            "location": 11,
            "return": [],
            "arguments": {}
        }
    },
    "portfolio-main/apps/countdown_numbers/tests/test_logic.py": {
        "test_get_numbers_chosen": {
            "name": "test_get_numbers_chosen",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "num_from_top": [
                    "int",
                    "typing.Callable[, ]"
                ]
            }
        },
        "test_get_target_number": {
            "name": "test_get_target_number",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_build_game_url": {
            "name": "test_build_game_url",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "num_from_top": [
                    "dict[, ]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "test_score_awarded_for_achieving_target_number": {
            "name": "test_score_awarded_for_achieving_target_number",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "target_number": [
                    "int",
                    "float",
                    "str",
                    "None",
                    "collections.abc.Awaitable[None]"
                ]
            }
        },
        "test_score_awarded_for_being_within_5_of_target_number": {
            "name": "test_score_awarded_for_being_within_5_of_target_number",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "num_achieved_var": [
                    "int"
                ]
            }
        },
        "test_score_awarded_for_being_within_10_of_target_number": {
            "name": "test_score_awarded_for_being_within_10_of_target_number",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "num_achieved_var": [
                    "int"
                ]
            }
        },
        "test_score_awarded_for_being_more_than_10_away_from_target_number": {
            "name": "test_score_awarded_for_being_more_than_10_away_from_target_number",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "num_achieved_var": [
                    "int"
                ]
            }
        },
        "test_get_game_result_is_draw_1": {
            "name": "test_get_game_result_is_draw_1",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_get_game_result_is_draw_2": {
            "name": "test_get_game_result_is_draw_2",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_get_game_result_is_draw_3": {
            "name": "test_get_game_result_is_draw_3",
            "location": 120,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_get_game_result_is_draw_4": {
            "name": "test_get_game_result_is_draw_4",
            "location": 134,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_rachel_wins_when_closer_but_above_target_number": {
            "name": "test_rachel_wins_when_closer_but_above_target_number",
            "location": 148,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_rachel_wins_when_closer_but_below_target_number": {
            "name": "test_rachel_wins_when_closer_but_below_target_number",
            "location": 162,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_player_wins_when_closer_but_above_target_number": {
            "name": "test_player_wins_when_closer_but_above_target_number",
            "location": 176,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_player_wins_when_closer_but_below_target_number": {
            "name": "test_player_wins_when_closer_but_below_target_number",
            "location": 190,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "portfolio-main/apps/countdown_numbers/tests/test_models.py": {
        "TestNumbersGame.test_single_numbers_game_saves": {
            "name": "test_single_numbers_game_saves",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "numbers_game": []
            }
        },
        "TestNumbersGame.test_multi_numbers_game_saves": {
            "name": "test_multi_numbers_game_saves",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestNumbersGame.test_can_delete_numbers_game": {
            "name": "test_can_delete_numbers_game",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestNumbersGame.test_game_nums_is_charfield": {
            "name": "test_game_nums_is_charfield",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "numbers_game": [
                    "str",
                    "set[]"
                ]
            }
        },
        "TestNumbersGame.test_target_number_is_integerfield": {
            "name": "test_target_number_is_integerfield",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "numbers_game": [
                    "str",
                    "set[]"
                ]
            }
        },
        "TestNumbersGame.test_player_num_achieved_is_integerfield": {
            "name": "test_player_num_achieved_is_integerfield",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "numbers_game": [
                    "str",
                    "set[]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "TestNumbersGame.test_valid_calc_is_booleanfield": {
            "name": "test_valid_calc_is_booleanfield",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "numbers_game": [
                    "str",
                    "set[]"
                ]
            }
        },
        "TestNumbersGame.test_comp_num_achieved_is_integerfield": {
            "name": "test_comp_num_achieved_is_integerfield",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "numbers_game": [
                    "str",
                    "set[]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "TestNumbersGame.test_player_score_is_integerfield": {
            "name": "test_player_score_is_integerfield",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "numbers_game": [
                    "str",
                    "set[]"
                ]
            }
        },
        "TestNumbersGame.test_comp_score_is_integerfield": {
            "name": "test_comp_score_is_integerfield",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "numbers_game": [
                    "str",
                    "set[]"
                ]
            }
        },
        "TestNumbersGame.test_solution_str_is_charfield": {
            "name": "test_solution_str_is_charfield",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "numbers_game": [
                    "str",
                    "set[]"
                ]
            }
        },
        "TestNumbersGame.test_game_result_is_charfield": {
            "name": "test_game_result_is_charfield",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "numbers_game": [
                    "str",
                    "set[]"
                ]
            }
        },
        "TestNumbersGame.test_entry_date_is_datefield": {
            "name": "test_entry_date_is_datefield",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "numbers_game": [
                    "str",
                    "set[]"
                ]
            }
        },
        "TestNumbersGame.test_entry_year": {
            "name": "test_entry_year",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "numbers_game": [
                    "bool"
                ]
            }
        }
    },
    "portfolio-main/apps/countdown_numbers/tests/test_template_helpers.py": {
        "test_remove_brackets": {
            "name": "test_remove_brackets",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_add_spacing": {
            "name": "test_add_spacing",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_change_symbols": {
            "name": "test_change_symbols",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_humanise_calculation": {
            "name": "test_humanise_calculation",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "portfolio-main/apps/countdown_numbers/tests/test_urls.py": {
        "test_selection_screen": {
            "name": "test_selection_screen",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_game_screen": {
            "name": "test_game_screen",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_results_screen": {
            "name": "test_results_screen",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "portfolio-main/apps/countdown_numbers/tests/test_validations.py": {
        "TestCheckChars.test_valid_calc_string": {
            "name": "test_valid_calc_string",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCheckChars.test_invalid_calc_string": {
            "name": "test_invalid_calc_string",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCheckBrackets.test_valid_calc_string": {
            "name": "test_valid_calc_string",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCheckBrackets.test_invalid_calc_string": {
            "name": "test_invalid_calc_string",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCheckLegalChars.test_valid_calc_string": {
            "name": "test_valid_calc_string",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCheckLegalChars.test_invalid_calc_string": {
            "name": "test_invalid_calc_string",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestStripSpaces.test_stripped": {
            "name": "test_stripped",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestValidCalc.test_valid_calc_passes_checks": {
            "name": "test_valid_calc_passes_checks",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestValidCalc.test_invalid_brackets_fails_check": {
            "name": "test_invalid_brackets_fails_check",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestValidCalc.test_invalid_chars_fails_check": {
            "name": "test_invalid_chars_fails_check",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestValidCalc.test_invalid_sequences_fails_check": {
            "name": "test_invalid_sequences_fails_check",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "portfolio-main/apps/countdown_numbers/tests/test_views.py": {
        "test_get_selection_screen": {
            "name": "test_get_selection_screen",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "client": []
            }
        },
        "test_post_selection_screen": {
            "name": "test_post_selection_screen",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [],
                "num_from_top": [
                    "int",
                    "str"
                ]
            }
        },
        "test_form_not_valid": {
            "name": "test_form_not_valid",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "client": []
            }
        },
        "test_get_game_screen": {
            "name": "test_get_game_screen",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "client": []
            }
        },
        "test_post_game_screen": {
            "name": "test_post_game_screen",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "client": []
            }
        },
        "test_results_screen": {
            "name": "test_results_screen",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "client": []
            }
        }
    },
    "portfolio-main/apps/countdown_numbers/tests/__init__.py": {},
    "portfolio-main/apps/cv/apps.py": {},
    "portfolio-main/apps/cv/urls.py": {},
    "portfolio-main/apps/cv/views.py": {},
    "portfolio-main/apps/cv/__init__.py": {},
    "portfolio-main/apps/cv/tests/test_urls.py": {
        "TestUrls.test_cv": {
            "name": "test_cv",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "portfolio-main/apps/cv/tests/test_views.py": {
        "test_cv": {
            "name": "test_cv",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {
                "rf": []
            }
        }
    },
    "portfolio-main/apps/cv/tests/__init__.py": {},
    "portfolio-main/apps/pages/apps.py": {},
    "portfolio-main/apps/pages/urls.py": {},
    "portfolio-main/apps/pages/views.py": {
        "handler500": {
            "name": "handler500",
            "location": 104,
            "return": [],
            "arguments": {
                "request": []
            }
        }
    },
    "portfolio-main/apps/pages/__init__.py": {},
    "portfolio-main/apps/pages/templatetags/ext_links.py": {
        "SocialMedia.github_profile_link": {
            "name": "github_profile_link",
            "location": 19,
            "return": [
                "typing.Text"
            ],
            "arguments": {}
        },
        "SocialMedia.github_portfolio_link": {
            "name": "github_portfolio_link",
            "location": 23,
            "return": [
                "typing.Text"
            ],
            "arguments": {}
        },
        "SocialMedia.github_portfolio_issues_link": {
            "name": "github_portfolio_issues_link",
            "location": 27,
            "return": [
                "typing.Text"
            ],
            "arguments": {}
        },
        "SocialMedia.stack_overflow_profile_link": {
            "name": "stack_overflow_profile_link",
            "location": 31,
            "return": [
                "typing.Text"
            ],
            "arguments": {}
        },
        "SocialMedia.linkedin_profile_link": {
            "name": "linkedin_profile_link",
            "location": 35,
            "return": [
                "typing.Text"
            ],
            "arguments": {}
        },
        "SocialMedia.google_maps_location_link": {
            "name": "google_maps_location_link",
            "location": 39,
            "return": [
                "typing.Text"
            ],
            "arguments": {}
        },
        "SocialMedia.email_me_link": {
            "name": "email_me_link",
            "location": 43,
            "return": [
                "typing.Text"
            ],
            "arguments": {}
        },
        "SocialMedia.email_me_text": {
            "name": "email_me_text",
            "location": 47,
            "return": [
                "typing.Text"
            ],
            "arguments": {}
        },
        "LinkGenerator.github_url": {
            "name": "github_url",
            "location": 58,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "type": [
                    "str",
                    "bool",
                    "None"
                ],
                "app": [
                    "str",
                    "None"
                ]
            }
        },
        "Contacts.google_maps_embed_link": {
            "name": "google_maps_embed_link",
            "location": 70,
            "return": [
                "typing.Text"
            ],
            "arguments": {}
        },
        "CountdownLetters.game_rules": {
            "name": "game_rules",
            "location": 75,
            "return": [
                "typing.Text"
            ],
            "arguments": {}
        },
        "CountdownLetters.views_source_code": {
            "name": "views_source_code",
            "location": 79,
            "return": [
                "typing.Text"
            ],
            "arguments": {}
        },
        "CountdownNumbers.game_rules": {
            "name": "game_rules",
            "location": 85,
            "return": [
                "typing.Text"
            ],
            "arguments": {}
        },
        "CountdownNumbers.views_source_code": {
            "name": "views_source_code",
            "location": 89,
            "return": [
                "typing.Text"
            ],
            "arguments": {}
        },
        "Scraping.churchill_speech": {
            "name": "churchill_speech",
            "location": 95,
            "return": [
                "typing.Text"
            ],
            "arguments": {}
        },
        "Scraping.gettysburg_speech": {
            "name": "gettysburg_speech",
            "location": 99,
            "return": [
                "typing.Text"
            ],
            "arguments": {}
        },
        "Scraping.gettysburg_source_code": {
            "name": "gettysburg_source_code",
            "location": 103,
            "return": [
                "typing.Text"
            ],
            "arguments": {}
        },
        "Scraping.churchill_source_code": {
            "name": "churchill_source_code",
            "location": 108,
            "return": [
                "typing.Text"
            ],
            "arguments": {}
        },
        "Scraping.referendum_source_code": {
            "name": "referendum_source_code",
            "location": 113,
            "return": [
                "typing.Text"
            ],
            "arguments": {}
        },
        "Scraping.sample_referendum_results": {
            "name": "sample_referendum_results",
            "location": 118,
            "return": [
                "typing.Text"
            ],
            "arguments": {}
        },
        "TextAnalysis.views_source_code": {
            "name": "views_source_code",
            "location": 124,
            "return": [
                "typing.Text"
            ],
            "arguments": {}
        },
        "DataScience.notebooks": {
            "name": "notebooks",
            "location": 131,
            "return": [
                "typing.Text"
            ],
            "arguments": {}
        },
        "DataScience.github_issues": {
            "name": "github_issues",
            "location": 135,
            "return": [
                "typing.Text"
            ],
            "arguments": {}
        }
    },
    "portfolio-main/apps/pages/templatetags/__init__.py": {},
    "portfolio-main/apps/pages/tests/helpers.py": {
        "app_names": {
            "name": "app_names",
            "location": 6,
            "return": [
                "list[]"
            ],
            "arguments": {}
        }
    },
    "portfolio-main/apps/pages/tests/test_ext_links.py": {
        "TestSocialMedia.test_github_profile": {
            "name": "test_github_profile",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "TestSocialMedia.test_github_portfolio": {
            "name": "test_github_portfolio",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "TestSocialMedia.test_github_portfolio_issues_link": {
            "name": "test_github_portfolio_issues_link",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "TestSocialMedia.test_stack_overflow_profile": {
            "name": "test_stack_overflow_profile",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "TestSocialMedia.test_google_maps_location": {
            "name": "test_google_maps_location",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "TestLinkGenerator.test_github_url": {
            "name": "test_github_url",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "type": [
                    "str",
                    "typing.Callable[, ]",
                    "list[str]",
                    "typing.Mapping"
                ],
                "app": [
                    "str",
                    "typing.Callable[, ]",
                    "list[str]",
                    "typing.Mapping"
                ]
            }
        },
        "TestContacts.test_google_maps_embed_link": {
            "name": "test_google_maps_embed_link",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "TestCountdownLetters.test_game_rules": {
            "name": "test_game_rules",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "TestCountdownLetters.test_views_source_code": {
            "name": "test_views_source_code",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "TestCountdownNumbers.test_views_source_code": {
            "name": "test_views_source_code",
            "location": 101,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "TestScraping.test_churchill_speech": {
            "name": "test_churchill_speech",
            "location": 109,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "TestScraping.test_gettysburg_speech": {
            "name": "test_gettysburg_speech",
            "location": 114,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "TestScraping.test_gettysburg_source_code": {
            "name": "test_gettysburg_source_code",
            "location": 119,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "TestScraping.test_churchill_source_code": {
            "name": "test_churchill_source_code",
            "location": 124,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "TestScraping.test_referendum_source_code": {
            "name": "test_referendum_source_code",
            "location": 129,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "TestScraping.test_sample_referendum_results": {
            "name": "test_sample_referendum_results",
            "location": 134,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "TestTextAnalysis.test_views_source_code": {
            "name": "test_views_source_code",
            "location": 142,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "TestDataScience.test_notebooks": {
            "name": "test_notebooks",
            "location": 150,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "TestDataScience.test_github_issues": {
            "name": "test_github_issues",
            "location": 155,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "portfolio-main/apps/pages/tests/test_urls.py": {
        "TestUrls.test_home": {
            "name": "test_home",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUrls.test_portfolio": {
            "name": "test_portfolio",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUrls.test_blog_review": {
            "name": "test_blog_review",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUrls.test_api_review": {
            "name": "test_api_review",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUrls.test_countdown_letters_review": {
            "name": "test_countdown_letters_review",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUrls.test_countdown_numbers_review": {
            "name": "test_countdown_numbers_review",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUrls.test_roulette_review": {
            "name": "test_roulette_review",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUrls.test_scraping_review": {
            "name": "test_scraping_review",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUrls.test_text_analysis_review": {
            "name": "test_text_analysis_review",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUrls.test_data_science_review": {
            "name": "test_data_science_review",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUrls.test_back_end_skills": {
            "name": "test_back_end_skills",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUrls.test_front_end_skills": {
            "name": "test_front_end_skills",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUrls.test_infrastructure_skills": {
            "name": "test_infrastructure_skills",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUrls.test_software_skills": {
            "name": "test_software_skills",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUrls.test_about_me": {
            "name": "test_about_me",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUrls.test_privacy": {
            "name": "test_privacy",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUrls.test_reading_list": {
            "name": "test_reading_list",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "portfolio-main/apps/pages/tests/test_views.py": {
        "TestStaticPagesViews.test_home_view": {
            "name": "test_home_view",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "rf": [],
                "all_users": []
            }
        },
        "TestStaticPagesViews.test_portfolio_view": {
            "name": "test_portfolio_view",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "rf": [],
                "all_users": []
            }
        },
        "TestStaticPagesViews.test_reading_list_view": {
            "name": "test_reading_list_view",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "rf": [
                    "dict[, ]"
                ],
                "all_users": []
            }
        },
        "TestStaticPagesViews.test_about_me_view": {
            "name": "test_about_me_view",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "rf": [],
                "all_users": []
            }
        },
        "TestStaticPagesViews.test_privacy_policy_view": {
            "name": "test_privacy_policy_view",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "rf": [],
                "all_users": []
            }
        },
        "TestSkillsPagesViews.test_back_end_skills_view": {
            "name": "test_back_end_skills_view",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "rf": [],
                "all_users": []
            }
        },
        "TestSkillsPagesViews.test_front_end_skills_view": {
            "name": "test_front_end_skills_view",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "rf": [],
                "all_users": []
            }
        },
        "TestSkillsPagesViews.test_infrastructure_skills_view": {
            "name": "test_infrastructure_skills_view",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "rf": [],
                "all_users": []
            }
        },
        "TestSkillsPagesViews.test_software_skills_view": {
            "name": "test_software_skills_view",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "rf": [],
                "all_users": []
            }
        },
        "TestReviewsPagesViews.test_blog_review_view": {
            "name": "test_blog_review_view",
            "location": 101,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "rf": [],
                "all_users": []
            }
        },
        "TestReviewsPagesViews.test_api_review_view": {
            "name": "test_api_review_view",
            "location": 109,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "rf": [],
                "all_users": []
            }
        },
        "TestReviewsPagesViews.test_countdown_letters_review_view": {
            "name": "test_countdown_letters_review_view",
            "location": 117,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "rf": [],
                "all_users": []
            }
        },
        "TestReviewsPagesViews.test_countdown_numbers_review_view": {
            "name": "test_countdown_numbers_review_view",
            "location": 125,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "rf": [],
                "all_users": []
            }
        },
        "TestReviewsPagesViews.test_roulette_review_view": {
            "name": "test_roulette_review_view",
            "location": 133,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "rf": [],
                "all_users": []
            }
        },
        "TestReviewsPagesViews.test_scraping_review_view": {
            "name": "test_scraping_review_view",
            "location": 141,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "dict[, ]"
                ],
                "rf": [
                    "dict[str, str]",
                    "dict[, ]"
                ],
                "all_users": [
                    "str"
                ]
            }
        },
        "TestReviewsPagesViews.test_text_analysis_review_view": {
            "name": "test_text_analysis_review_view",
            "location": 149,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "rf": [
                    "dict[, ]"
                ],
                "all_users": []
            }
        },
        "TestReviewsPagesViews.test_data_science_review_view": {
            "name": "test_data_science_review_view",
            "location": 157,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "rf": [
                    "dict[, ]",
                    "dict[str, typing.Any]"
                ],
                "all_users": [
                    "list[int]"
                ]
            }
        },
        "TestCustomErrorPages.test_400_page": {
            "name": "test_400_page",
            "location": 168,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "rf": [],
                "all_users": []
            }
        },
        "TestCustomErrorPages.test_403_page": {
            "name": "test_403_page",
            "location": 176,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "rf": [],
                "pub_post": [],
                "auth_user": []
            }
        },
        "TestCustomErrorPages.test_404_page": {
            "name": "test_404_page",
            "location": 187,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "rf": [],
                "all_users": []
            }
        },
        "TestCustomErrorPages.test_500_page": {
            "name": "test_500_page",
            "location": 198,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "rf": [],
                "all_users": []
            }
        }
    },
    "portfolio-main/apps/pages/tests/__init__.py": {},
    "portfolio-main/apps/roulette/apps.py": {},
    "portfolio-main/apps/roulette/logging.py": {},
    "portfolio-main/apps/roulette/logic.py": {
        "clear_down_log_file": {
            "name": "clear_down_log_file",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "reset_places_to_go": {
            "name": "reset_places_to_go",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "get_game_result": {
            "name": "get_game_result",
            "location": 42,
            "return": [
                "tuple[typing.Union[str,float,list[],int,list[typing.Text]]]"
            ],
            "arguments": {}
        },
        "get_picture_url": {
            "name": "get_picture_url",
            "location": 62,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "destination": [
                    "str"
                ]
            }
        },
        "read_log_file": {
            "name": "read_log_file",
            "location": 82,
            "return": [
                "list[]"
            ],
            "arguments": {}
        }
    },
    "portfolio-main/apps/roulette/urls.py": {},
    "portfolio-main/apps/roulette/views.py": {
        "game_screen": {
            "name": "game_screen",
            "location": 6,
            "return": [],
            "arguments": {
                "request": [
                    "str"
                ]
            }
        },
        "destination_screen": {
            "name": "destination_screen",
            "location": 11,
            "return": [],
            "arguments": {
                "request": []
            }
        },
        "view_log_file_contents": {
            "name": "view_log_file_contents",
            "location": 27,
            "return": [],
            "arguments": {
                "request": []
            }
        }
    },
    "portfolio-main/apps/roulette/__init__.py": {},
    "portfolio-main/apps/roulette/tests/helpers.py": {},
    "portfolio-main/apps/roulette/tests/test_logging.py": {
        "test_log_file_setup": {
            "name": "test_log_file_setup",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "portfolio-main/apps/roulette/tests/test_logic.py": {
        "test_places_to_go_dict": {
            "name": "test_places_to_go_dict",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_reset_places_to_go": {
            "name": "test_reset_places_to_go",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_get_game_result": {
            "name": "test_get_game_result",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_get_picture_url": {
            "name": "test_get_picture_url",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "destinations": []
            }
        }
    },
    "portfolio-main/apps/roulette/tests/test_urls.py": {
        "test_game_screen": {
            "name": "test_game_screen",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_destination_screen": {
            "name": "test_destination_screen",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_results_screen": {
            "name": "test_results_screen",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "portfolio-main/apps/roulette/tests/test_views.py": {
        "test_game_screen": {
            "name": "test_game_screen",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {
                "client": []
            }
        },
        "test_destination_screen": {
            "name": "test_destination_screen",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [],
                "mocker": []
            }
        },
        "test_view_log_file_contents": {
            "name": "test_view_log_file_contents",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "client": []
            }
        }
    },
    "portfolio-main/apps/roulette/tests/__init__.py": {},
    "portfolio-main/apps/scraping/apps.py": {},
    "portfolio-main/apps/scraping/churchill.py": {
        "get_churchill_speech": {
            "name": "get_churchill_speech",
            "location": 14,
            "return": [],
            "arguments": {
                "request": []
            }
        }
    },
    "portfolio-main/apps/scraping/gettysburg.py": {
        "get_gettysburg_speech": {
            "name": "get_gettysburg_speech",
            "location": 14,
            "return": [],
            "arguments": {
                "request": []
            }
        }
    },
    "portfolio-main/apps/scraping/referendum.py": {
        "get_area_results": {
            "name": "get_area_results",
            "location": 20,
            "return": [
                "list[]"
            ],
            "arguments": {
                "results": []
            }
        },
        "scrape_content": {
            "name": "scrape_content",
            "location": 38,
            "return": [
                "list[]"
            ],
            "arguments": {}
        },
        "calc_leave_votes": {
            "name": "calc_leave_votes",
            "location": 71,
            "return": [
                "bool"
            ],
            "arguments": {
                "results": [
                    "list[str]",
                    "list[dict[, ]]"
                ]
            }
        },
        "calc_remain_votes": {
            "name": "calc_remain_votes",
            "location": 76,
            "return": [
                "bool"
            ],
            "arguments": {
                "results": [
                    "list[str]",
                    "list[dict[, ]]"
                ]
            }
        },
        "get_referendum_results": {
            "name": "get_referendum_results",
            "location": 81,
            "return": [],
            "arguments": {
                "request": []
            }
        }
    },
    "portfolio-main/apps/scraping/urls.py": {},
    "portfolio-main/apps/scraping/views.py": {},
    "portfolio-main/apps/scraping/__init__.py": {},
    "portfolio-main/apps/scraping/tests/test_churchill.py": {
        "test_get_churchill_speech_view": {
            "name": "test_get_churchill_speech_view",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "client": []
            }
        }
    },
    "portfolio-main/apps/scraping/tests/test_gettysburg.py": {
        "test_get_gettysburg_speech_view": {
            "name": "test_get_gettysburg_speech_view",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "client": []
            }
        }
    },
    "portfolio-main/apps/scraping/tests/test_referendum.py": {
        "test_get_referendum_results": {
            "name": "test_get_referendum_results",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "client": []
            }
        }
    },
    "portfolio-main/apps/scraping/tests/test_urls.py": {
        "test_scraping_options_screen": {
            "name": "test_scraping_options_screen",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_churchill_speech_screen": {
            "name": "test_churchill_speech_screen",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_gettysburg_speech_screen": {
            "name": "test_gettysburg_speech_screen",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_eu_referendum_results_screen": {
            "name": "test_eu_referendum_results_screen",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "portfolio-main/apps/scraping/tests/test_views.py": {
        "TestScrapingOptionsView.test_scraping_options_view": {
            "name": "test_scraping_options_view",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "rf": []
            }
        }
    },
    "portfolio-main/apps/scraping/tests/__init__.py": {},
    "portfolio-main/apps/text_analysis/apps.py": {},
    "portfolio-main/apps/text_analysis/urls.py": {},
    "portfolio-main/apps/text_analysis/utils.py": {
        "get_orig_full_text": {
            "name": "get_orig_full_text",
            "location": 13,
            "return": [],
            "arguments": {
                "request": [
                    "dict[str, str]"
                ]
            }
        },
        "get_cleaned_full_text": {
            "name": "get_cleaned_full_text",
            "location": 17,
            "return": [],
            "arguments": {
                "request": [
                    "dict[, ]"
                ]
            }
        },
        "get_word_list": {
            "name": "get_word_list",
            "location": 21,
            "return": [
                "list[str]"
            ],
            "arguments": {
                "cleaned_full_text": [
                    "str"
                ]
            }
        },
        "get_sorted_words": {
            "name": "get_sorted_words",
            "location": 25,
            "return": [
                "list[]"
            ],
            "arguments": {
                "word_list": [
                    "list[]",
                    "list[str]",
                    "list[dict[, ]]",
                    "list[int]",
                    "list[dict[str, typing.Any]]",
                    "list[list[str]]"
                ]
            }
        },
        "get_letter_counts": {
            "name": "get_letter_counts",
            "location": 36,
            "return": [
                "list[str]"
            ],
            "arguments": {
                "cleaned_full_text": []
            }
        }
    },
    "portfolio-main/apps/text_analysis/views.py": {
        "analyse_screen": {
            "name": "analyse_screen",
            "location": 6,
            "return": [],
            "arguments": {
                "request": [
                    "typing.Callable[, ]"
                ]
            }
        },
        "analysis_screen": {
            "name": "analysis_screen",
            "location": 10,
            "return": [],
            "arguments": {
                "request": []
            }
        }
    },
    "portfolio-main/apps/text_analysis/__init__.py": {},
    "portfolio-main/apps/text_analysis/tests/conftest.py": {
        "text_to_analyse": {
            "name": "text_to_analyse",
            "location": 5,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "dirty_text": {
            "name": "dirty_text",
            "location": 11,
            "return": [
                "typing.Text"
            ],
            "arguments": {}
        }
    },
    "portfolio-main/apps/text_analysis/tests/test_urls.py": {
        "test_analyse_screen": {
            "name": "test_analyse_screen",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_analysis_screen": {
            "name": "test_analysis_screen",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "portfolio-main/apps/text_analysis/tests/test_utils.py": {
        "test_get_word_list": {
            "name": "test_get_word_list",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "text_to_analyse": [
                    "str",
                    "int",
                    "list[str]"
                ]
            }
        },
        "test_get_sorted_words": {
            "name": "test_get_sorted_words",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "text_to_analyse": []
            }
        },
        "test_get_letter_counts": {
            "name": "test_get_letter_counts",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "text_to_analyse": [
                    "int",
                    "str"
                ]
            }
        }
    },
    "portfolio-main/apps/text_analysis/tests/test_views.py": {
        "test_analyse_screen": {
            "name": "test_analyse_screen",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "client": []
            }
        },
        "test_analysis_screen_with_clean_text": {
            "name": "test_analysis_screen_with_clean_text",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [],
                "text_to_analyse": [
                    "str"
                ]
            }
        },
        "test_analysis_screen_with_dirty_text": {
            "name": "test_analysis_screen_with_dirty_text",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [],
                "dirty_text": []
            }
        }
    },
    "portfolio-main/apps/text_analysis/tests/__init__.py": {},
    "portfolio-main/apps/users/admin.py": {
        "ProfileAdmin.profile_picture_image": {
            "name": "profile_picture_image",
            "location": 16,
            "return": [],
            "arguments": {
                "self": [],
                "obj": [
                    "int",
                    "str",
                    "float"
                ]
            }
        },
        "EmailTokenAdmin.get_readonly_fields": {
            "name": "get_readonly_fields",
            "location": 38,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "dict[str, str]"
                ],
                "obj": [
                    "None"
                ]
            }
        }
    },
    "portfolio-main/apps/users/apps.py": {
        "UsersConfig.ready": {
            "name": "ready",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "portfolio-main/apps/users/forms.py": {
        "UserRegisterForm.clean_username": {
            "name": "clean_username",
            "location": 20,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UserRegisterForm.clean_first_name": {
            "name": "clean_first_name",
            "location": 23,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UserRegisterForm.clean_last_name": {
            "name": "clean_last_name",
            "location": 26,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UserUpdateForm.clean_username": {
            "name": "clean_username",
            "location": 37,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UserUpdateForm.clean_email": {
            "name": "clean_email",
            "location": 40,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UserUpdateForm.clean_first_name": {
            "name": "clean_first_name",
            "location": 43,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UserUpdateForm.clean_last_name": {
            "name": "clean_last_name",
            "location": 46,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ProfileUpdateForm.__init__": {
            "name": "__init__",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserTOTPDeviceForm.__init__": {
            "name": "__init__",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "typing.Callable[, ]",
                    "None",
                    "bytes",
                    "typing.Hashable",
                    "dict[, ]",
                    "bool"
                ],
                "user": [
                    "str",
                    "float",
                    "int"
                ],
                "metadata": [
                    "None",
                    "str",
                    "bool",
                    "float"
                ]
            }
        },
        "EmailTokenSubmissionForm.__init__": {
            "name": "__init__",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "portfolio-main/apps/users/mixins.py": {
        "DeviceAuthUserMixin.test_func": {
            "name": "test_func",
            "location": 10,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DeviceAuthUserMixin.handle_no_permission": {
            "name": "handle_no_permission",
            "location": 13,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "EmailAuthUserMixin.test_func": {
            "name": "test_func",
            "location": 19,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "EmailAuthUserMixin.handle_no_permission": {
            "name": "handle_no_permission",
            "location": 22,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TwoFactorAuthUserMixin.test_func": {
            "name": "test_func",
            "location": 28,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TwoFactorAuthUserMixin.handle_no_permission": {
            "name": "handle_no_permission",
            "location": 31,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "portfolio-main/apps/users/models.py": {
        "Profile.__str__": {
            "name": "__str__",
            "location": 34,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "Profile.initials": {
            "name": "initials",
            "location": 38,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Profile.join_year": {
            "name": "join_year",
            "location": 43,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Profile.display_name": {
            "name": "display_name",
            "location": 47,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Profile.get_absolute_url": {
            "name": "get_absolute_url",
            "location": 53,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Profile.save": {
            "name": "save",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Profile.is_two_factor_auth_by_token": {
            "name": "is_two_factor_auth_by_token",
            "location": 62,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Profile.is_two_factor_auth_by_email": {
            "name": "is_two_factor_auth_by_email",
            "location": 67,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Profile.is_two_factor_authenticated": {
            "name": "is_two_factor_authenticated",
            "location": 79,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "EmailToken.__repr__": {
            "name": "__repr__",
            "location": 101,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "EmailToken.__str__": {
            "name": "__str__",
            "location": 104,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "EmailToken.save": {
            "name": "save",
            "location": 107,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "EmailToken.is_challenge_within_expiry": {
            "name": "is_challenge_within_expiry",
            "location": 116,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "EmailToken.is_token_within_expiry": {
            "name": "is_token_within_expiry",
            "location": 125,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "portfolio-main/apps/users/signals.py": {
        "create_and_save_profile": {
            "name": "create_and_save_profile",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "sender": [
                    "bool",
                    "typing.Callable[, ]",
                    "typing.Any",
                    "None"
                ],
                "instance": [
                    "int",
                    "typing.Hashable"
                ],
                "created": [
                    "bool",
                    "typing.Callable[, ]",
                    "typing.Any",
                    "None"
                ]
            }
        }
    },
    "portfolio-main/apps/users/urls.py": {},
    "portfolio-main/apps/users/utils.py": {
        "generate_token": {
            "name": "generate_token",
            "location": 10,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "get_challenge_expiration_timestamp": {
            "name": "get_challenge_expiration_timestamp",
            "location": 15,
            "return": [],
            "arguments": {}
        },
        "get_token_expiration_timestamp": {
            "name": "get_token_expiration_timestamp",
            "location": 23,
            "return": [],
            "arguments": {}
        },
        "token_validator": {
            "name": "token_validator",
            "location": 31,
            "return": [],
            "arguments": {}
        }
    },
    "portfolio-main/apps/users/views.py": {
        "UserRegisterView.user_exists": {
            "name": "user_exists",
            "location": 44,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "form": [
                    "typing.IO",
                    "str",
                    "bool"
                ]
            }
        },
        "UserRegisterView.form_valid": {
            "name": "form_valid",
            "location": 50,
            "return": [
                "str",
                "None",
                "dict[str, str]",
                "list[typing.Union[typing.Any,typing.Any,typing.Any]]"
            ],
            "arguments": {
                "self": [],
                "form": []
            }
        },
        "UserRegisterView.form_invalid": {
            "name": "form_invalid",
            "location": 60,
            "return": [],
            "arguments": {
                "self": [],
                "form": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ]
            }
        },
        "UserLoginView._add_user_does_not_exist_message": {
            "name": "_add_user_does_not_exist_message",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserLoginView._add_incorrect_password_message": {
            "name": "_add_incorrect_password_message",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserLoginView.retrieve_token_from_db": {
            "name": "retrieve_token_from_db",
            "location": 91,
            "return": [],
            "arguments": {
                "self": [],
                "user": [
                    "dict[, ]"
                ]
            }
        },
        "UserLoginView.build_html_content": {
            "name": "build_html_content",
            "location": 95,
            "return": [],
            "arguments": {
                "self": [],
                "user": [
                    "str",
                    "dict[str, typing.Any]",
                    "dict[str, str]",
                    "typing.Mapping",
                    "None"
                ],
                "token": [
                    "str",
                    "dict[str, typing.Any]",
                    "dict[str, str]",
                    "typing.Mapping",
                    "None"
                ]
            }
        },
        "UserLoginView.email_two_factor_token": {
            "name": "email_two_factor_token",
            "location": 105,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "user": [
                    "list[list[int]]"
                ],
                "token": [
                    "list[list[int]]"
                ]
            }
        },
        "UserLoginView._get_credentials": {
            "name": "_get_credentials",
            "location": 119,
            "return": [
                "dict[typing.Text, ]"
            ],
            "arguments": {
                "self": [],
                "user": []
            }
        },
        "UserLoginView.is_password_correct": {
            "name": "is_password_correct",
            "location": 126,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "user": [
                    "str"
                ],
                "credentials": [
                    "str"
                ]
            }
        },
        "UserLoginView.authenticate_user": {
            "name": "authenticate_user",
            "location": 130,
            "return": [],
            "arguments": {
                "self": [],
                "user": [
                    "list[P]",
                    "str"
                ]
            }
        },
        "UserLoginView.login_user": {
            "name": "login_user",
            "location": 143,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "user": [
                    "bool"
                ]
            }
        },
        "UserLoginView.handle_email_auth_user": {
            "name": "handle_email_auth_user",
            "location": 148,
            "return": [],
            "arguments": {
                "self": [],
                "user": [
                    "str",
                    "None",
                    "int"
                ]
            }
        },
        "UserLoginView.post": {
            "name": "post",
            "location": 158,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UserSetupQRView.get_method": {
            "name": "get_method",
            "location": 214,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserSetupEmailView.store_token_in_db": {
            "name": "store_token_in_db",
            "location": 222,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "user": [],
                "token": []
            }
        },
        "UserSetupEmailView.build_html_content": {
            "name": "build_html_content",
            "location": 233,
            "return": [],
            "arguments": {
                "self": [],
                "user": [
                    "str"
                ],
                "token": [
                    "str"
                ]
            }
        },
        "UserSetupEmailView.email_two_factor_token": {
            "name": "email_two_factor_token",
            "location": 244,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "user": [
                    "list[list[int]]"
                ],
                "token": [
                    "list[list[int]]"
                ]
            }
        },
        "UserSetupEmailView.post": {
            "name": "post",
            "location": 259,
            "return": [],
            "arguments": {
                "self": [],
                "request": []
            }
        },
        "UserSetupEmailTokenView.get_context_data": {
            "name": "get_context_data",
            "location": 273,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UserSetupEmailTokenView.get_email_token": {
            "name": "get_email_token",
            "location": 286,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UserSetupEmailTokenView.does_challenge_pass": {
            "name": "does_challenge_pass",
            "location": 290,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "token_returned": [
                    "str",
                    "typing.Callable[, ]",
                    "typing.Type",
                    "set[str]"
                ]
            }
        },
        "UserSetupEmailTokenView.update_db": {
            "name": "update_db",
            "location": 295,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "email_token": []
            }
        },
        "UserSetupEmailTokenView.build_html_content": {
            "name": "build_html_content",
            "location": 303,
            "return": [],
            "arguments": {
                "self": [],
                "user": [
                    "str"
                ],
                "token": [
                    "str"
                ]
            }
        },
        "UserSetupEmailTokenView.email_two_factor_success": {
            "name": "email_two_factor_success",
            "location": 314,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "user": [
                    "str",
                    "bool"
                ],
                "token": [
                    "str",
                    "bool"
                ]
            }
        },
        "UserSetupEmailTokenView.populate_message": {
            "name": "populate_message",
            "location": 328,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "challenge_passes": [
                    "typing.Callable[list[], list[str]]",
                    "typing.Sequence[tuple[typing.Union[str,int]]]",
                    "list[dict[str, typing.Any]]"
                ],
                "token_within_expiry": [
                    "typing.Callable[list[], list[str]]",
                    "typing.Sequence[tuple[typing.Union[str,int]]]",
                    "list[dict[str, typing.Any]]"
                ]
            }
        },
        "UserSetupEmailTokenView.form_valid": {
            "name": "form_valid",
            "location": 347,
            "return": [],
            "arguments": {
                "self": [],
                "form": [
                    "str",
                    "bytes",
                    "int"
                ]
            }
        },
        "ProfileView.get_object": {
            "name": "get_object",
            "location": 363,
            "return": [],
            "arguments": {
                "self": [],
                "queryset": [
                    "None",
                    "bool",
                    "str",
                    "dict[, ]"
                ]
            }
        },
        "ProfileUpdateView.test_func": {
            "name": "test_func",
            "location": 375,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ProfileUpdateView.get_instances": {
            "name": "get_instances",
            "location": 378,
            "return": [
                "dict[typing.Text, ]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ProfileUpdateView.get_success_url": {
            "name": "get_success_url",
            "location": 384,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "portfolio-main/apps/users/__init__.py": {},
    "portfolio-main/apps/users/migrations/0001_initial.py": {},
    "portfolio-main/apps/users/migrations/0002_auto_20200929_1338.py": {},
    "portfolio-main/apps/users/migrations/0003_auto_20201001_2136.py": {},
    "portfolio-main/apps/users/migrations/0004_generate_email_token_model.py": {},
    "portfolio-main/apps/users/migrations/__init__.py": {},
    "portfolio-main/apps/users/tests/test_forms.py": {
        "TestUserRegisterForm.test_form_tests_for_all_fields": {
            "name": "test_form_tests_for_all_fields",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUserRegisterForm.test_form_is_valid": {
            "name": "test_form_is_valid",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUserRegisterForm.test_empty_form_is_invalid": {
            "name": "test_empty_form_is_invalid",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUserRegisterForm.test_invalid_email_means_invalid_form": {
            "name": "test_invalid_email_means_invalid_form",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUserRegisterForm.test_username_is_cleaned": {
            "name": "test_username_is_cleaned",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUserUpdateForm.test_form_tests_for_all_fields": {
            "name": "test_form_tests_for_all_fields",
            "location": 95,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUserUpdateForm.test_empty_form_is_invalid": {
            "name": "test_empty_form_is_invalid",
            "location": 102,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUserUpdateForm.test_form_is_valid": {
            "name": "test_form_is_valid",
            "location": 110,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUserUpdateForm.test_username_is_cleaned": {
            "name": "test_username_is_cleaned",
            "location": 115,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestProfileUpdateForm.good_data_with_image": {
            "name": "good_data_with_image",
            "location": 139,
            "return": [
                "dict[typing.Text, typing.Union[list[str],str,None,int]]"
            ],
            "arguments": {
                "test_image": [
                    "list[str]",
                    "str",
                    "None"
                ]
            }
        },
        "TestProfileUpdateForm.test_form_tests_for_all_fields": {
            "name": "test_form_tests_for_all_fields",
            "location": 146,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestProfileUpdateForm.test_empty_form_is_invalid": {
            "name": "test_empty_form_is_invalid",
            "location": 153,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestProfileUpdateForm.test_form_without_image_is_valid": {
            "name": "test_form_without_image_is_valid",
            "location": 161,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestProfileUpdateForm.test_form_with_image_is_valid": {
            "name": "test_form_with_image_is_valid",
            "location": 166,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUserTOTPDeviceForm.test_token_field_contains_extra_attrs": {
            "name": "test_token_field_contains_extra_attrs",
            "location": 174,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "device_auth_user": [
                    "str",
                    "list[tuple[typing.Union[bool,typing.Any]]]"
                ]
            }
        },
        "TestEmailTokenSubmissionForm.test_form_is_valid": {
            "name": "test_form_is_valid",
            "location": 194,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEmailTokenSubmissionForm.test_form_is_invalid_with_string_submission": {
            "name": "test_form_is_invalid_with_string_submission",
            "location": 199,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEmailTokenSubmissionForm.test_token_field_contains_desired_attrs": {
            "name": "test_token_field_contains_desired_attrs",
            "location": 204,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "portfolio-main/apps/users/tests/test_mixins.py": {
        "TestDeviceAuthUserMixin.test_device_auth_user_passes_test_func": {
            "name": "test_device_auth_user_passes_test_func",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "rf": [],
                "device_auth_user": [
                    "str",
                    "bool",
                    "None"
                ]
            }
        },
        "TestDeviceAuthUserMixin.test_email_auth_user_fails_test_func": {
            "name": "test_email_auth_user_fails_test_func",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "rf": [],
                "email_auth_user": [
                    "str",
                    "typing.Mapping"
                ]
            }
        },
        "TestDeviceAuthUserMixin.test_handle_no_permission": {
            "name": "test_handle_no_permission",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "rf": [],
                "auth_user": [
                    "str",
                    "tuple[typing.Union[str,str]]"
                ]
            }
        },
        "TestEmailAuthUserMixin.test_device_auth_user_fails_test_func": {
            "name": "test_device_auth_user_fails_test_func",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "rf": [],
                "device_auth_user": [
                    "str",
                    "bool",
                    "None"
                ]
            }
        },
        "TestEmailAuthUserMixin.test_email_auth_user_passes_test_func": {
            "name": "test_email_auth_user_passes_test_func",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "rf": [],
                "email_auth_user": [
                    "str",
                    "typing.Mapping"
                ]
            }
        },
        "TestEmailAuthUserMixin.test_handle_no_permission": {
            "name": "test_handle_no_permission",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "rf": [],
                "auth_user": [
                    "str",
                    "tuple[typing.Union[str,str]]"
                ]
            }
        },
        "TestTwoFactorAuthUserMixin.test_device_auth_user_passes_test_func": {
            "name": "test_device_auth_user_passes_test_func",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "rf": [],
                "device_auth_user": [
                    "str",
                    "bool",
                    "None"
                ]
            }
        },
        "TestTwoFactorAuthUserMixin.test_email_auth_user_passes_test_func": {
            "name": "test_email_auth_user_passes_test_func",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "rf": [],
                "email_auth_user": [
                    "str",
                    "typing.Mapping"
                ]
            }
        },
        "TestTwoFactorAuthUserMixin.test_handle_no_permission": {
            "name": "test_handle_no_permission",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "rf": [],
                "auth_user": [
                    "str",
                    "tuple[typing.Union[str,str]]"
                ]
            }
        }
    },
    "portfolio-main/apps/users/tests/test_models.py": {
        "TestProfile.test_user_is_onetoonefield": {
            "name": "test_user_is_onetoonefield",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "random_user": [
                    "dict[, ]",
                    "str"
                ]
            }
        },
        "TestProfile.test_slug_is_slugfield": {
            "name": "test_slug_is_slugfield",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "random_user": [
                    "dict[, ]",
                    "str"
                ]
            }
        },
        "TestProfile.test_slugification": {
            "name": "test_slugification",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "random_user": []
            }
        },
        "TestProfile.test_author_view_is_integerfield": {
            "name": "test_author_view_is_integerfield",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "random_user": []
            }
        },
        "TestProfile.test_profile_picture_is_imagefield": {
            "name": "test_profile_picture_is_imagefield",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "random_user": []
            }
        },
        "TestProfile.test_created_date_is_datetimefield": {
            "name": "test_created_date_is_datetimefield",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "random_user": [
                    "int"
                ]
            }
        },
        "TestProfile.test_updated_date_is_imagefield": {
            "name": "test_updated_date_is_imagefield",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "random_user": [
                    "int",
                    "dict[, ]",
                    "str"
                ]
            }
        },
        "TestProfile.test_profile_str": {
            "name": "test_profile_str",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fixed_user": []
            }
        },
        "TestProfile.test_initials": {
            "name": "test_initials",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fixed_user": [
                    "typing.Callable[List,bool, None]"
                ]
            }
        },
        "TestProfile.test_join_year": {
            "name": "test_join_year",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "random_user": []
            }
        },
        "TestProfile.test_display_name_is_username": {
            "name": "test_display_name_is_username",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "random_user": [
                    "bool",
                    "str"
                ]
            }
        },
        "TestProfile.test_display_name_is_full_name": {
            "name": "test_display_name_is_full_name",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "random_user": [
                    "bool"
                ]
            }
        },
        "TestProfile.test_get_absolute_url": {
            "name": "test_get_absolute_url",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "random_user": [
                    "str",
                    "int",
                    "None"
                ]
            }
        }
    },
    "portfolio-main/apps/users/tests/test_urls.py": {
        "TestUserURLs.test_register": {
            "name": "test_register",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUserURLs.test_profile_screen": {
            "name": "test_profile_screen",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUserURLs.test_profile_update_screen": {
            "name": "test_profile_update_screen",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "portfolio-main/apps/users/tests/test_views.py": {
        "TestUserRegisterView.test_auth_user_cannot_access": {
            "name": "test_auth_user_cannot_access",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "rf": [
                    "str"
                ],
                "auth_user": [
                    "str",
                    "tuple[typing.Union[str,str]]"
                ]
            }
        },
        "TestUserRegisterView.test_unauth_user_can_access": {
            "name": "test_unauth_user_can_access",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "rf": [],
                "unauth_user": [
                    "str"
                ]
            }
        },
        "TestUserRegisterView.test_form_valid": {
            "name": "test_form_valid",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "rf": [
                    "str",
                    "bool"
                ],
                "django_user_model": [
                    "str",
                    "int",
                    "dict[str, typing.Any]"
                ],
                "sample_user_data": [
                    "str",
                    "bytes"
                ]
            }
        },
        "TestProfileView.test_unauth_user_is_redirected_to_login": {
            "name": "test_unauth_user_is_redirected_to_login",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "rf": [],
                "unauth_user": [
                    "str"
                ]
            }
        },
        "TestProfileView.test_auth_user_is_redirected_to_login": {
            "name": "test_auth_user_is_redirected_to_login",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "rf": [],
                "auth_user": [
                    "tuple[typing.Union[str,str]]",
                    "str"
                ]
            }
        },
        "TestProfileView.test_device_auth_user_cannot_access_inexistent_profile": {
            "name": "test_device_auth_user_cannot_access_inexistent_profile",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "rf": [],
                "device_auth_user": [
                    "str",
                    "bool"
                ]
            }
        },
        "TestProfileView.test_email_auth_user_cannot_access_inexistent_profile": {
            "name": "test_email_auth_user_cannot_access_inexistent_profile",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "rf": [
                    "dict[str, typing.Any]"
                ],
                "email_auth_user": [
                    "str",
                    "typing.Mapping"
                ]
            }
        },
        "TestProfileUpdateView.test_auth_user_can_access": {
            "name": "test_auth_user_can_access",
            "location": 108,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "rf": [],
                "auth_user": [
                    "str"
                ]
            }
        },
        "TestProfileUpdateView.test_unauth_user_cannot_access": {
            "name": "test_unauth_user_cannot_access",
            "location": 120,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "rf": [],
                "auth_user": [],
                "unauth_user": [
                    "tuple[typing.Union[str,str]]",
                    "str"
                ]
            }
        },
        "TestProfileUpdateView.test_another_user_cannot_access": {
            "name": "test_another_user_cannot_access",
            "location": 133,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "rf": [],
                "auth_user": [
                    "str"
                ],
                "li_sec_user": [
                    "tuple[typing.Union[str,str]]"
                ]
            }
        },
        "TestAuthViews.test_all_users_can_login": {
            "name": "test_all_users_can_login",
            "location": 151,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "rf": [
                    "dict[, ]"
                ],
                "all_users": []
            }
        },
        "TestAuthViews.test_all_users_can_password_reset": {
            "name": "test_all_users_can_password_reset",
            "location": 159,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "rf": [
                    "dict[, ]"
                ],
                "all_users": [
                    "None"
                ]
            }
        },
        "TestAuthViews.test_all_users_can_access_password_reset_done": {
            "name": "test_all_users_can_access_password_reset_done",
            "location": 167,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "rf": [
                    "dict[, ]"
                ],
                "all_users": [
                    "None"
                ]
            }
        },
        "TestAuthViews.test_all_users_can_access_password_reset_complete": {
            "name": "test_all_users_can_access_password_reset_complete",
            "location": 177,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "rf": [],
                "all_users": []
            }
        }
    },
    "portfolio-main/apps/users/tests/__init__.py": {},
    "portfolio-main/docker/prod/gunicorn/conf.py": {}
}
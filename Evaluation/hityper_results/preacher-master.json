{
    "preacher-master/docs/conf.py": {},
    "preacher-master/examples/server.py": {
        "json": {
            "name": "json",
            "location": 14,
            "return": [],
            "arguments": {}
        },
        "echo": {
            "name": "echo",
            "location": 31,
            "return": [],
            "arguments": {}
        },
        "not_found": {
            "name": "not_found",
            "location": 45,
            "return": [
                "tuple[int]"
            ],
            "arguments": {}
        },
        "xml": {
            "name": "xml",
            "location": 50,
            "return": [
                "typing.Pattern"
            ],
            "arguments": {}
        },
        "later": {
            "name": "later",
            "location": 57,
            "return": [],
            "arguments": {
                "seconds": []
            }
        },
        "text": {
            "name": "text",
            "location": 63,
            "return": [
                "typing.Pattern"
            ],
            "arguments": {}
        },
        "binary": {
            "name": "binary",
            "location": 70,
            "return": [],
            "arguments": {}
        },
        "sleep": {
            "name": "sleep",
            "location": 77,
            "return": [
                "typing.Pattern"
            ],
            "arguments": {
                "seconds": [
                    "float",
                    "int",
                    "tuple[typing.Union[float,float]]",
                    "str"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "preacher-master/examples/plugin/custom_matcher.py": {
        "preacher_add_matchers": {
            "name": "preacher_add_matchers",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "compiler": []
            }
        },
        "IsEven._matches": {
            "name": "_matches",
            "location": 18,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "float"
                ]
            }
        },
        "IsEven.describe_to": {
            "name": "describe_to",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "description": []
            }
        },
        "IsMultipleOf.__init__": {
            "name": "__init__",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "base": [
                    "int",
                    "str"
                ]
            }
        },
        "IsMultipleOf._matches": {
            "name": "_matches",
            "location": 35,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "typing.Iterable[typing.Any]"
                ]
            }
        },
        "IsMultipleOf.describe_to": {
            "name": "describe_to",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "description": [
                    "str",
                    "set[]",
                    "list[int]",
                    "dict[str, list[str]]",
                    "list[str]"
                ]
            }
        }
    },
    "preacher-master/examples/plugin/setup.py": {},
    "preacher-master/preacher/__init__.py": {},
    "preacher-master/preacher/app/__init__.py": {},
    "preacher-master/preacher/app/cli/app.py": {
        "app": {
            "name": "app",
            "location": 21,
            "return": [
                "int"
            ],
            "arguments": {
                "paths": [
                    "tuple[]"
                ],
                "base_url": [
                    "typing.Text"
                ],
                "arguments": [
                    "None",
                    "int",
                    "str",
                    "float",
                    "typing.Sequence[str]"
                ],
                "level": [],
                "report_dir": [
                    "None",
                    "int",
                    "str",
                    "float",
                    "typing.Sequence[str]"
                ],
                "delay": [
                    "float"
                ],
                "retry": [
                    "int"
                ],
                "timeout": [
                    "None",
                    "int",
                    "str",
                    "float",
                    "typing.Sequence[str]"
                ],
                "concurrency": [
                    "int"
                ],
                "executor_factory": [
                    "None",
                    "int",
                    "str",
                    "float",
                    "typing.Sequence[str]"
                ],
                "plugins": [
                    "tuple[]"
                ],
                "verbosity": [
                    "int"
                ]
            }
        }
    },
    "preacher-master/preacher/app/cli/executor.py": {
        "ExecutorFactory.create": {
            "name": "create",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "concurrency": [
                    "str",
                    "typing.Iterator",
                    "bool",
                    "float"
                ]
            }
        },
        "_ProcessPoolFactory.create": {
            "name": "create",
            "location": 16,
            "return": [
                "ProcessPoolExecutor"
            ],
            "arguments": {
                "self": [],
                "concurrency": [
                    "bool",
                    "float"
                ]
            }
        },
        "_ThreadPoolFactory.create": {
            "name": "create",
            "location": 21,
            "return": [
                "ThreadPoolExecutor"
            ],
            "arguments": {
                "self": [],
                "concurrency": [
                    "bool",
                    "float"
                ]
            }
        }
    },
    "preacher-master/preacher/app/cli/logging.py": {
        "_default": {
            "name": "_default",
            "location": 9,
            "return": [
                "str",
                "bool",
                "typing.Any",
                "None"
            ],
            "arguments": {
                "message": [
                    "str",
                    "bool",
                    "typing.Any",
                    "None"
                ]
            }
        },
        "_info": {
            "name": "_info",
            "location": 13,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "message": [
                    "str",
                    "bytes",
                    "typing.Callable[bytes, bytes]"
                ]
            }
        },
        "_warning": {
            "name": "_warning",
            "location": 17,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "message": [
                    "str",
                    "dict[, ]",
                    "bytes",
                    "typing.Callable[bytes, bytes]"
                ]
            }
        },
        "_error": {
            "name": "_error",
            "location": 21,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "message": [
                    "str",
                    "bytes",
                    "bool"
                ]
            }
        },
        "_critical": {
            "name": "_critical",
            "location": 25,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "message": [
                    "str",
                    "bytes",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "create_system_logger": {
            "name": "create_system_logger",
            "location": 46,
            "return": [],
            "arguments": {
                "verbosity": [
                    "str",
                    "int",
                    "dict[, ]"
                ]
            }
        },
        "_verbosity_to_logging_level": {
            "name": "_verbosity_to_logging_level",
            "location": 57,
            "return": [],
            "arguments": {
                "verbosity": [
                    "int"
                ]
            }
        },
        "ColoredFormatter.__init__": {
            "name": "__init__",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ColoredFormatter.format": {
            "name": "format",
            "location": 41,
            "return": [],
            "arguments": {
                "self": [],
                "record": [
                    "str",
                    "dict[, ]"
                ]
            }
        }
    },
    "preacher-master/preacher/app/cli/main.py": {
        "main": {
            "name": "main",
            "location": 144,
            "return": [
                "None"
            ],
            "arguments": {
                "paths": [
                    "str",
                    "int"
                ],
                "base_url": [
                    "str",
                    "int"
                ],
                "arguments": [
                    "str",
                    "int"
                ],
                "level": [
                    "str",
                    "int"
                ],
                "report_dir": [
                    "str",
                    "int"
                ],
                "retry": [
                    "str",
                    "int"
                ],
                "delay": [
                    "str",
                    "int"
                ],
                "timeout": [
                    "str",
                    "int"
                ],
                "concurrency": [
                    "str",
                    "int"
                ],
                "executor_factory": [
                    "str",
                    "int"
                ],
                "plugins": [
                    "str",
                    "int"
                ],
                "verbosity": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "preacher-master/preacher/app/cli/option.py": {
        "pairs_callback": {
            "name": "pairs_callback",
            "location": 99,
            "return": [],
            "arguments": {
                "_context": [
                    "bool",
                    "typing.Iterable[str]",
                    "typing.Callable[, ]",
                    "str"
                ],
                "_option_or_parameter": [
                    "bool",
                    "typing.Iterable[str]",
                    "typing.Callable[, ]",
                    "str"
                ],
                "value": [
                    "bool",
                    "typing.Callable[T, None]",
                    "str"
                ]
            }
        },
        "positive_float_callback": {
            "name": "positive_float_callback",
            "location": 107,
            "return": [
                "None",
                "float",
                "str",
                "typing.Sequence[typing.Any]",
                "typing.Sequence[str]",
                "int"
            ],
            "arguments": {
                "_context": [
                    "bool",
                    "typing.Iterable[str]",
                    "typing.Callable[, ]",
                    "str"
                ],
                "_option_or_parameter": [
                    "bool",
                    "typing.Iterable[str]",
                    "typing.Callable[, ]",
                    "str"
                ],
                "value": [
                    "float",
                    "str",
                    "typing.Sequence[typing.Any]",
                    "typing.Sequence[str]",
                    "int"
                ]
            }
        },
        "_parse_argument": {
            "name": "_parse_argument",
            "location": 120,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "value": [
                    "str",
                    "int",
                    "None",
                    "dict[, ]",
                    "list[]",
                    "float"
                ]
            }
        },
        "Level.__str__": {
            "name": "__str__",
            "location": 31,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ArgumentType.convert": {
            "name": "convert",
            "location": 47,
            "return": [],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "None",
                    "int"
                ],
                "param": [
                    "str",
                    "None",
                    "int"
                ],
                "ctx": [
                    "str",
                    "None",
                    "int"
                ]
            }
        },
        "ArgumentType.split_envvar_value": {
            "name": "split_envvar_value",
            "location": 51,
            "return": [],
            "arguments": {
                "self": [],
                "rv": [
                    "str",
                    "list[]"
                ]
            }
        },
        "LevelType.get_metavar": {
            "name": "get_metavar",
            "location": 60,
            "return": [],
            "arguments": {
                "self": [],
                "param": [
                    "str",
                    "float"
                ]
            }
        },
        "LevelType.get_missing_message": {
            "name": "get_missing_message",
            "location": 63,
            "return": [],
            "arguments": {
                "self": [],
                "param": [
                    "str",
                    "float"
                ]
            }
        },
        "LevelType.convert": {
            "name": "convert",
            "location": 66,
            "return": [
                "Status"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "float",
                    "typing.Type"
                ],
                "param": [
                    "str",
                    "bool",
                    "None",
                    "typing.Type"
                ],
                "ctx": [
                    "str",
                    "bool",
                    "None",
                    "typing.Type"
                ]
            }
        },
        "ExecutorFactoryType.get_metavar": {
            "name": "get_metavar",
            "location": 81,
            "return": [],
            "arguments": {
                "self": [],
                "param": [
                    "str",
                    "float"
                ]
            }
        },
        "ExecutorFactoryType.get_missing_message": {
            "name": "get_missing_message",
            "location": 84,
            "return": [],
            "arguments": {
                "self": [],
                "param": [
                    "str",
                    "float"
                ]
            }
        },
        "ExecutorFactoryType.convert": {
            "name": "convert",
            "location": 87,
            "return": [
                "ExecutorFactory"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "None",
                    "int"
                ],
                "param": [
                    "str",
                    "int",
                    "None",
                    "bytes"
                ],
                "ctx": [
                    "str",
                    "int",
                    "None",
                    "bytes"
                ]
            }
        }
    },
    "preacher-master/preacher/app/cli/__init__.py": {},
    "preacher-master/preacher/compilation/argument.py": {
        "_inject_arguments": {
            "name": "_inject_arguments",
            "location": 22,
            "return": [
                "str",
                "bool",
                "Argument"
            ],
            "arguments": {
                "obj": [
                    "str",
                    "bool"
                ],
                "arguments": [
                    "bool",
                    "str"
                ]
            }
        },
        "inject_arguments": {
            "name": "inject_arguments",
            "location": 28,
            "return": [],
            "arguments": {
                "obj": [
                    "str"
                ],
                "arguments": [
                    "None",
                    "str"
                ]
            }
        },
        "Argument.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "int",
                    "list[str]",
                    "bytes"
                ]
            }
        },
        "Argument.key": {
            "name": "key",
            "location": 14,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Argument.apply_arguments": {
            "name": "apply_arguments",
            "location": 17,
            "return": [],
            "arguments": {
                "self": [],
                "arguments": [
                    "None",
                    "dict[str, typing.Any]",
                    "dict[, ]",
                    "dict[str, int]"
                ]
            }
        }
    },
    "preacher-master/preacher/compilation/datetime.py": {
        "compile_datetime_format": {
            "name": "compile_datetime_format",
            "location": 12,
            "return": [
                "StrftimeFormat"
            ],
            "arguments": {
                "obj": [
                    "str",
                    "typing.Sequence[str]",
                    "typing.Iterable[bytes]",
                    "int"
                ]
            }
        },
        "compile_timedelta": {
            "name": "compile_timedelta",
            "location": 25,
            "return": [],
            "arguments": {
                "obj": [
                    "str"
                ]
            }
        }
    },
    "preacher-master/preacher/compilation/error.py": {
        "render_path": {
            "name": "render_path",
            "location": 30,
            "return": [
                "str"
            ],
            "arguments": {
                "path": [
                    "str"
                ]
            }
        },
        "on_key": {
            "name": "on_key",
            "location": 75,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "key": [
                    "str",
                    "typing.Type",
                    "int",
                    "typing.Callable[KT, VT]",
                    "dict[str, str]"
                ]
            }
        },
        "on_index": {
            "name": "on_index",
            "location": 83,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "index": [
                    "typing.Callable[None, None]",
                    "str",
                    "int",
                    "tuple[typing.Union[int,int]]"
                ]
            }
        },
        "IndexedNode.__str__": {
            "name": "__str__",
            "location": 14,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "NamedNode.__str__": {
            "name": "__str__",
            "location": 22,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "CompilationError.__init__": {
            "name": "__init__",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "list[dict[str, typing.Any]]",
                    "list[int]",
                    "list[T]",
                    "list[]",
                    "str"
                ],
                "node": [
                    "None",
                    "list[dict[str, typing.Any]]",
                    "list[int]",
                    "list[T]",
                    "list[]",
                    "str"
                ],
                "child": [
                    "None",
                    "list[dict[str, typing.Any]]",
                    "list[int]",
                    "list[T]",
                    "list[]",
                    "str"
                ],
                "cause": [
                    "None",
                    "list[dict[str, typing.Any]]",
                    "list[int]",
                    "list[T]",
                    "list[]",
                    "str"
                ]
            }
        },
        "CompilationError.path": {
            "name": "path",
            "location": 50,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "CompilationError.render_path": {
            "name": "render_path",
            "location": 56,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CompilationError.on_node": {
            "name": "on_node",
            "location": 59,
            "return": [
                "CompilationError"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "str",
                    "list[]",
                    "bytes"
                ]
            }
        },
        "CompilationError.__str__": {
            "name": "__str__",
            "location": 66,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "preacher-master/preacher/compilation/parameter.py": {
        "compile_parameter": {
            "name": "compile_parameter",
            "location": 18,
            "return": [
                "Parameter"
            ],
            "arguments": {
                "obj": [
                    "dict[, ]",
                    "dict[str, str]",
                    "dict[str, float]"
                ]
            }
        }
    },
    "preacher-master/preacher/compilation/__init__.py": {},
    "preacher-master/preacher/compilation/extraction/extraction.py": {
        "_select_multiple": {
            "name": "_select_multiple",
            "location": 57,
            "return": [],
            "arguments": {
                "options": [
                    "dict[str, typing.Any]"
                ]
            }
        },
        "_select_cast": {
            "name": "_select_cast",
            "location": 63,
            "return": [
                "None",
                "int",
                "float",
                "str"
            ],
            "arguments": {
                "options": [
                    "dict[str, typing.Any]",
                    "dict[, ]"
                ]
            }
        },
        "compile_jq": {
            "name": "compile_jq",
            "location": 77,
            "return": [
                "JqExtractor"
            ],
            "arguments": {
                "query": [
                    "str",
                    "list[dict[str, typing.Any]]",
                    "list[str]",
                    "dict[, ]",
                    "dict[str, typing.Any]"
                ],
                "options": [
                    "dict[, ]",
                    "dict[str, dict[str, typing.Any]]",
                    "str",
                    "None"
                ]
            }
        },
        "_ensure_str_on_key": {
            "name": "_ensure_str_on_key",
            "location": 83,
            "return": [],
            "arguments": {
                "key": [
                    "str",
                    "dict[, ]"
                ],
                "obj": [
                    "str",
                    "bytes"
                ]
            }
        },
        "_select_namespaces": {
            "name": "_select_namespaces",
            "location": 88,
            "return": [
                "dict[, ]"
            ],
            "arguments": {
                "options": [
                    "dict[str, typing.Any]",
                    "dict[, ]"
                ]
            }
        },
        "compile_xpath": {
            "name": "compile_xpath",
            "location": 95,
            "return": [
                "XPathExtractor"
            ],
            "arguments": {
                "query": [
                    "str",
                    "None",
                    "typing.Iterable[str]"
                ],
                "options": [
                    "int",
                    "dict[, ]",
                    "str",
                    "None",
                    "dict[str, int]"
                ]
            }
        },
        "compile_key": {
            "name": "compile_key",
            "location": 103,
            "return": [
                "KeyExtractor"
            ],
            "arguments": {
                "query": [
                    "str",
                    "list[str]",
                    "None"
                ],
                "options": [
                    "dict[, ]",
                    "bool",
                    "dict[str, typing.Any]",
                    "dict[str, str]",
                    "str"
                ]
            }
        },
        "add_default_extractions": {
            "name": "add_default_extractions",
            "location": 109,
            "return": [
                "None"
            ],
            "arguments": {
                "compiler": [
                    "dict[, ]",
                    "typing.Any",
                    "None"
                ]
            }
        },
        "ExtractionCompiler.__init__": {
            "name": "__init__",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ExtractionCompiler.add_factory": {
            "name": "add_factory",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "typing.Hashable",
                    "str",
                    "int",
                    "dict[str, str]"
                ],
                "factory": [
                    "typing.Hashable",
                    "str",
                    "int",
                    "dict[str, str]"
                ]
            }
        },
        "ExtractionCompiler.compile": {
            "name": "compile",
            "location": 36,
            "return": [],
            "arguments": {
                "self": [],
                "obj": [
                    "typing.Callable[..., collections.abc.Awaitable[]]",
                    "dict[, ]"
                ]
            }
        }
    },
    "preacher-master/preacher/compilation/extraction/factory.py": {
        "create_extraction_compiler": {
            "name": "create_extraction_compiler",
            "location": 10,
            "return": [
                "ExtractionCompiler"
            ],
            "arguments": {
                "plugin_manager": [
                    "None",
                    "dict[str, typing.Any]"
                ],
                "logger": [
                    "None",
                    "str",
                    "int",
                    "tuple[tuple[typing.Union[str,...]]]",
                    "list[str]"
                ]
            }
        }
    },
    "preacher-master/preacher/compilation/extraction/__init__.py": {},
    "preacher-master/preacher/compilation/request/factory.py": {
        "create_request_compiler": {
            "name": "create_request_compiler",
            "location": 5,
            "return": [
                "RequestCompiler"
            ],
            "arguments": {}
        }
    },
    "preacher-master/preacher/compilation/request/request.py": {
        "_compile_method": {
            "name": "_compile_method",
            "location": 129,
            "return": [
                "dict[str, str]",
                "dict[str, typing.Union[int,str]]",
                "typing.Type",
                "typing.Pattern"
            ],
            "arguments": {
                "obj": [
                    "dict[, ]",
                    "dict[str, typing.Any]",
                    "str",
                    "typing.Any",
                    "None",
                    "int"
                ]
            }
        },
        "_compile_headers": {
            "name": "_compile_headers",
            "location": 138,
            "return": [],
            "arguments": {
                "obj": [
                    "dict[str, str]",
                    "bool",
                    "str",
                    "None"
                ]
            }
        },
        "_compile_header_item": {
            "name": "_compile_header_item",
            "location": 144,
            "return": [
                "None",
                "tuple[]"
            ],
            "arguments": {
                "key": [
                    "str",
                    "float"
                ],
                "value": [
                    "str",
                    "None"
                ]
            }
        },
        "RequestCompiled.replace": {
            "name": "replace",
            "location": 33,
            "return": [
                "RequestCompiled"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "str",
                    "dict[, ]",
                    "Exception",
                    "None"
                ]
            }
        },
        "RequestCompiled.fix": {
            "name": "fix",
            "location": 42,
            "return": [
                "Request"
            ],
            "arguments": {
                "self": []
            }
        },
        "RequestCompiler.__init__": {
            "name": "__init__",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "body": [
                    "int",
                    "str",
                    "None",
                    "float",
                    "list[str]",
                    "list[int]",
                    "typing.Callable[, ]"
                ],
                "default": [
                    "None",
                    "str",
                    "int",
                    "float"
                ]
            }
        },
        "RequestCompiler.compile": {
            "name": "compile",
            "location": 61,
            "return": [],
            "arguments": {
                "self": [],
                "obj": [
                    "str"
                ],
                "arguments": [
                    "None",
                    "list[]",
                    "str",
                    "typing.Callable[, ]",
                    "tuple[]",
                    "list[str]"
                ]
            }
        },
        "RequestCompiler.of_default": {
            "name": "of_default",
            "location": 121,
            "return": [
                "RequestCompiler"
            ],
            "arguments": {
                "self": [],
                "default": [
                    "dict[str, typing.Any]",
                    "str",
                    "Exception",
                    "bytes"
                ]
            }
        }
    },
    "preacher-master/preacher/compilation/request/request_body.py": {
        "RequestBodyCompiled.replace": {
            "name": "replace",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "list[str]",
                    "int",
                    "float",
                    "typing.AbstractSet"
                ]
            }
        },
        "RequestBodyCompiled.compile_and_replace": {
            "name": "compile_and_replace",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "str"
                ]
            }
        },
        "RequestBodyCompiled.fix": {
            "name": "fix",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UrlencodedRequestBodyCompiled.replace": {
            "name": "replace",
            "location": 41,
            "return": [
                "typing.AbstractSet",
                "int",
                "str"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "typing.AbstractSet",
                    "int",
                    "str"
                ]
            }
        },
        "UrlencodedRequestBodyCompiled.compile_and_replace": {
            "name": "compile_and_replace",
            "location": 49,
            "return": [
                "UrlencodedRequestBodyCompiled",
                "str"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "dict[, ]"
                ]
            }
        },
        "UrlencodedRequestBodyCompiled.fix": {
            "name": "fix",
            "location": 60,
            "return": [
                "UrlencodedRequestBody"
            ],
            "arguments": {
                "self": []
            }
        },
        "JsonRequestBodyCompiled.replace": {
            "name": "replace",
            "location": 68,
            "return": [
                "bool",
                "typing.OrderedDict",
                "dict[str, list[]]",
                "typing.Match",
                "tuple['cirq.Qid']"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "bool",
                    "typing.OrderedDict",
                    "dict[str, list[]]",
                    "typing.Match",
                    "tuple['cirq.Qid']"
                ]
            }
        },
        "JsonRequestBodyCompiled.compile_and_replace": {
            "name": "compile_and_replace",
            "location": 76,
            "return": [
                "JsonRequestBodyCompiled",
                "str"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "str",
                    "list[dict[str, typing.Any]]"
                ]
            }
        },
        "JsonRequestBodyCompiled.fix": {
            "name": "fix",
            "location": 85,
            "return": [
                "JsonRequestBody"
            ],
            "arguments": {
                "self": []
            }
        },
        "RequestBodyCompiler.__init__": {
            "name": "__init__",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "default": [
                    "None",
                    "str",
                    "bool",
                    "dict[str, typing.Any]",
                    "dict[str, str]",
                    "typing.Sequence[str]"
                ]
            }
        },
        "RequestBodyCompiler.compile": {
            "name": "compile",
            "location": 101,
            "return": [],
            "arguments": {
                "self": [],
                "obj": [
                    "typing.Callable[, ]"
                ],
                "arguments": [
                    "None",
                    "str",
                    "tuple[]"
                ]
            }
        },
        "RequestBodyCompiler.of_default": {
            "name": "of_default",
            "location": 135,
            "return": [
                "RequestBodyCompiler"
            ],
            "arguments": {
                "self": [],
                "default": [
                    "str",
                    "bool"
                ]
            }
        }
    },
    "preacher-master/preacher/compilation/request/url_param.py": {
        "compile_url_param_value": {
            "name": "compile_url_param_value",
            "location": 13,
            "return": [
                "Value",
                "None",
                "bool",
                "int",
                "float",
                "str",
                "date"
            ],
            "arguments": {
                "value": [
                    "str",
                    "typing.Type",
                    "tuple[typing.Union[typing.Type,...]]",
                    "None",
                    "int",
                    "float"
                ]
            }
        },
        "compile_url_param": {
            "name": "compile_url_param",
            "location": 32,
            "return": [
                "None",
                "list[]"
            ],
            "arguments": {
                "value": [
                    "dict[str, str]",
                    "None",
                    "dict[, ]",
                    "tuple[typing.Union[str,typing.Any]]",
                    "list[]"
                ]
            }
        },
        "compile_url_params": {
            "name": "compile_url_params",
            "location": 46,
            "return": [
                "dict[, ]"
            ],
            "arguments": {
                "obj": [
                    "bool",
                    "list[dict[str, typing.Any]]"
                ],
                "arguments": [
                    "None",
                    "typing.Callable[, ]"
                ]
            }
        }
    },
    "preacher-master/preacher/compilation/request/__init__.py": {},
    "preacher-master/preacher/compilation/scenario/case.py": {
        "CaseCompiled.replace": {
            "name": "replace",
            "location": 45,
            "return": [
                "CaseCompiled"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "str",
                    "bool",
                    "dict[str, typing.Any]",
                    "typing.Callable[, ]"
                ]
            }
        },
        "CaseCompiled.fix": {
            "name": "fix",
            "location": 55,
            "return": [
                "Case"
            ],
            "arguments": {
                "self": []
            }
        },
        "CaseCompiler.__init__": {
            "name": "__init__",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "bool",
                    "str"
                ],
                "response": [
                    "bool",
                    "str"
                ],
                "description": [
                    "bool",
                    "str"
                ],
                "default": [
                    "None",
                    "str",
                    "dict[, ]",
                    "bool",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "CaseCompiler.compile_fixed": {
            "name": "compile_fixed",
            "location": 79,
            "return": [],
            "arguments": {
                "self": [],
                "obj": [
                    "str",
                    "int"
                ]
            }
        },
        "CaseCompiler.compile_default": {
            "name": "compile_default",
            "location": 92,
            "return": [],
            "arguments": {
                "self": [],
                "obj": [
                    "str",
                    "bool",
                    "list[str]",
                    "float"
                ]
            }
        },
        "CaseCompiler.compile": {
            "name": "compile",
            "location": 106,
            "return": [],
            "arguments": {
                "self": [],
                "obj": [
                    "dict[str, typing.Any]",
                    "str"
                ]
            }
        },
        "CaseCompiler.of_default": {
            "name": "of_default",
            "location": 155,
            "return": [
                "CaseCompiler"
            ],
            "arguments": {
                "self": [],
                "default": [
                    "str",
                    "dict[str, typing.Any]",
                    "bool"
                ]
            }
        }
    },
    "preacher-master/preacher/compilation/scenario/factory.py": {
        "create_scenario_compiler": {
            "name": "create_scenario_compiler",
            "location": 14,
            "return": [
                "ScenarioCompiler"
            ],
            "arguments": {
                "plugin_manager": [
                    "None",
                    "str",
                    "bool"
                ],
                "logger": [
                    "None",
                    "str",
                    "bool"
                ]
            }
        }
    },
    "preacher-master/preacher/compilation/scenario/integration.py": {
        "compile_scenarios": {
            "name": "compile_scenarios",
            "location": 12,
            "return": [],
            "arguments": {
                "objs": [
                    "dict[str, object]",
                    "str",
                    "dict[, ]"
                ],
                "arguments": [
                    "None",
                    "dict[str, object]",
                    "str",
                    "dict[, ]"
                ],
                "plugin_manager": [
                    "None",
                    "dict[str, str]",
                    "list[dict[, ]]"
                ],
                "logger": [
                    "None",
                    "dict[str, str]",
                    "list[dict[, ]]"
                ]
            }
        }
    },
    "preacher-master/preacher/compilation/scenario/scenario.py": {
        "ScenarioCompiler.__init__": {
            "name": "__init__",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "description": [
                    "int",
                    "str"
                ],
                "case": [
                    "int",
                    "str"
                ]
            }
        },
        "ScenarioCompiler.compile": {
            "name": "compile",
            "location": 37,
            "return": [
                "Scenario"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "list[str]",
                    "dict[str, str]",
                    "str",
                    "list[dict[, ]]"
                ],
                "arguments": [
                    "None",
                    "set[]",
                    "float",
                    "str",
                    "tuple[]"
                ]
            }
        },
        "ScenarioCompiler.compile_flattening": {
            "name": "compile_flattening",
            "location": 99,
            "return": [],
            "arguments": {
                "self": [],
                "obj": [
                    "bool",
                    "str",
                    "list[str]",
                    "float"
                ],
                "arguments": [
                    "None",
                    "bool",
                    "list[str]"
                ]
            }
        },
        "ScenarioCompiler._compile_conditions": {
            "name": "_compile_conditions",
            "location": 120,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "str",
                    "typing.Type"
                ]
            }
        },
        "ScenarioCompiler._compile_cases": {
            "name": "_compile_cases",
            "location": 124,
            "return": [
                "list[]"
            ],
            "arguments": {
                "case_compiler": [],
                "obj": []
            }
        },
        "ScenarioCompiler._compile_subscenarios": {
            "name": "_compile_subscenarios",
            "location": 127,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": [],
                "case": [
                    "str",
                    "int",
                    "None",
                    "float"
                ],
                "obj": [
                    "float",
                    "int"
                ],
                "arguments": [
                    "float",
                    "int"
                ]
            }
        },
        "ScenarioCompiler._compile_parameterized": {
            "name": "_compile_parameterized",
            "location": 141,
            "return": [],
            "arguments": {
                "self": [],
                "obj": [
                    "dict[str, str]",
                    "dict[, ]"
                ],
                "arguments": [
                    "dict[, ]"
                ],
                "parameter": [
                    "dict[, ]",
                    "dict[str, typing.Any]",
                    "bytes",
                    "typing.MutableMapping",
                    "bool"
                ]
            }
        }
    },
    "preacher-master/preacher/compilation/scenario/__init__.py": {},
    "preacher-master/preacher/compilation/util/functional.py": {
        "map_compile": {
            "name": "map_compile",
            "location": 13,
            "return": [],
            "arguments": {
                "func": [],
                "items": []
            }
        },
        "run_recursively": {
            "name": "run_recursively",
            "location": 19,
            "return": [],
            "arguments": {
                "func": [],
                "obj": []
            }
        },
        "compile_flattening": {
            "name": "compile_flattening",
            "location": 37,
            "return": [],
            "arguments": {
                "func": [],
                "obj": []
            }
        },
        "run_recursively._func": {
            "name": "_func",
            "location": 22,
            "return": [],
            "arguments": {
                "key": [],
                "value": []
            }
        }
    },
    "preacher-master/preacher/compilation/util/type.py": {
        "ensure_bool": {
            "name": "ensure_bool",
            "location": 10,
            "return": [
                "str",
                "float",
                "int"
            ],
            "arguments": {
                "obj": [
                    "str",
                    "float",
                    "int"
                ]
            }
        },
        "ensure_str": {
            "name": "ensure_str",
            "location": 26,
            "return": [
                "str"
            ],
            "arguments": {
                "obj": [
                    "str"
                ]
            }
        },
        "ensure_optional_str": {
            "name": "ensure_optional_str",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "obj": [
                    "str",
                    "None",
                    "int"
                ]
            }
        },
        "ensure_list": {
            "name": "ensure_list",
            "location": 58,
            "return": [
                "list[typing.Union[list[int],list[str],bytes,bool,str,typing.Sequence[int]]]",
                "list[int]",
                "list[str]",
                "bytes",
                "bool",
                "str",
                "typing.Sequence[int]"
            ],
            "arguments": {
                "obj": [
                    "list[int]",
                    "list[str]",
                    "bytes",
                    "bool",
                    "str",
                    "typing.Sequence[int]"
                ]
            }
        },
        "ensure_mapping": {
            "name": "ensure_mapping",
            "location": 73,
            "return": [
                "str"
            ],
            "arguments": {
                "obj": [
                    "str"
                ]
            }
        },
        "or_else": {
            "name": "or_else",
            "location": 89,
            "return": [
                "bool",
                "str",
                "None",
                "float",
                "typing.Callable[[], T]",
                "typing.Optional[]",
                "typing.Iterator"
            ],
            "arguments": {
                "optional": [
                    "None",
                    "str",
                    "typing.Iterator"
                ],
                "default": [
                    "bool",
                    "str",
                    "None",
                    "float",
                    "typing.Callable[[], T]",
                    "typing.Optional[]"
                ]
            }
        }
    },
    "preacher-master/preacher/compilation/util/__init__.py": {},
    "preacher-master/preacher/compilation/verification/description.py": {
        "DescriptionCompiler.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "extraction": [
                    "int",
                    "float"
                ],
                "predicate": [
                    "int",
                    "float"
                ]
            }
        },
        "DescriptionCompiler.compile": {
            "name": "compile",
            "location": 20,
            "return": [
                "Description"
            ],
            "arguments": {
                "self": [],
                "obj": []
            }
        }
    },
    "preacher-master/preacher/compilation/verification/factory.py": {
        "create_matcher_factory_compiler": {
            "name": "create_matcher_factory_compiler",
            "location": 14,
            "return": [
                "MatcherFactoryCompiler"
            ],
            "arguments": {
                "plugin_manager": [
                    "None",
                    "dict[str, typing.Any]"
                ],
                "logger": [
                    "None",
                    "str",
                    "int",
                    "list[str]"
                ]
            }
        },
        "create_predicate_compiler": {
            "name": "create_predicate_compiler",
            "location": 28,
            "return": [
                "PredicateCompiler"
            ],
            "arguments": {
                "matcher_factory": [
                    "None",
                    "str",
                    "bool"
                ],
                "plugin_manager": [
                    "None",
                    "str",
                    "bool",
                    "list[str]"
                ],
                "logger": [
                    "None",
                    "str",
                    "bool",
                    "list[str]"
                ]
            }
        },
        "create_description_compiler": {
            "name": "create_description_compiler",
            "location": 40,
            "return": [
                "DescriptionCompiler"
            ],
            "arguments": {
                "extraction": [
                    "None",
                    "str",
                    "bytes"
                ],
                "predicate": [
                    "None",
                    "str",
                    "bytes"
                ],
                "plugin_manager": [
                    "None",
                    "str",
                    "bytes",
                    "bool"
                ],
                "logger": [
                    "None",
                    "str",
                    "bytes",
                    "bool"
                ]
            }
        },
        "create_response_description_compiler": {
            "name": "create_response_description_compiler",
            "location": 57,
            "return": [
                "ResponseDescriptionCompiler"
            ],
            "arguments": {
                "predicate": [
                    "None",
                    "str",
                    "dict[, ]",
                    "dict[str, typing.Any]"
                ],
                "description": [
                    "None",
                    "str",
                    "dict[str, typing.Any]",
                    "list[typing.Type]",
                    "typing.Callable[str, None]"
                ],
                "plugin_manager": [
                    "None",
                    "str",
                    "dict[, ]",
                    "dict[str, typing.Any]"
                ],
                "logger": [
                    "None",
                    "str",
                    "dict[, ]",
                    "dict[str, typing.Any]"
                ]
            }
        }
    },
    "preacher-master/preacher/compilation/verification/matcher.py": {
        "add_default_matchers": {
            "name": "add_default_matchers",
            "location": 141,
            "return": [],
            "arguments": {
                "compiler": []
            }
        },
        "MatcherFactoryCompiler.__init__": {
            "name": "__init__",
            "location": 33,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MatcherFactoryCompiler.add_static": {
            "name": "add_static",
            "location": 38,
            "return": [],
            "arguments": {
                "self": [],
                "keys": [],
                "item": []
            }
        },
        "MatcherFactoryCompiler.add_taking_value": {
            "name": "add_taking_value",
            "location": 56,
            "return": [],
            "arguments": {
                "self": [],
                "keys": [],
                "matcher_func": [],
                "value_func": []
            }
        },
        "MatcherFactoryCompiler.add_recursive": {
            "name": "add_recursive",
            "location": 74,
            "return": [],
            "arguments": {
                "self": [],
                "keys": [],
                "matcher_func": [],
                "multiple": []
            }
        },
        "MatcherFactoryCompiler.compile": {
            "name": "compile",
            "location": 92,
            "return": [],
            "arguments": {
                "self": [],
                "obj": []
            }
        },
        "MatcherFactoryCompiler._compile_taking_value": {
            "name": "_compile_taking_value",
            "location": 120,
            "return": [],
            "arguments": {
                "self": [],
                "key": [],
                "obj": []
            }
        },
        "MatcherFactoryCompiler._compile_recursive": {
            "name": "_compile_recursive",
            "location": 124,
            "return": [],
            "arguments": {
                "self": [],
                "key": [],
                "obj": []
            }
        },
        "MatcherFactoryCompiler._ensure_keys": {
            "name": "_ensure_keys",
            "location": 135,
            "return": [],
            "arguments": {
                "keys": []
            }
        }
    },
    "preacher-master/preacher/compilation/verification/predicate.py": {
        "PredicateCompiler.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "matcher_factory": [
                    "int",
                    "float"
                ]
            }
        },
        "PredicateCompiler.compile": {
            "name": "compile",
            "location": 12,
            "return": [
                "MatcherWrappingPredicate"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "bool",
                    "list[str]",
                    "dict[, ]"
                ]
            }
        }
    },
    "preacher-master/preacher/compilation/verification/response.py": {
        "ResponseDescriptionCompiled.replace": {
            "name": "replace",
            "location": 26,
            "return": [
                "ResponseDescriptionCompiled"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "float",
                    "str",
                    "dict[, ]",
                    "int",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "ResponseDescriptionCompiled.fix": {
            "name": "fix",
            "location": 36,
            "return": [
                "ResponseDescription"
            ],
            "arguments": {
                "self": []
            }
        },
        "ResponseDescriptionCompiler.__init__": {
            "name": "__init__",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "predicate": [
                    "int",
                    "float",
                    "str"
                ],
                "description": [
                    "int",
                    "float",
                    "str"
                ],
                "default": [
                    "None",
                    "int"
                ]
            }
        },
        "ResponseDescriptionCompiler.compile": {
            "name": "compile",
            "location": 55,
            "return": [],
            "arguments": {
                "self": [],
                "obj": [
                    "dict[, ]",
                    "int"
                ]
            }
        },
        "ResponseDescriptionCompiler.of_default": {
            "name": "of_default",
            "location": 81,
            "return": [
                "ResponseDescriptionCompiler"
            ],
            "arguments": {
                "self": [],
                "default": [
                    "str"
                ]
            }
        },
        "ResponseDescriptionCompiler._compile_status_code": {
            "name": "_compile_status_code",
            "location": 91,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "bool",
                    "list[]"
                ]
            }
        },
        "ResponseDescriptionCompiler._compile_descriptions": {
            "name": "_compile_descriptions",
            "location": 95,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "bool",
                    "str",
                    "list[]",
                    "list[list[str]]"
                ]
            }
        }
    },
    "preacher-master/preacher/compilation/verification/__init__.py": {},
    "preacher-master/preacher/compilation/yaml/factory.py": {
        "create_loader": {
            "name": "create_loader",
            "location": 10,
            "return": [
                "Loader"
            ],
            "arguments": {
                "plugin_manager": [
                    "None"
                ],
                "logger": [
                    "None",
                    "str",
                    "int",
                    "list[str]"
                ]
            }
        }
    },
    "preacher-master/preacher/compilation/yaml/integration.py": {
        "load_from_paths": {
            "name": "load_from_paths",
            "location": 12,
            "return": [],
            "arguments": {
                "paths": [
                    "str"
                ],
                "plugin_manager": [
                    "None",
                    "str",
                    "bool"
                ],
                "logger": [
                    "None",
                    "str",
                    "list[str]"
                ]
            }
        },
        "_hook_loading": {
            "name": "_hook_loading",
            "location": 29,
            "return": [
                "str",
                "None"
            ],
            "arguments": {
                "path": [
                    "str",
                    "None"
                ],
                "logger": []
            }
        }
    },
    "preacher-master/preacher/compilation/yaml/__init__.py": {},
    "preacher-master/preacher/compilation/yaml/tag/argument.py": {
        "ArgumentTag.construct": {
            "name": "construct",
            "location": 8,
            "return": [
                "Argument"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "dict[, ]",
                    "dict[str, typing.Any]"
                ],
                "context": [
                    "dict[, ]",
                    "dict[str, typing.Any]"
                ]
            }
        }
    },
    "preacher-master/preacher/compilation/yaml/tag/context.py": {
        "ContextTag.construct": {
            "name": "construct",
            "location": 8,
            "return": [
                "ContextualValue"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "dict[, ]",
                    "dict[str, typing.Any]"
                ],
                "context": [
                    "dict[, ]",
                    "dict[str, typing.Any]"
                ]
            }
        }
    },
    "preacher-master/preacher/compilation/yaml/tag/datetime.py": {
        "_construct_relative_datetime": {
            "name": "_construct_relative_datetime",
            "location": 22,
            "return": [],
            "arguments": {
                "constructor": [
                    "typing.Callable[, ]"
                ],
                "node": []
            }
        },
        "_construct_relative_datetime_of_scalar": {
            "name": "_construct_relative_datetime_of_scalar",
            "location": 34,
            "return": [],
            "arguments": {
                "constructor": [],
                "node": [
                    "list[int]",
                    "int"
                ]
            }
        },
        "_construct_relative_datetime_of_mapping": {
            "name": "_construct_relative_datetime_of_mapping",
            "location": 43,
            "return": [],
            "arguments": {
                "constructor": [],
                "node": []
            }
        },
        "RelativeDatetimeTag.construct": {
            "name": "construct",
            "location": 18,
            "return": [],
            "arguments": {
                "self": [],
                "node": [
                    "typing.Callable[str, str]"
                ],
                "context": [
                    "typing.Callable[str, str]"
                ]
            }
        }
    },
    "preacher-master/preacher/compilation/yaml/tag/__init__.py": {
        "add_default_tags": {
            "name": "add_default_tags",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "loader": []
            }
        }
    },
    "preacher-master/preacher/core/context.py": {
        "closed_context": {
            "name": "closed_context",
            "location": 36,
            "return": [
                "typing.Generator[dict[, ]]"
            ],
            "arguments": {
                "context": [
                    "str",
                    "int",
                    "dict[str, set[str]]",
                    "typing.Any",
                    "None",
                    "dict[, ]",
                    "BaseException"
                ]
            }
        },
        "Context.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Context.__setitem__": {
            "name": "__setitem__",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str"
                ],
                "value": [
                    "str"
                ]
            }
        },
        "Context.__delitem__": {
            "name": "__delitem__",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "None",
                    "tuple[]",
                    "dict[str, str]",
                    "int",
                    "typing.Callable[KT, VT]",
                    "typing.Type"
                ]
            }
        },
        "Context.__getitem__": {
            "name": "__getitem__",
            "location": 20,
            "return": [],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "None",
                    "tuple[]",
                    "dict[str, str]",
                    "int",
                    "typing.Callable[KT, VT]",
                    "typing.Type"
                ]
            }
        },
        "Context.__len__": {
            "name": "__len__",
            "location": 23,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Context.__iter__": {
            "name": "__iter__",
            "location": 26,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Context.__eq__": {
            "name": "__eq__",
            "location": 29,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "float",
                    "tuple[]",
                    "str",
                    "bytes"
                ]
            }
        }
    },
    "preacher-master/preacher/core/datetime.py": {
        "now": {
            "name": "now",
            "location": 71,
            "return": [],
            "arguments": {}
        },
        "system_timezone": {
            "name": "system_timezone",
            "location": 76,
            "return": [],
            "arguments": {}
        },
        "parse_time": {
            "name": "parse_time",
            "location": 82,
            "return": [
                "list[]",
                "list[None]",
                "dict[str, int]",
                "typing.Match",
                "None",
                "list[int]",
                "list[str]"
            ],
            "arguments": {
                "value": [
                    "int",
                    "float",
                    "list[float]"
                ]
            }
        },
        "parse_timedelta": {
            "name": "parse_timedelta",
            "location": 97,
            "return": [],
            "arguments": {
                "value": [
                    "str",
                    "int"
                ]
            }
        },
        "DatetimeFormat.format_datetime": {
            "name": "format_datetime",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "dict[, ]",
                    "bool"
                ]
            }
        },
        "DatetimeFormat.parse_datetime": {
            "name": "parse_datetime",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ]
            }
        },
        "Iso8601Format.format_datetime": {
            "name": "format_datetime",
            "location": 25,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "Iso8601Format.parse_datetime": {
            "name": "parse_datetime",
            "location": 28,
            "return": [],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "None"
                ]
            }
        },
        "StrftimeFormat.__init__": {
            "name": "__init__",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "format_string": [
                    "str",
                    "int"
                ]
            }
        },
        "StrftimeFormat.format_datetime": {
            "name": "format_datetime",
            "location": 39,
            "return": [],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "int",
                    "Exception",
                    "None"
                ]
            }
        },
        "StrftimeFormat.parse_datetime": {
            "name": "parse_datetime",
            "location": 42,
            "return": [],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "bool",
                    "typing.Iterable[str]"
                ]
            }
        },
        "DatetimeWithFormat.__init__": {
            "name": "__init__",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ],
                "fmt": [
                    "None",
                    "str",
                    "bool"
                ]
            }
        },
        "DatetimeWithFormat.value": {
            "name": "value",
            "location": 59,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DatetimeWithFormat.fmt": {
            "name": "fmt",
            "location": 63,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DatetimeWithFormat.formatted": {
            "name": "formatted",
            "location": 67,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "preacher-master/preacher/core/logger.py": {
        "_create_logger": {
            "name": "_create_logger",
            "location": 8,
            "return": [],
            "arguments": {}
        }
    },
    "preacher-master/preacher/core/status.py": {
        "merge_statuses": {
            "name": "merge_statuses",
            "location": 38,
            "return": [],
            "arguments": {
                "statuses": [
                    "str",
                    "int",
                    "None"
                ]
            }
        },
        "Status.is_succeeded": {
            "name": "is_succeeded",
            "location": 22,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Status.merge": {
            "name": "merge",
            "location": 25,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Status.__str__": {
            "name": "__str__",
            "location": 28,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Status.__repr__": {
            "name": "__repr__",
            "location": 31,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Status.__bool__": {
            "name": "__bool__",
            "location": 34,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Statused.status": {
            "name": "status",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "StatusedList.status": {
            "name": "status",
            "location": 57,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "StatusedList.collect": {
            "name": "collect",
            "location": 61,
            "return": [
                "StatusedList"
            ],
            "arguments": {
                "iterable": [
                    "str",
                    "list[int]",
                    "set[str]"
                ]
            }
        }
    },
    "preacher-master/preacher/core/__init__.py": {},
    "preacher-master/preacher/core/extraction/analysis.py": {
        "_load_mapping": {
            "name": "_load_mapping",
            "location": 102,
            "return": [
                "dict[tuple[str], tuple[str]]"
            ],
            "arguments": {
                "source": [
                    "dict[str, str]"
                ]
            }
        },
        "Analyzer.for_text": {
            "name": "for_text",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "extract": [
                    "typing.Callable[str, T]",
                    "int",
                    "list[str]"
                ]
            }
        },
        "Analyzer.for_mapping": {
            "name": "for_mapping",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "extract": [
                    "typing.Callable[lxml.etree._Element, T]",
                    "str",
                    "bool",
                    "typing.Any"
                ]
            }
        },
        "Analyzer.for_etree": {
            "name": "for_etree",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "extract": [
                    "typing.Callable[lxml.etree._Element, T]",
                    "str",
                    "bool",
                    "typing.Any"
                ]
            }
        },
        "_LazyLoader.__init__": {
            "name": "__init__",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "source": [
                    "str",
                    "typing.Mapping",
                    "int",
                    "typing.Any"
                ],
                "load": [
                    "str",
                    "bool"
                ],
                "error": [
                    "None",
                    "Exception",
                    "str",
                    "bool",
                    "typing.IO"
                ]
            }
        },
        "_LazyLoader.get": {
            "name": "get",
            "location": 55,
            "return": [
                "float",
                "int",
                "tuple[typing.Union[typing.Literal,typing.Literal,typing.Literal,typing.Literal,typing.Literal,typing.Literal,typing.Literal,typing.Literal,typing.Literal,typing.Literal,typing.Literal]]",
                "typing.Final",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ResponseBodyAnalyzer.__init__": {
            "name": "__init__",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "body": [
                    "dict[, ]",
                    "str"
                ]
            }
        },
        "ResponseBodyAnalyzer.for_text": {
            "name": "for_text",
            "location": 89,
            "return": [],
            "arguments": {
                "self": [],
                "extract": [
                    "bool",
                    "bytes",
                    "str",
                    "None",
                    "dict[str, typing.Any]",
                    "list[str]"
                ]
            }
        },
        "ResponseBodyAnalyzer.for_mapping": {
            "name": "for_mapping",
            "location": 92,
            "return": [],
            "arguments": {
                "self": [],
                "extract": [
                    "typing.Callable[typing.Mapping, T]",
                    "list[list[str]]",
                    "int",
                    "str",
                    "tuple[]"
                ]
            }
        },
        "ResponseBodyAnalyzer.for_etree": {
            "name": "for_etree",
            "location": 98,
            "return": [],
            "arguments": {
                "self": [],
                "extract": [
                    "str",
                    "typing.Callable[, ]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "MappingAnalyzer.__init__": {
            "name": "__init__",
            "location": 107,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "int",
                    "float"
                ]
            }
        },
        "MappingAnalyzer.for_text": {
            "name": "for_text",
            "location": 110,
            "return": [],
            "arguments": {
                "self": [],
                "extract": [
                    "typing.Callable[str, T]",
                    "dict[, ]",
                    "str",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "MappingAnalyzer.for_mapping": {
            "name": "for_mapping",
            "location": 115,
            "return": [],
            "arguments": {
                "self": [],
                "extract": [
                    "str"
                ]
            }
        },
        "MappingAnalyzer.for_etree": {
            "name": "for_etree",
            "location": 118,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "extract": [
                    "typing.Callable[lxml.etree._Element, T]",
                    "str",
                    "bool",
                    "typing.Any"
                ]
            }
        }
    },
    "preacher-master/preacher/core/extraction/error.py": {},
    "preacher-master/preacher/core/extraction/extraction.py": {
        "Extractor.extract": {
            "name": "extract",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "analyzer": [
                    "int",
                    "str",
                    "typing.Iterable['Context']"
                ]
            }
        }
    },
    "preacher-master/preacher/core/extraction/__init__.py": {},
    "preacher-master/preacher/core/extraction/impl/jq_.py": {
        "JqEngine.iter": {
            "name": "iter",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "query": [
                    "str"
                ],
                "value": [
                    "str"
                ]
            }
        },
        "JqExtractor.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "engine": [
                    "None",
                    "bool",
                    "str"
                ],
                "query": [
                    "None",
                    "bool",
                    "str"
                ],
                "multiple": [
                    "bool"
                ],
                "cast": [
                    "None",
                    "bool",
                    "str"
                ]
            }
        },
        "JqExtractor.extract": {
            "name": "extract",
            "location": 28,
            "return": [
                "list[str]"
            ],
            "arguments": {
                "self": [],
                "analyzer": [
                    "str"
                ]
            }
        }
    },
    "preacher-master/preacher/core/extraction/impl/jq_engine.py": {
        "PyJqEngine.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PyJqEngine.iter": {
            "name": "iter",
            "location": 13,
            "return": [],
            "arguments": {
                "self": [],
                "query": [
                    "str",
                    "None",
                    "typing.Mapping",
                    "Exception"
                ],
                "text": [
                    "str"
                ]
            }
        },
        "PyJqEngine.is_available": {
            "name": "is_available",
            "location": 21,
            "return": [
                "bool"
            ],
            "arguments": {}
        }
    },
    "preacher-master/preacher/core/extraction/impl/key.py": {
        "KeyExtractor.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "int",
                    "list[str]",
                    "bytes"
                ],
                "multiple": [
                    "bool"
                ],
                "cast": [
                    "None",
                    "str",
                    "bytes",
                    "int"
                ]
            }
        },
        "KeyExtractor.extract": {
            "name": "extract",
            "location": 19,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": [],
                "analyzer": []
            }
        }
    },
    "preacher-master/preacher/core/extraction/impl/xpath.py": {
        "XPathExtractor.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "query": [
                    "int",
                    "None",
                    "str"
                ],
                "multiple": [
                    "bool"
                ],
                "cast": [
                    "None",
                    "int",
                    "str"
                ],
                "namespaces": [
                    "None",
                    "int",
                    "str"
                ]
            }
        },
        "XPathExtractor.extract": {
            "name": "extract",
            "location": 23,
            "return": [
                "None",
                "list[typing.Optional[str]]"
            ],
            "arguments": {
                "self": [],
                "analyzer": [
                    "typing.Callable[lxml.etree._Element, T]",
                    "str",
                    "typing.Iterable[str]",
                    "typing.Iterable[T]"
                ]
            }
        },
        "XPathExtractor._convert": {
            "name": "_convert",
            "location": 35,
            "return": [
                "str"
            ],
            "arguments": {
                "elem": [
                    "list[str]"
                ]
            }
        },
        "XPathExtractor._extract": {
            "name": "_extract",
            "location": 40,
            "return": [],
            "arguments": {
                "self": [],
                "elem": [
                    "str",
                    "int",
                    "float",
                    "dict[, ]"
                ]
            }
        }
    },
    "preacher-master/preacher/core/extraction/impl/__init__.py": {},
    "preacher-master/preacher/core/request/header.py": {},
    "preacher-master/preacher/core/request/request.py": {
        "Request.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "method": [],
                "path": [
                    "typing.Text"
                ],
                "headers": [
                    "None",
                    "str",
                    "bool",
                    "list[tuple[typing.Union[int,int]]]",
                    "typing.IO"
                ],
                "params": [
                    "None",
                    "str",
                    "int",
                    "typing.Type"
                ],
                "body": [
                    "None",
                    "str",
                    "int",
                    "typing.Type"
                ]
            }
        },
        "Request.method": {
            "name": "method",
            "location": 34,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Request.path": {
            "name": "path",
            "location": 38,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Request.headers": {
            "name": "headers",
            "location": 42,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Request.params": {
            "name": "params",
            "location": 46,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Request.body": {
            "name": "body",
            "location": 50,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "preacher-master/preacher/core/request/requester.py": {
        "_generate_id": {
            "name": "_generate_id",
            "location": 174,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "ResponseBodyWrapper.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "res": [
                    "int",
                    "float",
                    "list[str]"
                ]
            }
        },
        "ResponseBodyWrapper.text": {
            "name": "text",
            "location": 26,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ResponseBodyWrapper.content": {
            "name": "content",
            "location": 30,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ResponseWrapper.__init__": {
            "name": "__init__",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "id": [
                    "str",
                    "dict[str, str]",
                    "typing.Sequence[str]",
                    "None",
                    "list[str]"
                ],
                "res": [
                    "int",
                    "bytes",
                    "str",
                    "None",
                    "float"
                ]
            }
        },
        "ResponseWrapper.id": {
            "name": "id",
            "location": 41,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ResponseWrapper.elapsed": {
            "name": "elapsed",
            "location": 45,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ResponseWrapper.status_code": {
            "name": "status_code",
            "location": 49,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ResponseWrapper.headers": {
            "name": "headers",
            "location": 53,
            "return": [
                "dict[, ]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ResponseWrapper.body": {
            "name": "body",
            "location": 59,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Requester.__init__": {
            "name": "__init__",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "base_url": [
                    "typing.Text"
                ],
                "timeout": [
                    "None",
                    "int",
                    "str",
                    "tuple[]"
                ]
            }
        },
        "Requester.base_url": {
            "name": "base_url",
            "location": 94,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Requester.execute": {
            "name": "execute",
            "location": 97,
            "return": [
                "tuple[None]",
                "tuple[ResponseWrapper]"
            ],
            "arguments": {
                "self": [],
                "request": [],
                "session": [
                    "None",
                    "str"
                ],
                "context": [
                    "None",
                    "dict[, ]"
                ]
            }
        },
        "Requester._prepare_request": {
            "name": "_prepare_request",
            "location": 151,
            "return": [],
            "arguments": {
                "self": [],
                "request": [
                    "dict[str, typing.Any]"
                ],
                "context": [
                    "dict[, ]",
                    "list[]",
                    "dict[str, typing.Any]"
                ]
            }
        }
    },
    "preacher-master/preacher/core/request/request_body.py": {
        "RequestBody.content_type": {
            "name": "content_type",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RequestBody.resolve": {
            "name": "resolve",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "None",
                    "int",
                    "str",
                    "typing.Iterable[C]"
                ]
            }
        },
        "UrlencodedRequestBody.__init__": {
            "name": "__init__",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "params": [
                    "int",
                    "float"
                ]
            }
        },
        "UrlencodedRequestBody.content_type": {
            "name": "content_type",
            "location": 28,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "UrlencodedRequestBody.resolve": {
            "name": "resolve",
            "location": 31,
            "return": [],
            "arguments": {
                "self": [],
                "context": [
                    "None",
                    "str",
                    "dict[, ]"
                ]
            }
        },
        "JsonRequestBody.__init__": {
            "name": "__init__",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict[str, typing.Any]",
                    "bytes",
                    "dict[str, str]",
                    "list[]",
                    "str",
                    "None"
                ]
            }
        },
        "JsonRequestBody.content_type": {
            "name": "content_type",
            "location": 40,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "JsonRequestBody.resolve": {
            "name": "resolve",
            "location": 43,
            "return": [],
            "arguments": {
                "self": [],
                "context": [
                    "None",
                    "int",
                    "str",
                    "typing.Iterable[C]"
                ]
            }
        },
        "JsonRequestBody.resolve._resolve_value": {
            "name": "_resolve_value",
            "location": 44,
            "return": [],
            "arguments": {
                "obj": []
            }
        }
    },
    "preacher-master/preacher/core/request/response.py": {
        "ResponseBody.text": {
            "name": "text",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ResponseBody.content": {
            "name": "content",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Response.id": {
            "name": "id",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Response.elapsed": {
            "name": "elapsed",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Response.status_code": {
            "name": "status_code",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Response.headers": {
            "name": "headers",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Response.body": {
            "name": "body",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "preacher-master/preacher/core/request/url_param.py": {
        "resolve_url_param_value": {
            "name": "resolve_url_param_value",
            "location": 17,
            "return": [
                "None",
                "typing.Text",
                "str"
            ],
            "arguments": {
                "value": [
                    "str",
                    "dict[, ]",
                    "int",
                    "float"
                ],
                "context": [
                    "None",
                    "str"
                ]
            }
        },
        "resolve_url_param": {
            "name": "resolve_url_param",
            "location": 52,
            "return": [
                "list[]"
            ],
            "arguments": {
                "param": [
                    "str",
                    "float",
                    "list[str]"
                ],
                "context": [
                    "None",
                    "str"
                ]
            }
        },
        "resolve_url_params": {
            "name": "resolve_url_params",
            "location": 75,
            "return": [
                "str",
                "dict[tuple[typing.Union[str,typing.Any]], ]"
            ],
            "arguments": {
                "params": [
                    "dict[, ]",
                    "bool",
                    "dict[str, typing.Any]",
                    "typing.MutableMapping",
                    "None",
                    "typing.Callable[typing.Any, str]"
                ],
                "context": [
                    "None",
                    "dict[str, typing.Any]",
                    "dict[, ]",
                    "dict[str, float]"
                ]
            }
        }
    },
    "preacher-master/preacher/core/request/__init__.py": {},
    "preacher-master/preacher/core/scenario/case.py": {
        "Case.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "label": [
                    "None",
                    "int",
                    "str",
                    "float",
                    "dict[str, str]"
                ],
                "enabled": [
                    "bool"
                ],
                "conditions": [
                    "None",
                    "int",
                    "str",
                    "float",
                    "dict[str, str]"
                ],
                "request": [
                    "None",
                    "str"
                ],
                "response": [
                    "None",
                    "str",
                    "int",
                    "bytes"
                ],
                "waiting_time": [
                    "None",
                    "int",
                    "list[str]",
                    "float"
                ]
            }
        },
        "Case.label": {
            "name": "label",
            "location": 37,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Case.enabled": {
            "name": "enabled",
            "location": 41,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Case.conditions": {
            "name": "conditions",
            "location": 45,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Case.request": {
            "name": "request",
            "location": 49,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Case.response": {
            "name": "response",
            "location": 53,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Case.waiting_time": {
            "name": "waiting_time",
            "location": 57,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "preacher-master/preacher/core/scenario/case_listener.py": {
        "CaseListener.on_execution": {
            "name": "on_execution",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "execution": [
                    "dict[str, str]",
                    "str"
                ],
                "response": [
                    "dict[str, str]",
                    "str"
                ]
            }
        }
    },
    "preacher-master/preacher/core/scenario/case_result.py": {
        "CaseResult.status": {
            "name": "status",
            "location": 21,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "preacher-master/preacher/core/scenario/case_runner.py": {
        "CaseRunner.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "unit_runner": [
                    "int",
                    "float"
                ],
                "listener": [
                    "None",
                    "int",
                    "float"
                ]
            }
        },
        "CaseRunner.base_url": {
            "name": "base_url",
            "location": 22,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CaseRunner.run": {
            "name": "run",
            "location": 25,
            "return": [
                "CaseResult"
            ],
            "arguments": {
                "self": [],
                "case": [
                    "int",
                    "dict[str, typing.Any]",
                    "typing.Mapping",
                    "dict[, ]"
                ],
                "session": [
                    "None"
                ],
                "context": [
                    "None",
                    "dict[, ]",
                    "memoryview"
                ]
            }
        }
    },
    "preacher-master/preacher/core/scenario/scenario.py": {
        "Scenario.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "label": [
                    "None",
                    "str",
                    "bool",
                    "list[list[typing.Any]]"
                ],
                "ordered": [
                    "bool"
                ],
                "conditions": [
                    "None",
                    "str",
                    "bool",
                    "list[list[typing.Any]]"
                ],
                "cases": [
                    "None",
                    "str",
                    "bool",
                    "list[list[typing.Any]]"
                ],
                "subscenarios": [
                    "None",
                    "str",
                    "bool",
                    "list[list[typing.Any]]"
                ]
            }
        },
        "Scenario.label": {
            "name": "label",
            "location": 27,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Scenario.ordered": {
            "name": "ordered",
            "location": 31,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Scenario.conditions": {
            "name": "conditions",
            "location": 35,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Scenario.cases": {
            "name": "cases",
            "location": 39,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Scenario.subscenarios": {
            "name": "subscenarios",
            "location": 43,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "preacher-master/preacher/core/scenario/scenario_result.py": {},
    "preacher-master/preacher/core/scenario/scenario_runner.py": {
        "ScenarioRunner.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "executor": [
                    "int",
                    "float"
                ],
                "case_runner": [
                    "int",
                    "float"
                ]
            }
        },
        "ScenarioRunner.submit": {
            "name": "submit",
            "location": 20,
            "return": [
                "StaticScenarioTask",
                "RunningScenarioTask"
            ],
            "arguments": {
                "self": [],
                "scenario": [
                    "int",
                    "dict[, ]",
                    "str",
                    "float",
                    "dict[str, typing.Any]"
                ]
            }
        }
    },
    "preacher-master/preacher/core/scenario/scenario_task.py": {
        "ScenarioTask.result": {
            "name": "result",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "StaticScenarioTask.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "result": [
                    "typing.Counter",
                    "int",
                    "dict[str, typing.Any]",
                    "str",
                    "tuple[typing.Union[int,int]]",
                    "list[]"
                ]
            }
        },
        "StaticScenarioTask.result": {
            "name": "result",
            "location": 20,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RunningScenarioTask.__init__": {
            "name": "__init__",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "label": [
                    "str",
                    "bool",
                    "list[list[typing.Any]]",
                    "None"
                ],
                "conditions": [
                    "str",
                    "bool",
                    "list[list[typing.Any]]",
                    "None"
                ],
                "cases": [
                    "str",
                    "bool",
                    "list[list[typing.Any]]",
                    "None"
                ],
                "subscenarios": [
                    "str",
                    "bool",
                    "list[list[typing.Any]]",
                    "None"
                ]
            }
        },
        "RunningScenarioTask.result": {
            "name": "result",
            "location": 37,
            "return": [
                "ScenarioResult"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "preacher-master/preacher/core/scenario/__init__.py": {},
    "preacher-master/preacher/core/scenario/util/concurrency.py": {
        "_run_cases_in_order": {
            "name": "_run_cases_in_order",
            "location": 20,
            "return": [],
            "arguments": {
                "runner": [
                    "dict[, ]"
                ],
                "cases": [
                    "dict[, ]"
                ],
                "context": [
                    "dict[, ]"
                ]
            }
        },
        "CasesTask.result": {
            "name": "result",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "OrderedCasesTask.__init__": {
            "name": "__init__",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "executor": [
                    "str",
                    "typing.Iterable[str]",
                    "bool"
                ],
                "runner": [
                    "str",
                    "typing.Iterable[str]",
                    "bool"
                ],
                "cases": [
                    "str",
                    "typing.Iterable[str]",
                    "bool"
                ],
                "context": [
                    "None",
                    "str",
                    "typing.Iterable[str]",
                    "bool"
                ]
            }
        },
        "OrderedCasesTask.result": {
            "name": "result",
            "location": 41,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UnorderedCasesTask.__init__": {
            "name": "__init__",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "executor": [
                    "int",
                    "str"
                ],
                "runner": [
                    "int",
                    "str"
                ],
                "cases": [
                    "str"
                ]
            }
        },
        "UnorderedCasesTask.result": {
            "name": "result",
            "location": 49,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "preacher-master/preacher/core/scenario/util/retry.py": {
        "retry_while_false": {
            "name": "retry_while_false",
            "location": 13,
            "return": [
                "int",
                "dict[, ]",
                "tuple[]"
            ],
            "arguments": {
                "func": [
                    "int",
                    "typing.Iterable[]",
                    "typing.Callable[, ]"
                ],
                "attempts": [
                    "int"
                ],
                "delay": [
                    "float"
                ],
                "predicate": [
                    "bool"
                ]
            }
        }
    },
    "preacher-master/preacher/core/scenario/util/__init__.py": {},
    "preacher-master/preacher/core/scheduling/factory.py": {
        "create_scheduler": {
            "name": "create_scheduler",
            "location": 11,
            "return": [
                "ScenarioScheduler"
            ],
            "arguments": {
                "executor": [
                    "str",
                    "int",
                    "dict[, ]",
                    "None"
                ],
                "base_url": [
                    "typing.Text"
                ],
                "timeout": [
                    "None",
                    "str",
                    "dict[, ]",
                    "list[str]",
                    "dict[str, str]",
                    "int"
                ],
                "retry": [
                    "int"
                ],
                "delay": [
                    "float"
                ],
                "listener": [
                    "None",
                    "str",
                    "int",
                    "dict[, ]"
                ]
            }
        }
    },
    "preacher-master/preacher/core/scheduling/listener.py": {
        "Listener.on_end": {
            "name": "on_end",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "status": [
                    "str",
                    "float",
                    "None"
                ]
            }
        },
        "Listener.on_scenario": {
            "name": "on_scenario",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "result": [
                    "bool",
                    "Exception"
                ]
            }
        },
        "MergingListener.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MergingListener.append": {
            "name": "append",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "listener": [
                    "int",
                    "str"
                ]
            }
        },
        "MergingListener.on_execution": {
            "name": "on_execution",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "execution": [
                    "str",
                    "float",
                    "bytes",
                    "int",
                    "list[typing.Callable[, ]]"
                ],
                "response": [
                    "str",
                    "float",
                    "bytes",
                    "int",
                    "list[typing.Callable[, ]]"
                ]
            }
        },
        "MergingListener.on_scenario": {
            "name": "on_scenario",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "result": [
                    "bool",
                    "tuple[typing.Union[str,str]]",
                    "str",
                    "dict[str, typing.Any]",
                    "None",
                    "float"
                ]
            }
        },
        "MergingListener.on_end": {
            "name": "on_end",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "status": [
                    "int",
                    "typing.Callable[, ]",
                    "None",
                    "float",
                    "str"
                ]
            }
        }
    },
    "preacher-master/preacher/core/scheduling/scenario_scheduler.py": {
        "ScenarioScheduler.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "runner": [
                    "int",
                    "float"
                ],
                "listener": [
                    "None",
                    "int",
                    "float"
                ]
            }
        },
        "ScenarioScheduler.run": {
            "name": "run",
            "location": 17,
            "return": [],
            "arguments": {
                "self": [],
                "scenarios": [
                    "str"
                ]
            }
        },
        "ScenarioScheduler._submit_all": {
            "name": "_submit_all",
            "location": 38,
            "return": [
                "typing.Generator[StaticScenarioTask]",
                "typing.Generator[]"
            ],
            "arguments": {
                "self": [],
                "scenarios": [
                    "int",
                    "str",
                    "set[str]"
                ]
            }
        }
    },
    "preacher-master/preacher/core/scheduling/__init__.py": {},
    "preacher-master/preacher/core/unit/runner.py": {
        "predicate": {
            "name": "predicate",
            "location": 16,
            "return": [
                "bool"
            ],
            "arguments": {
                "result": [
                    "bool"
                ]
            }
        },
        "UnitRunner.__init__": {
            "name": "__init__",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "requester": [
                    "int",
                    "float"
                ],
                "retry": [
                    "int"
                ],
                "delay": [
                    "float"
                ]
            }
        },
        "UnitRunner.base_url": {
            "name": "base_url",
            "location": 35,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UnitRunner.run": {
            "name": "run",
            "location": 38,
            "return": [],
            "arguments": {
                "self": [],
                "request": [
                    "None"
                ],
                "requirements": [
                    "None"
                ],
                "session": [
                    "None"
                ],
                "context": [
                    "None",
                    "int",
                    "str",
                    "dict[str, str]",
                    "dict[, ]"
                ]
            }
        },
        "UnitRunner._execute": {
            "name": "_execute",
            "location": 53,
            "return": [
                "tuple[typing.Union[bytes,dict[, ],int,typing.Callable[, ],dict[str, typing.Any],None]]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "None"
                ],
                "requirements": [],
                "session": [
                    "None"
                ],
                "context": [
                    "str"
                ]
            }
        }
    },
    "preacher-master/preacher/core/unit/__init__.py": {},
    "preacher-master/preacher/core/util/error.py": {
        "to_message": {
            "name": "to_message",
            "location": 4,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "error": [
                    "Exception",
                    "str",
                    "typing.Callable[..., collections.abc.Awaitable[None]]"
                ]
            }
        }
    },
    "preacher-master/preacher/core/util/functional.py": {
        "identity": {
            "name": "identity",
            "location": 10,
            "return": [
                "typing.Type",
                "bool",
                "typing.Iterable[T]"
            ],
            "arguments": {
                "value": [
                    "typing.Type",
                    "bool",
                    "typing.Iterable[T]"
                ]
            }
        },
        "recursive_map": {
            "name": "recursive_map",
            "location": 15,
            "return": [
                "dict[, ]",
                "list[]"
            ],
            "arguments": {
                "func": [
                    "typing.Callable[, ]",
                    "typing.Mapping",
                    "list[str]"
                ],
                "obj": [
                    "list[dict[, ]]",
                    "typing.Type",
                    "typing.Any",
                    "None"
                ]
            }
        },
        "apply_if_not_none": {
            "name": "apply_if_not_none",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "func": [
                    "typing.Mapping",
                    "typing.Iterable[]",
                    "str"
                ],
                "value": [
                    "typing.Sequence[T]",
                    "int",
                    "None",
                    "float"
                ]
            }
        }
    },
    "preacher-master/preacher/core/util/serialization.py": {
        "to_serializable": {
            "name": "to_serializable",
            "location": 6,
            "return": [
                "str",
                "typing.Mapping",
                "int",
                "DatetimeWithFormat",
                "date"
            ],
            "arguments": {
                "value": [
                    "str",
                    "typing.Mapping",
                    "int"
                ]
            }
        }
    },
    "preacher-master/preacher/core/util/__init__.py": {},
    "preacher-master/preacher/core/value/value.py": {
        "Value.type": {
            "name": "type",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Value.resolve": {
            "name": "resolve",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "None",
                    "int",
                    "str",
                    "typing.Iterable[C]"
                ]
            }
        }
    },
    "preacher-master/preacher/core/value/__init__.py": {},
    "preacher-master/preacher/core/value/impl/context.py": {
        "ContextualValue.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "int",
                    "list[str]",
                    "bytes"
                ]
            }
        },
        "ContextualValue.type": {
            "name": "type",
            "location": 12,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ContextualValue.key": {
            "name": "key",
            "location": 16,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ContextualValue.resolve": {
            "name": "resolve",
            "location": 19,
            "return": [
                "list[str]"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "None",
                    "str",
                    "bool",
                    "dict[str, list[str]]",
                    "list[]",
                    "typing.Pattern"
                ]
            }
        }
    },
    "preacher-master/preacher/core/value/impl/datetime.py": {
        "parse_datetime_value_with_format": {
            "name": "parse_datetime_value_with_format",
            "location": 50,
            "return": [
                "StaticValue",
                "DatetimeValueWithFormat"
            ],
            "arguments": {
                "value": [
                    "str",
                    "None",
                    "bytes"
                ],
                "fmt": [
                    "None",
                    "str"
                ]
            }
        },
        "parse_relative_datetime_value": {
            "name": "parse_relative_datetime_value",
            "location": 73,
            "return": [
                "RelativeDatetime"
            ],
            "arguments": {
                "value": [
                    "str"
                ]
            }
        },
        "_select_origin": {
            "name": "_select_origin",
            "location": 107,
            "return": [
                "datetime"
            ],
            "arguments": {
                "context": [
                    "None",
                    "str",
                    "dict[typing.Any, bool]",
                    "list[str]",
                    "dict[, ]",
                    "bool"
                ]
            }
        },
        "RelativeDatetime.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "delta": [
                    "None",
                    "int",
                    "float"
                ],
                "tm": [
                    "None",
                    "int",
                    "float"
                ]
            }
        },
        "RelativeDatetime.type": {
            "name": "type",
            "location": 25,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RelativeDatetime.resolve": {
            "name": "resolve",
            "location": 28,
            "return": [],
            "arguments": {
                "self": [],
                "context": [
                    "None",
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ]
            }
        },
        "DatetimeValueWithFormat.__init__": {
            "name": "__init__",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "original": [
                    "typing.Sequence[]",
                    "str",
                    "list[str]",
                    "bool"
                ],
                "fmt": [
                    "None",
                    "str",
                    "set[str]"
                ]
            }
        },
        "DatetimeValueWithFormat.type": {
            "name": "type",
            "location": 42,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DatetimeValueWithFormat.resolve": {
            "name": "resolve",
            "location": 45,
            "return": [
                "DatetimeWithFormat"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "None",
                    "dict[str, typing.Any]",
                    "typing.Mapping",
                    "list[dict[, ]]",
                    "dict[, ]"
                ]
            }
        }
    },
    "preacher-master/preacher/core/value/impl/static.py": {
        "StaticValue.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "float",
                    "str",
                    "int"
                ]
            }
        },
        "StaticValue.type": {
            "name": "type",
            "location": 14,
            "return": [
                "typing.Type"
            ],
            "arguments": {
                "self": []
            }
        },
        "StaticValue.resolve": {
            "name": "resolve",
            "location": 17,
            "return": [],
            "arguments": {
                "self": [],
                "context": [
                    "None",
                    "int",
                    "str",
                    "typing.Iterable[C]"
                ]
            }
        }
    },
    "preacher-master/preacher/core/value/impl/__init__.py": {},
    "preacher-master/preacher/core/verification/description.py": {
        "Description.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "extractor": [
                    "int",
                    "str"
                ],
                "predicates": [
                    "int",
                    "str"
                ],
                "value_name": [
                    "None",
                    "str",
                    "int"
                ]
            }
        },
        "Description.verify": {
            "name": "verify",
            "location": 25,
            "return": [],
            "arguments": {
                "self": [],
                "analyzer": [
                    "typing.Iterable[T]",
                    "str",
                    "bool"
                ],
                "context": [
                    "None",
                    "str",
                    "int"
                ]
            }
        }
    },
    "preacher-master/preacher/core/verification/hamcrest.py": {
        "before": {
            "name": "before",
            "location": 46,
            "return": [
                "_ConvertingMatcher"
            ],
            "arguments": {
                "value": [
                    "bool",
                    "str",
                    "float"
                ]
            }
        },
        "after": {
            "name": "after",
            "location": 53,
            "return": [
                "_ConvertingMatcher"
            ],
            "arguments": {
                "value": [
                    "bool",
                    "str",
                    "float"
                ]
            }
        },
        "day_of_week": {
            "name": "day_of_week",
            "location": 60,
            "return": [
                "_ConvertingMatcher"
            ],
            "arguments": {
                "day": [
                    "float",
                    "int"
                ]
            }
        },
        "_ensure_str": {
            "name": "_ensure_str",
            "location": 71,
            "return": [
                "str"
            ],
            "arguments": {
                "obj": [
                    "str"
                ]
            }
        },
        "_ensure_datetime": {
            "name": "_ensure_datetime",
            "location": 77,
            "return": [
                "DatetimeWithFormat"
            ],
            "arguments": {
                "obj": [
                    "int"
                ]
            }
        },
        "_ConvertingMatcher.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "matcher": [
                    "int",
                    "float",
                    "list[list[int]]"
                ],
                "convert": [
                    "int",
                    "float",
                    "list[list[int]]"
                ]
            }
        },
        "_ConvertingMatcher._matches": {
            "name": "_matches",
            "location": 22,
            "return": [],
            "arguments": {
                "self": [],
                "item": [
                    "dict[str, typing.Any]",
                    "str",
                    "int"
                ]
            }
        },
        "_ConvertingMatcher.describe_to": {
            "name": "describe_to",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "description": [
                    "str",
                    "int",
                    "dict[, ]"
                ]
            }
        },
        "_ConvertingMatcher.describe_mismatch": {
            "name": "describe_mismatch",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "str",
                    "dict[str, typing.Any]",
                    "list[str]"
                ],
                "mismatch_description": [
                    "str"
                ]
            }
        },
        "_DayOfWeekMatcher.__init__": {
            "name": "__init__",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "day": [
                    "int",
                    "float"
                ]
            }
        },
        "_DayOfWeekMatcher._matches": {
            "name": "_matches",
            "location": 38,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "item": []
            }
        },
        "_DayOfWeekMatcher.describe_to": {
            "name": "describe_to",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "description": []
            }
        }
    },
    "preacher-master/preacher/core/verification/matcher.py": {
        "MatcherWrappingPredicate.__init__": {
            "name": "__init__",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "factory": [
                    "int",
                    "float"
                ]
            }
        },
        "MatcherWrappingPredicate.verify": {
            "name": "verify",
            "location": 28,
            "return": [
                "Verification"
            ],
            "arguments": {
                "self": [],
                "actual": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ],
                "context": [
                    "None",
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ]
            }
        },
        "MatcherFactory.create": {
            "name": "create",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "None",
                    "str",
                    "typing.Iterator",
                    "bool",
                    "float"
                ]
            }
        },
        "StaticMatcherFactory.__init__": {
            "name": "__init__",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "matcher": [
                    "int",
                    "float"
                ]
            }
        },
        "StaticMatcherFactory.create": {
            "name": "create",
            "location": 51,
            "return": [],
            "arguments": {
                "self": [],
                "context": [
                    "None",
                    "str",
                    "typing.Iterator",
                    "bool",
                    "float"
                ]
            }
        },
        "ValueMatcherFactory.__init__": {
            "name": "__init__",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "matcher_func": [
                    "int"
                ],
                "arg": [
                    "int"
                ],
                "value_func": []
            }
        },
        "ValueMatcherFactory.create": {
            "name": "create",
            "location": 66,
            "return": [],
            "arguments": {
                "self": [],
                "context": [
                    "None",
                    "bool",
                    "dict[, ]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "ValueMatcherFactory._ensure_value": {
            "name": "_ensure_value",
            "location": 70,
            "return": [
                "Value"
            ],
            "arguments": {
                "self": []
            }
        },
        "RecursiveMatcherFactory.__init__": {
            "name": "__init__",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "matcher_func": [
                    "int",
                    "str",
                    "None"
                ],
                "inner_factories": [
                    "int",
                    "str",
                    "None"
                ]
            }
        },
        "RecursiveMatcherFactory.create": {
            "name": "create",
            "location": 81,
            "return": [],
            "arguments": {
                "self": [],
                "context": [
                    "None",
                    "int",
                    "str",
                    "dict[str, typing.Any]"
                ]
            }
        }
    },
    "preacher-master/preacher/core/verification/predicate.py": {
        "Predicate.verify": {
            "name": "verify",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "actual": [
                    "int",
                    "str",
                    "typing.Iterable[C]"
                ],
                "context": [
                    "None",
                    "int",
                    "str",
                    "typing.Iterable[C]"
                ]
            }
        }
    },
    "preacher-master/preacher/core/verification/response.py": {
        "ResponseVerification.status": {
            "name": "status",
            "location": 26,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ResponseDescription.__init__": {
            "name": "__init__",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "status_code": [
                    "None",
                    "int"
                ],
                "headers": [
                    "None",
                    "str",
                    "typing.Callable[, ]",
                    "tuple[typing.Union[str,str]]",
                    "bytes",
                    "int",
                    "dict[, ]"
                ],
                "body": [
                    "None",
                    "str",
                    "int",
                    "list[int]"
                ]
            }
        },
        "ResponseDescription.verify": {
            "name": "verify",
            "location": 41,
            "return": [
                "ResponseVerification"
            ],
            "arguments": {
                "self": [],
                "response": [
                    "int",
                    "bytes",
                    "str"
                ],
                "context": [
                    "None",
                    "bytes",
                    "str",
                    "dict[str, typing.Any]"
                ]
            }
        }
    },
    "preacher-master/preacher/core/verification/type.py": {
        "require_type": {
            "name": "require_type",
            "location": 10,
            "return": [],
            "arguments": {
                "tp": [
                    "typing.Type"
                ],
                "func": [
                    "typing.Type"
                ]
            }
        },
        "_require_type": {
            "name": "_require_type",
            "location": 20,
            "return": [],
            "arguments": {
                "tp": [
                    "typing.Type",
                    "str",
                    "None",
                    "dict[, ]"
                ],
                "func": [
                    "str"
                ],
                "value": [
                    "dict[str, typing.Any]",
                    "str",
                    "int",
                    "dict[, ]"
                ]
            }
        }
    },
    "preacher-master/preacher/core/verification/verification.py": {
        "Verification.succeed": {
            "name": "succeed",
            "location": 19,
            "return": [
                "Verification"
            ],
            "arguments": {}
        },
        "Verification.of_error": {
            "name": "of_error",
            "location": 23,
            "return": [
                "Verification"
            ],
            "arguments": {
                "error": [
                    "str",
                    "None",
                    "tuple[int]"
                ]
            }
        },
        "Verification.collect": {
            "name": "collect",
            "location": 27,
            "return": [
                "Verification"
            ],
            "arguments": {
                "children": [
                    "str"
                ]
            }
        }
    },
    "preacher-master/preacher/core/verification/__init__.py": {},
    "preacher-master/preacher/plugin/hookspec.py": {
        "preacher_add_matchers": {
            "name": "preacher_add_matchers",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "compiler": [
                    "str",
                    "None",
                    "typing.Iterable[T]"
                ]
            }
        },
        "preacher_add_extractions": {
            "name": "preacher_add_extractions",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "compiler": [
                    "str",
                    "None",
                    "typing.Iterable[T]"
                ]
            }
        },
        "preacher_modify_yaml_loader": {
            "name": "preacher_modify_yaml_loader",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "loader": [
                    "int",
                    "str",
                    "typing.Iterable['Context']"
                ]
            }
        }
    },
    "preacher-master/preacher/plugin/impl.py": {
        "preacher_add_matchers": {
            "name": "preacher_add_matchers",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "compiler": [
                    "int"
                ]
            }
        },
        "preacher_add_extractions": {
            "name": "preacher_add_extractions",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "compiler": [
                    "int"
                ]
            }
        },
        "preacher_modify_yaml_loader": {
            "name": "preacher_modify_yaml_loader",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "loader": [
                    "str",
                    "bool",
                    "BaseException"
                ]
            }
        }
    },
    "preacher-master/preacher/plugin/loader.py": {
        "load_plugins": {
            "name": "load_plugins",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "manager": [],
                "plugins": [
                    "tuple[]"
                ],
                "logger": []
            }
        },
        "_load_module": {
            "name": "_load_module",
            "location": 36,
            "return": [
                "list[str]",
                "typing.NamedTuple",
                "set[]"
            ],
            "arguments": {
                "path": [
                    "str",
                    "None",
                    "list[str]",
                    "bool"
                ],
                "logger": []
            }
        },
        "_unique_name": {
            "name": "_unique_name",
            "location": 50,
            "return": [
                "str"
            ],
            "arguments": {}
        }
    },
    "preacher-master/preacher/plugin/manager.py": {
        "get_plugin_manager": {
            "name": "get_plugin_manager",
            "location": 10,
            "return": [
                "PluginManager"
            ],
            "arguments": {}
        }
    },
    "preacher-master/preacher/plugin/__init__.py": {},
    "preacher-master/preacher/presentation/html.py": {
        "HtmlReporter.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ]
            }
        },
        "HtmlReporter._initialize": {
            "name": "_initialize",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HtmlReporter.export_response": {
            "name": "export_response",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "execution": [
                    "str",
                    "dict[str, str]",
                    "dict[, ]",
                    "None"
                ],
                "response": [
                    "dict[, ]"
                ]
            }
        },
        "HtmlReporter.export_results": {
            "name": "export_results",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "results": [
                    "str",
                    "dict[str, typing.Any]"
                ]
            }
        }
    },
    "preacher-master/preacher/presentation/logging.py": {
        "create_logging_reporter": {
            "name": "create_logging_reporter",
            "location": 128,
            "return": [
                "LoggingReporter"
            ],
            "arguments": {
                "logger": [
                    "None",
                    "str",
                    "bytes"
                ],
                "logger_name": [
                    "typing.Text"
                ],
                "level": [],
                "handlers": [
                    "str"
                ],
                "formatter": [
                    "None",
                    "str",
                    "float"
                ]
            }
        },
        "_status_to_logging_level": {
            "name": "_status_to_logging_level",
            "location": 162,
            "return": [],
            "arguments": {
                "level": [
                    "str",
                    "int"
                ]
            }
        },
        "LoggingReporter.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "logger": [
                    "str",
                    "list[str]",
                    "tuple[tuple[typing.Union[str,...]]]"
                ]
            }
        },
        "LoggingReporter.show_scenario_result": {
            "name": "show_scenario_result",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "scenario": [
                    "str",
                    "None",
                    "dict[str, str]"
                ]
            }
        },
        "LoggingReporter.show_case_result": {
            "name": "show_case_result",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "case": [
                    "int",
                    "dict[, ]",
                    "str"
                ]
            }
        },
        "LoggingReporter.show_execution": {
            "name": "show_execution",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "execution": [
                    "dict[str, typing.Any]",
                    "list[str]"
                ]
            }
        },
        "LoggingReporter.show_response_verification": {
            "name": "show_response_verification",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "verification": [
                    "str",
                    "bool",
                    "list[str]",
                    "bytes"
                ],
                "label": [
                    "typing.Text"
                ]
            }
        },
        "LoggingReporter.show_verification": {
            "name": "show_verification",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "verification": [
                    "dict[, ]",
                    "str",
                    "bytes"
                ],
                "label": [
                    "str",
                    "int",
                    "list[int]"
                ],
                "child_label": [
                    "typing.Text"
                ]
            }
        },
        "LoggingReporter.show_status": {
            "name": "show_status",
            "location": 109,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "status": [
                    "str",
                    "typing.Mapping",
                    "int"
                ]
            }
        },
        "LoggingReporter._log": {
            "name": "_log",
            "location": 113,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "level": [
                    "str",
                    "int",
                    "bytes"
                ],
                "message": [
                    "str",
                    "int",
                    "bytes"
                ]
            }
        },
        "LoggingReporter._multi_line_message": {
            "name": "_multi_line_message",
            "location": 116,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "level": [
                    "int",
                    "str"
                ],
                "message": [
                    "str",
                    "typing.BinaryIO",
                    "typing.IO",
                    "bytes",
                    "list[str]"
                ]
            }
        },
        "LoggingReporter._nesting": {
            "name": "_nesting",
            "location": 121,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "preacher-master/preacher/presentation/__init__.py": {},
    "preacher-master/preacher/presentation/listener/factory.py": {
        "create_listener": {
            "name": "create_listener",
            "location": 10,
            "return": [
                "MergingListener"
            ],
            "arguments": {
                "level": [],
                "formatter": [
                    "None",
                    "typing.Callable[, ]",
                    "bytes"
                ],
                "report_dir": [
                    "None",
                    "str",
                    "list[typing.Optional[str]]",
                    "typing.Callable[..., bool]"
                ]
            }
        }
    },
    "preacher-master/preacher/presentation/listener/html.py": {
        "create_html_reporting_listener": {
            "name": "create_html_reporting_listener",
            "location": 27,
            "return": [
                "HtmlReportingListener"
            ],
            "arguments": {
                "path": [
                    "str",
                    "list[dict[, ]]"
                ]
            }
        },
        "HtmlReportingListener.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "reporter": [
                    "int",
                    "float"
                ]
            }
        },
        "HtmlReportingListener.on_execution": {
            "name": "on_execution",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "execution": [
                    "dict[str, str]",
                    "str",
                    "dict[, ]",
                    "int",
                    "bytes"
                ],
                "response": [
                    "dict[str, str]",
                    "str",
                    "dict[, ]",
                    "int",
                    "bytes"
                ]
            }
        },
        "HtmlReportingListener.on_scenario": {
            "name": "on_scenario",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "result": [
                    "list[typing.Union[\"PipeChain\",str]]",
                    "typing.Callable[, ]",
                    "str"
                ]
            }
        },
        "HtmlReportingListener.on_end": {
            "name": "on_end",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "status": [
                    "str",
                    "float",
                    "None"
                ]
            }
        }
    },
    "preacher-master/preacher/presentation/listener/logging.py": {
        "create_logging_reporting_listener": {
            "name": "create_logging_reporting_listener",
            "location": 21,
            "return": [
                "LoggingReportingListener"
            ],
            "arguments": {
                "reporter": [
                    "None",
                    "str"
                ],
                "logger": [
                    "None",
                    "str",
                    "list[str]"
                ],
                "logger_name": [
                    "typing.Text"
                ],
                "level": [],
                "handlers": [
                    "None",
                    "str",
                    "list[str]"
                ],
                "formatter": [
                    "None",
                    "str",
                    "list[str]"
                ]
            }
        },
        "LoggingReportingListener.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "reporter": [
                    "int",
                    "float"
                ]
            }
        },
        "LoggingReportingListener.on_scenario": {
            "name": "on_scenario",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "result": [
                    "bool"
                ]
            }
        },
        "LoggingReportingListener.on_end": {
            "name": "on_end",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "status": [
                    "str",
                    "int",
                    "dict[, ]"
                ]
            }
        }
    },
    "preacher-master/preacher/presentation/listener/__init__.py": {},
    "preacher-master/tests/__init__.py": {},
    "preacher-master/tests/app/__init__.py": {},
    "preacher-master/tests/app/cli/test_app.py": {
        "base_dir": {
            "name": "base_dir",
            "location": 25,
            "return": [
                "typing.Generator[TemporaryDirectory]"
            ],
            "arguments": {}
        },
        "executor": {
            "name": "executor",
            "location": 37,
            "return": [
                "NonCallableMagicMock"
            ],
            "arguments": {}
        },
        "executor_factory": {
            "name": "executor_factory",
            "location": 44,
            "return": [
                "NonCallableMock"
            ],
            "arguments": {
                "executor": [
                    "typing.Iterable[str]",
                    "str",
                    "bool"
                ]
            }
        },
        "test_app_normal": {
            "name": "test_app_normal",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [],
                "base_dir": [
                    "str"
                ],
                "executor": [
                    "str",
                    "None"
                ],
                "executor_factory": [
                    "str"
                ]
            }
        },
        "test_app_plugin_loading_fails": {
            "name": "test_app_plugin_loading_fails",
            "location": 124,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "dict[, ]"
                ]
            }
        },
        "test_app_scenario_running_not_succeeds": {
            "name": "test_app_scenario_running_not_succeeds",
            "location": 129,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [],
                "executor_factory": [],
                "executor": []
            }
        },
        "test_app_scenario_running_raises_an_unexpected_error": {
            "name": "test_app_scenario_running_raises_an_unexpected_error",
            "location": 140,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [],
                "executor_factory": [],
                "executor": []
            }
        },
        "test_app_normal._run": {
            "name": "_run",
            "location": 66,
            "return": [],
            "arguments": {
                "scenarios": []
            }
        }
    },
    "preacher-master/tests/app/cli/test_executor_factory.py": {
        "test_process_pool_factory": {
            "name": "test_process_pool_factory",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_thread_pool_factory": {
            "name": "test_thread_pool_factory",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "preacher-master/tests/app/cli/test_logging.py": {
        "test_colored_formatter": {
            "name": "test_colored_formatter",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_create_system_logger": {
            "name": "test_create_system_logger",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "verbosity": [
                    "str",
                    "dict[str, str]"
                ],
                "expected_level": [
                    "str",
                    "bytes",
                    "dict[str, int]"
                ]
            }
        }
    },
    "preacher-master/tests/app/cli/test_main.py": {
        "base_dir": {
            "name": "base_dir",
            "location": 15,
            "return": [
                "typing.Generator[TemporaryDirectory]"
            ],
            "arguments": {}
        },
        "test_show_and_exit": {
            "name": "test_show_and_exit",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "args": []
            }
        },
        "test_given_invalid_options": {
            "name": "test_given_invalid_options",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "args": [],
                "base_dir": [
                    "list[int]",
                    "str",
                    "list[str]"
                ]
            }
        },
        "test_default": {
            "name": "test_default",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [],
                "env": [
                    "list[str]"
                ]
            }
        },
        "test_arguments": {
            "name": "test_arguments",
            "location": 108,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [],
                "base_dir": [
                    "str"
                ]
            }
        },
        "test_environ": {
            "name": "test_environ",
            "location": 173,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [],
                "base_dir": [
                    "str",
                    "typing.Iterable[str]"
                ]
            }
        },
        "test_exit_code": {
            "name": "test_exit_code",
            "location": 212,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [],
                "exit_code": [
                    "str"
                ]
            }
        }
    },
    "preacher-master/tests/app/cli/test_option.py": {
        "test_level_type": {
            "name": "test_level_type",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_executor_factory_type": {
            "name": "test_executor_factory_type",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "preacher-master/tests/app/cli/__init__.py": {},
    "preacher-master/tests/compilation/test_argument.py": {
        "test_given_single_value": {
            "name": "test_given_single_value",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_given_nested_value": {
            "name": "test_given_nested_value",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_given_invalid_key": {
            "name": "test_given_invalid_key",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "preacher-master/tests/compilation/test_compilation_error.py": {
        "test_render_path": {
            "name": "test_render_path",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "preacher-master/tests/compilation/test_datetime_compilation.py": {
        "test_compile_datetime_format_given_invalid": {
            "name": "test_compile_datetime_format_given_invalid",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "obj": [
                    "str"
                ]
            }
        },
        "test_compile_datetime_format_iso8601": {
            "name": "test_compile_datetime_format_iso8601",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "obj": [
                    "str"
                ]
            }
        },
        "test_compile_datetime_format_strftime": {
            "name": "test_compile_datetime_format_strftime",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [],
                "obj": [
                    "tuple[str]",
                    "str",
                    "bytes"
                ]
            }
        }
    },
    "preacher-master/tests/compilation/test_parameter_compile.py": {
        "test_given_invalid_obj": {
            "name": "test_given_invalid_obj",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "obj": [
                    "dict[, ]",
                    "str"
                ],
                "expected_path": []
            }
        },
        "test_given_empty_mapping": {
            "name": "test_given_empty_mapping",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_given_filled_mapping": {
            "name": "test_given_filled_mapping",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "preacher-master/tests/compilation/__init__.py": {},
    "preacher-master/tests/compilation/extraction/test_extraction_compiler.py": {
        "jq_factory": {
            "name": "jq_factory",
            "location": 15,
            "return": [
                "Mock"
            ],
            "arguments": {}
        },
        "xpath_factory": {
            "name": "xpath_factory",
            "location": 20,
            "return": [
                "Mock"
            ],
            "arguments": {}
        },
        "compiler": {
            "name": "compiler",
            "location": 25,
            "return": [
                "ExtractionCompiler"
            ],
            "arguments": {
                "jq_factory": [
                    "int"
                ],
                "xpath_factory": [
                    "int"
                ]
            }
        },
        "test_when_given_invalid_value": {
            "name": "test_when_given_invalid_value",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "compiler": [],
                "value": [
                    "str",
                    "None"
                ],
                "expected_message": [
                    "str",
                    "dict[str, typing.Any]"
                ],
                "expected_path": [
                    "str",
                    "None"
                ]
            }
        },
        "test_when_given_a_string": {
            "name": "test_when_given_a_string",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "compiler": [],
                "jq_factory": [],
                "xpath_factory": []
            }
        },
        "test_when_given_a_jq_object": {
            "name": "test_when_given_a_jq_object",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "compiler": [],
                "jq_factory": [],
                "xpath_factory": []
            }
        },
        "test_when_given_an_xpath_object": {
            "name": "test_when_given_an_xpath_object",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "compiler": [
                    "str",
                    "typing.Iterable[]"
                ],
                "jq_factory": [],
                "xpath_factory": []
            }
        },
        "test_compile_xpath_when_given_invalid_options": {
            "name": "test_compile_xpath_when_given_invalid_options",
            "location": 119,
            "return": [
                "None"
            ],
            "arguments": {
                "value": [
                    "str",
                    "dict[, ]",
                    "None"
                ],
                "expected_message": [
                    "str",
                    "bytes",
                    "typing.BinaryIO"
                ],
                "expected_path": [
                    "str",
                    "None"
                ]
            }
        },
        "test_compile_xpath": {
            "name": "test_compile_xpath",
            "location": 137,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "bool",
                    "dict[, ]"
                ],
                "query": [
                    "typing.Callable[, ]"
                ],
                "options": [
                    "typing.Callable[, ]"
                ],
                "expected_call": []
            }
        },
        "test_compile_key_when_given_invalid_options": {
            "name": "test_compile_key_when_given_invalid_options",
            "location": 152,
            "return": [
                "None"
            ],
            "arguments": {
                "value": [
                    "str",
                    "None"
                ],
                "expected_message": [
                    "str",
                    "dict[str, dict[str, typing.Any]]",
                    "bool"
                ],
                "expected_path": [
                    "str"
                ]
            }
        },
        "test_compile_key": {
            "name": "test_compile_key",
            "location": 166,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "bool",
                    "dict[, ]"
                ],
                "query": [
                    "set[str]",
                    "dict[, ]",
                    "set[int]",
                    "None"
                ],
                "options": [
                    "set[str]",
                    "dict[, ]",
                    "set[int]",
                    "None"
                ],
                "expected_call": [
                    "int"
                ]
            }
        },
        "test_add_default_extractions": {
            "name": "test_add_default_extractions",
            "location": 194,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "bool"
                ],
                "value": [
                    "typing.Callable[, ]",
                    "str",
                    "dict[, ]"
                ],
                "expected_factory": [
                    "int"
                ],
                "expected_call": []
            }
        },
        "test_compile_jq_when_given_invalid_options": {
            "name": "test_compile_jq_when_given_invalid_options",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "value": [
                    "str",
                    "dict[, ]",
                    "None"
                ],
                "expected_message": [
                    "str",
                    "bytes",
                    "typing.BinaryIO"
                ],
                "expected_path": [
                    "str",
                    "None"
                ]
            }
        },
        "test_compile_jq": {
            "name": "test_compile_jq",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "int"
                ],
                "query": [
                    "typing.Callable[, ]"
                ],
                "options": [
                    "typing.Callable[, ]"
                ],
                "expected_call": []
            }
        }
    },
    "preacher-master/tests/compilation/extraction/__init__.py": {},
    "preacher-master/tests/compilation/request/test_request_body_compiled_json.py": {
        "test_replace": {
            "name": "test_replace",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_compile_and_replace": {
            "name": "test_compile_and_replace",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_fix_hollowed": {
            "name": "test_fix_hollowed",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_fix_filled": {
            "name": "test_fix_filled",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        }
    },
    "preacher-master/tests/compilation/request/test_request_body_compiled_urlencoded.py": {
        "test_replace_given_another_type": {
            "name": "test_replace_given_another_type",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_replace_given_the_same_type": {
            "name": "test_replace_given_the_same_type",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_compile_and_replace_empty": {
            "name": "test_compile_and_replace_empty",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_compile_and_replace_given_invalid_data": {
            "name": "test_compile_and_replace_given_invalid_data",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_compile_and_replace_given_valid_data": {
            "name": "test_compile_and_replace_given_valid_data",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_fix_empty": {
            "name": "test_fix_empty",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_fix_filled": {
            "name": "test_fix_filled",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        }
    },
    "preacher-master/tests/compilation/request/test_request_body_compiler.py": {
        "default_body": {
            "name": "default_body",
            "location": 16,
            "return": [
                "NonCallableMock"
            ],
            "arguments": {}
        },
        "compiler": {
            "name": "compiler",
            "location": 23,
            "return": [
                "RequestBodyCompiler"
            ],
            "arguments": {
                "default_body": [
                    "str",
                    "None",
                    "int"
                ]
            }
        },
        "test_compile_given_invalid_obj": {
            "name": "test_compile_given_invalid_obj",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "compiler": [],
                "obj": [
                    "str",
                    "typing.Callable[, ]",
                    "dict[, ]"
                ],
                "expected_path": [
                    "str",
                    "typing.Callable[str, str]",
                    "typing.Iterable[str]"
                ]
            }
        },
        "test_compile_empty": {
            "name": "test_compile_empty",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "compiler": [],
                "default_body": [
                    "str",
                    "bool",
                    "typing.Callable[typing.Any, bool]",
                    "None",
                    "typing.BinaryIO"
                ]
            }
        },
        "test_given_type": {
            "name": "test_given_type",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "compiler": [],
                "default_body": [
                    "str"
                ],
                "type_key": [
                    "str",
                    "typing.Callable[, ]",
                    "bool"
                ],
                "expected": [
                    "dict[, ]",
                    "str",
                    "None"
                ]
            }
        },
        "test_of_default": {
            "name": "test_of_default",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "compiler": [
                    "str",
                    "dict[, ]",
                    "bool",
                    "dict[str, typing.Any]"
                ],
                "default_body": [
                    "list[str]"
                ],
                "mocker": []
            }
        }
    },
    "preacher-master/tests/compilation/request/test_request_compiled.py": {
        "test_replace": {
            "name": "test_replace",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_fix_hollow": {
            "name": "test_fix_hollow",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_fix_filled": {
            "name": "test_fix_filled",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        }
    },
    "preacher-master/tests/compilation/request/test_request_compiler.py": {
        "body": {
            "name": "body",
            "location": 15,
            "return": [
                "NonCallableMock"
            ],
            "arguments": {}
        },
        "default": {
            "name": "default",
            "location": 22,
            "return": [
                "RequestCompiled"
            ],
            "arguments": {}
        },
        "compiler": {
            "name": "compiler",
            "location": 33,
            "return": [
                "RequestCompiler"
            ],
            "arguments": {
                "body": [
                    "str",
                    "bytes",
                    "dict[str, typing.Any]",
                    "bool",
                    "dict[str, str]"
                ],
                "default": [
                    "str",
                    "bytes",
                    "dict[str, typing.Any]",
                    "bool",
                    "dict[str, str]"
                ]
            }
        },
        "test_given_an_invalid_obj": {
            "name": "test_given_an_invalid_obj",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "compiler": [],
                "obj": [
                    "str",
                    "bool",
                    "typing.Callable[, ]"
                ],
                "expected_path": [
                    "str"
                ]
            }
        },
        "test_given_an_empty_mapping": {
            "name": "test_given_an_empty_mapping",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "compiler": []
            }
        },
        "test_given_a_valid_method": {
            "name": "test_given_a_valid_method",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "compiler": [],
                "method_obj": [
                    "str",
                    "dict[str, typing.Any]",
                    "list[list[str]]"
                ],
                "expected": [
                    "str",
                    "None"
                ]
            }
        },
        "test_given_valid_headers": {
            "name": "test_given_valid_headers",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "compiler": [],
                "headers_obj": [
                    "str",
                    "bool"
                ],
                "expected": [
                    "str",
                    "dict[str, typing.Any]",
                    "list[dict[str, typing.Any]]",
                    "int"
                ]
            }
        },
        "test_given_an_invalid_params": {
            "name": "test_given_an_invalid_params",
            "location": 95,
            "return": [
                "None"
            ],
            "arguments": {
                "compiler": [],
                "mocker": []
            }
        },
        "test_given_valid_params": {
            "name": "test_given_valid_params",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {
                "compiler": [
                    "dict[, ]"
                ],
                "mocker": []
            }
        },
        "test_given_invalid_body": {
            "name": "test_given_invalid_body",
            "location": 116,
            "return": [
                "None"
            ],
            "arguments": {
                "compiler": [],
                "body": [
                    "str",
                    "int"
                ]
            }
        },
        "test_given_valid_body": {
            "name": "test_given_valid_body",
            "location": 126,
            "return": [
                "None"
            ],
            "arguments": {
                "compiler": [
                    "dict[, ]",
                    "str"
                ],
                "body": [
                    "str"
                ]
            }
        },
        "test_given_a_string": {
            "name": "test_given_a_string",
            "location": 135,
            "return": [
                "None"
            ],
            "arguments": {
                "compiler": []
            }
        },
        "test_of_default_no_body": {
            "name": "test_of_default_no_body",
            "location": 144,
            "return": [
                "None"
            ],
            "arguments": {
                "compiler": [],
                "body": [
                    "str"
                ],
                "mocker": []
            }
        },
        "test_of_default_body": {
            "name": "test_of_default_body",
            "location": 170,
            "return": [
                "None"
            ],
            "arguments": {
                "compiler": [],
                "body": [],
                "mocker": []
            }
        }
    },
    "preacher-master/tests/compilation/request/test_url_params_compile.py": {
        "test_given_invalid_object": {
            "name": "test_given_invalid_object",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "obj": [
                    "str"
                ],
                "expected_path": []
            }
        },
        "test_given_valid_params": {
            "name": "test_given_valid_params",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "obj": [
                    "bool"
                ]
            }
        }
    },
    "preacher-master/tests/compilation/request/__init__.py": {},
    "preacher-master/tests/compilation/scenario/test_case_compiled.py": {
        "test_replace": {
            "name": "test_replace",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_fix_hollow": {
            "name": "test_fix_hollow",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_fix_filled": {
            "name": "test_fix_filled",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        }
    },
    "preacher-master/tests/compilation/scenario/test_case_compiler.py": {
        "compiler": {
            "name": "compiler",
            "location": 15,
            "return": [
                "CaseCompiler"
            ],
            "arguments": {
                "req": [
                    "str",
                    "typing.Iterable[T]",
                    "int"
                ],
                "res": [
                    "str",
                    "typing.Iterable[T]",
                    "int"
                ],
                "desc": [
                    "str",
                    "typing.Iterable[T]",
                    "int"
                ]
            }
        },
        "req": {
            "name": "req",
            "location": 20,
            "return": [
                "NonCallableMock"
            ],
            "arguments": {}
        },
        "res": {
            "name": "res",
            "location": 28,
            "return": [
                "NonCallableMock"
            ],
            "arguments": {}
        },
        "desc": {
            "name": "desc",
            "location": 36,
            "return": [
                "NonCallableMock"
            ],
            "arguments": {}
        },
        "test_given_invalid_values": {
            "name": "test_given_invalid_values",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "compiler": [],
                "value": [
                    "str"
                ],
                "expected_path": [
                    "str"
                ]
            }
        },
        "test_conditions_compilation_fails": {
            "name": "test_conditions_compilation_fails",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "compiler": [],
                "desc": [
                    "str"
                ]
            }
        },
        "test_request_compilation_fails": {
            "name": "test_request_compilation_fails",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "compiler": [],
                "req": [
                    "str",
                    "dict[str, typing.Any]",
                    "dict[, ]"
                ]
            }
        },
        "test_response_compilation_fails": {
            "name": "test_response_compilation_fails",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "compiler": [],
                "res": [
                    "str"
                ]
            }
        },
        "test_given_an_empty_object": {
            "name": "test_given_an_empty_object",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {
                "compiler": [],
                "req": [
                    "bool"
                ],
                "res": [
                    "typing.Callable[, ]"
                ]
            }
        },
        "test_creates_a_case": {
            "name": "test_creates_a_case",
            "location": 97,
            "return": [
                "None"
            ],
            "arguments": {
                "compiler": [],
                "req": [
                    "bool"
                ],
                "res": [],
                "desc": [
                    "bool"
                ]
            }
        },
        "initial_default": {
            "name": "initial_default",
            "location": 122,
            "return": [
                "NonCallableMock"
            ],
            "arguments": {}
        },
        "test_given_hollow_default": {
            "name": "test_given_hollow_default",
            "location": 128,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [],
                "req": [],
                "res": [],
                "desc": [],
                "initial_default": [
                    "typing.Type"
                ]
            }
        },
        "test_given_filled_default": {
            "name": "test_given_filled_default",
            "location": 148,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [],
                "req": [
                    "bool",
                    "str"
                ],
                "res": [
                    "typing.Iterable[typing.Iterable[typing.Any]]"
                ],
                "desc": [],
                "initial_default": [
                    "typing.Type"
                ]
            }
        },
        "test_compile_fixed": {
            "name": "test_compile_fixed",
            "location": 172,
            "return": [
                "None"
            ],
            "arguments": {
                "compiler": [
                    "bool",
                    "str"
                ],
                "mocker": []
            }
        },
        "test_compile_default": {
            "name": "test_compile_default",
            "location": 184,
            "return": [
                "None"
            ],
            "arguments": {
                "compiler": [
                    "dict[, ]",
                    "dict[str, typing.Any]"
                ],
                "mocker": [
                    "dict[, ]",
                    "dict[str, typing.Any]"
                ]
            }
        }
    },
    "preacher-master/tests/compilation/scenario/test_factory.py": {
        "test_creates_compiler": {
            "name": "test_creates_compiler",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "preacher-master/tests/compilation/scenario/test_integration.py": {
        "test_compile_scenario": {
            "name": "test_compile_scenario",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        }
    },
    "preacher-master/tests/compilation/scenario/test_scenario_compiler.py": {
        "compiler": {
            "name": "compiler",
            "location": 16,
            "return": [
                "ScenarioCompiler"
            ],
            "arguments": {
                "description": [
                    "str"
                ],
                "case": [
                    "str"
                ]
            }
        },
        "description": {
            "name": "description",
            "location": 21,
            "return": [
                "NonCallableMock"
            ],
            "arguments": {}
        },
        "case": {
            "name": "case",
            "location": 28,
            "return": [
                "NonCallableMock"
            ],
            "arguments": {
                "case_of_default": [
                    "str",
                    "list[str]"
                ]
            }
        },
        "case_of_default": {
            "name": "case_of_default",
            "location": 35,
            "return": [
                "NonCallableMock"
            ],
            "arguments": {
                "sub_case": [
                    "str",
                    "typing.Iterable[str]",
                    "bool"
                ]
            }
        },
        "sub_case": {
            "name": "sub_case",
            "location": 43,
            "return": [
                "NonCallableMock"
            ],
            "arguments": {}
        },
        "test_when_given_invalid_values": {
            "name": "test_when_given_invalid_values",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "value": [
                    "str",
                    "int"
                ],
                "expected_path": [
                    "str"
                ],
                "compiler": []
            }
        },
        "test_given_an_empty_object": {
            "name": "test_given_an_empty_object",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "compiler": [],
                "case": [
                    "dict[str, typing.Any]",
                    "typing.Callable[, ]"
                ],
                "case_of_default": [
                    "dict[str, typing.Any]",
                    "bytes"
                ],
                "mocker": []
            }
        },
        "test_given_a_filled_object": {
            "name": "test_given_a_filled_object",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "compiler": [],
                "description": [],
                "case": [],
                "case_of_default": [
                    "tuple[int]",
                    "bool"
                ],
                "sub_case": [],
                "mocker": []
            }
        },
        "test_given_empty_parameter": {
            "name": "test_given_empty_parameter",
            "location": 143,
            "return": [
                "None"
            ],
            "arguments": {
                "compiler": [],
                "mocker": []
            }
        },
        "test_when_parameter_compilation_fails": {
            "name": "test_when_parameter_compilation_fails",
            "location": 154,
            "return": [
                "None"
            ],
            "arguments": {
                "compiler": [],
                "mocker": []
            }
        },
        "test_given_filled_parameters": {
            "name": "test_given_filled_parameters",
            "location": 165,
            "return": [
                "None"
            ],
            "arguments": {
                "compiler": [],
                "description": [
                    "int"
                ],
                "case": [
                    "int"
                ],
                "case_of_default": [
                    "tuple[int]",
                    "typing.Callable[, ]",
                    "Exception",
                    "None",
                    "int",
                    "float"
                ],
                "mocker": []
            }
        },
        "test_compile_flattening": {
            "name": "test_compile_flattening",
            "location": 264,
            "return": [
                "None"
            ],
            "arguments": {
                "compiler": []
            }
        }
    },
    "preacher-master/tests/compilation/scenario/__init__.py": {},
    "preacher-master/tests/compilation/util/test_functional.py": {
        "succeeds": {
            "name": "succeeds",
            "location": 9,
            "return": [
                "int",
                "str",
                "typing.Iterable[C]"
            ],
            "arguments": {
                "arg": [
                    "int",
                    "str",
                    "typing.Iterable[C]"
                ]
            }
        },
        "test_map_compile_for_empty_list": {
            "name": "test_map_compile_for_empty_list",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_map_compile_for_successful_func": {
            "name": "test_map_compile_for_successful_func",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_map_compile_for_failing_func": {
            "name": "test_map_compile_for_failing_func",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_run_recursively_with_invalid_obj": {
            "name": "test_run_recursively_with_invalid_obj",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "obj": [
                    "list[str]",
                    "str",
                    "None",
                    "bool"
                ],
                "expected_path": [
                    "str",
                    "None"
                ]
            }
        },
        "test_run_recursively_with_valid_obj": {
            "name": "test_run_recursively_with_valid_obj",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "obj": [
                    "str",
                    "typing.Iterable[int]",
                    "int"
                ],
                "expected": [
                    "str",
                    "typing.Iterable[int]",
                    "int"
                ]
            }
        },
        "test_compile_flattening_error": {
            "name": "test_compile_flattening_error",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_compile_flattening": {
            "name": "test_compile_flattening",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {
                "obj": [
                    "str",
                    "typing.Iterable[int]"
                ],
                "expected": [
                    "str",
                    "typing.Iterable[int]"
                ]
            }
        },
        "test_run_recursively_with_invalid_obj._func": {
            "name": "_func",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "value": []
            }
        },
        "test_compile_flattening_error._compile": {
            "name": "_compile",
            "location": 71,
            "return": [
                "bool"
            ],
            "arguments": {
                "flag": []
            }
        }
    },
    "preacher-master/tests/compilation/util/__init__.py": {},
    "preacher-master/tests/compilation/verification/test_description_compiler.py": {
        "compiler": {
            "name": "compiler",
            "location": 14,
            "return": [
                "DescriptionCompiler"
            ],
            "arguments": {
                "extraction": [
                    "int",
                    "str"
                ],
                "predicate": [
                    "int",
                    "str"
                ]
            }
        },
        "extraction": {
            "name": "extraction",
            "location": 19,
            "return": [
                "NonCallableMock"
            ],
            "arguments": {}
        },
        "predicate": {
            "name": "predicate",
            "location": 26,
            "return": [
                "NonCallableMock"
            ],
            "arguments": {}
        },
        "test_given_not_a_mapping": {
            "name": "test_given_not_a_mapping",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "compiler": []
            }
        },
        "test_given_a_string_predicate": {
            "name": "test_given_a_string_predicate",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [],
                "compiler": [],
                "extraction": [],
                "predicate": []
            }
        },
        "test_given_a_mapping_predicate": {
            "name": "test_given_a_mapping_predicate",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [],
                "compiler": [],
                "extraction": [],
                "predicate": [
                    "str",
                    "int"
                ]
            }
        },
        "test_given_a_list_of_mapping_predicates": {
            "name": "test_given_a_list_of_mapping_predicates",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [],
                "compiler": [],
                "extraction": [],
                "predicate": []
            }
        }
    },
    "preacher-master/tests/compilation/verification/test_matcher_factory_compilation.py": {
        "compiler": {
            "name": "compiler",
            "location": 11,
            "return": [
                "MatcherFactoryCompiler"
            ],
            "arguments": {}
        },
        "test_invalid_mapping": {
            "name": "test_invalid_mapping",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "compiler": [],
                "obj": []
            }
        },
        "test_matcher_matchers": {
            "name": "test_matcher_matchers",
            "location": 177,
            "return": [
                "None"
            ],
            "arguments": {
                "compiler": [],
                "obj": [
                    "dict[, ]",
                    "typing.Callable[, ]",
                    "str",
                    "list[str]"
                ],
                "item": [
                    "str",
                    "int",
                    "typing.Callable[, ]",
                    "dict[str, typing.Any]",
                    "dict[, ]"
                ],
                "expected": [
                    "str",
                    "int",
                    "typing.Callable[, ]",
                    "dict[str, typing.Any]",
                    "dict[, ]"
                ]
            }
        },
        "test_matcher_creation_failure": {
            "name": "test_matcher_creation_failure",
            "location": 193,
            "return": [
                "None"
            ],
            "arguments": {
                "compiler": [],
                "obj": [
                    "dict[, ]"
                ]
            }
        },
        "test_matcher_matching_failure": {
            "name": "test_matcher_matching_failure",
            "location": 203,
            "return": [
                "None"
            ],
            "arguments": {
                "compiler": [],
                "obj": [],
                "item": [
                    "int",
                    "str"
                ]
            }
        }
    },
    "preacher-master/tests/compilation/verification/test_predicate_compiler.py": {
        "test_matcher_predicate": {
            "name": "test_matcher_predicate",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        }
    },
    "preacher-master/tests/compilation/verification/test_response_description_compiled.py": {
        "test_replace": {
            "name": "test_replace",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_fix_hollow": {
            "name": "test_fix_hollow",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "ctor": []
            }
        },
        "test_fix_filled": {
            "name": "test_fix_filled",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "ctor": [
                    "str"
                ]
            }
        }
    },
    "preacher-master/tests/compilation/verification/test_response_description_compiler.py": {
        "compiler": {
            "name": "compiler",
            "location": 15,
            "return": [
                "ResponseDescriptionCompiler"
            ],
            "arguments": {
                "predicate": [
                    "str"
                ],
                "description": [
                    "str"
                ]
            }
        },
        "predicate": {
            "name": "predicate",
            "location": 20,
            "return": [
                "NonCallableMock"
            ],
            "arguments": {}
        },
        "description": {
            "name": "description",
            "location": 27,
            "return": [
                "NonCallableMock"
            ],
            "arguments": {}
        },
        "test_given_an_invalid_value": {
            "name": "test_given_an_invalid_value",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "obj": [
                    "str",
                    "dict[str, object]"
                ],
                "expected_path": [
                    "str"
                ],
                "compiler": []
            }
        },
        "test_given_an_empty_mapping": {
            "name": "test_given_an_empty_mapping",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "compiler": [],
                "predicate": [],
                "description": []
            }
        },
        "test_given_simple_values": {
            "name": "test_given_simple_values",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "compiler": [],
                "predicate": [
                    "list[dict[str, typing.Any]]",
                    "int",
                    "typing.Type"
                ],
                "description": [
                    "dict[str, str]"
                ]
            }
        },
        "test_given_filled_values": {
            "name": "test_given_filled_values",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "compiler": [],
                "predicate": [
                    "bool"
                ],
                "description": [
                    "str",
                    "dict[str, str]"
                ]
            }
        },
        "initial_default": {
            "name": "initial_default",
            "location": 95,
            "return": [
                "NonCallableMock"
            ],
            "arguments": {}
        },
        "test_given_hollow_default": {
            "name": "test_given_hollow_default",
            "location": 101,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [],
                "predicate": [],
                "description": [],
                "initial_default": []
            }
        },
        "test_given_filled_default": {
            "name": "test_given_filled_default",
            "location": 123,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [],
                "predicate": [],
                "description": [],
                "initial_default": []
            }
        }
    },
    "preacher-master/tests/compilation/verification/__init__.py": {},
    "preacher-master/tests/compilation/yaml/test_integration.py": {
        "base_dir": {
            "name": "base_dir",
            "location": 11,
            "return": [
                "typing.Generator[TemporaryDirectory]"
            ],
            "arguments": {}
        },
        "test_load_objs_empty": {
            "name": "test_load_objs_empty",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_load_objs_filled": {
            "name": "test_load_objs_filled",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "base_dir": [
                    "str"
                ]
            }
        }
    },
    "preacher-master/tests/compilation/yaml/__init__.py": {},
    "preacher-master/tests/compilation/yaml/tag/test_argument_tag.py": {
        "loader": {
            "name": "loader",
            "location": 10,
            "return": [
                "Loader"
            ],
            "arguments": {}
        },
        "test_given_invalid_arguments": {
            "name": "test_given_invalid_arguments",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "loader": [],
                "content": [
                    "str",
                    "bytes",
                    "int"
                ],
                "expected_message": [
                    "str",
                    "None"
                ]
            }
        },
        "test_given_valid_arguments": {
            "name": "test_given_valid_arguments",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "loader": []
            }
        }
    },
    "preacher-master/tests/compilation/yaml/tag/test_context.py": {
        "loader": {
            "name": "loader",
            "location": 11,
            "return": [
                "Loader"
            ],
            "arguments": {}
        },
        "test_given_invalid_arguments": {
            "name": "test_given_invalid_arguments",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "loader": [],
                "content": [
                    "str",
                    "bytes",
                    "int"
                ],
                "expected_message": [
                    "str",
                    "None"
                ]
            }
        },
        "test_given_valid_arguments": {
            "name": "test_given_valid_arguments",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "loader": []
            }
        }
    },
    "preacher-master/tests/compilation/yaml/tag/test_relative_datetime_tag.py": {
        "loader": {
            "name": "loader",
            "location": 13,
            "return": [
                "Loader"
            ],
            "arguments": {}
        },
        "test_given_datetime_that_is_offset_naive": {
            "name": "test_given_datetime_that_is_offset_naive",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "loader": []
            }
        },
        "test_given_datetime_that_is_offset_aware": {
            "name": "test_given_datetime_that_is_offset_aware",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "loader": []
            }
        },
        "test_given_invalid_relative_datetime": {
            "name": "test_given_invalid_relative_datetime",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "loader": [],
                "content": [
                    "str",
                    "bytes",
                    "int"
                ],
                "expected_message": [
                    "str",
                    "None"
                ]
            }
        },
        "test_given_an_empty_relative_datetime": {
            "name": "test_given_an_empty_relative_datetime",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "loader": []
            }
        },
        "test_given_a_valid_string_relative_datetime": {
            "name": "test_given_a_valid_string_relative_datetime",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "loader": []
            }
        },
        "test_given_an_empty_mapping_relative_datetime": {
            "name": "test_given_an_empty_mapping_relative_datetime",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "loader": []
            }
        },
        "test_given_a_filled_mapping_relative_datetime": {
            "name": "test_given_a_filled_mapping_relative_datetime",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "loader": []
            }
        }
    },
    "preacher-master/tests/compilation/yaml/tag/__init__.py": {},
    "preacher-master/tests/core/test_context.py": {
        "test_context": {
            "name": "test_context",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_closed_context": {
            "name": "test_closed_context",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "preacher-master/tests/core/test_datetime.py": {
        "test_date_time_format_interface": {
            "name": "test_date_time_format_interface",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_iso8601_format_datetime": {
            "name": "test_iso8601_format_datetime",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "value": [
                    "int",
                    "str",
                    "bytes"
                ],
                "expected": [
                    "int",
                    "str",
                    "bytes"
                ]
            }
        },
        "test_iso8601_format_datetime_invalid": {
            "name": "test_iso8601_format_datetime_invalid",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "value": [
                    "str",
                    "typing.Mapping"
                ]
            }
        },
        "test_iso8601_parse_datetime": {
            "name": "test_iso8601_parse_datetime",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "value": [
                    "typing.Mapping",
                    "str",
                    "int",
                    "dict[, ]"
                ],
                "expected": [
                    "typing.Mapping",
                    "str",
                    "int",
                    "dict[, ]"
                ]
            }
        },
        "test_strftime_format_datetime": {
            "name": "test_strftime_format_datetime",
            "location": 97,
            "return": [
                "None"
            ],
            "arguments": {
                "format_string": [
                    "str",
                    "tuple[typing.Union[str,str]]"
                ],
                "value": [
                    "str",
                    "tuple[typing.Union[str,str]]"
                ],
                "expected": [
                    "str",
                    "tuple[typing.Union[str,str]]"
                ]
            }
        },
        "test_strftime_parse_datetime": {
            "name": "test_strftime_parse_datetime",
            "location": 112,
            "return": [
                "None"
            ],
            "arguments": {
                "format_string": [
                    "str",
                    "bytes"
                ],
                "value": [
                    "str",
                    "bytes"
                ],
                "expected": [
                    "str",
                    "bytes"
                ]
            }
        },
        "test_now_jst": {
            "name": "test_now_jst",
            "location": 116,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_now_pdt": {
            "name": "test_now_pdt",
            "location": 125,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_parse_time_given_an_invalid_value": {
            "name": "test_parse_time_given_an_invalid_value",
            "location": 135,
            "return": [
                "None"
            ],
            "arguments": {
                "value": [
                    "int",
                    "str",
                    "float"
                ]
            }
        },
        "test_parse_time": {
            "name": "test_parse_time",
            "location": 155,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [],
                "value": [
                    "int",
                    "str"
                ],
                "expected": [
                    "int",
                    "str"
                ]
            }
        },
        "test_parse_timedelta_given_an_invalid_value": {
            "name": "test_parse_timedelta_given_an_invalid_value",
            "location": 161,
            "return": [
                "None"
            ],
            "arguments": {
                "value": [
                    "str",
                    "dict[, ]",
                    "typing.Callable[str, bool]",
                    "dict[str, str]"
                ]
            }
        },
        "test_parse_timedelta": {
            "name": "test_parse_timedelta",
            "location": 194,
            "return": [
                "None"
            ],
            "arguments": {
                "value": [
                    "int",
                    "typing.Iterable[]",
                    "str"
                ],
                "expected": [
                    "int",
                    "typing.Iterable[]",
                    "str"
                ]
            }
        },
        "test_date_time_format_interface._Incomplete.format_datetime": {
            "name": "format_datetime",
            "location": 19,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "test_date_time_format_interface._Incomplete.parse_datetime": {
            "name": "parse_datetime",
            "location": 22,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        }
    },
    "preacher-master/tests/core/test_functional.py": {
        "test_identify": {
            "name": "test_identify",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "preacher-master/tests/core/test_status.py": {
        "test_is_succeeded": {
            "name": "test_is_succeeded",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "status": [
                    "str",
                    "None"
                ],
                "expected": [
                    "str",
                    "None"
                ]
            }
        },
        "test_merge": {
            "name": "test_merge",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "lhs": [
                    "int",
                    "str",
                    "list[int]",
                    "float"
                ],
                "rhs": [
                    "int",
                    "str",
                    "list[int]",
                    "float"
                ],
                "expected": [
                    "int",
                    "str",
                    "list[int]",
                    "float"
                ]
            }
        },
        "test_merge_statuses": {
            "name": "test_merge_statuses",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "statuses": [
                    "str",
                    "tuple[str]",
                    "int",
                    "None"
                ],
                "expected": [
                    "str",
                    "tuple[str]",
                    "int",
                    "None"
                ]
            }
        }
    },
    "preacher-master/tests/core/__init__.py": {},
    "preacher-master/tests/core/extraction/test_analyzer_response_body_json.py": {
        "extract": {
            "name": "extract",
            "location": 11,
            "return": [
                "Mock"
            ],
            "arguments": {}
        },
        "test_for_text": {
            "name": "test_for_text",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "extract": []
            }
        },
        "test_for_mapping_on_invalid_body": {
            "name": "test_for_mapping_on_invalid_body",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "extract": []
            }
        },
        "test_for_mapping_on_valid_body": {
            "name": "test_for_mapping_on_valid_body",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "extract": []
            }
        },
        "test_for_etree": {
            "name": "test_for_etree",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "extract": []
            }
        }
    },
    "preacher-master/tests/core/extraction/test_analyzer_response_body_xml.py": {
        "body": {
            "name": "body",
            "location": 17,
            "return": [
                "NonCallableMock"
            ],
            "arguments": {}
        },
        "extract": {
            "name": "extract",
            "location": 22,
            "return": [
                "Mock"
            ],
            "arguments": {}
        },
        "test_for_etree": {
            "name": "test_for_etree",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "extract": [],
                "body": [
                    "str",
                    "bool",
                    "dict[, ]"
                ]
            }
        },
        "test_for_text": {
            "name": "test_for_text",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "body": [
                    "str",
                    "bool"
                ]
            }
        },
        "test_for_mapping": {
            "name": "test_for_mapping",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "extract": [],
                "body": [
                    "str",
                    "bool",
                    "dict[str, typing.Any]",
                    "None"
                ]
            }
        }
    },
    "preacher-master/tests/core/extraction/test_mapping_analyzer.py": {
        "test_for_text": {
            "name": "test_for_text",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_for_mapping": {
            "name": "test_for_mapping",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_for_etree": {
            "name": "test_for_etree",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_for_text._extract": {
            "name": "_extract",
            "location": 22,
            "return": [],
            "arguments": {
                "value": []
            }
        },
        "test_for_mapping._extract": {
            "name": "_extract",
            "location": 32,
            "return": [],
            "arguments": {
                "value": []
            }
        },
        "test_for_etree._extract": {
            "name": "_extract",
            "location": 42,
            "return": [],
            "arguments": {
                "_": []
            }
        }
    },
    "preacher-master/tests/core/extraction/__init__.py": {},
    "preacher-master/tests/core/extraction/impl/test_extractor_jq.py": {
        "analyzer": {
            "name": "analyzer",
            "location": 10,
            "return": [
                "NonCallableMock"
            ],
            "arguments": {}
        },
        "test_extract_single": {
            "name": "test_extract_single",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "analyzer": [
                    "str",
                    "int"
                ],
                "values": [
                    "str"
                ],
                "cast": [
                    "str",
                    "list[str]",
                    "int",
                    "dict[, ]"
                ],
                "multiple": [
                    "str",
                    "list[str]",
                    "int",
                    "dict[, ]"
                ],
                "expected": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "preacher-master/tests/core/extraction/impl/test_extractor_key.py": {
        "analyzer": {
            "name": "analyzer",
            "location": 12,
            "return": [
                "NonCallableMock"
            ],
            "arguments": {}
        },
        "test_key_extractor": {
            "name": "test_key_extractor",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "analyzer": [
                    "str"
                ]
            }
        }
    },
    "preacher-master/tests/core/extraction/impl/test_extractor_xpath.py": {
        "analyzer": {
            "name": "analyzer",
            "location": 41,
            "return": [
                "NonCallableMock"
            ],
            "arguments": {}
        },
        "test_extract_invalid": {
            "name": "test_extract_invalid",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "analyzer": [
                    "str",
                    "float"
                ]
            }
        },
        "test_extract_default": {
            "name": "test_extract_default",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "query": [
                    "str"
                ],
                "expected": [
                    "int",
                    "str",
                    "float",
                    "list[str]"
                ],
                "analyzer": [
                    "int",
                    "str",
                    "float",
                    "list[str]"
                ]
            }
        },
        "test_extract": {
            "name": "test_extract",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {
                "query": [
                    "str",
                    "int"
                ],
                "multiple": [
                    "str",
                    "int"
                ],
                "cast": [
                    "str",
                    "int"
                ],
                "expected": [
                    "int",
                    "float",
                    "list[float]",
                    "bytes"
                ],
                "analyzer": [
                    "int",
                    "float",
                    "list[float]",
                    "bytes"
                ]
            }
        }
    },
    "preacher-master/tests/core/extraction/impl/test_jq_engine_py.py": {
        "test_given_an_invalid_query": {
            "name": "test_given_an_invalid_query",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_given_a_valid_query": {
            "name": "test_given_a_valid_query",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "query": [
                    "typing.Type",
                    "dict[, ]",
                    "str"
                ],
                "expected": [
                    "typing.Type",
                    "dict[, ]",
                    "str"
                ]
            }
        }
    },
    "preacher-master/tests/core/extraction/impl/__init__.py": {},
    "preacher-master/tests/core/request/test_requester.py": {
        "session": {
            "name": "session",
            "location": 21,
            "return": [
                "NonCallableMagicMock"
            ],
            "arguments": {}
        },
        "body": {
            "name": "body",
            "location": 37,
            "return": [
                "NonCallableMock"
            ],
            "arguments": {}
        },
        "test_default_request": {
            "name": "test_default_request",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [],
                "session": []
            }
        },
        "test_when_request_preparation_fails": {
            "name": "test_when_request_preparation_fails",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [],
                "session": []
            }
        },
        "test_when_proxy_building_fails": {
            "name": "test_when_proxy_building_fails",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [],
                "session": []
            }
        },
        "test_when_request_fails": {
            "name": "test_when_request_fails",
            "location": 110,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [],
                "session": []
            }
        },
        "test_when_request_succeeds": {
            "name": "test_when_request_succeeds",
            "location": 130,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [],
                "session": [],
                "body": []
            }
        },
        "test_request_overwrites_default_headers": {
            "name": "test_request_overwrites_default_headers",
            "location": 197,
            "return": [
                "None"
            ],
            "arguments": {
                "session": [],
                "body": []
            }
        },
        "test_when_request_succeeds._resolve_url_params": {
            "name": "_resolve_url_params",
            "location": 137,
            "return": [
                "dict[typing.Text, typing.Union[typing.Text,list[typing.Text]]]"
            ],
            "arguments": {
                "params": [],
                "context": [
                    "None"
                ]
            }
        }
    },
    "preacher-master/tests/core/request/test_request_body_json.py": {
        "test_content_type": {
            "name": "test_content_type",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_resolve_simple": {
            "name": "test_resolve_simple",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "data": [
                    "list[dict[, ]]",
                    "None",
                    "dict[, ]",
                    "list[str]"
                ],
                "expected": [
                    "str",
                    "list[str]",
                    "dict[, ]",
                    "dict[str, typing.Any]",
                    "int",
                    "bytes"
                ]
            }
        },
        "test_resolve_given_values": {
            "name": "test_resolve_given_values",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "preacher-master/tests/core/request/test_request_body_urlencoded.py": {
        "test": {
            "name": "test",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        }
    },
    "preacher-master/tests/core/request/test_url_param.py": {
        "test_resolve_params_given_an_invalid_params": {
            "name": "test_resolve_params_given_an_invalid_params",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "params": [
                    "str"
                ]
            }
        },
        "test_resolve_params_given_a_string": {
            "name": "test_resolve_params_given_a_string",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_resolve_params_given_a_mapping": {
            "name": "test_resolve_params_given_a_mapping",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "preacher-master/tests/core/request/__init__.py": {},
    "preacher-master/tests/core/scenario/test_case.py": {
        "test_default_construction": {
            "name": "test_default_construction",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        }
    },
    "preacher-master/tests/core/scenario/test_case_runner.py": {
        "_retry": {
            "name": "_retry",
            "location": 25,
            "return": [],
            "arguments": {
                "func": [
                    "typing.Callable[, ]",
                    "int",
                    "typing.Type"
                ]
            }
        },
        "test_case_listener": {
            "name": "test_case_listener",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_runner_properties": {
            "name": "test_runner_properties",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_when_disabled": {
            "name": "test_when_disabled",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_given_bad_condition": {
            "name": "test_given_bad_condition",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [],
                "condition_verifications": [],
                "expected_status": [
                    "bytes",
                    "str",
                    "tuple[str]"
                ]
            }
        },
        "test_when_given_no_response": {
            "name": "test_when_given_no_response",
            "location": 123,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_when_given_an_response": {
            "name": "test_when_given_an_response",
            "location": 163,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_given_a_negative_waiting_time": {
            "name": "test_given_a_negative_waiting_time",
            "location": 217,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_given_bad_condition._analyze_context": {
            "name": "_analyze_context",
            "location": 79,
            "return": [],
            "arguments": {
                "context": []
            }
        },
        "test_given_bad_condition._verify": {
            "name": "_verify",
            "location": 85,
            "return": [],
            "arguments": {
                "verification": [],
                "analyzer": [],
                "context": [
                    "None"
                ]
            }
        },
        "test_when_given_no_response._run_unit": {
            "name": "_run_unit",
            "location": 130,
            "return": [
                "tuple[None]"
            ],
            "arguments": {
                "request": [],
                "requirements": [],
                "session": [
                    "None"
                ],
                "context": [
                    "None"
                ]
            }
        },
        "test_when_given_an_response._run_unit": {
            "name": "_run_unit",
            "location": 182,
            "return": [
                "tuple[None]"
            ],
            "arguments": {
                "request": [],
                "requirements": [],
                "session": [
                    "None"
                ],
                "context": [
                    "None"
                ]
            }
        }
    },
    "preacher-master/tests/core/scenario/test_scenario_runner.py": {
        "test_given_not_satisfied_conditions": {
            "name": "test_given_not_satisfied_conditions",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [],
                "statuses": [
                    "str",
                    "tuple[str]",
                    "list[dict[str, typing.Any]]"
                ],
                "expected_status": [
                    "str",
                    "int",
                    "bytes",
                    "set[str]"
                ]
            }
        },
        "test_unordered": {
            "name": "test_unordered",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_ordered": {
            "name": "test_ordered",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        }
    },
    "preacher-master/tests/core/scenario/test_scenario_task.py": {
        "test_static_scenario_task": {
            "name": "test_static_scenario_task",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_running_scenario_task_empty": {
            "name": "test_running_scenario_task_empty",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_running_scenario_task_filled": {
            "name": "test_running_scenario_task_filled",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "cases_status": [
                    "dict[str, str]",
                    "list[int]",
                    "tuple[str]",
                    "tuple[typing.Union[list[typing.Any],list[typing.Any]]]",
                    "int"
                ],
                "subscenario_status": [
                    "int",
                    "str",
                    "bytearray",
                    "list[dict[str, typing.Any]]"
                ],
                "expected_status": [
                    "str",
                    "int",
                    "None"
                ]
            }
        }
    },
    "preacher-master/tests/core/scenario/__init__.py": {},
    "preacher-master/tests/core/scenario/util/test_concurrency_ordered_cases_task.py": {
        "submit": {
            "name": "submit",
            "location": 15,
            "return": [
                "Future"
            ],
            "arguments": {
                "func": [
                    "typing.Callable[, ]",
                    "typing.Mapping",
                    "typing.Sequence[typing.Any]"
                ]
            }
        },
        "executor": {
            "name": "executor",
            "location": 22,
            "return": [
                "NonCallableMock"
            ],
            "arguments": {}
        },
        "test_given_no_cases": {
            "name": "test_given_no_cases",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "executor": []
            }
        },
        "test_given_cases": {
            "name": "test_given_cases",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [],
                "executor": []
            }
        }
    },
    "preacher-master/tests/core/scenario/util/test_concurrency_unordered_cases_task.py": {
        "submit": {
            "name": "submit",
            "location": 12,
            "return": [
                "Future"
            ],
            "arguments": {
                "func": [
                    "typing.Callable[, ]",
                    "typing.Mapping",
                    "typing.Sequence[typing.Any]"
                ]
            }
        },
        "executor": {
            "name": "executor",
            "location": 19,
            "return": [
                "NonCallableMock"
            ],
            "arguments": {}
        },
        "test_given_no_cases": {
            "name": "test_given_no_cases",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "executor": []
            }
        },
        "test_given_cases": {
            "name": "test_given_cases",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "executor": [
                    "str"
                ]
            }
        }
    },
    "preacher-master/tests/core/scenario/util/test_retry_while_false.py": {
        "func": {
            "name": "func",
            "location": 9,
            "return": [
                "MagicMock"
            ],
            "arguments": {}
        },
        "test_when_given_invalid_args": {
            "name": "test_when_given_invalid_args",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "func": [
                    "typing.Callable[, ]",
                    "str",
                    "bool"
                ],
                "attempts": [
                    "typing.Callable[, ]",
                    "str",
                    "bool"
                ]
            }
        },
        "test_retrying": {
            "name": "test_retrying",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "func": [
                    "typing.Callable[, ]",
                    "int"
                ],
                "attempts": [
                    "typing.Callable[, ]",
                    "float"
                ],
                "expected_result": [
                    "str",
                    "bool",
                    "typing.Callable[, ]"
                ],
                "expected_call_count": [
                    "int",
                    "float"
                ],
                "expected_sleep_count": [
                    "int",
                    "float"
                ]
            }
        },
        "test_retrying_with_delay": {
            "name": "test_retrying_with_delay",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "func": [
                    "typing.Callable[, ]",
                    "str",
                    "float",
                    "int"
                ]
            }
        }
    },
    "preacher-master/tests/core/scenario/util/__init__.py": {},
    "preacher-master/tests/core/scheduling/test_factory.py": {
        "test_create_scheduler": {
            "name": "test_create_scheduler",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        }
    },
    "preacher-master/tests/core/scheduling/test_listener.py": {
        "test_listener": {
            "name": "test_listener",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "preacher-master/tests/core/scheduling/test_merging_listener.py": {
        "listeners": {
            "name": "listeners",
            "location": 9,
            "return": [
                "list[NonCallableMock]"
            ],
            "arguments": {}
        },
        "merging_listener": {
            "name": "merging_listener",
            "location": 14,
            "return": [
                "MergingListener"
            ],
            "arguments": {
                "listeners": [
                    "str"
                ]
            }
        },
        "test_on_response": {
            "name": "test_on_response",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "merging_listener": [
                    "str",
                    "int"
                ],
                "listeners": [
                    "str"
                ]
            }
        },
        "test_on_scenario": {
            "name": "test_on_scenario",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "merging_listener": [
                    "str",
                    "float"
                ],
                "listeners": [
                    "str"
                ]
            }
        },
        "test_on_end": {
            "name": "test_on_end",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "merging_listener": [],
                "listeners": [
                    "str"
                ]
            }
        }
    },
    "preacher-master/tests/core/scheduling/test_scenario_scheduler.py": {
        "test_given_no_scenario": {
            "name": "test_given_no_scenario",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_given_construction_failure": {
            "name": "test_given_construction_failure",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_given_scenarios": {
            "name": "test_given_scenarios",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_given_construction_failure._submit": {
            "name": "_submit",
            "location": 32,
            "return": [
                "NonCallableMock"
            ],
            "arguments": {
                "_": []
            }
        },
        "test_given_construction_failure._Scenarios.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "test_given_construction_failure._Scenarios.__iter__": {
            "name": "__iter__",
            "location": 21,
            "return": [
                "_Scenarios"
            ],
            "arguments": {
                "self": []
            }
        },
        "test_given_construction_failure._Scenarios.__next__": {
            "name": "__next__",
            "location": 24,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "preacher-master/tests/core/scheduling/__init__.py": {},
    "preacher-master/tests/core/unit/test_unit_runner.py": {
        "_retry": {
            "name": "_retry",
            "location": 16,
            "return": [],
            "arguments": {
                "func": [
                    "typing.Callable[, ]",
                    "int",
                    "typing.Type"
                ]
            }
        },
        "test_predicate": {
            "name": "test_predicate",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "execution": [
                    "str",
                    "list[str]",
                    "None",
                    "list[dict[str, typing.Any]]"
                ],
                "verification": [
                    "str",
                    "list[str]",
                    "None",
                    "list[dict[str, typing.Any]]"
                ],
                "expected": [
                    "str",
                    "list[str]",
                    "None",
                    "list[dict[str, typing.Any]]"
                ]
            }
        },
        "test_given_invalid_retry_count": {
            "name": "test_given_invalid_retry_count",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "retry": [
                    "str",
                    "float"
                ]
            }
        },
        "test_given_no_response": {
            "name": "test_given_no_response",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_given_a_response": {
            "name": "test_given_a_response",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "str"
                ]
            }
        },
        "test_given_a_response._verify": {
            "name": "_verify",
            "location": 82,
            "return": [],
            "arguments": {
                "analyzer": [],
                "context": [
                    "None"
                ]
            }
        }
    },
    "preacher-master/tests/core/unit/__init__.py": {},
    "preacher-master/tests/core/value/__init__.py": {},
    "preacher-master/tests/core/value/impl/test_context.py": {
        "test_contextual_value": {
            "name": "test_contextual_value",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "preacher-master/tests/core/value/impl/test_datetime_value.py": {
        "test_only_time_datetime_value_default": {
            "name": "test_only_time_datetime_value_default",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_delta_datetime_value_default": {
            "name": "test_delta_datetime_value_default",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [],
                "context": []
            }
        },
        "test_combined_relative_datetime_value_contextual": {
            "name": "test_combined_relative_datetime_value_contextual",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "context": []
            }
        },
        "test_invalid_relative_datetime_value": {
            "name": "test_invalid_relative_datetime_value",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "context": []
            }
        },
        "test_datetime_with_format_default": {
            "name": "test_datetime_with_format_default",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_datetime_with_format_contextual": {
            "name": "test_datetime_with_format_contextual",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_parse_datetime_value_with_format_given_a_naive_datetime": {
            "name": "test_parse_datetime_value_with_format_given_a_naive_datetime",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_parse_datetime_value_with_format_given_an_aware_datetime": {
            "name": "test_parse_datetime_value_with_format_given_an_aware_datetime",
            "location": 113,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_parse_datetime_value_with_format_empty": {
            "name": "test_parse_datetime_value_with_format_empty",
            "location": 126,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_parse_datetime_value_with_format_combined": {
            "name": "test_parse_datetime_value_with_format_combined",
            "location": 138,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_parse_datetime_value_with_format_given_invalid_one": {
            "name": "test_parse_datetime_value_with_format_given_invalid_one",
            "location": 154,
            "return": [
                "None"
            ],
            "arguments": {
                "value": []
            }
        }
    },
    "preacher-master/tests/core/value/impl/test_static_value.py": {
        "test_static_value": {
            "name": "test_static_value",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "preacher-master/tests/core/value/impl/__init__.py": {},
    "preacher-master/tests/core/verification/test_description.py": {
        "extractor": {
            "name": "extractor",
            "location": 13,
            "return": [
                "NonCallableMock"
            ],
            "arguments": {}
        },
        "test_when_analysis_fails": {
            "name": "test_when_analysis_fails",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "extractor": []
            }
        },
        "test_when_given_no_predicates": {
            "name": "test_when_given_no_predicates",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "extractor": []
            }
        },
        "test_when_given_predicates": {
            "name": "test_when_given_predicates",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "extractor": [
                    "bool",
                    "str",
                    "typing.Iterable[int]"
                ]
            }
        }
    },
    "preacher-master/tests/core/verification/test_hamcrest.py": {
        "test_datetime_matcher_invalid_creation": {
            "name": "test_datetime_matcher_invalid_creation",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "value": [
                    "str",
                    "typing.Iterable[typing.Hashable]",
                    "bool"
                ]
            }
        },
        "test_datetime_matcher_invalid_validation": {
            "name": "test_datetime_matcher_invalid_validation",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "item": [
                    "int",
                    "typing.Sequence[]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "test_datetime_matcher": {
            "name": "test_datetime_matcher",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "value": [
                    "str"
                ],
                "item": [
                    "dict[, ]",
                    "str",
                    "typing.Type",
                    "typing.Sequence[typing.Type]",
                    "set[str]",
                    "typing.Mapping"
                ],
                "before_expected": [
                    "int",
                    "typing.Callable[, ]",
                    "list[]",
                    "set[str]"
                ],
                "after_expected": [
                    "int",
                    "typing.Callable[, ]",
                    "list[]",
                    "set[str]"
                ]
            }
        },
        "test_day_of_week": {
            "name": "test_day_of_week",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "day": [
                    "str",
                    "list[]",
                    "set[str]"
                ],
                "yesterday": [
                    "str",
                    "None"
                ],
                "today": [
                    "str",
                    "None"
                ],
                "tomorrow": [
                    "str",
                    "None"
                ],
                "expected_name": [
                    "str"
                ]
            }
        },
        "test_day_of_week_matching": {
            "name": "test_day_of_week_matching",
            "location": 136,
            "return": [
                "None"
            ],
            "arguments": {
                "day": [
                    "dict[, ]",
                    "dict[str, typing.Any]",
                    "str",
                    "list[]",
                    "typing.Match",
                    "None"
                ],
                "item": [
                    "dict[, ]",
                    "dict[str, typing.Any]",
                    "str",
                    "list[]",
                    "typing.Match",
                    "None"
                ],
                "expected": [
                    "dict[, ]",
                    "dict[str, typing.Any]",
                    "str",
                    "list[]",
                    "typing.Match",
                    "None"
                ]
            }
        },
        "test_day_of_week_description": {
            "name": "test_day_of_week_description",
            "location": 152,
            "return": [
                "None"
            ],
            "arguments": {
                "day": [],
                "expected_description": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "preacher-master/tests/core/verification/test_matcher_factory.py": {
        "matcher_func": {
            "name": "matcher_func",
            "location": 13,
            "return": [
                "Mock"
            ],
            "arguments": {}
        },
        "test_static_factory": {
            "name": "test_static_factory",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_value_factory": {
            "name": "test_value_factory",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "matcher_func": [
                    "typing.Callable[, ]",
                    "typing.Sequence[str]",
                    "int"
                ]
            }
        },
        "test_recursive_factory": {
            "name": "test_recursive_factory",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "matcher_func": [
                    "dict[str, typing.Any]",
                    "str",
                    "int",
                    "typing.Sequence['cirq.Qid']"
                ]
            }
        }
    },
    "preacher-master/tests/core/verification/test_matcher_wrapping_predicate.py": {
        "predicate": {
            "name": "predicate",
            "location": 12,
            "return": [
                "MatcherWrappingPredicate"
            ],
            "arguments": {
                "factory": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ]
            }
        },
        "factory": {
            "name": "factory",
            "location": 17,
            "return": [
                "NonCallableMock"
            ],
            "arguments": {}
        },
        "test_match_when_matcher_creation_fails": {
            "name": "test_match_when_matcher_creation_fails",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "predicate": [
                    "int",
                    "tuple[typing.Union[float,float,float,float,float]]",
                    "float",
                    "str"
                ],
                "factory": []
            }
        },
        "test_match_when_an_error_occurs_on_assertion": {
            "name": "test_match_when_an_error_occurs_on_assertion",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [],
                "predicate": [
                    "int",
                    "tuple[typing.Union[float,float,float,float,float]]",
                    "float",
                    "str"
                ],
                "factory": []
            }
        },
        "test_match_when_assertion_fails": {
            "name": "test_match_when_assertion_fails",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [],
                "predicate": [
                    "int",
                    "tuple[typing.Union[float,float,float,float,float]]",
                    "float",
                    "str"
                ],
                "factory": []
            }
        },
        "test_match_when_the_assertion_succeeds": {
            "name": "test_match_when_the_assertion_succeeds",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [],
                "predicate": [
                    "int",
                    "tuple[typing.Union[float,float,float,float,float]]",
                    "float",
                    "str"
                ],
                "factory": []
            }
        }
    },
    "preacher-master/tests/core/verification/test_response_description.py": {
        "response": {
            "name": "response",
            "location": 17,
            "return": [
                "NonCallableMock"
            ],
            "arguments": {}
        },
        "test_when_given_no_description": {
            "name": "test_when_given_no_description",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [],
                "response": [
                    "str",
                    "int"
                ]
            }
        },
        "test_when_given_descriptions": {
            "name": "test_when_given_descriptions",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "list[list[int]]"
                ],
                "response": [
                    "str",
                    "dict[, ]"
                ]
            }
        },
        "test_merge_statuses": {
            "name": "test_merge_statuses",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [
                    "str",
                    "int",
                    "typing.Iterable[int]"
                ],
                "response": [
                    "str",
                    "typing.Iterable[str]"
                ],
                "status_code_status": [
                    "list[]"
                ],
                "headers_status": [
                    "int",
                    "list[qlu.core.QluTask]",
                    "dict[str, typing.Any]"
                ],
                "body_status": [
                    "int",
                    "list[qlu.core.QluTask]"
                ],
                "expected": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "preacher-master/tests/core/verification/__init__.py": {},
    "preacher-master/tests/plugin/test_loader.py": {
        "test_load_plugins_empty": {
            "name": "test_load_plugins_empty",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_load_plugins_normal": {
            "name": "test_load_plugins_normal",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_load_plugins_not_a_module": {
            "name": "test_load_plugins_not_a_module",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_load_plugins_invalid_module": {
            "name": "test_load_plugins_invalid_module",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        }
    },
    "preacher-master/tests/plugin/__init__.py": {},
    "preacher-master/tests/presentation/test_html_reporter.py": {
        "path": {
            "name": "path",
            "location": 38,
            "return": [
                "typing.Generator[TemporaryDirectory]"
            ],
            "arguments": {}
        },
        "test_export_execution": {
            "name": "test_export_execution",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "path": [
                    "str"
                ]
            }
        },
        "test_export_results": {
            "name": "test_export_results",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "path": [
                    "str",
                    "int",
                    "None"
                ],
                "results": [
                    "int",
                    "list[]",
                    "list[str]",
                    "str"
                ]
            }
        },
        "ResponseImpl.id": {
            "name": "id",
            "location": 33,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "preacher-master/tests/presentation/test_logging_reporter.py": {
        "logger": {
            "name": "logger",
            "location": 21,
            "return": [
                "NonCallableMock"
            ],
            "arguments": {}
        },
        "reporter": {
            "name": "reporter",
            "location": 26,
            "return": [
                "LoggingReporter"
            ],
            "arguments": {
                "logger": [
                    "bool"
                ]
            }
        },
        "test_show_scenarios": {
            "name": "test_show_scenarios",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "reporter": [
                    "str",
                    "dict[str, typing.Any]",
                    "typing.Callable[, ]"
                ]
            }
        },
        "test_show_status": {
            "name": "test_show_status",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "reporter": []
            }
        },
        "test_create_logging_reporter_given_a_logger": {
            "name": "test_create_logging_reporter_given_a_logger",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_create_logging_reporter_given_logger_elements": {
            "name": "test_create_logging_reporter_given_logger_elements",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [],
                "level": [
                    "str",
                    "bool"
                ],
                "expected_level": [
                    "int",
                    "str",
                    "None"
                ]
            }
        },
        "test_create_logging_reporter_given_no_handlers": {
            "name": "test_create_logging_reporter_given_no_handlers",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_create_logging_reporter_given_no_parameters": {
            "name": "test_create_logging_reporter_given_no_parameters",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        }
    },
    "preacher-master/tests/presentation/__init__.py": {},
    "preacher-master/tests/presentation/listener/test_factory.py": {
        "merging_listener": {
            "name": "merging_listener",
            "location": 13,
            "return": [
                "NonCallableMock"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_create_listener_default": {
            "name": "test_create_listener_default",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [],
                "merging_listener": []
            }
        },
        "test_create_listener_with_all_parameters": {
            "name": "test_create_listener_with_all_parameters",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [],
                "merging_listener": []
            }
        }
    },
    "preacher-master/tests/presentation/listener/test_html_reporting_listener.py": {
        "reporter": {
            "name": "reporter",
            "location": 12,
            "return": [
                "NonCallableMock"
            ],
            "arguments": {}
        },
        "test_given_no_item": {
            "name": "test_given_no_item",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "reporter": [
                    "str"
                ]
            }
        },
        "test_given_items": {
            "name": "test_given_items",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "reporter": [
                    "str"
                ]
            }
        },
        "test_from_path": {
            "name": "test_from_path",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "reporter_ctor": [
                    "dict[, ]"
                ],
                "listener_ctor": []
            }
        }
    },
    "preacher-master/tests/presentation/listener/test_logging_reporting_listener.py": {
        "test_on_scenario": {
            "name": "test_on_scenario",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_create_logging_reporting_listener_given_a_reporter": {
            "name": "test_create_logging_reporting_listener_given_a_reporter",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_create_logging_reporting_listener_given_reporter_elements": {
            "name": "test_create_logging_reporting_listener_given_reporter_elements",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        }
    },
    "preacher-master/tests/presentation/listener/__init__.py": {}
}
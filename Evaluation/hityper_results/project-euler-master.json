{
    "project-euler-master/python/constants.py": {},
    "project-euler-master/python/project_euler.py": {
        "cli": {
            "name": "cli",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "download": {
            "name": "download",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "all": [
                    "bool"
                ],
                "tail": [
                    "int"
                ],
                "overwrite": [
                    "str",
                    "int",
                    "Exception",
                    "typing.Sequence[typing.MutableMapping]"
                ],
                "problems": [
                    "list[int]"
                ]
            }
        },
        "get_last_id": {
            "name": "get_last_id",
            "location": 120,
            "return": [
                "int"
            ],
            "arguments": {}
        },
        "get_problem": {
            "name": "get_problem",
            "location": 137,
            "return": [
                "Problem"
            ],
            "arguments": {
                "number": [
                    "str",
                    "bool",
                    "float",
                    "Exception"
                ]
            }
        },
        "write_problem": {
            "name": "write_problem",
            "location": 163,
            "return": [
                "None"
            ],
            "arguments": {
                "problem": [
                    "str",
                    "None"
                ],
                "file_path": [
                    "str"
                ]
            }
        },
        "download_problems": {
            "name": "download_problems",
            "location": 177,
            "return": [
                "None"
            ],
            "arguments": {
                "start": [
                    "int",
                    "float",
                    "bytes"
                ],
                "end": [
                    "int"
                ],
                "dir": [
                    "str",
                    "float",
                    "bool"
                ],
                "overwrite": [
                    "bool"
                ]
            }
        },
        "Problem.__init__": {
            "name": "__init__",
            "location": 101,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "number": [
                    "str",
                    "int"
                ],
                "title": [
                    "str",
                    "int"
                ],
                "description": [
                    "str",
                    "int"
                ]
            }
        },
        "Problem.__str__": {
            "name": "__str__",
            "location": 106,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "project-euler-master/python/setup.py": {},
    "project-euler-master/python/problems/001_problem.py": {},
    "project-euler-master/python/problems/002_problem.py": {},
    "project-euler-master/python/problems/003_problem.py": {},
    "project-euler-master/python/problems/004_problem.py": {},
    "project-euler-master/python/problems/005_problem.py": {},
    "project-euler-master/python/problems/006_problem.py": {},
    "project-euler-master/python/problems/007_problem.py": {},
    "project-euler-master/python/problems/008_problem.py": {},
    "project-euler-master/python/problems/009_problem.py": {},
    "project-euler-master/python/problems/010_problem.py": {},
    "project-euler-master/python/problems/011_problem.py": {},
    "project-euler-master/python/problems/012_problem.py": {},
    "project-euler-master/python/problems/013_problem.py": {},
    "project-euler-master/python/problems/014_problem.py": {},
    "project-euler-master/python/problems/015_problem.py": {},
    "project-euler-master/python/problems/016_problem.py": {},
    "project-euler-master/python/problems/017_problem.py": {
        "int_to_word": {
            "name": "int_to_word",
            "location": 68,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "n": [
                    "int"
                ],
                "is_british": [
                    "bool"
                ]
            }
        }
    },
    "project-euler-master/python/problems/018_problem.py": {},
    "project-euler-master/python/problems/019_problem.py": {},
    "project-euler-master/python/problems/020_problem.py": {},
    "project-euler-master/python/problems/021_problem.py": {},
    "project-euler-master/python/problems/022_problem.py": {},
    "project-euler-master/python/problems/023_problem.py": {},
    "project-euler-master/python/problems/024_problem.py": {},
    "project-euler-master/python/problems/025_problem.py": {},
    "project-euler-master/python/problems/026_problem.py": {
        "len_cycle": {
            "name": "len_cycle",
            "location": 31,
            "return": [
                "int"
            ],
            "arguments": {
                "fraction": []
            }
        }
    },
    "project-euler-master/python/problems/027_problem.py": {},
    "project-euler-master/python/problems/028_problem.py": {},
    "project-euler-master/python/problems/029_problem.py": {},
    "project-euler-master/python/problems/030_problem.py": {},
    "project-euler-master/python/problems/031_problem.py": {
        "coin_sum": {
            "name": "coin_sum",
            "location": 25,
            "return": [],
            "arguments": {
                "coins": [],
                "total": []
            }
        }
    },
    "project-euler-master/python/problems/032_problem.py": {},
    "project-euler-master/python/problems/033_problem.py": {},
    "project-euler-master/python/problems/034_problem.py": {},
    "project-euler-master/python/problems/035_problem.py": {},
    "project-euler-master/python/problems/036_problem.py": {},
    "project-euler-master/python/problems/037_problem.py": {},
    "project-euler-master/python/problems/038_problem.py": {},
    "project-euler-master/python/problems/039_problem.py": {},
    "project-euler-master/python/problems/040_problem.py": {},
    "project-euler-master/python/problems/041_problem.py": {},
    "project-euler-master/python/problems/042_problem.py": {},
    "project-euler-master/python/problems/043_problem.py": {},
    "project-euler-master/python/problems/045_problem.py": {},
    "project-euler-master/python/problems/048_problem.py": {},
    "project-euler-master/python/problems/055_problem.py": {},
    "project-euler-master/python/problems/tests/test_problems.py": {
        "TestProblems.setUp": {
            "name": "setUp",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestProblems.test_problems": {
            "name": "test_problems",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "number": [
                    "str"
                ],
                "expected": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "project-euler-master/python/problems/tests/__init__.py": {},
    "project-euler-master/python/utils/fibonacci.py": {
        "gen_fibonacci": {
            "name": "gen_fibonacci",
            "location": 6,
            "return": [
                "typing.Generator[int]"
            ],
            "arguments": {
                "zero": [
                    "bool"
                ]
            }
        }
    },
    "project-euler-master/python/utils/number.py": {
        "choose": {
            "name": "choose",
            "location": 7,
            "return": [
                "int"
            ],
            "arguments": {
                "n": [
                    "int"
                ],
                "k": [
                    "int"
                ]
            }
        },
        "gen_permutation": {
            "name": "gen_permutation",
            "location": 23,
            "return": [
                "typing.Generator[list[]]",
                "typing.Generator[]"
            ],
            "arguments": {
                "A": []
            }
        },
        "kth_permutation": {
            "name": "kth_permutation",
            "location": 34,
            "return": [
                "list[]"
            ],
            "arguments": {
                "A": [],
                "k": [
                    "float"
                ]
            }
        },
        "cyclic_permutations": {
            "name": "cyclic_permutations",
            "location": 52,
            "return": [
                "list[int]"
            ],
            "arguments": {
                "n": [
                    "int",
                    "str"
                ]
            }
        },
        "is_factorion": {
            "name": "is_factorion",
            "location": 63,
            "return": [
                "bool"
            ],
            "arguments": {
                "n": [
                    "int",
                    "str"
                ]
            }
        },
        "is_palindrome": {
            "name": "is_palindrome",
            "location": 70,
            "return": [
                "bool"
            ],
            "arguments": {
                "n": [],
                "base": [
                    "int"
                ]
            }
        },
        "is_lychrel": {
            "name": "is_lychrel",
            "location": 85,
            "return": [
                "bool"
            ],
            "arguments": {
                "n": [
                    "int",
                    "list[str]",
                    "list[T]"
                ],
                "iterations": [
                    "int"
                ]
            }
        },
        "is_pandigital": {
            "name": "is_pandigital",
            "location": 95,
            "return": [
                "bool"
            ],
            "arguments": {
                "n": [
                    "int",
                    "float",
                    "None"
                ],
                "zero": [
                    "bool"
                ]
            }
        },
        "is_pythagorean": {
            "name": "is_pythagorean",
            "location": 103,
            "return": [
                "bool"
            ],
            "arguments": {
                "a": [
                    "int"
                ],
                "b": [
                    "int"
                ],
                "c": [
                    "int"
                ]
            }
        },
        "is_square": {
            "name": "is_square",
            "location": 115,
            "return": [
                "bool"
            ],
            "arguments": {
                "n": [
                    "int"
                ]
            }
        },
        "is_triangular": {
            "name": "is_triangular",
            "location": 122,
            "return": [
                "bool"
            ],
            "arguments": {
                "n": [
                    "int"
                ],
                "zero": [
                    "bool"
                ]
            }
        },
        "gen_triangular": {
            "name": "gen_triangular",
            "location": 132,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "zero": [
                    "bool"
                ]
            }
        },
        "nth_triangular": {
            "name": "nth_triangular",
            "location": 142,
            "return": [
                "int"
            ],
            "arguments": {
                "n": [
                    "int"
                ]
            }
        },
        "is_pentagonal": {
            "name": "is_pentagonal",
            "location": 149,
            "return": [
                "bool"
            ],
            "arguments": {
                "n": [
                    "int"
                ],
                "zero": [
                    "bool"
                ]
            }
        },
        "gen_pentagonal": {
            "name": "gen_pentagonal",
            "location": 159,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "zero": [
                    "bool"
                ]
            }
        },
        "nth_pentagonal": {
            "name": "nth_pentagonal",
            "location": 169,
            "return": [
                "int"
            ],
            "arguments": {
                "n": [
                    "int"
                ]
            }
        },
        "is_hexagonal": {
            "name": "is_hexagonal",
            "location": 176,
            "return": [
                "bool"
            ],
            "arguments": {
                "n": [
                    "int"
                ],
                "zero": [
                    "bool"
                ]
            }
        },
        "gen_hexagonal": {
            "name": "gen_hexagonal",
            "location": 186,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "zero": [
                    "bool"
                ]
            }
        },
        "nth_hexagonal": {
            "name": "nth_hexagonal",
            "location": 196,
            "return": [
                "int"
            ],
            "arguments": {
                "n": [
                    "int"
                ]
            }
        },
        "divisors": {
            "name": "divisors",
            "location": 203,
            "return": [
                "list[int]",
                "int"
            ],
            "arguments": {
                "n": [
                    "int"
                ],
                "proper": [
                    "bool"
                ]
            }
        },
        "num_divisors": {
            "name": "num_divisors",
            "location": 215,
            "return": [
                "int"
            ],
            "arguments": {
                "n": [
                    "int"
                ],
                "proper": [
                    "bool"
                ]
            }
        },
        "sum_divisors": {
            "name": "sum_divisors",
            "location": 222,
            "return": [
                "bool"
            ],
            "arguments": {
                "n": [
                    "int"
                ],
                "proper": [
                    "bool"
                ]
            }
        },
        "is_abundant": {
            "name": "is_abundant",
            "location": 229,
            "return": [
                "bool"
            ],
            "arguments": {
                "n": [
                    "int",
                    "float"
                ]
            }
        },
        "is_deficient": {
            "name": "is_deficient",
            "location": 236,
            "return": [
                "bool"
            ],
            "arguments": {
                "n": [
                    "int",
                    "float"
                ]
            }
        },
        "is_perfect": {
            "name": "is_perfect",
            "location": 243,
            "return": [
                "bool"
            ],
            "arguments": {
                "n": [
                    "int",
                    "float"
                ]
            }
        },
        "is_amicable": {
            "name": "is_amicable",
            "location": 250,
            "return": [
                "bool"
            ],
            "arguments": {
                "a": [
                    "int",
                    "typing.Sequence[int]",
                    "typing.Sequence[dict[, ]]",
                    "list[str]"
                ],
                "b": [
                    "int",
                    "typing.Sequence[int]",
                    "typing.Sequence[dict[, ]]",
                    "list[str]"
                ]
            }
        },
        "gen_collatz": {
            "name": "gen_collatz",
            "location": 260,
            "return": [
                "typing.Generator[]",
                "None"
            ],
            "arguments": {
                "start": []
            }
        },
        "decimal_fraction": {
            "name": "decimal_fraction",
            "location": 280,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "numerator": [
                    "int"
                ],
                "denominator": []
            }
        }
    },
    "project-euler-master/python/utils/prime.py": {
        "is_prime": {
            "name": "is_prime",
            "location": 8,
            "return": [
                "bool"
            ],
            "arguments": {
                "n": [
                    "int"
                ]
            }
        },
        "is_circular_prime": {
            "name": "is_circular_prime",
            "location": 22,
            "return": [
                "bool"
            ],
            "arguments": {
                "n": [
                    "int",
                    "None"
                ]
            }
        },
        "is_truncatable_prime": {
            "name": "is_truncatable_prime",
            "location": 29,
            "return": [
                "bool"
            ],
            "arguments": {
                "n": [
                    "int",
                    "float"
                ]
            }
        },
        "gen_prime": {
            "name": "gen_prime",
            "location": 44,
            "return": [
                "typing.Generator[int]"
            ],
            "arguments": {}
        },
        "nth_prime": {
            "name": "nth_prime",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "n": [
                    "int"
                ]
            }
        },
        "prime_factors": {
            "name": "prime_factors",
            "location": 71,
            "return": [
                "list[]"
            ],
            "arguments": {
                "n": [
                    "int"
                ]
            }
        },
        "largest_prime_factor": {
            "name": "largest_prime_factor",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "n": [
                    "int"
                ]
            }
        }
    },
    "project-euler-master/python/utils/__init__.py": {},
    "project-euler-master/python/utils/tests/test_fibonacci.py": {
        "TestFibonacci.test_gen_fibonacci": {
            "name": "test_gen_fibonacci",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "expected": [
                    "list[int]",
                    "dict[str, typing.Any]",
                    "str"
                ]
            }
        }
    },
    "project-euler-master/python/utils/tests/test_number.py": {
        "TestNumber.test_choose": {
            "name": "test_choose",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "n": [
                    "int"
                ],
                "k": [
                    "int"
                ],
                "expected": [
                    "int"
                ]
            }
        },
        "TestNumber.test_gen_permutation": {
            "name": "test_gen_permutation",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "items": [
                    "dict[, ]",
                    "typing.Mapping"
                ],
                "expected": [
                    "list[list[typing.Any]]"
                ]
            }
        },
        "TestNumber.test_kth_permutation": {
            "name": "test_kth_permutation",
            "location": 109,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "items": []
            }
        },
        "TestNumber.test_cyclic_permutations": {
            "name": "test_cyclic_permutations",
            "location": 147,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "n": [
                    "typing.Iterable[str]",
                    "str",
                    "int"
                ],
                "expected": [
                    "typing.Iterable[str]",
                    "str",
                    "int"
                ]
            }
        },
        "TestNumber.test_is_factorion": {
            "name": "test_is_factorion",
            "location": 156,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "n": [
                    "list[str]",
                    "bool"
                ],
                "expected": [
                    "list[str]",
                    "bool"
                ]
            }
        },
        "TestNumber.test_is_palindrome": {
            "name": "test_is_palindrome",
            "location": 173,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "n": [
                    "int",
                    "list[int]",
                    "dict[str, str]",
                    "str",
                    "dict[str, int]"
                ],
                "base": [
                    "str",
                    "None",
                    "int",
                    "float"
                ],
                "expected": [
                    "int",
                    "list[int]",
                    "dict[str, str]",
                    "str",
                    "dict[str, int]"
                ]
            }
        },
        "TestNumber.test_is_lychrel": {
            "name": "test_is_lychrel",
            "location": 190,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "n": [
                    "int"
                ],
                "iterations": [
                    "int",
                    "None",
                    "str",
                    "typing.Sequence[typing.Any]",
                    "float"
                ],
                "expected": [
                    "int"
                ]
            }
        },
        "TestNumber.test_is_pandigital": {
            "name": "test_is_pandigital",
            "location": 210,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "n": [
                    "list[str]",
                    "bool"
                ],
                "zero": [
                    "list[str]",
                    "bool"
                ],
                "expected": [
                    "list[str]",
                    "bool"
                ]
            }
        },
        "TestNumber.test_is_pythagorean": {
            "name": "test_is_pythagorean",
            "location": 236,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "a": [
                    "int",
                    "float",
                    "list[None]"
                ],
                "b": [
                    "int",
                    "float",
                    "list[None]"
                ],
                "c": [
                    "int",
                    "float",
                    "list[None]"
                ],
                "expected": [
                    "int",
                    "float",
                    "list[None]"
                ]
            }
        },
        "TestNumber.test_is_square": {
            "name": "test_is_square",
            "location": 258,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "n": [
                    "list[str]",
                    "bool"
                ],
                "expected": [
                    "list[str]",
                    "bool"
                ]
            }
        },
        "TestNumber.test_is_triangular": {
            "name": "test_is_triangular",
            "location": 274,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "n": [
                    "list[str]",
                    "bool"
                ],
                "expected": [
                    "list[str]",
                    "bool"
                ]
            }
        },
        "TestNumber.test_is_triangular_zero": {
            "name": "test_is_triangular_zero",
            "location": 277,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestNumber.test_gen_triangular": {
            "name": "test_gen_triangular",
            "location": 284,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "expected": [
                    "list[int]",
                    "dict[str, typing.Any]",
                    "str"
                ]
            }
        },
        "TestNumber.test_nth_triangular": {
            "name": "test_nth_triangular",
            "location": 302,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "n": [
                    "typing.Iterable[str]",
                    "str",
                    "int"
                ],
                "expected": [
                    "typing.Iterable[str]",
                    "str",
                    "int"
                ]
            }
        },
        "TestNumber.test_is_pentagonal": {
            "name": "test_is_pentagonal",
            "location": 323,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "n": [
                    "list[str]",
                    "bool"
                ],
                "expected": [
                    "list[str]",
                    "bool"
                ]
            }
        },
        "TestNumber.test_is_pentagonal_zero": {
            "name": "test_is_pentagonal_zero",
            "location": 326,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestNumber.test_gen_pentagonal": {
            "name": "test_gen_pentagonal",
            "location": 333,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "expected": [
                    "list[int]",
                    "dict[str, typing.Any]",
                    "str"
                ]
            }
        },
        "TestNumber.test_nth_pentagonal": {
            "name": "test_nth_pentagonal",
            "location": 351,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "n": [
                    "typing.Iterable[str]",
                    "str",
                    "int"
                ],
                "expected": [
                    "typing.Iterable[str]",
                    "str",
                    "int"
                ]
            }
        },
        "TestNumber.test_is_hexagonal": {
            "name": "test_is_hexagonal",
            "location": 372,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "n": [
                    "list[str]",
                    "bool"
                ],
                "expected": [
                    "list[str]",
                    "bool"
                ]
            }
        },
        "TestNumber.test_is_hexagonal_zero": {
            "name": "test_is_hexagonal_zero",
            "location": 375,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestNumber.test_gen_hexagonal": {
            "name": "test_gen_hexagonal",
            "location": 382,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "expected": [
                    "list[int]",
                    "dict[str, typing.Any]",
                    "str"
                ]
            }
        },
        "TestNumber.test_nth_hexagonal": {
            "name": "test_nth_hexagonal",
            "location": 400,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "n": [
                    "typing.Iterable[str]",
                    "str",
                    "int"
                ],
                "expected": [
                    "typing.Iterable[str]",
                    "str",
                    "int"
                ]
            }
        },
        "TestNumber.test_divisors": {
            "name": "test_divisors",
            "location": 435,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "n": [
                    "list[str]"
                ],
                "proper": [
                    "list[str]"
                ],
                "expected": [
                    "list[str]"
                ]
            }
        },
        "TestNumber.test_num_divisors": {
            "name": "test_num_divisors",
            "location": 470,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "n": [
                    "list[]",
                    "list[list[float]]"
                ],
                "proper": [
                    "list[]",
                    "list[list[float]]"
                ],
                "expected": [
                    "list[]",
                    "list[list[float]]"
                ]
            }
        },
        "TestNumber.test_sum_divisors": {
            "name": "test_sum_divisors",
            "location": 505,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "n": [
                    "list[str]"
                ],
                "proper": [
                    "list[str]"
                ],
                "expected": [
                    "list[str]"
                ]
            }
        },
        "TestNumber.test_is_abundant": {
            "name": "test_is_abundant",
            "location": 525,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "n": [
                    "list[str]",
                    "bool"
                ],
                "expected": [
                    "list[str]",
                    "bool"
                ]
            }
        },
        "TestNumber.test_is_deficient": {
            "name": "test_is_deficient",
            "location": 545,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "n": [
                    "list[str]",
                    "bool"
                ],
                "expected": [
                    "list[str]",
                    "bool"
                ]
            }
        },
        "TestNumber.test_is_perfect": {
            "name": "test_is_perfect",
            "location": 565,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "n": [
                    "list[str]",
                    "bool"
                ],
                "expected": [
                    "list[str]",
                    "bool"
                ]
            }
        },
        "TestNumber.test_is_amicable": {
            "name": "test_is_amicable",
            "location": 579,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "a": [
                    "int",
                    "float",
                    "typing.Sequence[int]",
                    "None"
                ],
                "b": [
                    "int",
                    "float",
                    "typing.Sequence[int]",
                    "None"
                ],
                "expected": [
                    "int",
                    "float",
                    "typing.Sequence[int]",
                    "None"
                ]
            }
        },
        "TestNumber.test_gen_collatz": {
            "name": "test_gen_collatz",
            "location": 590,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "start": [
                    "int",
                    "None",
                    "list[str]"
                ],
                "expected": [
                    "list[int]",
                    "str",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "TestNumber.test_decimal_fraction": {
            "name": "test_decimal_fraction",
            "location": 631,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "numerator": [],
                "denominator": [],
                "expected": []
            }
        }
    },
    "project-euler-master/python/utils/tests/test_prime.py": {
        "TestPrime.test_is_prime": {
            "name": "test_is_prime",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "n": [
                    "list[str]",
                    "bool"
                ],
                "expected": [
                    "list[str]",
                    "bool"
                ]
            }
        },
        "TestPrime.test_is_circular_prime": {
            "name": "test_is_circular_prime",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "n": [
                    "int",
                    "dict[str, typing.Any]"
                ],
                "expected": [
                    "int",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "TestPrime.test_is_truncatable_prime": {
            "name": "test_is_truncatable_prime",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "n": [
                    "int",
                    "dict[str, typing.Any]"
                ],
                "expected": [
                    "int",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "TestPrime.test_gen_prime": {
            "name": "test_gen_prime",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "expected": [
                    "list[int]",
                    "dict[str, typing.Any]",
                    "str"
                ]
            }
        },
        "TestPrime.test_nth_prime": {
            "name": "test_nth_prime",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "n": [
                    "typing.Iterable[str]",
                    "str",
                    "int"
                ],
                "expected": [
                    "typing.Iterable[str]",
                    "str",
                    "int"
                ]
            }
        },
        "TestPrime.test_prime_factors": {
            "name": "test_prime_factors",
            "location": 115,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "n": [
                    "typing.Iterable[str]",
                    "str",
                    "int"
                ],
                "expected": [
                    "typing.Iterable[str]",
                    "str",
                    "int"
                ]
            }
        },
        "TestPrime.test_largest_prime_factor": {
            "name": "test_largest_prime_factor",
            "location": 124,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "n": [
                    "bool",
                    "typing.Iterable[str]",
                    "str"
                ],
                "expected": [
                    "bool",
                    "typing.Iterable[str]",
                    "str"
                ]
            }
        }
    },
    "project-euler-master/python/utils/tests/__init__.py": {}
}
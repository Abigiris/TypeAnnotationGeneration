{
    "prometeo-master/setup.py": {
        "BinaryDistribution.has_ext_modules": {
            "name": "has_ext_modules",
            "location": 4,
            "return": [
                "bool"
            ],
            "arguments": {
                "foo": [
                    "str"
                ]
            }
        }
    },
    "prometeo-master/benchmarks/run_benchmark.py": {},
    "prometeo-master/benchmarks/run_benchmark_julia.py": {},
    "prometeo-master/benchmarks/run_benchmark_numpy.py": {},
    "prometeo-master/docs/source/conf.py": {},
    "prometeo-master/examples/fibonacci/fibonacci.py": {
        "fib": {
            "name": "fib",
            "location": 3,
            "return": [
                "int"
            ],
            "arguments": {
                "n": [
                    "int"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 25,
            "return": [
                "int"
            ],
            "arguments": {}
        }
    },
    "prometeo-master/examples/heap_analysis/heap_analysis.py": {
        "f1": {
            "name": "f1",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "f2": {
            "name": "f2",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "f3": {
            "name": "f3",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "f4": {
            "name": "f4",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "f5": {
            "name": "f5",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "main": {
            "name": "main",
            "location": 43,
            "return": [
                "int"
            ],
            "arguments": {}
        }
    },
    "prometeo-master/examples/helloworld/helloworld.py": {
        "main": {
            "name": "main",
            "location": 3,
            "return": [
                "int"
            ],
            "arguments": {}
        }
    },
    "prometeo-master/examples/laparser/laparser.py": {
        "main": {
            "name": "main",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "prometeo-master/examples/nonlinear/nonlinear.py": {
        "main": {
            "name": "main",
            "location": 33,
            "return": [
                "int"
            ],
            "arguments": {}
        }
    },
    "prometeo-master/examples/pure_python_inline/pure_python_inline.py": {
        "main": {
            "name": "main",
            "location": 8,
            "return": [
                "int"
            ],
            "arguments": {}
        }
    },
    "prometeo-master/examples/riccati_example/riccati.py": {
        "main": {
            "name": "main",
            "location": 49,
            "return": [
                "int"
            ],
            "arguments": {}
        },
        "qp_data.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "qp_data.factorize": {
            "name": "factorize",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "prometeo-master/examples/riccati_example/riccati_array.py": {
        "main": {
            "name": "main",
            "location": 8,
            "return": [
                "int"
            ],
            "arguments": {}
        }
    },
    "prometeo-master/examples/riccati_example/riccati_compact.py": {
        "main": {
            "name": "main",
            "location": 43,
            "return": [
                "int"
            ],
            "arguments": {}
        },
        "qp_data.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "qp_data.factorize": {
            "name": "factorize",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "prometeo-master/examples/riccati_example/riccati_debug.py": {
        "main": {
            "name": "main",
            "location": 9,
            "return": [
                "int"
            ],
            "arguments": {}
        }
    },
    "prometeo-master/examples/riccati_example/riccati_mass_spring.py": {
        "main": {
            "name": "main",
            "location": 9,
            "return": [
                "int"
            ],
            "arguments": {}
        }
    },
    "prometeo-master/examples/riccati_example/riccati_mass_spring_2.py": {
        "main": {
            "name": "main",
            "location": 51,
            "return": [
                "int"
            ],
            "arguments": {}
        },
        "qp_data.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "qp_data.factorize": {
            "name": "factorize",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "prometeo-master/examples/riccati_example/riccati_numpy.py": {},
    "prometeo-master/examples/simple_class/simple_class.py": {
        "foo": {
            "name": "foo",
            "location": 3,
            "return": [
                "list[T]",
                "int",
                "list[int]"
            ],
            "arguments": {
                "a": [
                    "list[T]",
                    "int",
                    "list[int]"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 29,
            "return": [
                "int"
            ],
            "arguments": {}
        },
        "Number.__init__": {
            "name": "__init__",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Number.get_value": {
            "name": "get_value",
            "location": 10,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Simple_class.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Simple_class.method1": {
            "name": "method1",
            "location": 23,
            "return": [],
            "arguments": {
                "self": [],
                "b": []
            }
        }
    },
    "prometeo-master/examples/simple_example/simple_example.py": {
        "foo": {
            "name": "foo",
            "location": 5,
            "return": [
                "int"
            ],
            "arguments": {
                "a": [
                    "list[T]",
                    "int",
                    "list[int]"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 8,
            "return": [
                "int"
            ],
            "arguments": {}
        }
    },
    "prometeo-master/examples/test/test.py": {
        "main": {
            "name": "main",
            "location": 74,
            "return": [
                "int"
            ],
            "arguments": {}
        },
        "qp_data.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "qp_data.factorize": {
            "name": "factorize",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "prometeo-master/examples/test/test_assignments.py": {
        "main": {
            "name": "main",
            "location": 7,
            "return": [
                "int"
            ],
            "arguments": {}
        }
    },
    "prometeo-master/examples/test/test_lapack.py": {
        "main": {
            "name": "main",
            "location": 6,
            "return": [
                "int"
            ],
            "arguments": {}
        }
    },
    "prometeo-master/experimental/type_and_tuple_indexing.py": {
        "_psize.__getitem__": {
            "name": "__getitem__",
            "location": 4,
            "return": [
                "_psize"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ]
            }
        },
        "_psize2.__getitem__": {
            "name": "__getitem__",
            "location": 20,
            "return": [],
            "arguments": {
                "self": [],
                "index": [
                    "list[]",
                    "set[str]",
                    "list[float]",
                    "list[int]"
                ]
            }
        }
    },
    "prometeo-master/experimental/blas_api/simple_example.py": {
        "main": {
            "name": "main",
            "location": 5,
            "return": [
                "int"
            ],
            "arguments": {}
        }
    },
    "prometeo-master/experimental/dgemm_example/dgemm.py": {
        "function1": {
            "name": "function1",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "A": [
                    "int",
                    "float"
                ],
                "B": [
                    "int",
                    "float"
                ],
                "C": []
            }
        },
        "main": {
            "name": "main",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "p_class.method_2": {
            "name": "method_2",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "A": [
                    "str",
                    "int",
                    "typing.Iterable[str]",
                    "typing.Sequence[T]",
                    "float"
                ],
                "B": [
                    "str",
                    "int",
                    "typing.Iterable[str]",
                    "typing.Sequence[T]",
                    "float"
                ],
                "C": [
                    "float",
                    "int",
                    "None",
                    "str",
                    "typing.Iterable[]"
                ]
            }
        }
    },
    "prometeo-master/experimental/dgemm_example/parse.py": {
        "iter_all_ast": {
            "name": "iter_all_ast",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "node": [
                    "int",
                    "list[]",
                    "bytes",
                    "dict[str, typing.Any]",
                    "typing.Pattern"
                ]
            }
        },
        "v.generic_visit": {
            "name": "generic_visit",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "int"
                ]
            }
        },
        "FuncLister.visit_FunctionDef": {
            "name": "visit_FunctionDef",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node": []
            }
        }
    },
    "prometeo-master/experimental/experimental_examples/blas_interface.py": {},
    "prometeo-master/experimental/experimental_examples/new_test.py": {},
    "prometeo-master/experimental/experimental_examples/test_blasfeo_ctypes.py": {},
    "prometeo-master/experimental/experimental_examples/test_prmt_mat.py": {},
    "prometeo-master/experimental/heap_computation/cycle_detect.py": {
        "function1": {
            "name": "function1",
            "location": 1,
            "return": [
                "None"
            ],
            "arguments": {
                "arg1": [],
                "arg2": []
            }
        },
        "function2": {
            "name": "function2",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {
                "arg1": [],
                "arg2": []
            }
        },
        "function3": {
            "name": "function3",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "arg1": [],
                "arg2": []
            }
        },
        "function4": {
            "name": "function4",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "arg1": [
                    "int",
                    "typing.Callable[[], None]",
                    "str",
                    "dict[, ]"
                ],
                "arg2": [
                    "int",
                    "typing.Callable[[], None]",
                    "str",
                    "dict[, ]"
                ]
            }
        }
    },
    "prometeo-master/experimental/heap_computation/mem_test_code.py": {
        "function_1": {
            "name": "function_1",
            "location": 1,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "function_2": {
            "name": "function_2",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "function_3": {
            "name": "function_3",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "main": {
            "name": "main",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "class1.__init__": {
            "name": "__init__",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "class1.method_1": {
            "name": "method_1",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "prometeo-master/experimental/heap_computation/test_mem.py": {},
    "prometeo-master/experimental/laparser/laparser.py": {
        "_pushFirst": {
            "name": "_pushFirst",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "str": [
                    "int",
                    "str"
                ],
                "loc": [
                    "str",
                    "bool"
                ],
                "toks": [
                    "str"
                ]
            }
        },
        "_assignVar": {
            "name": "_assignVar",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {
                "str": [
                    "str",
                    "None",
                    "bool"
                ],
                "loc": [
                    "str",
                    "None",
                    "bool"
                ],
                "toks": [
                    "str"
                ]
            }
        },
        "preprocess_var_name": {
            "name": "preprocess_var_name",
            "location": 166,
            "return": [
                "Forward",
                "Combine"
            ],
            "arguments": {
                "ident": [
                    "str",
                    "dict[str, typing.Any]"
                ],
                "typed_record": [
                    "str",
                    "list[]"
                ]
            }
        },
        "_ismat": {
            "name": "_ismat",
            "location": 175,
            "return": [
                "bool"
            ],
            "arguments": {
                "ident": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ]
            }
        },
        "_addfunc": {
            "name": "_addfunc",
            "location": 198,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "a": [
                    "int",
                    "str",
                    "dict[str, typing.Any]"
                ],
                "b": [
                    "str",
                    "bool",
                    "Exception",
                    "typing.MutableMapping",
                    "None"
                ],
                "typed_record": [
                    "str",
                    "int"
                ]
            }
        },
        "_subfunc": {
            "name": "_subfunc",
            "location": 211,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "a": [
                    "int",
                    "str",
                    "dict[str, typing.Any]"
                ],
                "b": [
                    "str",
                    "bool",
                    "Exception",
                    "typing.MutableMapping",
                    "None"
                ],
                "typed_record": [
                    "str",
                    "int"
                ]
            }
        },
        "_mulfunc": {
            "name": "_mulfunc",
            "location": 224,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "a": [
                    "int",
                    "str",
                    "dict[str, typing.Any]"
                ],
                "b": [
                    "str",
                    "bool",
                    "Exception",
                    "typing.MutableMapping",
                    "None"
                ],
                "typed_record": [
                    "str",
                    "int"
                ]
            }
        },
        "_solvefunc": {
            "name": "_solvefunc",
            "location": 243,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "a": [
                    "int",
                    "str",
                    "dict[str, typing.Any]"
                ],
                "b": [
                    "str",
                    "bool",
                    "Exception",
                    "typing.MutableMapping",
                    "None"
                ],
                "typed_record": [
                    "str",
                    "int"
                ]
            }
        },
        "_outermulfunc": {
            "name": "_outermulfunc",
            "location": 253,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "a": [
                    "int",
                    "str",
                    "dict[str, typing.Any]"
                ],
                "b": [
                    "str",
                    "bool",
                    "Exception",
                    "typing.MutableMapping",
                    "None"
                ],
                "typed_record": [
                    "str",
                    "int"
                ]
            }
        },
        "_divfunc": {
            "name": "_divfunc",
            "location": 263,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "a": [
                    "str",
                    "int"
                ],
                "b": [
                    "str",
                    "None",
                    "typing.Callable[, ]"
                ],
                "typed_record": [
                    "str",
                    "int"
                ]
            }
        },
        "_expfunc": {
            "name": "_expfunc",
            "location": 273,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "a": [
                    "int",
                    "str",
                    "dict[, ]",
                    "None",
                    "float"
                ],
                "b": [
                    "str",
                    "typing.Callable[, ]",
                    "None"
                ],
                "typed_record": [
                    "str",
                    "int"
                ]
            }
        },
        "_assignfunc": {
            "name": "_assignfunc",
            "location": 296,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "a": [
                    "str",
                    "int",
                    "typing.Callable[[], typing.Any]"
                ],
                "b": [
                    "str",
                    "list[]",
                    "int"
                ],
                "typed_record": [
                    "str",
                    "int"
                ]
            }
        },
        "_evaluateStack": {
            "name": "_evaluateStack",
            "location": 327,
            "return": [
                "dict[, ]",
                "dict[str, typing.Literal]"
            ],
            "arguments": {
                "s": [],
                "typed_record": [
                    "str",
                    "None",
                    "list[]"
                ]
            }
        },
        "parse": {
            "name": "parse",
            "location": 343,
            "return": [
                "tuple[typing.Union[bool,float]]",
                "str"
            ],
            "arguments": {
                "input_string": [
                    "str",
                    "typing.Iterable[str]"
                ],
                "typed_record": [
                    "int",
                    "str",
                    "dict[, ]"
                ]
            }
        },
        "fprocess": {
            "name": "fprocess",
            "location": 418,
            "return": [
                "None"
            ],
            "arguments": {
                "infilep": [],
                "outfilep": [
                    "str",
                    "typing.TextIO"
                ],
                "typed_record_json": [
                    "str"
                ]
            }
        },
        "test": {
            "name": "test",
            "location": 447,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "fprocess.parser": {
            "name": "parser",
            "location": 437,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "mo": []
            }
        },
        "test.post_test": {
            "name": "post_test",
            "location": 499,
            "return": [
                "None"
            ],
            "arguments": {
                "test": [],
                "parsed": []
            }
        }
    },
    "prometeo-master/experimental/la_py_wrapper/p_matrix.py": {
        "matrix": {
            "name": "matrix",
            "location": 49,
            "return": [],
            "arguments": {}
        },
        "dot": {
            "name": "dot",
            "location": 61,
            "return": [
                "bool"
            ],
            "arguments": {
                "u": [],
                "v": []
            }
        },
        "cross": {
            "name": "cross",
            "location": 66,
            "return": [
                "Matrix"
            ],
            "arguments": {
                "u": [],
                "v": []
            }
        },
        "get_row_echelon_form": {
            "name": "get_row_echelon_form",
            "location": 431,
            "return": [
                "tuple[typing.Optional[int]]"
            ],
            "arguments": {
                "matrix": [],
                "mirror": []
            }
        },
        "get_reduced_row_echelon_form": {
            "name": "get_reduced_row_echelon_form",
            "location": 483,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "matrix": [],
                "mirror": [
                    "None"
                ]
            }
        },
        "terminal_input": {
            "name": "terminal_input",
            "location": 534,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "analyse": {
            "name": "analyse",
            "location": 550,
            "return": [
                "None"
            ],
            "arguments": {
                "matrix": []
            }
        },
        "main": {
            "name": "main",
            "location": 582,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "Matrix.__init__": {
            "name": "__init__",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "rows": [],
                "cols": [],
                "fill": [
                    "int"
                ]
            }
        },
        "Matrix.__str__": {
            "name": "__str__",
            "location": 95,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Matrix.__repr__": {
            "name": "__repr__",
            "location": 103,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "Matrix.__getitem__": {
            "name": "__getitem__",
            "location": 109,
            "return": [],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "Matrix.__contains__": {
            "name": "__contains__",
            "location": 113,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "item": []
            }
        },
        "Matrix.__neg__": {
            "name": "__neg__",
            "location": 120,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Matrix.__pos__": {
            "name": "__pos__",
            "location": 124,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Matrix.__eq__": {
            "name": "__eq__",
            "location": 128,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Matrix.__ne__": {
            "name": "__ne__",
            "location": 132,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Matrix.__add__": {
            "name": "__add__",
            "location": 136,
            "return": [
                "Matrix"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Matrix.__sub__": {
            "name": "__sub__",
            "location": 147,
            "return": [
                "Matrix"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Matrix.__mul__": {
            "name": "__mul__",
            "location": 158,
            "return": [
                "Matrix"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Matrix.__rmul__": {
            "name": "__rmul__",
            "location": 171,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Matrix.__pow__": {
            "name": "__pow__",
            "location": 179,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Matrix.__iter__": {
            "name": "__iter__",
            "location": 188,
            "return": [
                "typing.Generator[tuple[]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Matrix.row": {
            "name": "row",
            "location": 194,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "self": [],
                "n": []
            }
        },
        "Matrix.col": {
            "name": "col",
            "location": 199,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "self": [],
                "n": []
            }
        },
        "Matrix.rows": {
            "name": "rows",
            "location": 204,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Matrix.cols": {
            "name": "cols",
            "location": 209,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Matrix.rowvec": {
            "name": "rowvec",
            "location": 214,
            "return": [
                "Matrix"
            ],
            "arguments": {
                "self": [],
                "n": []
            }
        },
        "Matrix.colvec": {
            "name": "colvec",
            "location": 221,
            "return": [
                "Matrix"
            ],
            "arguments": {
                "self": [],
                "n": []
            }
        },
        "Matrix.equals": {
            "name": "equals",
            "location": 228,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [],
                "delta": [
                    "None"
                ]
            }
        },
        "Matrix.copy": {
            "name": "copy",
            "location": 245,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Matrix.trans": {
            "name": "trans",
            "location": 249,
            "return": [
                "Matrix"
            ],
            "arguments": {
                "self": []
            }
        },
        "Matrix.det": {
            "name": "det",
            "location": 256,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Matrix.minor": {
            "name": "minor",
            "location": 267,
            "return": [],
            "arguments": {
                "self": [],
                "row": [],
                "col": []
            }
        },
        "Matrix.cofactor": {
            "name": "cofactor",
            "location": 271,
            "return": [],
            "arguments": {
                "self": [],
                "row": [],
                "col": []
            }
        },
        "Matrix.cofactors": {
            "name": "cofactors",
            "location": 275,
            "return": [
                "Matrix"
            ],
            "arguments": {
                "self": []
            }
        },
        "Matrix.adjoint": {
            "name": "adjoint",
            "location": 282,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Matrix.inv": {
            "name": "inv",
            "location": 286,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Matrix.del_row_col": {
            "name": "del_row_col",
            "location": 296,
            "return": [],
            "arguments": {
                "self": [],
                "row_to_delete": [],
                "col_to_delete": []
            }
        },
        "Matrix.del_row": {
            "name": "del_row",
            "location": 300,
            "return": [
                "Matrix"
            ],
            "arguments": {
                "self": [],
                "row_to_delete": []
            }
        },
        "Matrix.del_col": {
            "name": "del_col",
            "location": 310,
            "return": [
                "Matrix"
            ],
            "arguments": {
                "self": [],
                "col_to_delete": []
            }
        },
        "Matrix.map": {
            "name": "map",
            "location": 320,
            "return": [
                "Matrix"
            ],
            "arguments": {
                "self": [],
                "func": []
            }
        },
        "Matrix.rowop_multiply": {
            "name": "rowop_multiply",
            "location": 327,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "row": [],
                "m": []
            }
        },
        "Matrix.rowop_swap": {
            "name": "rowop_swap",
            "location": 332,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "r1": [],
                "r2": []
            }
        },
        "Matrix.rowop_add": {
            "name": "rowop_add",
            "location": 337,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "r1": [],
                "m": [],
                "r2": []
            }
        },
        "Matrix.ref": {
            "name": "ref",
            "location": 342,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Matrix.rref": {
            "name": "rref",
            "location": 346,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Matrix.len": {
            "name": "len",
            "location": 350,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Matrix.dir": {
            "name": "dir",
            "location": 354,
            "return": [
                "Matrix"
            ],
            "arguments": {
                "self": []
            }
        },
        "Matrix.is_square": {
            "name": "is_square",
            "location": 358,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Matrix.is_invertible": {
            "name": "is_invertible",
            "location": 362,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Matrix.rank": {
            "name": "rank",
            "location": 370,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Matrix.dot": {
            "name": "dot",
            "location": 380,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Matrix.cross": {
            "name": "cross",
            "location": 384,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Matrix.elements": {
            "name": "elements",
            "location": 388,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Matrix.from_list": {
            "name": "from_list",
            "location": 395,
            "return": [
                "Matrix"
            ],
            "arguments": {
                "l": []
            }
        },
        "Matrix.from_string": {
            "name": "from_string",
            "location": 404,
            "return": [
                "Matrix"
            ],
            "arguments": {
                "s": [],
                "rowsep": [
                    "None"
                ],
                "colsep": [
                    "None"
                ],
                "parser": []
            }
        },
        "Matrix.identity": {
            "name": "identity",
            "location": 414,
            "return": [
                "Matrix"
            ],
            "arguments": {
                "n": []
            }
        },
        "HelpAction.__call__": {
            "name": "__call__",
            "location": 528,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parser": [],
                "namespace": [],
                "values": [],
                "option_string": [
                    "None"
                ]
            }
        }
    },
    "prometeo-master/experimental/meta_info/case1.py": {
        "main": {
            "name": "main",
            "location": 14,
            "return": [
                "int"
            ],
            "arguments": {}
        },
        "ClassA.method1": {
            "name": "method1",
            "location": 8,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "arg1": []
            }
        }
    },
    "prometeo-master/experimental/pymatrix/pymatrix.py": {
        "matrix": {
            "name": "matrix",
            "location": 49,
            "return": [],
            "arguments": {}
        },
        "dot": {
            "name": "dot",
            "location": 61,
            "return": [
                "bool"
            ],
            "arguments": {
                "u": [],
                "v": []
            }
        },
        "cross": {
            "name": "cross",
            "location": 66,
            "return": [
                "Matrix"
            ],
            "arguments": {
                "u": [],
                "v": []
            }
        },
        "get_row_echelon_form": {
            "name": "get_row_echelon_form",
            "location": 431,
            "return": [
                "tuple[typing.Optional[int]]"
            ],
            "arguments": {
                "matrix": [],
                "mirror": []
            }
        },
        "get_reduced_row_echelon_form": {
            "name": "get_reduced_row_echelon_form",
            "location": 483,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "matrix": [],
                "mirror": [
                    "None"
                ]
            }
        },
        "terminal_input": {
            "name": "terminal_input",
            "location": 534,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "analyse": {
            "name": "analyse",
            "location": 550,
            "return": [
                "None"
            ],
            "arguments": {
                "matrix": []
            }
        },
        "main": {
            "name": "main",
            "location": 582,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "Matrix.__init__": {
            "name": "__init__",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "rows": [],
                "cols": [],
                "fill": [
                    "int"
                ]
            }
        },
        "Matrix.__str__": {
            "name": "__str__",
            "location": 95,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Matrix.__repr__": {
            "name": "__repr__",
            "location": 103,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "Matrix.__getitem__": {
            "name": "__getitem__",
            "location": 109,
            "return": [],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "Matrix.__contains__": {
            "name": "__contains__",
            "location": 113,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "item": []
            }
        },
        "Matrix.__neg__": {
            "name": "__neg__",
            "location": 120,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Matrix.__pos__": {
            "name": "__pos__",
            "location": 124,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Matrix.__eq__": {
            "name": "__eq__",
            "location": 128,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Matrix.__ne__": {
            "name": "__ne__",
            "location": 132,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Matrix.__add__": {
            "name": "__add__",
            "location": 136,
            "return": [
                "Matrix"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Matrix.__sub__": {
            "name": "__sub__",
            "location": 147,
            "return": [
                "Matrix"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Matrix.__mul__": {
            "name": "__mul__",
            "location": 158,
            "return": [
                "Matrix"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Matrix.__rmul__": {
            "name": "__rmul__",
            "location": 171,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Matrix.__pow__": {
            "name": "__pow__",
            "location": 179,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Matrix.__iter__": {
            "name": "__iter__",
            "location": 188,
            "return": [
                "typing.Generator[tuple[]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Matrix.row": {
            "name": "row",
            "location": 194,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "self": [],
                "n": []
            }
        },
        "Matrix.col": {
            "name": "col",
            "location": 199,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "self": [],
                "n": []
            }
        },
        "Matrix.rows": {
            "name": "rows",
            "location": 204,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Matrix.cols": {
            "name": "cols",
            "location": 209,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Matrix.rowvec": {
            "name": "rowvec",
            "location": 214,
            "return": [
                "Matrix"
            ],
            "arguments": {
                "self": [],
                "n": []
            }
        },
        "Matrix.colvec": {
            "name": "colvec",
            "location": 221,
            "return": [
                "Matrix"
            ],
            "arguments": {
                "self": [],
                "n": []
            }
        },
        "Matrix.equals": {
            "name": "equals",
            "location": 228,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [],
                "delta": [
                    "None"
                ]
            }
        },
        "Matrix.copy": {
            "name": "copy",
            "location": 245,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Matrix.trans": {
            "name": "trans",
            "location": 249,
            "return": [
                "Matrix"
            ],
            "arguments": {
                "self": []
            }
        },
        "Matrix.det": {
            "name": "det",
            "location": 256,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Matrix.minor": {
            "name": "minor",
            "location": 267,
            "return": [],
            "arguments": {
                "self": [],
                "row": [],
                "col": []
            }
        },
        "Matrix.cofactor": {
            "name": "cofactor",
            "location": 271,
            "return": [],
            "arguments": {
                "self": [],
                "row": [],
                "col": []
            }
        },
        "Matrix.cofactors": {
            "name": "cofactors",
            "location": 275,
            "return": [
                "Matrix"
            ],
            "arguments": {
                "self": []
            }
        },
        "Matrix.adjoint": {
            "name": "adjoint",
            "location": 282,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Matrix.inv": {
            "name": "inv",
            "location": 286,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Matrix.del_row_col": {
            "name": "del_row_col",
            "location": 296,
            "return": [],
            "arguments": {
                "self": [],
                "row_to_delete": [],
                "col_to_delete": []
            }
        },
        "Matrix.del_row": {
            "name": "del_row",
            "location": 300,
            "return": [
                "Matrix"
            ],
            "arguments": {
                "self": [],
                "row_to_delete": []
            }
        },
        "Matrix.del_col": {
            "name": "del_col",
            "location": 310,
            "return": [
                "Matrix"
            ],
            "arguments": {
                "self": [],
                "col_to_delete": []
            }
        },
        "Matrix.map": {
            "name": "map",
            "location": 320,
            "return": [
                "Matrix"
            ],
            "arguments": {
                "self": [],
                "func": []
            }
        },
        "Matrix.rowop_multiply": {
            "name": "rowop_multiply",
            "location": 327,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "row": [],
                "m": []
            }
        },
        "Matrix.rowop_swap": {
            "name": "rowop_swap",
            "location": 332,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "r1": [],
                "r2": []
            }
        },
        "Matrix.rowop_add": {
            "name": "rowop_add",
            "location": 337,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "r1": [],
                "m": [],
                "r2": []
            }
        },
        "Matrix.ref": {
            "name": "ref",
            "location": 342,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Matrix.rref": {
            "name": "rref",
            "location": 346,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Matrix.len": {
            "name": "len",
            "location": 350,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Matrix.dir": {
            "name": "dir",
            "location": 354,
            "return": [
                "Matrix"
            ],
            "arguments": {
                "self": []
            }
        },
        "Matrix.is_square": {
            "name": "is_square",
            "location": 358,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Matrix.is_invertible": {
            "name": "is_invertible",
            "location": 362,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Matrix.rank": {
            "name": "rank",
            "location": 370,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Matrix.dot": {
            "name": "dot",
            "location": 380,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Matrix.cross": {
            "name": "cross",
            "location": 384,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Matrix.elements": {
            "name": "elements",
            "location": 388,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Matrix.from_list": {
            "name": "from_list",
            "location": 395,
            "return": [
                "Matrix"
            ],
            "arguments": {
                "l": []
            }
        },
        "Matrix.from_string": {
            "name": "from_string",
            "location": 404,
            "return": [
                "Matrix"
            ],
            "arguments": {
                "s": [],
                "rowsep": [
                    "None"
                ],
                "colsep": [
                    "None"
                ],
                "parser": []
            }
        },
        "Matrix.identity": {
            "name": "identity",
            "location": 414,
            "return": [
                "Matrix"
            ],
            "arguments": {
                "n": []
            }
        },
        "HelpAction.__call__": {
            "name": "__call__",
            "location": 528,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parser": [],
                "namespace": [],
                "values": [],
                "option_string": [
                    "None"
                ]
            }
        }
    },
    "prometeo-master/experimental/pymatrix/pymatrix_example.py": {},
    "prometeo-master/experimental/sized_type_checking/case1.py": {
        "main": {
            "name": "main",
            "location": 17,
            "return": [
                "int"
            ],
            "arguments": {}
        },
        "ClassA.method1": {
            "name": "method1",
            "location": 8,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "arg1": []
            }
        }
    },
    "prometeo-master/external/laparser/LAparser.py": {},
    "prometeo-master/external/lapywrapper/pymatrix.py": {
        "matrix": {
            "name": "matrix",
            "location": 49,
            "return": [],
            "arguments": {}
        },
        "dot": {
            "name": "dot",
            "location": 61,
            "return": [
                "bool"
            ],
            "arguments": {
                "u": [],
                "v": []
            }
        },
        "cross": {
            "name": "cross",
            "location": 66,
            "return": [
                "Matrix"
            ],
            "arguments": {
                "u": [],
                "v": []
            }
        },
        "get_row_echelon_form": {
            "name": "get_row_echelon_form",
            "location": 431,
            "return": [
                "tuple[typing.Optional[int]]"
            ],
            "arguments": {
                "matrix": [],
                "mirror": []
            }
        },
        "get_reduced_row_echelon_form": {
            "name": "get_reduced_row_echelon_form",
            "location": 483,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "matrix": [],
                "mirror": [
                    "None"
                ]
            }
        },
        "terminal_input": {
            "name": "terminal_input",
            "location": 534,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "analyse": {
            "name": "analyse",
            "location": 550,
            "return": [
                "None"
            ],
            "arguments": {
                "matrix": []
            }
        },
        "main": {
            "name": "main",
            "location": 582,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "Matrix.__init__": {
            "name": "__init__",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "rows": [],
                "cols": [],
                "fill": [
                    "int"
                ]
            }
        },
        "Matrix.__str__": {
            "name": "__str__",
            "location": 95,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Matrix.__repr__": {
            "name": "__repr__",
            "location": 103,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "Matrix.__getitem__": {
            "name": "__getitem__",
            "location": 109,
            "return": [],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "Matrix.__contains__": {
            "name": "__contains__",
            "location": 113,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "item": []
            }
        },
        "Matrix.__neg__": {
            "name": "__neg__",
            "location": 120,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Matrix.__pos__": {
            "name": "__pos__",
            "location": 124,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Matrix.__eq__": {
            "name": "__eq__",
            "location": 128,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Matrix.__ne__": {
            "name": "__ne__",
            "location": 132,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Matrix.__add__": {
            "name": "__add__",
            "location": 136,
            "return": [
                "Matrix"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Matrix.__sub__": {
            "name": "__sub__",
            "location": 147,
            "return": [
                "Matrix"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Matrix.__mul__": {
            "name": "__mul__",
            "location": 158,
            "return": [
                "Matrix"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Matrix.__rmul__": {
            "name": "__rmul__",
            "location": 171,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Matrix.__pow__": {
            "name": "__pow__",
            "location": 179,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Matrix.__iter__": {
            "name": "__iter__",
            "location": 188,
            "return": [
                "typing.Generator[tuple[]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Matrix.row": {
            "name": "row",
            "location": 194,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "self": [],
                "n": []
            }
        },
        "Matrix.col": {
            "name": "col",
            "location": 199,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "self": [],
                "n": []
            }
        },
        "Matrix.rows": {
            "name": "rows",
            "location": 204,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Matrix.cols": {
            "name": "cols",
            "location": 209,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Matrix.rowvec": {
            "name": "rowvec",
            "location": 214,
            "return": [
                "Matrix"
            ],
            "arguments": {
                "self": [],
                "n": []
            }
        },
        "Matrix.colvec": {
            "name": "colvec",
            "location": 221,
            "return": [
                "Matrix"
            ],
            "arguments": {
                "self": [],
                "n": []
            }
        },
        "Matrix.equals": {
            "name": "equals",
            "location": 228,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [],
                "delta": [
                    "None"
                ]
            }
        },
        "Matrix.copy": {
            "name": "copy",
            "location": 245,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Matrix.trans": {
            "name": "trans",
            "location": 249,
            "return": [
                "Matrix"
            ],
            "arguments": {
                "self": []
            }
        },
        "Matrix.det": {
            "name": "det",
            "location": 256,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Matrix.minor": {
            "name": "minor",
            "location": 267,
            "return": [],
            "arguments": {
                "self": [],
                "row": [],
                "col": []
            }
        },
        "Matrix.cofactor": {
            "name": "cofactor",
            "location": 271,
            "return": [],
            "arguments": {
                "self": [],
                "row": [],
                "col": []
            }
        },
        "Matrix.cofactors": {
            "name": "cofactors",
            "location": 275,
            "return": [
                "Matrix"
            ],
            "arguments": {
                "self": []
            }
        },
        "Matrix.adjoint": {
            "name": "adjoint",
            "location": 282,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Matrix.inv": {
            "name": "inv",
            "location": 286,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Matrix.del_row_col": {
            "name": "del_row_col",
            "location": 296,
            "return": [],
            "arguments": {
                "self": [],
                "row_to_delete": [],
                "col_to_delete": []
            }
        },
        "Matrix.del_row": {
            "name": "del_row",
            "location": 300,
            "return": [
                "Matrix"
            ],
            "arguments": {
                "self": [],
                "row_to_delete": []
            }
        },
        "Matrix.del_col": {
            "name": "del_col",
            "location": 310,
            "return": [
                "Matrix"
            ],
            "arguments": {
                "self": [],
                "col_to_delete": []
            }
        },
        "Matrix.map": {
            "name": "map",
            "location": 320,
            "return": [
                "Matrix"
            ],
            "arguments": {
                "self": [],
                "func": []
            }
        },
        "Matrix.rowop_multiply": {
            "name": "rowop_multiply",
            "location": 327,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "row": [],
                "m": []
            }
        },
        "Matrix.rowop_swap": {
            "name": "rowop_swap",
            "location": 332,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "r1": [],
                "r2": []
            }
        },
        "Matrix.rowop_add": {
            "name": "rowop_add",
            "location": 337,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "r1": [],
                "m": [],
                "r2": []
            }
        },
        "Matrix.ref": {
            "name": "ref",
            "location": 342,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Matrix.rref": {
            "name": "rref",
            "location": 346,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Matrix.len": {
            "name": "len",
            "location": 350,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Matrix.dir": {
            "name": "dir",
            "location": 354,
            "return": [
                "Matrix"
            ],
            "arguments": {
                "self": []
            }
        },
        "Matrix.is_square": {
            "name": "is_square",
            "location": 358,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Matrix.is_invertible": {
            "name": "is_invertible",
            "location": 362,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Matrix.rank": {
            "name": "rank",
            "location": 370,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Matrix.dot": {
            "name": "dot",
            "location": 380,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Matrix.cross": {
            "name": "cross",
            "location": 384,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Matrix.elements": {
            "name": "elements",
            "location": 388,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Matrix.from_list": {
            "name": "from_list",
            "location": 395,
            "return": [
                "Matrix"
            ],
            "arguments": {
                "l": []
            }
        },
        "Matrix.from_string": {
            "name": "from_string",
            "location": 404,
            "return": [
                "Matrix"
            ],
            "arguments": {
                "s": [],
                "rowsep": [
                    "None"
                ],
                "colsep": [
                    "None"
                ],
                "parser": []
            }
        },
        "Matrix.identity": {
            "name": "identity",
            "location": 414,
            "return": [
                "Matrix"
            ],
            "arguments": {
                "n": []
            }
        },
        "HelpAction.__call__": {
            "name": "__call__",
            "location": 528,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parser": [],
                "namespace": [],
                "values": [],
                "option_string": [
                    "None"
                ]
            }
        }
    },
    "prometeo-master/prometeo/__init__.py": {},
    "prometeo-master/prometeo/__main__.py": {
        "console_entry": {
            "name": "console_entry",
            "location": 6,
            "return": [],
            "arguments": {}
        }
    },
    "prometeo-master/prometeo/auxl/plist.py": {
        "plist": {
            "name": "plist",
            "location": 2,
            "return": [
                "list[str]"
            ],
            "arguments": {
                "list_type": [
                    "str"
                ],
                "sizes": []
            }
        }
    },
    "prometeo-master/prometeo/auxl/__init__.py": {},
    "prometeo-master/prometeo/cgen/code_gen.py": {},
    "prometeo-master/prometeo/cgen/code_gen_c.py": {
        "my_isinstance": {
            "name": "my_isinstance",
            "location": 112,
            "return": [],
            "arguments": {
                "obj": [],
                "classinfo": []
            }
        },
        "check_node_structure": {
            "name": "check_node_structure",
            "location": 133,
            "return": [],
            "arguments": {
                "node": [],
                "struct": []
            }
        },
        "get_slice_value": {
            "name": "get_slice_value",
            "location": 145,
            "return": [],
            "arguments": {
                "node": []
            }
        },
        "recurse_attributes": {
            "name": "recurse_attributes",
            "location": 166,
            "return": [],
            "arguments": {
                "node": []
            }
        },
        "parse_pmt_gemm_args": {
            "name": "parse_pmt_gemm_args",
            "location": 174,
            "return": [],
            "arguments": {
                "generator": [],
                "call": [],
                "node": []
            }
        },
        "to_source": {
            "name": "to_source",
            "location": 229,
            "return": [],
            "arguments": {
                "node": [],
                "module_name": [],
                "indent_with": [],
                "add_line_information": [],
                "pretty_string": [],
                "pretty_source": [],
                "main": [],
                "size_of_pointer": [],
                "size_of_int": [],
                "size_of_double": []
            }
        },
        "precedence_setter": {
            "name": "precedence_setter",
            "location": 327,
            "return": [],
            "arguments": {
                "AST": [],
                "get_op_precedence": [],
                "my_isinstance": [],
                "list": []
            }
        },
        "descope": {
            "name": "descope",
            "location": 351,
            "return": [],
            "arguments": {
                "current_scope": [],
                "pop": []
            }
        },
        "Num_or_Name": {
            "name": "Num_or_Name",
            "location": 358,
            "return": [],
            "arguments": {
                "node": []
            }
        },
        "check_expression": {
            "name": "check_expression",
            "location": 375,
            "return": [],
            "arguments": {
                "node": [],
                "binops": [],
                "unops": [],
                "usr_types": [],
                "ast_types": [],
                "record": []
            }
        },
        "PmtArg.__init__": {
            "name": "__init__",
            "location": 153,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "PmtCall.__init__": {
            "name": "__init__",
            "location": 160,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "cgenException.__init__": {
            "name": "__init__",
            "location": 224,
            "return": [],
            "arguments": {
                "self": [],
                "message": [],
                "lineno": []
            }
        },
        "precedence_setter.set_precedence": {
            "name": "set_precedence",
            "location": 334,
            "return": [],
            "arguments": {
                "value": []
            }
        },
        "Delimit.__init__": {
            "name": "__init__",
            "location": 438,
            "return": [],
            "arguments": {
                "self": [],
                "tree": []
            }
        },
        "Delimit.__enter__": {
            "name": "__enter__",
            "location": 464,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Delimit.__exit__": {
            "name": "__exit__",
            "location": 467,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SourceGenerator.__init__": {
            "name": "__init__",
            "location": 485,
            "return": [],
            "arguments": {
                "self": [],
                "indent_with": [],
                "size_of_pointer": [],
                "size_of_int": [],
                "size_of_double": [],
                "add_line_information": [],
                "pretty_string": [],
                "blasfeo_ps": [],
                "blasfeo_nc": []
            }
        },
        "SourceGenerator.__getattr__": {
            "name": "__getattr__",
            "location": 665,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "defaults": []
            }
        },
        "SourceGenerator.delimit": {
            "name": "delimit",
            "location": 682,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SourceGenerator.conditional_write": {
            "name": "conditional_write",
            "location": 685,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SourceGenerator.newline": {
            "name": "newline",
            "location": 691,
            "return": [],
            "arguments": {
                "self": [],
                "node": [],
                "extra": []
            }
        },
        "SourceGenerator.get_type_of_node": {
            "name": "get_type_of_node",
            "location": 697,
            "return": [],
            "arguments": {
                "self": [],
                "node": [],
                "scope": []
            }
        },
        "SourceGenerator.get_type_of_node_rec": {
            "name": "get_type_of_node_rec",
            "location": 827,
            "return": [],
            "arguments": {
                "self": [],
                "node": [],
                "scope": []
            }
        },
        "SourceGenerator.fun_in_function_record": {
            "name": "fun_in_function_record",
            "location": 850,
            "return": [],
            "arguments": {
                "self": [],
                "scope": []
            }
        },
        "SourceGenerator.fun_in_function_record_rec": {
            "name": "fun_in_function_record_rec",
            "location": 858,
            "return": [],
            "arguments": {
                "self": [],
                "tokens": [],
                "scope": []
            }
        },
        "SourceGenerator.get_ret_type_from_function_record": {
            "name": "get_ret_type_from_function_record",
            "location": 866,
            "return": [],
            "arguments": {
                "self": [],
                "scope": []
            }
        },
        "SourceGenerator.get_ret_type_from_function_record_rec": {
            "name": "get_ret_type_from_function_record_rec",
            "location": 874,
            "return": [],
            "arguments": {
                "self": [],
                "tokens": [],
                "scope": []
            }
        },
        "SourceGenerator.body": {
            "name": "body",
            "location": 883,
            "return": [],
            "arguments": {
                "self": [],
                "statements": []
            }
        },
        "SourceGenerator.body_class": {
            "name": "body_class",
            "location": 888,
            "return": [],
            "arguments": {
                "self": [],
                "statements": [],
                "name": []
            }
        },
        "SourceGenerator.process_list_type": {
            "name": "process_list_type",
            "location": 908,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "SourceGenerator.write_instance_attributes": {
            "name": "write_instance_attributes",
            "location": 943,
            "return": [],
            "arguments": {
                "self": [],
                "params": [],
                "name": []
            }
        },
        "SourceGenerator.write_class": {
            "name": "write_class",
            "location": 1013,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SourceGenerator.write_class_method_prototypes": {
            "name": "write_class_method_prototypes",
            "location": 1084,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SourceGenerator.update_constructor_heap": {
            "name": "update_constructor_heap",
            "location": 1135,
            "return": [],
            "arguments": {
                "self": [],
                "params": [],
                "name": []
            }
        },
        "SourceGenerator.write_class_constructor": {
            "name": "write_class_constructor",
            "location": 1307,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SourceGenerator.write_class_methods": {
            "name": "write_class_methods",
            "location": 1343,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SourceGenerator.else_body": {
            "name": "else_body",
            "location": 1408,
            "return": [],
            "arguments": {
                "self": [],
                "elsewhat": []
            }
        },
        "SourceGenerator.body_or_else": {
            "name": "body_or_else",
            "location": 1414,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "SourceGenerator.visit_arguments": {
            "name": "visit_arguments",
            "location": 1418,
            "return": [],
            "arguments": {
                "self": [],
                "node": [],
                "dest_in": []
            }
        },
        "SourceGenerator.build_arg_mangling": {
            "name": "build_arg_mangling",
            "location": 1473,
            "return": [],
            "arguments": {
                "self": [],
                "args": [],
                "is_call": []
            }
        },
        "SourceGenerator.statement": {
            "name": "statement",
            "location": 1597,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "SourceGenerator.decorators": {
            "name": "decorators",
            "location": 1601,
            "return": [],
            "arguments": {
                "self": [],
                "node": [],
                "extra": []
            }
        },
        "SourceGenerator.comma_list": {
            "name": "comma_list",
            "location": 1606,
            "return": [],
            "arguments": {
                "self": [],
                "items": [],
                "trailing": []
            }
        },
        "SourceGenerator.visit_Assign": {
            "name": "visit_Assign",
            "location": 1613,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "SourceGenerator.visit_AugAssign": {
            "name": "visit_AugAssign",
            "location": 1962,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "SourceGenerator.visit_AnnAssign": {
            "name": "visit_AnnAssign",
            "location": 1969,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "SourceGenerator.visit_ImportFrom": {
            "name": "visit_ImportFrom",
            "location": 2262,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "SourceGenerator.visit_Import": {
            "name": "visit_Import",
            "location": 2277,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "SourceGenerator.visit_Expr": {
            "name": "visit_Expr",
            "location": 2284,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "SourceGenerator.visit_FunctionDef": {
            "name": "visit_FunctionDef",
            "location": 2301,
            "return": [],
            "arguments": {
                "self": [],
                "node": [],
                "is_async": []
            }
        },
        "SourceGenerator.visit_AsyncFunctionDef": {
            "name": "visit_AsyncFunctionDef",
            "location": 2396,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "SourceGenerator.visit_ClassDef": {
            "name": "visit_ClassDef",
            "location": 2401,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "SourceGenerator.visit_If": {
            "name": "visit_If",
            "location": 2445,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "SourceGenerator.visit_For": {
            "name": "visit_For",
            "location": 2463,
            "return": [],
            "arguments": {
                "self": [],
                "node": [],
                "is_async": []
            }
        },
        "SourceGenerator.visit_AsyncFor": {
            "name": "visit_AsyncFor",
            "location": 2491,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "SourceGenerator.visit_While": {
            "name": "visit_While",
            "location": 2496,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "SourceGenerator.visit_With": {
            "name": "visit_With",
            "location": 2505,
            "return": [],
            "arguments": {
                "self": [],
                "node": [],
                "is_async": []
            }
        },
        "SourceGenerator.visit_AsyncWith": {
            "name": "visit_AsyncWith",
            "location": 2518,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "SourceGenerator.visit_withitem": {
            "name": "visit_withitem",
            "location": 2524,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "SourceGenerator.visit_NameConstant": {
            "name": "visit_NameConstant",
            "location": 2530,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "SourceGenerator.visit_Pass": {
            "name": "visit_Pass",
            "location": 2535,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "SourceGenerator.visit_Print": {
            "name": "visit_Print",
            "location": 2540,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "SourceGenerator.visit_Delete": {
            "name": "visit_Delete",
            "location": 2551,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "SourceGenerator.visit_TryExcept": {
            "name": "visit_TryExcept",
            "location": 2557,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "SourceGenerator.visit_Try": {
            "name": "visit_Try",
            "location": 2566,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "SourceGenerator.visit_ExceptHandler": {
            "name": "visit_ExceptHandler",
            "location": 2577,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "SourceGenerator.visit_TryFinally": {
            "name": "visit_TryFinally",
            "location": 2586,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "SourceGenerator.visit_Exec": {
            "name": "visit_Exec",
            "location": 2594,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "SourceGenerator.visit_Assert": {
            "name": "visit_Assert",
            "location": 2603,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "SourceGenerator.visit_Global": {
            "name": "visit_Global",
            "location": 2610,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "SourceGenerator.visit_Nonlocal": {
            "name": "visit_Nonlocal",
            "location": 2615,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "SourceGenerator.visit_Return": {
            "name": "visit_Return",
            "location": 2620,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "SourceGenerator.visit_Break": {
            "name": "visit_Break",
            "location": 2654,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "SourceGenerator.visit_Continue": {
            "name": "visit_Continue",
            "location": 2659,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "SourceGenerator.visit_Raise": {
            "name": "visit_Raise",
            "location": 2664,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "SourceGenerator.visit_Attribute": {
            "name": "visit_Attribute",
            "location": 2677,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "SourceGenerator.visit_Call": {
            "name": "visit_Call",
            "location": 2702,
            "return": [],
            "arguments": {
                "self": [],
                "node": [],
                "len": []
            }
        },
        "SourceGenerator.visit_Name": {
            "name": "visit_Name",
            "location": 2928,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "SourceGenerator.visit_JoinedStr": {
            "name": "visit_JoinedStr",
            "location": 2933,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "SourceGenerator.visit_Str": {
            "name": "visit_Str",
            "location": 2938,
            "return": [],
            "arguments": {
                "self": [],
                "node": [],
                "is_joined": []
            }
        },
        "SourceGenerator.visit_Bytes": {
            "name": "visit_Bytes",
            "location": 3008,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "SourceGenerator.visit_Num": {
            "name": "visit_Num",
            "location": 3013,
            "return": [],
            "arguments": {
                "self": [],
                "node": [],
                "new": []
            }
        },
        "SourceGenerator.visit_Tuple": {
            "name": "visit_Tuple",
            "location": 3041,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "SourceGenerator.visit_List": {
            "name": "visit_List",
            "location": 3052,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "SourceGenerator.visit_Set": {
            "name": "visit_Set",
            "location": 3058,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "SourceGenerator.visit_Dict": {
            "name": "visit_Dict",
            "location": 3064,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "SourceGenerator.visit_BinOp": {
            "name": "visit_BinOp",
            "location": 3074,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "SourceGenerator.visit_BoolOp": {
            "name": "visit_BoolOp",
            "location": 3085,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "SourceGenerator.visit_Compare": {
            "name": "visit_Compare",
            "location": 3094,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "SourceGenerator.visit_UnaryOp": {
            "name": "visit_UnaryOp",
            "location": 3103,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "SourceGenerator.visit_Subscript": {
            "name": "visit_Subscript",
            "location": 3116,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "SourceGenerator.visit_Slice": {
            "name": "visit_Slice",
            "location": 3122,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "SourceGenerator.visit_Index": {
            "name": "visit_Index",
            "location": 3135,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "SourceGenerator.visit_ExtSlice": {
            "name": "visit_ExtSlice",
            "location": 3142,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "SourceGenerator.visit_Yield": {
            "name": "visit_Yield",
            "location": 3149,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "SourceGenerator.visit_YieldFrom": {
            "name": "visit_YieldFrom",
            "location": 3158,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "SourceGenerator.visit_Await": {
            "name": "visit_Await",
            "location": 3165,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "SourceGenerator.visit_Lambda": {
            "name": "visit_Lambda",
            "location": 3171,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "SourceGenerator.visit_Ellipsis": {
            "name": "visit_Ellipsis",
            "location": 3180,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "SourceGenerator.visit_ListComp": {
            "name": "visit_ListComp",
            "location": 3185,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "SourceGenerator.visit_GeneratorExp": {
            "name": "visit_GeneratorExp",
            "location": 3191,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "SourceGenerator.visit_SetComp": {
            "name": "visit_SetComp",
            "location": 3200,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "SourceGenerator.visit_DictComp": {
            "name": "visit_DictComp",
            "location": 3206,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "SourceGenerator.visit_IfExp": {
            "name": "visit_IfExp",
            "location": 3212,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "SourceGenerator.visit_Starred": {
            "name": "visit_Starred",
            "location": 3220,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "SourceGenerator.visit_Repr": {
            "name": "visit_Repr",
            "location": 3225,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "SourceGenerator.visit_Module": {
            "name": "visit_Module",
            "location": 3232,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "SourceGenerator.visit_Expression": {
            "name": "visit_Expression",
            "location": 3237,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "SourceGenerator.visit_arg": {
            "name": "visit_arg",
            "location": 3244,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "SourceGenerator.visit_alias": {
            "name": "visit_alias",
            "location": 3250,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "SourceGenerator.visit_comprehension": {
            "name": "visit_comprehension",
            "location": 3256,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "SourceGenerator.__init__.write": {
            "name": "write",
            "location": 633,
            "return": [],
            "arguments": {}
        },
        "SourceGenerator.__getattr__.getter": {
            "name": "getter",
            "location": 676,
            "return": [],
            "arguments": {
                "node": []
            }
        },
        "SourceGenerator.visit_arguments.write_comma": {
            "name": "write_comma",
            "location": 1423,
            "return": [],
            "arguments": {}
        },
        "SourceGenerator.visit_arguments.loop_args": {
            "name": "loop_args",
            "location": 1429,
            "return": [],
            "arguments": {
                "args": [],
                "defaults": []
            }
        },
        "SourceGenerator.build_arg_mangling.loop_args_mangl_def": {
            "name": "loop_args_mangl_def",
            "location": 1476,
            "return": [],
            "arguments": {
                "args": [],
                "defaults": []
            }
        },
        "SourceGenerator.build_arg_mangling.loop_args_mangl": {
            "name": "loop_args_mangl",
            "location": 1513,
            "return": [],
            "arguments": {
                "args": []
            }
        },
        "SourceGenerator.visit_ClassDef.paren_or_comma": {
            "name": "paren_or_comma",
            "location": 2413,
            "return": [],
            "arguments": {}
        },
        "SourceGenerator.visit_Call.write_comma": {
            "name": "write_comma",
            "location": 2709,
            "return": [],
            "arguments": {}
        },
        "SourceGenerator.visit_Str.recurse": {
            "name": "recurse",
            "location": 2970,
            "return": [],
            "arguments": {
                "node": []
            }
        },
        "SourceGenerator.visit_Call.get_attr_name": {
            "name": "get_attr_name",
            "location": 2798,
            "return": [],
            "arguments": {
                "node": []
            }
        }
    },
    "prometeo-master/prometeo/cgen/node_util.py": {
        "iter_node": {
            "name": "iter_node",
            "location": 30,
            "return": [],
            "arguments": {
                "node": [],
                "name": [],
                "unknown": [],
                "list": [],
                "getattr": [],
                "isinstance": [],
                "enumerate": [],
                "missing": []
            }
        },
        "dump_tree": {
            "name": "dump_tree",
            "location": 61,
            "return": [],
            "arguments": {
                "node": [],
                "name": [],
                "initial_indent": [],
                "indentation": [],
                "maxline": [],
                "maxmerged": [],
                "iter_node": [],
                "special": [],
                "list": [],
                "isinstance": [],
                "type": [],
                "len": []
            }
        },
        "strip_tree": {
            "name": "strip_tree",
            "location": 95,
            "return": [],
            "arguments": {
                "node": [],
                "iter_node": [],
                "special": [],
                "list": [],
                "isinstance": [],
                "type": [],
                "len": []
            }
        },
        "allow_ast_comparison": {
            "name": "allow_ast_comparison",
            "location": 146,
            "return": [],
            "arguments": {}
        },
        "fast_compare": {
            "name": "fast_compare",
            "location": 174,
            "return": [],
            "arguments": {
                "tree1": [],
                "tree2": []
            }
        },
        "dump_tree.dump": {
            "name": "dump",
            "location": 72,
            "return": [],
            "arguments": {
                "node": [],
                "name": [],
                "indent": []
            }
        },
        "strip_tree.strip": {
            "name": "strip",
            "location": 107,
            "return": [],
            "arguments": {
                "node": [],
                "indent": []
            }
        },
        "ExplicitNodeVisitor.abort_visit": {
            "name": "abort_visit",
            "location": 135,
            "return": [],
            "arguments": {
                "node": []
            }
        },
        "ExplicitNodeVisitor.visit": {
            "name": "visit",
            "location": 139,
            "return": [],
            "arguments": {
                "self": [],
                "node": [],
                "abort": []
            }
        },
        "allow_ast_comparison.CompareHelper.__eq__": {
            "name": "__eq__",
            "location": 158,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "allow_ast_comparison.CompareHelper.__ne__": {
            "name": "__ne__",
            "location": 161,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        }
    },
    "prometeo-master/prometeo/cgen/op_util.py": {
        "get_op_symbol": {
            "name": "get_op_symbol",
            "location": 94,
            "return": [],
            "arguments": {
                "obj": [],
                "fmt": [],
                "symbol_data": [],
                "type": []
            }
        },
        "get_op_precedence": {
            "name": "get_op_precedence",
            "location": 100,
            "return": [],
            "arguments": {
                "obj": [],
                "precedence_data": [],
                "type": []
            }
        }
    },
    "prometeo-master/prometeo/cgen/source_repr.py": {
        "pretty_source": {
            "name": "pretty_source",
            "location": 20,
            "return": [],
            "arguments": {
                "source": []
            }
        },
        "split_lines": {
            "name": "split_lines",
            "location": 27,
            "return": [],
            "arguments": {
                "source": [],
                "maxline": []
            }
        },
        "count": {
            "name": "count",
            "location": 59,
            "return": [],
            "arguments": {
                "group": [],
                "slen": []
            }
        },
        "wrap_line": {
            "name": "wrap_line",
            "location": 63,
            "return": [],
            "arguments": {
                "line": [],
                "maxline": [],
                "result": [],
                "count": []
            }
        },
        "split_group": {
            "name": "split_group",
            "location": 147,
            "return": [],
            "arguments": {
                "source": [],
                "pos": [],
                "maxline": []
            }
        },
        "delimiter_groups": {
            "name": "delimiter_groups",
            "location": 178,
            "return": [],
            "arguments": {
                "line": [],
                "begin_delim": [],
                "end_delim": []
            }
        },
        "add_parens": {
            "name": "add_parens",
            "location": 217,
            "return": [],
            "arguments": {
                "line": [],
                "maxline": [],
                "indent": [],
                "statements": [],
                "count": []
            }
        },
        "get_assign_groups": {
            "name": "get_assign_groups",
            "location": 264,
            "return": [],
            "arguments": {
                "line": [],
                "ops": []
            }
        }
    },
    "prometeo-master/prometeo/cgen/string_repr.py": {
        "_properly_indented": {
            "name": "_properly_indented",
            "location": 34,
            "return": [
                "bool",
                "list[int]"
            ],
            "arguments": {
                "s": [
                    "str"
                ],
                "line_indent": [
                    "int"
                ]
            }
        },
        "_prep_triple_quotes": {
            "name": "_prep_triple_quotes",
            "location": 48,
            "return": [
                "str"
            ],
            "arguments": {
                "s": [
                    "str"
                ],
                "mysplit": [],
                "replacements": [
                    "dict[typing.Text, typing.Text]"
                ]
            }
        },
        "pretty_string": {
            "name": "pretty_string",
            "location": 58,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "s": [
                    "str"
                ],
                "embedded": [
                    "bool"
                ],
                "current_line": [],
                "uni_lit": [
                    "bool"
                ],
                "min_trip_str": [
                    "int"
                ],
                "max_line": [
                    "int"
                ]
            }
        }
    },
    "prometeo-master/prometeo/cgen/__init__.py": {},
    "prometeo-master/prometeo/cmdline/pmt.py": {
        "str2bool": {
            "name": "str2bool",
            "location": 54,
            "return": [
                "bool"
            ],
            "arguments": {
                "v": [
                    "str",
                    "dict[, ]",
                    "dict[str, str]"
                ]
            }
        },
        "resolve_dims_value": {
            "name": "resolve_dims_value",
            "location": 64,
            "return": [],
            "arguments": {
                "dim_vars": []
            }
        },
        "pmt_main": {
            "name": "pmt_main",
            "location": 182,
            "return": [
                "int"
            ],
            "arguments": {}
        },
        "Graph.__init__": {
            "name": "__init__",
            "location": 117,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "nodes": [],
                "edges": [
                    "int",
                    "str",
                    "list[str]",
                    "None"
                ],
                "start": [
                    "int"
                ],
                "end": [
                    "int",
                    "str",
                    "list[str]",
                    "None"
                ],
                "heap_start": [
                    "int",
                    "str",
                    "list[]"
                ]
            }
        },
        "Graph.compute_shortes_path": {
            "name": "compute_shortes_path",
            "location": 143,
            "return": [],
            "arguments": {
                "self": [],
                "max_iter": [
                    "int"
                ]
            }
        }
    },
    "prometeo-master/prometeo/cmdline/__init__.py": {},
    "prometeo-master/prometeo/laparser/laparser.py": {
        "_pushFirst": {
            "name": "_pushFirst",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "str": [
                    "int",
                    "str"
                ],
                "loc": [
                    "str",
                    "bool"
                ],
                "toks": [
                    "str"
                ]
            }
        },
        "Operand.__init__": {
            "name": "__init__",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "oname": [
                    "int",
                    "float"
                ],
                "otype": [
                    "int",
                    "float"
                ],
                "osize": [
                    "int",
                    "float"
                ],
                "oexpr": [
                    "int",
                    "float"
                ]
            }
        },
        "LAParser.__init__": {
            "name": "__init__",
            "location": 97,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "typed_record_json": [
                    "str"
                ],
                "var_dim_record_json": [
                    "str"
                ],
                "dim_record_json": [
                    "str"
                ]
            }
        },
        "LAParser._evaluateStack": {
            "name": "_evaluateStack",
            "location": 179,
            "return": [
                "typing.Counter",
                "list[bytes]",
                "Operand"
            ],
            "arguments": {
                "self": [],
                "s": []
            }
        },
        "LAParser.parse": {
            "name": "parse",
            "location": 203,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": [],
                "expr": [
                    "str",
                    "typing.Type"
                ]
            }
        },
        "LAParser.__init__._ismat": {
            "name": "_ismat",
            "location": 115,
            "return": [
                "bool"
            ],
            "arguments": {
                "op": []
            }
        },
        "LAParser.__init__._addfunc": {
            "name": "_addfunc",
            "location": 121,
            "return": [
                "Operand"
            ],
            "arguments": {
                "a": [],
                "b": []
            }
        },
        "LAParser.__init__._subfunc": {
            "name": "_subfunc",
            "location": 129,
            "return": [
                "Operand"
            ],
            "arguments": {
                "a": [],
                "b": []
            }
        },
        "LAParser.__init__._mulfunc": {
            "name": "_mulfunc",
            "location": 137,
            "return": [
                "Operand"
            ],
            "arguments": {
                "a": [],
                "b": []
            }
        },
        "LAParser.__init__._solvefunc": {
            "name": "_solvefunc",
            "location": 145,
            "return": [
                "Operand"
            ],
            "arguments": {
                "a": [],
                "b": []
            }
        },
        "LAParser.__init__._expfunc": {
            "name": "_expfunc",
            "location": 153,
            "return": [
                "Operand"
            ],
            "arguments": {
                "a": [],
                "b": []
            }
        },
        "LAParser.__init__._assignfunc": {
            "name": "_assignfunc",
            "location": 161,
            "return": [
                "Operand"
            ],
            "arguments": {
                "a": [],
                "b": []
            }
        }
    },
    "prometeo-master/prometeo/laparser/__init__.py": {},
    "prometeo-master/prometeo/linalg/blasfeo_wrapper.py": {},
    "prometeo-master/prometeo/linalg/pmat.py": {
        "pmat_fill": {
            "name": "pmat_fill",
            "location": 176,
            "return": [
                "None"
            ],
            "arguments": {
                "A": [],
                "value": [
                    "float",
                    "str",
                    "bool",
                    "list[]"
                ]
            }
        },
        "pmat_copy": {
            "name": "pmat_copy",
            "location": 182,
            "return": [
                "None"
            ],
            "arguments": {
                "A": [],
                "B": [
                    "typing.Sequence[int]",
                    "typing.Sequence[float]"
                ]
            }
        },
        "pmat_tran": {
            "name": "pmat_tran",
            "location": 191,
            "return": [
                "None"
            ],
            "arguments": {
                "A": [],
                "B": []
            }
        },
        "pmat_vcat": {
            "name": "pmat_vcat",
            "location": 199,
            "return": [
                "None"
            ],
            "arguments": {
                "A": [],
                "B": [],
                "res": [
                    "int",
                    "float"
                ]
            }
        },
        "pmat_hcat": {
            "name": "pmat_hcat",
            "location": 210,
            "return": [
                "None"
            ],
            "arguments": {
                "A": [],
                "B": [],
                "res": [
                    "int"
                ]
            }
        },
        "pmt_potrsm": {
            "name": "pmt_potrsm",
            "location": 249,
            "return": [
                "None"
            ],
            "arguments": {
                "fact": [
                    "float",
                    "bool",
                    "list[str]",
                    "None"
                ],
                "rhs": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ]
            }
        },
        "pmt_potrsv": {
            "name": "pmt_potrsv",
            "location": 257,
            "return": [
                "None"
            ],
            "arguments": {
                "fact": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ],
                "rhs": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ]
            }
        },
        "pmt_gemm": {
            "name": "pmt_gemm",
            "location": 265,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "pmt_gemm_nn": {
            "name": "pmt_gemm_nn",
            "location": 285,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "pmt_gemm_nt": {
            "name": "pmt_gemm_nt",
            "location": 304,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "pmt_gemm_tn": {
            "name": "pmt_gemm_tn",
            "location": 322,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "pmt_gemm_tt": {
            "name": "pmt_gemm_tt",
            "location": 341,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "pmt_gead": {
            "name": "pmt_gead",
            "location": 360,
            "return": [
                "None"
            ],
            "arguments": {
                "alpha": [
                    "float"
                ],
                "A": [
                    "int"
                ],
                "B": [
                    "int"
                ]
            }
        },
        "pmt_rowpe": {
            "name": "pmt_rowpe",
            "location": 367,
            "return": [
                "None"
            ],
            "arguments": {
                "m": [
                    "int",
                    "list[str]"
                ],
                "ipiv": [
                    "int",
                    "list[str]"
                ],
                "A": [
                    "int",
                    "list[str]"
                ]
            }
        },
        "pmt_trsm_llnu": {
            "name": "pmt_trsm_llnu",
            "location": 371,
            "return": [
                "None"
            ],
            "arguments": {
                "A": [],
                "B": []
            }
        },
        "pmt_trsm_lunn": {
            "name": "pmt_trsm_lunn",
            "location": 375,
            "return": [
                "None"
            ],
            "arguments": {
                "A": [],
                "B": []
            }
        },
        "pmt_trsm_llnn": {
            "name": "pmt_trsm_llnn",
            "location": 379,
            "return": [
                "None"
            ],
            "arguments": {
                "A": [],
                "B": []
            }
        },
        "pmt_trsv_llnu": {
            "name": "pmt_trsv_llnu",
            "location": 383,
            "return": [
                "None"
            ],
            "arguments": {
                "A": [],
                "b": []
            }
        },
        "pmt_trsv_lunn": {
            "name": "pmt_trsv_lunn",
            "location": 387,
            "return": [
                "None"
            ],
            "arguments": {
                "A": [],
                "b": []
            }
        },
        "pmt_getrf": {
            "name": "pmt_getrf",
            "location": 391,
            "return": [
                "None"
            ],
            "arguments": {
                "A": [
                    "dict[str, int]",
                    "typing.TextIO",
                    "int",
                    "typing.Callable[A, None]"
                ],
                "fact": [
                    "list[]",
                    "int",
                    "list[int]"
                ],
                "ipiv": [
                    "list[]",
                    "list[tuple[typing.Union[int,typing.Any]]]",
                    "bytes"
                ]
            }
        },
        "pmt_potrf": {
            "name": "pmt_potrf",
            "location": 400,
            "return": [
                "None"
            ],
            "arguments": {
                "A": [
                    "int",
                    "tuple[typing.Union[float,float]]",
                    "float"
                ],
                "fact": [
                    "int",
                    "tuple[typing.Union[float,float]]",
                    "float"
                ]
            }
        },
        "pmt_gemv_n": {
            "name": "pmt_gemv_n",
            "location": 405,
            "return": [
                "None"
            ],
            "arguments": {
                "A": [
                    "int"
                ],
                "b": [
                    "int"
                ],
                "c": [
                    "int"
                ],
                "d": [
                    "int"
                ]
            }
        },
        "pmt_set_data": {
            "name": "pmt_set_data",
            "location": 410,
            "return": [
                "None"
            ],
            "arguments": {
                "M": [
                    "typing.Sequence[typing.Mapping]",
                    "bytes",
                    "dict[str, list[]]",
                    "bool"
                ],
                "data": [
                    "typing.Sequence[typing.Mapping]",
                    "bytes",
                    "dict[str, list[]]",
                    "bool"
                ]
            }
        },
        "pmat_set": {
            "name": "pmat_set",
            "location": 414,
            "return": [
                "None"
            ],
            "arguments": {
                "M": [
                    "bool"
                ],
                "value": [
                    "bool"
                ],
                "i": [
                    "bool"
                ],
                "j": [
                    "bool"
                ]
            }
        },
        "pmat_get": {
            "name": "pmat_get",
            "location": 418,
            "return": [],
            "arguments": {
                "M": [
                    "int",
                    "str",
                    "None"
                ],
                "i": [
                    "int",
                    "str",
                    "None"
                ],
                "j": [
                    "int",
                    "str",
                    "None"
                ]
            }
        },
        "pmat_print": {
            "name": "pmat_print",
            "location": 422,
            "return": [
                "None"
            ],
            "arguments": {
                "M": [
                    "typing.Callable[T, bool]",
                    "float",
                    "tuple[str]"
                ]
            }
        },
        "pmat.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "m": [
                    "int"
                ],
                "n": [
                    "int",
                    "float"
                ]
            }
        },
        "pmat.m": {
            "name": "m",
            "location": 20,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "pmat.n": {
            "name": "n",
            "location": 24,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "pmat.__getitem__": {
            "name": "__getitem__",
            "location": 27,
            "return": [
                "typing.Type",
                "typing.Pattern",
                "tuple[]",
                "dict[str, str]",
                "dict[str, int]"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "int",
                    "list[]",
                    "str"
                ]
            }
        },
        "pmat.__setitem__": {
            "name": "__setitem__",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "int"
                ],
                "value": [
                    "float",
                    "str",
                    "typing.Iterable[typing.Any]",
                    "int"
                ]
            }
        },
        "pmat.__mul__": {
            "name": "__mul__",
            "location": 145,
            "return": [
                "pmat"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "tuple[typing.Union[int,int]]"
                ]
            }
        },
        "pmat.__add__": {
            "name": "__add__",
            "location": 158,
            "return": [
                "pmat"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "int"
                ]
            }
        },
        "pmat.__sub__": {
            "name": "__sub__",
            "location": 167,
            "return": [
                "pmat"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "int"
                ]
            }
        }
    },
    "prometeo-master/prometeo/linalg/pmat_blasfeo_wrapper.py": {
        "c_pmt_set_blasfeo_dmat": {
            "name": "c_pmt_set_blasfeo_dmat",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "M": [
                    "bool"
                ],
                "data": [
                    "dict[, ]",
                    "str",
                    "dict[str, str]",
                    "typing.Callable[, ]",
                    "typing.Mapping"
                ]
            }
        },
        "c_pmt_set_blasfeo_dmat_el": {
            "name": "c_pmt_set_blasfeo_dmat_el",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "value": [
                    "int",
                    "float"
                ],
                "M": [
                    "int",
                    "float"
                ],
                "ai": [
                    "int",
                    "float"
                ],
                "aj": [
                    "int",
                    "float"
                ]
            }
        },
        "c_pmt_get_blasfeo_dmat_el": {
            "name": "c_pmt_get_blasfeo_dmat_el",
            "location": 19,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "M": [
                    "bytes",
                    "str",
                    "float",
                    "None"
                ],
                "ai": [
                    "bytes",
                    "str",
                    "float",
                    "None"
                ],
                "aj": [
                    "bytes",
                    "str",
                    "float",
                    "None"
                ]
            }
        },
        "c_pmt_set_pmt_blasfeo_dmat": {
            "name": "c_pmt_set_pmt_blasfeo_dmat",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "data": [
                    "bytes",
                    "list[list[typing.Any]]",
                    "typing.Mapping",
                    "dict[str, typing.Any]",
                    "dict[, ]"
                ],
                "M": [
                    "bool"
                ],
                "ai": [
                    "list[dict[, ]]",
                    "bytes",
                    "list[tuple[]]",
                    "list[]"
                ],
                "aj": [
                    "list[dict[, ]]",
                    "bytes",
                    "list[tuple[]]",
                    "list[]"
                ]
            }
        },
        "c_pmt_create_blasfeo_dmat": {
            "name": "c_pmt_create_blasfeo_dmat",
            "location": 29,
            "return": [
                "float"
            ],
            "arguments": {
                "m": [
                    "int",
                    "float"
                ],
                "n": [
                    "int",
                    "float"
                ]
            }
        },
        "c_pmt_dgemm_nn": {
            "name": "c_pmt_dgemm_nn",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "A": [
                    "int"
                ],
                "B": [
                    "int"
                ],
                "C": [
                    "int"
                ],
                "D": [
                    "int"
                ]
            }
        },
        "c_pmt_dgemm_nt": {
            "name": "c_pmt_dgemm_nt",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "A": [
                    "int"
                ],
                "B": [
                    "int"
                ],
                "C": [
                    "int"
                ],
                "D": [
                    "int"
                ]
            }
        },
        "c_pmt_dgemm_tn": {
            "name": "c_pmt_dgemm_tn",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "A": [
                    "int"
                ],
                "B": [
                    "int"
                ],
                "C": [
                    "int"
                ],
                "D": [
                    "int"
                ]
            }
        },
        "c_pmt_dgead": {
            "name": "c_pmt_dgead",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "alpha": [
                    "float",
                    "tuple[typing.Union[float,float]]",
                    "None",
                    "int",
                    "tuple[]",
                    "typing.Callable[Any,Any, bool]"
                ],
                "A": [
                    "str",
                    "bool",
                    "typing.Iterable[str]",
                    "typing.Sequence[T]"
                ],
                "B": [
                    "int",
                    "float"
                ]
            }
        },
        "c_pmt_drowpe": {
            "name": "c_pmt_drowpe",
            "location": 97,
            "return": [
                "None"
            ],
            "arguments": {
                "m": [
                    "int",
                    "str"
                ],
                "ipiv": [
                    "int",
                    "str"
                ],
                "A": [
                    "str",
                    "int"
                ]
            }
        },
        "c_pmt_getrf": {
            "name": "c_pmt_getrf",
            "location": 102,
            "return": [
                "None"
            ],
            "arguments": {
                "A": [
                    "int",
                    "typing.Iterable[]",
                    "str"
                ],
                "fact": [
                    "int",
                    "str"
                ],
                "ipiv": [
                    "typing.Sequence[int]",
                    "bytes",
                    "dict[str, typing.Any]",
                    "bool",
                    "dict[, ]",
                    "typing.Callable[, ]"
                ]
            }
        },
        "c_pmt_potrf": {
            "name": "c_pmt_potrf",
            "location": 108,
            "return": [
                "None"
            ],
            "arguments": {
                "A": [
                    "int",
                    "typing.Iterable[]",
                    "str"
                ],
                "fact": [
                    "int",
                    "str"
                ]
            }
        },
        "c_pmt_trsm_llnn": {
            "name": "c_pmt_trsm_llnn",
            "location": 115,
            "return": [
                "None"
            ],
            "arguments": {
                "A": [
                    "str",
                    "typing.Iterable[str]",
                    "typing.Sequence[T]",
                    "bool"
                ],
                "B": [
                    "int",
                    "str",
                    "list[int]"
                ]
            }
        },
        "c_pmt_trsm_llnu": {
            "name": "c_pmt_trsm_llnu",
            "location": 122,
            "return": [
                "None"
            ],
            "arguments": {
                "A": [
                    "str",
                    "typing.Iterable[str]",
                    "typing.Sequence[T]",
                    "bool"
                ],
                "B": [
                    "int",
                    "str",
                    "list[int]"
                ]
            }
        },
        "c_pmt_trsm_lunn": {
            "name": "c_pmt_trsm_lunn",
            "location": 129,
            "return": [
                "None"
            ],
            "arguments": {
                "A": [
                    "str",
                    "typing.Iterable[str]",
                    "typing.Sequence[T]",
                    "bool"
                ],
                "B": [
                    "int",
                    "str",
                    "list[int]"
                ]
            }
        },
        "c_pmt_trsv_llnu": {
            "name": "c_pmt_trsv_llnu",
            "location": 137,
            "return": [
                "None"
            ],
            "arguments": {
                "A": [
                    "str",
                    "typing.Iterable[str]",
                    "typing.Sequence[T]",
                    "bool"
                ],
                "b": [
                    "tuple[typing.Union[int,int]]",
                    "int"
                ]
            }
        },
        "c_pmt_trsv_lunn": {
            "name": "c_pmt_trsv_lunn",
            "location": 144,
            "return": [
                "None"
            ],
            "arguments": {
                "A": [
                    "str",
                    "typing.Iterable[str]",
                    "typing.Sequence[T]",
                    "bool"
                ],
                "b": [
                    "tuple[typing.Union[int,int]]",
                    "int"
                ]
            }
        },
        "c_pmt_dgemv_n": {
            "name": "c_pmt_dgemv_n",
            "location": 152,
            "return": [
                "None"
            ],
            "arguments": {
                "A": [
                    "int",
                    "str"
                ],
                "b": [
                    "int",
                    "list[str]"
                ],
                "c": [
                    "int",
                    "typing.Iterable[int]",
                    "float"
                ],
                "d": [
                    "int",
                    "str"
                ]
            }
        },
        "c_pmt_print_blasfeo_dmat": {
            "name": "c_pmt_print_blasfeo_dmat",
            "location": 163,
            "return": [
                "None"
            ],
            "arguments": {
                "A": [
                    "int",
                    "str"
                ]
            }
        }
    },
    "prometeo-master/prometeo/linalg/pvec.py": {
        "pmt_vecpe": {
            "name": "pmt_vecpe",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "m": [
                    "int",
                    "list[str]"
                ],
                "ipiv": [
                    "int",
                    "list[str]"
                ],
                "a": [
                    "int",
                    "list[str]"
                ]
            }
        },
        "pvec_set_data": {
            "name": "pvec_set_data",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "v": [
                    "list[str]",
                    "int",
                    "float"
                ],
                "data": [
                    "list[str]",
                    "int",
                    "float"
                ]
            }
        },
        "pvec_set": {
            "name": "pvec_set",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "v": [
                    "int",
                    "float"
                ],
                "value": [
                    "int",
                    "float"
                ],
                "i": [
                    "int",
                    "float"
                ]
            }
        },
        "pvec_get": {
            "name": "pvec_get",
            "location": 51,
            "return": [],
            "arguments": {
                "v": [
                    "bool",
                    "typing.Hashable"
                ],
                "i": [
                    "bool",
                    "typing.Hashable"
                ]
            }
        },
        "pvec_print": {
            "name": "pvec_print",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "v": [
                    "tuple[typing.Union[float,float]]",
                    "int",
                    "list[float]"
                ]
            }
        },
        "pvec_copy": {
            "name": "pvec_copy",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "a": [
                    "int"
                ],
                "b": [
                    "int"
                ]
            }
        },
        "pvec.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "m": [
                    "int",
                    "float",
                    "typing.Iterable[int]"
                ]
            }
        },
        "pvec.m": {
            "name": "m",
            "location": 20,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "pvec.__getitem__": {
            "name": "__getitem__",
            "location": 23,
            "return": [],
            "arguments": {
                "self": [],
                "index": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ]
            }
        },
        "pvec.__setitem__": {
            "name": "__setitem__",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "str",
                    "dict[str, typing.Any]",
                    "list[]",
                    "dict[, ]"
                ],
                "value": [
                    "str",
                    "dict[str, typing.Any]",
                    "list[]",
                    "dict[, ]"
                ]
            }
        },
        "pvec.fill": {
            "name": "fill",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "float",
                    "int",
                    "tuple[]"
                ]
            }
        },
        "pvec.copy": {
            "name": "copy",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "to_be_copied": [
                    "dict[, ]",
                    "str",
                    "float",
                    "typing.Sequence[str]",
                    "None",
                    "bool"
                ]
            }
        }
    },
    "prometeo-master/prometeo/linalg/pvec_blasfeo_wrapper.py": {
        "c_pmt_set_blasfeo_dvec": {
            "name": "c_pmt_set_blasfeo_dvec",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {
                "v": [
                    "int",
                    "dict[, ]",
                    "bytes"
                ],
                "data": [
                    "str",
                    "float",
                    "list[str]",
                    "int"
                ]
            }
        },
        "c_pmt_set_blasfeo_dvec_el": {
            "name": "c_pmt_set_blasfeo_dvec_el",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "value": [
                    "dict[str, typing.Any]",
                    "typing.Sequence[typing.Mapping]"
                ],
                "v": [
                    "dict[str, typing.Any]",
                    "typing.Sequence[typing.Mapping]"
                ],
                "ai": [
                    "dict[str, typing.Any]",
                    "typing.Sequence[typing.Mapping]"
                ]
            }
        },
        "c_pmt_get_blasfeo_dvec_el": {
            "name": "c_pmt_get_blasfeo_dvec_el",
            "location": 13,
            "return": [
                "tuple[typing.Union[float,float,float,float,float]]",
                "str",
                "list[str]",
                "int"
            ],
            "arguments": {
                "v": [
                    "int",
                    "float",
                    "dict[, ]"
                ],
                "ai": [
                    "int",
                    "float",
                    "dict[, ]"
                ]
            }
        },
        "c_pmt_set_pmt_blasfeo_dvec": {
            "name": "c_pmt_set_pmt_blasfeo_dvec",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "data": [
                    "str",
                    "bytes",
                    "dict[, ]",
                    "dict[str, typing.Any]",
                    "bool"
                ],
                "v": [],
                "ai": [
                    "bool",
                    "typing.Mapping",
                    "dict[, ]"
                ]
            }
        },
        "c_pmt_create_blasfeo_dvec": {
            "name": "c_pmt_create_blasfeo_dvec",
            "location": 23,
            "return": [
                "list[]"
            ],
            "arguments": {
                "m": [
                    "dict[str, typing.Any]",
                    "int",
                    "None",
                    "list['cirq.Qid']"
                ]
            }
        },
        "c_pmt_vecpe": {
            "name": "c_pmt_vecpe",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "m": [
                    "int",
                    "str"
                ],
                "ipiv": [
                    "int",
                    "str"
                ],
                "a": [
                    "str",
                    "int"
                ]
            }
        },
        "c_pmt_print_blasfeo_dvec": {
            "name": "c_pmt_print_blasfeo_dvec",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "v": [
                    "int",
                    "float",
                    "None",
                    "str"
                ]
            }
        }
    },
    "prometeo-master/prometeo/linalg/__init__.py": {},
    "prometeo-master/prometeo/mem/ast_analyzer.py": {
        "my_isinstance": {
            "name": "my_isinstance",
            "location": 43,
            "return": [],
            "arguments": {
                "obj": [],
                "classinfo": []
            }
        },
        "precedence_setter": {
            "name": "precedence_setter",
            "location": 70,
            "return": [],
            "arguments": {
                "AST": [],
                "get_op_precedence": [],
                "isinstance": [],
                "list": []
            }
        },
        "descope": {
            "name": "descope",
            "location": 94,
            "return": [],
            "arguments": {
                "current_scope": [],
                "pop": []
            }
        },
        "flatten": {
            "name": "flatten",
            "location": 100,
            "return": [],
            "arguments": {
                "coll": []
            }
        },
        "recurse_attributes": {
            "name": "recurse_attributes",
            "location": 108,
            "return": [],
            "arguments": {
                "node": []
            }
        },
        "merge_call_graphs": {
            "name": "merge_call_graphs",
            "location": 539,
            "return": [],
            "arguments": {
                "dict1": [],
                "dict2": []
            }
        },
        "compute_reach_graph": {
            "name": "compute_reach_graph",
            "location": 554,
            "return": [],
            "arguments": {
                "call_graph": [],
                "typed_record": [],
                "meta_info": []
            }
        },
        "get_reach_nodes": {
            "name": "get_reach_nodes",
            "location": 724,
            "return": [],
            "arguments": {
                "call_graph": [],
                "curr_call": [],
                "root": [],
                "reach_nodes_h": [],
                "root_flag": []
            }
        },
        "cgenException.__init__": {
            "name": "__init__",
            "location": 65,
            "return": [],
            "arguments": {
                "self": [],
                "message": [],
                "lineno": []
            }
        },
        "precedence_setter.set_precedence": {
            "name": "set_precedence",
            "location": 77,
            "return": [],
            "arguments": {
                "value": []
            }
        },
        "ast_visitor.__init__": {
            "name": "__init__",
            "location": 117,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ast_visitor.aux_visit_ast": {
            "name": "aux_visit_ast",
            "location": 145,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "ast_visitor.get_type_of_node": {
            "name": "get_type_of_node",
            "location": 148,
            "return": [],
            "arguments": {
                "self": [],
                "node": [],
                "scope": []
            }
        },
        "ast_visitor.get_type_of_node_rec": {
            "name": "get_type_of_node_rec",
            "location": 261,
            "return": [],
            "arguments": {
                "self": [],
                "node": [],
                "scope": []
            }
        },
        "ast_visitor.build_arg_mangling": {
            "name": "build_arg_mangling",
            "location": 284,
            "return": [],
            "arguments": {
                "self": [],
                "args": [],
                "is_call": []
            }
        },
        "ast_visitor.__getattr__": {
            "name": "__getattr__",
            "location": 370,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "defaults": []
            }
        },
        "ast_visitor.body": {
            "name": "body",
            "location": 387,
            "return": [],
            "arguments": {
                "self": [],
                "args": []
            }
        },
        "ast_visitor.visit_Module": {
            "name": "visit_Module",
            "location": 390,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "ast_visitor.visit_FunctionDef": {
            "name": "visit_FunctionDef",
            "location": 394,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "ast_visitor.visit_ClassDef": {
            "name": "visit_ClassDef",
            "location": 412,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "ast_visitor.visit_Expr": {
            "name": "visit_Expr",
            "location": 423,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "ast_visitor.visit_Expression": {
            "name": "visit_Expression",
            "location": 428,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "ast_visitor.resolve_call": {
            "name": "resolve_call",
            "location": 431,
            "return": [],
            "arguments": {
                "self": [],
                "node": [],
                "pre_mangl": [],
                "post_mangl": []
            }
        },
        "ast_visitor.resolve_call_rec": {
            "name": "resolve_call_rec",
            "location": 435,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "ast_visitor.visit_Call": {
            "name": "visit_Call",
            "location": 442,
            "return": [],
            "arguments": {
                "self": [],
                "node": [],
                "len": []
            }
        },
        "ast_visitor.visit_Name": {
            "name": "visit_Name",
            "location": 464,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "ast_visitor.visit_Tuple": {
            "name": "visit_Tuple",
            "location": 468,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "ast_visitor.visit_Set": {
            "name": "visit_Set",
            "location": 471,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "ast_visitor.visit_Return": {
            "name": "visit_Return",
            "location": 474,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "ast_visitor.visit_Assign": {
            "name": "visit_Assign",
            "location": 477,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "ast_visitor.visit_Num": {
            "name": "visit_Num",
            "location": 481,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "ast_visitor.visit_Attribute": {
            "name": "visit_Attribute",
            "location": 484,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "ast_visitor.visit_JoinedStr": {
            "name": "visit_JoinedStr",
            "location": 494,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "ast_visitor.visit_Str": {
            "name": "visit_Str",
            "location": 497,
            "return": [],
            "arguments": {
                "self": [],
                "node": [],
                "is_joined": []
            }
        },
        "ast_visitor.else_body": {
            "name": "else_body",
            "location": 500,
            "return": [],
            "arguments": {
                "self": [],
                "elsewhat": []
            }
        },
        "ast_visitor.body_or_else": {
            "name": "body_or_else",
            "location": 504,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "ast_visitor.visit_For": {
            "name": "visit_For",
            "location": 508,
            "return": [],
            "arguments": {
                "self": [],
                "node": [],
                "is_async": []
            }
        },
        "ast_visitor.visit_While": {
            "name": "visit_While",
            "location": 511,
            "return": [],
            "arguments": {
                "self": [],
                "node": [],
                "is_async": []
            }
        },
        "ast_visitor.visit_ImportFrom": {
            "name": "visit_ImportFrom",
            "location": 514,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "ast_visitor.visit_Import": {
            "name": "visit_Import",
            "location": 517,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "ast_visitor.visit_If": {
            "name": "visit_If",
            "location": 520,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "ast_visitor.visit_AnnAssign": {
            "name": "visit_AnnAssign",
            "location": 523,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "ast_visitor.visit_Subscript": {
            "name": "visit_Subscript",
            "location": 527,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "ast_visitor.visit_List": {
            "name": "visit_List",
            "location": 530,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "ast_visitor.visit_BinOp": {
            "name": "visit_BinOp",
            "location": 533,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "ast_visitor.visit_UnaryOp": {
            "name": "visit_UnaryOp",
            "location": 536,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "compute_reach_graph.resolve_scopes": {
            "name": "resolve_scopes",
            "location": 612,
            "return": [],
            "arguments": {
                "call": [],
                "caller": [],
                "typed_record": [],
                "meta_info": []
            }
        },
        "ast_visitor.__init__.visit_ast": {
            "name": "visit_ast",
            "location": 135,
            "return": [],
            "arguments": {}
        },
        "ast_visitor.build_arg_mangling.loop_args_mangl_def": {
            "name": "loop_args_mangl_def",
            "location": 287,
            "return": [],
            "arguments": {
                "args": [],
                "defaults": []
            }
        },
        "ast_visitor.build_arg_mangling.loop_args_mangl": {
            "name": "loop_args_mangl",
            "location": 324,
            "return": [],
            "arguments": {
                "args": []
            }
        },
        "ast_visitor.__getattr__.getter": {
            "name": "getter",
            "location": 381,
            "return": [],
            "arguments": {
                "node": []
            }
        }
    },
    "prometeo-master/prometeo/mem/__init__.py": {},
    "prometeo-master/prometeo/nonlinear/nonlinear.py": {
        "pmat_to_numpy": {
            "name": "pmat_to_numpy",
            "location": 11,
            "return": [],
            "arguments": {
                "A": [
                    "list[str]",
                    "list[int]"
                ]
            }
        },
        "pvec_to_numpy": {
            "name": "pvec_to_numpy",
            "location": 18,
            "return": [
                "int",
                "list[float]",
                "list[str]",
                "tuple[typing.Union[typing.Any,typing.Any]]",
                "list[int]",
                "list[]"
            ],
            "arguments": {
                "v": [
                    "dict[, ]",
                    "int"
                ]
            }
        },
        "pfun.__init__": {
            "name": "__init__",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fun_name": [
                    "str"
                ],
                "expr": [
                    "str"
                ],
                "variables": [
                    "dict[str, typing.Any]"
                ]
            }
        },
        "pfun.__call__": {
            "name": "__call__",
            "location": 130,
            "return": [],
            "arguments": {
                "self": [],
                "args": []
            }
        }
    },
    "prometeo-master/prometeo/nonlinear/__init__.py": {},
    "prometeo-master/prometeo/old_mem/malloc_wrapper.py": {
        "prmt_malloc": {
            "name": "prmt_malloc",
            "location": 4,
            "return": [
                "typing.Type"
            ],
            "arguments": {
                "n_bytes": [
                    "str",
                    "int"
                ]
            }
        },
        "prmt_cast_to_double_p": {
            "name": "prmt_cast_to_double_p",
            "location": 12,
            "return": [],
            "arguments": {
                "pointer": [
                    "int",
                    "str",
                    "None"
                ]
            }
        },
        "prmt_cast_to_int_p": {
            "name": "prmt_cast_to_int_p",
            "location": 15,
            "return": [],
            "arguments": {
                "pointer": [
                    "int",
                    "str",
                    "None"
                ]
            }
        }
    },
    "prometeo-master/prometeo/old_mem/memory_manager.py": {
        "memory_manager.prmt_alloc_p": {
            "name": "prmt_alloc_p",
            "location": 9,
            "return": [],
            "arguments": {
                "cls": [
                    "typing.Callable[, ]",
                    "bool",
                    "str"
                ],
                "n_bytes": [
                    "int",
                    "float",
                    "tuple[typing.Union[float,float]]"
                ]
            }
        }
    },
    "prometeo-master/prometeo/old_mem/mem_manager.py": {},
    "prometeo-master/prometeo/old_mem/test.py": {}
}
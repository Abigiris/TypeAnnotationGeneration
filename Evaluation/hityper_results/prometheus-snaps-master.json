{
    "prometheus-snaps-master/setup.py": {},
    "prometheus-snaps-master/conf/gunicorn.py": {},
    "prometheus-snaps-master/promsnaps/config.py": {
        "logfile_path": {
            "name": "logfile_path",
            "location": 9,
            "return": [],
            "arguments": {
                "jsonfmt": [
                    "bool"
                ],
                "debug": [
                    "bool"
                ]
            }
        },
        "getenv": {
            "name": "getenv",
            "location": 30,
            "return": [
                "None",
                "str",
                "bool",
                "tuple[]"
            ],
            "arguments": {
                "name": [
                    "str",
                    "dict[, ]"
                ],
                "default": [
                    "None",
                    "str",
                    "bool",
                    "tuple[]"
                ],
                "convert": [
                    "str"
                ]
            }
        },
        "envbool": {
            "name": "envbool",
            "location": 51,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "value": [
                    "str"
                ]
            }
        },
        "PrometheusSnapsConfig.__init__": {
            "name": "__init__",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "defaults": [
                    "None",
                    "int",
                    "tuple[]",
                    "float"
                ],
                "confpath": [
                    "None",
                    "int",
                    "tuple[]",
                    "float"
                ]
            }
        },
        "PrometheusSnapsConfig.gitlab": {
            "name": "gitlab",
            "location": 84,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PrometheusSnapsConfig.github": {
            "name": "github",
            "location": 88,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PrometheusSnapsConfig.promsnaps": {
            "name": "promsnaps",
            "location": 92,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PrometheusSnapsConfig.reload": {
            "name": "reload",
            "location": 95,
            "return": [
                "PrometheusSnapsConfig"
            ],
            "arguments": {
                "self": [],
                "confpath": [
                    "str",
                    "bytes"
                ],
                "inplace": [
                    "bool"
                ]
            }
        },
        "PrometheusSnapsConfig.load_conf": {
            "name": "load_conf",
            "location": 104,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "conf": [
                    "dict[, ]",
                    "dict[str, typing.Any]",
                    "dict[str, float]"
                ]
            }
        },
        "PrometheusSnapsConfig.load_conffile": {
            "name": "load_conffile",
            "location": 108,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "confpath": [
                    "str"
                ]
            }
        }
    },
    "prometheus-snaps-master/promsnaps/exception.py": {
        "PrometheusSnapsException.__init__": {
            "name": "__init__",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "int",
                    "float"
                ],
                "payload": [
                    "None",
                    "str",
                    "dict[, ]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "PrometheusSnapsException.to_dict": {
            "name": "to_dict",
            "location": 10,
            "return": [
                "dict[typing.Text, ]"
            ],
            "arguments": {
                "self": []
            }
        },
        "PrometheusSnapsException.__str__": {
            "name": "__str__",
            "location": 15,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "prometheus-snaps-master/promsnaps/loghandler.py": {
        "_json_default": {
            "name": "_json_default",
            "location": 15,
            "return": [],
            "arguments": {
                "obj": []
            }
        },
        "JsonFormatter.__init__": {
            "name": "__init__",
            "location": 46,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "JsonFormatter._parse_format_string": {
            "name": "_parse_format_string",
            "location": 67,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "JsonFormatter.add_fields": {
            "name": "add_fields",
            "location": 72,
            "return": [],
            "arguments": {
                "self": [],
                "log_record": [],
                "record": [],
                "message_dict": []
            }
        },
        "JsonFormatter.format": {
            "name": "format",
            "location": 91,
            "return": [],
            "arguments": {
                "self": [],
                "record": []
            }
        }
    },
    "prometheus-snaps-master/promsnaps/__init__.py": {
        "_get_git_sha": {
            "name": "_get_git_sha",
            "location": 10,
            "return": [
                "typing.Text"
            ],
            "arguments": {}
        }
    },
    "prometheus-snaps-master/promsnaps/api/app.py": {
        "getvalues": {
            "name": "getvalues",
            "location": 10,
            "return": [
                "list[tuple[typing.Union[str,str]]]",
                "list[dict[, ]]",
                "typing.Generator[typing.Union[typing.Any,None,None]]",
                "dict[int, str]",
                "dict[str, dict[, ]]",
                "list[]",
                "dict[, ]",
                "typing.Counter"
            ],
            "arguments": {}
        },
        "create_app": {
            "name": "create_app",
            "location": 27,
            "return": [
                "PrometheusSnapsApp"
            ],
            "arguments": {}
        }
    },
    "prometheus-snaps-master/promsnaps/api/config.py": {},
    "prometheus-snaps-master/promsnaps/api/flaskapp.py": {
        "FlaskApp.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "app": []
            }
        },
        "FlaskApp.app": {
            "name": "app",
            "location": 23,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FlaskApp.register_blueprints": {
            "name": "register_blueprints",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FlaskApp.register_after_requests": {
            "name": "register_after_requests",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FlaskApp.register_before_requests": {
            "name": "register_before_requests",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FlaskApp.register_teardowns": {
            "name": "register_teardowns",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FlaskApp.register_error_handlers": {
            "name": "register_error_handlers",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "prometheus-snaps-master/promsnaps/api/info.py": {
        "index": {
            "name": "index",
            "location": 17,
            "return": [],
            "arguments": {}
        },
        "gen_error": {
            "name": "gen_error",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "slow_req": {
            "name": "slow_req",
            "location": 27,
            "return": [],
            "arguments": {}
        },
        "version": {
            "name": "version",
            "location": 33,
            "return": [],
            "arguments": {}
        },
        "routes": {
            "name": "routes",
            "location": 38,
            "return": [],
            "arguments": {}
        }
    },
    "prometheus-snaps-master/promsnaps/api/wsgi.py": {},
    "prometheus-snaps-master/promsnaps/api/__init__.py": {},
    "prometheus-snaps-master/promsnaps/api/handlers/errors.py": {
        "errorhandler": {
            "name": "errorhandler",
            "location": 5,
            "return": [],
            "arguments": {
                "context_app": [
                    "typing.Callable[, ]",
                    "None",
                    "str",
                    "int"
                ]
            }
        },
        "render_error": {
            "name": "render_error",
            "location": 16,
            "return": [
                "list[]"
            ],
            "arguments": {
                "error": [
                    "Exception",
                    "bool"
                ]
            }
        },
        "errorhandler.decorator": {
            "name": "decorator",
            "location": 6,
            "return": [],
            "arguments": {
                "func": []
            }
        },
        "errorhandler.decorator.func_wrapper": {
            "name": "func_wrapper",
            "location": 8,
            "return": [],
            "arguments": {}
        }
    },
    "prometheus-snaps-master/promsnaps/api/handlers/request_logging.py": {
        "default_filter": {
            "name": "default_filter",
            "location": 7,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "_": [
                    "dict[str, typing.Any]",
                    "dict[, ]",
                    "list[dict[str, typing.Any]]"
                ]
            }
        },
        "filter_logs": {
            "name": "filter_logs",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "values": [
                    "str",
                    "list[str]"
                ],
                "filtered_fields": [
                    "str",
                    "list[dict[str, typing.Any]]",
                    "list[str]"
                ]
            }
        },
        "after_request_log": {
            "name": "after_request_log",
            "location": 39,
            "return": [
                "dict[, ]",
                "list[tuple[typing.Union[str,str]]]",
                "str",
                "typing.Callable[, ]"
            ],
            "arguments": {
                "resp": [
                    "dict[, ]",
                    "list[tuple[typing.Union[str,str]]]",
                    "str",
                    "typing.Callable[, ]"
                ]
            }
        },
        "before_request_log": {
            "name": "before_request_log",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "prometheus-snaps-master/promsnaps/api/handlers/tracing.py": {},
    "prometheus-snaps-master/promsnaps/api/handlers/__init__.py": {},
    "prometheus-snaps-master/promsnaps/jobs/celeryconfig.py": {},
    "prometheus-snaps-master/promsnaps/jobs/job_base.py": {
        "JobBase.after_return": {
            "name": "after_return",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "status": [
                    "str",
                    "bytes",
                    "list[str]",
                    "list[int]",
                    "bool",
                    "dict[, ]"
                ],
                "retval": [
                    "str",
                    "bytes",
                    "list[str]",
                    "list[int]",
                    "bool",
                    "dict[, ]"
                ],
                "task_id": [
                    "str",
                    "bytes",
                    "list[str]",
                    "list[int]",
                    "bool",
                    "dict[, ]"
                ],
                "args": [],
                "kwargs": [],
                "einfo": [
                    "str",
                    "bytes",
                    "list[str]",
                    "list[int]",
                    "bool",
                    "dict[, ]"
                ]
            }
        },
        "JobBase.on_failure": {
            "name": "on_failure",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "exc": [
                    "bool",
                    "typing.MutableSet",
                    "list[str]",
                    "str"
                ],
                "task_id": [
                    "bool",
                    "typing.MutableSet",
                    "list[str]",
                    "str"
                ],
                "args": [],
                "kwargs": [],
                "einfo": [
                    "bool",
                    "typing.MutableSet",
                    "list[str]",
                    "str"
                ]
            }
        },
        "JobBase.on_retry": {
            "name": "on_retry",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "exc": [
                    "bool",
                    "typing.MutableSet",
                    "list[str]",
                    "str"
                ],
                "task_id": [
                    "bool",
                    "typing.MutableSet",
                    "list[str]",
                    "str"
                ],
                "args": [],
                "kwargs": [],
                "einfo": [
                    "bool",
                    "typing.MutableSet",
                    "list[str]",
                    "str"
                ]
            }
        },
        "JobBase.on_success": {
            "name": "on_success",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "retval": [
                    "bool",
                    "typing.MutableSet",
                    "list[str]",
                    "str"
                ],
                "task_id": [
                    "bool",
                    "typing.MutableSet",
                    "list[str]",
                    "str"
                ],
                "args": [],
                "kwargs": []
            }
        },
        "JobBase.task_queue": {
            "name": "task_queue",
            "location": 21,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "JobBase.task_routing_key": {
            "name": "task_routing_key",
            "location": 24,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "prometheus-snaps-master/promsnaps/jobs/runner.py": {},
    "prometheus-snaps-master/promsnaps/jobs/tasks.py": {
        "concat": {
            "name": "concat",
            "location": 10,
            "return": [
                "int",
                "str",
                "float"
            ],
            "arguments": {
                "self": [],
                "a": [
                    "int",
                    "str",
                    "float"
                ],
                "b": [
                    "int",
                    "str",
                    "float"
                ]
            }
        },
        "test_job": {
            "name": "test_job",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "prometheus-snaps-master/promsnaps/jobs/__init__.py": {},
    "prometheus-snaps-master/scripts/generate-conf-doc.py": {},
    "prometheus-snaps-master/tests/conftest.py": {}
}
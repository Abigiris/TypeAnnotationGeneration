{
    "py-ard-master/api.py": {
        "validate_controller": {
            "name": "validate_controller",
            "location": 10,
            "return": [
                "tuple[typing.Union[dict[typing.Text, typing.Text],int]]",
                "tuple[typing.Union[dict[typing.Text, bool],int]]",
                "tuple[typing.Union[dict[typing.Text, typing.Union[bool,typing.Text]],int]]",
                "tuple[typing.Union[dict[typing.Text, ],int]]"
            ],
            "arguments": {}
        },
        "redux_controller": {
            "name": "redux_controller",
            "location": 31,
            "return": [
                "tuple[typing.Union[dict[typing.Text, typing.Text],int]]",
                "tuple[typing.Union[dict[typing.Text, ],int]]"
            ],
            "arguments": {}
        },
        "mac_expand_controller": {
            "name": "mac_expand_controller",
            "location": 50,
            "return": [
                "tuple[typing.Union[dict[typing.Text, typing.Union[str,list[dict[str, typing.Any]],list[str]]],int]]",
                "tuple[typing.Union[dict[typing.Text, typing.Text],int]]",
                "tuple[typing.Union[dict[typing.Text, ],int]]"
            ],
            "arguments": {
                "allele_code": [
                    "str"
                ]
            }
        }
    },
    "py-ard-master/app.py": {
        "index": {
            "name": "index",
            "location": 12,
            "return": [],
            "arguments": {}
        }
    },
    "py-ard-master/setup.py": {},
    "py-ard-master/pyard/broad_splits.py": {},
    "py-ard-master/pyard/data_repository.py": {
        "expression_reduce": {
            "name": "expression_reduce",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "df": []
            }
        },
        "generate_ars_mapping": {
            "name": "generate_ars_mapping",
            "location": 79,
            "return": [],
            "arguments": {
                "db_connection": [],
                "imgt_version": []
            }
        },
        "generate_alleles_and_xx_codes_and_who": {
            "name": "generate_alleles_and_xx_codes_and_who",
            "location": 275,
            "return": [],
            "arguments": {
                "db_connection": [],
                "imgt_version": [],
                "ars_mappings": []
            }
        },
        "generate_mac_codes": {
            "name": "generate_mac_codes",
            "location": 467,
            "return": [
                "None"
            ],
            "arguments": {
                "db_connection": [],
                "refresh_mac": []
            }
        },
        "to_serological_name": {
            "name": "to_serological_name",
            "location": 536,
            "return": [],
            "arguments": {
                "locus_name": []
            }
        },
        "generate_serology_mapping": {
            "name": "generate_serology_mapping",
            "location": 555,
            "return": [
                "None"
            ],
            "arguments": {
                "db_connection": [],
                "imgt_version": []
            }
        },
        "generate_v2_to_v3_mapping": {
            "name": "generate_v2_to_v3_mapping",
            "location": 644,
            "return": [
                "None"
            ],
            "arguments": {
                "db_connection": [],
                "imgt_version": []
            }
        }
    },
    "py-ard-master/pyard/db.py": {
        "get_pyard_db_install_directory": {
            "name": "get_pyard_db_install_directory",
            "location": 28,
            "return": [],
            "arguments": {}
        },
        "create_db_connection": {
            "name": "create_db_connection",
            "location": 32,
            "return": [],
            "arguments": {
                "data_dir": [
                    "str",
                    "None",
                    "list[str]",
                    "typing.IO",
                    "typing.TextIO"
                ],
                "imgt_version": [
                    "str",
                    "None"
                ],
                "ro": [
                    "bool"
                ]
            }
        },
        "table_exists": {
            "name": "table_exists",
            "location": 68,
            "return": [
                "bool"
            ],
            "arguments": {
                "connection": [],
                "table_name": [
                    "str",
                    "bool"
                ]
            }
        },
        "tables_exist": {
            "name": "tables_exist",
            "location": 83,
            "return": [
                "bool"
            ],
            "arguments": {
                "connection": [
                    "str",
                    "None"
                ],
                "table_names": [
                    "str"
                ]
            }
        },
        "count_rows": {
            "name": "count_rows",
            "location": 94,
            "return": [],
            "arguments": {
                "connection": [],
                "table_name": [
                    "str",
                    "list[str]",
                    "int"
                ]
            }
        },
        "mac_code_to_alleles": {
            "name": "mac_code_to_alleles",
            "location": 109,
            "return": [
                "list[]"
            ],
            "arguments": {
                "connection": [],
                "code": [
                    "str",
                    "int",
                    "list[str]",
                    "dict[str, list[str]]"
                ]
            }
        },
        "is_valid_mac_code": {
            "name": "is_valid_mac_code",
            "location": 128,
            "return": [
                "bool"
            ],
            "arguments": {
                "connection": [],
                "code": [
                    "str",
                    "dict[str, list[str]]",
                    "list[str]",
                    "int"
                ]
            }
        },
        "serology_to_alleles": {
            "name": "serology_to_alleles",
            "location": 143,
            "return": [
                "list[]"
            ],
            "arguments": {
                "connection": [],
                "serology": [
                    "str",
                    "list[str]",
                    "typing.Callable[..., collections.abc.Awaitable[]]",
                    "dict[str, typing.Any]",
                    "collections.abc.Awaitable[]",
                    "list['cirq.Qid']"
                ]
            }
        },
        "is_valid_serology": {
            "name": "is_valid_serology",
            "location": 162,
            "return": [
                "bool"
            ],
            "arguments": {
                "connection": [],
                "serology": [
                    "dict[str, typing.Any]",
                    "str",
                    "typing.Hashable",
                    "float"
                ]
            }
        },
        "v2_to_v3_allele": {
            "name": "v2_to_v3_allele",
            "location": 179,
            "return": [
                "None"
            ],
            "arguments": {
                "connection": [],
                "v2_allele": [
                    "typing.Callable[, ]",
                    "dict[str, typing.Any]",
                    "dict[, ]"
                ]
            }
        },
        "save_dict": {
            "name": "save_dict",
            "location": 196,
            "return": [
                "bool"
            ],
            "arguments": {
                "connection": [],
                "table_name": [
                    "str",
                    "None"
                ],
                "dictionary": [],
                "columns": [
                    "str"
                ]
            }
        },
        "save_set": {
            "name": "save_set",
            "location": 235,
            "return": [
                "bool"
            ],
            "arguments": {
                "connection": [],
                "table_name": [
                    "str",
                    "bool"
                ],
                "rows": [
                    "str",
                    "None",
                    "list[str]",
                    "bool"
                ],
                "column": [
                    "str",
                    "None",
                    "set[str]",
                    "int"
                ]
            }
        },
        "load_set": {
            "name": "load_set",
            "location": 275,
            "return": [
                "set[]"
            ],
            "arguments": {
                "connection": [],
                "table_name": [
                    "str"
                ]
            }
        },
        "load_dict": {
            "name": "load_dict",
            "location": 291,
            "return": [
                "dict[, ]"
            ],
            "arguments": {
                "connection": [],
                "table_name": [
                    "str",
                    "list[T]",
                    "dict[, ]",
                    "dict[str, typing.Any]",
                    "bool",
                    "None"
                ],
                "columns": [
                    "str",
                    "list[T]"
                ]
            }
        },
        "similar_alleles": {
            "name": "similar_alleles",
            "location": 310,
            "return": [
                "set[]"
            ],
            "arguments": {
                "connection": [],
                "allele_name": [
                    "str",
                    "frozenset",
                    "bool"
                ]
            }
        }
    },
    "py-ard-master/pyard/drbx.py": {
        "map_drbx": {
            "name": "map_drbx",
            "location": 4,
            "return": [
                "tuple[typing.Text]",
                "tuple[]"
            ],
            "arguments": {
                "drb_alleles": [
                    "str",
                    "bool",
                    "typing.Callable[, ]",
                    "list[]",
                    "None",
                    "dict[, ]"
                ],
                "locus_in_allele_name": [
                    "bool",
                    "str",
                    "None"
                ]
            }
        }
    },
    "py-ard-master/pyard/exceptions.py": {
        "InvalidAlleleError.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "int",
                    "float"
                ]
            }
        },
        "InvalidAlleleError.__str__": {
            "name": "__str__",
            "location": 13,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "InvalidMACError.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "int",
                    "float"
                ]
            }
        },
        "InvalidMACError.__str__": {
            "name": "__str__",
            "location": 21,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "InvalidTypingError.__init__": {
            "name": "__init__",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "int",
                    "float"
                ],
                "cause": [
                    "None",
                    "int",
                    "float"
                ]
            }
        },
        "InvalidTypingError.__str__": {
            "name": "__str__",
            "location": 30,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "py-ard-master/pyard/misc.py": {
        "get_n_field_allele": {
            "name": "get_n_field_allele",
            "location": 5,
            "return": [
                "str"
            ],
            "arguments": {
                "allele": [
                    "str"
                ],
                "n": [
                    "int"
                ],
                "preserve_expression": [
                    "bool"
                ]
            }
        },
        "get_3field_allele": {
            "name": "get_3field_allele",
            "location": 22,
            "return": [],
            "arguments": {
                "a": [
                    "dict[str, typing.Any]",
                    "bool",
                    "typing.Callable[, ]",
                    "typing.Pattern"
                ]
            }
        },
        "get_2field_allele": {
            "name": "get_2field_allele",
            "location": 26,
            "return": [],
            "arguments": {
                "a": [
                    "dict[str, typing.Any]",
                    "bool",
                    "typing.Callable[, ]",
                    "typing.Pattern"
                ]
            }
        },
        "number_of_fields": {
            "name": "number_of_fields",
            "location": 30,
            "return": [
                "int"
            ],
            "arguments": {
                "allele": [
                    "str"
                ]
            }
        }
    },
    "py-ard-master/pyard/pyard.py": {
        "validate_reduction_type": {
            "name": "validate_reduction_type",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "ars_type": [
                    "int",
                    "typing.Type"
                ]
            }
        },
        "ARD.__init__": {
            "name": "__init__",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "imgt_version": [
                    "typing.Text"
                ],
                "data_dir": [
                    "None",
                    "dict[, ]",
                    "str"
                ],
                "config": [
                    "None",
                    "dict[, ]",
                    "dict[str, typing.Any]",
                    "str",
                    "dict[str, str]"
                ]
            }
        },
        "ARD.__del__": {
            "name": "__del__",
            "location": 135,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ARD.redux": {
            "name": "redux",
            "location": 143,
            "return": [
                "typing.Text",
                "str",
                "list[str]",
                "dict[, ]"
            ],
            "arguments": {
                "self": [],
                "allele": [
                    "str"
                ],
                "redux_type": [
                    "typing.Sequence[dict[str, typing.Any]]",
                    "BaseException",
                    "Exception",
                    "typing.Type"
                ]
            }
        },
        "ARD.sorted_unique_gl": {
            "name": "sorted_unique_gl",
            "location": 234,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "gls": [
                    "dict[, ]",
                    "str"
                ],
                "delim": [
                    "str"
                ]
            }
        },
        "ARD.redux_gl": {
            "name": "redux_gl",
            "location": 265,
            "return": [],
            "arguments": {
                "self": [],
                "glstring": [
                    "str"
                ],
                "redux_type": [
                    "typing.Type"
                ]
            }
        },
        "ARD.validate": {
            "name": "validate",
            "location": 361,
            "return": [],
            "arguments": {
                "self": [],
                "glstring": [
                    "str",
                    "int"
                ]
            }
        },
        "ARD.is_XX": {
            "name": "is_XX",
            "location": 376,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "glstring": [
                    "str"
                ],
                "loc_antigen": [
                    "None",
                    "str",
                    "int"
                ],
                "code": [
                    "None",
                    "str",
                    "int"
                ]
            }
        },
        "ARD.is_serology": {
            "name": "is_serology",
            "location": 385,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "allele": [
                    "list[str]",
                    "str",
                    "dict[str, typing.Any]",
                    "bytes"
                ]
            }
        },
        "ARD.is_mac": {
            "name": "is_mac",
            "location": 404,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "allele": [
                    "str"
                ]
            }
        },
        "ARD.is_v2": {
            "name": "is_v2",
            "location": 420,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "allele": [
                    "str"
                ]
            }
        },
        "ARD._is_who_allele": {
            "name": "_is_who_allele",
            "location": 443,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "allele": [
                    "str",
                    "int"
                ]
            }
        },
        "ARD._is_valid_allele": {
            "name": "_is_valid_allele",
            "location": 451,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "allele": [
                    "str",
                    "list[int]",
                    "set[str]"
                ]
            }
        },
        "ARD.is_shortnull": {
            "name": "is_shortnull",
            "location": 459,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "allele": [
                    "str",
                    "int"
                ]
            }
        },
        "ARD.is_exp_allele": {
            "name": "is_exp_allele",
            "location": 468,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "allele": [
                    "str",
                    "int"
                ]
            }
        },
        "ARD._get_alleles": {
            "name": "_get_alleles",
            "location": 476,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": [],
                "code": [
                    "str",
                    "int"
                ],
                "locus_antigen": [
                    "str",
                    "bytes"
                ]
            }
        },
        "ARD._get_alleles_from_serology": {
            "name": "_get_alleles_from_serology",
            "location": 496,
            "return": [],
            "arguments": {
                "self": [],
                "serology": [
                    "list[str]",
                    "int",
                    "bytes",
                    "dict[, ]"
                ]
            }
        },
        "ARD._combine_with_colon": {
            "name": "_combine_with_colon",
            "location": 501,
            "return": [
                "str"
            ],
            "arguments": {
                "digits_field": []
            }
        },
        "ARD._predict_v3": {
            "name": "_predict_v3",
            "location": 505,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "v2_allele": [
                    "str"
                ]
            }
        },
        "ARD._map_v2_to_v3": {
            "name": "_map_v2_to_v3",
            "location": 542,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "self": [],
                "v2_allele": [
                    "int",
                    "str",
                    "None",
                    "typing.Iterable[int]"
                ]
            }
        },
        "ARD.isvalid": {
            "name": "isvalid",
            "location": 555,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "allele": [
                    "str"
                ]
            }
        },
        "ARD.isvalid_gl": {
            "name": "isvalid_gl",
            "location": 598,
            "return": [
                "bool",
                "int",
                "dict[str, str]",
                "list[]",
                "dict[str, typing.Union[dict[, ],typing.Any,str]]"
            ],
            "arguments": {
                "self": [],
                "glstring": [
                    "str"
                ]
            }
        },
        "ARD.mac_toG": {
            "name": "mac_toG",
            "location": 625,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "allele": [
                    "str"
                ]
            }
        },
        "ARD.toG": {
            "name": "toG",
            "location": 647,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": [],
                "allele": [
                    "bytes",
                    "str",
                    "None",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "ARD.expand_mac": {
            "name": "expand_mac",
            "location": 664,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": [],
                "mac_code": [
                    "str"
                ]
            }
        },
        "ARD.v2_to_v3": {
            "name": "v2_to_v3",
            "location": 683,
            "return": [
                "float",
                "str"
            ],
            "arguments": {
                "self": [],
                "v2_allele": [
                    "float",
                    "str"
                ]
            }
        },
        "ARD.refresh_mac_codes": {
            "name": "refresh_mac_codes",
            "location": 694,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "py-ard-master/pyard/smart_sort.py": {
        "smart_sort_comparator": {
            "name": "smart_sort_comparator",
            "location": 32,
            "return": [
                "int"
            ],
            "arguments": {
                "a1": [
                    "int",
                    "float"
                ],
                "a2": [
                    "int",
                    "float"
                ]
            }
        }
    },
    "py-ard-master/pyard/__init__.py": {},
    "py-ard-master/tests/environment.py": {
        "before_all": {
            "name": "before_all",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {
                "context": [
                    "str",
                    "list[]",
                    "typing.Any",
                    "None",
                    "dict[, ]"
                ]
            }
        }
    },
    "py-ard-master/tests/test_pyard.py": {
        "TestPyArd.setUpClass": {
            "name": "setUpClass",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "typing.Type",
                    "bool",
                    "str"
                ]
            }
        },
        "TestPyArd.setUp": {
            "name": "setUp",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPyArd.test_no_mac": {
            "name": "test_no_mac",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPyArd.test_remove_invalid": {
            "name": "test_remove_invalid",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPyArd.test_mac": {
            "name": "test_mac",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPyArd.test_redux_gl": {
            "name": "test_redux_gl",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPyArd.test_serology": {
            "name": "test_serology",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPyArd.test_mac_G": {
            "name": "test_mac_G",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPyArd.test_xx_code": {
            "name": "test_xx_code",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPyArd.test_xx_code_with_prefix": {
            "name": "test_xx_code_with_prefix",
            "location": 103,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPyArd.test_expand_mac": {
            "name": "test_expand_mac",
            "location": 110,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPyArd.test_mac_toG": {
            "name": "test_mac_toG",
            "location": 123,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPyArd.test_redux_types": {
            "name": "test_redux_types",
            "location": 129,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPyArd.test_empty_allele": {
            "name": "test_empty_allele",
            "location": 138,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPyArd.test_fp_allele": {
            "name": "test_fp_allele",
            "location": 142,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPyArd.test_invalid_serology": {
            "name": "test_invalid_serology",
            "location": 146,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPyArd.test_allele_duplicated": {
            "name": "test_allele_duplicated",
            "location": 154,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "py-ard-master/tests/test_smart_sort.py": {
        "TestSmartSort.setUp": {
            "name": "setUp",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSmartSort.test_same_comparator": {
            "name": "test_same_comparator",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSmartSort.test_equal_comparator": {
            "name": "test_equal_comparator",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSmartSort.test_equal_comparator_G": {
            "name": "test_equal_comparator_G",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSmartSort.test_equal_comparator_NG": {
            "name": "test_equal_comparator_NG",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSmartSort.test_first_field_comparator_le": {
            "name": "test_first_field_comparator_le",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSmartSort.test_first_field_comparator_ge": {
            "name": "test_first_field_comparator_ge",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSmartSort.test_second_field_comparator_le": {
            "name": "test_second_field_comparator_le",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSmartSort.test_second_field_comparator_le_smart": {
            "name": "test_second_field_comparator_le_smart",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSmartSort.test_second_field_comparator_ge": {
            "name": "test_second_field_comparator_ge",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSmartSort.test_third_field_comparator_le": {
            "name": "test_third_field_comparator_le",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSmartSort.test_third_field_comparator_le_smart": {
            "name": "test_third_field_comparator_le_smart",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSmartSort.test_third_field_comparator_ge": {
            "name": "test_third_field_comparator_ge",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSmartSort.test_fourth_field_comparator_le": {
            "name": "test_fourth_field_comparator_le",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSmartSort.test_fourth_field_comparator_le_smart": {
            "name": "test_fourth_field_comparator_le_smart",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSmartSort.test_fourth_field_comparator_ge": {
            "name": "test_fourth_field_comparator_ge",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "py-ard-master/tests/steps/generate_drbx.py": {
        "step_impl": {
            "name": "step_impl",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "context": [
                    "dict[, ]",
                    "bool"
                ],
                "drbx1": [],
                "drbx2": []
            }
        }
    },
    "py-ard-master/tests/steps/redux_allele.py": {
        "step_impl": {
            "name": "step_impl",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "context": [
                    "bool"
                ],
                "expanded_alleles": []
            }
        }
    }
}
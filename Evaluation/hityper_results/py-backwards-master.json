{
    "py-backwards-master/setup.py": {},
    "py-backwards-master/py_backwards/compiler.py": {
        "_transform": {
            "name": "_transform",
            "location": 16,
            "return": [
                "tuple[list[]]"
            ],
            "arguments": {
                "path": [
                    "str",
                    "list[str]",
                    "bool"
                ],
                "code": [
                    "str"
                ],
                "target": [
                    "set[str]",
                    "typing.Callable[, ]"
                ]
            }
        },
        "_compile_file": {
            "name": "_compile_file",
            "location": 55,
            "return": [
                "str",
                "bool",
                "dict[str, str]",
                "dict[str, float]",
                "list[str]"
            ],
            "arguments": {
                "paths": [
                    "str"
                ],
                "target": [
                    "str",
                    "int"
                ]
            }
        },
        "compile_files": {
            "name": "compile_files",
            "location": 81,
            "return": [
                "CompilationResult"
            ],
            "arguments": {
                "input_": [
                    "str",
                    "None"
                ],
                "output": [
                    "str",
                    "None"
                ],
                "target": [
                    "typing.Pattern",
                    "set[str]",
                    "str",
                    "typing.IO"
                ],
                "root": [
                    "None",
                    "str"
                ]
            }
        }
    },
    "py-backwards-master/py_backwards/conf.py": {
        "init_settings": {
            "name": "init_settings",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "args": []
            }
        },
        "Settings.__init__": {
            "name": "__init__",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "py-backwards-master/py_backwards/const.py": {},
    "py-backwards-master/py_backwards/exceptions.py": {
        "CompilationError.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "str"
                ],
                "code": [
                    "str",
                    "int",
                    "dict[str, typing.Any]",
                    "None",
                    "list[list[str]]"
                ],
                "lineno": [
                    "str",
                    "int",
                    "dict[str, typing.Any]",
                    "None",
                    "list[list[str]]"
                ],
                "offset": [
                    "str",
                    "int",
                    "dict[str, typing.Any]",
                    "None",
                    "list[list[str]]"
                ]
            }
        },
        "TransformationError.__init__": {
            "name": "__init__",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "str",
                    "None"
                ],
                "transformer": [
                    "int",
                    "str",
                    "None"
                ],
                "ast": [
                    "int",
                    "str",
                    "None"
                ],
                "traceback": [
                    "int",
                    "str",
                    "None"
                ]
            }
        }
    },
    "py-backwards-master/py_backwards/files.py": {
        "get_input_output_paths": {
            "name": "get_input_output_paths",
            "location": 12,
            "return": [
                "typing.Generator[InputOutput]"
            ],
            "arguments": {
                "input_": [
                    "str"
                ],
                "output": [
                    "str"
                ],
                "root": [
                    "str",
                    "None"
                ]
            }
        }
    },
    "py-backwards-master/py_backwards/main.py": {
        "main": {
            "name": "main",
            "location": 12,
            "return": [
                "int"
            ],
            "arguments": {}
        }
    },
    "py-backwards-master/py_backwards/messages.py": {
        "_format_line": {
            "name": "_format_line",
            "location": 8,
            "return": [
                "str"
            ],
            "arguments": {
                "line": [
                    "int",
                    "str"
                ],
                "n": [
                    "int"
                ],
                "padding": [
                    "int"
                ]
            }
        },
        "_get_lines_with_highlighted_error": {
            "name": "_get_lines_with_highlighted_error",
            "location": 16,
            "return": [
                "typing.Generator[]",
                "typing.Generator[str]"
            ],
            "arguments": {
                "e": [
                    "str",
                    "dict[, ]"
                ]
            }
        },
        "syntax_error": {
            "name": "syntax_error",
            "location": 48,
            "return": [
                "str"
            ],
            "arguments": {
                "e": [
                    "str",
                    "typing.Callable[, ]",
                    "Exception"
                ]
            }
        },
        "transformation_error": {
            "name": "transformation_error",
            "location": 60,
            "return": [
                "str"
            ],
            "arguments": {
                "e": [
                    "str",
                    "typing.Type"
                ]
            }
        },
        "input_doesnt_exists": {
            "name": "input_doesnt_exists",
            "location": 71,
            "return": [
                "str"
            ],
            "arguments": {
                "input_": [
                    "str",
                    "int",
                    "list[]",
                    "list[list[str]]"
                ]
            }
        },
        "invalid_output": {
            "name": "invalid_output",
            "location": 76,
            "return": [
                "str"
            ],
            "arguments": {
                "input_": [
                    "str",
                    "tuple[typing.Union[str,int]]"
                ],
                "output": [
                    "str",
                    "tuple[typing.Union[str,int]]"
                ]
            }
        },
        "permission_error": {
            "name": "permission_error",
            "location": 82,
            "return": [
                "str"
            ],
            "arguments": {
                "output": [
                    "str",
                    "int"
                ]
            }
        },
        "compilation_result": {
            "name": "compilation_result",
            "location": 87,
            "return": [
                "str"
            ],
            "arguments": {
                "result": [
                    "str",
                    "None",
                    "bool",
                    "list[]"
                ]
            }
        },
        "warn": {
            "name": "warn",
            "location": 109,
            "return": [
                "str"
            ],
            "arguments": {
                "message": [
                    "str",
                    "bytes",
                    "int"
                ]
            }
        },
        "debug": {
            "name": "debug",
            "location": 117,
            "return": [
                "str"
            ],
            "arguments": {
                "message": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "py-backwards-master/py_backwards/types.py": {},
    "py-backwards-master/py_backwards/__init__.py": {},
    "py-backwards-master/py_backwards/transformers/base.py": {
        "import_rewrite": {
            "name": "import_rewrite",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "previous": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ],
                "current": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ]
            }
        },
        "BaseTransformer.transform": {
            "name": "transform",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "dict[str, typing.Any]",
                    "str",
                    "list[tuple[typing.Union[str,typing.Any]]]"
                ],
                "tree": [
                    "dict[str, typing.Any]",
                    "str",
                    "list[tuple[typing.Union[str,typing.Any]]]"
                ]
            }
        },
        "BaseNodeTransformer.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tree": [
                    "typing.Iterable[bytes]"
                ]
            }
        },
        "BaseNodeTransformer.transform": {
            "name": "transform",
            "location": 26,
            "return": [
                "TransformationResult"
            ],
            "arguments": {
                "cls": [
                    "list[]",
                    "dict[str, typing.Any]"
                ],
                "tree": [
                    "list[]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "BaseImportRewrite._get_matched_rewrite": {
            "name": "_get_matched_rewrite",
            "location": 44,
            "return": [
                "None",
                "tuple[]"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "None",
                    "typing.Callable[typing.Any, bool]"
                ]
            }
        },
        "BaseImportRewrite._replace_import": {
            "name": "_replace_import",
            "location": 55,
            "return": [],
            "arguments": {
                "self": [],
                "node": [
                    "dict[str, typing.Any]",
                    "typing.Type",
                    "None",
                    "bool",
                    "typing.ClassVar"
                ],
                "from_": [
                    "str",
                    "dict[str, typing.Any]",
                    "list[str]",
                    "bool"
                ],
                "to": [
                    "str",
                    "dict[str, typing.Any]",
                    "list[str]",
                    "bool"
                ]
            }
        },
        "BaseImportRewrite.visit_Import": {
            "name": "visit_Import",
            "location": 69,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "BaseImportRewrite._replace_import_from_module": {
            "name": "_replace_import_from_module",
            "location": 76,
            "return": [],
            "arguments": {
                "self": [],
                "node": [
                    "str",
                    "dict[, ]",
                    "list[str]"
                ],
                "from_": [
                    "str"
                ],
                "to": [
                    "str"
                ]
            }
        },
        "BaseImportRewrite._get_names_to_replace": {
            "name": "_get_names_to_replace",
            "location": 88,
            "return": [
                "typing.Generator[tuple[typing.Union[str,str,tuple[typing.Union[str,str]]]]]"
            ],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "BaseImportRewrite._get_replaced_import_from_part": {
            "name": "_get_replaced_import_from_part",
            "location": 97,
            "return": [],
            "arguments": {
                "self": [],
                "node": [
                    "str",
                    "list[tuple[typing.Union[str,str]]]"
                ],
                "alias": [
                    "str",
                    "list[tuple[typing.Union[str,str]]]"
                ],
                "names_to_replace": [
                    "str"
                ]
            }
        },
        "BaseImportRewrite._replace_import_from_names": {
            "name": "_replace_import_from_names",
            "location": 113,
            "return": [],
            "arguments": {
                "self": [],
                "node": [
                    "str",
                    "bool",
                    "dict[, ]"
                ],
                "names_to_replace": [
                    "str",
                    "bool",
                    "dict[, ]",
                    "tuple[typing.Union[str,str]]",
                    "bytes",
                    "None"
                ]
            }
        },
        "BaseImportRewrite.visit_ImportFrom": {
            "name": "visit_ImportFrom",
            "location": 128,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        }
    },
    "py-backwards-master/py_backwards/transformers/class_without_bases.py": {
        "ClassWithoutBasesTransformer.visit_ClassDef": {
            "name": "visit_ClassDef",
            "location": 15,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        }
    },
    "py-backwards-master/py_backwards/transformers/dict_unpacking.py": {
        "merge_dicts": {
            "name": "merge_dicts",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "merge_dicts._py_backwards_merge_dicts": {
            "name": "_py_backwards_merge_dicts",
            "location": 10,
            "return": [
                "dict[, ]"
            ],
            "arguments": {
                "dicts": []
            }
        },
        "DictUnpackingTransformer._split_by_None": {
            "name": "_split_by_None",
            "location": 33,
            "return": [
                "list[list[]]"
            ],
            "arguments": {
                "self": [],
                "pairs": [
                    "list[str]"
                ]
            }
        },
        "DictUnpackingTransformer._prepare_splitted": {
            "name": "_prepare_splitted",
            "location": 46,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "self": [],
                "splitted": [
                    "str"
                ]
            }
        },
        "DictUnpackingTransformer._merge_dicts": {
            "name": "_merge_dicts",
            "location": 59,
            "return": [],
            "arguments": {
                "self": [],
                "xs": [
                    "bytes"
                ]
            }
        },
        "DictUnpackingTransformer.visit_Module": {
            "name": "visit_Module",
            "location": 67,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "DictUnpackingTransformer.visit_Dict": {
            "name": "visit_Dict",
            "location": 71,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        }
    },
    "py-backwards-master/py_backwards/transformers/formatted_values.py": {
        "FormattedValuesTransformer.visit_FormattedValue": {
            "name": "visit_FormattedValue",
            "location": 15,
            "return": [],
            "arguments": {
                "self": [],
                "node": [
                    "bool"
                ]
            }
        },
        "FormattedValuesTransformer.visit_JoinedStr": {
            "name": "visit_JoinedStr",
            "location": 29,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        }
    },
    "py-backwards-master/py_backwards/transformers/functions_annotations.py": {
        "FunctionsAnnotationsTransformer.visit_arg": {
            "name": "visit_arg",
            "location": 16,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "FunctionsAnnotationsTransformer.visit_FunctionDef": {
            "name": "visit_FunctionDef",
            "location": 21,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        }
    },
    "py-backwards-master/py_backwards/transformers/import_dbm.py": {
        "import_rewrite": {
            "name": "import_rewrite",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "previous": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ],
                "current": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ]
            }
        },
        "ImportDbmTransformer.visit_Import": {
            "name": "visit_Import",
            "location": 28,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "ImportDbmTransformer.visit_ImportFrom": {
            "name": "visit_ImportFrom",
            "location": 34,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        }
    },
    "py-backwards-master/py_backwards/transformers/import_pathlib.py": {},
    "py-backwards-master/py_backwards/transformers/metaclass.py": {
        "six_import": {
            "name": "six_import",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "class_bases": {
            "name": "class_bases",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "metaclass": [
                    "str",
                    "dict[str, typing.Any]",
                    "tuple[str]"
                ],
                "bases": [
                    "str",
                    "dict[str, typing.Any]",
                    "tuple[str]"
                ]
            }
        },
        "MetaclassTransformer.visit_Module": {
            "name": "visit_Module",
            "location": 28,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "MetaclassTransformer.visit_ClassDef": {
            "name": "visit_ClassDef",
            "location": 32,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        }
    },
    "py-backwards-master/py_backwards/transformers/python2_future.py": {
        "imports": {
            "name": "imports",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "future": []
            }
        },
        "Python2FutureTransformer.visit_Module": {
            "name": "visit_Module",
            "location": 24,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        }
    },
    "py-backwards-master/py_backwards/transformers/return_from_generator.py": {
        "return_from_generator": {
            "name": "return_from_generator",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "return_value": [
                    "list[int]",
                    "str",
                    "dict[str, typing.Any]",
                    "list[str]"
                ]
            }
        },
        "ReturnFromGeneratorTransformer._find_generator_returns": {
            "name": "_find_generator_returns",
            "location": 29,
            "return": [
                "list[tuple[typing.Union[tuple[typing.Union[int,str,list[int]]],ast_@_FunctionDef]]]",
                "list[]"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "int",
                    "str",
                    "list[int]"
                ]
            }
        },
        "ReturnFromGeneratorTransformer._replace_return": {
            "name": "_replace_return",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parent": [
                    "list[tuple[typing.Union[str,str]]]",
                    "typing.Type",
                    "str"
                ],
                "return_": [
                    "int",
                    "float",
                    "dict[, ]",
                    "typing.Callable[, ]"
                ]
            }
        },
        "ReturnFromGeneratorTransformer.visit_FunctionDef": {
            "name": "visit_FunctionDef",
            "location": 64,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        }
    },
    "py-backwards-master/py_backwards/transformers/six_moves.py": {
        "_get_rewrites": {
            "name": "_get_rewrites",
            "location": 199,
            "return": [
                "typing.Generator[tuple[typing.Union[str,str]]]",
                "typing.Generator[tuple[str]]"
            ],
            "arguments": {}
        },
        "MovedAttribute.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "None",
                    "bool"
                ],
                "old_mod": [
                    "int",
                    "typing.Iterable[tuple[typing.Union[typing.Hashable,typing.Any]]]",
                    "typing.Sequence[str]",
                    "str",
                    "None"
                ],
                "new_mod": [
                    "str",
                    "None",
                    "int"
                ],
                "old_attr": [
                    "None",
                    "str",
                    "int",
                    "typing.Callable[, ]",
                    "typing.Any",
                    "list[typing.Any]"
                ],
                "new_attr": [
                    "None",
                    "dict[str, str]",
                    "dict[, ]",
                    "typing.Match",
                    "str"
                ]
            }
        },
        "MovedModule.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "typing.Callable[typing.Any, bool]",
                    "str",
                    "list[str]"
                ],
                "old": [
                    "bool",
                    "bytes",
                    "None",
                    "typing.Type",
                    "str"
                ],
                "new": [
                    "None",
                    "str",
                    "bool",
                    "dict[str, typing.Any]"
                ]
            }
        }
    },
    "py-backwards-master/py_backwards/transformers/starred_unpacking.py": {
        "StarredUnpackingTransformer._has_starred": {
            "name": "_has_starred",
            "location": 20,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "xs": [
                    "str",
                    "bytes"
                ]
            }
        },
        "StarredUnpackingTransformer._split_by_starred": {
            "name": "_split_by_starred",
            "location": 27,
            "return": [
                "list[typing.Union[list[],ast_@_Starred]]"
            ],
            "arguments": {
                "self": [],
                "xs": [
                    "str",
                    "dict[str, object]",
                    "list[object]",
                    "list[str]"
                ]
            }
        },
        "StarredUnpackingTransformer._prepare_lists": {
            "name": "_prepare_lists",
            "location": 39,
            "return": [
                "typing.Generator[]",
                "typing.Generator[List]"
            ],
            "arguments": {
                "self": [],
                "xs": [
                    "list[]",
                    "str"
                ]
            }
        },
        "StarredUnpackingTransformer._merge_lists": {
            "name": "_merge_lists",
            "location": 50,
            "return": [],
            "arguments": {
                "self": [],
                "xs": []
            }
        },
        "StarredUnpackingTransformer._to_sum_of_lists": {
            "name": "_to_sum_of_lists",
            "location": 60,
            "return": [],
            "arguments": {
                "self": [],
                "xs": [
                    "typing.Iterable[str]",
                    "int",
                    "bytes",
                    "float",
                    "None",
                    "str"
                ]
            }
        },
        "StarredUnpackingTransformer.visit_List": {
            "name": "visit_List",
            "location": 66,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "StarredUnpackingTransformer.visit_Call": {
            "name": "visit_Call",
            "location": 74,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        }
    },
    "py-backwards-master/py_backwards/transformers/string_types.py": {
        "StringTypesTransformer.transform": {
            "name": "transform",
            "location": 14,
            "return": [
                "TransformationResult"
            ],
            "arguments": {
                "cls": [
                    "dict[str, typing.Any]",
                    "str",
                    "list[tuple[typing.Union[str,typing.Any]]]"
                ],
                "tree": [
                    "dict[, ]",
                    "dict[str, typing.Any]",
                    "list[]"
                ]
            }
        }
    },
    "py-backwards-master/py_backwards/transformers/super_without_arguments.py": {
        "SuperWithoutArgumentsTransformer._replace_super_args": {
            "name": "_replace_super_args",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "typing.Callable[, ]",
                    "int"
                ]
            }
        },
        "SuperWithoutArgumentsTransformer.visit_Call": {
            "name": "visit_Call",
            "location": 33,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        }
    },
    "py-backwards-master/py_backwards/transformers/variables_annotations.py": {
        "VariablesAnnotationsTransformer.transform": {
            "name": "transform",
            "location": 20,
            "return": [
                "TransformationResult"
            ],
            "arguments": {
                "cls": [
                    "dict[str, typing.Any]",
                    "str",
                    "list[tuple[typing.Union[str,typing.Any]]]"
                ],
                "tree": [
                    "dict[, ]",
                    "dict[str, typing.Any]",
                    "typing.Sequence[dict[, ]]"
                ]
            }
        }
    },
    "py-backwards-master/py_backwards/transformers/yield_from.py": {
        "result_assignment": {
            "name": "result_assignment",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "exc": [
                    "int"
                ],
                "target": [
                    "str",
                    "dict[, ]"
                ]
            }
        },
        "yield_from": {
            "name": "yield_from",
            "location": 19,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "generator": [
                    "float",
                    "typing.Sequence[float]",
                    "tuple[typing.Union[int,int]]",
                    "tuple[]"
                ],
                "exc": [],
                "assignment": [
                    "float",
                    "typing.Sequence[float]",
                    "tuple[typing.Union[int,int]]",
                    "tuple[]"
                ]
            }
        },
        "YieldFromTransformer._get_yield_from_index": {
            "name": "_get_yield_from_index",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "str",
                    "list[str]",
                    "typing.Type"
                ],
                "type_": [
                    "str",
                    "bool",
                    "None"
                ]
            }
        },
        "YieldFromTransformer._emulate_yield_from": {
            "name": "_emulate_yield_from",
            "location": 43,
            "return": [],
            "arguments": {
                "self": [],
                "target": [
                    "bool"
                ],
                "node": [
                    "str",
                    "bool",
                    "list[str]",
                    "dict[str, typing.Any]",
                    "list[]"
                ]
            }
        },
        "YieldFromTransformer._handle_assignments": {
            "name": "_handle_assignments",
            "location": 55,
            "return": [
                "dict[, ]",
                "int"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "dict[, ]",
                    "int"
                ]
            }
        },
        "YieldFromTransformer._handle_expressions": {
            "name": "_handle_expressions",
            "location": 67,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "YieldFromTransformer.visit": {
            "name": "visit",
            "location": 78,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        }
    },
    "py-backwards-master/py_backwards/transformers/__init__.py": {},
    "py-backwards-master/py_backwards/utils/helpers.py": {
        "eager": {
            "name": "eager",
            "location": 12,
            "return": [],
            "arguments": {
                "fn": [
                    "int",
                    "str",
                    "typing.Iterable[C]"
                ]
            }
        },
        "get_source": {
            "name": "get_source",
            "location": 32,
            "return": [
                "str"
            ],
            "arguments": {
                "fn": [
                    "str"
                ]
            }
        },
        "warn": {
            "name": "warn",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "message": [
                    "str",
                    "int"
                ]
            }
        },
        "debug": {
            "name": "debug",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "get_message": [
                    "str",
                    "None"
                ]
            }
        },
        "eager.wrapped": {
            "name": "wrapped",
            "location": 14,
            "return": [
                "list[]"
            ],
            "arguments": {}
        },
        "VariablesGenerator.generate": {
            "name": "generate",
            "location": 24,
            "return": [
                "str"
            ],
            "arguments": {
                "cls": [
                    "bytes"
                ],
                "variable": [
                    "list[T]",
                    "list[str]",
                    "typing.Type"
                ]
            }
        }
    },
    "py-backwards-master/py_backwards/utils/snippet.py": {
        "find_variables": {
            "name": "find_variables",
            "location": 10,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "tree": [
                    "int",
                    "str"
                ]
            }
        },
        "extend_tree": {
            "name": "extend_tree",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {
                "tree": [
                    "dict[, ]"
                ],
                "variables": []
            }
        },
        "let": {
            "name": "let",
            "location": 134,
            "return": [
                "None"
            ],
            "arguments": {
                "var": [
                    "bool"
                ]
            }
        },
        "extend": {
            "name": "extend",
            "location": 148,
            "return": [
                "None"
            ],
            "arguments": {
                "var": [
                    "bool"
                ]
            }
        },
        "VariablesReplacer.__init__": {
            "name": "__init__",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "variables": [
                    "typing.Callable[, ]",
                    "Exception",
                    "str",
                    "bool",
                    "dict[str, typing.Union[str,None]]"
                ]
            }
        },
        "VariablesReplacer._replace_field_or_node": {
            "name": "_replace_field_or_node",
            "location": 28,
            "return": [
                "typing.Callable[, ]"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "typing.Callable[, ]"
                ],
                "field": [
                    "tuple[typing.Union[int,int]]",
                    "str"
                ],
                "all_types": [
                    "bool"
                ]
            }
        },
        "VariablesReplacer.visit_Name": {
            "name": "visit_Name",
            "location": 38,
            "return": [],
            "arguments": {
                "self": [],
                "node": [
                    "list[]"
                ]
            }
        },
        "VariablesReplacer.visit_FunctionDef": {
            "name": "visit_FunctionDef",
            "location": 42,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "VariablesReplacer.visit_Attribute": {
            "name": "visit_Attribute",
            "location": 46,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "VariablesReplacer.visit_keyword": {
            "name": "visit_keyword",
            "location": 50,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "VariablesReplacer.visit_ClassDef": {
            "name": "visit_ClassDef",
            "location": 54,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "VariablesReplacer.visit_arg": {
            "name": "visit_arg",
            "location": 58,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "VariablesReplacer._replace_module": {
            "name": "_replace_module",
            "location": 62,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "module": [
                    "str"
                ]
            }
        },
        "VariablesReplacer.visit_ImportFrom": {
            "name": "visit_ImportFrom",
            "location": 72,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "VariablesReplacer.visit_alias": {
            "name": "visit_alias",
            "location": 76,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "VariablesReplacer.visit_ExceptHandler": {
            "name": "visit_ExceptHandler",
            "location": 81,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "VariablesReplacer.replace": {
            "name": "replace",
            "location": 86,
            "return": [
                "str",
                "typing.IO"
            ],
            "arguments": {
                "cls": [
                    "bool"
                ],
                "tree": [
                    "str",
                    "typing.IO"
                ],
                "variables": [
                    "bool"
                ]
            }
        },
        "snippet.__init__": {
            "name": "__init__",
            "location": 107,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fn": [
                    "int",
                    "float"
                ]
            }
        },
        "snippet._get_variables": {
            "name": "_get_variables",
            "location": 110,
            "return": [
                "dict[typing.Union[typing.Text,tuple[str]], tuple[str]]"
            ],
            "arguments": {
                "self": [],
                "tree": [
                    "dict[, ]",
                    "bool"
                ],
                "snippet_kwargs": [
                    "dict[, ]",
                    "dict[str, str]"
                ]
            }
        },
        "snippet.get_body": {
            "name": "get_body",
            "location": 124,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "VariablesReplacer._replace_module._replace": {
            "name": "_replace",
            "location": 63,
            "return": [],
            "arguments": {
                "name": []
            }
        }
    },
    "py-backwards-master/py_backwards/utils/tree.py": {
        "_build_parents": {
            "name": "_build_parents",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "tree": [
                    "dict[, ]",
                    "list[str]"
                ]
            }
        },
        "get_parent": {
            "name": "get_parent",
            "location": 16,
            "return": [],
            "arguments": {
                "tree": [
                    "typing.Callable[..., None]",
                    "bool"
                ],
                "node": [],
                "rebuild": [
                    "bool"
                ]
            }
        },
        "get_node_position": {
            "name": "get_node_position",
            "location": 27,
            "return": [
                "NodePosition"
            ],
            "arguments": {
                "tree": [
                    "typing.Type"
                ],
                "node": []
            }
        },
        "find": {
            "name": "find",
            "location": 46,
            "return": [
                "typing.Generator[type_]"
            ],
            "arguments": {
                "tree": [
                    "typing.Type",
                    "bool",
                    "dict[, ]"
                ],
                "type_": [
                    "typing.Type"
                ]
            }
        },
        "insert_at": {
            "name": "insert_at",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "index": [
                    "int"
                ],
                "parent": [
                    "int"
                ],
                "nodes": [
                    "tuple[typing.Union[str,str]]",
                    "list['Photo']",
                    "list[str]"
                ],
                "holder_attribute": [
                    "typing.Text"
                ]
            }
        },
        "replace_at": {
            "name": "replace_at",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "index": [
                    "int",
                    "list[]",
                    "str"
                ],
                "parent": [
                    "int",
                    "list[]",
                    "str"
                ],
                "nodes": [
                    "float",
                    "int"
                ],
                "holder_attribute": [
                    "typing.Text"
                ]
            }
        },
        "get_closest_parent_of": {
            "name": "get_closest_parent_of",
            "location": 72,
            "return": [
                "type_"
            ],
            "arguments": {
                "tree": [
                    "bool"
                ],
                "node": [
                    "typing.Sequence[typing.Any]"
                ],
                "type_": [
                    "typing.Type"
                ]
            }
        }
    },
    "py-backwards-master/py_backwards/utils/__init__.py": {},
    "py-backwards-master/tests/conftest.py": {
        "reset_variables_generator": {
            "name": "reset_variables_generator",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "as_str": {
            "name": "as_str",
            "location": 12,
            "return": [],
            "arguments": {}
        },
        "as_ast": {
            "name": "as_ast",
            "location": 20,
            "return": [],
            "arguments": {}
        },
        "pytest_addoption": {
            "name": "pytest_addoption",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "parser": []
            }
        },
        "functional": {
            "name": "functional",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "request": [
                    "dict[, ]"
                ]
            }
        },
        "as_str.as_str": {
            "name": "as_str",
            "location": 13,
            "return": [],
            "arguments": {
                "fn": []
            }
        },
        "as_ast.as_ast": {
            "name": "as_ast",
            "location": 21,
            "return": [],
            "arguments": {
                "fn": []
            }
        }
    },
    "py-backwards-master/tests/test_compiler.py": {
        "TestCompileFiles.input_output": {
            "name": "input_output",
            "location": 13,
            "return": [],
            "arguments": {
                "self": [],
                "mocker": []
            }
        },
        "TestCompileFiles.test_syntax_error": {
            "name": "test_syntax_error",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "input_output": [
                    "str"
                ]
            }
        },
        "TestCompileFiles.test_compile": {
            "name": "test_compile",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "input_output": [
                    "str"
                ]
            }
        },
        "TestCompileFiles.test_compile.output_f": {
            "name": "output_f",
            "location": 29,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {}
        }
    },
    "py-backwards-master/tests/test_files.py": {
        "TestGetInputPath.exists": {
            "name": "exists",
            "location": 14,
            "return": [],
            "arguments": {
                "self": [],
                "mocker": []
            }
        },
        "TestGetInputPath.test_dir_to_file": {
            "name": "test_dir_to_file",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGetInputPath.test_non_exists_input": {
            "name": "test_non_exists_input",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "exists": []
            }
        },
        "TestGetInputPath.test_file_to_dir": {
            "name": "test_file_to_dir",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGetInputPath.test_file_to_file": {
            "name": "test_file_to_file",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGetInputPath.test_dir_to_dir": {
            "name": "test_dir_to_dir",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mocker": []
            }
        },
        "TestGetInputPath.test_file_to_dir_with_root": {
            "name": "test_file_to_dir_with_root",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGetInputPath.test_dir_to_dir_with_root": {
            "name": "test_dir_to_dir_with_root",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mocker": []
            }
        }
    },
    "py-backwards-master/tests/__init__.py": {},
    "py-backwards-master/tests/functional/input.py": {
        "test_variables": {
            "name": "test_variables",
            "location": 6,
            "return": [],
            "arguments": {}
        },
        "test_strings": {
            "name": "test_strings",
            "location": 19,
            "return": [],
            "arguments": {}
        },
        "test_lists": {
            "name": "test_lists",
            "location": 33,
            "return": [],
            "arguments": {}
        },
        "test_dicts": {
            "name": "test_dicts",
            "location": 47,
            "return": [],
            "arguments": {}
        },
        "test_functions": {
            "name": "test_functions",
            "location": 67,
            "return": [],
            "arguments": {}
        },
        "test_cycles": {
            "name": "test_cycles",
            "location": 94,
            "return": [],
            "arguments": {}
        },
        "test_class": {
            "name": "test_class",
            "location": 118,
            "return": [],
            "arguments": {}
        },
        "test_generators": {
            "name": "test_generators",
            "location": 153,
            "return": [],
            "arguments": {}
        },
        "test_for_comprehension": {
            "name": "test_for_comprehension",
            "location": 177,
            "return": [],
            "arguments": {}
        },
        "test_exceptions": {
            "name": "test_exceptions",
            "location": 189,
            "return": [],
            "arguments": {}
        },
        "test_context_manager": {
            "name": "test_context_manager",
            "location": 207,
            "return": [],
            "arguments": {}
        },
        "test_imports": {
            "name": "test_imports",
            "location": 229,
            "return": [],
            "arguments": {}
        },
        "test_functions.inc": {
            "name": "inc",
            "location": 68,
            "return": [],
            "arguments": {
                "fn": []
            }
        },
        "test_functions.fn_a": {
            "name": "fn_a",
            "location": 75,
            "return": [],
            "arguments": {
                "a": []
            }
        },
        "test_functions.fn_b": {
            "name": "fn_b",
            "location": 79,
            "return": [],
            "arguments": {
                "b": []
            }
        },
        "test_functions.fn_c": {
            "name": "fn_c",
            "location": 82,
            "return": [],
            "arguments": {
                "a": []
            }
        },
        "test_generators.gen_a": {
            "name": "gen_a",
            "location": 154,
            "return": [],
            "arguments": {}
        },
        "test_generators.gen_b": {
            "name": "gen_b",
            "location": 158,
            "return": [],
            "arguments": {}
        },
        "test_generators.gen_c": {
            "name": "gen_c",
            "location": 161,
            "return": [],
            "arguments": {}
        },
        "test_generators.gen_d": {
            "name": "gen_d",
            "location": 165,
            "return": [],
            "arguments": {}
        },
        "test_context_manager.manager": {
            "name": "manager",
            "location": 212,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "test_functions.inc.wrapper": {
            "name": "wrapper",
            "location": 69,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "test_class.Base.base_method": {
            "name": "base_method",
            "location": 120,
            "return": [],
            "arguments": {
                "cls": [],
                "x": []
            }
        },
        "test_class.First.method_a": {
            "name": "method_a",
            "location": 124,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_class.First.method_b": {
            "name": "method_b",
            "location": 128,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "test_class.First.method_c": {
            "name": "method_c",
            "location": 132,
            "return": [],
            "arguments": {}
        },
        "test_class.Second.method_a": {
            "name": "method_a",
            "location": 136,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_class.Second.method_b": {
            "name": "method_b",
            "location": 140,
            "return": [],
            "arguments": {
                "cls": []
            }
        }
    },
    "py-backwards-master/tests/functional/test_compiled_code.py": {
        "test_compiled_code": {
            "name": "test_compiled_code",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "spawnu": [
                    "str",
                    "int"
                ],
                "TIMEOUT": [
                    "int",
                    "str",
                    "typing.Sequence[float]"
                ],
                "version": [
                    "str",
                    "int"
                ],
                "target": [
                    "str"
                ]
            }
        }
    },
    "py-backwards-master/tests/functional/__init__.py": {},
    "py-backwards-master/tests/transformers/conftest.py": {
        "transform": {
            "name": "transform",
            "location": 8,
            "return": [],
            "arguments": {}
        },
        "run_transformed": {
            "name": "run_transformed",
            "location": 25,
            "return": [],
            "arguments": {
                "transform": [
                    "str",
                    "bool"
                ]
            }
        },
        "ast": {
            "name": "ast",
            "location": 45,
            "return": [],
            "arguments": {}
        },
        "transform.transform": {
            "name": "transform",
            "location": 9,
            "return": [],
            "arguments": {
                "transformer": [],
                "before": []
            }
        },
        "run_transformed._get_latest_line": {
            "name": "_get_latest_line",
            "location": 26,
            "return": [],
            "arguments": {
                "splitted": []
            }
        },
        "run_transformed.run_transformed": {
            "name": "run_transformed",
            "location": 31,
            "return": [],
            "arguments": {
                "transformer": [],
                "code": []
            }
        },
        "ast.ast": {
            "name": "ast",
            "location": 46,
            "return": [],
            "arguments": {
                "code": []
            }
        }
    },
    "py-backwards-master/tests/transformers/test_class_without_bases.py": {
        "test_transform": {
            "name": "test_transform",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "transform": [],
                "ast": [
                    "str"
                ],
                "before": [],
                "after": [
                    "str"
                ]
            }
        }
    },
    "py-backwards-master/tests/transformers/test_dict_unpacking.py": {
        "test_transform": {
            "name": "test_transform",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "transform": [
                    "bool",
                    "None"
                ],
                "ast": [
                    "str"
                ],
                "before": [
                    "bool",
                    "None"
                ],
                "after": [
                    "str"
                ]
            }
        },
        "test_run": {
            "name": "test_run",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "run_transformed": [
                    "str"
                ],
                "code": [
                    "str"
                ],
                "result": [
                    "str"
                ]
            }
        }
    },
    "py-backwards-master/tests/transformers/test_formatted_values.py": {
        "test_transform": {
            "name": "test_transform",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "transform": [],
                "ast": [
                    "str"
                ],
                "before": [],
                "after": [
                    "str"
                ]
            }
        },
        "test_run": {
            "name": "test_run",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "run_transformed": [
                    "str",
                    "int"
                ],
                "code": [
                    "str",
                    "int"
                ],
                "result": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "py-backwards-master/tests/transformers/test_functions_annotations.py": {
        "test_transform": {
            "name": "test_transform",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "transform": [],
                "ast": [
                    "str"
                ],
                "before": [],
                "after": [
                    "str"
                ]
            }
        },
        "test_run": {
            "name": "test_run",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "run_transformed": [
                    "str"
                ],
                "code": [
                    "str"
                ],
                "result": [
                    "str"
                ]
            }
        }
    },
    "py-backwards-master/tests/transformers/test_import_dbm.py": {
        "test_transform": {
            "name": "test_transform",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "transform": [
                    "bool",
                    "None"
                ],
                "ast": [
                    "str"
                ],
                "before": [
                    "bool",
                    "None"
                ],
                "after": [
                    "str"
                ]
            }
        }
    },
    "py-backwards-master/tests/transformers/test_import_pathlib.py": {
        "test_transform": {
            "name": "test_transform",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "transform": [
                    "bool",
                    "None"
                ],
                "ast": [
                    "str"
                ],
                "before": [
                    "bool",
                    "None"
                ],
                "after": [
                    "str"
                ]
            }
        }
    },
    "py-backwards-master/tests/transformers/test_metaclass.py": {
        "test_transform": {
            "name": "test_transform",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "transform": [
                    "int",
                    "typing.Sequence[int]",
                    "str"
                ],
                "ast": [
                    "str"
                ],
                "before": [
                    "int",
                    "typing.Sequence[int]",
                    "str"
                ],
                "after": [
                    "str"
                ]
            }
        }
    },
    "py-backwards-master/tests/transformers/test_python2_future.py": {
        "test_transform": {
            "name": "test_transform",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "transform": [
                    "bool",
                    "None"
                ],
                "ast": [
                    "str"
                ],
                "before": [
                    "bool",
                    "None"
                ],
                "after": [
                    "str"
                ]
            }
        }
    },
    "py-backwards-master/tests/transformers/test_return_from_generator.py": {
        "test_transform": {
            "name": "test_transform",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "transform": [],
                "ast": [
                    "str"
                ],
                "before": [],
                "after": [
                    "str"
                ]
            }
        },
        "test_run": {
            "name": "test_run",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "run_transformed": [
                    "str",
                    "list[str]"
                ],
                "code": [
                    "str",
                    "list[str]"
                ],
                "result": [
                    "str",
                    "list[str]"
                ]
            }
        }
    },
    "py-backwards-master/tests/transformers/test_six_moves.py": {
        "test_transform": {
            "name": "test_transform",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "transform": [
                    "bool",
                    "None"
                ],
                "ast": [
                    "str"
                ],
                "before": [
                    "bool",
                    "None"
                ],
                "after": [
                    "str"
                ]
            }
        }
    },
    "py-backwards-master/tests/transformers/test_starred_unpacking.py": {
        "test_transform": {
            "name": "test_transform",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "transform": [
                    "bool",
                    "None"
                ],
                "ast": [
                    "str"
                ],
                "before": [
                    "bool",
                    "None"
                ],
                "after": [
                    "str"
                ]
            }
        },
        "test_run": {
            "name": "test_run",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "run_transformed": [
                    "str"
                ],
                "code": [
                    "str"
                ],
                "result": [
                    "str"
                ]
            }
        }
    },
    "py-backwards-master/tests/transformers/test_string_types.py": {
        "test_transform": {
            "name": "test_transform",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "transform": [
                    "str",
                    "bool",
                    "None"
                ],
                "ast": [
                    "str"
                ],
                "before": [
                    "str",
                    "bool",
                    "None"
                ],
                "after": [
                    "str"
                ]
            }
        }
    },
    "py-backwards-master/tests/transformers/test_super_without_arguments.py": {
        "test_transform": {
            "name": "test_transform",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "transform": [],
                "ast": [
                    "str"
                ],
                "before": [],
                "after": [
                    "str"
                ]
            }
        },
        "test_run": {
            "name": "test_run",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "run_transformed": [
                    "str"
                ],
                "code": [
                    "str"
                ],
                "result": [
                    "str"
                ]
            }
        }
    },
    "py-backwards-master/tests/transformers/test_variables_annotations.py": {
        "test_transform": {
            "name": "test_transform",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "transform": [],
                "ast": [
                    "bool"
                ],
                "before": [],
                "after": [
                    "bool"
                ]
            }
        },
        "test_run": {
            "name": "test_run",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "run_transformed": [
                    "str"
                ],
                "code": [
                    "str"
                ],
                "result": [
                    "str"
                ]
            }
        }
    },
    "py-backwards-master/tests/transformers/test_yield_from.py": {
        "test_transform": {
            "name": "test_transform",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "transform": [
                    "int",
                    "typing.Sequence[int]",
                    "str"
                ],
                "ast": [
                    "str"
                ],
                "before": [
                    "int",
                    "typing.Sequence[int]",
                    "str"
                ],
                "after": [
                    "str"
                ]
            }
        },
        "test_run": {
            "name": "test_run",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "run_transformed": [
                    "str"
                ],
                "code": [
                    "str"
                ],
                "result": [
                    "str"
                ]
            }
        }
    },
    "py-backwards-master/tests/transformers/__init__.py": {},
    "py-backwards-master/tests/utils/test_helpers.py": {
        "test_eager": {
            "name": "test_eager",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_variables_generator": {
            "name": "test_variables_generator",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_get_source": {
            "name": "test_get_source",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_eager.fn": {
            "name": "fn",
            "location": 6,
            "return": [
                "typing.Generator[int]"
            ],
            "arguments": {}
        },
        "test_get_source.fn": {
            "name": "fn",
            "location": 20,
            "return": [
                "typing.Generator[int]"
            ],
            "arguments": {}
        }
    },
    "py-backwards-master/tests/utils/test_snippet.py": {
        "test_variables_finder": {
            "name": "test_variables_finder",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_variables_replacer": {
            "name": "test_variables_replacer",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "to_extend": {
            "name": "to_extend",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_extend_tree": {
            "name": "test_extend_tree",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "my_snippet": {
            "name": "my_snippet",
            "location": 70,
            "return": [
                "int"
            ],
            "arguments": {
                "class_name": [
                    "str",
                    "bool",
                    "tuple[]",
                    "dict[str, str]",
                    "list[dict[str, typing.Any]]",
                    "list[str]"
                ],
                "x_value": [
                    "str"
                ]
            }
        },
        "_get_code": {
            "name": "_get_code",
            "location": 109,
            "return": [],
            "arguments": {}
        },
        "test_snippet_code": {
            "name": "test_snippet_code",
            "location": 116,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_snippet_run": {
            "name": "test_snippet_run",
            "location": 121,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "py-backwards-master/tests/utils/test_tree.py": {
        "test_get_parent": {
            "name": "test_get_parent",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "as_ast": [
                    "dict[str, str]",
                    "bool",
                    "dict[, ]",
                    "str"
                ]
            }
        },
        "test_find": {
            "name": "test_find",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "as_ast": [
                    "int",
                    "dict[, ]"
                ]
            }
        },
        "to_insert": {
            "name": "to_insert",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_insert_at": {
            "name": "test_insert_at",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "as_ast": [
                    "str"
                ],
                "as_str": [
                    "int",
                    "str",
                    "list[dict[str, typing.Any]]"
                ]
            }
        },
        "test_replace_at": {
            "name": "test_replace_at",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "as_ast": [
                    "str"
                ],
                "as_str": [
                    "int",
                    "str",
                    "list[dict[str, typing.Any]]"
                ]
            }
        },
        "test_get_parent.tree": {
            "name": "tree",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "TestGetNodePosition.test_from_body": {
            "name": "test_from_body",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "as_ast": [
                    "bool",
                    "typing.Callable[, ]",
                    "list[]"
                ]
            }
        },
        "TestGetNodePosition.test_from_orelse": {
            "name": "test_from_orelse",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "as_ast": [
                    "bool",
                    "typing.Callable[, ]",
                    "list[]"
                ]
            }
        },
        "test_find.tree": {
            "name": "tree",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_insert_at.fn": {
            "name": "fn",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_replace_at.fn": {
            "name": "fn",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "TestGetNodePosition.test_from_body.tree": {
            "name": "tree",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "TestGetNodePosition.test_from_orelse.tree": {
            "name": "tree",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "py-backwards-master/tests/utils/__init__.py": {}
}
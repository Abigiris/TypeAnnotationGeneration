{
    "py-eth-index-master/setup.py": {},
    "py-eth-index-master/src/ethindex/cli.py": {
        "report_version": {
            "name": "report_version",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "cli": {
            "name": "cli",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "ctx": [],
                "version": [
                    "bool",
                    "list[]"
                ]
            }
        }
    },
    "py-eth-index-master/src/ethindex/logdecode.py": {
        "replace_with_checksum_address": {
            "name": "replace_with_checksum_address",
            "location": 21,
            "return": [
                "list[]"
            ],
            "arguments": {
                "values": [
                    "list[]",
                    "list[str]",
                    "dict[, ]",
                    "None",
                    "typing.Type"
                ],
                "types": [
                    "list[]",
                    "list[str]",
                    "dict[, ]",
                    "None",
                    "typing.Type"
                ]
            }
        },
        "build_address_to_abi_dict": {
            "name": "build_address_to_abi_dict",
            "location": 30,
            "return": [
                "dict[, ]"
            ],
            "arguments": {
                "addresses_json": [],
                "compiled_contracts": [
                    "dict[, ]",
                    "str",
                    "None",
                    "bool",
                    "typing.BinaryIO"
                ]
            }
        },
        "decode_non_indexed_inputs": {
            "name": "decode_non_indexed_inputs",
            "location": 55,
            "return": [],
            "arguments": {
                "abi": [],
                "log": [
                    "str"
                ]
            }
        },
        "decode_indexed_inputs": {
            "name": "decode_indexed_inputs",
            "location": 67,
            "return": [],
            "arguments": {
                "abi": [
                    "str"
                ],
                "log": [
                    "str"
                ]
            }
        },
        "get_event_abis": {
            "name": "get_event_abis",
            "location": 81,
            "return": [
                "list[str]"
            ],
            "arguments": {
                "abi": [
                    "list[str]",
                    "str"
                ]
            }
        },
        "build_address_to_abi_dict.add_abi": {
            "name": "add_abi",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "contract_address": [],
                "contract_name": []
            }
        },
        "Event.blocknumber": {
            "name": "blocknumber",
            "location": 93,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Event.blockhash": {
            "name": "blockhash",
            "location": 97,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Event.transactionhash": {
            "name": "transactionhash",
            "location": 101,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Event.address": {
            "name": "address",
            "location": 105,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Event.transactionindex": {
            "name": "transactionindex",
            "location": 109,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Event.logindex": {
            "name": "logindex",
            "location": 113,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Event.__eq__": {
            "name": "__eq__",
            "location": 116,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "str",
                    "list[T]"
                ]
            }
        },
        "Event.__ne__": {
            "name": "__ne__",
            "location": 131,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "dict[, ]",
                    "typing.AbstractSet"
                ]
            }
        },
        "TopicIndex.__init__": {
            "name": "__init__",
            "location": 144,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "address2abi": []
            }
        },
        "TopicIndex.get_abi_for_log": {
            "name": "get_abi_for_log",
            "location": 158,
            "return": [],
            "arguments": {
                "self": [],
                "log": [
                    "list[dict[, ]]"
                ]
            }
        },
        "TopicIndex.decode_logs": {
            "name": "decode_logs",
            "location": 161,
            "return": [
                "list[typing.Union[list[],dict[, ],tuple[typing.Union[typing.Literal,typing.Literal,typing.Literal]]]]"
            ],
            "arguments": {
                "self": [],
                "logs": [
                    "list[str]",
                    "dict[str, str]"
                ]
            }
        },
        "TopicIndex.decode_log": {
            "name": "decode_log",
            "location": 169,
            "return": [
                "None",
                "Event"
            ],
            "arguments": {
                "self": [],
                "log": [
                    "dict[str, typing.Any]",
                    "list[]",
                    "int"
                ]
            }
        }
    },
    "py-eth-index-master/src/ethindex/pgimport.py": {
        "topic_index_from_db": {
            "name": "topic_index_from_db",
            "location": 31,
            "return": [],
            "arguments": {
                "conn": [],
                "addresses": []
            }
        },
        "get_logs": {
            "name": "get_logs",
            "location": 44,
            "return": [],
            "arguments": {
                "web3": [],
                "addresses": [],
                "fromBlock": [],
                "toBlock": []
            }
        },
        "get_events": {
            "name": "get_events",
            "location": 54,
            "return": [],
            "arguments": {
                "web3": [],
                "topic_index": [],
                "fromBlock": [],
                "toBlock": []
            }
        },
        "hexlify": {
            "name": "hexlify",
            "location": 59,
            "return": [],
            "arguments": {
                "d": []
            }
        },
        "bytesArgsToHex": {
            "name": "bytesArgsToHex",
            "location": 63,
            "return": [],
            "arguments": {
                "args": []
            }
        },
        "insert_event": {
            "name": "insert_event",
            "location": 70,
            "return": [],
            "arguments": {
                "cur": [],
                "event": []
            }
        },
        "insert_graph_feed_updates": {
            "name": "insert_graph_feed_updates",
            "location": 102,
            "return": [],
            "arguments": {
                "cur": [],
                "feed_updates": []
            }
        },
        "insert_events": {
            "name": "insert_events",
            "location": 125,
            "return": [],
            "arguments": {
                "conn": [],
                "events": []
            }
        },
        "event_blocknumbers": {
            "name": "event_blocknumbers",
            "location": 131,
            "return": [],
            "arguments": {
                "events": []
            }
        },
        "connect": {
            "name": "connect",
            "location": 136,
            "return": [],
            "arguments": {
                "dsn": []
            }
        },
        "enrich_events": {
            "name": "enrich_events",
            "location": 140,
            "return": [],
            "arguments": {
                "events": [],
                "blocks": []
            }
        },
        "insert_sync_entry": {
            "name": "insert_sync_entry",
            "location": 149,
            "return": [],
            "arguments": {
                "conn": [],
                "syncid": [],
                "addresses": [],
                "start_block": []
            }
        },
        "ensure_sync_entry": {
            "name": "ensure_sync_entry",
            "location": 164,
            "return": [],
            "arguments": {
                "conn": [],
                "syncid": [],
                "start_block": []
            }
        },
        "ensure_default_entry": {
            "name": "ensure_default_entry",
            "location": 189,
            "return": [],
            "arguments": {
                "conn": [],
                "start_block": []
            }
        },
        "delete_events": {
            "name": "delete_events",
            "location": 193,
            "return": [],
            "arguments": {
                "conn": [],
                "fromBlock": [],
                "addresses": []
            }
        },
        "filter_events_for_graph": {
            "name": "filter_events_for_graph",
            "location": 205,
            "return": [],
            "arguments": {
                "events": []
            }
        },
        "build_graph_update_from_row": {
            "name": "build_graph_update_from_row",
            "location": 219,
            "return": [],
            "arguments": {
                "row": []
            }
        },
        "build_event_from_row": {
            "name": "build_event_from_row",
            "location": 228,
            "return": [],
            "arguments": {
                "row": []
            }
        },
        "null_replacing_graph_update": {
            "name": "null_replacing_graph_update",
            "location": 244,
            "return": [],
            "arguments": {
                "event": []
            }
        },
        "runsync": {
            "name": "runsync",
            "location": 557,
            "return": [],
            "arguments": {
                "jsonrpc": [],
                "waittime": [],
                "startblock": [],
                "required_confirmations": [],
                "syncid": [],
                "merge_with_syncid": []
            }
        },
        "do_importabi": {
            "name": "do_importabi",
            "location": 587,
            "return": [],
            "arguments": {
                "conn": [],
                "addresses": [],
                "contracts": []
            }
        },
        "importabi": {
            "name": "importabi",
            "location": 624,
            "return": [],
            "arguments": {
                "addresses": [],
                "contracts": []
            }
        },
        "do_createtables": {
            "name": "do_createtables",
            "location": 630,
            "return": [],
            "arguments": {
                "conn": []
            }
        },
        "warn_if_table_exists": {
            "name": "warn_if_table_exists",
            "location": 674,
            "return": [],
            "arguments": {
                "cur": [],
                "table_name": []
            }
        },
        "createtables": {
            "name": "createtables",
            "location": 689,
            "return": [],
            "arguments": {}
        },
        "do_droptables": {
            "name": "do_droptables",
            "location": 696,
            "return": [],
            "arguments": {
                "conn": [],
                "force": []
            }
        },
        "droptables": {
            "name": "droptables",
            "location": 708,
            "return": [],
            "arguments": {
                "force": []
            }
        },
        "Synchronizer.__init__": {
            "name": "__init__",
            "location": 285,
            "return": [],
            "arguments": {
                "self": [],
                "conn": [],
                "web3": [],
                "syncid": [],
                "required_confirmations": [],
                "merge_with_syncid": []
            }
        },
        "Synchronizer._load_data_from_sync": {
            "name": "_load_data_from_sync",
            "location": 296,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Synchronizer._sync_blocks": {
            "name": "_sync_blocks",
            "location": 314,
            "return": [],
            "arguments": {
                "self": [],
                "fromBlock": [],
                "toBlock": [],
                "last_confirmed_block_number": [],
                "latest_block_hash": []
            }
        },
        "Synchronizer.update_graph_feed": {
            "name": "update_graph_feed",
            "location": 341,
            "return": [],
            "arguments": {
                "self": [],
                "new_events": [],
                "old_events": []
            }
        },
        "Synchronizer.remove_finalized_events": {
            "name": "remove_finalized_events",
            "location": 353,
            "return": [],
            "arguments": {
                "self": [],
                "events": []
            }
        },
        "Synchronizer.get_graph_update_for_missing_events": {
            "name": "get_graph_update_for_missing_events",
            "location": 360,
            "return": [],
            "arguments": {
                "self": [],
                "missing_events": []
            }
        },
        "Synchronizer.find_replacing_graph_update_for_missing": {
            "name": "find_replacing_graph_update_for_missing",
            "location": 371,
            "return": [],
            "arguments": {
                "self": [],
                "event": []
            }
        },
        "Synchronizer.find_previous_trustline_graph_update": {
            "name": "find_previous_trustline_graph_update",
            "location": 387,
            "return": [],
            "arguments": {
                "self": [],
                "event": []
            }
        },
        "Synchronizer.feed_graph_updates": {
            "name": "feed_graph_updates",
            "location": 439,
            "return": [],
            "arguments": {
                "self": [],
                "graph_feed_updates": []
            }
        },
        "Synchronizer._try_merge": {
            "name": "_try_merge",
            "location": 445,
            "return": [],
            "arguments": {
                "self": [],
                "cur": []
            }
        },
        "Synchronizer.try_merge": {
            "name": "try_merge",
            "location": 492,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Synchronizer.sync_round": {
            "name": "sync_round",
            "location": 497,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Synchronizer.sync_loop": {
            "name": "sync_loop",
            "location": 527,
            "return": [],
            "arguments": {
                "self": [],
                "waittime": []
            }
        },
        "Synchronizer.sync_until_current": {
            "name": "sync_until_current",
            "location": 535,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "py-eth-index-master/src/ethindex/util.py": {
        "get_version": {
            "name": "get_version",
            "location": 4,
            "return": [],
            "arguments": {}
        }
    },
    "py-eth-index-master/src/ethindex/__init__.py": {},
    "py-eth-index-master/tests/conftest.py": {
        "contracts_json_path": {
            "name": "contracts_json_path",
            "location": 19,
            "return": [],
            "arguments": {}
        },
        "compiled_contracts": {
            "name": "compiled_contracts",
            "location": 24,
            "return": [],
            "arguments": {
                "contracts_json_path": [
                    "str"
                ]
            }
        },
        "postgresql_factory": {
            "name": "postgresql_factory",
            "location": 30,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {}
        },
        "postgresql": {
            "name": "postgresql",
            "location": 38,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "postgresql_factory": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ]
            }
        },
        "postgresql_dsn": {
            "name": "postgresql_dsn",
            "location": 50,
            "return": [],
            "arguments": {
                "postgresql": []
            }
        },
        "conn": {
            "name": "conn",
            "location": 55,
            "return": [],
            "arguments": {
                "postgresql_dsn": [
                    "str",
                    "bytearray"
                ]
            }
        },
        "ethereum_tester": {
            "name": "ethereum_tester",
            "location": 62,
            "return": [],
            "arguments": {}
        },
        "deploy_contract": {
            "name": "deploy_contract",
            "location": 68,
            "return": [],
            "arguments": {
                "web3": [
                    "str",
                    "float"
                ],
                "contract_interface": [
                    "str"
                ]
            }
        },
        "testenv": {
            "name": "testenv",
            "location": 91,
            "return": [
                "typing.Generator[TestEnv]"
            ],
            "arguments": {
                "ethereum_tester": [],
                "compiled_contracts": [],
                "tmpdir": [
                    "str"
                ],
                "contracts_json_path": [
                    "str",
                    "bool"
                ]
            }
        },
        "web3_eth_tester": {
            "name": "web3_eth_tester",
            "location": 131,
            "return": [],
            "arguments": {
                "testenv": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ]
            }
        },
        "make_address": {
            "name": "make_address",
            "location": 135,
            "return": [],
            "arguments": {
                "i": [
                    "int",
                    "str"
                ]
            }
        },
        "event_emitter": {
            "name": "event_emitter",
            "location": 159,
            "return": [
                "EventEmitter"
            ],
            "arguments": {
                "testenv": [
                    "str",
                    "int",
                    "list[dict[, ]]"
                ]
            }
        },
        "synchronizer": {
            "name": "synchronizer",
            "location": 164,
            "return": [
                "Synchronizer"
            ],
            "arguments": {
                "testenv": [
                    "typing.Callable[, ]",
                    "typing.Iterable[T]"
                ],
                "conn": [
                    "str"
                ]
            }
        },
        "EventEmitter.__init__": {
            "name": "__init__",
            "location": 142,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "testenv": [
                    "int",
                    "float"
                ]
            }
        },
        "EventEmitter.add_some_tranfer_events": {
            "name": "add_some_tranfer_events",
            "location": 146,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EventEmitter.add_unknown_abi_events": {
            "name": "add_unknown_abi_events",
            "location": 153,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "py-eth-index-master/tests/test_chain_reorg.py": {
        "fetch_events": {
            "name": "fetch_events",
            "location": 8,
            "return": [
                "list[]"
            ],
            "arguments": {
                "conn": []
            }
        },
        "test_reorg": {
            "name": "test_reorg",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "testenv": [
                    "str"
                ],
                "event_emitter": [],
                "conn": [],
                "synchronizer": []
            }
        },
        "test_reorg_shorter_chain": {
            "name": "test_reorg_shorter_chain",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "testenv": [
                    "str"
                ],
                "event_emitter": [],
                "conn": [],
                "synchronizer": []
            }
        },
        "test_sync_until_current": {
            "name": "test_sync_until_current",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "testenv": [
                    "bool"
                ],
                "event_emitter": [],
                "conn": [],
                "synchronizer": [],
                "caplog": []
            }
        }
    },
    "py-eth-index-master/tests/test_cli.py": {
        "find_tables": {
            "name": "find_tables",
            "location": 4,
            "return": [],
            "arguments": {
                "conn": []
            }
        },
        "test_createtables": {
            "name": "test_createtables",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "conn": []
            }
        },
        "test_droptables_without_force": {
            "name": "test_droptables_without_force",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "conn": [
                    "int"
                ]
            }
        },
        "test_droptables_with_force": {
            "name": "test_droptables_with_force",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "conn": []
            }
        },
        "test_importabi": {
            "name": "test_importabi",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "conn": [],
                "testenv": [
                    "str",
                    "bool"
                ]
            }
        },
        "test_importabi_replaces_abi": {
            "name": "test_importabi_replaces_abi",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "conn": [],
                "testenv": [
                    "str"
                ]
            }
        }
    },
    "py-eth-index-master/tests/test_events.py": {
        "test_get_events": {
            "name": "test_get_events",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {
                "testenv": [],
                "event_emitter": []
            }
        },
        "test_topic_index_from_db": {
            "name": "test_topic_index_from_db",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "testenv": [],
                "event_emitter": [],
                "conn": [
                    "bool"
                ]
            }
        },
        "test_should_not_crash_on_unknown_event": {
            "name": "test_should_not_crash_on_unknown_event",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "testenv": [],
                "event_emitter": [],
                "conn": []
            }
        }
    },
    "py-eth-index-master/tests/test_getlogs.py": {
        "test_getlogs": {
            "name": "test_getlogs",
            "location": 1,
            "return": [
                "None"
            ],
            "arguments": {
                "web3_eth_tester": []
            }
        }
    },
    "py-eth-index-master/tests/__init__.py": {}
}
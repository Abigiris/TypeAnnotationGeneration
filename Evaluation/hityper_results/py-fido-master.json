{
    "py-fido-master/setup.py": {},
    "py-fido-master/docs/source/conf.py": {
        "setup": {
            "name": "setup",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {
                "app": []
            }
        }
    },
    "py-fido-master/fido_u2f/constants.py": {},
    "py-fido-master/fido_u2f/device.py": {
        "device_as_client_dict": {
            "name": "device_as_client_dict",
            "location": 16,
            "return": [
                "dict[typing.Text, typing.Union[None,list[]]]"
            ],
            "arguments": {
                "device": [
                    "str",
                    "int"
                ]
            }
        },
        "filter_devices_by_app_id": {
            "name": "filter_devices_by_app_id",
            "location": 33,
            "return": [
                "typing.Generator[typing.Text]"
            ],
            "arguments": {
                "registered_devices": [
                    "str"
                ],
                "app_id": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "py-fido-master/fido_u2f/enums.py": {
        "U2FTransport.value": {
            "name": "value",
            "location": 19,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "U2FTransport.internal_name": {
            "name": "internal_name",
            "location": 23,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "U2FTransport.from_byte": {
            "name": "from_byte",
            "location": 27,
            "return": [
                "list[]"
            ],
            "arguments": {
                "byte": [
                    "int",
                    "None",
                    "float",
                    "str"
                ]
            }
        },
        "U2FTransport.to_byte": {
            "name": "to_byte",
            "location": 31,
            "return": [
                "int"
            ],
            "arguments": {
                "transports": [
                    "bytes",
                    "dict[, ]",
                    "list[str]"
                ]
            }
        },
        "U2FTransport._to_internal_int": {
            "name": "_to_internal_int",
            "location": 38,
            "return": [
                "int"
            ],
            "arguments": {
                "transports": [
                    "int",
                    "None"
                ]
            }
        },
        "U2FTransport._from_internal_int": {
            "name": "_from_internal_int",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "transports": [
                    "int"
                ]
            }
        }
    },
    "py-fido-master/fido_u2f/exceptions.py": {},
    "py-fido-master/fido_u2f/registration.py": {
        "U2FRegistrationManager.__init__": {
            "name": "__init__",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "app_id": [
                    "str",
                    "None",
                    "int"
                ]
            }
        },
        "U2FRegistrationManager.create_device_registration_model": {
            "name": "create_device_registration_model",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "U2FRegistrationManager.filter_devices_by_app_id": {
            "name": "filter_devices_by_app_id",
            "location": 44,
            "return": [],
            "arguments": {
                "self": [],
                "registered_devices": [
                    "bytes",
                    "typing.Callable[, ]",
                    "list[str]",
                    "str",
                    "dict[, ]"
                ]
            }
        },
        "U2FRegistrationManager.create_registration_challenge": {
            "name": "create_registration_challenge",
            "location": 49,
            "return": [
                "dict[typing.Text, list[dict[typing.Text, str]]]"
            ],
            "arguments": {
                "self": [],
                "session": [
                    "str",
                    "typing.Callable[, ]",
                    "dict[, ]",
                    "int",
                    "None"
                ],
                "registered_devices": [
                    "tuple[]"
                ]
            }
        },
        "U2FRegistrationManager.process_registration_response": {
            "name": "process_registration_response",
            "location": 72,
            "return": [],
            "arguments": {
                "self": [],
                "session": [
                    "str",
                    "None",
                    "typing.Any"
                ],
                "response_dict": [
                    "dict[, ]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "U2FRegistrationManager.verify_registration_data": {
            "name": "verify_registration_data",
            "location": 93,
            "return": [],
            "arguments": {
                "self": [],
                "response_dict": [],
                "challenge": [
                    "dict[str, typing.Any]",
                    "dict[, ]",
                    "typing.Callable[, ]"
                ]
            }
        },
        "RegistrationData.from_base64": {
            "name": "from_base64",
            "location": 119,
            "return": [],
            "arguments": {
                "cls": [
                    "dict[, ]",
                    "dict[str, typing.Any]",
                    "bytes",
                    "typing.MutableMapping"
                ],
                "base64_data": [
                    "dict[, ]",
                    "dict[str, typing.Any]",
                    "bytes",
                    "typing.MutableMapping"
                ]
            }
        },
        "RegistrationData.__init__": {
            "name": "__init__",
            "location": 122,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "RegistrationData.get_x509_certificate": {
            "name": "get_x509_certificate",
            "location": 133,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RegistrationData.verify": {
            "name": "verify",
            "location": 136,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "app_param": [],
                "chal_param": [
                    "dict[, ]"
                ]
            }
        },
        "RegistrationData.get_supported_transports": {
            "name": "get_supported_transports",
            "location": 154,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "py-fido-master/fido_u2f/utils.py": {
        "get_random_challenge": {
            "name": "get_random_challenge",
            "location": 18,
            "return": [],
            "arguments": {}
        },
        "standardise_client_data": {
            "name": "standardise_client_data",
            "location": 22,
            "return": [
                "str",
                "dict[str, typing.Any]"
            ],
            "arguments": {
                "raw_client_data": [
                    "str",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "load_client_data": {
            "name": "load_client_data",
            "location": 34,
            "return": [],
            "arguments": {
                "raw_client_data": [
                    "str",
                    "dict[, ]"
                ]
            }
        },
        "validate_client_data": {
            "name": "validate_client_data",
            "location": 46,
            "return": [
                "dict[str, typing.Union[typing.Any,typing.Any,typing.Any,typing.Any]]",
                "list[dict[str, str]]",
                "dict[typing.Any, list[typing.Any]]",
                "list[]"
            ],
            "arguments": {
                "raw_client_data": [
                    "str",
                    "int"
                ],
                "request_type": [
                    "str",
                    "dict[str, typing.Any]",
                    "typing.Mapping",
                    "None"
                ],
                "app_id": [
                    "str",
                    "dict[, ]",
                    "None"
                ],
                "expected_challenge": [
                    "str",
                    "list[dict[, ]]",
                    "dict[, ]",
                    "dict[str, list[bytes]]"
                ]
            }
        },
        "sha_256": {
            "name": "sha_256",
            "location": 65,
            "return": [],
            "arguments": {
                "data": [
                    "bytes",
                    "dict[, ]",
                    "dict[str, str]",
                    "list[str]"
                ]
            }
        },
        "pop_bytes": {
            "name": "pop_bytes",
            "location": 71,
            "return": [
                "bytes"
            ],
            "arguments": {
                "data": [
                    "bytes"
                ],
                "l": [
                    "int",
                    "bytes"
                ]
            }
        },
        "fix_invalid_yubico_certs": {
            "name": "fix_invalid_yubico_certs",
            "location": 77,
            "return": [
                "str",
                "int",
                "dict[, ]",
                "list[int]",
                "list[list[int]]"
            ],
            "arguments": {
                "der": [
                    "str"
                ]
            }
        },
        "parse_tlv_encoded_length": {
            "name": "parse_tlv_encoded_length",
            "location": 85,
            "return": [
                "int"
            ],
            "arguments": {
                "data": [
                    "list[str]",
                    "tuple[typing.Union[str,str]]"
                ]
            }
        },
        "websafe_decode": {
            "name": "websafe_decode",
            "location": 107,
            "return": [],
            "arguments": {
                "data": [
                    "bytes",
                    "dict[, ]",
                    "str",
                    "int"
                ]
            }
        },
        "websafe_encode": {
            "name": "websafe_encode",
            "location": 117,
            "return": [],
            "arguments": {
                "data": [
                    "int",
                    "float",
                    "str",
                    "bytes"
                ]
            }
        },
        "abstract_attribute": {
            "name": "abstract_attribute",
            "location": 146,
            "return": [
                "_AbstractAttribute"
            ],
            "arguments": {}
        },
        "_AbstractAttribute.__get__": {
            "name": "__get__",
            "location": 125,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "str",
                    "float"
                ],
                "type": []
            }
        }
    },
    "py-fido-master/fido_u2f/verification.py": {
        "U2FSigningManager.__init__": {
            "name": "__init__",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "app_id": [
                    "str",
                    "None",
                    "int"
                ]
            }
        },
        "U2FSigningManager.update_device_registration_counter": {
            "name": "update_device_registration_counter",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "U2FSigningManager.filter_devices_by_app_id": {
            "name": "filter_devices_by_app_id",
            "location": 53,
            "return": [],
            "arguments": {
                "self": [],
                "registered_devices": [
                    "bytes",
                    "typing.Callable[, ]",
                    "list[str]",
                    "str",
                    "dict[, ]"
                ]
            }
        },
        "U2FSigningManager.create_signing_challenge": {
            "name": "create_signing_challenge",
            "location": 58,
            "return": [
                "dict[typing.Text, typing.Union[str,list[]]]"
            ],
            "arguments": {
                "self": [],
                "session": [
                    "str",
                    "typing.Callable[, ]",
                    "dict[, ]",
                    "int",
                    "None"
                ],
                "registered_devices": [
                    "dict[str, typing.Any]",
                    "None",
                    "typing.Mapping",
                    "str",
                    "dict[, ]"
                ]
            }
        },
        "U2FSigningManager.process_signing_response": {
            "name": "process_signing_response",
            "location": 71,
            "return": [],
            "arguments": {
                "self": [],
                "session": [
                    "typing.Any",
                    "None",
                    "dict[str, str]",
                    "int"
                ],
                "response_dict": [
                    "dict[, ]",
                    "dict[str, typing.Any]"
                ],
                "registered_devices": [
                    "tuple[]"
                ]
            }
        },
        "U2FSigningManager.get_key_by_handle": {
            "name": "get_key_by_handle",
            "location": 88,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": [],
                "registered_keys": [
                    "str",
                    "list[str]"
                ],
                "key_handle": [
                    "str",
                    "None"
                ]
            }
        },
        "U2FSigningManager.verify_signature_data": {
            "name": "verify_signature_data",
            "location": 96,
            "return": [
                "typing.Literal",
                "dict[, ]",
                "dict[str, str]"
            ],
            "arguments": {
                "self": [],
                "response_dict": [
                    "dict[, ]"
                ],
                "challenge": [
                    "dict[str, typing.Any]",
                    "dict[, ]"
                ],
                "device": [
                    "bytes",
                    "typing.Sequence[]",
                    "str",
                    "dict[, ]"
                ]
            }
        },
        "SignatureData.from_base64": {
            "name": "from_base64",
            "location": 125,
            "return": [],
            "arguments": {
                "cls": [
                    "dict[, ]",
                    "dict[str, typing.Any]",
                    "bytes",
                    "typing.MutableMapping"
                ],
                "base64_data": [
                    "dict[, ]",
                    "dict[str, typing.Any]",
                    "bytes",
                    "typing.MutableMapping"
                ]
            }
        },
        "SignatureData.__init__": {
            "name": "__init__",
            "location": 128,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "SignatureData.verify": {
            "name": "verify",
            "location": 135,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "app_param": [],
                "chal_param": [],
                "der_pubkey": [
                    "dict[str, typing.Sequence[typing.Any]]",
                    "tuple[typing.Union[paradigm.models.Base,tests.utils.Kwargs]]",
                    "bytes",
                    "bool"
                ]
            }
        }
    },
    "py-fido-master/fido_u2f/_typing.py": {},
    "py-fido-master/fido_u2f/__init__.py": {},
    "py-fido-master/fido_u2f/sample/flask.py": {
        "_": {
            "name": "_",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "hello": {
            "name": "hello",
            "location": 45,
            "return": [
                "typing.Text"
            ],
            "arguments": {}
        },
        "get_register_js": {
            "name": "get_register_js",
            "location": 79,
            "return": [],
            "arguments": {}
        },
        "do_register_start": {
            "name": "do_register_start",
            "location": 84,
            "return": [
                "typing.Text"
            ],
            "arguments": {}
        },
        "do_register_verify": {
            "name": "do_register_verify",
            "location": 118,
            "return": [
                "typing.Text"
            ],
            "arguments": {}
        },
        "get_login_js": {
            "name": "get_login_js",
            "location": 131,
            "return": [],
            "arguments": {}
        },
        "do_login_start": {
            "name": "do_login_start",
            "location": 136,
            "return": [
                "typing.Text"
            ],
            "arguments": {}
        },
        "do_login_verify": {
            "name": "do_login_verify",
            "location": 171,
            "return": [
                "typing.Text"
            ],
            "arguments": {}
        },
        "U2FManager.__init__": {
            "name": "__init__",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "U2FManager.create_device_registration_model": {
            "name": "create_device_registration_model",
            "location": 27,
            "return": [
                "Device"
            ],
            "arguments": {
                "self": []
            }
        },
        "U2FManager.update_device_registration_counter": {
            "name": "update_device_registration_counter",
            "location": 36,
            "return": [
                "float",
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "device": [
                    "float",
                    "str",
                    "int"
                ],
                "counter": [
                    "float",
                    "str",
                    "int"
                ]
            }
        }
    },
    "py-fido-master/fido_u2f/sample/tables.py": {
        "User.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "None",
                    "str",
                    "dict[str, typing.Any]",
                    "list[str]",
                    "dict[, ]"
                ]
            }
        },
        "User.__repr__": {
            "name": "__repr__",
            "location": 21,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "Device.u2f_transports": {
            "name": "u2f_transports",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "transports": []
            }
        }
    },
    "py-fido-master/fido_u2f/sample/__init__.py": {},
    "py-fido-master/fido_u2f/tests/test_response_parse_validate.py": {},
    "py-fido-master/fido_u2f/tests/test_utils.py": {
        "test_sha_256": {
            "name": "test_sha_256",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_pop_bytes": {
            "name": "test_pop_bytes",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "Test_parse_tlv_encoded_length.test_zero_length": {
            "name": "test_zero_length",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Test_parse_tlv_encoded_length.test_zero_length_with_flag": {
            "name": "test_zero_length_with_flag",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Test_parse_tlv_encoded_length.test_length_short_form": {
            "name": "test_length_short_form",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Test_parse_tlv_encoded_length.test_length_long_form": {
            "name": "test_length_long_form",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Test_parse_tlv_encoded_length.test_length_really_long_form": {
            "name": "test_length_really_long_form",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "py-fido-master/fido_u2f/tests/__init__.py": {}
}
{
    "py-toolbox-master/setup.py": {
        "read": {
            "name": "read",
            "location": 5,
            "return": [],
            "arguments": {
                "fname": []
            }
        },
        "get_version": {
            "name": "get_version",
            "location": 8,
            "return": [],
            "arguments": {}
        }
    },
    "py-toolbox-master/docs/conf.py": {},
    "py-toolbox-master/pytb/config.py": {
        "Config.get_config_file_locations": {
            "name": "get_config_file_locations",
            "location": 57,
            "return": [
                "list[]"
            ],
            "arguments": {}
        },
        "Config.__init__": {
            "name": "__init__",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "verbose": [
                    "bool"
                ]
            }
        },
        "Config.reload": {
            "name": "reload",
            "location": 99,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Config.getlist": {
            "name": "getlist",
            "location": 112,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "py-toolbox-master/pytb/core.py": {
        "init": {
            "name": "init",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "verbose": [
                    "bool"
                ],
                "reinitalisation_attempt_ok": [
                    "bool"
                ]
            }
        }
    },
    "py-toolbox-master/pytb/importlib.py": {
        "ModuleLoader.__init__": {
            "name": "__init__",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "verbose": [
                    "bool"
                ]
            }
        },
        "ModuleLoader.find_spec": {
            "name": "find_spec",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fullname": [
                    "str"
                ],
                "path": [
                    "str"
                ],
                "target": [
                    "None",
                    "list[str]",
                    "str",
                    "tuple[str]",
                    "list[]"
                ]
            }
        },
        "ModuleLoader.create_module": {
            "name": "create_module",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "spec": [
                    "str",
                    "list[int]",
                    "list[dict[str, typing.Any]]",
                    "bool"
                ]
            }
        },
        "ModuleLoader.exec_module": {
            "name": "exec_module",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "module": [
                    "str",
                    "typing.Callable[, ]",
                    "None"
                ]
            }
        },
        "ModuleLoader.__enter__": {
            "name": "__enter__",
            "location": 101,
            "return": [
                "ModuleLoader"
            ],
            "arguments": {
                "self": []
            }
        },
        "ModuleLoader.__exit__": {
            "name": "__exit__",
            "location": 105,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "exc_type": [
                    "typing.Type",
                    "None",
                    "BaseException"
                ],
                "exc_value": [
                    "typing.Type",
                    "None",
                    "BaseException"
                ],
                "traceback": [
                    "typing.Type",
                    "None",
                    "BaseException"
                ]
            }
        },
        "ModuleLoader.install": {
            "name": "install",
            "location": 113,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ModuleLoader.uninstall": {
            "name": "uninstall",
            "location": 134,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ModuleLoader.install_hook": {
            "name": "install_hook",
            "location": 160,
            "return": [],
            "arguments": {
                "cls": [
                    "typing.Type",
                    "float"
                ]
            }
        },
        "NoModuleCacheContext.__init__": {
            "name": "__init__",
            "location": 330,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "verbose": [
                    "bool"
                ],
                "max_depth": [
                    "None",
                    "int"
                ]
            }
        },
        "NoModuleCacheContext.__enter__": {
            "name": "__enter__",
            "location": 340,
            "return": [
                "NoModuleCacheContext"
            ],
            "arguments": {
                "self": []
            }
        },
        "NoModuleCacheContext.__exit__": {
            "name": "__exit__",
            "location": 350,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "exc_type": [
                    "typing.Type",
                    "None",
                    "BaseException"
                ],
                "exc_value": [
                    "typing.Type",
                    "None",
                    "BaseException"
                ],
                "traceback": [
                    "typing.Type",
                    "None",
                    "BaseException"
                ]
            }
        },
        "NoModuleCacheContext.__call__": {
            "name": "__call__",
            "location": 360,
            "return": [
                "NoModuleCacheContext"
            ],
            "arguments": {
                "self": [],
                "verbose": [
                    "bool"
                ]
            }
        },
        "NotebookLoader.__init__": {
            "name": "__init__",
            "location": 387,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "verbose": [
                    "bool"
                ]
            }
        },
        "NotebookLoader._find_notebook": {
            "name": "_find_notebook",
            "location": 394,
            "return": [
                "str",
                "None"
            ],
            "arguments": {
                "fullname": [
                    "str"
                ],
                "path": [
                    "str"
                ]
            }
        },
        "NotebookLoader.find_spec": {
            "name": "find_spec",
            "location": 409,
            "return": [
                "None",
                "ModuleSpec"
            ],
            "arguments": {
                "self": [],
                "fullname": [
                    "str",
                    "dict[, ]"
                ],
                "path": [
                    "str",
                    "dict[, ]",
                    "None"
                ],
                "target": [
                    "None",
                    "str"
                ]
            }
        },
        "NotebookLoader.exec_module": {
            "name": "exec_module",
            "location": 425,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "module": [
                    "str",
                    "bytes",
                    "typing.IO",
                    "typing.Type"
                ]
            }
        },
        "NoModuleCacheContext.CachlessImporter.__init__": {
            "name": "__init__",
            "location": 229,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "import_fun": [],
                "verbose": [
                    "bool"
                ],
                "max_depth": []
            }
        },
        "NoModuleCacheContext.CachlessImporter.__call__": {
            "name": "__call__",
            "location": 245,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "globals": [
                    "None"
                ],
                "locals": [
                    "None"
                ],
                "fromlist": [
                    "None"
                ],
                "level": [
                    "int"
                ]
            }
        },
        "NoModuleCacheContext.CachlessImporter.maybe_reload_module": {
            "name": "maybe_reload_module",
            "location": 309,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fullname": []
            }
        },
        "NoModuleCacheContext.CachlessImporter.flush_reload_stack": {
            "name": "flush_reload_stack",
            "location": 322,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "py-toolbox-master/pytb/io.py": {
        "_permissive_open": {
            "name": "_permissive_open",
            "location": 86,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "file": [
                    "typing.TextIO",
                    "typing.BinaryIO",
                    "str",
                    "typing.IO"
                ],
                "mode": [
                    "typing.Text"
                ]
            }
        },
        "_redirect_stream": {
            "name": "_redirect_stream",
            "location": 130,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "file": [
                    "str",
                    "list[str]",
                    "None"
                ],
                "module": [
                    "str",
                    "list[int]",
                    "dict[str, typing.Any]",
                    "list[str]"
                ],
                "attr": [
                    "str",
                    "list[int]",
                    "dict[str, typing.Any]",
                    "list[str]"
                ]
            }
        },
        "redirected_stdout": {
            "name": "redirected_stdout",
            "location": 144,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "file": [
                    "str",
                    "typing.IO"
                ]
            }
        },
        "redirected_stderr": {
            "name": "redirected_stderr",
            "location": 166,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "file": [
                    "str",
                    "typing.IO"
                ]
            }
        },
        "redirected_stdstreams": {
            "name": "redirected_stdstreams",
            "location": 177,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "file": [
                    "str"
                ]
            }
        },
        "mirrored_stdout": {
            "name": "mirrored_stdout",
            "location": 189,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "file": [
                    "str",
                    "list[str]"
                ]
            }
        },
        "mirrored_stdstreams": {
            "name": "mirrored_stdstreams",
            "location": 217,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "file": [
                    "str",
                    "list[str]"
                ]
            }
        },
        "render_text": {
            "name": "render_text",
            "location": 231,
            "return": [],
            "arguments": {
                "text": [
                    "str"
                ],
                "maxwidth": [
                    "int"
                ]
            }
        },
        "Tee.__init__": {
            "name": "__init__",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Tee.write": {
            "name": "write",
            "location": 39,
            "return": [],
            "arguments": {
                "self": [],
                "text": [
                    "str",
                    "bytes"
                ]
            }
        },
        "Tee.flush": {
            "name": "flush",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Tee.close": {
            "name": "close",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "py-toolbox-master/pytb/itertools.py": {
        "named_product": {
            "name": "named_product",
            "location": 12,
            "return": [],
            "arguments": {
                "values": [],
                "repeat": [],
                "safe_copy": []
            }
        }
    },
    "py-toolbox-master/pytb/notification.py": {
        "_get_caller_code_fragment": {
            "name": "_get_caller_code_fragment",
            "location": 40,
            "return": [
                "str"
            ],
            "arguments": {
                "caller_frame": [
                    "list[str]",
                    "bool",
                    "list[list[typing.Any]]",
                    "None",
                    "str"
                ],
                "context_size": [
                    "int"
                ]
            }
        },
        "_get_caller_frame": {
            "name": "_get_caller_frame",
            "location": 132,
            "return": [],
            "arguments": {
                "level": [
                    "bool"
                ]
            }
        },
        "_get_caller_code_fragment.get_indentation": {
            "name": "get_indentation",
            "location": 87,
            "return": [
                "int"
            ],
            "arguments": {
                "line": []
            }
        },
        "Notify.__init__": {
            "name": "__init__",
            "location": 166,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "task": [
                    "str",
                    "set[]",
                    "list[tuple[typing.Union[int,int]]]",
                    "bool",
                    "list[list[str]]"
                ],
                "render_outputs": [
                    "bool"
                ]
            }
        },
        "Notify.now": {
            "name": "now",
            "location": 174,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "typing.Type",
                    "typing.Hashable"
                ]
            }
        },
        "Notify.when_done": {
            "name": "when_done",
            "location": 187,
            "return": [
                "typing.Generator[]",
                "None"
            ],
            "arguments": {
                "self": [],
                "only_if_error": [
                    "bool"
                ],
                "capture_output": [
                    "bool"
                ],
                "caller_frame": [
                    "None",
                    "float"
                ],
                "reason_prefix": [
                    "typing.Text"
                ]
            }
        },
        "Notify.every": {
            "name": "every",
            "location": 271,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "self": [],
                "interval": [
                    "str",
                    "typing.Iterable[float]",
                    "int"
                ],
                "incremental_output": [
                    "bool"
                ],
                "caller_frame": [
                    "None",
                    "bool",
                    "str"
                ]
            }
        },
        "Notify.when_stalled": {
            "name": "when_stalled",
            "location": 322,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "self": [],
                "timeout": [
                    "str",
                    "float",
                    "int"
                ],
                "capture_output": [
                    "bool"
                ],
                "caller_frame": [
                    "None",
                    "bool",
                    "str",
                    "tuple[typing.Union[str,str]]"
                ]
            }
        },
        "Notify.on_iteration_of": {
            "name": "on_iteration_of",
            "location": 405,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "self": [],
                "iterable": [],
                "capture_output": [
                    "bool"
                ],
                "after_every": [
                    "int"
                ],
                "caller_frame": [
                    "None",
                    "int",
                    "float",
                    "list[str]"
                ]
            }
        },
        "Notify._send_notification": {
            "name": "_send_notification",
            "location": 453,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "task": [
                    "str",
                    "None",
                    "Exception",
                    "list[list[str]]",
                    "bool"
                ],
                "reason": [
                    "str",
                    "None",
                    "Exception",
                    "list[list[str]]",
                    "bool"
                ],
                "caller_frame": [
                    "str",
                    "None",
                    "Exception",
                    "list[list[str]]",
                    "bool"
                ],
                "output": [
                    "str",
                    "None",
                    "Exception",
                    "list[list[str]]",
                    "bool"
                ],
                "exception": [
                    "None",
                    "str",
                    "Exception",
                    "list[list[str]]",
                    "bool"
                ]
            }
        },
        "NotifyViaEmail.__init__": {
            "name": "__init__",
            "location": 523,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "task": [
                    "str"
                ],
                "email_addresses": [
                    "None",
                    "typing.Sequence[str]",
                    "str",
                    "list[str]"
                ],
                "sender": [
                    "None",
                    "dict[str, str]",
                    "str"
                ],
                "smtp_host": [
                    "None",
                    "dict[str, typing.Any]",
                    "dict[int, int]",
                    "dict[, ]",
                    "str",
                    "dict[str, str]"
                ],
                "smtp_port": [
                    "None",
                    "int",
                    "str",
                    "dict[str, typing.Any]",
                    "Exception"
                ],
                "smtp_ssl": [
                    "None",
                    "str",
                    "int",
                    "dict[str, typing.Any]",
                    "dict[, ]"
                ]
            }
        },
        "NotifyViaEmail._create_message": {
            "name": "_create_message",
            "location": 570,
            "return": [
                "EmailMessage"
            ],
            "arguments": {
                "self": [],
                "recipient": [
                    "int",
                    "str",
                    "typing.Mapping"
                ],
                "task": [
                    "int",
                    "str",
                    "typing.Mapping"
                ],
                "reason": [
                    "int",
                    "str",
                    "typing.Mapping"
                ],
                "caller_frame": [
                    "None",
                    "float",
                    "list[int]"
                ],
                "output": [
                    "str",
                    "int",
                    "tuple[]",
                    "bytes"
                ],
                "exception": [
                    "None",
                    "str",
                    "bytes",
                    "int"
                ]
            }
        },
        "NotifyViaEmail._send_notification": {
            "name": "_send_notification",
            "location": 619,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "task": [
                    "str",
                    "typing.Sequence[str]",
                    "bytes"
                ],
                "reason": [
                    "str",
                    "typing.Sequence[str]",
                    "bytes"
                ],
                "caller_frame": [
                    "str",
                    "typing.Sequence[str]",
                    "bytes"
                ],
                "output": [
                    "str",
                    "None",
                    "typing.Sequence[str]"
                ],
                "exception": [
                    "None",
                    "str"
                ]
            }
        },
        "NotifyViaStream.__init__": {
            "name": "__init__",
            "location": 680,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "task": [
                    "str",
                    "int",
                    "dict[, ]"
                ],
                "stream": [
                    "bool",
                    "str",
                    "float"
                ]
            }
        },
        "NotifyViaStream._send_notification": {
            "name": "_send_notification",
            "location": 684,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "task": [
                    "str",
                    "float",
                    "None",
                    "tuple[typing.Union[str,int]]",
                    "bytes",
                    "dict[, ]"
                ],
                "reason": [
                    "str",
                    "float",
                    "None",
                    "tuple[typing.Union[str,int]]",
                    "bytes",
                    "dict[, ]"
                ],
                "caller_frame": [
                    "None",
                    "bool",
                    "list[typing.Any]",
                    "typing.Callable[[], typing.Any]",
                    "typing.Any",
                    "tuple[typing.Union[str,str]]"
                ],
                "output": [
                    "str"
                ],
                "exception": [
                    "None",
                    "bool",
                    "str",
                    "typing.TextIO",
                    "typing.BinaryIO"
                ]
            }
        },
        "Timer.__init__": {
            "name": "__init__",
            "location": 725,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "target": [
                    "int",
                    "float"
                ]
            }
        },
        "Timer.stop": {
            "name": "stop",
            "location": 741,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Timer.call_every": {
            "name": "call_every",
            "location": 754,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "interval": [
                    "float"
                ]
            }
        },
        "Timer.run": {
            "name": "run",
            "location": 771,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Notify.every.send_progress": {
            "name": "send_progress",
            "location": 300,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "Notify.when_stalled.check_stalled": {
            "name": "check_stalled",
            "location": 368,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "py-toolbox-master/pytb/rdb.py": {
        "_run_mainsafe": {
            "name": "_run_mainsafe",
            "location": 19,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {}
        },
        "set_trace": {
            "name": "set_trace",
            "location": 163,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "install_hook": {
            "name": "install_hook",
            "location": 194,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "uninstall_hook": {
            "name": "uninstall_hook",
            "location": 203,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "Rdb.__init__": {
            "name": "__init__",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "host": [
                    "None",
                    "str",
                    "dict[, ]",
                    "bool"
                ],
                "port": [
                    "None",
                    "int",
                    "str",
                    "Exception"
                ],
                "patch_stdio": [
                    "None",
                    "bool"
                ]
            }
        },
        "Rdb._flush_outputs": {
            "name": "_flush_outputs",
            "location": 113,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Rdb._cleanup": {
            "name": "_cleanup",
            "location": 120,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Rdb.do_continue": {
            "name": "do_continue",
            "location": 138,
            "return": [],
            "arguments": {
                "self": [],
                "arg": [
                    "float",
                    "str",
                    "int"
                ]
            }
        },
        "Rdb.do_EOF": {
            "name": "do_EOF",
            "location": 144,
            "return": [],
            "arguments": {
                "self": [],
                "arg": [
                    "float",
                    "str",
                    "int"
                ]
            }
        },
        "Rdb.do_quit": {
            "name": "do_quit",
            "location": 148,
            "return": [],
            "arguments": {
                "self": [],
                "arg": [
                    "float",
                    "str",
                    "int"
                ]
            }
        },
        "Rdb._runscript": {
            "name": "_runscript",
            "location": 154,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "str"
                ]
            }
        },
        "Rdb._runmodule": {
            "name": "_runmodule",
            "location": 158,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "module_name": [
                    "str"
                ]
            }
        },
        "RdbClient.__init__": {
            "name": "__init__",
            "location": 225,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "host": [
                    "None",
                    "dict[, ]",
                    "typing.IO",
                    "typing.TextIO"
                ],
                "port": [
                    "None",
                    "typing.Callable[, ]",
                    "bool",
                    "typing.Iterable[T]",
                    "str"
                ]
            }
        },
        "RdbClient._handle_io": {
            "name": "_handle_io",
            "location": 265,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "stream": [
                    "bytes",
                    "str"
                ],
                "mask": [
                    "int"
                ]
            }
        }
    },
    "py-toolbox-master/pytb/schedule.py": {
        "parse_cron_spec": {
            "name": "parse_cron_spec",
            "location": 95,
            "return": [],
            "arguments": {
                "spec": [],
                "max_value": [],
                "min_value": []
            }
        },
        "at": {
            "name": "at",
            "location": 165,
            "return": [],
            "arguments": {
                "minute": [],
                "hour": [],
                "day": [],
                "month": [],
                "weekday": []
            }
        },
        "every": {
            "name": "every",
            "location": 220,
            "return": [],
            "arguments": {
                "interval": [],
                "start_at": []
            }
        },
        "Schedule.__init__": {
            "name": "__init__",
            "location": 29,
            "return": [],
            "arguments": {
                "self": [],
                "target": [],
                "interval": []
            }
        },
        "Schedule.start_schedule": {
            "name": "start_schedule",
            "location": 38,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Schedule.run": {
            "name": "run",
            "location": 47,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Schedule.next_schedule": {
            "name": "next_schedule",
            "location": 69,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Schedule.stop": {
            "name": "stop",
            "location": 75,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Schedule.__call__": {
            "name": "__call__",
            "location": 88,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "at.get_next_due_date": {
            "name": "get_next_due_date",
            "location": 183,
            "return": [],
            "arguments": {}
        },
        "at.schedule_decorator": {
            "name": "schedule_decorator",
            "location": 214,
            "return": [],
            "arguments": {
                "fun": []
            }
        },
        "every.get_next_due_date": {
            "name": "get_next_due_date",
            "location": 235,
            "return": [],
            "arguments": {}
        },
        "every.schedule_decorator": {
            "name": "schedule_decorator",
            "location": 243,
            "return": [],
            "arguments": {
                "fun": []
            }
        }
    },
    "py-toolbox-master/pytb/__init__.py": {},
    "py-toolbox-master/pytb/__main__.py": {
        "to_stream": {
            "name": "to_stream",
            "location": 24,
            "return": [],
            "arguments": {
                "stream_name": [
                    "str"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "main.run_task": {
            "name": "run_task",
            "location": 306,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "py-toolbox-master/pytb/test/test_config.py": {},
    "py-toolbox-master/pytb/test/test_importlib.py": {
        "TestNotebookLoader.test_load_notebook": {
            "name": "test_load_notebook",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestNotebookLoader.test_transform_ipython_magic": {
            "name": "test_transform_ipython_magic",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestNoModuleCache.test_reload_on_import": {
            "name": "test_reload_on_import",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "py-toolbox-master/pytb/test/test_io.py": {
        "TestTeeManifold.test_tee_piece": {
            "name": "test_tee_piece",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTeeManifold.test_tee_piece_closes_files": {
            "name": "test_tee_piece_closes_files",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestIORedirection.test__permissive_open_does_not_close_unopened": {
            "name": "test__permissive_open_does_not_close_unopened",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestIORedirection.test__permissive_open_does_close_stringfile": {
            "name": "test__permissive_open_does_close_stringfile",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestIORedirection.test__redirect_stream": {
            "name": "test__redirect_stream",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestIORedirection.test__redirect_stream_restores_original_state": {
            "name": "test__redirect_stream_restores_original_state",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestIORedirection.test_mirrored_stdstreams": {
            "name": "test_mirrored_stdstreams",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "py-toolbox-master/pytb/test/test_itertools.py": {
        "TestNamedProduct.test_does_safcopy": {
            "name": "test_does_safcopy",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestNamedProduct.test_does_safcopy.test": {
            "name": "test",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "a": [],
                "b": []
            }
        }
    },
    "py-toolbox-master/pytb/test/test_notification.py": {},
    "py-toolbox-master/pytb/test/test_schedule.py": {
        "TestNamedProduct.test_does_safcopy": {
            "name": "test_does_safcopy",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestNamedProduct.test_does_safcopy.test": {
            "name": "test",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "a": [],
                "b": []
            }
        }
    },
    "py-toolbox-master/pytb/test/fixtures/random_module.py": {}
}
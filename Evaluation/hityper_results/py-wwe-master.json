{
    "py-wwe-master/setup.py": {},
    "py-wwe-master/tests/conftest.py": {
        "mock_config": {
            "name": "mock_config",
            "location": 7,
            "return": [
                "dict[typing.Text, dict[typing.Text, typing.Text]]"
            ],
            "arguments": {}
        },
        "mock_entry": {
            "name": "mock_entry",
            "location": 17,
            "return": [
                "dict[typing.Text, typing.Union[bool,typing.Text,list[typing.Text]]]"
            ],
            "arguments": {}
        }
    },
    "py-wwe-master/tests/test_cli.py": {
        "test_main": {
            "name": "test_main",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_end_date": {
            "name": "test_end_date",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "arguments": [
                    "typing.Callable[, ]"
                ]
            }
        }
    },
    "py-wwe-master/tests/test_log.py": {
        "verbose_on": {
            "name": "verbose_on",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_format_log": {
            "name": "test_format_log",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "mock_entry": [
                    "bool"
                ],
                "verbose_on": [
                    "bool",
                    "dict[, ]",
                    "dict[str, typing.Any]",
                    "str"
                ]
            }
        }
    },
    "py-wwe-master/tests/test_toggl.py": {
        "test_empty": {
            "name": "test_empty",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {
                "mock_config": []
            }
        }
    },
    "py-wwe-master/tests/__debug__.py": {},
    "py-wwe-master/tests/__init__.py": {},
    "py-wwe-master/wwe/cli.py": {
        "partition_days_between": {
            "name": "partition_days_between",
            "location": 19,
            "return": [
                "typing.Generator[tuple[typing.Union[str,str]]]"
            ],
            "arguments": {
                "start_date": [
                    "str"
                ],
                "end_date": [
                    "str"
                ]
            }
        },
        "filter_out_weekends": {
            "name": "filter_out_weekends",
            "location": 35,
            "return": [
                "typing.Generator[tuple[]]"
            ],
            "arguments": {
                "times": [
                    "list[dict[, ]]",
                    "bytes"
                ]
            }
        },
        "filter_out_non_working_hours": {
            "name": "filter_out_non_working_hours",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "times": [
                    "str",
                    "tuple[typing.Union[typing.Any,typing.Any]]"
                ]
            }
        },
        "get_project_ids": {
            "name": "get_project_ids",
            "location": 48,
            "return": [
                "set[]"
            ],
            "arguments": {
                "target_client": [
                    "str",
                    "list[dict[str, typing.Any]]"
                ],
                "t": [
                    "str",
                    "int"
                ]
            }
        },
        "is_work": {
            "name": "is_work",
            "location": 73,
            "return": [
                "bool"
            ],
            "arguments": {
                "entry": [
                    "list[str]",
                    "str"
                ],
                "work_projects": [
                    "dict[, ]",
                    "list[str]",
                    "str"
                ]
            }
        },
        "get_weekend_days_between": {
            "name": "get_weekend_days_between",
            "location": 80,
            "return": [
                "int"
            ],
            "arguments": {
                "start": [],
                "end": [
                    "int",
                    "str"
                ]
            }
        },
        "get_holiday_amount": {
            "name": "get_holiday_amount",
            "location": 91,
            "return": [
                "int",
                "float"
            ],
            "arguments": {
                "days": [
                    "typing.Any",
                    "int",
                    "list[str]",
                    "None"
                ],
                "start": [
                    "int",
                    "str"
                ],
                "end": [
                    "int",
                    "str"
                ]
            }
        },
        "get_personal_holidays_between": {
            "name": "get_personal_holidays_between",
            "location": 112,
            "return": [],
            "arguments": {
                "config": [],
                "start": [
                    "str",
                    "None",
                    "tuple[typing.Union[str,str,str,str,str,str,str]]",
                    "list[int]"
                ],
                "end": [
                    "str",
                    "None",
                    "tuple[typing.Union[str,str,str,str,str,str,str]]",
                    "list[int]"
                ]
            }
        },
        "get_company_holidays_between": {
            "name": "get_company_holidays_between",
            "location": 120,
            "return": [],
            "arguments": {
                "config": [
                    "typing.Any",
                    "int",
                    "str"
                ],
                "start": [
                    "typing.Any",
                    "int",
                    "str"
                ],
                "end": [
                    "typing.Any",
                    "int",
                    "str"
                ]
            }
        },
        "format_balance": {
            "name": "format_balance",
            "location": 127,
            "return": [
                "str"
            ],
            "arguments": {
                "delta": [
                    "int",
                    "list[str]",
                    "str",
                    "float"
                ]
            }
        },
        "print_balance": {
            "name": "print_balance",
            "location": 150,
            "return": [
                "None"
            ],
            "arguments": {
                "to_work": [],
                "worked": []
            }
        },
        "main": {
            "name": "main",
            "location": 168,
            "return": [
                "None"
            ],
            "arguments": {
                "verbose": [
                    "bool",
                    "str"
                ],
                "end": []
            }
        }
    },
    "py-wwe-master/wwe/config.py": {
        "get_default_config_path": {
            "name": "get_default_config_path",
            "location": 7,
            "return": [
                "str",
                "list[str]",
                "typing.Generator[typing.Union[str,None,None]]"
            ],
            "arguments": {}
        },
        "load_config": {
            "name": "load_config",
            "location": 19,
            "return": [],
            "arguments": {
                "path": [
                    "None",
                    "str",
                    "int"
                ]
            }
        },
        "import_json_file": {
            "name": "import_json_file",
            "location": 32,
            "return": [],
            "arguments": {
                "path": [
                    "str"
                ]
            }
        }
    },
    "py-wwe-master/wwe/gov.py": {
        "gov_uk_bank_holidays": {
            "name": "gov_uk_bank_holidays",
            "location": 9,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {}
        },
        "gov_uk_bank_holidays_between": {
            "name": "gov_uk_bank_holidays_between",
            "location": 21,
            "return": [
                "int"
            ],
            "arguments": {
                "start": [
                    "int",
                    "None"
                ],
                "end": [
                    "int",
                    "None"
                ]
            }
        }
    },
    "py-wwe-master/wwe/log.py": {
        "set_verbose_mode": {
            "name": "set_verbose_mode",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {
                "verbose_mode": [
                    "str"
                ]
            }
        },
        "format_log": {
            "name": "format_log",
            "location": 11,
            "return": [
                "None",
                "typing.Text"
            ],
            "arguments": {
                "time_entry": [
                    "str",
                    "list[datetime.date]"
                ]
            }
        }
    },
    "py-wwe-master/wwe/toggl.py": {
        "filter_entries": {
            "name": "filter_entries",
            "location": 8,
            "return": [],
            "arguments": {
                "entries": [],
                "filters": []
            }
        },
        "ensure_datetime_timezone": {
            "name": "ensure_datetime_timezone",
            "location": 22,
            "return": [],
            "arguments": {
                "timestamp": []
            }
        },
        "TogglWrap.__init__": {
            "name": "__init__",
            "location": 36,
            "return": [],
            "arguments": {
                "self": [],
                "token": []
            }
        },
        "TogglWrap.get_filtered_entries": {
            "name": "get_filtered_entries",
            "location": 43,
            "return": [],
            "arguments": {
                "self": [],
                "filters": [],
                "start": [],
                "end": []
            }
        },
        "TogglWrap._client_by_id": {
            "name": "_client_by_id",
            "location": 52,
            "return": [],
            "arguments": {
                "self": [],
                "client_id": []
            }
        },
        "TogglWrap._project_by_client": {
            "name": "_project_by_client",
            "location": 64,
            "return": [],
            "arguments": {
                "self": [],
                "client_name": []
            }
        },
        "TogglWrap.clients": {
            "name": "clients",
            "location": 84,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TogglWrap.projects": {
            "name": "projects",
            "location": 105,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "py-wwe-master/wwe/toggl_api.py": {
        "write_toggl_timestamp": {
            "name": "write_toggl_timestamp",
            "location": 13,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "ts": []
            }
        },
        "read_toggl_timestamp": {
            "name": "read_toggl_timestamp",
            "location": 25,
            "return": [
                "str"
            ],
            "arguments": {
                "text": [
                    "str"
                ]
            }
        },
        "deserialize_toggl": {
            "name": "deserialize_toggl",
            "location": 35,
            "return": [
                "int",
                "typing.Hashable",
                "typing.Generator[]",
                "None",
                "str",
                "dict[, ]",
                "list[]"
            ],
            "arguments": {
                "obj": [
                    "int",
                    "typing.Hashable",
                    "typing.Generator[]",
                    "dict[, ]"
                ]
            }
        },
        "TogglAPI.__init__": {
            "name": "__init__",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "api_token": [
                    "typing.Sequence[]",
                    "list[str]",
                    "str"
                ]
            }
        },
        "TogglAPI.get": {
            "name": "get",
            "location": 67,
            "return": [],
            "arguments": {
                "self": [],
                "section": [
                    "str"
                ],
                "params": [
                    "None",
                    "str"
                ]
            }
        },
        "TogglAPI.get_time_entries": {
            "name": "get_time_entries",
            "location": 75,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "self": [],
                "start_date": [
                    "int"
                ],
                "end_date": [
                    "None",
                    "str",
                    "int"
                ]
            }
        },
        "TogglAPI.get_clients": {
            "name": "get_clients",
            "location": 117,
            "return": [],
            "arguments": {
                "self": [],
                "workspace_id": [
                    "str",
                    "int"
                ]
            }
        },
        "TogglAPI.get_projects": {
            "name": "get_projects",
            "location": 123,
            "return": [],
            "arguments": {
                "self": [],
                "workspace_id": [
                    "str",
                    "int"
                ]
            }
        },
        "TogglAPI.get_workspaces": {
            "name": "get_workspaces",
            "location": 145,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TogglAPI.get_me": {
            "name": "get_me",
            "location": 169,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "py-wwe-master/wwe/__init__.py": {}
}
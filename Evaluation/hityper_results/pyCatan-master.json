{
    "pyCatan-master/catan/catan_cli.py": {
        "setup_logging": {
            "name": "setup_logging",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {
                "verbose": [
                    "int",
                    "float"
                ]
            }
        },
        "CatanCLI.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "colors": [],
                "ai_classes": [
                    "int",
                    "tuple[typing.Union[int,int]]",
                    "tuple[]",
                    "typing.Callable[, ]"
                ],
                "random_seed": [
                    "int",
                    "tuple[str]",
                    "None",
                    "str",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "CatanCLI.initial_placement": {
            "name": "initial_placement",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CatanCLI.print_game_winner_status": {
            "name": "print_game_winner_status",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "winning_color": [
                    "str",
                    "list[str]"
                ]
            }
        },
        "CatanCLI.play_game": {
            "name": "play_game",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CatanCLI._process_robber": {
            "name": "_process_robber",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "current_color": [
                    "int",
                    "float",
                    "str"
                ]
            }
        }
    },
    "pyCatan-master/catan/catan_cli_draw.py": {
        "draw_ascii_hex_nums": {
            "name": "draw_ascii_hex_nums",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {
                "game": []
            }
        },
        "draw_ascii_hex_tokens": {
            "name": "draw_ascii_hex_tokens",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "game": []
            }
        },
        "draw_ascii_settlements": {
            "name": "draw_ascii_settlements",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "game": []
            }
        },
        "draw_ascii_hex_nums.f": {
            "name": "f",
            "location": 7,
            "return": [
                "typing.Text",
                "str"
            ],
            "arguments": {
                "hex": []
            }
        },
        "draw_ascii_hex_tokens.f": {
            "name": "f",
            "location": 27,
            "return": [
                "typing.Text",
                "str"
            ],
            "arguments": {
                "hex": []
            }
        }
    },
    "pyCatan-master/catan/catan_gen.py": {
        "flatten_list": {
            "name": "flatten_list",
            "location": 106,
            "return": [
                "list[str]"
            ],
            "arguments": {
                "l": [
                    "list[list[str]]",
                    "dict[str, set[str]]",
                    "dict[, ]"
                ]
            }
        },
        "CatanConstants.get_resource_distribution_pool": {
            "name": "get_resource_distribution_pool",
            "location": 206,
            "return": [],
            "arguments": {}
        }
    },
    "pyCatan-master/catan/catan_tk.py": {
        "get_hex_coords": {
            "name": "get_hex_coords",
            "location": 32,
            "return": [
                "tuple[tuple[typing.Union[int,float]]]"
            ],
            "arguments": {
                "x_0": [
                    "int",
                    "float"
                ],
                "y_0": [
                    "int",
                    "float"
                ],
                "minor_horiz_dist": [
                    "int",
                    "float"
                ],
                "major_horiz_dist": [
                    "int",
                    "float"
                ],
                "minor_vert_dist": [
                    "int",
                    "float"
                ]
            }
        },
        "get_hex_row": {
            "name": "get_hex_row",
            "location": 51,
            "return": [
                "int",
                "float",
                "list[]",
                "list[int]",
                "str",
                "bytes"
            ],
            "arguments": {
                "x_0": [
                    "int",
                    "list[]"
                ],
                "y_0": [
                    "int",
                    "list[]",
                    "list[int]",
                    "typing.Type"
                ],
                "minor_horiz_dist": [
                    "int",
                    "list[]",
                    "bytes",
                    "bytearray",
                    "list[int]"
                ],
                "major_horiz_dist": [
                    "list[int]",
                    "int",
                    "list[str]",
                    "list[]"
                ],
                "minor_vert_dist": [
                    "int",
                    "list[]",
                    "bytes",
                    "bytearray",
                    "list[int]"
                ],
                "num": [
                    "int",
                    "list[dict[, ]]",
                    "collections.abc.AsyncIterator"
                ]
            }
        },
        "get_hex_lattice": {
            "name": "get_hex_lattice",
            "location": 66,
            "return": [],
            "arguments": {
                "x_0": [
                    "int",
                    "str"
                ],
                "y_0": [
                    "int",
                    "tuple[]"
                ],
                "minor_horiz_dist": [
                    "int"
                ],
                "major_horiz_dist": [
                    "int"
                ],
                "minor_vert_dist": [
                    "int",
                    "str"
                ]
            }
        },
        "draw_hex": {
            "name": "draw_hex",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {
                "canvas": [
                    "int",
                    "None",
                    "str"
                ],
                "hex": [],
                "row": [
                    "int",
                    "None",
                    "str"
                ],
                "col": [
                    "int",
                    "None",
                    "str"
                ]
            }
        },
        "draw_token": {
            "name": "draw_token",
            "location": 104,
            "return": [
                "None"
            ],
            "arguments": {
                "canvas": [],
                "hex": [],
                "draw_letter": [
                    "bool"
                ]
            }
        },
        "draw_token_dots": {
            "name": "draw_token_dots",
            "location": 145,
            "return": [
                "None"
            ],
            "arguments": {
                "canvas": [
                    "float",
                    "int",
                    "str"
                ],
                "pos": [],
                "n": [
                    "int"
                ],
                "color": [
                    "float",
                    "int",
                    "str"
                ]
            }
        },
        "draw_token_dot": {
            "name": "draw_token_dot",
            "location": 168,
            "return": [
                "None"
            ],
            "arguments": {
                "canvas": [
                    "int",
                    "None"
                ],
                "pos": [],
                "color": [
                    "int",
                    "None"
                ]
            }
        },
        "render_map": {
            "name": "render_map",
            "location": 1077,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "CatanApp.draw_robber": {
            "name": "draw_robber",
            "location": 200,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CatanApp.grab_robber": {
            "name": "grab_robber",
            "location": 214,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "int",
                    "bytes",
                    "dict[, ]"
                ]
            }
        },
        "CatanApp.move_robber": {
            "name": "move_robber",
            "location": 221,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "int",
                    "bytes",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "CatanApp.release_robber": {
            "name": "release_robber",
            "location": 230,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "dict[, ]",
                    "dict[str, typing.Any]",
                    "bool"
                ]
            }
        },
        "CatanApp.enable_stealing": {
            "name": "enable_stealing",
            "location": 254,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CatanApp._next_turn": {
            "name": "_next_turn",
            "location": 272,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CatanApp._get_turn": {
            "name": "_get_turn",
            "location": 276,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CatanApp.move_robber_to_hex_ui": {
            "name": "move_robber_to_hex_ui",
            "location": 279,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "destination_hex": []
            }
        },
        "CatanApp.automate_robber": {
            "name": "automate_robber",
            "location": 287,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CatanApp.automate_placement": {
            "name": "automate_placement",
            "location": 304,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CatanApp.__init__": {
            "name": "__init__",
            "location": 320,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CatanApp.play_development_card": {
            "name": "play_development_card",
            "location": 396,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CatanApp.buy_development_card": {
            "name": "buy_development_card",
            "location": 399,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CatanApp.create_build_buttons": {
            "name": "create_build_buttons",
            "location": 413,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CatanApp.enable_building": {
            "name": "enable_building",
            "location": 440,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "type": [
                    "str",
                    "tuple[typing.Type]"
                ]
            }
        },
        "CatanApp.create_build_button": {
            "name": "create_build_button",
            "location": 460,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "type": [
                    "str",
                    "dict[, ]",
                    "typing.Type"
                ]
            }
        },
        "CatanApp.check_game_end": {
            "name": "check_game_end",
            "location": 474,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "CatanApp.process_game_end": {
            "name": "process_game_end",
            "location": 481,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CatanApp.roll": {
            "name": "roll",
            "location": 495,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "change_turn": [
                    "bool"
                ]
            }
        },
        "CatanApp.update_hand": {
            "name": "update_hand",
            "location": 535,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "color": [
                    "str"
                ]
            }
        },
        "CatanApp.update_dev_cards": {
            "name": "update_dev_cards",
            "location": 543,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "color": [
                    "str",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "CatanApp.act_on_start_state": {
            "name": "act_on_start_state",
            "location": 552,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CatanApp.post_status_note": {
            "name": "post_status_note",
            "location": 618,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "msg": [
                    "None",
                    "str",
                    "int"
                ],
                "error": [
                    "bool"
                ]
            }
        },
        "CatanApp.act_on_end_state": {
            "name": "act_on_end_state",
            "location": 643,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CatanApp.draw_build_menu": {
            "name": "draw_build_menu",
            "location": 686,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CatanApp.draw_status_area": {
            "name": "draw_status_area",
            "location": 711,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CatanApp.update_vp": {
            "name": "update_vp",
            "location": 732,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "color": [
                    "str"
                ]
            }
        },
        "CatanApp.draw_hand_area_section": {
            "name": "draw_hand_area_section",
            "location": 738,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "color": [
                    "bool",
                    "list[int]",
                    "dict[str, typing.Any]",
                    "list[tuple[typing.Union[str,str]]]",
                    "None",
                    "str"
                ],
                "i": [
                    "int"
                ]
            }
        },
        "CatanApp.draw_hand_area": {
            "name": "draw_hand_area",
            "location": 795,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CatanApp.steal_from_player_ui": {
            "name": "steal_from_player_ui",
            "location": 816,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "from_player": [
                    "dict[, ]",
                    "typing.Mapping",
                    "dict[str, str]"
                ]
            }
        },
        "CatanApp.change_status_turn": {
            "name": "change_status_turn",
            "location": 826,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CatanApp.draw_board": {
            "name": "draw_board",
            "location": 831,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "canvas": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ]
            }
        },
        "CatanApp._get_road_slope": {
            "name": "_get_road_slope",
            "location": 847,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "v1": [
                    "list[int]",
                    "str"
                ],
                "v2": [
                    "list[int]",
                    "str"
                ]
            }
        },
        "CatanApp._get_y_offset": {
            "name": "_get_y_offset",
            "location": 852,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "v1": [
                    "int",
                    "float",
                    "list['Photo']"
                ],
                "v2": [
                    "int",
                    "float",
                    "list['Photo']"
                ],
                "x_offset": [
                    "int",
                    "float",
                    "list['Photo']"
                ]
            }
        },
        "CatanApp.draw_road_placeholder": {
            "name": "draw_road_placeholder",
            "location": 855,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "canvas": [],
                "v1": [],
                "v2": []
            }
        },
        "CatanApp.add_road": {
            "name": "add_road",
            "location": 903,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "str",
                    "None",
                    "bool",
                    "typing.Optional[]",
                    "dict[str, typing.Any]"
                ],
                "v1": [
                    "str",
                    "int"
                ],
                "v2": [
                    "str",
                    "int"
                ],
                "initial_placement": [
                    "bool"
                ]
            }
        },
        "CatanApp.cull_adjacent_settlement_nodes": {
            "name": "cull_adjacent_settlement_nodes",
            "location": 930,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "canvas": [
                    "dict[, ]",
                    "typing.Callable[, ]",
                    "str"
                ],
                "v": [
                    "list[str]",
                    "tuple[typing.Union[str,float]]",
                    "str"
                ]
            }
        },
        "CatanApp.draw_settlement_node": {
            "name": "draw_settlement_node",
            "location": 939,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "canvas": [],
                "v": []
            }
        },
        "CatanApp.add_settlement": {
            "name": "add_settlement",
            "location": 959,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "list[str]",
                    "bool",
                    "str",
                    "None"
                ],
                "v": [
                    "dict[str, typing.Any]",
                    "list[]",
                    "int"
                ],
                "initial_placement": [
                    "bool"
                ]
            }
        },
        "CatanApp.change_to_state": {
            "name": "change_to_state",
            "location": 992,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "new_state": [
                    "bool",
                    "str"
                ]
            }
        },
        "CatanApp.add_city": {
            "name": "add_city",
            "location": 999,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "list[str]",
                    "bool",
                    "str",
                    "None"
                ],
                "v": [
                    "list[int]",
                    "str"
                ],
                "color": [
                    "int",
                    "list[int]",
                    "dict[str, str]"
                ]
            }
        },
        "CatanApp.get_hex_coord_lattice": {
            "name": "get_hex_coord_lattice",
            "location": 1031,
            "return": [],
            "arguments": {}
        },
        "CatanApp.set_vertices": {
            "name": "set_vertices",
            "location": 1042,
            "return": [
                "None"
            ],
            "arguments": {
                "map": []
            }
        },
        "CatanApp.key_pressed": {
            "name": "key_pressed",
            "location": 1060,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "str",
                    "bool",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "CatanApp.end": {
            "name": "end",
            "location": 1063,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "str"
                ]
            }
        },
        "CatanApp.run": {
            "name": "run",
            "location": 1068,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pyCatan-master/catan/catan_types.py": {},
    "pyCatan-master/catan/game_engine.py": {
        "Game.__init__": {
            "name": "__init__",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "starting_color": [
                    "str"
                ],
                "colors": [
                    "str"
                ],
                "hex_coord_lattice": [
                    "int",
                    "str"
                ]
            }
        },
        "Game._make_dev_card_deck": {
            "name": "_make_dev_card_deck",
            "location": 104,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Game._generate_ports": {
            "name": "_generate_ports",
            "location": 112,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Game._generate_board": {
            "name": "_generate_board",
            "location": 164,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Game.get_board": {
            "name": "get_board",
            "location": 181,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Game.is_game_over": {
            "name": "is_game_over",
            "location": 185,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Game.roll_dice": {
            "name": "roll_dice",
            "location": 188,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Game.check_game_over": {
            "name": "check_game_over",
            "location": 205,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Game.next_turn": {
            "name": "next_turn",
            "location": 213,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Game.get_current_color": {
            "name": "get_current_color",
            "location": 245,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Game.__play_monopoly_card": {
            "name": "__play_monopoly_card",
            "location": 248,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "player_color": [
                    "str",
                    "int",
                    "list[int]"
                ],
                "target_resource": [
                    "Exception"
                ]
            }
        },
        "Game.__play_knight_card": {
            "name": "__play_knight_card",
            "location": 266,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "player_color": [
                    "dict[str, dict[, ]]",
                    "str"
                ],
                "target_color": [
                    "int",
                    "BaseException",
                    "None",
                    "str",
                    "float",
                    "typing.Callable[, ]"
                ],
                "target_hex": [
                    "str",
                    "typing.OrderedDict",
                    "typing.Iterable[typing.Sequence[str]]",
                    "bool"
                ]
            }
        },
        "Game.__play_year_of_plenty_card": {
            "name": "__play_year_of_plenty_card",
            "location": 289,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "player_color": [
                    "str",
                    "int",
                    "list[]"
                ],
                "resources": [
                    "list[str]",
                    "typing.IO",
                    "dict[, ]"
                ]
            }
        },
        "Game.__play_road_building_card": {
            "name": "__play_road_building_card",
            "location": 295,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "player_color": [
                    "bool",
                    "str"
                ],
                "roads": [
                    "str",
                    "list[dict[, ]]"
                ]
            }
        },
        "Game.play_development_card": {
            "name": "play_development_card",
            "location": 302,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "color": [
                    "int",
                    "None",
                    "str",
                    "dict[, ]",
                    "typing.Callable[..., collections.abc.Awaitable[]]"
                ],
                "card": [
                    "str",
                    "dict[str, list[str]]"
                ],
                "params": [
                    "str",
                    "int",
                    "list[str]"
                ]
            }
        },
        "Game.get_player_played_development_card": {
            "name": "get_player_played_development_card",
            "location": 321,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Game.get_player_vp": {
            "name": "get_player_vp",
            "location": 324,
            "return": [],
            "arguments": {
                "self": [],
                "color": [
                    "str",
                    "float"
                ]
            }
        },
        "Game.has_development_cards": {
            "name": "has_development_cards",
            "location": 330,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Game.buy_development_card": {
            "name": "buy_development_card",
            "location": 333,
            "return": [
                "int",
                "dict[, ]",
                "dict[str, list[str]]"
            ],
            "arguments": {
                "self": [],
                "color": [
                    "str",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "Game._create_players": {
            "name": "_create_players",
            "location": 352,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "colors": [
                    "str"
                ]
            }
        },
        "Game.get_player": {
            "name": "get_player",
            "location": 358,
            "return": [],
            "arguments": {
                "self": [],
                "color": [
                    "str",
                    "bool"
                ]
            }
        },
        "Game._assign_tokens": {
            "name": "_assign_tokens",
            "location": 363,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Game._get_next_tile": {
            "name": "_get_next_tile",
            "location": 393,
            "return": [
                "tuple[int]",
                "tuple[typing.Union[int,None,float]]"
            ],
            "arguments": {
                "self": [],
                "row": [
                    "int"
                ],
                "col": [
                    "int",
                    "None",
                    "float"
                ],
                "unplaced_layout": [
                    "dict[int, int]",
                    "int",
                    "list[str]"
                ]
            }
        },
        "Game._place_tiles": {
            "name": "_place_tiles",
            "location": 434,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "deck": [
                    "list[str]"
                ]
            }
        },
        "Game._get_random_tile_deck": {
            "name": "_get_random_tile_deck",
            "location": 444,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Game._prepare_data_structures": {
            "name": "_prepare_data_structures",
            "location": 450,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Game._find_desert_hex": {
            "name": "_find_desert_hex",
            "location": 466,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Game.cull_bad_settlement_vertices": {
            "name": "cull_bad_settlement_vertices",
            "location": 475,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "v": [
                    "float",
                    "int",
                    "list[]"
                ]
            }
        },
        "Game.get_nodes": {
            "name": "get_nodes",
            "location": 483,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Game._has_road": {
            "name": "_has_road",
            "location": 487,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "v1": [
                    "int",
                    "str",
                    "list[int]"
                ],
                "v2": [
                    "int",
                    "str",
                    "list[int]"
                ]
            }
        },
        "Game._road_connects_same_color_settlement": {
            "name": "_road_connects_same_color_settlement",
            "location": 492,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "v1": [],
                "v2": [],
                "color": []
            }
        },
        "Game._road_connects_same_color_road": {
            "name": "_road_connects_same_color_road",
            "location": 498,
            "return": [],
            "arguments": {
                "self": [],
                "v1": [
                    "float",
                    "str",
                    "dict[, ]"
                ],
                "v2": [
                    "float",
                    "str",
                    "dict[, ]"
                ],
                "color": [
                    "float",
                    "str",
                    "dict[, ]"
                ]
            }
        },
        "Game._normalize_road": {
            "name": "_normalize_road",
            "location": 503,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "self": [],
                "v1": [],
                "v2": []
            }
        },
        "Game.add_road": {
            "name": "add_road",
            "location": 509,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "v1": [
                    "int",
                    "list[]"
                ],
                "v2": [
                    "dict[str, typing.Any]",
                    "int"
                ],
                "color": [
                    "bool",
                    "typing.Callable[, ]",
                    "typing.Type",
                    "tuple[typing.Union[int,int]]"
                ],
                "initial_placement": [
                    "bool"
                ]
            }
        },
        "Game._get_farthest_vertex": {
            "name": "_get_farthest_vertex",
            "location": 563,
            "return": [
                "tuple[typing.Union[None,int,list[tuple[typing.Union[typing.Any,typing.Any]]],list[]]]"
            ],
            "arguments": {
                "self": [],
                "v": [
                    "str",
                    "list[str]"
                ],
                "color": [
                    "str",
                    "tuple[typing.Union[int,str]]"
                ]
            }
        },
        "Game.get_road_length": {
            "name": "get_road_length",
            "location": 599,
            "return": [
                "dict[, ]",
                "list[int]",
                "float",
                "int"
            ],
            "arguments": {
                "self": [],
                "starting_vertex": [
                    "int",
                    "None",
                    "str"
                ],
                "color": [
                    "str",
                    "int",
                    "None"
                ]
            }
        },
        "Game.has_road": {
            "name": "has_road",
            "location": 607,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "v1": [],
                "v2": []
            }
        },
        "Game.__end_initial_placement": {
            "name": "__end_initial_placement",
            "location": 616,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Game.can_place_settlement": {
            "name": "can_place_settlement",
            "location": 628,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "v": [
                    "float",
                    "typing.Iterable[typing.Any]",
                    "int"
                ]
            }
        },
        "Game.__can_place_road_from_direction": {
            "name": "__can_place_road_from_direction",
            "location": 632,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "v1": [
                    "int",
                    "dict[str, typing.Any]",
                    "list[T]"
                ],
                "v2": [
                    "int",
                    "list[int]"
                ],
                "color": [
                    "int",
                    "list[int]"
                ]
            }
        },
        "Game.can_place_road": {
            "name": "can_place_road",
            "location": 653,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "v1": [
                    "int",
                    "dict[str, typing.Any]",
                    "list[]",
                    "set[str]"
                ],
                "v2": [
                    "int",
                    "dict[str, typing.Any]",
                    "list[]",
                    "set[str]"
                ],
                "color": []
            }
        },
        "Game.add_settlement": {
            "name": "add_settlement",
            "location": 664,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "v": [
                    "list[int]",
                    "int",
                    "dict[, ]",
                    "dict[str, typing.Any]"
                ],
                "color": [
                    "str",
                    "bool",
                    "dict[str, typing.Any]"
                ],
                "initial_placement": [
                    "bool"
                ]
            }
        },
        "Game.get_players_on_hex": {
            "name": "get_players_on_hex",
            "location": 697,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": [],
                "hex": []
            }
        },
        "Game.get_players_on_robber_hex": {
            "name": "get_players_on_robber_hex",
            "location": 704,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Game.add_city": {
            "name": "add_city",
            "location": 709,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "v": [
                    "int",
                    "str"
                ],
                "color": [
                    "str",
                    "tuple[typing.Union[str,list[str]]]"
                ]
            }
        },
        "Game._create_vertex_set": {
            "name": "_create_vertex_set",
            "location": 735,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Game.get_hexes_for_vertex": {
            "name": "get_hexes_for_vertex",
            "location": 741,
            "return": [],
            "arguments": {
                "self": [],
                "vertex": [
                    "str",
                    "bytes"
                ]
            }
        },
        "Game._create_vertex_map": {
            "name": "_create_vertex_map",
            "location": 744,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Game.produce_resources_from_settlement": {
            "name": "produce_resources_from_settlement",
            "location": 757,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": [],
                "s": [],
                "ignore_robber": [
                    "bool"
                ]
            }
        },
        "Game._produce_resources_from_roll": {
            "name": "_produce_resources_from_roll",
            "location": 771,
            "return": [
                "dict[, ]",
                "dict[str, str]"
            ],
            "arguments": {
                "self": [],
                "roll": [
                    "set[str]",
                    "tuple[str]",
                    "dict[str, typing.Any]",
                    "int",
                    "typing.Sequence[float]"
                ]
            }
        },
        "Game.get_settlement_at_vertex": {
            "name": "get_settlement_at_vertex",
            "location": 794,
            "return": [],
            "arguments": {
                "self": [],
                "v": [
                    "dict[, ]",
                    "str"
                ]
            }
        },
        "Game.get_adjacent_vertices": {
            "name": "get_adjacent_vertices",
            "location": 799,
            "return": [
                "dict[str, typing.Literal]"
            ],
            "arguments": {
                "self": [],
                "v": [
                    "int",
                    "dict[, ]"
                ]
            }
        },
        "Game._create_road_set": {
            "name": "_create_road_set",
            "location": 816,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Game.get_roads_from_vertex": {
            "name": "get_roads_from_vertex",
            "location": 825,
            "return": [
                "list[tuple[]]"
            ],
            "arguments": {
                "self": [],
                "v": [
                    "int",
                    "typing.Iterable[str]"
                ]
            }
        },
        "Game._get_hex_at_coords": {
            "name": "_get_hex_at_coords",
            "location": 834,
            "return": [],
            "arguments": {
                "self": [],
                "row": [
                    "int",
                    "tuple[typing.Union[int,int]]",
                    "list[int]"
                ],
                "col": [
                    "int",
                    "tuple[typing.Union[int,int]]",
                    "list[int]"
                ]
            }
        },
        "Game.get_robber_hex_coords": {
            "name": "get_robber_hex_coords",
            "location": 839,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Game.get_robber_hex": {
            "name": "get_robber_hex",
            "location": 842,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Game.move_robber": {
            "name": "move_robber",
            "location": 848,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "hex_coord": [
                    "list[int]",
                    "str",
                    "tuple[typing.Union[int,int,int]]"
                ],
                "steal_from_player": [
                    "str",
                    "bool",
                    "typing.Callable[, ]",
                    "None"
                ],
                "moving_player": [
                    "str",
                    "typing.Any",
                    "None"
                ]
            }
        },
        "Game.can_move_robber": {
            "name": "can_move_robber",
            "location": 872,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "hex_coord": [
                    "tuple[typing.Union[int,int]]",
                    "int",
                    "str",
                    "typing.Sequence[str]"
                ]
            }
        },
        "Game._set_robber_hex": {
            "name": "_set_robber_hex",
            "location": 879,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "hex_coord": [
                    "bool",
                    "float"
                ]
            }
        },
        "Game._robber_steal": {
            "name": "_robber_steal",
            "location": 886,
            "return": [
                "None",
                "typing.OrderedDict",
                "typing.Pattern",
                "float",
                "str"
            ],
            "arguments": {
                "self": [],
                "from_player": [
                    "int",
                    "float",
                    "tuple[typing.Union[int,int]]"
                ],
                "to_player": [
                    "typing.Callable[, ]",
                    "None",
                    "int",
                    "dict[str, typing.Any]",
                    "str"
                ]
            }
        },
        "Game._create_resource_map": {
            "name": "_create_resource_map",
            "location": 896,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Game.get_map": {
            "name": "get_map",
            "location": 910,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Game.get_edges": {
            "name": "get_edges",
            "location": 914,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Game.get_state": {
            "name": "get_state",
            "location": 918,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Game.get_turn": {
            "name": "get_turn",
            "location": 921,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Game.get_colors": {
            "name": "get_colors",
            "location": 924,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Game.get_winning_player": {
            "name": "get_winning_player",
            "location": 927,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "pyCatan-master/catan/gui_staging.py": {
        "App.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "root": [
                    "str",
                    "None",
                    "typing.IO"
                ]
            }
        },
        "App.create_down_arrow": {
            "name": "create_down_arrow",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "App.create_widgets": {
            "name": "create_widgets",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "App.create_discard_window": {
            "name": "create_discard_window",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "App.draw_down_arrow": {
            "name": "draw_down_arrow",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "x_offset": [
                    "bool",
                    "float",
                    "typing.Iterable[typing.Iterable[float]]",
                    "str",
                    "bytes"
                ],
                "y_offset": [
                    "bool",
                    "float",
                    "typing.Iterable[typing.Iterable[float]]",
                    "str",
                    "bytes"
                ]
            }
        },
        "App.get_down_arrow_coords": {
            "name": "get_down_arrow_coords",
            "location": 66,
            "return": [
                "tuple[tuple[int]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "App.create_game_window": {
            "name": "create_game_window",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "App.create_god_window": {
            "name": "create_god_window",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "App.create_models": {
            "name": "create_models",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "App.create_players": {
            "name": "create_players",
            "location": 102,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "App.roll": {
            "name": "roll",
            "location": 107,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "App.draw_update_hand": {
            "name": "draw_update_hand",
            "location": 122,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "color": [
                    "int"
                ]
            }
        },
        "App.get_resource_box_coords": {
            "name": "get_resource_box_coords",
            "location": 131,
            "return": [
                "tuple[typing.Union[int,float]]"
            ],
            "arguments": {
                "self": [],
                "resource_text_coords": [
                    "str",
                    "ImportError",
                    "None"
                ]
            }
        },
        "App.get_resource_number_coords": {
            "name": "get_resource_number_coords",
            "location": 137,
            "return": [
                "tuple[int]"
            ],
            "arguments": {
                "self": [],
                "resource_box_coords": [
                    "str",
                    "bytes"
                ]
            }
        },
        "App.draw_top_resource_bar": {
            "name": "draw_top_resource_bar",
            "location": 141,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "color": [
                    "bool",
                    "str",
                    "typing.Callable[, ]",
                    "dict[, ]"
                ]
            }
        }
    },
    "pyCatan-master/catan/hex.py": {
        "Hex.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "resource": [
                    "int",
                    "float"
                ]
            }
        },
        "Hex.get_resource": {
            "name": "get_resource",
            "location": 26,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Hex.set_coord": {
            "name": "set_coord",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "coord": [
                    "bool",
                    "float"
                ]
            }
        },
        "Hex.get_coord": {
            "name": "get_coord",
            "location": 32,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Hex.set_vertices": {
            "name": "set_vertices",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "vertices": [
                    "bool",
                    "float"
                ]
            }
        },
        "Hex.get_vertices": {
            "name": "get_vertices",
            "location": 39,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Hex.set_token": {
            "name": "set_token",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "t": [
                    "dict[str, typing.Any]",
                    "tuple[]",
                    "str"
                ]
            }
        },
        "Hex.get_number": {
            "name": "get_number",
            "location": 47,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Hex.get_token": {
            "name": "get_token",
            "location": 50,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "Hex.get_num_dots": {
            "name": "get_num_dots",
            "location": 59,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Hex.get_vertex": {
            "name": "get_vertex",
            "location": 67,
            "return": [],
            "arguments": {
                "self": [],
                "index": [
                    "str",
                    "bool"
                ]
            }
        },
        "Hex.get_center": {
            "name": "get_center",
            "location": 71,
            "return": [
                "tuple[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Hex.get_top": {
            "name": "get_top",
            "location": 79,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Hex.get_bottom": {
            "name": "get_bottom",
            "location": 83,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Hex.get_left": {
            "name": "get_left",
            "location": 87,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Hex.get_right": {
            "name": "get_right",
            "location": 91,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "pyCatan-master/catan/player.py": {
        "Player.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "color": [
                    "int",
                    "float"
                ]
            }
        },
        "Player.get_color": {
            "name": "get_color",
            "location": 38,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Player.get_num_resources": {
            "name": "get_num_resources",
            "location": 41,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Player.can_deduct_resources": {
            "name": "can_deduct_resources",
            "location": 46,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "r_list": [
                    "list[]",
                    "list[typing.Union[int,float]]",
                    "list[tuple[typing.Union[str,int]]]"
                ]
            }
        },
        "Player.deduct_resources": {
            "name": "deduct_resources",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "r_list": [
                    "list[int]",
                    "list[list[]]"
                ]
            }
        },
        "Player.add_settlement": {
            "name": "add_settlement",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "v": [
                    "tuple[typing.Union[int,int,str]]",
                    "int",
                    "dict[, ]",
                    "list[int]",
                    "set[str]",
                    "typing.Type"
                ],
                "s": [
                    "list[int]",
                    "list[]",
                    "typing.Deque"
                ]
            }
        },
        "Player.get_settlement": {
            "name": "get_settlement",
            "location": 76,
            "return": [],
            "arguments": {
                "self": [],
                "i": [
                    "str",
                    "int",
                    "list[int]",
                    "float"
                ]
            }
        },
        "Player.upgrade_settlement_to_city": {
            "name": "upgrade_settlement_to_city",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "vertex": [
                    "float",
                    "int",
                    "None",
                    "str"
                ]
            }
        },
        "Player.add_road": {
            "name": "add_road",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "v1": [
                    "list[]",
                    "float",
                    "int"
                ],
                "v2": [
                    "list[]",
                    "float",
                    "int"
                ]
            }
        },
        "Player.get_num_roads": {
            "name": "get_num_roads",
            "location": 91,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Player.get_num_settlements": {
            "name": "get_num_settlements",
            "location": 96,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Player.get_num_cities": {
            "name": "get_num_cities",
            "location": 101,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Player.get_settlements": {
            "name": "get_settlements",
            "location": 104,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Player.get_settlement_vertices": {
            "name": "get_settlement_vertices",
            "location": 107,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Player.add_resources": {
            "name": "add_resources",
            "location": 111,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "resource_list": [
                    "list[list[str]]",
                    "list[list[typing.Any]]",
                    "list[]"
                ]
            }
        },
        "Player.get_printable_hand": {
            "name": "get_printable_hand",
            "location": 122,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "Player.get_printable_dev_cards": {
            "name": "get_printable_dev_cards",
            "location": 132,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "Player.steal_resource": {
            "name": "steal_resource",
            "location": 144,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Player.get_num_vp": {
            "name": "get_num_vp",
            "location": 164,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Player.add_special_card": {
            "name": "add_special_card",
            "location": 172,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "card": [
                    "str",
                    "int"
                ]
            }
        },
        "Player.remove_special_card": {
            "name": "remove_special_card",
            "location": 175,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "card": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ]
            }
        },
        "Player.has_special_card": {
            "name": "has_special_card",
            "location": 178,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "card": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ]
            }
        },
        "Player.add_development_card": {
            "name": "add_development_card",
            "location": 181,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "card": [
                    "int"
                ]
            }
        },
        "Player.get_development_card_vp": {
            "name": "get_development_card_vp",
            "location": 190,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Player.get_num_knights_played": {
            "name": "get_num_knights_played",
            "location": 193,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Player.play_development_card": {
            "name": "play_development_card",
            "location": 196,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "card": [
                    "int",
                    "str",
                    "typing.Callable[, ]"
                ]
            }
        },
        "Player.get_development_cards": {
            "name": "get_development_cards",
            "location": 208,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Player.get_hand": {
            "name": "get_hand",
            "location": 213,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Player.has_road_to": {
            "name": "has_road_to",
            "location": 217,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "v": [
                    "typing.Sequence[typing.Any]"
                ]
            }
        },
        "Player.has_settlement_at": {
            "name": "has_settlement_at",
            "location": 225,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "v": [
                    "typing.Sequence[typing.Any]"
                ]
            }
        },
        "Player.get_road_vertices": {
            "name": "get_road_vertices",
            "location": 228,
            "return": [
                "set[]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pyCatan-master/catan/resource.py": {},
    "pyCatan-master/catan/settlement.py": {
        "Settlement.__init__": {
            "name": "__init__",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "vertex": [
                    "int",
                    "float"
                ],
                "color": [
                    "int",
                    "float"
                ]
            }
        },
        "Settlement.is_city": {
            "name": "is_city",
            "location": 14,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Settlement.upgrade": {
            "name": "upgrade",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Settlement.vertex": {
            "name": "vertex",
            "location": 24,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Settlement.color": {
            "name": "color",
            "location": 29,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "pyCatan-master/catan/sprite.py": {
        "scale_constants": {
            "name": "scale_constants",
            "location": 27,
            "return": [
                "dict[, int]"
            ],
            "arguments": {
                "constants": [],
                "new_height": [
                    "int"
                ]
            }
        },
        "print_dict": {
            "name": "print_dict",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "d": [
                    "dict[, ]",
                    "dict[str, typing.Any]",
                    "dict[str, str]"
                ]
            }
        },
        "get_front_face_coords": {
            "name": "get_front_face_coords",
            "location": 40,
            "return": [
                "tuple[tuple[typing.Union[int,str]]]"
            ],
            "arguments": {
                "constants": [
                    "str"
                ]
            }
        },
        "get_side_roof_coords": {
            "name": "get_side_roof_coords",
            "location": 52,
            "return": [
                "tuple[typing.Union[str,tuple[str]]]"
            ],
            "arguments": {
                "offset": [
                    "bool",
                    "str",
                    "dict[, ]"
                ],
                "constants": [
                    "str"
                ],
                "front": [
                    "str"
                ]
            }
        },
        "get_side_coords": {
            "name": "get_side_coords",
            "location": 60,
            "return": [
                "tuple[typing.Union[str,tuple[str]]]"
            ],
            "arguments": {
                "offset": [
                    "bool",
                    "str",
                    "dict[, ]"
                ],
                "constants": [
                    "str"
                ],
                "front": [
                    "str"
                ]
            }
        },
        "draw_settlement": {
            "name": "draw_settlement",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "canvas": [
                    "str",
                    "dict[str, typing.Any]"
                ],
                "offset": [
                    "bytes"
                ],
                "top": [
                    "str",
                    "dict[str, typing.Any]"
                ],
                "constants": [
                    "bytes"
                ]
            }
        },
        "get_city_front_face_coords": {
            "name": "get_city_front_face_coords",
            "location": 91,
            "return": [
                "tuple[tuple[int]]"
            ],
            "arguments": {
                "constants": [
                    "bool",
                    "str",
                    "dict[, ]"
                ]
            }
        },
        "get_short_tower_coords": {
            "name": "get_short_tower_coords",
            "location": 99,
            "return": [
                "tuple[tuple[typing.Union[int,str]]]"
            ],
            "arguments": {
                "constants": [
                    "bool",
                    "str",
                    "dict[, ]"
                ],
                "face": [
                    "str"
                ]
            }
        },
        "get_tall_tower_coords": {
            "name": "get_tall_tower_coords",
            "location": 108,
            "return": [
                "tuple[typing.Union[str,tuple[str]]]"
            ],
            "arguments": {
                "constants": [
                    "bool",
                    "str",
                    "dict[, ]"
                ],
                "face": [
                    "str"
                ]
            }
        },
        "draw_city": {
            "name": "draw_city",
            "location": 118,
            "return": [
                "None"
            ],
            "arguments": {
                "canvas": [
                    "int",
                    "str"
                ],
                "offset": [
                    "int",
                    "str"
                ],
                "top": [
                    "int",
                    "str"
                ],
                "constants": [
                    "bytes"
                ]
            }
        },
        "rescale": {
            "name": "rescale",
            "location": 139,
            "return": [
                "None"
            ],
            "arguments": {
                "canvas": [
                    "int",
                    "tuple[typing.Union[int,int]]",
                    "str",
                    "typing.Mapping"
                ],
                "offset": [
                    "typing.Callable[, ]"
                ],
                "top": [
                    "typing.Callable[, ]"
                ],
                "v": []
            }
        }
    },
    "pyCatan-master/catan/test_dummy_ai.py": {
        "test_get_robber_placement": {
            "name": "test_get_robber_placement",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_get_settlement_placement": {
            "name": "test_get_settlement_placement",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_get_road_placement": {
            "name": "test_get_road_placement",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_robber_discard": {
            "name": "test_robber_discard",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "pyCatan-master/catan/test_game_engine.py": {
        "floor": {
            "name": "floor",
            "location": 18,
            "return": [
                "int"
            ],
            "arguments": {
                "x": [
                    "int",
                    "float",
                    "str"
                ]
            }
        },
        "_automate_placement": {
            "name": "_automate_placement",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "ais": [
                    "str"
                ],
                "game": [],
                "colors": [
                    "list[str]",
                    "list[int]"
                ]
            }
        },
        "test_game_ends": {
            "name": "test_game_ends",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_initial_placement": {
            "name": "test_initial_placement",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_play_knight_card": {
            "name": "test_play_knight_card",
            "location": 117,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_play_monopoly_card": {
            "name": "test_play_monopoly_card",
            "location": 158,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_play_road_building_card": {
            "name": "test_play_road_building_card",
            "location": 214,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_play_year_of_plenty": {
            "name": "test_play_year_of_plenty",
            "location": 272,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_largest_army": {
            "name": "test_largest_army",
            "location": 301,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_add_city": {
            "name": "test_add_city",
            "location": 360,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_longest_road": {
            "name": "test_longest_road",
            "location": 385,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_get_road_length_initial": {
            "name": "test_get_road_length_initial",
            "location": 455,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "pyCatan-master/catan/test_smart_placement_ai.py": {
        "test_robber_discard": {
            "name": "test_robber_discard",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "pyCatan-master/catan/utils.py": {
        "CatanUtils.print_dict": {
            "name": "print_dict",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "d": [
                    "dict[, ]",
                    "dict[str, typing.Any]",
                    "dict[str, str]"
                ]
            }
        },
        "CatanUtils.get_tkinter_coords": {
            "name": "get_tkinter_coords",
            "location": 14,
            "return": [],
            "arguments": {
                "normal_person_coords": [
                    "str",
                    "int",
                    "frozenset",
                    "list[int]",
                    "list[str]"
                ]
            }
        },
        "CatanUtils.get_num_token_dots": {
            "name": "get_num_token_dots",
            "location": 22,
            "return": [
                "int"
            ],
            "arguments": {
                "num": [
                    "int"
                ]
            }
        }
    },
    "pyCatan-master/catan/ai/ai.py": {
        "AI.__init__": {
            "name": "__init__",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "color": [
                    "str",
                    "None",
                    "int"
                ],
                "game": [
                    "str",
                    "None",
                    "int"
                ]
            }
        },
        "AI.get_settlement_placement": {
            "name": "get_settlement_placement",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "game": []
            }
        },
        "AI.get_road_placement": {
            "name": "get_road_placement",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "game": [],
                "settlement_placement": []
            }
        },
        "AI.do_turn": {
            "name": "do_turn",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "game": [
                    "None"
                ]
            }
        },
        "AI.robber_discard": {
            "name": "robber_discard",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "game": [
                    "None"
                ]
            }
        },
        "AI.get_robber_placement": {
            "name": "get_robber_placement",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "game": []
            }
        }
    },
    "pyCatan-master/catan/ai/dummy_ai.py": {
        "DummyAI.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "color": [
                    "bool"
                ],
                "game": [
                    "str",
                    "None",
                    "int"
                ]
            }
        },
        "DummyAI.get_settlement_placement": {
            "name": "get_settlement_placement",
            "location": 16,
            "return": [],
            "arguments": {
                "self": [],
                "game": [
                    "typing.Sequence[str]",
                    "str"
                ]
            }
        },
        "DummyAI.get_road_placement": {
            "name": "get_road_placement",
            "location": 22,
            "return": [],
            "arguments": {
                "self": [],
                "game": [],
                "settlement_placement": [
                    "str"
                ]
            }
        },
        "DummyAI.do_turn": {
            "name": "do_turn",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "game": [
                    "None"
                ]
            }
        },
        "DummyAI.get_robber_placement": {
            "name": "get_robber_placement",
            "location": 34,
            "return": [
                "tuple[None]"
            ],
            "arguments": {
                "self": [],
                "game": []
            }
        },
        "DummyAI.robber_discard": {
            "name": "robber_discard",
            "location": 57,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": [],
                "game": [
                    "str"
                ]
            }
        }
    },
    "pyCatan-master/catan/ai/smart_placement_ai.py": {
        "SmartPlacementAI.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "color": [
                    "str"
                ],
                "game": [
                    "str",
                    "None",
                    "typing.IO"
                ]
            }
        },
        "SmartPlacementAI._prepare": {
            "name": "_prepare",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "game": []
            }
        },
        "SmartPlacementAI._eval_vertex_value": {
            "name": "_eval_vertex_value",
            "location": 31,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "game": [
                    "tuple[typing.Union[int,int]]",
                    "dict[str, typing.Any]",
                    "list[str]",
                    "int",
                    "None",
                    "str"
                ],
                "v": [
                    "tuple[typing.Union[int,int]]",
                    "dict[str, typing.Any]",
                    "list[str]",
                    "int",
                    "None",
                    "str"
                ]
            }
        },
        "SmartPlacementAI.get_road_placement": {
            "name": "get_road_placement",
            "location": 43,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "self": [],
                "game": [],
                "settlement_vertex": []
            }
        },
        "SmartPlacementAI._eval_hex_robber_score": {
            "name": "_eval_hex_robber_score",
            "location": 55,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "game": [],
                "hex": [],
                "color": [
                    "str"
                ]
            }
        },
        "SmartPlacementAI.get_robber_placement": {
            "name": "get_robber_placement",
            "location": 79,
            "return": [
                "tuple[typing.Optional[tuple[]]]"
            ],
            "arguments": {
                "self": [],
                "game": []
            }
        },
        "SmartPlacementAI.get_settlement_placement": {
            "name": "get_settlement_placement",
            "location": 105,
            "return": [],
            "arguments": {
                "self": [],
                "game": []
            }
        },
        "SmartPlacementAI.robber_discard": {
            "name": "robber_discard",
            "location": 125,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": [],
                "game": [
                    "str"
                ]
            }
        },
        "SmartPlacementAI.__get_available_settlement_vertices": {
            "name": "__get_available_settlement_vertices",
            "location": 144,
            "return": [],
            "arguments": {
                "self": [],
                "game": [
                    "float",
                    "str",
                    "None",
                    "int"
                ]
            }
        },
        "SmartPlacementAI.__get_upgradable_settlements": {
            "name": "__get_upgradable_settlements",
            "location": 151,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": [],
                "game": [
                    "str"
                ]
            }
        },
        "SmartPlacementAI.__get_available_road_placements": {
            "name": "__get_available_road_placements",
            "location": 159,
            "return": [
                "typing.Generator[tuple[]]"
            ],
            "arguments": {
                "self": [],
                "game": [
                    "int"
                ]
            }
        },
        "SmartPlacementAI.__get_playable_cards": {
            "name": "__get_playable_cards",
            "location": 166,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": [],
                "game": [
                    "str"
                ]
            }
        },
        "SmartPlacementAI.__get_random_resource": {
            "name": "__get_random_resource",
            "location": 174,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SmartPlacementAI.do_turn": {
            "name": "do_turn",
            "location": 179,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "game": []
            }
        }
    },
    "pyCatan-master/catan/ai/__init__.py": {},
    "pyCatan-master/pirate-sim/board.py": {
        "Board.__init__": {
            "name": "__init__",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Board.arrange_deck": {
            "name": "arrange_deck",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Board.make_tile_deck": {
            "name": "make_tile_deck",
            "location": 44,
            "return": [
                "list[Tile]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Board.can_build": {
            "name": "can_build",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "v": [
                    "str",
                    "typing.Iterable[typing.Any]"
                ]
            }
        },
        "Board.tokenize_deck": {
            "name": "tokenize_deck",
            "location": 63,
            "return": [],
            "arguments": {
                "self": [],
                "deck": [
                    "bytes"
                ]
            }
        },
        "Board.get_rolled_tile": {
            "name": "get_rolled_tile",
            "location": 91,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": [],
                "roll": [
                    "int",
                    "float",
                    "str",
                    "bytes",
                    "typing.Iterator"
                ]
            }
        }
    },
    "pyCatan-master/pirate-sim/buildings.py": {
        "Building.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "owner": [
                    "int",
                    "dict[str, str]",
                    "float"
                ]
            }
        },
        "Building.player": {
            "name": "player",
            "location": 15,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "House.__init__": {
            "name": "__init__",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "owner": [
                    "bool",
                    "None",
                    "list[]",
                    "typing.Callable[, ]",
                    "str",
                    "dict[str, typing.Any]"
                ],
                "vertex": [
                    "None",
                    "typing.Sequence[str]",
                    "str",
                    "bool",
                    "list[tuple[typing.Union[int,int]]]",
                    "float"
                ],
                "is_city": [
                    "bool"
                ]
            }
        },
        "House.vertex": {
            "name": "vertex",
            "location": 31,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "House.points": {
            "name": "points",
            "location": 36,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "House.upgrade": {
            "name": "upgrade",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "House.is_city": {
            "name": "is_city",
            "location": 46,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "House.__str__": {
            "name": "__str__",
            "location": 51,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Road.__init__": {
            "name": "__init__",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "owner": [
                    "bool",
                    "None",
                    "list[]",
                    "typing.Callable[, ]",
                    "float"
                ],
                "v1": [
                    "None",
                    "bool",
                    "typing.Sequence[str]"
                ],
                "v2": [
                    "None",
                    "bool",
                    "typing.Sequence[str]"
                ]
            }
        },
        "Road._sanity_check": {
            "name": "_sanity_check",
            "location": 72,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Road.vertices": {
            "name": "vertices",
            "location": 79,
            "return": [
                "set[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Road.__str__": {
            "name": "__str__",
            "location": 84,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pyCatan-master/pirate-sim/catan_engine.py": {
        "Engine.__init__": {
            "name": "__init__",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Engine.initial_placement": {
            "name": "initial_placement",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Engine.roll": {
            "name": "roll",
            "location": 83,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "pyCatan-master/pirate-sim/catan_pirates.py": {
        "DEBUG": {
            "name": "DEBUG",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "flag": [
                    "str",
                    "int",
                    "float",
                    "None"
                ],
                "item": [
                    "int",
                    "float",
                    "None",
                    "typing.Callable[, ]"
                ]
            }
        },
        "get_turn": {
            "name": "get_turn",
            "location": 28,
            "return": [],
            "arguments": {
                "dice_roll_count": [
                    "bool"
                ]
            }
        },
        "CatanSimul.__init__": {
            "name": "__init__",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "player": [
                    "int",
                    "float"
                ],
                "settlement_initial_quality": []
            }
        },
        "CatanSimul.is_my_turn": {
            "name": "is_my_turn",
            "location": 56,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "CatanSimul.do_dice_roll": {
            "name": "do_dice_roll",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CatanSimul.build_settlement": {
            "name": "build_settlement",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "settlement_quality": [
                    "str",
                    "list[]",
                    "float",
                    "tuple[]",
                    "typing.Callable[[], None]"
                ]
            }
        },
        "CatanSimul.do_build": {
            "name": "do_build",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CatanSimul.do_simul": {
            "name": "do_simul",
            "location": 99,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pyCatan-master/pirate-sim/player.py": {
        "Player.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "color": [
                    "int",
                    "float"
                ]
            }
        },
        "Player.add_cards": {
            "name": "add_cards",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cards": [
                    "list[]",
                    "list[str]",
                    "str",
                    "None"
                ]
            }
        },
        "Player.color": {
            "name": "color",
            "location": 19,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "pyCatan-master/pirate-sim/resource.py": {
        "Resource.__init__": {
            "name": "__init__",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "r": [
                    "typing.Type"
                ]
            }
        },
        "Resource.name": {
            "name": "name",
            "location": 11,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Resource.__str__": {
            "name": "__str__",
            "location": 14,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "pyCatan-master/pirate-sim/tile.py": {
        "Tile.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "resource": [
                    "int",
                    "float",
                    "str"
                ]
            }
        },
        "Tile.resource": {
            "name": "resource",
            "location": 36,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Tile.name": {
            "name": "name",
            "location": 41,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Tile.place": {
            "name": "place",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "token": [
                    "str",
                    "bool"
                ]
            }
        },
        "Tile.number": {
            "name": "number",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Tile.letter": {
            "name": "letter",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Tile.set_vertices": {
            "name": "set_vertices",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "v": [
                    "list[str]"
                ]
            }
        },
        "Tile.get_buildable_vertices": {
            "name": "get_buildable_vertices",
            "location": 69,
            "return": [
                "set[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Tile.get_vertices": {
            "name": "get_vertices",
            "location": 79,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Tile.add_house": {
            "name": "add_house",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "h": [
                    "float",
                    "int"
                ],
                "vertex": [
                    "int",
                    "dict[, ]",
                    "bytes",
                    "str",
                    "list[str]"
                ]
            }
        },
        "Tile.rolled": {
            "name": "rolled",
            "location": 90,
            "return": [
                "dict[, list[]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Tile.print_tile": {
            "name": "print_tile",
            "location": 104,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pyCatan-master/pirate-sim/token.py": {
        "cmp": {
            "name": "cmp",
            "location": 8,
            "return": [
                "int"
            ],
            "arguments": {
                "a": [
                    "int",
                    "float"
                ],
                "b": [
                    "int",
                    "float"
                ]
            }
        },
        "Token.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "letter": [
                    "int",
                    "float"
                ],
                "number": [
                    "int",
                    "float"
                ]
            }
        },
        "Token.__str__": {
            "name": "__str__",
            "location": 23,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Token.letter": {
            "name": "letter",
            "location": 28,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Token.number": {
            "name": "number",
            "location": 33,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Token.__cmp__": {
            "name": "__cmp__",
            "location": 38,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Token.make_tokens": {
            "name": "make_tokens",
            "location": 46,
            "return": [
                "list[Token]"
            ],
            "arguments": {
                "letters": [
                    "str"
                ],
                "number": [
                    "str",
                    "float"
                ]
            }
        },
        "Token.make_all_tokens": {
            "name": "make_all_tokens",
            "location": 52,
            "return": [
                "list[]"
            ],
            "arguments": {}
        }
    },
    "pyCatan-master/ui/load_screen.py": {
        "play_game": {
            "name": "play_game",
            "location": 176,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "LoadScreen.__init__": {
            "name": "__init__",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "master": [
                    "bool",
                    "str",
                    "typing.Sequence[typing.Any]",
                    "tuple[typing.Union[float,float]]"
                ],
                "debug_flag": [
                    "bool"
                ]
            }
        },
        "LoadScreen.create_ui": {
            "name": "create_ui",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LoadScreen.create_logo": {
            "name": "create_logo",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LoadScreen.create_debug_window": {
            "name": "create_debug_window",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LoadScreen.create_num_player_choice": {
            "name": "create_num_player_choice",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LoadScreen.select_num_players": {
            "name": "select_num_players",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "number": [
                    "int",
                    "str",
                    "list[]",
                    "list[str]"
                ]
            }
        },
        "LoadScreen.create_color_choice": {
            "name": "create_color_choice",
            "location": 99,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LoadScreen.select_color": {
            "name": "select_color",
            "location": 117,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "color": [
                    "typing.Callable[..., collections.abc.Awaitable[]]",
                    "str",
                    "int",
                    "dict[, ]"
                ]
            }
        },
        "LoadScreen.get_color_choice_rect_tag": {
            "name": "get_color_choice_rect_tag",
            "location": 134,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": [],
                "color": [
                    "int",
                    "tuple[typing.Union[int,int]]"
                ]
            }
        },
        "LoadScreen.create_color_choice_rect": {
            "name": "create_color_choice_rect",
            "location": 139,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "int",
                    "float",
                    "typing.Sequence[int]"
                ],
                "y": [
                    "int",
                    "float",
                    "typing.Sequence[int]"
                ],
                "color": [
                    "int",
                    "typing.Hashable",
                    "float"
                ]
            }
        },
        "CatanGame.__init__": {
            "name": "__init__",
            "location": 167,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "master": [
                    "str",
                    "bool"
                ],
                "debug": [
                    "bool"
                ]
            }
        }
    },
    "pyCatan-master/ui/ui_constants.py": {}
}
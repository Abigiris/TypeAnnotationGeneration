{
    "pyUmbral-master/setup.py": {
        "VerifyVersionCommand.run": {
            "name": "run",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pyUmbral-master/docs/examples/umbral_simple_api.py": {},
    "pyUmbral-master/docs/source/conf.py": {},
    "pyUmbral-master/tests/conftest.py": {
        "alices_keys": {
            "name": "alices_keys",
            "location": 7,
            "return": [
                "tuple[]"
            ],
            "arguments": {}
        },
        "bobs_keys": {
            "name": "bobs_keys",
            "location": 14,
            "return": [
                "tuple[]"
            ],
            "arguments": {}
        },
        "verification_keys": {
            "name": "verification_keys",
            "location": 21,
            "return": [
                "tuple[typing.Union[int,list[list[typing.Any]],str]]"
            ],
            "arguments": {
                "alices_keys": [
                    "bytes",
                    "str"
                ],
                "bobs_keys": [
                    "bytes",
                    "str"
                ]
            }
        },
        "kfrags": {
            "name": "kfrags",
            "location": 32,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "alices_keys": [
                    "bytes",
                    "bool",
                    "tuple[int]"
                ],
                "bobs_keys": [
                    "bytes",
                    "set[str]",
                    "int"
                ]
            }
        },
        "message": {
            "name": "message",
            "location": 42,
            "return": [
                "bytes"
            ],
            "arguments": {}
        },
        "capsule_and_ciphertext": {
            "name": "capsule_and_ciphertext",
            "location": 53,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "alices_keys": [
                    "str",
                    "bytes",
                    "tuple[int]",
                    "bytearray"
                ],
                "message": [
                    "bytes"
                ]
            }
        },
        "capsule": {
            "name": "capsule",
            "location": 60,
            "return": [
                "int",
                "dict[, ]",
                "list[int]",
                "list[list[int]]",
                "str"
            ],
            "arguments": {
                "capsule_and_ciphertext": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ]
            }
        }
    },
    "pyUmbral-master/tests/test_capsule.py": {
        "test_capsule_serialization": {
            "name": "test_capsule_serialization",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "alices_keys": [
                    "str",
                    "bool"
                ]
            }
        },
        "test_capsule_is_hashable": {
            "name": "test_capsule_is_hashable",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "alices_keys": [
                    "str",
                    "tuple[typing.Union[int,int]]"
                ]
            }
        },
        "test_open_original": {
            "name": "test_open_original",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "alices_keys": [
                    "str",
                    "tuple[typing.Union[int,int]]"
                ]
            }
        },
        "test_open_reencrypted": {
            "name": "test_open_reencrypted",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "alices_keys": [
                    "str",
                    "bool"
                ],
                "bobs_keys": [
                    "int",
                    "str"
                ]
            }
        },
        "test_capsule_str": {
            "name": "test_capsule_str",
            "location": 105,
            "return": [
                "None"
            ],
            "arguments": {
                "capsule": []
            }
        }
    },
    "pyUmbral-master/tests/test_capsule_frag.py": {
        "test_cfrag_serialization": {
            "name": "test_cfrag_serialization",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "verification_keys": [
                    "str"
                ],
                "capsule": [
                    "int",
                    "typing.Sequence[int]",
                    "tuple[typing.Union[str,dict[, ]]]",
                    "list[str]",
                    "str"
                ],
                "kfrags": [
                    "str"
                ]
            }
        },
        "test_cfrag_with_wrong_capsule": {
            "name": "test_cfrag_with_wrong_capsule",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "verification_keys": [
                    "str"
                ],
                "kfrags": [
                    "str"
                ],
                "capsule_and_ciphertext": [
                    "str",
                    "int"
                ],
                "message": [
                    "str",
                    "int"
                ]
            }
        },
        "test_cfrag_with_wrong_data": {
            "name": "test_cfrag_with_wrong_data",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "verification_keys": [
                    "str"
                ],
                "kfrags": [
                    "str",
                    "bytes"
                ],
                "capsule_and_ciphertext": [
                    "str",
                    "bytes",
                    "bool"
                ],
                "message": [
                    "str",
                    "int",
                    "list[str]"
                ]
            }
        },
        "test_cfrag_is_hashable": {
            "name": "test_cfrag_is_hashable",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "verification_keys": [
                    "str"
                ],
                "capsule": [
                    "str",
                    "int",
                    "dict[, ]"
                ],
                "kfrags": [
                    "str",
                    "bytes"
                ]
            }
        },
        "test_cfrag_str": {
            "name": "test_cfrag_str",
            "location": 109,
            "return": [
                "None"
            ],
            "arguments": {
                "capsule": [
                    "str",
                    "int"
                ],
                "kfrags": [
                    "str"
                ]
            }
        },
        "test_from_verified_bytes": {
            "name": "test_from_verified_bytes",
            "location": 119,
            "return": [
                "None"
            ],
            "arguments": {
                "capsule": [
                    "int",
                    "str"
                ],
                "kfrags": [
                    "str"
                ]
            }
        },
        "test_serialized_size": {
            "name": "test_serialized_size",
            "location": 126,
            "return": [
                "None"
            ],
            "arguments": {
                "capsule": [],
                "kfrags": []
            }
        }
    },
    "pyUmbral-master/tests/test_compatibility.py": {
        "pytest_generate_tests": {
            "name": "pytest_generate_tests",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "metafunc": []
            }
        },
        "_create_keypair": {
            "name": "_create_keypair",
            "location": 22,
            "return": [
                "tuple[bytes]"
            ],
            "arguments": {
                "umbral": [
                    "float",
                    "int",
                    "str",
                    "list[list[int]]",
                    "list[dict[, ]]"
                ]
            }
        },
        "_restore_keys": {
            "name": "_restore_keys",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "umbral": [
                    "bytes",
                    "str"
                ],
                "sk_bytes": [
                    "int",
                    "None",
                    "float",
                    "str",
                    "bytes"
                ],
                "pk_bytes": [
                    "int",
                    "str",
                    "bytearray"
                ]
            }
        },
        "test_keys": {
            "name": "test_keys",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "implementations": [
                    "str",
                    "dict[, ]",
                    "int"
                ]
            }
        },
        "_create_sk_factory_and_sk": {
            "name": "_create_sk_factory_and_sk",
            "location": 45,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "umbral": [
                    "str",
                    "bool"
                ],
                "skf_label": [
                    "str",
                    "bytes",
                    "int",
                    "dict[str, typing.Any]"
                ],
                "key_label": [
                    "str",
                    "int",
                    "dict[, ]"
                ]
            }
        },
        "_check_sk_is_same": {
            "name": "_check_sk_is_same",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "umbral": [
                    "bytes",
                    "str"
                ],
                "skf_label": [
                    "bool",
                    "list[list[str]]",
                    "float",
                    "typing.Callable[, ]"
                ],
                "key_label": [
                    "bytes"
                ],
                "skf_bytes": [
                    "str",
                    "bytes",
                    "None"
                ],
                "derived_skf_bytes": [
                    "bytes",
                    "int",
                    "str"
                ],
                "sk_bytes": [
                    "int",
                    "bytes",
                    "None",
                    "float"
                ]
            }
        },
        "test_secret_key_factory": {
            "name": "test_secret_key_factory",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "implementations": []
            }
        },
        "_encrypt": {
            "name": "_encrypt",
            "location": 73,
            "return": [
                "tuple[bytes]"
            ],
            "arguments": {
                "umbral": [],
                "plaintext": [
                    "str",
                    "float",
                    "bool"
                ],
                "pk_bytes": [
                    "int",
                    "float"
                ]
            }
        },
        "_decrypt_original": {
            "name": "_decrypt_original",
            "location": 79,
            "return": [],
            "arguments": {
                "umbral": [],
                "sk_bytes": [
                    "int",
                    "float",
                    "bytes",
                    "None"
                ],
                "capsule_bytes": [],
                "ciphertext": [
                    "int",
                    "list[int]",
                    "None"
                ]
            }
        },
        "test_encrypt_decrypt": {
            "name": "test_encrypt_decrypt",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "implementations": [
                    "str",
                    "float"
                ]
            }
        },
        "_generate_kfrags": {
            "name": "_generate_kfrags",
            "location": 102,
            "return": [
                "list[bytes]"
            ],
            "arguments": {
                "umbral": [],
                "delegating_sk_bytes": [
                    "int",
                    "None",
                    "float"
                ],
                "receiving_pk_bytes": [
                    "int"
                ],
                "signing_sk_bytes": [
                    "int",
                    "None",
                    "float"
                ],
                "threshold": [
                    "int"
                ],
                "shares": [
                    "int"
                ]
            }
        },
        "_verify_kfrags": {
            "name": "_verify_kfrags",
            "location": 121,
            "return": [
                "list[]"
            ],
            "arguments": {
                "umbral": [
                    "int",
                    "list[bytes]",
                    "str",
                    "bytes"
                ],
                "kfrags_bytes": [
                    "list[bytes]",
                    "str"
                ],
                "verifying_pk_bytes": [
                    "int"
                ],
                "delegating_pk_bytes": [
                    "int"
                ],
                "receiving_pk_bytes": [
                    "int"
                ]
            }
        },
        "test_kfrags": {
            "name": "test_kfrags",
            "location": 131,
            "return": [
                "None"
            ],
            "arguments": {
                "implementations": [
                    "str",
                    "float"
                ]
            }
        },
        "_reencrypt": {
            "name": "_reencrypt",
            "location": 152,
            "return": [
                "list[bytes]"
            ],
            "arguments": {
                "umbral": [
                    "str",
                    "int",
                    "bytes"
                ],
                "verifying_pk_bytes": [
                    "int",
                    "bytes",
                    "str",
                    "tuple[typing.Union[int,int]]",
                    "list[float]"
                ],
                "delegating_pk_bytes": [
                    "int",
                    "bytes",
                    "str",
                    "tuple[typing.Union[int,int]]",
                    "list[float]"
                ],
                "receiving_pk_bytes": [
                    "int",
                    "bytes",
                    "str",
                    "tuple[typing.Union[int,int]]",
                    "list[float]"
                ],
                "capsule_bytes": [],
                "kfrags_bytes": [
                    "int",
                    "bytes",
                    "str",
                    "tuple[typing.Union[int,int]]",
                    "list[float]"
                ],
                "threshold": [
                    "int"
                ]
            }
        },
        "_decrypt_reencrypted": {
            "name": "_decrypt_reencrypted",
            "location": 161,
            "return": [],
            "arguments": {
                "umbral": [],
                "receiving_sk_bytes": [
                    "int",
                    "None",
                    "float"
                ],
                "delegating_pk_bytes": [
                    "int"
                ],
                "verifying_pk_bytes": [
                    "int"
                ],
                "capsule_bytes": [],
                "cfrags_bytes": [
                    "str"
                ],
                "ciphertext": [
                    "int",
                    "tuple[]",
                    "list[int]",
                    "None"
                ]
            }
        },
        "test_reencrypt": {
            "name": "test_reencrypt",
            "location": 190,
            "return": [
                "None"
            ],
            "arguments": {
                "implementations": [
                    "str",
                    "float"
                ]
            }
        },
        "_sign_message": {
            "name": "_sign_message",
            "location": 223,
            "return": [
                "bytes"
            ],
            "arguments": {
                "umbral": [
                    "int",
                    "bytes",
                    "str",
                    "float",
                    "None",
                    "bytearray"
                ],
                "sk_bytes": [
                    "int",
                    "float"
                ],
                "message": [
                    "int",
                    "float",
                    "str",
                    "list[]"
                ]
            }
        },
        "_verify_message": {
            "name": "_verify_message",
            "location": 230,
            "return": [],
            "arguments": {
                "umbral": [
                    "bytes",
                    "str",
                    "bool",
                    "float"
                ],
                "pk_bytes": [
                    "int",
                    "float"
                ],
                "signature_bytes": [
                    "str",
                    "list[str]",
                    "int",
                    "float"
                ],
                "message": [
                    "int",
                    "list[int]",
                    "list[float]",
                    "list[list[int]]"
                ]
            }
        },
        "test_signer": {
            "name": "test_signer",
            "location": 236,
            "return": [
                "None"
            ],
            "arguments": {
                "implementations": [
                    "str",
                    "float"
                ]
            }
        },
        "_measure_sizes": {
            "name": "_measure_sizes",
            "location": 254,
            "return": [
                "dict[, ]"
            ],
            "arguments": {
                "umbral": [
                    "typing.DefaultDict",
                    "str"
                ]
            }
        },
        "test_serialization_size": {
            "name": "test_serialization_size",
            "location": 271,
            "return": [
                "None"
            ],
            "arguments": {
                "implementations": []
            }
        }
    },
    "pyUmbral-master/tests/test_curve.py": {
        "test_supported_curves": {
            "name": "test_supported_curves",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_create_by_nid": {
            "name": "test_create_by_nid",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_create_by_name": {
            "name": "test_create_by_name",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_curve_constants": {
            "name": "test_curve_constants",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_curve_str": {
            "name": "test_curve_str",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "_curve_info": {
            "name": "_curve_info",
            "location": 69,
            "return": [],
            "arguments": {
                "curve": [
                    "typing.Callable[int, None]",
                    "list[tuple[typing.Union[int,int,int]]]",
                    "bool"
                ]
            }
        },
        "test_secp256k1": {
            "name": "test_secp256k1",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "pyUmbral-master/tests/test_curve_point.py": {
        "test_random": {
            "name": "test_random",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_generator_point": {
            "name": "test_generator_point",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_invalid_serialized_points": {
            "name": "test_invalid_serialized_points",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_serialize_point_at_infinity": {
            "name": "test_serialize_point_at_infinity",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_to_affine": {
            "name": "test_to_affine",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_identity_to_affine": {
            "name": "test_identity_to_affine",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "pyUmbral-master/tests/test_curve_scalar.py": {
        "test_random": {
            "name": "test_random",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_from_and_to_int": {
            "name": "test_from_and_to_int",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_from_digest": {
            "name": "test_from_digest",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_eq": {
            "name": "test_eq",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_serialization_rotations_of_1": {
            "name": "test_serialization_rotations_of_1",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_invalid_deserialization": {
            "name": "test_invalid_deserialization",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_add": {
            "name": "test_add",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_sub": {
            "name": "test_sub",
            "location": 103,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_mul": {
            "name": "test_mul",
            "location": 112,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_invert": {
            "name": "test_invert",
            "location": 121,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "pyUmbral-master/tests/test_dem.py": {
        "test_encrypt_decrypt": {
            "name": "test_encrypt_decrypt",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_malformed_ciphertext": {
            "name": "test_malformed_ciphertext",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_encrypt_decrypt_associated_data": {
            "name": "test_encrypt_decrypt_associated_data",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "pyUmbral-master/tests/test_keys.py": {
        "test_gen_key": {
            "name": "test_gen_key",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_secret_scalar": {
            "name": "test_secret_scalar",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_derive_key_from_label": {
            "name": "test_derive_key_from_label",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_derive_skf_from_label": {
            "name": "test_derive_skf_from_label",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_from_secure_randomness": {
            "name": "test_from_secure_randomness",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_secret_key_serialization": {
            "name": "test_secret_key_serialization",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_secret_key_str": {
            "name": "test_secret_key_str",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_secret_key_hash": {
            "name": "test_secret_key_hash",
            "location": 102,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_secret_key_factory_str": {
            "name": "test_secret_key_factory_str",
            "location": 109,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_secret_key_factory_hash": {
            "name": "test_secret_key_factory_hash",
            "location": 115,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_public_key_serialization": {
            "name": "test_public_key_serialization",
            "location": 122,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_public_key_point": {
            "name": "test_public_key_point",
            "location": 131,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_public_key_str": {
            "name": "test_public_key_str",
            "location": 136,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_secret_key_factory_serialization": {
            "name": "test_secret_key_factory_serialization",
            "location": 142,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_public_key_is_hashable": {
            "name": "test_public_key_is_hashable",
            "location": 154,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "pyUmbral-master/tests/test_key_frag.py": {
        "test_kfrag_serialization": {
            "name": "test_kfrag_serialization",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "verification_keys": [
                    "str"
                ],
                "kfrags": []
            }
        },
        "test_kfrag_verification": {
            "name": "test_kfrag_verification",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "verification_keys": [
                    "str"
                ],
                "kfrags": [
                    "str"
                ]
            }
        },
        "test_kfrag_signing": {
            "name": "test_kfrag_signing",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "alices_keys": [
                    "bool",
                    "bytes"
                ],
                "bobs_keys": [
                    "int"
                ],
                "sign_delegating_key": [
                    "bytes",
                    "str",
                    "typing.Iterable[bytes]"
                ],
                "sign_receiving_key": [
                    "bytes",
                    "str",
                    "typing.Iterable[bytes]"
                ]
            }
        },
        "test_wrong_threshold": {
            "name": "test_wrong_threshold",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {
                "alices_keys": [
                    "str",
                    "bool"
                ],
                "bobs_keys": [
                    "str",
                    "int"
                ]
            }
        },
        "test_kfrag_is_hashable": {
            "name": "test_kfrag_is_hashable",
            "location": 102,
            "return": [
                "None"
            ],
            "arguments": {
                "verification_keys": [
                    "str"
                ],
                "kfrags": [
                    "bytes",
                    "str",
                    "list[bytes]"
                ]
            }
        },
        "test_kfrag_str": {
            "name": "test_kfrag_str",
            "location": 120,
            "return": [
                "None"
            ],
            "arguments": {
                "kfrags": []
            }
        },
        "test_from_verified_bytes": {
            "name": "test_from_verified_bytes",
            "location": 129,
            "return": [
                "None"
            ],
            "arguments": {
                "kfrags": [
                    "bytes"
                ]
            }
        },
        "test_serialized_size": {
            "name": "test_serialized_size",
            "location": 135,
            "return": [
                "None"
            ],
            "arguments": {
                "kfrags": []
            }
        }
    },
    "pyUmbral-master/tests/test_pre.py": {
        "test_public_key_encryption": {
            "name": "test_public_key_encryption",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "alices_keys": [
                    "bytes",
                    "str",
                    "int"
                ]
            }
        },
        "test_simple_api": {
            "name": "test_simple_api",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "shares": [
                    "bool"
                ],
                "threshold": [
                    "bool"
                ]
            }
        },
        "test_reencrypt_unverified_kfrag": {
            "name": "test_reencrypt_unverified_kfrag",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {
                "capsule": [
                    "str",
                    "float"
                ],
                "kfrags": []
            }
        },
        "test_decrypt_unverified_cfrag": {
            "name": "test_decrypt_unverified_cfrag",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {
                "verification_keys": [
                    "str"
                ],
                "bobs_keys": [
                    "str",
                    "int"
                ],
                "capsule_and_ciphertext": [
                    "str",
                    "int"
                ],
                "kfrags": [
                    "str"
                ]
            }
        },
        "test_wrong_shares": {
            "name": "test_wrong_shares",
            "location": 114,
            "return": [
                "None"
            ],
            "arguments": {
                "alices_keys": [
                    "str",
                    "bool"
                ],
                "bobs_keys": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "pyUmbral-master/tests/test_serializable.py": {
        "test_normal_operation": {
            "name": "test_normal_operation",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_too_many_bytes": {
            "name": "test_too_many_bytes",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_not_enough_bytes": {
            "name": "test_not_enough_bytes",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_bool_bytes": {
            "name": "test_bool_bytes",
            "location": 97,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_split_bool": {
            "name": "test_split_bool",
            "location": 105,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "A.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "val": [
                    "int",
                    "float"
                ]
            }
        },
        "A.serialized_size": {
            "name": "serialized_size",
            "location": 15,
            "return": [
                "int"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "typing.Sequence[typing.Any]",
                    "typing.Callable[, ]"
                ]
            }
        },
        "A._from_exact_bytes": {
            "name": "_from_exact_bytes",
            "location": 19,
            "return": [],
            "arguments": {
                "cls": [
                    "bytes",
                    "int",
                    "list[int]",
                    "dict[str, str]"
                ],
                "data": [
                    "int"
                ]
            }
        },
        "A.__bytes__": {
            "name": "__bytes__",
            "location": 22,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "A.__eq__": {
            "name": "__eq__",
            "location": 25,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "int"
                ]
            }
        },
        "B.__init__": {
            "name": "__init__",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "val": [
                    "int",
                    "float"
                ]
            }
        },
        "B.serialized_size": {
            "name": "serialized_size",
            "location": 36,
            "return": [
                "int"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "typing.Sequence[typing.Any]",
                    "typing.Callable[, ]"
                ]
            }
        },
        "B._from_exact_bytes": {
            "name": "_from_exact_bytes",
            "location": 40,
            "return": [],
            "arguments": {
                "cls": [
                    "bytes",
                    "int",
                    "list[int]",
                    "dict[str, str]"
                ],
                "data": [
                    "int"
                ]
            }
        },
        "B.__bytes__": {
            "name": "__bytes__",
            "location": 43,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "B.__eq__": {
            "name": "__eq__",
            "location": 46,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "C.__init__": {
            "name": "__init__",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "a": [
                    "int",
                    "None"
                ],
                "b": [
                    "int",
                    "bytes",
                    "str"
                ]
            }
        },
        "C.serialized_size": {
            "name": "serialized_size",
            "location": 57,
            "return": [],
            "arguments": {
                "cls": [
                    "bool",
                    "typing.Sequence[typing.Any]",
                    "typing.Callable[, ]"
                ]
            }
        },
        "C._from_exact_bytes": {
            "name": "_from_exact_bytes",
            "location": 61,
            "return": [],
            "arguments": {
                "cls": [],
                "data": [
                    "str",
                    "bytes",
                    "None",
                    "list[]",
                    "set[str]",
                    "list[str]"
                ]
            }
        },
        "C.__bytes__": {
            "name": "__bytes__",
            "location": 65,
            "return": [
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "C.__eq__": {
            "name": "__eq__",
            "location": 68,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "bool"
                ]
            }
        }
    },
    "pyUmbral-master/tests/test_signing.py": {
        "test_sign_and_verify": {
            "name": "test_sign_and_verify",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "execution_number": [
                    "str"
                ]
            }
        },
        "test_sign_serialize_and_verify": {
            "name": "test_sign_serialize_and_verify",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "execution_number": [
                    "str"
                ]
            }
        },
        "test_verification_fail": {
            "name": "test_verification_fail",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_signature_str": {
            "name": "test_signature_str",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_signature_is_hashable": {
            "name": "test_signature_is_hashable",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_signer_str": {
            "name": "test_signer_str",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_signer_hash": {
            "name": "test_signer_hash",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_signer_bytes": {
            "name": "test_signer_bytes",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_signer_pubkey": {
            "name": "test_signer_pubkey",
            "location": 107,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "pyUmbral-master/tests/test_vectors.py": {
        "test_scalar_operations": {
            "name": "test_scalar_operations",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_scalar_hash": {
            "name": "test_scalar_hash",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_point_operations": {
            "name": "test_point_operations",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_unsafe_hash_to_point": {
            "name": "test_unsafe_hash_to_point",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_kfrags": {
            "name": "test_kfrags",
            "location": 110,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_cfrags": {
            "name": "test_cfrags",
            "location": 131,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "pyUmbral-master/tests/__init__.py": {},
    "pyUmbral-master/tests/metrics/reencryption_benchmark.py": {
        "pytest_generate_tests": {
            "name": "pytest_generate_tests",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "metafunc": []
            }
        },
        "__standard_encryption_api": {
            "name": "__standard_encryption_api",
            "location": 38,
            "return": [
                "tuple[Signer]"
            ],
            "arguments": {
                "umbral": [
                    "int",
                    "dict[str, dict[str, typing.Any]]",
                    "str",
                    "typing.Callable[, ]",
                    "None"
                ]
            }
        },
        "test_generate_kfrags_performance": {
            "name": "test_generate_kfrags_performance",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "benchmark": [
                    "int",
                    "typing.Type"
                ],
                "m": [
                    "int",
                    "str"
                ],
                "n": [
                    "int",
                    "str"
                ],
                "umbral": [
                    "int",
                    "typing.Type"
                ]
            }
        },
        "test_random_frag_reencryption_performance": {
            "name": "test_random_frag_reencryption_performance",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "benchmark": [
                    "int",
                    "list[str]"
                ],
                "m": [
                    "int",
                    "str"
                ],
                "n": [
                    "int",
                    "str"
                ],
                "umbral": [
                    "int",
                    "list[str]"
                ]
            }
        },
        "test_single_frag_reencryption_performance": {
            "name": "test_single_frag_reencryption_performance",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {
                "benchmark": [
                    "bool",
                    "typing.Iterable[typing.Any]",
                    "typing.Iterable[str]",
                    "None",
                    "typing.Sequence['cirq.Qid']"
                ],
                "m": [
                    "int"
                ],
                "n": [
                    "int"
                ],
                "umbral": []
            }
        },
        "test_generate_kfrags_performance.__setup": {
            "name": "__setup",
            "location": 67,
            "return": [
                "tuple[typing.Union[tuple[bool],dict[, ]]]"
            ],
            "arguments": {}
        },
        "test_random_frag_reencryption_performance.__setup": {
            "name": "__setup",
            "location": 87,
            "return": [
                "tuple[typing.Union[tuple[bool],dict[, ]]]"
            ],
            "arguments": {}
        }
    },
    "pyUmbral-master/tests/metrics/reencryption_firehose.py": {
        "__produce_kfrags_and_capsule": {
            "name": "__produce_kfrags_and_capsule",
            "location": 14,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "m": [
                    "int",
                    "tuple[typing.Union[int,int]]"
                ],
                "n": [
                    "int",
                    "tuple[typing.Union[int,int]]"
                ]
            }
        },
        "firehose": {
            "name": "firehose",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "m": [
                    "int"
                ],
                "n": [
                    "int"
                ]
            }
        }
    },
    "pyUmbral-master/umbral/capsule.py": {
        "lambda_coeff": {
            "name": "lambda_coeff",
            "location": 12,
            "return": [],
            "arguments": {
                "xs": [],
                "i": []
            }
        },
        "Capsule.__init__": {
            "name": "__init__",
            "location": 26,
            "return": [],
            "arguments": {
                "self": [],
                "point_e": [],
                "point_v": [],
                "signature": []
            }
        },
        "Capsule.serialized_size": {
            "name": "serialized_size",
            "location": 35,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "Capsule._from_exact_bytes": {
            "name": "_from_exact_bytes",
            "location": 39,
            "return": [],
            "arguments": {
                "cls": [],
                "data": []
            }
        },
        "Capsule.__bytes__": {
            "name": "__bytes__",
            "location": 45,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Capsule.from_public_key": {
            "name": "from_public_key",
            "location": 49,
            "return": [],
            "arguments": {
                "cls": [],
                "delegating_pk": []
            }
        },
        "Capsule.open_original": {
            "name": "open_original",
            "location": 65,
            "return": [],
            "arguments": {
                "self": [],
                "delegating_sk": []
            }
        },
        "Capsule.open_reencrypted": {
            "name": "open_reencrypted",
            "location": 68,
            "return": [],
            "arguments": {
                "self": [],
                "receiving_sk": [],
                "delegating_pk": [],
                "cfrags": []
            }
        },
        "Capsule._components": {
            "name": "_components",
            "location": 116,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Capsule._verify": {
            "name": "_verify",
            "location": 119,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Capsule.__eq__": {
            "name": "__eq__",
            "location": 125,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Capsule.__hash__": {
            "name": "__hash__",
            "location": 128,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Capsule.__str__": {
            "name": "__str__",
            "location": 131,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "pyUmbral-master/umbral/capsule_frag.py": {
        "CapsuleFragProof.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [],
            "arguments": {
                "self": [],
                "point_e2": [],
                "point_v2": [],
                "kfrag_commitment": [],
                "kfrag_pok": [],
                "signature": [],
                "kfrag_signature": []
            }
        },
        "CapsuleFragProof._components": {
            "name": "_components",
            "location": 33,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CapsuleFragProof.__eq__": {
            "name": "__eq__",
            "location": 41,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "CapsuleFragProof.serialized_size": {
            "name": "serialized_size",
            "location": 45,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "CapsuleFragProof._from_exact_bytes": {
            "name": "_from_exact_bytes",
            "location": 49,
            "return": [],
            "arguments": {
                "cls": [],
                "data": []
            }
        },
        "CapsuleFragProof.__bytes__": {
            "name": "__bytes__",
            "location": 52,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CapsuleFragProof.from_kfrag_and_cfrag": {
            "name": "from_kfrag_and_cfrag",
            "location": 56,
            "return": [],
            "arguments": {
                "cls": [],
                "capsule": [],
                "kfrag": [],
                "cfrag_e1": [],
                "cfrag_v1": []
            }
        },
        "CapsuleFrag.__init__": {
            "name": "__init__",
            "location": 103,
            "return": [],
            "arguments": {
                "self": [],
                "point_e1": [],
                "point_v1": [],
                "kfrag_id": [],
                "precursor": [],
                "proof": []
            }
        },
        "CapsuleFrag._components": {
            "name": "_components",
            "location": 117,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CapsuleFrag.__eq__": {
            "name": "__eq__",
            "location": 124,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "CapsuleFrag.__hash__": {
            "name": "__hash__",
            "location": 127,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CapsuleFrag.__str__": {
            "name": "__str__",
            "location": 130,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CapsuleFrag.serialized_size": {
            "name": "serialized_size",
            "location": 134,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "CapsuleFrag._from_exact_bytes": {
            "name": "_from_exact_bytes",
            "location": 138,
            "return": [],
            "arguments": {
                "cls": [],
                "data": []
            }
        },
        "CapsuleFrag.__bytes__": {
            "name": "__bytes__",
            "location": 141,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CapsuleFrag.reencrypted": {
            "name": "reencrypted",
            "location": 145,
            "return": [],
            "arguments": {
                "cls": [],
                "capsule": [],
                "kfrag": []
            }
        },
        "CapsuleFrag.verify": {
            "name": "verify",
            "location": 158,
            "return": [],
            "arguments": {
                "self": [],
                "capsule": [],
                "verifying_pk": [],
                "delegating_pk": [],
                "receiving_pk": []
            }
        },
        "VerifiedCapsuleFrag.__init__": {
            "name": "__init__",
            "location": 225,
            "return": [],
            "arguments": {
                "self": [],
                "cfrag": []
            }
        },
        "VerifiedCapsuleFrag.__bytes__": {
            "name": "__bytes__",
            "location": 228,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "VerifiedCapsuleFrag.serialized_size": {
            "name": "serialized_size",
            "location": 232,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "VerifiedCapsuleFrag.from_verified_bytes": {
            "name": "from_verified_bytes",
            "location": 236,
            "return": [],
            "arguments": {
                "cls": [],
                "data": []
            }
        },
        "VerifiedCapsuleFrag.__eq__": {
            "name": "__eq__",
            "location": 247,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "VerifiedCapsuleFrag.__hash__": {
            "name": "__hash__",
            "location": 250,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "VerifiedCapsuleFrag.__str__": {
            "name": "__str__",
            "location": 253,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "pyUmbral-master/umbral/curve.py": {},
    "pyUmbral-master/umbral/curve_point.py": {
        "CurvePoint.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "backend_point": [
                    "int",
                    "float"
                ]
            }
        },
        "CurvePoint.generator": {
            "name": "generator",
            "location": 18,
            "return": [],
            "arguments": {
                "cls": [
                    "typing.Type",
                    "float"
                ]
            }
        },
        "CurvePoint.random": {
            "name": "random",
            "location": 22,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "CurvePoint.to_affine": {
            "name": "to_affine",
            "location": 29,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CurvePoint.serialized_size": {
            "name": "serialized_size",
            "location": 37,
            "return": [],
            "arguments": {
                "cls": [
                    "bool",
                    "typing.Sequence[typing.Any]",
                    "typing.Callable[, ]"
                ]
            }
        },
        "CurvePoint._from_exact_bytes": {
            "name": "_from_exact_bytes",
            "location": 41,
            "return": [],
            "arguments": {
                "cls": [
                    "bytes",
                    "int",
                    "typing.Callable[, ]",
                    "None",
                    "list[float]",
                    "dict[, ]"
                ],
                "data": [
                    "bytes",
                    "int",
                    "typing.Callable[, ]",
                    "None",
                    "list[float]",
                    "dict[, ]"
                ]
            }
        },
        "CurvePoint.__bytes__": {
            "name": "__bytes__",
            "location": 47,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CurvePoint.__eq__": {
            "name": "__eq__",
            "location": 53,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "CurvePoint.__mul__": {
            "name": "__mul__",
            "location": 59,
            "return": [
                "CurvePoint"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "CurvePoint.__add__": {
            "name": "__add__",
            "location": 65,
            "return": [
                "CurvePoint"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "CurvePoint.__sub__": {
            "name": "__sub__",
            "location": 71,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "CurvePoint.__neg__": {
            "name": "__neg__",
            "location": 77,
            "return": [
                "CurvePoint"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pyUmbral-master/umbral/curve_scalar.py": {
        "CurveScalar.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "backend_bignum": [
                    "int",
                    "float"
                ]
            }
        },
        "CurveScalar.random_nonzero": {
            "name": "random_nonzero",
            "location": 23,
            "return": [],
            "arguments": {
                "cls": [
                    "typing.Type",
                    "float"
                ]
            }
        },
        "CurveScalar.from_int": {
            "name": "from_int",
            "location": 30,
            "return": [],
            "arguments": {
                "cls": [
                    "str",
                    "None",
                    "int"
                ],
                "num": [
                    "str",
                    "bytes",
                    "int"
                ],
                "check_normalization": [
                    "bool"
                ]
            }
        },
        "CurveScalar.from_digest": {
            "name": "from_digest",
            "location": 39,
            "return": [],
            "arguments": {
                "cls": [],
                "digest": []
            }
        },
        "CurveScalar.serialized_size": {
            "name": "serialized_size",
            "location": 48,
            "return": [],
            "arguments": {
                "cls": [
                    "bool",
                    "typing.Sequence[typing.Any]",
                    "typing.Callable[, ]"
                ]
            }
        },
        "CurveScalar._from_exact_bytes": {
            "name": "_from_exact_bytes",
            "location": 52,
            "return": [],
            "arguments": {
                "cls": [
                    "str",
                    "bytes"
                ],
                "data": [
                    "str",
                    "bytes"
                ]
            }
        },
        "CurveScalar.__bytes__": {
            "name": "__bytes__",
            "location": 55,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CurveScalar.__int__": {
            "name": "__int__",
            "location": 61,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CurveScalar.__eq__": {
            "name": "__eq__",
            "location": 67,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "dict[, ]"
                ]
            }
        },
        "CurveScalar.one": {
            "name": "one",
            "location": 76,
            "return": [],
            "arguments": {
                "cls": [
                    "typing.Type",
                    "float"
                ]
            }
        },
        "CurveScalar.is_zero": {
            "name": "is_zero",
            "location": 79,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CurveScalar.__mul__": {
            "name": "__mul__",
            "location": 82,
            "return": [
                "CurveScalar"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "dict[, ]"
                ]
            }
        },
        "CurveScalar.__add__": {
            "name": "__add__",
            "location": 92,
            "return": [
                "CurveScalar"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "list[str]"
                ]
            }
        },
        "CurveScalar.__sub__": {
            "name": "__sub__",
            "location": 102,
            "return": [
                "CurveScalar"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "dict[, ]"
                ]
            }
        },
        "CurveScalar.invert": {
            "name": "invert",
            "location": 112,
            "return": [
                "CurveScalar"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pyUmbral-master/umbral/dem.py": {
        "kdf": {
            "name": "kdf",
            "location": 19,
            "return": [],
            "arguments": {
                "data": [
                    "typing.Callable[typing.Any, None]",
                    "str",
                    "bytes"
                ],
                "key_length": [
                    "list[bool]",
                    "str",
                    "int",
                    "bytes"
                ],
                "salt": [
                    "None",
                    "list[bool]",
                    "str",
                    "int",
                    "bytes"
                ],
                "info": [
                    "None",
                    "list[bool]",
                    "str",
                    "int",
                    "bytes"
                ]
            }
        },
        "DEM.__init__": {
            "name": "__init__",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key_material": [
                    "int",
                    "str",
                    "bytes"
                ],
                "salt": [
                    "None",
                    "int",
                    "str",
                    "bytes"
                ],
                "info": [
                    "None",
                    "int",
                    "str",
                    "bytes"
                ]
            }
        },
        "DEM.encrypt": {
            "name": "encrypt",
            "location": 46,
            "return": [],
            "arguments": {
                "self": [],
                "plaintext": [
                    "dict[, ]",
                    "dict[str, typing.Any]",
                    "dict[str, str]",
                    "typing.ValuesView",
                    "str"
                ],
                "authenticated_data": [
                    "bytes"
                ]
            }
        },
        "DEM.decrypt": {
            "name": "decrypt",
            "location": 51,
            "return": [],
            "arguments": {
                "self": [],
                "nonce_and_ciphertext": [],
                "authenticated_data": [
                    "bytes"
                ]
            }
        }
    },
    "pyUmbral-master/umbral/errors.py": {},
    "pyUmbral-master/umbral/hashing.py": {
        "hash_to_polynomial_arg": {
            "name": "hash_to_polynomial_arg",
            "location": 35,
            "return": [],
            "arguments": {
                "precursor": [
                    "dict[, ]"
                ],
                "pubkey": [
                    "dict[, ]"
                ],
                "dh_point": [
                    "dict[, ]"
                ],
                "kfrag_id": [
                    "dict[str, typing.Any]",
                    "dict[, ]"
                ]
            }
        },
        "hash_capsule_points": {
            "name": "hash_capsule_points",
            "location": 48,
            "return": [],
            "arguments": {
                "e": [
                    "dict[, ]",
                    "dict[str, float]",
                    "dict[str, tuple[]]",
                    "dict[str, bool]"
                ],
                "v": [
                    "dict[, ]",
                    "dict[str, float]",
                    "dict[str, tuple[]]",
                    "dict[str, bool]"
                ]
            }
        },
        "hash_to_shared_secret": {
            "name": "hash_to_shared_secret",
            "location": 55,
            "return": [],
            "arguments": {
                "precursor": [
                    "dict[str, typing.Union[int,str]]",
                    "dict[str, str]",
                    "dict[, ]"
                ],
                "pubkey": [
                    "dict[str, typing.Union[int,str]]",
                    "dict[str, str]",
                    "dict[, ]"
                ],
                "dh_point": [
                    "dict[str, typing.Union[int,str]]",
                    "dict[str, str]",
                    "dict[, ]"
                ]
            }
        },
        "hash_to_cfrag_verification": {
            "name": "hash_to_cfrag_verification",
            "location": 66,
            "return": [],
            "arguments": {
                "points": []
            }
        },
        "kfrag_signature_message": {
            "name": "kfrag_signature_message",
            "location": 73,
            "return": [
                "bytes"
            ],
            "arguments": {
                "kfrag_id": [],
                "commitment": [],
                "precursor": [],
                "maybe_delegating_pk": [],
                "maybe_receiving_pk": []
            }
        },
        "unsafe_hash_to_point": {
            "name": "unsafe_hash_to_point",
            "location": 98,
            "return": [],
            "arguments": {
                "dst": [
                    "str",
                    "int",
                    "dict[, ]",
                    "None"
                ],
                "data": []
            }
        },
        "Hash.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dst": [
                    "None"
                ]
            }
        },
        "Hash.update": {
            "name": "update",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "Hash.finalize": {
            "name": "finalize",
            "location": 31,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "pyUmbral-master/umbral/keys.py": {
        "SecretKey.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [],
            "arguments": {
                "self": [],
                "scalar_key": []
            }
        },
        "SecretKey.random": {
            "name": "random",
            "location": 24,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "SecretKey.public_key": {
            "name": "public_key",
            "location": 30,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SecretKey.__str__": {
            "name": "__str__",
            "location": 36,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SecretKey.__hash__": {
            "name": "__hash__",
            "location": 39,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SecretKey.secret_scalar": {
            "name": "secret_scalar",
            "location": 42,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SecretKey.serialized_size": {
            "name": "serialized_size",
            "location": 46,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "SecretKey._from_exact_bytes": {
            "name": "_from_exact_bytes",
            "location": 50,
            "return": [],
            "arguments": {
                "cls": [],
                "data": []
            }
        },
        "SecretKey.to_secret_bytes": {
            "name": "to_secret_bytes",
            "location": 53,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PublicKey.__init__": {
            "name": "__init__",
            "location": 64,
            "return": [],
            "arguments": {
                "self": [],
                "point_key": []
            }
        },
        "PublicKey.point": {
            "name": "point",
            "location": 67,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PublicKey.serialized_size": {
            "name": "serialized_size",
            "location": 71,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "PublicKey._from_exact_bytes": {
            "name": "_from_exact_bytes",
            "location": 75,
            "return": [],
            "arguments": {
                "cls": [],
                "data": []
            }
        },
        "PublicKey.__bytes__": {
            "name": "__bytes__",
            "location": 78,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PublicKey.__str__": {
            "name": "__str__",
            "location": 81,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PublicKey.__eq__": {
            "name": "__eq__",
            "location": 84,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "PublicKey.__hash__": {
            "name": "__hash__",
            "location": 87,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SecretKeyFactory.__init__": {
            "name": "__init__",
            "location": 102,
            "return": [],
            "arguments": {
                "self": [],
                "key_seed": []
            }
        },
        "SecretKeyFactory.random": {
            "name": "random",
            "location": 106,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "SecretKeyFactory.seed_size": {
            "name": "seed_size",
            "location": 113,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "SecretKeyFactory.from_secure_randomness": {
            "name": "from_secure_randomness",
            "location": 121,
            "return": [],
            "arguments": {
                "cls": [],
                "seed": []
            }
        },
        "SecretKeyFactory.make_key": {
            "name": "make_key",
            "location": 135,
            "return": [],
            "arguments": {
                "self": [],
                "label": []
            }
        },
        "SecretKeyFactory.make_factory": {
            "name": "make_factory",
            "location": 148,
            "return": [],
            "arguments": {
                "self": [],
                "label": []
            }
        },
        "SecretKeyFactory.serialized_size": {
            "name": "serialized_size",
            "location": 157,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "SecretKeyFactory._from_exact_bytes": {
            "name": "_from_exact_bytes",
            "location": 161,
            "return": [],
            "arguments": {
                "cls": [],
                "data": []
            }
        },
        "SecretKeyFactory.to_secret_bytes": {
            "name": "to_secret_bytes",
            "location": 164,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SecretKeyFactory.__str__": {
            "name": "__str__",
            "location": 167,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SecretKeyFactory.__hash__": {
            "name": "__hash__",
            "location": 170,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "pyUmbral-master/umbral/key_frag.py": {
        "poly_eval": {
            "name": "poly_eval",
            "location": 133,
            "return": [],
            "arguments": {
                "coeffs": [],
                "x": []
            }
        },
        "KeyFragID.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [],
            "arguments": {
                "self": [],
                "id_": []
            }
        },
        "KeyFragID.__eq__": {
            "name": "__eq__",
            "location": 23,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "KeyFragID.random": {
            "name": "random",
            "location": 27,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "KeyFragID.serialized_size": {
            "name": "serialized_size",
            "location": 31,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "KeyFragID._from_exact_bytes": {
            "name": "_from_exact_bytes",
            "location": 35,
            "return": [],
            "arguments": {
                "cls": [],
                "data": []
            }
        },
        "KeyFragID.__bytes__": {
            "name": "__bytes__",
            "location": 38,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "KeyFragProof.from_base": {
            "name": "from_base",
            "location": 45,
            "return": [],
            "arguments": {
                "cls": [],
                "base": [],
                "kfrag_id": [],
                "kfrag_key": [],
                "sign_delegating_key": [],
                "sign_receiving_key": []
            }
        },
        "KeyFragProof.__init__": {
            "name": "__init__",
            "location": 86,
            "return": [],
            "arguments": {
                "self": [],
                "commitment": [],
                "signature_for_proxy": [],
                "signature_for_receiver": [],
                "delegating_key_signed": [],
                "receiving_key_signed": []
            }
        },
        "KeyFragProof._components": {
            "name": "_components",
            "location": 100,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "KeyFragProof.__eq__": {
            "name": "__eq__",
            "location": 107,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "KeyFragProof.serialized_size": {
            "name": "serialized_size",
            "location": 115,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "KeyFragProof._from_exact_bytes": {
            "name": "_from_exact_bytes",
            "location": 119,
            "return": [],
            "arguments": {
                "cls": [],
                "data": []
            }
        },
        "KeyFragProof.__bytes__": {
            "name": "__bytes__",
            "location": 123,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "KeyFrag.__init__": {
            "name": "__init__",
            "location": 145,
            "return": [],
            "arguments": {
                "self": [],
                "id_": [],
                "key": [],
                "precursor": [],
                "proof": []
            }
        },
        "KeyFrag._components": {
            "name": "_components",
            "location": 155,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "KeyFrag.serialized_size": {
            "name": "serialized_size",
            "location": 163,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "KeyFrag._from_exact_bytes": {
            "name": "_from_exact_bytes",
            "location": 167,
            "return": [],
            "arguments": {
                "cls": [],
                "data": []
            }
        },
        "KeyFrag.__bytes__": {
            "name": "__bytes__",
            "location": 170,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "KeyFrag.__eq__": {
            "name": "__eq__",
            "location": 173,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "KeyFrag.__hash__": {
            "name": "__hash__",
            "location": 176,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "KeyFrag.__str__": {
            "name": "__str__",
            "location": 179,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "KeyFrag.from_base": {
            "name": "from_base",
            "location": 183,
            "return": [],
            "arguments": {
                "cls": [],
                "base": [],
                "sign_delegating_key": [],
                "sign_receiving_key": []
            }
        },
        "KeyFrag.verify": {
            "name": "verify",
            "location": 214,
            "return": [],
            "arguments": {
                "self": [],
                "verifying_pk": [],
                "delegating_pk": [],
                "receiving_pk": []
            }
        },
        "VerifiedKeyFrag.__init__": {
            "name": "__init__",
            "location": 264,
            "return": [],
            "arguments": {
                "self": [],
                "kfrag": []
            }
        },
        "VerifiedKeyFrag.__bytes__": {
            "name": "__bytes__",
            "location": 267,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "VerifiedKeyFrag.serialized_size": {
            "name": "serialized_size",
            "location": 271,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "VerifiedKeyFrag.from_verified_bytes": {
            "name": "from_verified_bytes",
            "location": 275,
            "return": [],
            "arguments": {
                "cls": [],
                "data": []
            }
        },
        "VerifiedKeyFrag.__eq__": {
            "name": "__eq__",
            "location": 286,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "VerifiedKeyFrag.__hash__": {
            "name": "__hash__",
            "location": 289,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "VerifiedKeyFrag.__str__": {
            "name": "__str__",
            "location": 292,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "KeyFragBase.__init__": {
            "name": "__init__",
            "location": 298,
            "return": [],
            "arguments": {
                "self": [],
                "delegating_sk": [],
                "receiving_pk": [],
                "signer": [],
                "threshold": []
            }
        }
    },
    "pyUmbral-master/umbral/openssl.py": {
        "tmp_bn_ctx": {
            "name": "tmp_bn_ctx",
            "location": 15,
            "return": [],
            "arguments": {}
        },
        "_bn_new": {
            "name": "_bn_new",
            "location": 127,
            "return": [],
            "arguments": {}
        },
        "bn_is_normalized": {
            "name": "bn_is_normalized",
            "location": 140,
            "return": [],
            "arguments": {
                "check_bn": [],
                "modulus": []
            }
        },
        "bn_from_int": {
            "name": "bn_from_int",
            "location": 152,
            "return": [],
            "arguments": {
                "py_int": [],
                "check_modulus": []
            }
        },
        "bn_from_bytes": {
            "name": "bn_from_bytes",
            "location": 167,
            "return": [],
            "arguments": {
                "bytes_seq": [],
                "check_modulus": [],
                "apply_modulus": []
            }
        },
        "bn_to_bytes": {
            "name": "bn_to_bytes",
            "location": 189,
            "return": [],
            "arguments": {
                "bn": [],
                "length": []
            }
        },
        "bn_random_nonzero": {
            "name": "bn_random_nonzero",
            "location": 205,
            "return": [],
            "arguments": {
                "modulus": []
            }
        },
        "_bn_size": {
            "name": "_bn_size",
            "location": 232,
            "return": [],
            "arguments": {
                "bn": []
            }
        },
        "bn_to_int": {
            "name": "bn_to_int",
            "location": 236,
            "return": [],
            "arguments": {
                "bn": []
            }
        },
        "bn_cmp": {
            "name": "bn_cmp",
            "location": 240,
            "return": [],
            "arguments": {
                "bn1": [],
                "bn2": []
            }
        },
        "bn_one": {
            "name": "bn_one",
            "location": 245,
            "return": [],
            "arguments": {}
        },
        "bn_is_zero": {
            "name": "bn_is_zero",
            "location": 249,
            "return": [],
            "arguments": {
                "bn": []
            }
        },
        "bn_invert": {
            "name": "bn_invert",
            "location": 254,
            "return": [],
            "arguments": {
                "bn": [],
                "modulus": []
            }
        },
        "bn_sub": {
            "name": "bn_sub",
            "location": 262,
            "return": [],
            "arguments": {
                "bn1": [],
                "bn2": [],
                "modulus": []
            }
        },
        "bn_add": {
            "name": "bn_add",
            "location": 270,
            "return": [],
            "arguments": {
                "bn1": [],
                "bn2": [],
                "modulus": []
            }
        },
        "bn_mul": {
            "name": "bn_mul",
            "location": 278,
            "return": [],
            "arguments": {
                "bn1": [],
                "bn2": [],
                "modulus": []
            }
        },
        "bn_to_privkey": {
            "name": "bn_to_privkey",
            "location": 286,
            "return": [],
            "arguments": {
                "curve": [],
                "bn": []
            }
        },
        "_point_new": {
            "name": "_point_new",
            "location": 307,
            "return": [],
            "arguments": {
                "ec_group": []
            }
        },
        "point_to_affine_coords": {
            "name": "point_to_affine_coords",
            "location": 319,
            "return": [],
            "arguments": {
                "curve": [],
                "point": []
            }
        },
        "point_from_bytes": {
            "name": "point_from_bytes",
            "location": 346,
            "return": [],
            "arguments": {
                "curve": [],
                "data": []
            }
        },
        "point_to_bytes_compressed": {
            "name": "point_to_bytes_compressed",
            "location": 368,
            "return": [],
            "arguments": {
                "curve": [],
                "point": []
            }
        },
        "point_eq": {
            "name": "point_eq",
            "location": 384,
            "return": [],
            "arguments": {
                "curve": [],
                "point1": [],
                "point2": []
            }
        },
        "point_mul_bn": {
            "name": "point_mul_bn",
            "location": 393,
            "return": [],
            "arguments": {
                "curve": [],
                "point": [],
                "bn": []
            }
        },
        "point_add": {
            "name": "point_add",
            "location": 401,
            "return": [],
            "arguments": {
                "curve": [],
                "point1": [],
                "point2": []
            }
        },
        "point_neg": {
            "name": "point_neg",
            "location": 409,
            "return": [],
            "arguments": {
                "curve": [],
                "point": []
            }
        },
        "point_to_pubkey": {
            "name": "point_to_pubkey",
            "location": 421,
            "return": [],
            "arguments": {
                "curve": [],
                "point": []
            }
        },
        "ecdsa_sign": {
            "name": "ecdsa_sign",
            "location": 441,
            "return": [],
            "arguments": {
                "curve": [],
                "secret_bn": [],
                "prehashed_message": [],
                "hash_algorithm": []
            }
        },
        "ecdsa_verify": {
            "name": "ecdsa_verify",
            "location": 452,
            "return": [],
            "arguments": {
                "curve": [],
                "sig_r": [],
                "sig_s": [],
                "public_point": [],
                "prehashed_message": [],
                "hash_algorithm": []
            }
        },
        "Curve._get_ec_group_by_curve_nid": {
            "name": "_get_ec_group_by_curve_nid",
            "location": 32,
            "return": [],
            "arguments": {
                "nid": []
            }
        },
        "Curve._get_ec_order_by_group": {
            "name": "_get_ec_order_by_group",
            "location": 42,
            "return": [],
            "arguments": {
                "ec_group": []
            }
        },
        "Curve._get_ec_generator_by_group": {
            "name": "_get_ec_generator_by_group",
            "location": 53,
            "return": [],
            "arguments": {
                "ec_group": []
            }
        },
        "Curve._get_ec_group_degree": {
            "name": "_get_ec_group_degree",
            "location": 64,
            "return": [],
            "arguments": {
                "ec_group": []
            }
        },
        "Curve.__init__": {
            "name": "__init__",
            "location": 71,
            "return": [],
            "arguments": {
                "self": [],
                "nid": []
            }
        },
        "Curve.from_name": {
            "name": "from_name",
            "location": 96,
            "return": [],
            "arguments": {
                "cls": [],
                "name": []
            }
        },
        "Curve.__eq__": {
            "name": "__eq__",
            "location": 115,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Curve.__str__": {
            "name": "__str__",
            "location": 118,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "pyUmbral-master/umbral/params.py": {
        "Parameters.__init__": {
            "name": "__init__",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pyUmbral-master/umbral/pre.py": {
        "encrypt": {
            "name": "encrypt",
            "location": 11,
            "return": [
                "tuple[typing.Union[str,bytes,dict[str, int]]]"
            ],
            "arguments": {
                "delegating_pk": [
                    "bytes",
                    "int"
                ],
                "plaintext": [
                    "str",
                    "bool",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "decrypt_original": {
            "name": "decrypt_original",
            "location": 23,
            "return": [],
            "arguments": {
                "delegating_sk": [
                    "str",
                    "bool"
                ],
                "capsule": [],
                "ciphertext": [
                    "str",
                    "int",
                    "float"
                ]
            }
        },
        "generate_kfrags": {
            "name": "generate_kfrags",
            "location": 34,
            "return": [
                "list[VerifiedKeyFrag]"
            ],
            "arguments": {
                "delegating_sk": [
                    "bool",
                    "tuple[]",
                    "str"
                ],
                "receiving_pk": [
                    "bool",
                    "tuple[]",
                    "str"
                ],
                "signer": [
                    "bool",
                    "tuple[]",
                    "str"
                ],
                "threshold": [
                    "int",
                    "float",
                    "str"
                ],
                "shares": [
                    "str",
                    "int"
                ],
                "sign_delegating_key": [
                    "bool"
                ],
                "sign_receiving_key": [
                    "bool"
                ]
            }
        },
        "reencrypt": {
            "name": "reencrypt",
            "location": 63,
            "return": [
                "VerifiedCapsuleFrag"
            ],
            "arguments": {
                "capsule": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ],
                "kfrag": [
                    "str",
                    "float",
                    "list[]",
                    "bytes"
                ]
            }
        },
        "decrypt_reencrypted": {
            "name": "decrypt_reencrypted",
            "location": 76,
            "return": [],
            "arguments": {
                "receiving_sk": [
                    "str",
                    "bool"
                ],
                "delegating_pk": [
                    "str",
                    "bool"
                ],
                "capsule": [],
                "verified_cfrags": [
                    "str"
                ],
                "ciphertext": [
                    "str",
                    "int",
                    "float"
                ]
            }
        }
    },
    "pyUmbral-master/umbral/serializable.py": {
        "bool_serialized_size": {
            "name": "bool_serialized_size",
            "location": 102,
            "return": [
                "int"
            ],
            "arguments": {}
        },
        "bool_bytes": {
            "name": "bool_bytes",
            "location": 106,
            "return": [
                "bytes"
            ],
            "arguments": {
                "b": [
                    "bool"
                ]
            }
        },
        "bool_from_exact_bytes": {
            "name": "bool_from_exact_bytes",
            "location": 110,
            "return": [
                "bool"
            ],
            "arguments": {
                "data": [
                    "str",
                    "typing.BinaryIO",
                    "bytes"
                ]
            }
        },
        "HasSerializedSize.serialized_size": {
            "name": "serialized_size",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "typing.Sequence[typing.Any]",
                    "typing.Callable[, ]"
                ]
            }
        },
        "Deserializable.from_bytes": {
            "name": "from_bytes",
            "location": 28,
            "return": [],
            "arguments": {
                "cls": [],
                "data": []
            }
        },
        "Deserializable._split": {
            "name": "_split",
            "location": 38,
            "return": [
                "list[typing.Union[int,dict[str, list[]],memoryview]]"
            ],
            "arguments": {
                "data": [
                    "str"
                ]
            }
        },
        "Deserializable._from_exact_bytes": {
            "name": "_from_exact_bytes",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "dict[, ]",
                    "list[dict[str, typing.Any]]",
                    "typing.Callable[[], typing.Any]",
                    "bool",
                    "typing.Iterator",
                    "bytes",
                    "None"
                ],
                "data": [
                    "str",
                    "dict[, ]",
                    "list[dict[str, typing.Any]]",
                    "typing.Callable[[], typing.Any]",
                    "bool",
                    "typing.Iterator",
                    "bytes",
                    "None"
                ]
            }
        },
        "Serializable.__bytes__": {
            "name": "__bytes__",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SerializableSecret.to_secret_bytes": {
            "name": "to_secret_bytes",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pyUmbral-master/umbral/signing.py": {
        "digest_for_signing": {
            "name": "digest_for_signing",
            "location": 9,
            "return": [],
            "arguments": {
                "message": []
            }
        },
        "Signer.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [],
            "arguments": {
                "self": [],
                "secret_key": []
            }
        },
        "Signer.sign_digest": {
            "name": "sign_digest",
            "location": 25,
            "return": [],
            "arguments": {
                "self": [],
                "digest": []
            }
        },
        "Signer.sign": {
            "name": "sign",
            "location": 47,
            "return": [],
            "arguments": {
                "self": [],
                "message": []
            }
        },
        "Signer.verifying_key": {
            "name": "verifying_key",
            "location": 53,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Signer.__str__": {
            "name": "__str__",
            "location": 59,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Signer.__hash__": {
            "name": "__hash__",
            "location": 62,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Signer.__bytes__": {
            "name": "__bytes__",
            "location": 65,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Signature.__init__": {
            "name": "__init__",
            "location": 74,
            "return": [],
            "arguments": {
                "self": [],
                "r": [],
                "s": []
            }
        },
        "Signature.verify_digest": {
            "name": "verify_digest",
            "location": 78,
            "return": [],
            "arguments": {
                "self": [],
                "verifying_pk": [],
                "digest": []
            }
        },
        "Signature.verify": {
            "name": "verify",
            "location": 86,
            "return": [],
            "arguments": {
                "self": [],
                "verifying_pk": [],
                "message": []
            }
        },
        "Signature.serialized_size": {
            "name": "serialized_size",
            "location": 95,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "Signature._from_exact_bytes": {
            "name": "_from_exact_bytes",
            "location": 99,
            "return": [],
            "arguments": {
                "cls": [],
                "data": []
            }
        },
        "Signature.__bytes__": {
            "name": "__bytes__",
            "location": 102,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Signature.__str__": {
            "name": "__str__",
            "location": 105,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Signature.__eq__": {
            "name": "__eq__",
            "location": 108,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Signature.__hash__": {
            "name": "__hash__",
            "location": 111,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "pyUmbral-master/umbral/__about__.py": {},
    "pyUmbral-master/umbral/__init__.py": {},
    "pyUmbral-master/vectors/generate_test_vectors.py": {
        "hexlify": {
            "name": "hexlify",
            "location": 17,
            "return": [],
            "arguments": {
                "data": []
            }
        },
        "create_test_vector_file": {
            "name": "create_test_vector_file",
            "location": 24,
            "return": [],
            "arguments": {
                "vector": [],
                "filename": [],
                "generate_again": []
            }
        }
    }
}
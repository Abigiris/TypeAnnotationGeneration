{
    "pyboogie-master/setup.py": {},
    "pyboogie-master/pyboogie/analysis.py": {
        "dataflow": {
            "name": "dataflow",
            "location": 25,
            "return": [],
            "arguments": {
                "fun": [],
                "transformerMap": [
                    "int",
                    "typing.Callable[..., None]",
                    "str",
                    "float"
                ],
                "unionF": [
                    "int"
                ],
                "bottom": [
                    "list[tuple[typing.Union[int,int]]]",
                    "tuple[typing.Union[int,int]]",
                    "bytes",
                    "int",
                    "typing.Mapping"
                ],
                "start": [
                    "int",
                    "typing.Callable[..., None]",
                    "str",
                    "float"
                ],
                "forward": [
                    "bool",
                    "list[]",
                    "typing.Callable[T, bool]",
                    "list['Entity']"
                ]
            }
        },
        "livevars": {
            "name": "livevars",
            "location": 83,
            "return": [],
            "arguments": {
                "fun": [
                    "list[dict[, ]]",
                    "dict[str, float]",
                    "tuple[]",
                    "list[]",
                    "str"
                ]
            }
        },
        "propagateUnmodifiedPreds": {
            "name": "propagateUnmodifiedPreds",
            "location": 98,
            "return": [],
            "arguments": {
                "fun": [
                    "str",
                    "list[str]"
                ]
            }
        },
        "propagateUnmodifiedPreds.assignment_preds": {
            "name": "assignment_preds",
            "location": 107,
            "return": [
                "set[AstBinExpr]"
            ],
            "arguments": {
                "stmt": []
            }
        },
        "propagateUnmodifiedPreds.filterModifiedPreds": {
            "name": "filterModifiedPreds",
            "location": 115,
            "return": [
                "set[]"
            ],
            "arguments": {
                "preds": [],
                "stmt": []
            }
        },
        "propagateUnmodifiedPreds.unionF": {
            "name": "unionF",
            "location": 130,
            "return": [
                "None"
            ],
            "arguments": {
                "a": [],
                "b": []
            }
        }
    },
    "pyboogie-master/pyboogie/ast.py": {
        "stripOutsideParenthesis": {
            "name": "stripOutsideParenthesis",
            "location": 159,
            "return": [
                "str"
            ],
            "arguments": {
                "e": [
                    "str",
                    "typing.Callable[, ]"
                ]
            }
        },
        "_mkBinExp": {
            "name": "_mkBinExp",
            "location": 366,
            "return": [
                "AstBinExpr"
            ],
            "arguments": {
                "lhs": [
                    "int",
                    "float",
                    "None"
                ],
                "op": [
                    "int",
                    "float",
                    "None"
                ],
                "rhs": [
                    "int",
                    "float",
                    "None"
                ]
            }
        },
        "listify": {
            "name": "listify",
            "location": 371,
            "return": [
                "list[]"
            ],
            "arguments": {
                "p": []
            }
        },
        "replace": {
            "name": "replace",
            "location": 377,
            "return": [
                "str"
            ],
            "arguments": {
                "ast": [],
                "m": [
                    "str",
                    "list[str]"
                ]
            }
        },
        "reduce_nodes": {
            "name": "reduce_nodes",
            "location": 386,
            "return": [],
            "arguments": {
                "node": [],
                "cb": []
            }
        },
        "parseExprAst": {
            "name": "parseExprAst",
            "location": 645,
            "return": [],
            "arguments": {
                "s": [
                    "str",
                    "int"
                ]
            }
        },
        "parseStmt": {
            "name": "parseStmt",
            "location": 652,
            "return": [],
            "arguments": {
                "s": [
                    "str",
                    "bytes"
                ]
            }
        },
        "parseDecl": {
            "name": "parseDecl",
            "location": 659,
            "return": [],
            "arguments": {
                "s": [
                    "str",
                    "int"
                ]
            }
        },
        "parseAst": {
            "name": "parseAst",
            "location": 666,
            "return": [],
            "arguments": {
                "s": [
                    "str",
                    "bytes"
                ]
            }
        },
        "parseBinding": {
            "name": "parseBinding",
            "location": 673,
            "return": [],
            "arguments": {
                "s": [
                    "str"
                ]
            }
        },
        "parseType": {
            "name": "parseType",
            "location": 680,
            "return": [],
            "arguments": {
                "s": [
                    "str",
                    "list[typing.Any]"
                ]
            }
        },
        "expr_read": {
            "name": "expr_read",
            "location": 687,
            "return": [
                "set[]"
            ],
            "arguments": {
                "ast": []
            }
        },
        "stmt_read": {
            "name": "stmt_read",
            "location": 708,
            "return": [
                "set[]"
            ],
            "arguments": {
                "ast": [
                    "dict[, ]",
                    "int",
                    "bytes"
                ]
            }
        },
        "stmt_changed": {
            "name": "stmt_changed",
            "location": 723,
            "return": [
                "set[]"
            ],
            "arguments": {
                "ast": [
                    "tuple['cirq.Qid']"
                ]
            }
        },
        "ast_group_bin": {
            "name": "ast_group_bin",
            "location": 738,
            "return": [
                "bool",
                "str",
                "None",
                "float",
                "typing.Callable[[], T]"
            ],
            "arguments": {
                "exprs": [],
                "op": [
                    "str",
                    "int",
                    "list[list[str]]",
                    "float"
                ],
                "default": [
                    "bool",
                    "str",
                    "None",
                    "float",
                    "typing.Callable[[], T]"
                ]
            }
        },
        "ast_and": {
            "name": "ast_and",
            "location": 746,
            "return": [],
            "arguments": {
                "exprs": [
                    "str"
                ]
            }
        },
        "ast_or": {
            "name": "ast_or",
            "location": 747,
            "return": [],
            "arguments": {
                "exprs": [
                    "str"
                ]
            }
        },
        "normalize": {
            "name": "normalize",
            "location": 749,
            "return": [
                "AstUnExpr",
                "AstBinExpr",
                "str",
                "int",
                "dict[, ]"
            ],
            "arguments": {
                "ast": [
                    "str",
                    "int",
                    "dict[, ]"
                ]
            }
        },
        "ast_constants": {
            "name": "ast_constants",
            "location": 768,
            "return": [],
            "arguments": {
                "n": [
                    "int"
                ]
            }
        },
        "ast_boolean_exprs": {
            "name": "ast_boolean_exprs",
            "location": 777,
            "return": [],
            "arguments": {
                "n": [
                    "int"
                ]
            }
        },
        "ast_primitive_boolean_exprs": {
            "name": "ast_primitive_boolean_exprs",
            "location": 792,
            "return": [],
            "arguments": {
                "n": [
                    "int"
                ]
            }
        },
        "AstNode.__eq__": {
            "name": "__eq__",
            "location": 15,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "AstIntType.__str__": {
            "name": "__str__",
            "location": 27,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "s": [
                    "str",
                    "bytes",
                    "int"
                ]
            }
        },
        "AstBoolType.__str__": {
            "name": "__str__",
            "location": 30,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "s": [
                    "str",
                    "bytes",
                    "int"
                ]
            }
        },
        "AstBVType.__str__": {
            "name": "__str__",
            "location": 34,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "s": [
                    "str",
                    "bytes",
                    "int"
                ]
            }
        },
        "AstMapType.__str__": {
            "name": "__str__",
            "location": 40,
            "return": [
                "str"
            ],
            "arguments": {
                "s": [
                    "str",
                    "bytes",
                    "int"
                ]
            }
        },
        "AstCompoundType.__str__": {
            "name": "__str__",
            "location": 50,
            "return": [
                "str"
            ],
            "arguments": {
                "s": [
                    "str",
                    "bytes",
                    "int"
                ]
            }
        },
        "AstFalse.__str__": {
            "name": "__str__",
            "location": 56,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "s": [
                    "str",
                    "bytes",
                    "int"
                ]
            }
        },
        "AstTrue.__str__": {
            "name": "__str__",
            "location": 60,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "s": [
                    "str",
                    "bytes",
                    "int"
                ]
            }
        },
        "AstNumber.__str__": {
            "name": "__str__",
            "location": 65,
            "return": [
                "str"
            ],
            "arguments": {
                "s": [
                    "str",
                    "bytes",
                    "int"
                ]
            }
        },
        "AstId.__str__": {
            "name": "__str__",
            "location": 70,
            "return": [],
            "arguments": {
                "s": [
                    "str",
                    "bytes",
                    "int"
                ]
            }
        },
        "AstWildcard.__str__": {
            "name": "__str__",
            "location": 74,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "s": [
                    "str",
                    "bytes",
                    "int"
                ]
            }
        },
        "AstMapIndex.__str__": {
            "name": "__str__",
            "location": 80,
            "return": [
                "str"
            ],
            "arguments": {
                "s": [
                    "str",
                    "bytes",
                    "int"
                ]
            }
        },
        "AstMapUpdate.__str__": {
            "name": "__str__",
            "location": 87,
            "return": [
                "str"
            ],
            "arguments": {
                "s": [
                    "str",
                    "bytes",
                    "int"
                ]
            }
        },
        "AstMapUpdateArgs.__str__": {
            "name": "__str__",
            "location": 96,
            "return": [
                "str"
            ],
            "arguments": {
                "s": [
                    "str",
                    "bytes",
                    "int"
                ]
            }
        },
        "AstMapIndexArgs.__str__": {
            "name": "__str__",
            "location": 101,
            "return": [
                "str"
            ],
            "arguments": {
                "s": [
                    "str",
                    "bytes",
                    "int"
                ]
            }
        },
        "AstFuncExprArgs.__str__": {
            "name": "__str__",
            "location": 106,
            "return": [
                "str"
            ],
            "arguments": {
                "s": [
                    "str",
                    "bytes",
                    "int"
                ]
            }
        },
        "AstUnExpr.__str__": {
            "name": "__str__",
            "location": 112,
            "return": [],
            "arguments": {
                "s": [
                    "str",
                    "bytes",
                    "int"
                ]
            }
        },
        "AstBinExpr.__str__": {
            "name": "__str__",
            "location": 119,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "s": [
                    "str",
                    "bool"
                ]
            }
        },
        "AstTernary.__str__": {
            "name": "__str__",
            "location": 127,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "s": [
                    "str",
                    "int"
                ]
            }
        },
        "AstAttribute.__str__": {
            "name": "__str__",
            "location": 134,
            "return": [],
            "arguments": {
                "s": [
                    "str"
                ]
            }
        },
        "AstBinding.__str__": {
            "name": "__str__",
            "location": 141,
            "return": [
                "str"
            ],
            "arguments": {
                "s": [
                    "str",
                    "bytes",
                    "int"
                ]
            }
        },
        "AstForallExpr.__str__": {
            "name": "__str__",
            "location": 148,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "s": [
                    "str",
                    "bytes"
                ]
            }
        },
        "AstFuncExpr.__str__": {
            "name": "__str__",
            "location": 156,
            "return": [
                "str"
            ],
            "arguments": {
                "s": [
                    "str",
                    "bytes",
                    "dict[str, typing.Any]",
                    "bool"
                ]
            }
        },
        "AstLabel.__str__": {
            "name": "__str__",
            "location": 174,
            "return": [
                "str"
            ],
            "arguments": {
                "s": [
                    "str",
                    "bytes",
                    "int"
                ]
            }
        },
        "AstAssert.__str__": {
            "name": "__str__",
            "location": 181,
            "return": [],
            "arguments": {
                "s": [
                    "str",
                    "bytes",
                    "int"
                ]
            }
        },
        "AstAssume.__str__": {
            "name": "__str__",
            "location": 184,
            "return": [],
            "arguments": {
                "s": [
                    "str",
                    "bytes",
                    "int"
                ]
            }
        },
        "AstAssignment.__str__": {
            "name": "__str__",
            "location": 190,
            "return": [
                "str"
            ],
            "arguments": {
                "s": [
                    "str"
                ]
            }
        },
        "AstHavoc.__str__": {
            "name": "__str__",
            "location": 196,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "s": [
                    "str",
                    "bytes",
                    "int"
                ]
            }
        },
        "AstReturn.__str__": {
            "name": "__str__",
            "location": 200,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "s": [
                    "str",
                    "bytes",
                    "int"
                ]
            }
        },
        "AstGoto.__str__": {
            "name": "__str__",
            "location": 205,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "s": [
                    "str",
                    "bytes",
                    "int"
                ]
            }
        },
        "AstCall.__str__": {
            "name": "__str__",
            "location": 215,
            "return": [],
            "arguments": {
                "s": [
                    "str",
                    "None",
                    "list[str]"
                ]
            }
        },
        "AstIf.__str__": {
            "name": "__str__",
            "location": 229,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "s": [
                    "str",
                    "bool"
                ]
            }
        },
        "AstBody.__str__": {
            "name": "__str__",
            "location": 246,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "s": [
                    "str",
                    "list[str]"
                ]
            }
        },
        "AstVarDecl.__str__": {
            "name": "__str__",
            "location": 260,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "s": [
                    "str",
                    "bytes"
                ]
            }
        },
        "AstFunctionDecl.__str__": {
            "name": "__str__",
            "location": 272,
            "return": [],
            "arguments": {
                "s": [
                    "str",
                    "int"
                ]
            }
        },
        "AstAxiomDecl.__str__": {
            "name": "__str__",
            "location": 290,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "s": [
                    "str",
                    "bytes"
                ]
            }
        },
        "AstConstDecl.__str__": {
            "name": "__str__",
            "location": 300,
            "return": [],
            "arguments": {
                "s": [
                    "str"
                ]
            }
        },
        "AstImplementation.__str__": {
            "name": "__str__",
            "location": 311,
            "return": [],
            "arguments": {
                "s": [
                    "str"
                ]
            }
        },
        "AstProcedure.__str__": {
            "name": "__str__",
            "location": 328,
            "return": [],
            "arguments": {
                "s": [
                    "str",
                    "int"
                ]
            }
        },
        "AstTypeConstructorDecl.__str__": {
            "name": "__str__",
            "location": 355,
            "return": [],
            "arguments": {
                "s": [
                    "str"
                ]
            }
        },
        "AstProgram.__str__": {
            "name": "__str__",
            "location": 364,
            "return": [
                "str"
            ],
            "arguments": {
                "s": [
                    "str",
                    "bytes",
                    "int"
                ]
            }
        },
        "AstBuilder.onAtom": {
            "name": "onAtom",
            "location": 392,
            "return": [
                "list[AstTrue]",
                "list[AstFalse]",
                "list[AstNumber]",
                "list[typing.Union[AstId,AstFuncExpr,AstMapUpdate,AstMapIndex]]"
            ],
            "arguments": {
                "s": [
                    "int",
                    "None",
                    "float"
                ],
                "prod": [
                    "int",
                    "None",
                    "float"
                ],
                "st": [
                    "str",
                    "int"
                ],
                "loc": [
                    "str",
                    "int"
                ],
                "toks": [
                    "list[]"
                ]
            }
        },
        "AstBuilder.onUnaryOp": {
            "name": "onUnaryOp",
            "location": 417,
            "return": [
                "list[AstUnExpr]"
            ],
            "arguments": {
                "s": [
                    "str",
                    "int"
                ],
                "prod": [
                    "str",
                    "int"
                ],
                "st": [
                    "str",
                    "int"
                ],
                "loc": [
                    "str",
                    "int"
                ],
                "toks": [
                    "str",
                    "tuple[]"
                ]
            }
        },
        "AstBuilder.onLABinOp": {
            "name": "onLABinOp",
            "location": 423,
            "return": [
                "list[]"
            ],
            "arguments": {
                "s": [
                    "str",
                    "int"
                ],
                "prod": [
                    "str",
                    "int"
                ],
                "st": [
                    "str",
                    "int"
                ],
                "loc": [
                    "str",
                    "int"
                ],
                "toks": []
            }
        },
        "AstBuilder.onRABinOp": {
            "name": "onRABinOp",
            "location": 434,
            "return": [
                "None"
            ],
            "arguments": {
                "s": [
                    "str",
                    "int"
                ],
                "prod": [
                    "str",
                    "int"
                ],
                "st": [
                    "str",
                    "int"
                ],
                "loc": [
                    "str",
                    "int"
                ],
                "toks": [
                    "str",
                    "int"
                ]
            }
        },
        "AstBuilder.onNABinOp": {
            "name": "onNABinOp",
            "location": 437,
            "return": [
                "list[]"
            ],
            "arguments": {
                "s": [
                    "str",
                    "int"
                ],
                "prod": [
                    "str",
                    "int"
                ],
                "st": [
                    "str",
                    "int"
                ],
                "loc": [
                    "str",
                    "int"
                ],
                "toks": []
            }
        },
        "AstBuilder.onBinding": {
            "name": "onBinding",
            "location": 441,
            "return": [
                "list[AstBinding]"
            ],
            "arguments": {
                "s": [
                    "str",
                    "int"
                ],
                "prod": [
                    "str",
                    "int"
                ],
                "st": [
                    "str",
                    "int"
                ],
                "loc": [
                    "str",
                    "int"
                ],
                "toks": [
                    "str"
                ]
            }
        },
        "AstBuilder.onTypeConstructorDecl": {
            "name": "onTypeConstructorDecl",
            "location": 446,
            "return": [
                "list[AstTypeConstructorDecl]"
            ],
            "arguments": {
                "s": [
                    "str",
                    "int"
                ],
                "prod": [
                    "str",
                    "int"
                ],
                "st": [
                    "str",
                    "int"
                ],
                "loc": [
                    "str",
                    "int"
                ],
                "toks": []
            }
        },
        "AstBuilder.onAttribute": {
            "name": "onAttribute",
            "location": 453,
            "return": [
                "list[AstAttribute]"
            ],
            "arguments": {
                "s": [
                    "str",
                    "int"
                ],
                "prod": [
                    "str",
                    "int"
                ],
                "st": [
                    "str",
                    "int"
                ],
                "loc": [
                    "str",
                    "int"
                ],
                "toks": []
            }
        },
        "AstBuilder.onAssert": {
            "name": "onAssert",
            "location": 461,
            "return": [
                "list[AstAssert]"
            ],
            "arguments": {
                "s": [
                    "str",
                    "int"
                ],
                "prod": [
                    "str",
                    "int"
                ],
                "st": [
                    "str",
                    "int"
                ],
                "loc": [
                    "str",
                    "int"
                ],
                "toks": [
                    "str"
                ]
            }
        },
        "AstBuilder.onAssume": {
            "name": "onAssume",
            "location": 464,
            "return": [
                "list[AstAssume]"
            ],
            "arguments": {
                "s": [
                    "str",
                    "int"
                ],
                "prod": [
                    "str",
                    "int"
                ],
                "st": [
                    "str",
                    "int"
                ],
                "loc": [
                    "str",
                    "int"
                ],
                "toks": []
            }
        },
        "AstBuilder.onReturn": {
            "name": "onReturn",
            "location": 468,
            "return": [
                "list[AstReturn]"
            ],
            "arguments": {
                "s": [
                    "int",
                    "str"
                ],
                "prod": [
                    "int",
                    "str"
                ],
                "st": [
                    "int",
                    "str"
                ],
                "loc": [
                    "int",
                    "str"
                ],
                "toks": []
            }
        },
        "AstBuilder.onGoto": {
            "name": "onGoto",
            "location": 471,
            "return": [
                "list[AstGoto]"
            ],
            "arguments": {
                "s": [
                    "str",
                    "int"
                ],
                "prod": [
                    "str",
                    "int"
                ],
                "st": [
                    "str",
                    "int"
                ],
                "loc": [
                    "str",
                    "int"
                ],
                "toks": [
                    "tuple[typing.Union[tuple[typing.Union[typing.Literal,typing.Literal]],tuple[typing.Union[typing.Literal,typing.Literal]],tuple[typing.Union[typing.Literal,typing.Literal]],tuple[typing.Union[typing.Literal,typing.Literal]],tuple[typing.Union[typing.Literal,typing.Literal,None]]]]"
                ]
            }
        },
        "AstBuilder.onAssignment": {
            "name": "onAssignment",
            "location": 474,
            "return": [
                "list[AstAssignment]"
            ],
            "arguments": {
                "s": [
                    "str",
                    "int"
                ],
                "prod": [
                    "str",
                    "int"
                ],
                "st": [
                    "str",
                    "int"
                ],
                "loc": [
                    "str",
                    "int"
                ],
                "toks": []
            }
        },
        "AstBuilder.onHavoc": {
            "name": "onHavoc",
            "location": 476,
            "return": [
                "list[AstHavoc]"
            ],
            "arguments": {
                "s": [
                    "str",
                    "int"
                ],
                "prod": [
                    "str",
                    "int"
                ],
                "st": [
                    "str",
                    "int"
                ],
                "loc": [
                    "str",
                    "int"
                ],
                "toks": [
                    "int"
                ]
            }
        },
        "AstBuilder.onCallAssignStmt": {
            "name": "onCallAssignStmt",
            "location": 480,
            "return": [
                "list[AstCall]"
            ],
            "arguments": {
                "s": [
                    "int",
                    "str"
                ],
                "prod": [
                    "int",
                    "str"
                ],
                "st": [
                    "int",
                    "str"
                ],
                "loc": [
                    "int",
                    "str"
                ],
                "toks": [
                    "str"
                ]
            }
        },
        "AstBuilder.onIfStmt": {
            "name": "onIfStmt",
            "location": 487,
            "return": [
                "list[AstIf]"
            ],
            "arguments": {
                "s": [
                    "str",
                    "int"
                ],
                "prod": [
                    "str",
                    "int"
                ],
                "st": [
                    "str",
                    "int"
                ],
                "loc": [
                    "str",
                    "int"
                ],
                "toks": []
            }
        },
        "AstBuilder.onProgram": {
            "name": "onProgram",
            "location": 499,
            "return": [
                "list[AstProgram]"
            ],
            "arguments": {
                "s": [
                    "str",
                    "int"
                ],
                "prod": [
                    "str",
                    "int"
                ],
                "st": [
                    "str",
                    "int"
                ],
                "loc": [
                    "str",
                    "int"
                ],
                "toks": []
            }
        },
        "AstBuilder.onLocalVarDecl": {
            "name": "onLocalVarDecl",
            "location": 502,
            "return": [
                "str"
            ],
            "arguments": {
                "s": [
                    "str",
                    "int"
                ],
                "prod": [
                    "str",
                    "int"
                ],
                "st": [
                    "str",
                    "int"
                ],
                "loc": [
                    "str",
                    "int"
                ],
                "toks": [
                    "str"
                ]
            }
        },
        "AstBuilder.onPrimitiveType": {
            "name": "onPrimitiveType",
            "location": 505,
            "return": [
                "list[AstIntType]",
                "list[AstBoolType]",
                "list[AstBVType]"
            ],
            "arguments": {
                "s": [
                    "int",
                    "float",
                    "dict[str, int]"
                ],
                "prod": [
                    "int",
                    "float",
                    "dict[str, int]"
                ],
                "st": [
                    "int",
                    "str"
                ],
                "loc": [
                    "int",
                    "str"
                ],
                "toks": []
            }
        },
        "AstBuilder.onMapType": {
            "name": "onMapType",
            "location": 516,
            "return": [
                "list[AstMapType]"
            ],
            "arguments": {
                "s": [
                    "int",
                    "str"
                ],
                "prod": [
                    "int",
                    "str"
                ],
                "st": [
                    "int",
                    "str"
                ],
                "loc": [
                    "int",
                    "str"
                ],
                "toks": []
            }
        },
        "AstBuilder.onCompoundType": {
            "name": "onCompoundType",
            "location": 519,
            "return": [
                "list[AstCompoundType]"
            ],
            "arguments": {
                "s": [
                    "int",
                    "str"
                ],
                "prod": [
                    "int",
                    "str"
                ],
                "st": [
                    "int",
                    "str"
                ],
                "loc": [
                    "int",
                    "str"
                ],
                "toks": [
                    "str"
                ]
            }
        },
        "AstBuilder.onType": {
            "name": "onType",
            "location": 529,
            "return": [
                "list[]"
            ],
            "arguments": {
                "s": [
                    "str",
                    "int"
                ],
                "prod": [
                    "str",
                    "int"
                ],
                "st": [
                    "str",
                    "int"
                ],
                "loc": [
                    "str",
                    "int"
                ],
                "toks": [
                    "str"
                ]
            }
        },
        "AstBuilder.onBody": {
            "name": "onBody",
            "location": 532,
            "return": [
                "list[AstBody]"
            ],
            "arguments": {
                "s": [
                    "str",
                    "int"
                ],
                "prod": [
                    "str",
                    "int"
                ],
                "st": [
                    "str",
                    "int"
                ],
                "loc": [
                    "str",
                    "int"
                ],
                "toks": []
            }
        },
        "AstBuilder.onVarDecl": {
            "name": "onVarDecl",
            "location": 536,
            "return": [
                "list[AstVarDecl]"
            ],
            "arguments": {
                "s": [
                    "str",
                    "int"
                ],
                "prod": [
                    "str",
                    "int"
                ],
                "st": [
                    "str",
                    "int"
                ],
                "loc": [
                    "str",
                    "int"
                ],
                "toks": []
            }
        },
        "AstBuilder.onAxiomDecl": {
            "name": "onAxiomDecl",
            "location": 541,
            "return": [
                "list[AstAxiomDecl]"
            ],
            "arguments": {
                "s": [
                    "str",
                    "int"
                ],
                "prod": [
                    "str",
                    "int"
                ],
                "st": [
                    "str",
                    "int"
                ],
                "loc": [
                    "str",
                    "int"
                ],
                "toks": [
                    "str"
                ]
            }
        },
        "AstBuilder.onFunctionDecl": {
            "name": "onFunctionDecl",
            "location": 546,
            "return": [
                "list[AstFunctionDecl]"
            ],
            "arguments": {
                "s": [
                    "int",
                    "str"
                ],
                "prod": [
                    "int",
                    "str"
                ],
                "st": [
                    "int",
                    "str"
                ],
                "loc": [
                    "int",
                    "str"
                ],
                "toks": []
            }
        },
        "AstBuilder.onConstDecl": {
            "name": "onConstDecl",
            "location": 554,
            "return": [
                "list[AstConstDecl]"
            ],
            "arguments": {
                "s": [
                    "str",
                    "int"
                ],
                "prod": [
                    "str",
                    "int"
                ],
                "st": [
                    "str",
                    "int"
                ],
                "loc": [
                    "str",
                    "int"
                ],
                "toks": [
                    "list[list[typing.Any]]"
                ]
            }
        },
        "AstBuilder.onImplementationDecl": {
            "name": "onImplementationDecl",
            "location": 563,
            "return": [
                "list[AstImplementation]"
            ],
            "arguments": {
                "s": [
                    "str",
                    "int"
                ],
                "prod": [
                    "str",
                    "int"
                ],
                "st": [
                    "str",
                    "int"
                ],
                "loc": [
                    "str",
                    "int"
                ],
                "toks": [
                    "str"
                ]
            }
        },
        "AstBuilder.onProcedureDecl": {
            "name": "onProcedureDecl",
            "location": 576,
            "return": [
                "list[AstProcedure]"
            ],
            "arguments": {
                "s": [
                    "str",
                    "int"
                ],
                "prod": [
                    "str",
                    "int"
                ],
                "st": [
                    "str",
                    "int"
                ],
                "loc": [
                    "str",
                    "int"
                ],
                "toks": []
            }
        },
        "AstBuilder.onLabeledStatement": {
            "name": "onLabeledStatement",
            "location": 606,
            "return": [
                "list[AstLabel]"
            ],
            "arguments": {
                "s": [
                    "int",
                    "str"
                ],
                "prod": [
                    "int",
                    "str"
                ],
                "st": [
                    "int",
                    "str"
                ],
                "loc": [
                    "int",
                    "str"
                ],
                "toks": []
            }
        },
        "AstBuilder.onMapIndexArgs": {
            "name": "onMapIndexArgs",
            "location": 615,
            "return": [
                "list[AstMapIndexArgs]"
            ],
            "arguments": {
                "s": [
                    "int",
                    "str"
                ],
                "prod": [
                    "int",
                    "str"
                ],
                "st": [
                    "int",
                    "str"
                ],
                "loc": [
                    "int",
                    "str"
                ],
                "toks": [
                    "str"
                ]
            }
        },
        "AstBuilder.onMapUpdateArgs": {
            "name": "onMapUpdateArgs",
            "location": 618,
            "return": [
                "list[AstMapUpdateArgs]"
            ],
            "arguments": {
                "s": [
                    "int",
                    "str"
                ],
                "prod": [
                    "int",
                    "str"
                ],
                "st": [
                    "int",
                    "str"
                ],
                "loc": [
                    "int",
                    "str"
                ],
                "toks": [
                    "str",
                    "bytes"
                ]
            }
        },
        "AstBuilder.onFunAppArgs": {
            "name": "onFunAppArgs",
            "location": 621,
            "return": [
                "list[AstFuncExprArgs]"
            ],
            "arguments": {
                "s": [
                    "int",
                    "str"
                ],
                "prod": [
                    "int",
                    "str"
                ],
                "st": [
                    "int",
                    "str"
                ],
                "loc": [
                    "int",
                    "str"
                ],
                "toks": [
                    "str",
                    "tuple[typing.Union[tuple[typing.Union[int,str]],tuple[typing.Union[int,str,int]]]]"
                ]
            }
        },
        "AstBuilder.onQuantified": {
            "name": "onQuantified",
            "location": 623,
            "return": [
                "list[AstForallExpr]"
            ],
            "arguments": {
                "s": [
                    "str",
                    "int"
                ],
                "prod": [
                    "str",
                    "int"
                ],
                "st": [
                    "str",
                    "int"
                ],
                "loc": [
                    "str",
                    "int"
                ],
                "toks": [
                    "str"
                ]
            }
        },
        "AstBuilder.onWildcardExpr": {
            "name": "onWildcardExpr",
            "location": 633,
            "return": [
                "list[AstWildcard]"
            ],
            "arguments": {
                "s": [
                    "str",
                    "int"
                ],
                "prod": [
                    "str",
                    "int"
                ],
                "st": [
                    "str",
                    "int"
                ],
                "loc": [
                    "str",
                    "int"
                ],
                "toks": []
            }
        },
        "AstBuilder.onTernary": {
            "name": "onTernary",
            "location": 638,
            "return": [
                "list[AstTernary]"
            ],
            "arguments": {
                "s": [
                    "str",
                    "int"
                ],
                "prod": [
                    "str",
                    "int"
                ],
                "st": [
                    "str",
                    "int"
                ],
                "loc": [
                    "str",
                    "int"
                ],
                "toks": []
            }
        },
        "ast_constants.cb": {
            "name": "cb",
            "location": 769,
            "return": [
                "set[]"
            ],
            "arguments": {
                "node": [],
                "children": []
            }
        },
        "ast_boolean_exprs.cb": {
            "name": "cb",
            "location": 778,
            "return": [
                "set[]"
            ],
            "arguments": {
                "node": [],
                "children": []
            }
        },
        "ast_primitive_boolean_exprs.cb": {
            "name": "cb",
            "location": 793,
            "return": [
                "set[]"
            ],
            "arguments": {
                "node": [],
                "children": []
            }
        }
    },
    "pyboogie-master/pyboogie/bb.py": {
        "prevLocations": {
            "name": "prevLocations",
            "location": 134,
            "return": [
                "list[tuple[int]]"
            ],
            "arguments": {
                "l": [
                    "tuple[typing.Union[int,int]]",
                    "list[]",
                    "str",
                    "float"
                ]
            }
        },
        "nextLocations": {
            "name": "nextLocations",
            "location": 141,
            "return": [
                "list[tuple[int]]"
            ],
            "arguments": {
                "l": [
                    "tuple[typing.Union[int,int]]",
                    "list[]",
                    "str",
                    "float"
                ]
            }
        },
        "BB.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "label": [
                    "str",
                    "bool",
                    "list[list[typing.Any]]",
                    "None"
                ],
                "predecessors": [
                    "list[str]"
                ],
                "stmts": [
                    "bool",
                    "float",
                    "str",
                    "list[int]"
                ],
                "successors": [
                    "list[str]"
                ],
                "internal": [
                    "bool"
                ]
            }
        },
        "BB.isInternal": {
            "name": "isInternal",
            "location": 22,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BB.predecessors": {
            "name": "predecessors",
            "location": 25,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BB.successors": {
            "name": "successors",
            "location": 28,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BB.stmts": {
            "name": "stmts",
            "location": 31,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BB.addSuccessor": {
            "name": "addSuccessor",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "bb": [
                    "float",
                    "int"
                ]
            }
        },
        "BB.addPredecessor": {
            "name": "addPredecessor",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "bb": []
            }
        },
        "BB.isEntry": {
            "name": "isEntry",
            "location": 41,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "BB.isExit": {
            "name": "isExit",
            "location": 44,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "BB.__hash__": {
            "name": "__hash__",
            "location": 47,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BB.__str__": {
            "name": "__str__",
            "location": 50,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BB.__eq__": {
            "name": "__eq__",
            "location": 53,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "typing.Callable[, ]",
                    "int",
                    "None"
                ]
            }
        },
        "BB.to_json": {
            "name": "to_json",
            "location": 59,
            "return": [
                "list[list[str]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BB.from_json": {
            "name": "from_json",
            "location": 66,
            "return": [
                "tuple[typing.Union[str,BB]]"
            ],
            "arguments": {
                "arg": [
                    "typing.Collection",
                    "tuple[int]",
                    "typing.Callable[, ]",
                    "str",
                    "int"
                ]
            }
        },
        "BB.is_isomorphic": {
            "name": "is_isomorphic",
            "location": 74,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [],
                "mapping": [
                    "None",
                    "int",
                    "str"
                ]
            }
        },
        "BB.pp": {
            "name": "pp",
            "location": 113,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BB.reachable": {
            "name": "reachable",
            "location": 120,
            "return": [
                "set[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Function.load": {
            "name": "load",
            "location": 150,
            "return": [
                "list[]"
            ],
            "arguments": {
                "filename": [
                    "str"
                ]
            }
        },
        "Function.build": {
            "name": "build",
            "location": 162,
            "return": [
                "Function"
            ],
            "arguments": {
                "fun": [
                    "str",
                    "typing.Mapping",
                    "bool"
                ]
            }
        },
        "Function.__init__": {
            "name": "__init__",
            "location": 219,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "None",
                    "dict[str, str]"
                ],
                "bbs": [
                    "str",
                    "list[str]"
                ],
                "parameters": [
                    "bool",
                    "str",
                    "typing.Sequence[]",
                    "list[str]",
                    "None"
                ],
                "local_vars": [
                    "bool",
                    "str",
                    "typing.Sequence[]",
                    "list[str]",
                    "None"
                ],
                "returns": [
                    "bool",
                    "str",
                    "typing.Sequence[]",
                    "list[str]",
                    "None"
                ]
            }
        },
        "Function.entry": {
            "name": "entry",
            "location": 226,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Function.exits": {
            "name": "exits",
            "location": 229,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Function.loopHeaders": {
            "name": "loopHeaders",
            "location": 232,
            "return": [
                "set[]"
            ],
            "arguments": {
                "self": [],
                "curpath": [
                    "None",
                    "bytes",
                    "str"
                ]
            }
        },
        "Function.exit": {
            "name": "exit",
            "location": 249,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Function.bbs": {
            "name": "bbs",
            "location": 252,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Function.bbs_preorder": {
            "name": "bbs_preorder",
            "location": 255,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "self": [],
                "bb": [
                    "None",
                    "str",
                    "bool",
                    "list[typing.Any]"
                ],
                "visited": [
                    "None",
                    "BaseException",
                    "str",
                    "bool"
                ]
            }
        },
        "Function.bbs_postorder": {
            "name": "bbs_postorder",
            "location": 270,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "self": [],
                "bb": [
                    "None",
                    "str",
                    "bool",
                    "list[typing.Any]"
                ],
                "visited": [
                    "None",
                    "BaseException",
                    "str",
                    "bool"
                ]
            }
        },
        "Function.bbs_rpo": {
            "name": "bbs_rpo",
            "location": 284,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Function.get_bb": {
            "name": "get_bb",
            "location": 287,
            "return": [],
            "arguments": {
                "self": [],
                "label": [
                    "int",
                    "str",
                    "typing.Callable[, ]",
                    "None"
                ]
            }
        },
        "Function.to_json": {
            "name": "to_json",
            "location": 290,
            "return": [
                "list[list[tuple[str]]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Function.from_json": {
            "name": "from_json",
            "location": 303,
            "return": [
                "Function"
            ],
            "arguments": {
                "arg": [
                    "typing.Collection",
                    "tuple[int]",
                    "typing.Callable[, ]",
                    "str",
                    "int"
                ]
            }
        },
        "Function.eq": {
            "name": "eq",
            "location": 328,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Function.pp": {
            "name": "pp",
            "location": 336,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Function.getTypeEnv": {
            "name": "getTypeEnv",
            "location": 350,
            "return": [
                "dict[, ]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Function.pp.pp_bindings": {
            "name": "pp_bindings",
            "location": 337,
            "return": [
                "str"
            ],
            "arguments": {
                "b": []
            }
        },
        "Function.pp.pp_locals": {
            "name": "pp_locals",
            "location": 340,
            "return": [
                "str"
            ],
            "arguments": {
                "b": []
            }
        }
    },
    "pyboogie-master/pyboogie/desugar.py": {
        "desugarExpr": {
            "name": "desugarExpr",
            "location": 20,
            "return": [
                "typing.Callable[, ]",
                "typing.Type",
                "bool"
            ],
            "arguments": {
                "e": [
                    "typing.Callable[, ]",
                    "typing.Type",
                    "bool"
                ]
            }
        },
        "desugarStmt": {
            "name": "desugarStmt",
            "location": 24,
            "return": [
                "list[]",
                "list[typing.Union[str,typing.Iterable[typing.Type]]]"
            ],
            "arguments": {
                "s": [
                    "str",
                    "typing.Iterable[typing.Type]"
                ]
            }
        },
        "addEntry": {
            "name": "addEntry",
            "location": 100,
            "return": [],
            "arguments": {
                "stmts": []
            }
        },
        "desugarDecl": {
            "name": "desugarDecl",
            "location": 106,
            "return": [
                "dict[str, str]",
                "str",
                "tuple[]",
                "list[list[]]",
                "AstFunctionDecl",
                "AstAxiomDecl",
                "AstImplementation",
                "AstProcedure"
            ],
            "arguments": {
                "d": [
                    "dict[str, str]",
                    "str",
                    "tuple[]",
                    "list[list[]]"
                ]
            }
        },
        "desugar": {
            "name": "desugar",
            "location": 152,
            "return": [
                "AstProgram"
            ],
            "arguments": {
                "p": [
                    "list[dict[, ]]",
                    "int",
                    "list[list[str]]"
                ]
            }
        }
    },
    "pyboogie-master/pyboogie/eval.py": {
        "instantiateAndEval": {
            "name": "instantiateAndEval",
            "location": 24,
            "return": [],
            "arguments": {
                "inv": [
                    "str",
                    "int",
                    "typing.Type",
                    "list[str]",
                    "list[tuple[typing.Union[bytes,bytes]]]",
                    "typing.Match"
                ],
                "vals": [],
                "arg_names": [
                    "None",
                    "str",
                    "list[float]",
                    "collections.abc.Awaitable[]"
                ],
                "arg_consts": [
                    "None",
                    "str",
                    "typing.Callable[, ]",
                    "int"
                ]
            }
        },
        "execute": {
            "name": "execute",
            "location": 69,
            "return": [
                "typing.Generator[tuple[typing.Union[NondetPath,NondetSSAPath]]]"
            ],
            "arguments": {
                "env": [
                    "bool"
                ],
                "bb": [
                    "float",
                    "str"
                ],
                "fun": [],
                "limit": [
                    "int"
                ]
            }
        },
        "execute.bb_sp": {
            "name": "bb_sp",
            "location": 77,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "bb": [],
                "initial_ssa_env": [],
                "precond": []
            }
        }
    },
    "pyboogie-master/pyboogie/grammar.py": {
        "BoogieParser.onAssert": {
            "name": "onAssert",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "s": [
                    "str",
                    "int"
                ],
                "prod": [
                    "str",
                    "int"
                ],
                "st": [
                    "str",
                    "int"
                ],
                "loc": [
                    "str",
                    "int"
                ],
                "toks": [
                    "str",
                    "int"
                ]
            }
        },
        "BoogieParser.onAssume": {
            "name": "onAssume",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "s": [
                    "str",
                    "int"
                ],
                "prod": [
                    "str",
                    "int"
                ],
                "st": [
                    "str",
                    "int"
                ],
                "loc": [
                    "str",
                    "int"
                ],
                "toks": [
                    "str",
                    "int"
                ]
            }
        },
        "BoogieParser.onReturn": {
            "name": "onReturn",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "s": [
                    "int",
                    "str"
                ],
                "prod": [
                    "int",
                    "str"
                ],
                "st": [
                    "int",
                    "str"
                ],
                "loc": [
                    "int",
                    "str"
                ],
                "toks": [
                    "int",
                    "str"
                ]
            }
        },
        "BoogieParser.onGoto": {
            "name": "onGoto",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "s": [
                    "str",
                    "int"
                ],
                "prod": [
                    "str",
                    "int"
                ],
                "st": [
                    "str",
                    "int"
                ],
                "loc": [
                    "str",
                    "int"
                ],
                "toks": [
                    "str",
                    "int"
                ]
            }
        },
        "BoogieParser.onAssignment": {
            "name": "onAssignment",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "s": [
                    "str",
                    "int"
                ],
                "prod": [
                    "str",
                    "int"
                ],
                "st": [
                    "str",
                    "int"
                ],
                "loc": [
                    "str",
                    "int"
                ],
                "toks": [
                    "str",
                    "int"
                ]
            }
        },
        "BoogieParser.onHavoc": {
            "name": "onHavoc",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "s": [
                    "str",
                    "int"
                ],
                "prod": [
                    "str",
                    "int"
                ],
                "st": [
                    "str",
                    "int"
                ],
                "loc": [
                    "str",
                    "int"
                ],
                "toks": [
                    "str",
                    "int"
                ]
            }
        },
        "BoogieParser.onCallAssignStmt": {
            "name": "onCallAssignStmt",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "s": [
                    "int",
                    "str"
                ],
                "prod": [
                    "int",
                    "str"
                ],
                "st": [
                    "int",
                    "str"
                ],
                "loc": [
                    "int",
                    "str"
                ],
                "toks": [
                    "int",
                    "str"
                ]
            }
        },
        "BoogieParser.onIfStmt": {
            "name": "onIfStmt",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "s": [
                    "str",
                    "int"
                ],
                "prod": [
                    "str",
                    "int"
                ],
                "st": [
                    "str",
                    "int"
                ],
                "loc": [
                    "str",
                    "int"
                ],
                "toks": [
                    "str",
                    "int"
                ]
            }
        },
        "BoogieParser.onProgram": {
            "name": "onProgram",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "s": [
                    "str",
                    "int"
                ],
                "prod": [
                    "str",
                    "int"
                ],
                "st": [
                    "str",
                    "int"
                ],
                "loc": [
                    "str",
                    "int"
                ],
                "toks": [
                    "str",
                    "int"
                ]
            }
        },
        "BoogieParser.onVarDecl": {
            "name": "onVarDecl",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "s": [
                    "str",
                    "int"
                ],
                "prod": [
                    "str",
                    "int"
                ],
                "st": [
                    "str",
                    "int"
                ],
                "loc": [
                    "str",
                    "int"
                ],
                "toks": [
                    "str",
                    "int"
                ]
            }
        },
        "BoogieParser.onFunctionDecl": {
            "name": "onFunctionDecl",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "s": [
                    "int",
                    "str"
                ],
                "prod": [
                    "int",
                    "str"
                ],
                "st": [
                    "int",
                    "str"
                ],
                "loc": [
                    "int",
                    "str"
                ],
                "toks": [
                    "int",
                    "str"
                ]
            }
        },
        "BoogieParser.onAxiomDecl": {
            "name": "onAxiomDecl",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "s": [
                    "str",
                    "int"
                ],
                "prod": [
                    "str",
                    "int"
                ],
                "st": [
                    "str",
                    "int"
                ],
                "loc": [
                    "str",
                    "int"
                ],
                "toks": [
                    "str",
                    "int"
                ]
            }
        },
        "BoogieParser.onConstDecl": {
            "name": "onConstDecl",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "s": [
                    "str",
                    "int"
                ],
                "prod": [
                    "str",
                    "int"
                ],
                "st": [
                    "str",
                    "int"
                ],
                "loc": [
                    "str",
                    "int"
                ],
                "toks": [
                    "str",
                    "int"
                ]
            }
        },
        "BoogieParser.onImplementationDecl": {
            "name": "onImplementationDecl",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "s": [
                    "str",
                    "int"
                ],
                "prod": [
                    "str",
                    "int"
                ],
                "st": [
                    "str",
                    "int"
                ],
                "loc": [
                    "str",
                    "int"
                ],
                "toks": [
                    "str",
                    "int"
                ]
            }
        },
        "BoogieParser.onProcedureDecl": {
            "name": "onProcedureDecl",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "s": [
                    "str",
                    "int"
                ],
                "prod": [
                    "str",
                    "int"
                ],
                "st": [
                    "str",
                    "int"
                ],
                "loc": [
                    "str",
                    "int"
                ],
                "toks": [
                    "str",
                    "int"
                ]
            }
        },
        "BoogieParser.onTypeConstructorDecl": {
            "name": "onTypeConstructorDecl",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "s": [
                    "str",
                    "int"
                ],
                "prod": [
                    "str",
                    "int"
                ],
                "st": [
                    "str",
                    "int"
                ],
                "loc": [
                    "str",
                    "int"
                ],
                "toks": [
                    "str",
                    "int"
                ]
            }
        },
        "BoogieParser.onBody": {
            "name": "onBody",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "s": [
                    "str",
                    "int"
                ],
                "prod": [
                    "str",
                    "int"
                ],
                "st": [
                    "str",
                    "int"
                ],
                "loc": [
                    "str",
                    "int"
                ],
                "toks": [
                    "str",
                    "int"
                ]
            }
        },
        "BoogieParser.onLocalVarDecl": {
            "name": "onLocalVarDecl",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "s": [
                    "str",
                    "int"
                ],
                "prod": [
                    "str",
                    "int"
                ],
                "st": [
                    "str",
                    "int"
                ],
                "loc": [
                    "str",
                    "int"
                ],
                "toks": [
                    "str",
                    "int"
                ]
            }
        },
        "BoogieParser.onPrimitiveType": {
            "name": "onPrimitiveType",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "s": [
                    "int",
                    "str"
                ],
                "prod": [
                    "int",
                    "str"
                ],
                "st": [
                    "int",
                    "str"
                ],
                "loc": [
                    "int",
                    "str"
                ],
                "toks": [
                    "int",
                    "str"
                ]
            }
        },
        "BoogieParser.onMapType": {
            "name": "onMapType",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "s": [
                    "int",
                    "str"
                ],
                "prod": [
                    "int",
                    "str"
                ],
                "st": [
                    "int",
                    "str"
                ],
                "loc": [
                    "int",
                    "str"
                ],
                "toks": [
                    "int",
                    "str"
                ]
            }
        },
        "BoogieParser.onCompoundType": {
            "name": "onCompoundType",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "s": [
                    "int",
                    "str"
                ],
                "prod": [
                    "int",
                    "str"
                ],
                "st": [
                    "int",
                    "str"
                ],
                "loc": [
                    "int",
                    "str"
                ],
                "toks": [
                    "int",
                    "str"
                ]
            }
        },
        "BoogieParser.onType": {
            "name": "onType",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "s": [
                    "str",
                    "int"
                ],
                "prod": [
                    "str",
                    "int"
                ],
                "st": [
                    "str",
                    "int"
                ],
                "loc": [
                    "str",
                    "int"
                ],
                "toks": [
                    "str",
                    "int"
                ]
            }
        },
        "BoogieParser.onLabeledStatement": {
            "name": "onLabeledStatement",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "s": [
                    "int",
                    "str"
                ],
                "prod": [
                    "int",
                    "str"
                ],
                "st": [
                    "int",
                    "str"
                ],
                "loc": [
                    "int",
                    "str"
                ],
                "toks": [
                    "int",
                    "str"
                ]
            }
        },
        "BoogieParser.onMapIndexArgs": {
            "name": "onMapIndexArgs",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "s": [
                    "int",
                    "str"
                ],
                "prod": [
                    "int",
                    "str"
                ],
                "st": [
                    "int",
                    "str"
                ],
                "loc": [
                    "int",
                    "str"
                ],
                "toks": [
                    "int",
                    "str"
                ]
            }
        },
        "BoogieParser.onMapUpdateArgs": {
            "name": "onMapUpdateArgs",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "s": [
                    "int",
                    "str"
                ],
                "prod": [
                    "int",
                    "str"
                ],
                "st": [
                    "int",
                    "str"
                ],
                "loc": [
                    "int",
                    "str"
                ],
                "toks": [
                    "int",
                    "str"
                ]
            }
        },
        "BoogieParser.onFunAppArgs": {
            "name": "onFunAppArgs",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "s": [
                    "int",
                    "str"
                ],
                "prod": [
                    "int",
                    "str"
                ],
                "st": [
                    "int",
                    "str"
                ],
                "loc": [
                    "int",
                    "str"
                ],
                "toks": [
                    "int",
                    "str"
                ]
            }
        },
        "BoogieParser.onQuantified": {
            "name": "onQuantified",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "s": [
                    "str",
                    "int"
                ],
                "prod": [
                    "str",
                    "int"
                ],
                "st": [
                    "str",
                    "int"
                ],
                "loc": [
                    "str",
                    "int"
                ],
                "toks": [
                    "str",
                    "int"
                ]
            }
        },
        "BoogieParser.onBinding": {
            "name": "onBinding",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "s": [
                    "str",
                    "int"
                ],
                "prod": [
                    "str",
                    "int"
                ],
                "st": [
                    "str",
                    "int"
                ],
                "loc": [
                    "str",
                    "int"
                ],
                "toks": [
                    "str",
                    "int"
                ]
            }
        },
        "BoogieParser.onAttribute": {
            "name": "onAttribute",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "s": [
                    "str",
                    "int"
                ],
                "prod": [
                    "str",
                    "int"
                ],
                "st": [
                    "str",
                    "int"
                ],
                "loc": [
                    "str",
                    "int"
                ],
                "toks": [
                    "str",
                    "int"
                ]
            }
        },
        "BoogieParser.onAtom": {
            "name": "onAtom",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "s": [
                    "str",
                    "int"
                ],
                "prod": [
                    "str",
                    "int"
                ],
                "st": [
                    "str",
                    "int"
                ],
                "loc": [
                    "str",
                    "int"
                ],
                "toks": [
                    "str",
                    "int"
                ]
            }
        },
        "BoogieParser.onUnaryOp": {
            "name": "onUnaryOp",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "s": [
                    "str",
                    "int"
                ],
                "prod": [
                    "str",
                    "int"
                ],
                "st": [
                    "str",
                    "int"
                ],
                "loc": [
                    "str",
                    "int"
                ],
                "toks": [
                    "str",
                    "int"
                ]
            }
        },
        "BoogieParser.onLABinOp": {
            "name": "onLABinOp",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "s": [
                    "str",
                    "int"
                ],
                "prod": [
                    "str",
                    "int"
                ],
                "st": [
                    "str",
                    "int"
                ],
                "loc": [
                    "str",
                    "int"
                ],
                "toks": [
                    "str",
                    "int"
                ]
            }
        },
        "BoogieParser.onRABinOp": {
            "name": "onRABinOp",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "s": [
                    "str",
                    "int"
                ],
                "prod": [
                    "str",
                    "int"
                ],
                "st": [
                    "str",
                    "int"
                ],
                "loc": [
                    "str",
                    "int"
                ],
                "toks": [
                    "str",
                    "int"
                ]
            }
        },
        "BoogieParser.onNABinOp": {
            "name": "onNABinOp",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "s": [
                    "str",
                    "int"
                ],
                "prod": [
                    "str",
                    "int"
                ],
                "st": [
                    "str",
                    "int"
                ],
                "loc": [
                    "str",
                    "int"
                ],
                "toks": [
                    "str",
                    "int"
                ]
            }
        },
        "BoogieParser.onTernary": {
            "name": "onTernary",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "s": [
                    "str",
                    "int"
                ],
                "prod": [
                    "str",
                    "int"
                ],
                "st": [
                    "str",
                    "int"
                ],
                "loc": [
                    "str",
                    "int"
                ],
                "toks": [
                    "str",
                    "int"
                ]
            }
        },
        "BoogieParser.onWildcardExpr": {
            "name": "onWildcardExpr",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "s": [
                    "str",
                    "int"
                ],
                "prod": [
                    "str",
                    "int"
                ],
                "st": [
                    "str",
                    "int"
                ],
                "loc": [
                    "str",
                    "int"
                ],
                "toks": [
                    "str",
                    "int"
                ]
            }
        },
        "BoogieParser.__init__": {
            "name": "__init__",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "s": [
                    "int",
                    "list[]",
                    "bytes",
                    "list[str]",
                    "typing.Any",
                    "None"
                ]
            }
        },
        "BoogieParser.parseExpr": {
            "name": "parseExpr",
            "location": 412,
            "return": [],
            "arguments": {
                "s": [
                    "str"
                ],
                "st": [
                    "str"
                ]
            }
        },
        "BoogieParser.parseStmt": {
            "name": "parseStmt",
            "location": 415,
            "return": [],
            "arguments": {
                "s": [
                    "str"
                ],
                "st": [
                    "str"
                ]
            }
        },
        "BoogieParser.parseDecl": {
            "name": "parseDecl",
            "location": 418,
            "return": [],
            "arguments": {
                "s": [
                    "str",
                    "bool"
                ],
                "st": [
                    "str",
                    "bool"
                ]
            }
        },
        "BoogieParser.parseProgram": {
            "name": "parseProgram",
            "location": 421,
            "return": [],
            "arguments": {
                "s": [
                    "str",
                    "bool",
                    "bytes",
                    "typing.Mapping",
                    "None"
                ],
                "st": [
                    "str",
                    "bool",
                    "bytes",
                    "typing.Mapping",
                    "None"
                ]
            }
        },
        "BoogieParser.parseBinding": {
            "name": "parseBinding",
            "location": 424,
            "return": [],
            "arguments": {
                "s": [
                    "str"
                ],
                "st": [
                    "str"
                ]
            }
        },
        "BoogieParser.parseType": {
            "name": "parseType",
            "location": 427,
            "return": [],
            "arguments": {
                "s": [
                    "str",
                    "list[str]"
                ],
                "st": [
                    "str",
                    "list[str]"
                ]
            }
        }
    },
    "pyboogie-master/pyboogie/interp.py": {
        "val_to_ast": {
            "name": "val_to_ast",
            "location": 44,
            "return": [
                "AstNumber",
                "AstTrue",
                "AstFalse"
            ],
            "arguments": {
                "v": [
                    "int"
                ]
            }
        },
        "store_to_expr": {
            "name": "store_to_expr",
            "location": 52,
            "return": [],
            "arguments": {
                "s": [],
                "suff": [
                    "typing.Text"
                ]
            }
        },
        "eval_quick": {
            "name": "eval_quick",
            "location": 116,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "expr": [
                    "int",
                    "None"
                ],
                "store": [
                    "str",
                    "bool",
                    "typing.Iterable[str]"
                ]
            }
        },
        "stalled": {
            "name": "stalled",
            "location": 178,
            "return": [
                "bool"
            ],
            "arguments": {
                "s": [
                    "str",
                    "bool"
                ]
            }
        },
        "active": {
            "name": "active",
            "location": 186,
            "return": [
                "bool"
            ],
            "arguments": {
                "s": [
                    "str",
                    "bool"
                ]
            }
        },
        "finished": {
            "name": "finished",
            "location": 193,
            "return": [
                "bool"
            ],
            "arguments": {
                "s": [
                    "str",
                    "bool"
                ]
            }
        },
        "interp_one": {
            "name": "interp_one",
            "location": 201,
            "return": [
                "typing.Generator[typing.Union[typing.Callable[, ],str]]",
                "None",
                "typing.Generator[State]"
            ],
            "arguments": {
                "state": [
                    "typing.Callable[, ]",
                    "str"
                ],
                "rand": [
                    "str",
                    "list[str]"
                ]
            }
        },
        "trace_n": {
            "name": "trace_n",
            "location": 251,
            "return": [
                "tuple[list[list[typing.Union[int,dict[str, typing.Any],dict[, ],list[]]]]]"
            ],
            "arguments": {
                "state": [
                    "int",
                    "dict[str, typing.Any]"
                ],
                "nsteps": [
                    "int",
                    "dict[str, typing.Any]"
                ],
                "rand": [],
                "filt": [
                    "list[list[str]]"
                ]
            }
        },
        "trace_n_from_start": {
            "name": "trace_n_from_start",
            "location": 298,
            "return": [],
            "arguments": {
                "fun": [],
                "starting_store": [
                    "int",
                    "float",
                    "str",
                    "None"
                ],
                "nsteps": [
                    "int"
                ],
                "rand": [
                    "int"
                ],
                "filt": [
                    "int"
                ]
            }
        },
        "FuncInterp.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "explicit_cases": [
                    "int",
                    "typing.Callable[, ]",
                    "str",
                    "float",
                    "dict[str, typing.Any]"
                ],
                "default": [
                    "int",
                    "typing.Callable[, ]",
                    "str",
                    "float",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "FuncInterp.__hash__": {
            "name": "__hash__",
            "location": 14,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "FuncInterp.to_dict": {
            "name": "to_dict",
            "location": 18,
            "return": [
                "dict[typing.Text, ]"
            ],
            "arguments": {
                "f": [
                    "int",
                    "typing.Iterable[typing.Any]"
                ]
            }
        },
        "FuncInterp.from_dict": {
            "name": "from_dict",
            "location": 22,
            "return": [
                "FuncInterp"
            ],
            "arguments": {
                "d": [
                    "bytes",
                    "str",
                    "tuple[typing.Union[int,int]]"
                ]
            }
        },
        "OpaqueVal.to_dict": {
            "name": "to_dict",
            "location": 27,
            "return": [
                "dict[, ]"
            ],
            "arguments": {
                "f": [
                    "typing.Type",
                    "typing.Callable[, ]",
                    "dict[, ]"
                ]
            }
        },
        "OpaqueVal.from_dict": {
            "name": "from_dict",
            "location": 31,
            "return": [
                "OpaqueVal"
            ],
            "arguments": {
                "d": [
                    "dict[, ]",
                    "typing.Callable[, ]",
                    "str"
                ]
            }
        },
        "pp_state": {
            "name": "pp_state",
            "location": 355,
            "return": [
                "str"
            ],
            "arguments": {
                "st": [
                    "str",
                    "typing.Mapping"
                ]
            }
        },
        "pp_trace": {
            "name": "pp_trace",
            "location": 359,
            "return": [
                "str"
            ],
            "arguments": {
                "t": []
            }
        },
        "f": {
            "name": "f",
            "location": 331,
            "return": [
                "list[]"
            ],
            "arguments": {
                "states": [
                    "list[]"
                ]
            }
        },
        "f.lookahead_one_filter": {
            "name": "lookahead_one_filter",
            "location": 332,
            "return": [
                "bool"
            ],
            "arguments": {
                "s": []
            }
        }
    },
    "pyboogie-master/pyboogie/inv_networks.py": {
        "filterCandidateInvariants": {
            "name": "filterCandidateInvariants",
            "location": 88,
            "return": [],
            "arguments": {
                "fun": [],
                "preCond": [
                    "int",
                    "list[str]",
                    "set[]",
                    "tuple[int]",
                    "float",
                    "str"
                ],
                "postCond": [
                    "str",
                    "bool",
                    "typing.Iterable[str]"
                ],
                "cutPoints": [],
                "timeout": [
                    "None",
                    "typing.Callable[, ]",
                    "bool",
                    "typing.Any",
                    "str",
                    "float"
                ]
            }
        },
        "checkInvNetwork": {
            "name": "checkInvNetwork",
            "location": 191,
            "return": [],
            "arguments": {
                "fun": [],
                "preCond": [
                    "list[str]",
                    "list[]",
                    "str",
                    "bool",
                    "tuple[str]"
                ],
                "postCond": [
                    "str",
                    "bool",
                    "bytes",
                    "None"
                ],
                "cutPoints": [
                    "int",
                    "dict[str, str]",
                    "str"
                ],
                "timeout": [
                    "None",
                    "int",
                    "float"
                ]
            }
        },
        "Violation.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "s": [
                    "str",
                    "list[str]",
                    "None"
                ],
                "typ": [
                    "str",
                    "bool"
                ],
                "path": [
                    "str",
                    "list[str]",
                    "None"
                ],
                "lastBBCompletedStmts": [
                    "str",
                    "bool"
                ],
                "query": [
                    "str",
                    "None"
                ],
                "ctrex": [
                    "str",
                    "bool"
                ]
            }
        },
        "Violation.isInductive": {
            "name": "isInductive",
            "location": 27,
            "return": [
                "bool"
            ],
            "arguments": {
                "s": [
                    "str"
                ]
            }
        },
        "Violation.isSafety": {
            "name": "isSafety",
            "location": 29,
            "return": [
                "bool"
            ],
            "arguments": {
                "s": [
                    "str"
                ]
            }
        },
        "Violation.startBB": {
            "name": "startBB",
            "location": 31,
            "return": [],
            "arguments": {
                "s": [
                    "str"
                ]
            }
        },
        "Violation.endBB": {
            "name": "endBB",
            "location": 34,
            "return": [],
            "arguments": {
                "s": [
                    "str"
                ]
            }
        },
        "Violation.startReplM": {
            "name": "startReplM",
            "location": 37,
            "return": [],
            "arguments": {
                "s": [
                    "str"
                ]
            }
        },
        "Violation.endReplM": {
            "name": "endReplM",
            "location": 40,
            "return": [],
            "arguments": {
                "s": [
                    "str",
                    "int"
                ]
            }
        },
        "Violation._filterStore": {
            "name": "_filterStore",
            "location": 50,
            "return": [
                "dict[tuple[typing.Union[str,typing.Any]], tuple[typing.Union[str,typing.Any]]]"
            ],
            "arguments": {
                "s": [
                    "dict[, ]",
                    "dict[str, typing.Any]"
                ],
                "repl_m": [
                    "str",
                    "bytes"
                ]
            }
        },
        "Violation.startEnv": {
            "name": "startEnv",
            "location": 53,
            "return": [],
            "arguments": {
                "s": []
            }
        },
        "Violation.endEnv": {
            "name": "endEnv",
            "location": 58,
            "return": [],
            "arguments": {
                "s": []
            }
        },
        "Violation.__str__": {
            "name": "__str__",
            "location": 62,
            "return": [
                "str"
            ],
            "arguments": {
                "s": []
            }
        },
        "Violation.__repr__": {
            "name": "__repr__",
            "location": 66,
            "return": [],
            "arguments": {
                "s": []
            }
        },
        "Violation.to_json": {
            "name": "to_json",
            "location": 69,
            "return": [
                "tuple[typing.Union[list[list[]],list[tuple[str]]]]"
            ],
            "arguments": {
                "s": [
                    "str"
                ]
            }
        }
    },
    "pyboogie-master/pyboogie/paths.py": {
        "nd_bb_path_to_ssa": {
            "name": "nd_bb_path_to_ssa",
            "location": 153,
            "return": [],
            "arguments": {
                "p": [
                    "str",
                    "dict[, ]"
                ],
                "ssa_env": [],
                "cur_p": [
                    "typing.Text"
                ]
            }
        },
        "ssa_stmt": {
            "name": "ssa_stmt",
            "location": 214,
            "return": [
                "AstAssert",
                "AstAssignment"
            ],
            "arguments": {
                "stmt": [
                    "dict[str, typing.Any]"
                ],
                "prev_replm": [
                    "tuple[int]",
                    "str"
                ],
                "cur_replm": [
                    "int",
                    "typing.AbstractSet",
                    "None"
                ]
            }
        },
        "_ssa_stmts": {
            "name": "_ssa_stmts",
            "location": 225,
            "return": [
                "list[]"
            ],
            "arguments": {
                "stmts": [],
                "envs": [
                    "list[int]",
                    "list[float]",
                    "int",
                    "str",
                    "typing.Sequence[T]"
                ]
            }
        },
        "is_nd_bb_path_possible": {
            "name": "is_nd_bb_path_possible",
            "location": 229,
            "return": [],
            "arguments": {
                "bbpath": [
                    "str",
                    "typing.BinaryIO",
                    "bytes",
                    "memoryview"
                ],
                "f": []
            }
        },
        "extract_ssa_path_vars": {
            "name": "extract_ssa_path_vars",
            "location": 234,
            "return": [
                "list[]"
            ],
            "arguments": {
                "ssa_p": [
                    "int",
                    "float"
                ],
                "m": [
                    "str"
                ]
            }
        },
        "get_path_vars": {
            "name": "get_path_vars",
            "location": 263,
            "return": [],
            "arguments": {
                "bbpath": [
                    "typing.Any",
                    "None",
                    "bytes",
                    "int"
                ],
                "f": []
            }
        },
        "Path.__hash__": {
            "name": "__hash__",
            "location": 20,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "NondetNode.__init__": {
            "name": "__init__",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "paths": [
                    "str",
                    "int"
                ]
            }
        },
        "NondetNode.__iter__": {
            "name": "__iter__",
            "location": 37,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NondetNode.__str__": {
            "name": "__str__",
            "location": 40,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "NondetNode.__repr__": {
            "name": "__repr__",
            "location": 43,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "NondetPath.__hash__": {
            "name": "__hash__",
            "location": 48,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "NondetSSAPathNode.to_z3": {
            "name": "to_z3",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tenv": [
                    "dict[, ]",
                    "typing.IO",
                    "list[str]",
                    "int",
                    "typing.Iterator"
                ]
            }
        },
        "NondetSSAPathNode.wp": {
            "name": "wp",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pred": [
                    "int",
                    "str",
                    "typing.Iterable['Context']"
                ],
                "tenv": [
                    "int",
                    "str",
                    "typing.Iterable['Context']"
                ]
            }
        },
        "NondetSSAPathNode.sp": {
            "name": "sp",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pred": [
                    "int",
                    "str",
                    "typing.Iterable['Context']"
                ],
                "tenv": [
                    "int",
                    "str",
                    "typing.Iterable['Context']"
                ]
            }
        },
        "SSABBNode.__init__": {
            "name": "__init__",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "bb": [
                    "str",
                    "list[str]",
                    "bool",
                    "list[]",
                    "None",
                    "list[list[typing.Any]]",
                    "tuple[int]"
                ],
                "repl_m": [
                    "str",
                    "list[str]",
                    "tuple[int]",
                    "list[int]",
                    "list[float]",
                    "list[]"
                ]
            }
        },
        "SSABBNode.to_z3": {
            "name": "to_z3",
            "location": 83,
            "return": [],
            "arguments": {
                "self": [],
                "tenv": [
                    "int",
                    "set[str]"
                ]
            }
        },
        "SSABBNode.wp": {
            "name": "wp",
            "location": 87,
            "return": [],
            "arguments": {
                "self": [],
                "pred": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ],
                "tenv": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ]
            }
        },
        "SSABBNode.sp": {
            "name": "sp",
            "location": 90,
            "return": [],
            "arguments": {
                "self": [],
                "pred": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ],
                "tenv": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ]
            }
        },
        "SSABBNode.__str__": {
            "name": "__str__",
            "location": 93,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "SSABBNode.__repr__": {
            "name": "__repr__",
            "location": 96,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "SSANondetNode.__init__": {
            "name": "__init__",
            "location": 105,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "choice_var": [
                    "str",
                    "bool",
                    "list[str]",
                    "dict[, ]",
                    "None"
                ],
                "paths": [
                    "bool",
                    "str",
                    "typing.Iterable[str]"
                ]
            }
        },
        "SSANondetNode.__iter__": {
            "name": "__iter__",
            "location": 109,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SSANondetNode.to_z3": {
            "name": "to_z3",
            "location": 112,
            "return": [],
            "arguments": {
                "self": [],
                "tenv": [
                    "int",
                    "str"
                ]
            }
        },
        "SSANondetNode.wp": {
            "name": "wp",
            "location": 116,
            "return": [],
            "arguments": {
                "self": [],
                "pred": [
                    "str",
                    "typing.Callable[list[], list[str]]",
                    "typing.Sequence[typing.Sequence[T]]"
                ],
                "tenv": [
                    "str",
                    "typing.Callable[list[], list[str]]",
                    "typing.Sequence[typing.Sequence[T]]"
                ]
            }
        },
        "SSANondetNode.sp": {
            "name": "sp",
            "location": 119,
            "return": [],
            "arguments": {
                "self": [],
                "pred": [
                    "str",
                    "typing.Callable[list[], list[str]]",
                    "typing.Sequence[typing.Sequence[T]]"
                ],
                "tenv": [
                    "str",
                    "typing.Callable[list[], list[str]]",
                    "typing.Sequence[typing.Sequence[T]]"
                ]
            }
        },
        "SSANondetNode.__str__": {
            "name": "__str__",
            "location": 122,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "NondetSSAPath.exits": {
            "name": "exits",
            "location": 126,
            "return": [
                "list[SSABBNode]"
            ],
            "arguments": {
                "self": []
            }
        },
        "NondetSSAPath.to_z3": {
            "name": "to_z3",
            "location": 134,
            "return": [],
            "arguments": {
                "self": [],
                "tenv": [
                    "str",
                    "None",
                    "tuple[]"
                ]
            }
        },
        "NondetSSAPath.wp": {
            "name": "wp",
            "location": 137,
            "return": [
                "typing.Callable[None, None]",
                "str",
                "int",
                "tuple[typing.Union[int,int]]"
            ],
            "arguments": {
                "self": [],
                "pred": [
                    "typing.Callable[None, None]",
                    "str",
                    "int",
                    "tuple[typing.Union[int,int]]"
                ],
                "tenv": [
                    "typing.Callable[None, None]",
                    "str",
                    "int",
                    "tuple[typing.Union[int,int]]"
                ]
            }
        },
        "NondetSSAPath.sp": {
            "name": "sp",
            "location": 142,
            "return": [
                "typing.Callable[None, None]",
                "str",
                "int",
                "tuple[typing.Union[int,int]]"
            ],
            "arguments": {
                "self": [],
                "pred": [
                    "typing.Callable[None, None]",
                    "str",
                    "int",
                    "tuple[typing.Union[int,int]]"
                ],
                "tenv": [
                    "typing.Callable[None, None]",
                    "str",
                    "int",
                    "tuple[typing.Union[int,int]]"
                ]
            }
        },
        "NondetSSAPath.__str__": {
            "name": "__str__",
            "location": 147,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "extract_ssa_path_vars._helper": {
            "name": "_helper",
            "location": 238,
            "return": [
                "list[tuple[list[dict[str, ]]]]"
            ],
            "arguments": {
                "ssa_p": []
            }
        }
    },
    "pyboogie-master/pyboogie/predicate_transformers.py": {
        "wp_stmt": {
            "name": "wp_stmt",
            "location": 12,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "stmt": [
                    "int",
                    "str"
                ],
                "pred": [
                    "str",
                    "bool"
                ],
                "typeEnv": []
            }
        },
        "wp_stmts": {
            "name": "wp_stmts",
            "location": 33,
            "return": [
                "Exception",
                "None",
                "typing.Type",
                "BaseException"
            ],
            "arguments": {
                "stmts": [
                    "bool",
                    "dict[, ]"
                ],
                "pred": [
                    "Exception",
                    "None",
                    "typing.Type",
                    "BaseException"
                ],
                "typeEnv": [
                    "Exception",
                    "None",
                    "typing.Type",
                    "BaseException"
                ]
            }
        },
        "sp_stmt": {
            "name": "sp_stmt",
            "location": 40,
            "return": [],
            "arguments": {
                "stmt": [
                    "int",
                    "str"
                ],
                "pred": [
                    "dict[, ]",
                    "list[]",
                    "bool",
                    "str",
                    "None"
                ],
                "typeEnv": []
            }
        },
        "sp_stmts": {
            "name": "sp_stmts",
            "location": 65,
            "return": [
                "typing.Final",
                "Exception",
                "int",
                "set[str]",
                "None",
                "typing.Type",
                "BaseException"
            ],
            "arguments": {
                "stmts": [
                    "list[str]"
                ],
                "pred": [
                    "Exception",
                    "None",
                    "typing.Type",
                    "BaseException"
                ],
                "typeEnv": [
                    "Exception",
                    "None",
                    "typing.Type",
                    "BaseException"
                ]
            }
        }
    },
    "pyboogie-master/pyboogie/ssa.py": {
        "is_ssa_str": {
            "name": "is_ssa_str",
            "location": 52,
            "return": [
                "bool"
            ],
            "arguments": {
                "s": [
                    "str"
                ]
            }
        },
        "unssa_str": {
            "name": "unssa_str",
            "location": 56,
            "return": [
                "str"
            ],
            "arguments": {
                "s": [
                    "str"
                ]
            }
        },
        "unssa_z3_model": {
            "name": "unssa_z3_model",
            "location": 59,
            "return": [],
            "arguments": {
                "m": [
                    "dict[, ]"
                ],
                "repl_m": [
                    "dict[, ]"
                ]
            }
        },
        "get_ssa_tenv": {
            "name": "get_ssa_tenv",
            "location": 67,
            "return": [
                "SSATEnv"
            ],
            "arguments": {
                "tenv": [
                    "str",
                    "bool"
                ]
            }
        },
        "SSAEnv.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "s": [
                    "str",
                    "list[tuple[]]"
                ],
                "parent": [
                    "None",
                    "str"
                ],
                "prefix": [
                    "typing.Text"
                ]
            }
        },
        "SSAEnv._lookup_cnt": {
            "name": "_lookup_cnt",
            "location": 16,
            "return": [
                "int"
            ],
            "arguments": {
                "s": [
                    "bool",
                    "list[set[str]]"
                ],
                "v": [
                    "set[tuple[typing.Union[int,typing.Any,typing.Any]]]"
                ]
            }
        },
        "SSAEnv.lookup": {
            "name": "lookup",
            "location": 25,
            "return": [
                "str",
                "bytes",
                "list[str]"
            ],
            "arguments": {
                "s": [
                    "str",
                    "typing.Pattern",
                    "bytes",
                    "int"
                ],
                "v": [
                    "str",
                    "bytes",
                    "list[str]"
                ]
            }
        },
        "SSAEnv.contains": {
            "name": "contains",
            "location": 34,
            "return": [
                "bool"
            ],
            "arguments": {
                "s": [
                    "str",
                    "int",
                    "float"
                ],
                "v": [
                    "str",
                    "int",
                    "float"
                ]
            }
        },
        "SSAEnv.update": {
            "name": "update",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "s": [],
                "v": [
                    "str",
                    "None"
                ]
            }
        },
        "SSAEnv.remove": {
            "name": "remove",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "s": [
                    "str",
                    "bytes",
                    "int",
                    "typing.Callable[, ]",
                    "tuple[typing.Union[int,int]]",
                    "None",
                    "list[]"
                ],
                "v": [
                    "str",
                    "bytes",
                    "int",
                    "typing.Callable[, ]",
                    "tuple[typing.Union[int,int]]",
                    "None",
                    "list[]"
                ]
            }
        },
        "SSAEnv.changed": {
            "name": "changed",
            "location": 43,
            "return": [
                "list[]"
            ],
            "arguments": {
                "s": [
                    "str",
                    "int",
                    "None",
                    "typing.Iterator"
                ]
            }
        },
        "SSAEnv.replm": {
            "name": "replm",
            "location": 46,
            "return": [
                "dict[AstId, AstId]"
            ],
            "arguments": {
                "s": [
                    "str",
                    "bool",
                    "dict[, ]",
                    "None"
                ]
            }
        },
        "get_ssa_tenv.SSATEnv.__init__": {
            "name": "__init__",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "inner": []
            }
        },
        "get_ssa_tenv.SSATEnv.__getitem__": {
            "name": "__getitem__",
            "location": 71,
            "return": [],
            "arguments": {
                "self": [],
                "k": []
            }
        },
        "get_ssa_tenv.SSATEnv.__setitem__": {
            "name": "__setitem__",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "k": [],
                "typ": []
            }
        },
        "get_ssa_tenv.SSATEnv.__copy__": {
            "name": "__copy__",
            "location": 79,
            "return": [
                "SSATEnv"
            ],
            "arguments": {
                "self": []
            }
        },
        "get_ssa_tenv.SSATEnv.__str__": {
            "name": "__str__",
            "location": 84,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pyboogie-master/pyboogie/tc.py": {
        "flatBindings": {
            "name": "flatBindings",
            "location": 254,
            "return": [
                "typing.Generator[tuple[]]"
            ],
            "arguments": {
                "bindings": [
                    "str"
                ]
            }
        },
        "tcType": {
            "name": "tcType",
            "location": 260,
            "return": [
                "BInt",
                "BBool",
                "BBV",
                "BMap",
                "BUserType"
            ],
            "arguments": {
                "node": [],
                "env": []
            }
        },
        "tcExpr": {
            "name": "tcExpr",
            "location": 299,
            "return": [
                "BBool",
                "BInt"
            ],
            "arguments": {
                "node": [
                    "str",
                    "dict[, ]"
                ],
                "env": [
                    "str"
                ]
            }
        },
        "tcStmt": {
            "name": "tcStmt",
            "location": 432,
            "return": [
                "None"
            ],
            "arguments": {
                "node": [],
                "env": []
            }
        },
        "typeAccumulate": {
            "name": "typeAccumulate",
            "location": 492,
            "return": [
                "None"
            ],
            "arguments": {
                "d": [],
                "env": []
            }
        },
        "tcDecl": {
            "name": "tcDecl",
            "location": 537,
            "return": [
                "None"
            ],
            "arguments": {
                "d": [
                    "dict[str, typing.Any]"
                ],
                "env": [
                    "str",
                    "list[dict[str, str]]",
                    "list[]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "tcProg": {
            "name": "tcProg",
            "location": 626,
            "return": [
                "BoogieScope"
            ],
            "arguments": {
                "p": [
                    "float",
                    "int",
                    "str"
                ]
            }
        },
        "Singleton.__eq__": {
            "name": "__eq__",
            "location": 20,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "str",
                    "tuple[typing.Union[float,float]]",
                    "typing.Type"
                ]
            }
        },
        "Singleton.__hash__": {
            "name": "__hash__",
            "location": 23,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "BInt.__str__": {
            "name": "__str__",
            "location": 33,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "BBool.__str__": {
            "name": "__str__",
            "location": 37,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "BBV.__init__": {
            "name": "__init__",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "nbits": [
                    "int",
                    "float"
                ]
            }
        },
        "BBV.__eq__": {
            "name": "__eq__",
            "location": 44,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "int"
                ]
            }
        },
        "BBV.__hash__": {
            "name": "__hash__",
            "location": 47,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "BBV.__str__": {
            "name": "__str__",
            "location": 50,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BMap.__init__": {
            "name": "__init__",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "domain": [
                    "int",
                    "str",
                    "typing.Sequence[T]"
                ],
                "range": [
                    "int",
                    "str",
                    "typing.Sequence[T]"
                ]
            }
        },
        "BMap.__eq__": {
            "name": "__eq__",
            "location": 58,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "str"
                ]
            }
        },
        "BMap.__hash__": {
            "name": "__hash__",
            "location": 63,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "BMap.__str__": {
            "name": "__str__",
            "location": 66,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BLambda.__init__": {
            "name": "__init__",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "args": [],
                "ret": [
                    "int",
                    "float"
                ]
            }
        },
        "BLambda.__eq__": {
            "name": "__eq__",
            "location": 75,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "list[float]",
                    "list[typing.Type]",
                    "dict[str, typing.Any]",
                    "None",
                    "str",
                    "typing.Callable[, ]"
                ]
            }
        },
        "BLambda.__hash__": {
            "name": "__hash__",
            "location": 80,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "BLambda.__str__": {
            "name": "__str__",
            "location": 83,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BProcedure.__init__": {
            "name": "__init__",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "args": [],
                "rets": [
                    "int",
                    "float"
                ]
            }
        },
        "BProcedure.__eq__": {
            "name": "__eq__",
            "location": 96,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "list[float]",
                    "list[typing.Type]",
                    "dict[str, typing.Any]",
                    "None",
                    "str",
                    "typing.Callable[, ]"
                ]
            }
        },
        "BProcedure.__hash__": {
            "name": "__hash__",
            "location": 101,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "BProcedure.__str__": {
            "name": "__str__",
            "location": 104,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BUserType.__init__": {
            "name": "__init__",
            "location": 111,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "dict[str, typing.Any]",
                    "list[str]",
                    "dict[, ]"
                ],
                "args": []
            }
        },
        "BUserType.__eq__": {
            "name": "__eq__",
            "location": 115,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "str",
                    "typing.Callable[, ]"
                ]
            }
        },
        "BUserType.__hash__": {
            "name": "__hash__",
            "location": 120,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "BUserType.__str__": {
            "name": "__str__",
            "location": 123,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BTypeError.__init__": {
            "name": "__init__",
            "location": 128,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "loc": [
                    "int",
                    "float"
                ],
                "msg": [
                    "str",
                    "typing.IO",
                    "bool",
                    "None"
                ]
            }
        },
        "BTypeError.__str__": {
            "name": "__str__",
            "location": 132,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BoogieScope.__init__": {
            "name": "__init__",
            "location": 141,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "root": [
                    "str",
                    "bool",
                    "dict[str, typing.Any]",
                    "typing.Type",
                    "list[typing.Union[str,S]]"
                ],
                "parent": [
                    "float",
                    "str",
                    "None",
                    "typing.Iterable[]"
                ]
            }
        },
        "BoogieScope._define": {
            "name": "_define",
            "location": 179,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "Id": [
                    "str",
                    "None",
                    "int"
                ],
                "obj": [
                    "int",
                    "None",
                    "str"
                ],
                "mapping": []
            }
        },
        "BoogieScope.defType": {
            "name": "defType",
            "location": 186,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "bool"
                ],
                "typ": [
                    "str",
                    "bool"
                ]
            }
        },
        "BoogieScope.lookupType": {
            "name": "lookupType",
            "location": 189,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "typing.Type",
                    "None"
                ]
            }
        },
        "BoogieScope.defFun": {
            "name": "defFun",
            "location": 198,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "list[str]",
                    "None"
                ],
                "typ": [
                    "str",
                    "list[str]",
                    "None"
                ]
            }
        },
        "BoogieScope.lookupFun": {
            "name": "lookupFun",
            "location": 201,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "list[]"
                ]
            }
        },
        "BoogieScope.defVar": {
            "name": "defVar",
            "location": 210,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "None"
                ],
                "typ": [
                    "str",
                    "None"
                ]
            }
        },
        "BoogieScope.lookupVar": {
            "name": "lookupVar",
            "location": 213,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "BoogieScope.defProc": {
            "name": "defProc",
            "location": 222,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "list[str]",
                    "None"
                ],
                "typ": [
                    "str",
                    "list[str]",
                    "None"
                ]
            }
        },
        "BoogieScope.lookupProc": {
            "name": "lookupProc",
            "location": 225,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "list[]"
                ]
            }
        },
        "BoogieScope.lookupScope": {
            "name": "lookupScope",
            "location": 234,
            "return": [
                "BoogieScope",
                "dict[str, typing.Any]",
                "None",
                "dict[str, str]",
                "str",
                "typing.Hashable"
            ],
            "arguments": {
                "self": [],
                "root": [
                    "str",
                    "typing.Mapping",
                    "None",
                    "Exception"
                ]
            }
        }
    },
    "pyboogie-master/pyboogie/util.py": {
        "ccast": {
            "name": "ccast",
            "location": 13,
            "return": [
                "tuple[typing.Union[float,float]]",
                "float",
                "int",
                "list[]"
            ],
            "arguments": {
                "a": [
                    "tuple[typing.Union[float,float]]",
                    "float",
                    "int",
                    "list[]"
                ],
                "t": [
                    "tuple[typing.Union[float,float]]",
                    "float",
                    "int",
                    "list[]"
                ]
            }
        },
        "clcast": {
            "name": "clcast",
            "location": 18,
            "return": [
                "list[]"
            ],
            "arguments": {
                "a": [
                    "list[float]"
                ],
                "t": [
                    "int",
                    "float",
                    "list[float]"
                ]
            }
        },
        "error": {
            "name": "error",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "fatal": {
            "name": "fatal",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "unique": {
            "name": "unique",
            "location": 36,
            "return": [],
            "arguments": {
                "iterable": [],
                "msg": [
                    "typing.Text"
                ]
            }
        },
        "powerset": {
            "name": "powerset",
            "location": 42,
            "return": [
                "typing.Generator[set[]]"
            ],
            "arguments": {
                "s": []
            }
        },
        "split": {
            "name": "split",
            "location": 48,
            "return": [
                "tuple[list[typing.Text]]"
            ],
            "arguments": {
                "pred": [
                    "typing.Callable[T, bool]",
                    "int",
                    "list[]"
                ],
                "itr": [
                    "str"
                ]
            }
        },
        "nonempty": {
            "name": "nonempty",
            "location": 59,
            "return": [
                "list[typing.Union[list[str],int]]"
            ],
            "arguments": {
                "lst": [
                    "list[list[str]]",
                    "bytearray",
                    "list[int]"
                ]
            }
        },
        "flattenList": {
            "name": "flattenList",
            "location": 64,
            "return": [],
            "arguments": {
                "s": [
                    "str",
                    "int",
                    "bytes"
                ]
            }
        },
        "first": {
            "name": "first",
            "location": 67,
            "return": [
                "int"
            ],
            "arguments": {
                "it": [
                    "str"
                ],
                "pred": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ]
            }
        },
        "resetUIDCtrs": {
            "name": "resetUIDCtrs",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "get_uid": {
            "name": "get_uid",
            "location": 84,
            "return": [
                "str"
            ],
            "arguments": {
                "prefix": [
                    "str"
                ]
            }
        },
        "ite": {
            "name": "ite",
            "location": 95,
            "return": [
                "bool",
                "float",
                "None"
            ],
            "arguments": {
                "c": [
                    "bool",
                    "float",
                    "None"
                ],
                "a": [
                    "bool",
                    "float",
                    "None"
                ],
                "b": [
                    "bool",
                    "float",
                    "None"
                ]
            }
        }
    },
    "pyboogie-master/pyboogie/z3_embed.py": {
        "fi_deserialize": {
            "name": "fi_deserialize",
            "location": 30,
            "return": [],
            "arguments": {
                "classname": [
                    "str",
                    "bool",
                    "dict[str, typing.Any]"
                ],
                "d": [
                    "dict[, ]",
                    "int",
                    "tuple[typing.Union[float,float]]",
                    "tuple[typing.Union[int,int,int]]"
                ]
            }
        },
        "fi_serialize": {
            "name": "fi_serialize",
            "location": 33,
            "return": [],
            "arguments": {
                "obj": [
                    "typing.Callable[, ]",
                    "str"
                ]
            }
        },
        "type_to_z3sort": {
            "name": "type_to_z3sort",
            "location": 42,
            "return": [],
            "arguments": {
                "ast_typ": []
            }
        },
        "type_to_z3": {
            "name": "type_to_z3",
            "location": 52,
            "return": [],
            "arguments": {
                "ast_typ": [
                    "bool",
                    "typing.Callable[, ]",
                    "typing.Type",
                    "list[str]",
                    "set[]"
                ]
            }
        },
        "boogieToZ3TypeEnv": {
            "name": "boogieToZ3TypeEnv",
            "location": 64,
            "return": [
                "dict[, ]"
            ],
            "arguments": {
                "env": []
            }
        },
        "z3val_to_boogie": {
            "name": "z3val_to_boogie",
            "location": 67,
            "return": [
                "bool",
                "OpaqueVal"
            ],
            "arguments": {
                "v": [
                    "int"
                ]
            }
        },
        "model_to_store": {
            "name": "model_to_store",
            "location": 76,
            "return": [
                "dict[str, ]"
            ],
            "arguments": {
                "m": [
                    "tuple[typing.Union[int,int]]"
                ]
            }
        },
        "getCtx": {
            "name": "getCtx",
            "location": 79,
            "return": [],
            "arguments": {}
        },
        "wrapZ3Exc": {
            "name": "wrapZ3Exc",
            "location": 94,
            "return": [],
            "arguments": {
                "f": [
                    "typing.Iterable[str]",
                    "typing.Callable[, ]"
                ]
            }
        },
        "startAndWaitForZ3Instance": {
            "name": "startAndWaitForZ3Instance",
            "location": 141,
            "return": [
                "tuple[Process]"
            ],
            "arguments": {}
        },
        "_cleanupChildProcesses": {
            "name": "_cleanupChildProcesses",
            "location": 289,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "handler": {
            "name": "handler",
            "location": 300,
            "return": [
                "None"
            ],
            "arguments": {
                "signum": [
                    "int",
                    "str",
                    "typing.Iterable[C]"
                ],
                "frame": [
                    "int",
                    "str",
                    "typing.Iterable[C]"
                ]
            }
        },
        "getSolver": {
            "name": "getSolver",
            "location": 308,
            "return": [
                "Z3ProxySolver"
            ],
            "arguments": {}
        },
        "releaseSolver": {
            "name": "releaseSolver",
            "location": 343,
            "return": [
                "None"
            ],
            "arguments": {
                "solver": [
                    "int",
                    "tuple[typing.Union[int,int]]",
                    "float",
                    "str"
                ]
            }
        },
        "IntSort": {
            "name": "IntSort",
            "location": 355,
            "return": [],
            "arguments": {}
        },
        "Int": {
            "name": "Int",
            "location": 358,
            "return": [],
            "arguments": {
                "n": [
                    "str",
                    "int",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "BoolSort": {
            "name": "BoolSort",
            "location": 362,
            "return": [],
            "arguments": {}
        },
        "Bool": {
            "name": "Bool",
            "location": 365,
            "return": [],
            "arguments": {
                "n": [
                    "str",
                    "int"
                ]
            }
        },
        "Array": {
            "name": "Array",
            "location": 368,
            "return": [],
            "arguments": {
                "n": [
                    "str",
                    "int"
                ],
                "domain": [
                    "str",
                    "int"
                ],
                "range": [
                    "str",
                    "int"
                ]
            }
        },
        "Or": {
            "name": "Or",
            "location": 371,
            "return": [],
            "arguments": {}
        },
        "And": {
            "name": "And",
            "location": 375,
            "return": [],
            "arguments": {}
        },
        "Not": {
            "name": "Not",
            "location": 379,
            "return": [],
            "arguments": {
                "pred": [
                    "bool",
                    "str"
                ]
            }
        },
        "Implies": {
            "name": "Implies",
            "location": 383,
            "return": [],
            "arguments": {
                "a": [
                    "typing.Callable[, ]"
                ],
                "b": [
                    "typing.Callable[, ]"
                ]
            }
        },
        "Function": {
            "name": "Function",
            "location": 386,
            "return": [
                "Function"
            ],
            "arguments": {
                "name": [
                    "str",
                    "bool",
                    "dict[str, str]"
                ]
            }
        },
        "IntVal": {
            "name": "IntVal",
            "location": 389,
            "return": [],
            "arguments": {
                "v": [
                    "int",
                    "str"
                ]
            }
        },
        "BoolVal": {
            "name": "BoolVal",
            "location": 393,
            "return": [],
            "arguments": {
                "v": [
                    "bool",
                    "dict[str, typing.Any]",
                    "str"
                ]
            }
        },
        "counterex": {
            "name": "counterex",
            "location": 397,
            "return": [
                "None"
            ],
            "arguments": {
                "pred": [
                    "str",
                    "list[str]",
                    "None",
                    "dict[str, str]"
                ],
                "timeout": [
                    "None",
                    "int",
                    "str",
                    "float"
                ],
                "comm": [
                    "typing.Text"
                ]
            }
        },
        "satisfiable": {
            "name": "satisfiable",
            "location": 416,
            "return": [
                "bool"
            ],
            "arguments": {
                "pred": [
                    "float",
                    "None",
                    "int"
                ],
                "timeout": [
                    "None",
                    "int",
                    "float"
                ]
            }
        },
        "unsatisfiable": {
            "name": "unsatisfiable",
            "location": 427,
            "return": [
                "bool"
            ],
            "arguments": {
                "pred": [
                    "float",
                    "None",
                    "int"
                ],
                "timeout": [
                    "None",
                    "int",
                    "str",
                    "float"
                ],
                "comm": [
                    "None",
                    "int",
                    "float",
                    "typing.Callable[, ]",
                    "str"
                ]
            }
        },
        "model": {
            "name": "model",
            "location": 441,
            "return": [],
            "arguments": {
                "pred": [
                    "str",
                    "int",
                    "None"
                ]
            }
        },
        "maybeModel": {
            "name": "maybeModel",
            "location": 453,
            "return": [
                "None"
            ],
            "arguments": {
                "pred": [
                    "str",
                    "int",
                    "None"
                ]
            }
        },
        "simplify": {
            "name": "simplify",
            "location": 465,
            "return": [],
            "arguments": {
                "pred": [
                    "tuple[]",
                    "list[str]",
                    "dict[str, typing.Any]",
                    "list[]",
                    "str",
                    "typing.Callable[, ]"
                ]
            }
        },
        "implies": {
            "name": "implies",
            "location": 470,
            "return": [],
            "arguments": {
                "inv1": [
                    "list[]"
                ],
                "inv2": [
                    "list[]"
                ]
            }
        },
        "equivalent": {
            "name": "equivalent",
            "location": 474,
            "return": [],
            "arguments": {
                "inv1": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ],
                "inv2": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ]
            }
        },
        "tautology": {
            "name": "tautology",
            "location": 478,
            "return": [],
            "arguments": {
                "inv": [
                    "int",
                    "list[]",
                    "str"
                ]
            }
        },
        "_force_expr": {
            "name": "_force_expr",
            "location": 482,
            "return": [
                "typing.Callable[None, bool]",
                "int",
                "str"
            ],
            "arguments": {
                "a": [
                    "typing.Callable[None, bool]",
                    "int",
                    "str"
                ]
            }
        },
        "expr_to_z3": {
            "name": "expr_to_z3",
            "location": 486,
            "return": [],
            "arguments": {
                "expr": [],
                "typeEnv": [
                    "typing.Collection",
                    "None"
                ]
            }
        },
        "stmt_to_z3": {
            "name": "stmt_to_z3",
            "location": 576,
            "return": [],
            "arguments": {
                "stmt": [
                    "typing.Callable[, ]",
                    "None",
                    "bool",
                    "list[typing.Callable[, ]]"
                ],
                "typeEnv": [
                    "BaseException",
                    "None",
                    "typing.Type"
                ]
            }
        },
        "isnum": {
            "name": "isnum",
            "location": 595,
            "return": [
                "bool"
            ],
            "arguments": {
                "s": []
            }
        },
        "ids": {
            "name": "ids",
            "location": 603,
            "return": [
                "list[str]",
                "list[list[str]]"
            ],
            "arguments": {
                "z3expr": []
            }
        },
        "z3_expr_to_boogie": {
            "name": "z3_expr_to_boogie",
            "location": 613,
            "return": [
                "AstTrue",
                "AstFalse",
                "AstId",
                "AstNumber",
                "AstUnExpr",
                "AstBinExpr",
                "AstFuncExpr"
            ],
            "arguments": {
                "expr": []
            }
        },
        "to_smt2": {
            "name": "to_smt2",
            "location": 700,
            "return": [],
            "arguments": {
                "p": [
                    "int",
                    "str",
                    "typing.Iterable[]"
                ]
            }
        },
        "WrappedZ3Exception.__init__": {
            "name": "__init__",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {
                "s": [
                    "str",
                    "int",
                    "None",
                    "dict[, ]"
                ],
                "value": [
                    "list[]",
                    "list[A]"
                ]
            }
        },
        "wrapZ3Exc.wrapped": {
            "name": "wrapped",
            "location": 95,
            "return": [],
            "arguments": {}
        },
        "Z3ServerInstance.__init__": {
            "name": "__init__",
            "location": 105,
            "return": [
                "None"
            ],
            "arguments": {
                "s": [
                    "str",
                    "None",
                    "float"
                ]
            }
        },
        "Z3ServerInstance.add": {
            "name": "add",
            "location": 110,
            "return": [
                "int"
            ],
            "arguments": {
                "s": [
                    "str"
                ],
                "sPred": [
                    "str"
                ]
            }
        },
        "Z3ServerInstance.check": {
            "name": "check",
            "location": 117,
            "return": [
                "str"
            ],
            "arguments": {
                "s": [
                    "str",
                    "int",
                    "bytes",
                    "list[str]"
                ],
                "sComm": [
                    "str"
                ]
            }
        },
        "Z3ServerInstance.model": {
            "name": "model",
            "location": 123,
            "return": [],
            "arguments": {
                "s": [
                    "str",
                    "float",
                    "int"
                ]
            }
        },
        "Z3ServerInstance.push": {
            "name": "push",
            "location": 130,
            "return": [
                "int"
            ],
            "arguments": {
                "s": [
                    "str"
                ]
            }
        },
        "Z3ServerInstance.pop": {
            "name": "pop",
            "location": 136,
            "return": [
                "int"
            ],
            "arguments": {
                "s": [
                    "str"
                ]
            }
        },
        "startAndWaitForZ3Instance.runDaemon": {
            "name": "runDaemon",
            "location": 144,
            "return": [
                "None"
            ],
            "arguments": {
                "q": []
            }
        },
        "Unknown.__init__": {
            "name": "__init__",
            "location": 173,
            "return": [
                "None"
            ],
            "arguments": {
                "s": [
                    "str"
                ],
                "q": [
                    "str"
                ]
            }
        },
        "Z3ProxySolver.__init__": {
            "name": "__init__",
            "location": 183,
            "return": [
                "None"
            ],
            "arguments": {
                "s": [
                    "typing.Iterable[T]",
                    "int",
                    "None",
                    "str",
                    "typing.IO"
                ],
                "uri": [
                    "str",
                    "int",
                    "float",
                    "dict[, ]",
                    "list[int]"
                ],
                "proc": [
                    "bytes",
                    "int"
                ]
            }
        },
        "Z3ProxySolver.add": {
            "name": "add",
            "location": 189,
            "return": [
                "None"
            ],
            "arguments": {
                "s": [
                    "bool",
                    "str",
                    "None"
                ],
                "p": [
                    "str",
                    "typing.Callable[..., None]",
                    "bool",
                    "list[int]"
                ]
            }
        },
        "Z3ProxySolver.push": {
            "name": "push",
            "location": 197,
            "return": [
                "None"
            ],
            "arguments": {
                "s": [
                    "str"
                ]
            }
        },
        "Z3ProxySolver.pop": {
            "name": "pop",
            "location": 201,
            "return": [
                "None"
            ],
            "arguments": {
                "s": [
                    "str"
                ]
            }
        },
        "Z3ProxySolver.check": {
            "name": "check",
            "location": 205,
            "return": [],
            "arguments": {
                "s": [],
                "timeout": [
                    "None",
                    "int",
                    "str"
                ],
                "comm": [
                    "typing.Text"
                ]
            }
        },
        "Z3ProxySolver.model": {
            "name": "model",
            "location": 239,
            "return": [],
            "arguments": {
                "s": [
                    "str",
                    "None"
                ]
            }
        },
        "Z3ProxySolver.to_smt2": {
            "name": "to_smt2",
            "location": 242,
            "return": [],
            "arguments": {
                "s": [
                    "str",
                    "typing.AnyStr",
                    "typing.Iterable[T]"
                ],
                "p": [
                    "str",
                    "typing.Callable[..., None]",
                    "bool",
                    "list[int]"
                ]
            }
        },
        "Z3ProxySolver._restartRemote": {
            "name": "_restartRemote",
            "location": 252,
            "return": [
                "None"
            ],
            "arguments": {
                "s": []
            }
        },
        "Z3ProxySolver._shutdownRemote": {
            "name": "_shutdownRemote",
            "location": 260,
            "return": [
                "None"
            ],
            "arguments": {
                "s": [
                    "str",
                    "typing.AnyStr",
                    "None"
                ]
            }
        },
        "type_to_z3.array_fac": {
            "name": "array_fac",
            "location": 58,
            "return": [],
            "arguments": {
                "name": []
            }
        }
    },
    "pyboogie-master/pyboogie/__init__.py": {},
    "pyboogie-master/pyboogie/stubs/frozendict.py": {
        "frozendict.__hash__": {
            "name": "__hash__",
            "location": 2,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "pyboogie-master/pyboogie/stubs/pyparsing.py": {
        "delimitedList": {
            "name": "delimitedList",
            "location": 66,
            "return": [],
            "arguments": {
                "expr": [],
                "delim": [],
                "combine": []
            }
        },
        "operatorPrecedence": {
            "name": "operatorPrecedence",
            "location": 72,
            "return": [],
            "arguments": {
                "baseExpr": [],
                "opList": [],
                "lpar": [],
                "rpar": []
            }
        },
        "ParseResults.__getitem__": {
            "name": "__getitem__",
            "location": 10,
            "return": [],
            "arguments": {
                "self": [],
                "x": []
            }
        },
        "ParseResults.__len__": {
            "name": "__len__",
            "location": 11,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ParseResults.__iter__": {
            "name": "__iter__",
            "location": 12,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ParseResults.__reversed__": {
            "name": "__reversed__",
            "location": 13,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ParserElement.enablePackrat": {
            "name": "enablePackrat",
            "location": 17,
            "return": [],
            "arguments": {}
        },
        "ParserElement.setParseAction": {
            "name": "setParseAction",
            "location": 18,
            "return": [],
            "arguments": {
                "self": [],
                "action": []
            }
        },
        "ParserElement.__add__": {
            "name": "__add__",
            "location": 19,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "ParserElement.__radd__": {
            "name": "__radd__",
            "location": 20,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "ParserElement.__or__": {
            "name": "__or__",
            "location": 21,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "ParserElement.__xor__": {
            "name": "__xor__",
            "location": 22,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "ParserElement.parseString": {
            "name": "parseString",
            "location": 23,
            "return": [],
            "arguments": {
                "self": [],
                "s": []
            }
        },
        "ParserElement.ignore": {
            "name": "ignore",
            "location": 24,
            "return": [],
            "arguments": {
                "self": [],
                "p": []
            }
        },
        "Word.__init__": {
            "name": "__init__",
            "location": 29,
            "return": [],
            "arguments": {
                "self": [],
                "initChars": []
            }
        },
        "Keyword.__init__": {
            "name": "__init__",
            "location": 32,
            "return": [],
            "arguments": {
                "self": [],
                "matchString": []
            }
        },
        "Literal.__init__": {
            "name": "__init__",
            "location": 35,
            "return": [],
            "arguments": {
                "self": [],
                "matchString": []
            }
        },
        "StringEnd.__init__": {
            "name": "__init__",
            "location": 38,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Regex.__init__": {
            "name": "__init__",
            "location": 41,
            "return": [],
            "arguments": {
                "self": [],
                "pattern": []
            }
        },
        "ParseElementEnhance.__init__": {
            "name": "__init__",
            "location": 44,
            "return": [],
            "arguments": {
                "self": [],
                "expr": []
            }
        },
        "Forward.__init__": {
            "name": "__init__",
            "location": 56,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Forward.__lshift__": {
            "name": "__lshift__",
            "location": 57,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        }
    },
    "pyboogie-master/pyboogie/stubs/Pyro4/errors.py": {},
    "pyboogie-master/pyboogie/stubs/Pyro4/__init__.py": {
        "expose": {
            "name": "expose",
            "location": 4,
            "return": [],
            "arguments": {
                "a": []
            }
        },
        "Daemon.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Daemon.register": {
            "name": "register",
            "location": 10,
            "return": [],
            "arguments": {
                "self": [],
                "t": []
            }
        },
        "Daemon.requestLoop": {
            "name": "requestLoop",
            "location": 11,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Proxy.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [],
            "arguments": {
                "self": [],
                "uri": []
            }
        },
        "Proxy.__getattr__": {
            "name": "__getattr__",
            "location": 17,
            "return": [],
            "arguments": {
                "self": [],
                "k": []
            }
        }
    },
    "pyboogie-master/pyboogie/stubs/Pyro4/util/__init__.py": {
        "SerializerBase.register_dict_to_class": {
            "name": "register_dict_to_class",
            "location": 5,
            "return": [],
            "arguments": {
                "classname": [],
                "cb": []
            }
        },
        "SerializerBase.register_class_to_dict": {
            "name": "register_class_to_dict",
            "location": 7,
            "return": [],
            "arguments": {
                "clazz": [],
                "cb": []
            }
        }
    },
    "pyboogie-master/pyboogie/stubs/z3/z3core.py": {
        "Z3_mk_eq": {
            "name": "Z3_mk_eq",
            "location": 2,
            "return": [],
            "arguments": {
                "ctx": [],
                "a": [],
                "b": []
            }
        },
        "Z3_mk_div": {
            "name": "Z3_mk_div",
            "location": 3,
            "return": [],
            "arguments": {
                "ctx": [],
                "a": [],
                "b": []
            }
        }
    },
    "pyboogie-master/pyboogie/stubs/z3/z3types.py": {
        "Z3Exception.__init__": {
            "name": "__init__",
            "location": 4,
            "return": [],
            "arguments": {
                "self": [],
                "a": []
            }
        }
    },
    "pyboogie-master/pyboogie/stubs/z3/__init__.py": {
        "is_true": {
            "name": "is_true",
            "location": 50,
            "return": [],
            "arguments": {
                "a": []
            }
        },
        "is_false": {
            "name": "is_false",
            "location": 51,
            "return": [],
            "arguments": {
                "a": []
            }
        },
        "is_int_value": {
            "name": "is_int_value",
            "location": 52,
            "return": [],
            "arguments": {
                "a": []
            }
        },
        "substitute": {
            "name": "substitute",
            "location": 53,
            "return": [],
            "arguments": {
                "a": []
            }
        },
        "simplify": {
            "name": "simplify",
            "location": 54,
            "return": [],
            "arguments": {
                "a": []
            }
        },
        "Int": {
            "name": "Int",
            "location": 118,
            "return": [],
            "arguments": {
                "name": [],
                "ctx": []
            }
        },
        "Bool": {
            "name": "Bool",
            "location": 123,
            "return": [],
            "arguments": {
                "name": [],
                "ctx": []
            }
        },
        "parse_smt2_string": {
            "name": "parse_smt2_string",
            "location": 128,
            "return": [],
            "arguments": {
                "s": [],
                "ctx": []
            }
        },
        "Array": {
            "name": "Array",
            "location": 130,
            "return": [],
            "arguments": {
                "name": [],
                "domain": [],
                "range": []
            }
        },
        "Or": {
            "name": "Or",
            "location": 134,
            "return": [],
            "arguments": {}
        },
        "And": {
            "name": "And",
            "location": 135,
            "return": [],
            "arguments": {}
        },
        "Not": {
            "name": "Not",
            "location": 136,
            "return": [],
            "arguments": {
                "p": [],
                "ctx": []
            }
        },
        "Implies": {
            "name": "Implies",
            "location": 137,
            "return": [],
            "arguments": {
                "a": [],
                "b": [],
                "ctx": []
            }
        },
        "Function": {
            "name": "Function",
            "location": 139,
            "return": [],
            "arguments": {
                "name": []
            }
        },
        "IntVal": {
            "name": "IntVal",
            "location": 141,
            "return": [],
            "arguments": {
                "val": [],
                "ctx": []
            }
        },
        "BoolVal": {
            "name": "BoolVal",
            "location": 142,
            "return": [],
            "arguments": {
                "val": [],
                "ctx": []
            }
        },
        "IntSort": {
            "name": "IntSort",
            "location": 144,
            "return": [],
            "arguments": {
                "ctx": []
            }
        },
        "BoolSort": {
            "name": "BoolSort",
            "location": 145,
            "return": [],
            "arguments": {
                "ctx": []
            }
        },
        "ArraySort": {
            "name": "ArraySort",
            "location": 146,
            "return": [],
            "arguments": {
                "domain": [],
                "range": []
            }
        },
        "ForAll": {
            "name": "ForAll",
            "location": 148,
            "return": [],
            "arguments": {
                "vs": [],
                "expr": []
            }
        },
        "Select": {
            "name": "Select",
            "location": 149,
            "return": [],
            "arguments": {
                "arr": [],
                "ind": []
            }
        },
        "Update": {
            "name": "Update",
            "location": 150,
            "return": [],
            "arguments": {
                "arr": [],
                "ind": [],
                "newVal": []
            }
        },
        "AstRef.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [],
            "arguments": {
                "self": [],
                "ast": []
            }
        },
        "AstRef.ctx_ref": {
            "name": "ctx_ref",
            "location": 20,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AstRef.as_ast": {
            "name": "as_ast",
            "location": 21,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AstRef.children": {
            "name": "children",
            "location": 22,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AstRef.eq": {
            "name": "eq",
            "location": 23,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "FuncDeclRef.arity": {
            "name": "arity",
            "location": 32,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FuncDeclRef.name": {
            "name": "name",
            "location": 33,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FuncDeclRef.__call__": {
            "name": "__call__",
            "location": 34,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ExprRef.sort": {
            "name": "sort",
            "location": 37,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ExprRef.decl": {
            "name": "decl",
            "location": 38,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ArithRef.__neg__": {
            "name": "__neg__",
            "location": 61,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ArithRef.__le__": {
            "name": "__le__",
            "location": 62,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "ArithRef.__lt__": {
            "name": "__lt__",
            "location": 63,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "ArithRef.__ge__": {
            "name": "__ge__",
            "location": 64,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "ArithRef.__gt__": {
            "name": "__gt__",
            "location": 65,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "ArithRef.__add__": {
            "name": "__add__",
            "location": 66,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "ArithRef.__sub__": {
            "name": "__sub__",
            "location": 67,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "ArithRef.__mul__": {
            "name": "__mul__",
            "location": 68,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "ArithRef.__div__": {
            "name": "__div__",
            "location": 69,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "ArithRef.__truediv__": {
            "name": "__truediv__",
            "location": 70,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "ArithRef.__mod__": {
            "name": "__mod__",
            "location": 71,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "IntNumRef.as_long": {
            "name": "as_long",
            "location": 74,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ModelRef.__getitem__": {
            "name": "__getitem__",
            "location": 82,
            "return": [],
            "arguments": {
                "self": [],
                "k": []
            }
        },
        "ModelRef.decls": {
            "name": "decls",
            "location": 83,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ModelRef.__iter__": {
            "name": "__iter__",
            "location": 84,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FuncEntry.num_args": {
            "name": "num_args",
            "location": 87,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FuncEntry.arg_value": {
            "name": "arg_value",
            "location": 88,
            "return": [],
            "arguments": {
                "self": [],
                "idx": []
            }
        },
        "FuncEntry.value": {
            "name": "value",
            "location": 89,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FuncInterp.else_value": {
            "name": "else_value",
            "location": 92,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FuncInterp.num_entries": {
            "name": "num_entries",
            "location": 93,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FuncInterp.arity": {
            "name": "arity",
            "location": 94,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FuncInterp.entry": {
            "name": "entry",
            "location": 95,
            "return": [],
            "arguments": {
                "self": [],
                "idx": []
            }
        },
        "Solver.__init__": {
            "name": "__init__",
            "location": 102,
            "return": [],
            "arguments": {
                "self": [],
                "ctx": []
            }
        },
        "Solver.add": {
            "name": "add",
            "location": 105,
            "return": [],
            "arguments": {
                "self": [],
                "e": []
            }
        },
        "Solver.to_smt2": {
            "name": "to_smt2",
            "location": 106,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Solver.check": {
            "name": "check",
            "location": 107,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Solver.push": {
            "name": "push",
            "location": 108,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Solver.pop": {
            "name": "pop",
            "location": 109,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Solver.model": {
            "name": "model",
            "location": 110,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "pyboogie-master/pyboogie/tests/test_analysis.py": {
        "TestAnalysis.testLiveness": {
            "name": "testLiveness",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAnalysis.testPropagateUnmodifiedPreds": {
            "name": "testPropagateUnmodifiedPreds",
            "location": 198,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pyboogie-master/pyboogie/tests/test_ast.py": {
        "TestAst.test_bad_parse": {
            "name": "test_bad_parse",
            "location": 168,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAst.test_parse": {
            "name": "test_parse",
            "location": 184,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAst.testId": {
            "name": "testId",
            "location": 193,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAst.testAtomParse": {
            "name": "testAtomParse",
            "location": 217,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAst.test_roundtrip": {
            "name": "test_roundtrip",
            "location": 234,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAst.test_replace": {
            "name": "test_replace",
            "location": 245,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAst.testTypes": {
            "name": "testTypes",
            "location": 259,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAst.testDecls": {
            "name": "testDecls",
            "location": 291,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pyboogie-master/pyboogie/tests/test_bb.py": {
        "TestBB.test_build": {
            "name": "test_build",
            "location": 166,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBB.test_build_fail": {
            "name": "test_build_fail",
            "location": 181,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBB.test_loopHdrs": {
            "name": "test_loopHdrs",
            "location": 192,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pyboogie-master/pyboogie/tests/test_desugar.py": {
        "TestProgTC.test": {
            "name": "test",
            "location": 379,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pyboogie-master/pyboogie/tests/test_inv_networks.py": {
        "TestInvariantNetworks.testCheckInvNetwork": {
            "name": "testCheckInvNetwork",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestInvariantNetworks.testFilterInvNetwork": {
            "name": "testFilterInvNetwork",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pyboogie-master/pyboogie/tests/test_predicate_transformers.py": {
        "_toExpr": {
            "name": "_toExpr",
            "location": 14,
            "return": [],
            "arguments": {
                "a": [
                    "typing.Callable[None, bool]",
                    "int",
                    "str"
                ]
            }
        },
        "TestPredicateTransformers.testWPRequireSSA": {
            "name": "testWPRequireSSA",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPredicateTransformers.testWP": {
            "name": "testWP",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPredicateTransformers.testSPRequireSSA": {
            "name": "testSPRequireSSA",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPredicateTransformers.testSP": {
            "name": "testSP",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pyboogie-master/pyboogie/tests/test_tc.py": {
        "TestExprTC.testGoodExprs": {
            "name": "testGoodExprs",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestExprTC.testBadExprs": {
            "name": "testBadExprs",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestStmtTC.testGoodStmts": {
            "name": "testGoodStmts",
            "location": 124,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestStmtTC.testBadStmts": {
            "name": "testBadStmts",
            "location": 140,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDeclTC.testGoodDecls": {
            "name": "testGoodDecls",
            "location": 193,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDeclTC.testBadDecls": {
            "name": "testBadDecls",
            "location": 210,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestProgTC.testGoodProgs": {
            "name": "testGoodProgs",
            "location": 264,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestProgTC.testBadDecls": {
            "name": "testBadDecls",
            "location": 271,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pyboogie-master/pyboogie/tests/__init__.py": {}
}
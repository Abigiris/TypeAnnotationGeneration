{
    "pyfta-master/pyfta/containers.py": {
        "ContainerBase.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data_type": [
                    "bool",
                    "None",
                    "float"
                ],
                "how_many_to_create": [
                    "int",
                    "typing.Callable[str, typing.Any]",
                    "tuple[str]"
                ],
                "allowed_types": [
                    "None",
                    "bool",
                    "float"
                ]
            }
        },
        "ContainerBase.resolve": {
            "name": "resolve",
            "location": 16,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "pyfta-master/pyfta/exceptions.py": {
        "NoTypeAnnotationsFound.__init__": {
            "name": "__init__",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "int",
                    "float"
                ]
            }
        }
    },
    "pyfta-master/pyfta/pyfta.py": {
        "get_types_and_defaults": {
            "name": "get_types_and_defaults",
            "location": 19,
            "return": [
                "tuple[typing.Union[str,int,dict[str, typing.Union[int,str]],list[tuple[typing.Union[str,typing.Any]]],dict[str, str]]]"
            ],
            "arguments": {
                "func": [
                    "Exception",
                    "typing.Type"
                ],
                "klass": [
                    "None"
                ]
            }
        },
        "get_params": {
            "name": "get_params",
            "location": 64,
            "return": [
                "dict[typing.Union[tuple[typing.Union[str,typing.Any]],tuple[typing.Union[str,bool]],tuple[typing.Union[str,list[typing.Callable[, ]]]]], str]"
            ],
            "arguments": {
                "type_signatures": [
                    "dict[str, typing.Any]",
                    "dict[, ]",
                    "dict[str, bool]",
                    "dict[str, str]",
                    "dict[str, list[typing.Callable[, ]]]"
                ],
                "defaults": [
                    "str"
                ]
            }
        },
        "resolve_signature": {
            "name": "resolve_signature",
            "location": 82,
            "return": [],
            "arguments": {
                "signature": [
                    "int",
                    "float",
                    "None",
                    "str"
                ]
            }
        },
        "PyftaMetaClass.__call__": {
            "name": "__call__",
            "location": 57,
            "return": [],
            "arguments": {
                "cls": [
                    "typing.Type",
                    "int"
                ]
            }
        }
    },
    "pyfta-master/pyfta/randgen.py": {
        "RandomBase.generate": {
            "name": "generate",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RandomString.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "chars": [],
                "prefix": [
                    "typing.Text"
                ],
                "suffix": [
                    "typing.Text"
                ],
                "length": [
                    "int"
                ]
            }
        },
        "RandomString.generate": {
            "name": "generate",
            "location": 23,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RandomInt.__init__": {
            "name": "__init__",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "lower_limit": [
                    "int"
                ],
                "upper_limit": [
                    "int"
                ]
            }
        },
        "RandomInt.generate": {
            "name": "generate",
            "location": 35,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RandomFloat.__init__": {
            "name": "__init__",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "lower_limit": [
                    "int"
                ],
                "upper_limit": [
                    "int"
                ]
            }
        },
        "RandomFloat.generate": {
            "name": "generate",
            "location": 47,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RandomBool.generate": {
            "name": "generate",
            "location": 56,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "RandomGenerator.__init__": {
            "name": "__init__",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data_type": [
                    "str",
                    "bool",
                    "None"
                ]
            }
        },
        "RandomGenerator.from_data_type": {
            "name": "from_data_type",
            "location": 65,
            "return": [],
            "arguments": {
                "cls": [
                    "dict[str, typing.Any]",
                    "None",
                    "typing.Callable[, ]",
                    "list[dict[str, typing.Any]]",
                    "dict[, ]",
                    "dict[str, list[]]",
                    "bool",
                    "str"
                ],
                "data_type": [
                    "str",
                    "bool",
                    "typing.Type"
                ]
            }
        },
        "RandomList.__init__": {
            "name": "__init__",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "how_many_to_create": [
                    "int",
                    "list[str]",
                    "None",
                    "typing.Callable[str, typing.Any]",
                    "typing.Type"
                ],
                "allowed_types": [
                    "None",
                    "bool",
                    "typing.Type",
                    "dict[, ]",
                    "str"
                ]
            }
        },
        "RandomList.generate": {
            "name": "generate",
            "location": 80,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pyfta-master/pyfta/__init__.py": {},
    "pyfta-master/tests/test_builtin_types.py": {
        "test_get_correct_value_based_on_type": {
            "name": "test_get_correct_value_based_on_type",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "data_type": [
                    "str",
                    "None",
                    "bool"
                ]
            }
        }
    },
    "pyfta-master/tests/__init__.py": {}
}
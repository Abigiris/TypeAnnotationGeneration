{
    "pyigd-master/setup.py": {
        "requirements": {
            "name": "requirements",
            "location": 4,
            "return": [
                "list[typing.Text]"
            ],
            "arguments": {}
        }
    },
    "pyigd-master/examples/add_port_mapping.py": {},
    "pyigd-master/igd/core.py": {
        "handle_exceptions": {
            "name": "handle_exceptions",
            "location": 10,
            "return": [],
            "arguments": {
                "func": [
                    "typing.Callable[, ]"
                ]
            }
        },
        "_format_mappings": {
            "name": "_format_mappings",
            "location": 79,
            "return": [],
            "arguments": {
                "mappings": [
                    "dict[, ]",
                    "str"
                ]
            }
        },
        "_port_mapping_to_arr": {
            "name": "_port_mapping_to_arr",
            "location": 86,
            "return": [
                "list[str]"
            ],
            "arguments": {
                "mapping": [
                    "str",
                    "dict[str, typing.Any]",
                    "list[str]"
                ]
            }
        }
    },
    "pyigd-master/igd/proto.py": {
        "parse_port_mapping": {
            "name": "parse_port_mapping",
            "location": 103,
            "return": [
                "PortMapping"
            ],
            "arguments": {
                "xml_resp": [
                    "str",
                    "typing.Sequence[str]",
                    "typing.Type"
                ]
            }
        },
        "PortMapping.__init__": {
            "name": "__init__",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "remote_host": [
                    "int"
                ],
                "external_port": [
                    "int",
                    "dict[str, typing.Any]",
                    "float",
                    "None"
                ],
                "internal_port": [
                    "int",
                    "dict[str, typing.Any]",
                    "float",
                    "None"
                ],
                "protocol": [
                    "int"
                ],
                "ip": [
                    "int"
                ],
                "enabled": [
                    "int"
                ],
                "description": [
                    "int"
                ],
                "duration": [
                    "int"
                ]
            }
        },
        "PortMapping.__str__": {
            "name": "__str__",
            "location": 17,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "PortMapping.__repr__": {
            "name": "__repr__",
            "location": 20,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "RequestBuilder.__init__": {
            "name": "__init__",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RequestBuilder.ext_ip": {
            "name": "ext_ip",
            "location": 38,
            "return": [
                "RequestBuilder"
            ],
            "arguments": {
                "self": []
            }
        },
        "RequestBuilder.get_port_mapping": {
            "name": "get_port_mapping",
            "location": 46,
            "return": [
                "RequestBuilder"
            ],
            "arguments": {
                "self": [],
                "port_index": [
                    "dict[str, typing.Any]",
                    "str",
                    "tuple['cirq.Qid']"
                ]
            }
        },
        "RequestBuilder.add_port_mapping": {
            "name": "add_port_mapping",
            "location": 59,
            "return": [
                "RequestBuilder"
            ],
            "arguments": {
                "self": [],
                "mapping": [
                    "int",
                    "None",
                    "dict[, ]",
                    "str"
                ]
            }
        },
        "RequestBuilder.delete_port_mapping": {
            "name": "delete_port_mapping",
            "location": 82,
            "return": [
                "RequestBuilder"
            ],
            "arguments": {
                "self": [],
                "ext_port": [
                    "str",
                    "int",
                    "typing.Sequence[str]",
                    "None"
                ],
                "protocol": [
                    "str",
                    "int",
                    "typing.Sequence[str]",
                    "None"
                ]
            }
        },
        "RequestBuilder.body": {
            "name": "body",
            "location": 94,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RequestBuilder.header": {
            "name": "header",
            "location": 98,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "pyigd-master/igd/soap.py": {
        "_validate_response": {
            "name": "_validate_response",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "resp": [
                    "str",
                    "int",
                    "None",
                    "dict[str, typing.Union[str,int]]",
                    "list[int]",
                    "tuple[typing.Union[str,list[str]]]",
                    "dict[, ]"
                ]
            }
        },
        "Error.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "code": [
                    "int",
                    "str",
                    "float"
                ],
                "msg": [
                    "int",
                    "str",
                    "float"
                ]
            }
        },
        "Error.__str__": {
            "name": "__str__",
            "location": 21,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Response.__init__": {
            "name": "__init__",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "body": [
                    "int",
                    "list[int]",
                    "str",
                    "dict[str, list[typing.Any]]"
                ],
                "status_code": [
                    "int"
                ]
            }
        },
        "Response.xml": {
            "name": "xml",
            "location": 48,
            "return": [
                "BeautifulSoup"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pyigd-master/igd/ssdp.py": {
        "_parse_location_from": {
            "name": "_parse_location_from",
            "location": 92,
            "return": [],
            "arguments": {
                "response": [
                    "str",
                    "float",
                    "dict[, ]"
                ]
            }
        },
        "_parse_igd_profile": {
            "name": "_parse_igd_profile",
            "location": 103,
            "return": [
                "tuple[typing.Union[str,typing.Pattern,dict[str, str],tuple[typing.Union[str,str,str]]]]"
            ],
            "arguments": {
                "profile_xml": [
                    "str",
                    "typing.TextIO",
                    "bool"
                ]
            }
        },
        "Gateway.__init__": {
            "name": "__init__",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "control_url": [
                    "str"
                ],
                "ip": [
                    "str",
                    "dict[, ]",
                    "set[str]",
                    "float"
                ]
            }
        },
        "Gateway.__str__": {
            "name": "__str__",
            "location": 66,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pyigd-master/igd/__init__.py": {},
    "pyigd-master/igd/__main__.py": {
        "ls": {
            "name": "ls",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "ip": {
            "name": "ip",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "add": {
            "name": "add",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "external_port": [
                    "int",
                    "str",
                    "float"
                ],
                "internal_port": [
                    "int",
                    "str",
                    "float"
                ],
                "ip": [
                    "str",
                    "int",
                    "typing.Callable[, ]",
                    "None"
                ],
                "protocol": [
                    "str",
                    "int",
                    "typing.Callable[, ]",
                    "None"
                ],
                "description": [
                    "str",
                    "int",
                    "typing.Callable[, ]",
                    "None"
                ],
                "duration": [
                    "str",
                    "int",
                    "typing.Callable[, ]",
                    "None"
                ]
            }
        },
        "rm": {
            "name": "rm",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "pattern": [
                    "str",
                    "None",
                    "int",
                    "list[str]"
                ],
                "protocol": [
                    "str",
                    "None",
                    "int",
                    "list[str]"
                ]
            }
        },
        "cli": {
            "name": "cli",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "main": {
            "name": "main",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "pyigd-master/tests/unit/test_core.py": {
        "describe_handle_exceptions": {
            "name": "describe_handle_exceptions",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "describe_get_ip": {
            "name": "describe_get_ip",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "describe__port_mapping_to_arr": {
            "name": "describe__port_mapping_to_arr",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "describe_delete_port_mappings": {
            "name": "describe_delete_port_mappings",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "describe__delete_port_mappings_by_port": {
            "name": "describe__delete_port_mappings_by_port",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "describe__delete_port_mappings_by_description": {
            "name": "describe__delete_port_mappings_by_description",
            "location": 126,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "describe_handle_exceptions.describe_when_given_function_succeeds": {
            "name": "describe_when_given_function_succeeds",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "describe_handle_exceptions.describe_when_expected_exceptions_happen": {
            "name": "describe_when_expected_exceptions_happen",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "describe_get_ip.it_prints_external_ip_address": {
            "name": "it_prints_external_ip_address",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "describe__port_mapping_to_arr.it_returns_port_mapping_fields_as_array_ready_to_be_printed": {
            "name": "it_returns_port_mapping_fields_as_array_ready_to_be_printed",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "describe_delete_port_mappings.describe_when_pattern_is_port": {
            "name": "describe_when_pattern_is_port",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "describe_delete_port_mappings.describe_when_pattern_is_any_other_string": {
            "name": "describe_when_pattern_is_any_other_string",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "describe__delete_port_mappings_by_port.it_deletes_port_for_every_given_protocol": {
            "name": "it_deletes_port_for_every_given_protocol",
            "location": 95,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "describe__delete_port_mappings_by_port.describe_soap_error_is_received": {
            "name": "describe_soap_error_is_received",
            "location": 103,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "describe__delete_port_mappings_by_description.it_deletes_all_mappings_whose_description_match_given_pattern": {
            "name": "it_deletes_all_mappings_whose_description_match_given_pattern",
            "location": 127,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "describe__delete_port_mappings_by_description.describe_when_not_all_ports_are_specified": {
            "name": "describe_when_not_all_ports_are_specified",
            "location": 141,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "describe_handle_exceptions.describe_when_given_function_succeeds.it_returns_what_function_returns": {
            "name": "it_returns_what_function_returns",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "describe_handle_exceptions.describe_when_expected_exceptions_happen.it_makes_wrapped_function_not_to_fail": {
            "name": "it_makes_wrapped_function_not_to_fail",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "error": []
            }
        },
        "describe_delete_port_mappings.describe_when_pattern_is_port.describe_when_protocol_is_not_specified": {
            "name": "describe_when_protocol_is_not_specified",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "describe_delete_port_mappings.describe_when_pattern_is_port.describe_when_protocol_is_specified": {
            "name": "describe_when_protocol_is_specified",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "describe_delete_port_mappings.describe_when_pattern_is_any_other_string.it_deletes_mappings_by_description": {
            "name": "it_deletes_mappings_by_description",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "describe__delete_port_mappings_by_port.describe_soap_error_is_received.describe_when_error_is_invalid_args": {
            "name": "describe_when_error_is_invalid_args",
            "location": 104,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "describe__delete_port_mappings_by_port.describe_soap_error_is_received.describe_when_error_is_unknown": {
            "name": "describe_when_error_is_unknown",
            "location": 112,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "describe__delete_port_mappings_by_description.describe_when_not_all_ports_are_specified.it_deletes_only_mappings_whose_description_and_protocol_match": {
            "name": "it_deletes_only_mappings_whose_description_and_protocol_match",
            "location": 142,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "describe_delete_port_mappings.describe_when_pattern_is_port.describe_when_protocol_is_not_specified.it_deletes_mappings_for_all_possible_protocols": {
            "name": "it_deletes_mappings_for_all_possible_protocols",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "describe_delete_port_mappings.describe_when_pattern_is_port.describe_when_protocol_is_specified.it_deletes_mapping_for_given_port_and_protocol": {
            "name": "it_deletes_mapping_for_given_port_and_protocol",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "describe__delete_port_mappings_by_port.describe_soap_error_is_received.describe_when_error_is_invalid_args.it_continues_silently": {
            "name": "it_continues_silently",
            "location": 105,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "describe__delete_port_mappings_by_port.describe_soap_error_is_received.describe_when_error_is_unknown.it_reraises_it": {
            "name": "it_reraises_it",
            "location": 113,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "pyigd-master/tests/unit/test_gateway.py": {
        "describe_Gateway": {
            "name": "describe_Gateway",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "describe_Gateway.describe_get_port_mappings": {
            "name": "describe_get_port_mappings",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "describe_Gateway.describe_get_port_mappings.it_collects_port_mappings_by_index_until_index_argument_error_is_raised": {
            "name": "it_collects_port_mappings_by_index_until_index_argument_error_is_raised",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "pyigd-master/tests/unit/test_proto.py": {
        "describe_parse_port_mapping": {
            "name": "describe_parse_port_mapping",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "describe_parse_port_mapping.it_extracts_fields_from_xml_response": {
            "name": "it_extracts_fields_from_xml_response",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "pyigd-master/tests/unit/test_soap.py": {
        "describe_Error": {
            "name": "describe_Error",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "describe_Response": {
            "name": "describe_Response",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "describe_post": {
            "name": "describe_post",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "describe__validate_response": {
            "name": "describe__validate_response",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "describe_Error.describe__str__": {
            "name": "describe__str__",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "describe_Response.describe_xml": {
            "name": "describe_xml",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "describe_post.it_returns_successfull_responses": {
            "name": "it_returns_successfull_responses",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "describe__validate_response.describe_when_response_code_is_500": {
            "name": "describe_when_response_code_is_500",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "describe__validate_response.describe_when_response_code_is_not_200": {
            "name": "describe_when_response_code_is_not_200",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "describe__validate_response.describe_when_response_code_is_200": {
            "name": "describe_when_response_code_is_200",
            "location": 104,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "describe_Error.describe__str__.it_formats_message_and_error_code": {
            "name": "it_formats_message_and_error_code",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "describe_Response.describe_xml.it_returns_response_body_parsed_to_beautifulsoap_xml_object": {
            "name": "it_returns_response_body_parsed_to_beautifulsoap_xml_object",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "describe__validate_response.describe_when_response_code_is_500.describe_and_soap_error_is_402": {
            "name": "describe_and_soap_error_is_402",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "describe__validate_response.describe_when_response_code_is_500.describe_and_soap_error_is_713": {
            "name": "describe_and_soap_error_is_713",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "describe__validate_response.describe_when_response_code_is_500.describe_and_soap_error_is_some_unknown_error": {
            "name": "describe_and_soap_error_is_some_unknown_error",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "describe__validate_response.describe_when_response_code_is_not_200.it_raises_http_error": {
            "name": "it_raises_http_error",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "describe__validate_response.describe_when_response_code_is_200.it_returns_silently": {
            "name": "it_returns_silently",
            "location": 105,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "describe__validate_response.describe_when_response_code_is_500.describe_and_soap_error_is_402.it_raises_invalid_args_error": {
            "name": "it_raises_invalid_args_error",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "describe__validate_response.describe_when_response_code_is_500.describe_and_soap_error_is_713.it_raises_invalid_array_index_error": {
            "name": "it_raises_invalid_array_index_error",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "describe__validate_response.describe_when_response_code_is_500.describe_and_soap_error_is_some_unknown_error.it_raises_generic_soap_error": {
            "name": "it_raises_generic_soap_error",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "pyigd-master/tests/unit/test_ssdp.py": {
        "read_fixture_bytes": {
            "name": "read_fixture_bytes",
            "location": 12,
            "return": [],
            "arguments": {
                "fixture_name": [
                    "str"
                ]
            }
        },
        "describe_parse_igd_profile": {
            "name": "describe_parse_igd_profile",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "describe_make_ssdp_request": {
            "name": "describe_make_ssdp_request",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "describe_parse_igd_profile.it_extracts_upnpn_scheme_and_control_url": {
            "name": "it_extracts_upnpn_scheme_and_control_url",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "describe_make_ssdp_request.it_returns_ip_from_which_the_response_was_received": {
            "name": "it_returns_ip_from_which_the_response_was_received",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "pyigd-master/tests/unit/utils.py": {
        "AsyncMock.__init__": {
            "name": "__init__",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    }
}
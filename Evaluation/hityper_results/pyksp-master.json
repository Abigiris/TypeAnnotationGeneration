{
    "pyksp-master/setup.py": {},
    "pyksp-master/.ropeproject/config.py": {
        "set_prefs": {
            "name": "set_prefs",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {
                "prefs": []
            }
        },
        "project_opened": {
            "name": "project_opened",
            "location": 110,
            "return": [
                "None"
            ],
            "arguments": {
                "project": [
                    "set[str]",
                    "bool"
                ]
            }
        }
    },
    "pyksp-master/docs/source/conf.py": {},
    "pyksp-master/Examples/cbasses_main.py": {
        "main": {
            "name": "main",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "main.lvl_cb": {
            "name": "lvl_cb",
            "location": 112,
            "return": [
                "None"
            ],
            "arguments": {
                "control": []
            }
        },
        "main.allow_groups": {
            "name": "allow_groups",
            "location": 136,
            "return": [
                "None"
            ],
            "arguments": {
                "type": []
            }
        },
        "main.note_cb": {
            "name": "note_cb",
            "location": 164,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "main.release_cb": {
            "name": "release_cb",
            "location": 188,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "pyksp-master/pyksp/__init__.py": {},
    "pyksp-master/pyksp/compiler/abstract.py": {
        "SingletonMeta.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "int",
                    "None",
                    "typing.Sequence[typing.Any]",
                    "list[]",
                    "str"
                ]
            }
        },
        "SingletonMeta.__call__": {
            "name": "__call__",
            "location": 13,
            "return": [],
            "arguments": {
                "cls": [
                    "dict[, ]",
                    "typing.Callable[, ]",
                    "dict[str, str]"
                ]
            }
        },
        "KspBoolProp.__init__": {
            "name": "__init__",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "KspBoolProp.__get__": {
            "name": "__get__",
            "location": 26,
            "return": [],
            "arguments": {
                "self": [],
                "obj": [
                    "typing.Type",
                    "typing.Callable[, ]",
                    "None"
                ],
                "cls": [
                    "typing.Type",
                    "typing.Callable[, ]",
                    "None"
                ]
            }
        },
        "KspBoolProp.__set__": {
            "name": "__set__",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "int",
                    "str"
                ],
                "val": [
                    "bool",
                    "tuple[typing.Union[str,str]]",
                    "typing.Callable[, ]",
                    "str"
                ]
            }
        },
        "KspBoolProp.__delete__": {
            "name": "__delete__",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "KSP.is_compiled": {
            "name": "is_compiled",
            "location": 46,
            "return": [],
            "arguments": {}
        },
        "KSP.set_callback": {
            "name": "set_callback",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "obj": [
                    "float",
                    "None",
                    "str",
                    "int"
                ]
            }
        },
        "KSP.callback": {
            "name": "callback",
            "location": 61,
            "return": [],
            "arguments": {}
        },
        "KSP.set_compiled": {
            "name": "set_compiled",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "val": [
                    "bool",
                    "None",
                    "Exception",
                    "dict[, ]"
                ]
            }
        },
        "KSP.is_bool": {
            "name": "is_bool",
            "location": 73,
            "return": [],
            "arguments": {}
        },
        "KSP.set_bool": {
            "name": "set_bool",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "val": [
                    "str",
                    "bool",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "KSP.in_init": {
            "name": "in_init",
            "location": 85,
            "return": [],
            "arguments": {
                "val": [
                    "None",
                    "bool",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "KSP.refresh": {
            "name": "refresh",
            "location": 95,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "INameLocal.__init__": {
            "name": "__init__",
            "location": 114,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "dict[str, typing.Any]",
                    "list[str]",
                    "dict[, ]"
                ],
                "prefix": [
                    "typing.Text"
                ],
                "postfix": [
                    "typing.Text"
                ]
            }
        },
        "INameLocal.__call__": {
            "name": "__call__",
            "location": 119,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "INameLocal.refresh": {
            "name": "refresh",
            "location": 124,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "IName.is_compact": {
            "name": "is_compact",
            "location": 138,
            "return": [],
            "arguments": {}
        },
        "IName.set_compact": {
            "name": "set_compact",
            "location": 143,
            "return": [
                "None"
            ],
            "arguments": {
                "val": [
                    "str",
                    "None",
                    "typing.Sequence[]",
                    "bool",
                    "typing.Hashable",
                    "list[int]"
                ]
            }
        },
        "IName.__init__": {
            "name": "__init__",
            "location": 149,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "list[str]",
                    "typing.Callable[, ]",
                    "None"
                ],
                "prefix": [
                    "typing.Text"
                ],
                "postfix": [
                    "typing.Text"
                ],
                "preserve": [
                    "bool"
                ]
            }
        },
        "IName.get_compact_name": {
            "name": "get_compact_name",
            "location": 163,
            "return": [
                "str"
            ],
            "arguments": {
                "name": [
                    "str"
                ]
            }
        },
        "IName.full": {
            "name": "full",
            "location": 173,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "IName.refresh": {
            "name": "refresh",
            "location": 177,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "KspObject.has_init": {
            "name": "has_init",
            "location": 191,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "KspObject.is_local": {
            "name": "is_local",
            "location": 196,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "KspObject.has_executable": {
            "name": "has_executable",
            "location": 201,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "KspObject.instances": {
            "name": "instances",
            "location": 206,
            "return": [],
            "arguments": {}
        },
        "KspObject.__init__": {
            "name": "__init__",
            "location": 210,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "None",
                    "list[str]",
                    "dict[str, str]"
                ],
                "name_prefix": [
                    "typing.Text"
                ],
                "name_postfix": [
                    "typing.Text"
                ],
                "preserve_name": [
                    "bool"
                ],
                "has_init": [
                    "bool"
                ],
                "is_local": [
                    "bool"
                ],
                "has_executable": [
                    "bool"
                ]
            }
        },
        "KspObject._generate_init": {
            "name": "_generate_init",
            "location": 231,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "KspObject._generate_executable": {
            "name": "_generate_executable",
            "location": 235,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "KspObject.generate_all_inits": {
            "name": "generate_all_inits",
            "location": 239,
            "return": [
                "list[]"
            ],
            "arguments": {}
        },
        "KspObject.generate_all_executables": {
            "name": "generate_all_executables",
            "location": 255,
            "return": [
                "list[str]"
            ],
            "arguments": {}
        },
        "KspObject.refresh": {
            "name": "refresh",
            "location": 271,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "Output.__init__": {
            "name": "__init__",
            "location": 285,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Output.set": {
            "name": "set",
            "location": 291,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "bool",
                    "float"
                ]
            }
        },
        "Output.release": {
            "name": "release",
            "location": 300,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Output.get": {
            "name": "get",
            "location": 304,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Output.put": {
            "name": "put",
            "location": 308,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "float",
                    "dict[, ]",
                    "list[dict[str, typing.Any]]"
                ]
            }
        },
        "Output.pop": {
            "name": "pop",
            "location": 326,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Output.refresh": {
            "name": "refresh",
            "location": 330,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Output.IsSetError.__init__": {
            "name": "__init__",
            "location": 280,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "extra": []
            }
        }
    },
    "pyksp-master/pyksp/compiler/base_types.py": {
        "get_val": {
            "name": "get_val",
            "location": 1392,
            "return": [],
            "arguments": {}
        },
        "get_string_repr": {
            "name": "get_string_repr",
            "location": 1404,
            "return": [
                "str",
                "list[str]"
            ],
            "arguments": {}
        },
        "get_runtime": {
            "name": "get_runtime",
            "location": 1420,
            "return": [
                "KspVar",
                "AstBase",
                "list[typing.Union[KspVar,AstBase]]"
            ],
            "arguments": {}
        },
        "AstBase.expand": {
            "name": "expand",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AstBase.get_value": {
            "name": "get_value",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AstAssign.__init__": {
            "name": "__init__",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "to_arg": [
                    "str",
                    "bool",
                    "typing.Mapping",
                    "list[dict[str, typing.Any]]",
                    "set[int]",
                    "None",
                    "typing.Any",
                    "bytes"
                ],
                "from_arg": [
                    "set[str]",
                    "tuple[typing.Union[float,float]]",
                    "str",
                    "int"
                ]
            }
        },
        "AstAssign.expand": {
            "name": "expand",
            "location": 56,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "AstAssign.get_value": {
            "name": "get_value",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AstAddString.__init__": {
            "name": "__init__",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "arg1": [
                    "int",
                    "list[str]",
                    "float"
                ],
                "arg2": [
                    "int",
                    "list[str]",
                    "float"
                ]
            }
        },
        "AstAddString.expand": {
            "name": "expand",
            "location": 73,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "AstAddString.get_value": {
            "name": "get_value",
            "location": 93,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "AstAddString.__add__": {
            "name": "__add__",
            "location": 108,
            "return": [
                "AstAddString"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "typing.Iterable[str]",
                    "None",
                    "int",
                    "typing.Callable[, ]"
                ]
            }
        },
        "AstAddString.__radd__": {
            "name": "__radd__",
            "location": 112,
            "return": [
                "AstAddString"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "dict[, ]",
                    "bool",
                    "None"
                ]
            }
        },
        "AstAddString.__iadd__": {
            "name": "__iadd__",
            "location": 116,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "list[str]",
                    "int",
                    "float",
                    "typing.AbstractSet"
                ]
            }
        },
        "AstOperator.__init__": {
            "name": "__init__",
            "location": 124,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AstOperator.unpack_args": {
            "name": "unpack_args",
            "location": 127,
            "return": [
                "list[]",
                "list[int]",
                "list[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "AstOperator.unary": {
            "name": "unary",
            "location": 150,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": [],
                "string": [
                    "str"
                ],
                "val": [
                    "str",
                    "dict[str, 'LabwareDefinition']"
                ]
            }
        },
        "AstOperator.standart": {
            "name": "standart",
            "location": 155,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": [],
                "string": [
                    "str"
                ],
                "val1": [
                    "str",
                    "None",
                    "list[str]",
                    "int"
                ],
                "val2": [
                    "str",
                    "None",
                    "list[str]",
                    "int"
                ]
            }
        },
        "AstOperator.bracket_unary": {
            "name": "bracket_unary",
            "location": 173,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": [],
                "string": [
                    "str"
                ],
                "val": [
                    "str",
                    "dict[str, 'LabwareDefinition']"
                ]
            }
        },
        "AstOperator.bracket_double": {
            "name": "bracket_double",
            "location": 179,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": [],
                "string": [
                    "str"
                ],
                "val1": [
                    "str",
                    "bool",
                    "None",
                    "dict[, ]",
                    "bytes",
                    "list[str]"
                ],
                "val2": [
                    "str",
                    "bool",
                    "None",
                    "dict[, ]",
                    "bytes",
                    "list[str]"
                ]
            }
        },
        "AstOperator.get_value": {
            "name": "get_value",
            "location": 187,
            "return": [],
            "arguments": {
                "self": [],
                "func": [
                    "int",
                    "str",
                    "None",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "AstOperator.__neg__": {
            "name": "__neg__",
            "location": 202,
            "return": [
                "AstNeg"
            ],
            "arguments": {
                "self": []
            }
        },
        "AstOperator.__invert__": {
            "name": "__invert__",
            "location": 205,
            "return": [
                "AstNot"
            ],
            "arguments": {
                "self": []
            }
        },
        "AstOperator.__add__": {
            "name": "__add__",
            "location": 208,
            "return": [
                "AstAdd"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "typing.Collection"
                ]
            }
        },
        "AstOperator.__radd__": {
            "name": "__radd__",
            "location": 211,
            "return": [
                "AstAdd"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "typing.Collection"
                ]
            }
        },
        "AstOperator.__iadd__": {
            "name": "__iadd__",
            "location": 214,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "list[str]",
                    "int",
                    "float",
                    "typing.AbstractSet"
                ]
            }
        },
        "AstOperator.__sub__": {
            "name": "__sub__",
            "location": 218,
            "return": [
                "AstSub"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "typing.Collection"
                ]
            }
        },
        "AstOperator.__rsub__": {
            "name": "__rsub__",
            "location": 221,
            "return": [
                "AstSub"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "typing.Collection"
                ]
            }
        },
        "AstOperator.__isub__": {
            "name": "__isub__",
            "location": 224,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "list[str]",
                    "int",
                    "float",
                    "typing.AbstractSet"
                ]
            }
        },
        "AstOperator.__mul__": {
            "name": "__mul__",
            "location": 228,
            "return": [
                "AstMul"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "typing.Collection"
                ]
            }
        },
        "AstOperator.__rmul__": {
            "name": "__rmul__",
            "location": 231,
            "return": [
                "AstMul"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "typing.Collection"
                ]
            }
        },
        "AstOperator.__imul__": {
            "name": "__imul__",
            "location": 234,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "list[str]",
                    "int",
                    "float",
                    "typing.AbstractSet"
                ]
            }
        },
        "AstOperator.__truediv__": {
            "name": "__truediv__",
            "location": 238,
            "return": [
                "AstDiv"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "typing.Collection"
                ]
            }
        },
        "AstOperator.__rtruediv__": {
            "name": "__rtruediv__",
            "location": 241,
            "return": [
                "AstDiv"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "typing.Collection"
                ]
            }
        },
        "AstOperator.__itruediv__": {
            "name": "__itruediv__",
            "location": 244,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "list[str]",
                    "int",
                    "float",
                    "typing.AbstractSet"
                ]
            }
        },
        "AstOperator.__floordiv__": {
            "name": "__floordiv__",
            "location": 248,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "list[str]",
                    "int",
                    "float",
                    "typing.AbstractSet"
                ]
            }
        },
        "AstOperator.__rfloordiv__": {
            "name": "__rfloordiv__",
            "location": 251,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "list[str]",
                    "int",
                    "float",
                    "typing.AbstractSet"
                ]
            }
        },
        "AstOperator.__ifloordiv__": {
            "name": "__ifloordiv__",
            "location": 254,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "list[str]",
                    "int",
                    "float",
                    "typing.AbstractSet"
                ]
            }
        },
        "AstOperator.__mod__": {
            "name": "__mod__",
            "location": 258,
            "return": [
                "AstMod"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "typing.Collection"
                ]
            }
        },
        "AstOperator.__rmod__": {
            "name": "__rmod__",
            "location": 261,
            "return": [
                "AstMod"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "typing.Collection"
                ]
            }
        },
        "AstOperator.__imod__": {
            "name": "__imod__",
            "location": 264,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "list[str]",
                    "int",
                    "float",
                    "typing.AbstractSet"
                ]
            }
        },
        "AstOperator.__pow__": {
            "name": "__pow__",
            "location": 268,
            "return": [
                "AstPow"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "typing.Collection"
                ]
            }
        },
        "AstOperator.__rpow__": {
            "name": "__rpow__",
            "location": 271,
            "return": [
                "AstPow"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "typing.Collection"
                ]
            }
        },
        "AstOperator.__ipow__": {
            "name": "__ipow__",
            "location": 274,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "list[str]",
                    "int",
                    "float",
                    "typing.AbstractSet"
                ]
            }
        },
        "AstOperator.__and__": {
            "name": "__and__",
            "location": 278,
            "return": [
                "AstLogAnd",
                "AstBinAnd"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "typing.Callable[, ]",
                    "typing.Collection",
                    "int",
                    "float"
                ]
            }
        },
        "AstOperator.__rand__": {
            "name": "__rand__",
            "location": 283,
            "return": [
                "AstLogAnd",
                "AstBinAnd"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "typing.Callable[, ]",
                    "typing.Collection",
                    "int",
                    "float"
                ]
            }
        },
        "AstOperator.__or__": {
            "name": "__or__",
            "location": 288,
            "return": [
                "AstLogOr",
                "AstBinOr"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "typing.Callable[, ]",
                    "typing.Collection",
                    "int",
                    "float"
                ]
            }
        },
        "AstOperator.__ror__": {
            "name": "__ror__",
            "location": 293,
            "return": [
                "AstLogOr",
                "AstBinOr"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "typing.Callable[, ]",
                    "typing.Collection",
                    "int",
                    "float"
                ]
            }
        },
        "AstOperator.__eq__": {
            "name": "__eq__",
            "location": 299,
            "return": [
                "AstEq"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "typing.Collection"
                ]
            }
        },
        "AstOperator.__ne__": {
            "name": "__ne__",
            "location": 302,
            "return": [
                "AstNe"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "typing.Collection"
                ]
            }
        },
        "AstOperator.__lt__": {
            "name": "__lt__",
            "location": 305,
            "return": [
                "AstLt"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "typing.Collection"
                ]
            }
        },
        "AstOperator.__gt__": {
            "name": "__gt__",
            "location": 308,
            "return": [
                "AstGt"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "typing.Collection"
                ]
            }
        },
        "AstOperator.__le__": {
            "name": "__le__",
            "location": 311,
            "return": [
                "AstLe"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "typing.Collection"
                ]
            }
        },
        "AstOperator.__ge__": {
            "name": "__ge__",
            "location": 314,
            "return": [
                "AstGe"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "typing.Collection"
                ]
            }
        },
        "AstNeg.expand": {
            "name": "expand",
            "location": 321,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AstNeg.get_value": {
            "name": "get_value",
            "location": 325,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AstNot.expand": {
            "name": "expand",
            "location": 332,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AstNot.get_value": {
            "name": "get_value",
            "location": 336,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AstAdd.expand": {
            "name": "expand",
            "location": 343,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AstAdd.get_value": {
            "name": "get_value",
            "location": 347,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AstSub.expand": {
            "name": "expand",
            "location": 354,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AstSub.get_value": {
            "name": "get_value",
            "location": 358,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AstMul.expand": {
            "name": "expand",
            "location": 365,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AstMul.get_value": {
            "name": "get_value",
            "location": 369,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AstDiv.expand": {
            "name": "expand",
            "location": 376,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AstDiv.get_value": {
            "name": "get_value",
            "location": 380,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AstMod.expand": {
            "name": "expand",
            "location": 387,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AstMod.get_value": {
            "name": "get_value",
            "location": 391,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AstPow.expand": {
            "name": "expand",
            "location": 398,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AstPow.get_value": {
            "name": "get_value",
            "location": 402,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AstLogAnd.expand": {
            "name": "expand",
            "location": 409,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AstLogAnd.get_value": {
            "name": "get_value",
            "location": 413,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AstBinAnd.expand": {
            "name": "expand",
            "location": 420,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AstBinAnd.get_value": {
            "name": "get_value",
            "location": 426,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AstLogOr.expand": {
            "name": "expand",
            "location": 433,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AstLogOr.get_value": {
            "name": "get_value",
            "location": 437,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AstBinOr.expand": {
            "name": "expand",
            "location": 444,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AstBinOr.get_value": {
            "name": "get_value",
            "location": 450,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AstEq.expand": {
            "name": "expand",
            "location": 457,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AstEq.get_value": {
            "name": "get_value",
            "location": 461,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AstNe.expand": {
            "name": "expand",
            "location": 468,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AstNe.get_value": {
            "name": "get_value",
            "location": 472,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AstLt.expand": {
            "name": "expand",
            "location": 479,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AstLt.get_value": {
            "name": "get_value",
            "location": 483,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AstGt.expand": {
            "name": "expand",
            "location": 490,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AstGt.get_value": {
            "name": "get_value",
            "location": 494,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AstLe.expand": {
            "name": "expand",
            "location": 501,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AstLe.get_value": {
            "name": "get_value",
            "location": 505,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AstGe.expand": {
            "name": "expand",
            "location": 512,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AstGe.get_value": {
            "name": "get_value",
            "location": 516,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "KspVar.__init__": {
            "name": "__init__",
            "location": 551,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "None",
                    "bool"
                ],
                "value": [
                    "None",
                    "str",
                    "dict[, ]",
                    "list[str]",
                    "set[str]",
                    "dict[str, str]"
                ],
                "ref_type": [
                    "str",
                    "list[]"
                ],
                "name_prefix": [
                    "typing.Text"
                ],
                "name_postfix": [
                    "typing.Text"
                ],
                "preserve_name": [
                    "bool"
                ],
                "has_init": [
                    "bool"
                ],
                "is_local": [
                    "bool"
                ],
                "persist": [
                    "bool"
                ]
            }
        },
        "KspVar._check_val_type": {
            "name": "_check_val_type",
            "location": 581,
            "return": [
                "list[str]",
                "int",
                "dict[, ]"
            ],
            "arguments": {
                "self": [],
                "val": []
            }
        },
        "KspVar.read": {
            "name": "read",
            "location": 594,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "KspVar.ref_type": {
            "name": "ref_type",
            "location": 609,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "KspVar._set_compiled": {
            "name": "_set_compiled",
            "location": 613,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "val": [
                    "typing.IO",
                    "dict[, ]",
                    "str"
                ]
            }
        },
        "KspVar._get_rutime_other": {
            "name": "_get_rutime_other",
            "location": 620,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "KspVar._get_compiled": {
            "name": "_get_compiled",
            "location": 633,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "KspVar._set_runtime": {
            "name": "_set_runtime",
            "location": 637,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "val": [
                    "int",
                    "str"
                ]
            }
        },
        "KspVar._get_runtime": {
            "name": "_get_runtime",
            "location": 641,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "KspVar.__ilshift__": {
            "name": "__ilshift__",
            "location": 644,
            "return": [
                "KspVar"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "KspVar.__rlshift__": {
            "name": "__rlshift__",
            "location": 656,
            "return": [],
            "arguments": {
                "self": [],
                "other": [
                    "list[str]",
                    "int",
                    "float",
                    "typing.AbstractSet"
                ]
            }
        },
        "KspVar.val": {
            "name": "val",
            "location": 665,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "KspVar._value": {
            "name": "_value",
            "location": 679,
            "return": [
                "int",
                "dict[int, str]",
                "float",
                "list[dict[str, typing.Any]]"
            ],
            "arguments": {
                "self": [],
                "val": []
            }
        },
        "KspStrVar._set_compiled": {
            "name": "_set_compiled",
            "location": 691,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "str",
                    "int"
                ]
            }
        },
        "KspStrVar.__add__": {
            "name": "__add__",
            "location": 701,
            "return": [],
            "arguments": {
                "self": [],
                "other": [
                    "typing.Type",
                    "typing.Callable[, ]"
                ]
            }
        },
        "KspStrVar.__radd__": {
            "name": "__radd__",
            "location": 706,
            "return": [],
            "arguments": {
                "self": [],
                "other": [
                    "typing.Type",
                    "typing.Callable[, ]"
                ]
            }
        },
        "KspStrVar.__iadd__": {
            "name": "__iadd__",
            "location": 711,
            "return": [
                "KspStrVar"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "dict[, ]"
                ]
            }
        },
        "KspStrVar._add_compiled": {
            "name": "_add_compiled",
            "location": 720,
            "return": [
                "AstAddString"
            ],
            "arguments": {
                "self": [],
                "arg1": [
                    "bool",
                    "str",
                    "tuple[typing.Union[int,int]]",
                    "list[str]"
                ],
                "arg2": [
                    "bool",
                    "str",
                    "tuple[typing.Union[int,int]]",
                    "list[str]"
                ]
            }
        },
        "KspStrVar._add_runtime": {
            "name": "_add_runtime",
            "location": 723,
            "return": [],
            "arguments": {
                "self": [],
                "arg1": [
                    "int",
                    "typing.Iterable[typing.Any]",
                    "typing.Callable[T, bool]"
                ],
                "arg2": [
                    "list[str]",
                    "str",
                    "None",
                    "list[list[typing.Any]]",
                    "int",
                    "list[int]"
                ]
            }
        },
        "KspStrVar.__check_add_runtime_str": {
            "name": "__check_add_runtime_str",
            "location": 732,
            "return": [
                "typing.Text",
                "str"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "str",
                    "int",
                    "float"
                ]
            }
        },
        "KspStrVar._generate_executable": {
            "name": "_generate_executable",
            "location": 739,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "KspNumeric._generate_executable": {
            "name": "_generate_executable",
            "location": 782,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "KspNumeric._warn_other": {
            "name": "_warn_other",
            "location": 785,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "KspNumeric.__truediv__": {
            "name": "__truediv__",
            "location": 790,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "list[str]",
                    "int",
                    "float",
                    "typing.AbstractSet"
                ]
            }
        },
        "KspNumeric.__rtruediv__": {
            "name": "__rtruediv__",
            "location": 794,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "list[str]",
                    "int",
                    "float",
                    "typing.AbstractSet"
                ]
            }
        },
        "KspNumeric.__itruediv__": {
            "name": "__itruediv__",
            "location": 798,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "list[str]",
                    "int",
                    "float",
                    "typing.AbstractSet"
                ]
            }
        },
        "KspNumeric.__floordiv__": {
            "name": "__floordiv__",
            "location": 802,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "list[str]",
                    "int",
                    "float",
                    "typing.AbstractSet"
                ]
            }
        },
        "KspNumeric.__rfloordiv__": {
            "name": "__rfloordiv__",
            "location": 806,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "list[str]",
                    "int",
                    "float",
                    "typing.AbstractSet"
                ]
            }
        },
        "KspNumeric.__ifloordiv__": {
            "name": "__ifloordiv__",
            "location": 810,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "list[str]",
                    "int",
                    "float",
                    "typing.AbstractSet"
                ]
            }
        },
        "KspNumeric._expand_other": {
            "name": "_expand_other",
            "location": 813,
            "return": [
                "typing.Type",
                "str",
                "self_@_warning_types"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "typing.Type",
                    "str"
                ]
            }
        },
        "KspNumeric.__neg__": {
            "name": "__neg__",
            "location": 824,
            "return": [
                "AstNeg"
            ],
            "arguments": {
                "self": []
            }
        },
        "KspNumeric.__invert__": {
            "name": "__invert__",
            "location": 829,
            "return": [
                "AstNot",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "KspNumeric.__add__": {
            "name": "__add__",
            "location": 834,
            "return": [
                "AstAdd"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "list[]",
                    "None",
                    "typing.Callable[, ]",
                    "int"
                ]
            }
        },
        "KspNumeric.__radd__": {
            "name": "__radd__",
            "location": 841,
            "return": [
                "AstAdd"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "int",
                    "None",
                    "list[]"
                ]
            }
        },
        "KspNumeric.__iadd__": {
            "name": "__iadd__",
            "location": 848,
            "return": [
                "KspNumeric"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "KspNumeric.__sub__": {
            "name": "__sub__",
            "location": 857,
            "return": [
                "AstSub",
                "int"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "int",
                    "None",
                    "list[]"
                ]
            }
        },
        "KspNumeric.__rsub__": {
            "name": "__rsub__",
            "location": 864,
            "return": [
                "AstSub",
                "float"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "int",
                    "None",
                    "list[]"
                ]
            }
        },
        "KspNumeric.__isub__": {
            "name": "__isub__",
            "location": 871,
            "return": [
                "KspNumeric"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "KspNumeric.__mul__": {
            "name": "__mul__",
            "location": 880,
            "return": [
                "AstMul"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "int",
                    "None",
                    "list[]"
                ]
            }
        },
        "KspNumeric.__rmul__": {
            "name": "__rmul__",
            "location": 887,
            "return": [
                "AstMul",
                "float"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "int",
                    "None",
                    "list[]"
                ]
            }
        },
        "KspNumeric.__imul__": {
            "name": "__imul__",
            "location": 894,
            "return": [
                "KspNumeric"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "KspNumeric.__and__": {
            "name": "__and__",
            "location": 903,
            "return": [
                "AstLogAnd",
                "AstBinAnd",
                "str",
                "list[int]",
                "list[str]",
                "int",
                "list[]"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "typing.Type",
                    "None"
                ]
            }
        },
        "KspNumeric.__rand__": {
            "name": "__rand__",
            "location": 913,
            "return": [
                "AstLogAnd",
                "AstBinAnd",
                "float",
                "int",
                "list[list[int]]",
                "set[str]"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "typing.Type",
                    "None"
                ]
            }
        },
        "KspNumeric.__iand__": {
            "name": "__iand__",
            "location": 923,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "list[str]",
                    "int",
                    "float",
                    "typing.AbstractSet"
                ]
            }
        },
        "KspNumeric.__or__": {
            "name": "__or__",
            "location": 926,
            "return": [
                "AstLogOr",
                "AstBinOr",
                "str",
                "list[int]",
                "list[str]",
                "int",
                "list[]"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "typing.Type",
                    "None"
                ]
            }
        },
        "KspNumeric.__ror__": {
            "name": "__ror__",
            "location": 936,
            "return": [
                "AstLogOr",
                "AstBinOr",
                "float",
                "int",
                "list[list[int]]",
                "set[str]"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "typing.Type",
                    "None"
                ]
            }
        },
        "KspNumeric.__ior__": {
            "name": "__ior__",
            "location": 946,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "list[str]",
                    "int",
                    "float",
                    "typing.AbstractSet"
                ]
            }
        },
        "KspNumeric.__eq__": {
            "name": "__eq__",
            "location": 949,
            "return": [
                "AstEq",
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "bool",
                    "None",
                    "float"
                ]
            }
        },
        "KspNumeric.__ne__": {
            "name": "__ne__",
            "location": 955,
            "return": [
                "AstNe",
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "bool",
                    "None",
                    "float"
                ]
            }
        },
        "KspNumeric.__lt__": {
            "name": "__lt__",
            "location": 961,
            "return": [
                "AstLt",
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "bool",
                    "None",
                    "float"
                ]
            }
        },
        "KspNumeric.__gt__": {
            "name": "__gt__",
            "location": 967,
            "return": [
                "AstGt",
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "bool",
                    "None",
                    "float"
                ]
            }
        },
        "KspNumeric.__le__": {
            "name": "__le__",
            "location": 973,
            "return": [
                "AstLe",
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "bool",
                    "None",
                    "float"
                ]
            }
        },
        "KspNumeric.__ge__": {
            "name": "__ge__",
            "location": 979,
            "return": [
                "AstGe",
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "bool",
                    "None",
                    "float"
                ]
            }
        },
        "KspIntVar.__truediv__": {
            "name": "__truediv__",
            "location": 995,
            "return": [
                "AstDiv",
                "int"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "int",
                    "None",
                    "list[]"
                ]
            }
        },
        "KspIntVar.__rtruediv__": {
            "name": "__rtruediv__",
            "location": 1002,
            "return": [
                "AstDiv",
                "int"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "int",
                    "None",
                    "list[]"
                ]
            }
        },
        "KspIntVar.__itruediv__": {
            "name": "__itruediv__",
            "location": 1009,
            "return": [
                "KspIntVar"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "KspIntVar.__floordiv__": {
            "name": "__floordiv__",
            "location": 1018,
            "return": [],
            "arguments": {
                "self": [],
                "other": [
                    "typing.Collection"
                ]
            }
        },
        "KspIntVar.__rfloordiv__": {
            "name": "__rfloordiv__",
            "location": 1021,
            "return": [],
            "arguments": {
                "self": [],
                "other": [
                    "typing.Collection"
                ]
            }
        },
        "KspIntVar.__ifloordiv__": {
            "name": "__ifloordiv__",
            "location": 1024,
            "return": [],
            "arguments": {
                "self": [],
                "other": [
                    "typing.Collection"
                ]
            }
        },
        "KspRealVar.__truediv__": {
            "name": "__truediv__",
            "location": 1029,
            "return": [
                "AstDiv",
                "int"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "int",
                    "None",
                    "list[]"
                ]
            }
        },
        "KspRealVar.__rtruediv__": {
            "name": "__rtruediv__",
            "location": 1036,
            "return": [
                "AstDiv",
                "float"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "int",
                    "None",
                    "list[]"
                ]
            }
        },
        "KspRealVar.__itruediv__": {
            "name": "__itruediv__",
            "location": 1043,
            "return": [
                "KspRealVar"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "KspRealVar.__floordiv__": {
            "name": "__floordiv__",
            "location": 1052,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "list[str]",
                    "int",
                    "float",
                    "typing.AbstractSet"
                ]
            }
        },
        "KspRealVar.__rfloordiv__": {
            "name": "__rfloordiv__",
            "location": 1055,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "list[str]",
                    "int",
                    "float",
                    "typing.AbstractSet"
                ]
            }
        },
        "KspRealVar.__ifloordiv__": {
            "name": "__ifloordiv__",
            "location": 1058,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "list[str]",
                    "int",
                    "float",
                    "typing.AbstractSet"
                ]
            }
        },
        "KspRealVar.__round__": {
            "name": "__round__",
            "location": 1061,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "list[str]",
                    "int",
                    "float",
                    "typing.AbstractSet"
                ]
            }
        },
        "KspRealVar.__pow__": {
            "name": "__pow__",
            "location": 1064,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "list[str]",
                    "int",
                    "float",
                    "typing.AbstractSet"
                ]
            }
        },
        "KspRealVar.__rpow__": {
            "name": "__rpow__",
            "location": 1067,
            "return": [
                "AstPow",
                "int"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "bool",
                    "None",
                    "float"
                ]
            }
        },
        "KspRealVar.__ipow__": {
            "name": "__ipow__",
            "location": 1073,
            "return": [
                "KspRealVar"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "None",
                    "typing.Callable[, ]",
                    "complex"
                ]
            }
        },
        "KspRealVar.__and__": {
            "name": "__and__",
            "location": 1081,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "KspRealVar.__rand__": {
            "name": "__rand__",
            "location": 1086,
            "return": [],
            "arguments": {
                "self": [],
                "other": [
                    "typing.Collection"
                ]
            }
        },
        "KspRealVar.__or__": {
            "name": "__or__",
            "location": 1091,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "KspRealVar.__ror__": {
            "name": "__ror__",
            "location": 1096,
            "return": [],
            "arguments": {
                "self": [],
                "other": [
                    "typing.Collection"
                ]
            }
        },
        "KspArray.__init__": {
            "name": "__init__",
            "location": 1111,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "float",
                    "None",
                    "dict[str, str]",
                    "list[str]",
                    "typing.Callable[typing.Any, str]"
                ],
                "name_prefix": [
                    "typing.Text"
                ],
                "name_postfix": [
                    "typing.Text"
                ],
                "preserve_name": [
                    "bool"
                ],
                "has_init": [
                    "bool"
                ],
                "is_local": [
                    "bool"
                ],
                "ref_type": [
                    "None",
                    "str",
                    "float",
                    "dict[str, str]",
                    "list[str]",
                    "typing.Callable[typing.Any, str]"
                ],
                "item_type": [
                    "None",
                    "bool",
                    "str",
                    "dict[str, typing.Any]"
                ],
                "size": [
                    "int",
                    "None"
                ],
                "seq": [],
                "persist": [
                    "bool"
                ],
                "def_val": [
                    "None",
                    "str",
                    "list[str]",
                    "int"
                ]
            }
        },
        "KspArray.default": {
            "name": "default",
            "location": 1156,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "KspArray._init_seq": {
            "name": "_init_seq",
            "location": 1159,
            "return": [
                "list[None]"
            ],
            "arguments": {
                "self": [],
                "seq": []
            }
        },
        "KspArray._generate_init": {
            "name": "_generate_init",
            "location": 1172,
            "return": [
                "list[typing.Text]"
            ],
            "arguments": {
                "self": []
            }
        },
        "KspArray.item_type": {
            "name": "item_type",
            "location": 1204,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "KspArray.append": {
            "name": "append",
            "location": 1208,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "val": [
                    "dict[, ]",
                    "str",
                    "list[str]",
                    "dict[str, typing.Any]",
                    "bool"
                ]
            }
        },
        "KspArray.extend": {
            "name": "extend",
            "location": 1225,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "seq": [
                    "str"
                ]
            }
        },
        "KspArray.__getitem__": {
            "name": "__getitem__",
            "location": 1232,
            "return": [],
            "arguments": {
                "self": [],
                "idx": [
                    "str",
                    "list[str]",
                    "dict[, ]",
                    "typing.Any"
                ]
            }
        },
        "KspArray._getitem_full": {
            "name": "_getitem_full",
            "location": 1241,
            "return": [],
            "arguments": {
                "self": [],
                "idx": [
                    "str",
                    "dict[, ]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "KspArray._getitem_fast": {
            "name": "_getitem_fast",
            "location": 1257,
            "return": [],
            "arguments": {
                "self": [],
                "idx": [
                    "str",
                    "int"
                ]
            }
        },
        "KspArray.__setitem__": {
            "name": "__setitem__",
            "location": 1264,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "idx": [
                    "list[list[int]]",
                    "dict[str, int]",
                    "str",
                    "int"
                ],
                "val": [
                    "list[list[int]]",
                    "dict[str, int]",
                    "str",
                    "int"
                ]
            }
        },
        "KspArray.set_at_idx": {
            "name": "set_at_idx",
            "location": 1268,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "idx": [
                    "str",
                    "int"
                ],
                "val": [
                    "str",
                    "bool"
                ]
            }
        },
        "KspArray._get_runtime_idx": {
            "name": "_get_runtime_idx",
            "location": 1282,
            "return": [
                "int",
                "str",
                "KspIntVar",
                "AstBase"
            ],
            "arguments": {
                "self": [],
                "idx": [
                    "int"
                ]
            }
        },
        "KspArray._check_idx": {
            "name": "_check_idx",
            "location": 1292,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "self": [],
                "idx": [
                    "int",
                    "float"
                ]
            }
        },
        "KspArray._check_cashed_item": {
            "name": "_check_cashed_item",
            "location": 1307,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "idx": [
                    "bool",
                    "dict[str, typing.Any]",
                    "typing.Callable[, ]",
                    "typing.AbstractSet",
                    "None"
                ]
            }
        },
        "KspArray._item_get_compiled": {
            "name": "_item_get_compiled",
            "location": 1330,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": [],
                "arr": [],
                "idx": [
                    "str",
                    "typing.Callable[str, bool]",
                    "dict[str, typing.Any]",
                    "bool"
                ]
            }
        },
        "KspArray._item_get_runtime": {
            "name": "_item_get_runtime",
            "location": 1334,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "arr": [
                    "str",
                    "dict[, ]"
                ],
                "idx": [
                    "str",
                    "dict[, ]"
                ]
            }
        },
        "KspArray._item_set_runtime": {
            "name": "_item_set_runtime",
            "location": 1343,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "arr": [
                    "dict[, ]",
                    "dict[str, set[str]]",
                    "str",
                    "None"
                ],
                "idx": [
                    "dict[, ]",
                    "dict[str, set[str]]",
                    "str",
                    "None"
                ],
                "val": [
                    "dict[, ]",
                    "dict[str, set[str]]",
                    "str",
                    "None"
                ]
            }
        },
        "KspArray._item_name": {
            "name": "_item_name",
            "location": 1347,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": [],
                "arr": [],
                "idx": [
                    "str",
                    "set[str]"
                ]
            }
        },
        "KspArray._set_runtime": {
            "name": "_set_runtime",
            "location": 1351,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "val": [
                    "int",
                    "str"
                ]
            }
        },
        "KspArray.__iter__": {
            "name": "__iter__",
            "location": 1354,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "KspArray.__len__": {
            "name": "__len__",
            "location": 1360,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "KspArray.iter_runtime": {
            "name": "iter_runtime",
            "location": 1367,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "KspArray.iter_runtime_fast": {
            "name": "iter_runtime_fast",
            "location": 1372,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "KspArray._generate_executable": {
            "name": "_generate_executable",
            "location": 1377,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "KspArray._sort": {
            "name": "_sort",
            "location": 1380,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "direction": [
                    "int",
                    "str",
                    "typing.Iterable['Context']"
                ]
            }
        },
        "KspNumeric.TypeWarn.__init__": {
            "name": "__init__",
            "location": 764,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "val": []
            }
        }
    },
    "pyksp-master/pyksp/compiler/bi_engine_par.py": {
        "FindMod.__init__": {
            "name": "__init__",
            "location": 756,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FindMod.__call__": {
            "name": "__call__",
            "location": 761,
            "return": [],
            "arguments": {
                "self": [],
                "group_idx": [
                    "int",
                    "str",
                    "None"
                ],
                "mod_name": [
                    "int",
                    "str",
                    "None"
                ]
            }
        },
        "FindTarget.__init__": {
            "name": "__init__",
            "location": 780,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FindTarget.__call__": {
            "name": "__call__",
            "location": 786,
            "return": [],
            "arguments": {
                "self": [],
                "group_idx": [
                    "int",
                    "str"
                ],
                "mod_idx": [
                    "int",
                    "str"
                ],
                "target_name": [
                    "int",
                    "str"
                ]
            }
        },
        "EngineUnit.__init__": {
            "name": "__init__",
            "location": 809,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EngineUnit.set_par": {
            "name": "set_par",
            "location": 812,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "par": [
                    "bool",
                    "None",
                    "str"
                ],
                "val": [
                    "bool",
                    "None",
                    "str"
                ]
            }
        },
        "EngineUnit.get_par": {
            "name": "get_par",
            "location": 815,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "par": [
                    "typing.Type",
                    "bytes"
                ]
            }
        },
        "EnginePars.__init__": {
            "name": "__init__",
            "location": 823,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EnginePars.set_par": {
            "name": "set_par",
            "location": 826,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "par": [
                    "str",
                    "list[]",
                    "dict[, ]"
                ],
                "group": [
                    "list[list[int]]",
                    "dict[str, typing.Any]"
                ],
                "slot": [
                    "list[list[int]]",
                    "dict[str, typing.Any]"
                ],
                "generic": [
                    "list[list[int]]",
                    "dict[str, typing.Any]"
                ],
                "val": [
                    "str",
                    "list[]",
                    "dict[, ]"
                ]
            }
        },
        "EnginePars.get_par": {
            "name": "get_par",
            "location": 832,
            "return": [],
            "arguments": {
                "self": [],
                "par": [
                    "list[dict[, ]]",
                    "list[str]",
                    "bool"
                ],
                "group": [
                    "typing.Type",
                    "typing.Callable[T, bool]",
                    "list[str]",
                    "bool",
                    "str"
                ],
                "slot": [
                    "typing.Type",
                    "typing.Callable[T, bool]",
                    "list[str]",
                    "bool",
                    "str"
                ],
                "generic": [
                    "typing.Type",
                    "typing.Callable[T, bool]",
                    "list[str]",
                    "bool",
                    "str"
                ]
            }
        },
        "EnginePars._get_key": {
            "name": "_get_key",
            "location": 838,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": [],
                "group": [
                    "bool"
                ],
                "slot": [
                    "typing.Callable[, ]",
                    "dict[, ]",
                    "typing.Mapping",
                    "bytes",
                    "str",
                    "typing.Type"
                ],
                "generic": [
                    "typing.Callable[, ]",
                    "dict[, ]",
                    "typing.Mapping",
                    "bytes",
                    "str",
                    "typing.Type"
                ]
            }
        },
        "GetEnginePar.__init__": {
            "name": "__init__",
            "location": 853,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GetEnginePar.__call__": {
            "name": "__call__",
            "location": 860,
            "return": [],
            "arguments": {
                "self": [],
                "parameter": [
                    "int"
                ],
                "group_idx": [
                    "int"
                ],
                "slot": [
                    "int"
                ],
                "generic": [
                    "int"
                ]
            }
        },
        "GetEnginePar.calculate": {
            "name": "calculate",
            "location": 877,
            "return": [
                "int",
                "tuple[int]",
                "None"
            ],
            "arguments": {
                "self": [],
                "parameter": [
                    "typing.Callable[, ]",
                    "dict[str, typing.Any]",
                    "list[str]",
                    "dict[, ]",
                    "int",
                    "None",
                    "float"
                ],
                "group_idx": [
                    "typing.Callable[, ]",
                    "dict[str, typing.Any]",
                    "list[str]",
                    "dict[, ]",
                    "int",
                    "None",
                    "float"
                ],
                "slot": [
                    "typing.Callable[, ]",
                    "dict[str, typing.Any]",
                    "list[str]",
                    "dict[, ]",
                    "int",
                    "None",
                    "float"
                ],
                "generic": [
                    "typing.Callable[, ]",
                    "dict[str, typing.Any]",
                    "list[str]",
                    "dict[, ]",
                    "int",
                    "None",
                    "float"
                ]
            }
        },
        "GetEngineParDisp.__init__": {
            "name": "__init__",
            "location": 889,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GetEngineParDisp.__call__": {
            "name": "__call__",
            "location": 896,
            "return": [],
            "arguments": {
                "self": [],
                "parameter": [
                    "int"
                ],
                "group_idx": [
                    "int"
                ],
                "slot": [
                    "int"
                ],
                "generic": [
                    "int"
                ]
            }
        },
        "GetEngineParDisp.calculate": {
            "name": "calculate",
            "location": 912,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": [],
                "parameter": [
                    "typing.Callable[, ]",
                    "dict[str, typing.Any]",
                    "list[str]",
                    "dict[, ]",
                    "int",
                    "None",
                    "float"
                ],
                "group_idx": [
                    "typing.Callable[, ]",
                    "dict[str, typing.Any]",
                    "list[str]",
                    "dict[, ]",
                    "int",
                    "None",
                    "float"
                ],
                "slot": [
                    "typing.Callable[, ]",
                    "dict[str, typing.Any]",
                    "list[str]",
                    "dict[, ]",
                    "int",
                    "None",
                    "float"
                ],
                "generic": [
                    "typing.Callable[, ]",
                    "dict[str, typing.Any]",
                    "list[str]",
                    "dict[, ]",
                    "int",
                    "None",
                    "float"
                ]
            }
        },
        "GetVoiceLimit.__init__": {
            "name": "__init__",
            "location": 924,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GetVoiceLimit.__call__": {
            "name": "__call__",
            "location": 929,
            "return": [],
            "arguments": {
                "self": [],
                "voice_type": [
                    "typing.Type",
                    "str"
                ]
            }
        },
        "SetVoiceLimit.__init__": {
            "name": "__init__",
            "location": 944,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SetVoiceLimit.__call__": {
            "name": "__call__",
            "location": 950,
            "return": [],
            "arguments": {
                "self": [],
                "voice_type": [],
                "value": [
                    "bool",
                    "typing.Type"
                ]
            }
        },
        "OutputChannelName.__init__": {
            "name": "__init__",
            "location": 967,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "OutputChannelName.__call__": {
            "name": "__call__",
            "location": 972,
            "return": [],
            "arguments": {
                "self": [],
                "out_number": [
                    "int",
                    "str",
                    "typing.Iterable[typing.Iterable[T]]",
                    "None"
                ]
            }
        },
        "SetEnginePar.__init__": {
            "name": "__init__",
            "location": 985,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SetEnginePar.__call__": {
            "name": "__call__",
            "location": 994,
            "return": [],
            "arguments": {
                "self": [],
                "parameter": [
                    "int"
                ],
                "value": [
                    "int"
                ],
                "group_idx": [
                    "int"
                ],
                "slot": [
                    "int"
                ],
                "generic": [
                    "int"
                ]
            }
        }
    },
    "pyksp-master/pyksp/compiler/bi_load_save.py": {
        "GetFolder.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GetFolder.__call__": {
            "name": "__call__",
            "location": 24,
            "return": [],
            "arguments": {
                "self": [],
                "path_var": []
            }
        },
        "LoadArray.__init__": {
            "name": "__init__",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LoadArray.__call__": {
            "name": "__call__",
            "location": 57,
            "return": [],
            "arguments": {
                "self": [],
                "array": [],
                "mode": []
            }
        },
        "LoadArrayStr.__init__": {
            "name": "__init__",
            "location": 109,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LoadArrayStr.__call__": {
            "name": "__call__",
            "location": 119,
            "return": [],
            "arguments": {
                "self": [],
                "array": [],
                "path": []
            }
        },
        "LoadIrSample.__init__": {
            "name": "__init__",
            "location": 140,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LoadIrSample.__call__": {
            "name": "__call__",
            "location": 151,
            "return": [],
            "arguments": {
                "self": [],
                "path": [],
                "slot": [],
                "generic": []
            }
        },
        "SaveArray.__init__": {
            "name": "__init__",
            "location": 188,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SaveArray.__call__": {
            "name": "__call__",
            "location": 198,
            "return": [],
            "arguments": {
                "self": [],
                "array": [],
                "mode": []
            }
        },
        "SaveArrayStr.__init__": {
            "name": "__init__",
            "location": 226,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SaveArrayStr.__call__": {
            "name": "__call__",
            "location": 236,
            "return": [],
            "arguments": {
                "self": [],
                "array": [],
                "path": []
            }
        },
        "SaveMidiFile.__init__": {
            "name": "__init__",
            "location": 258,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SaveMidiFile.__call__": {
            "name": "__call__",
            "location": 267,
            "return": [],
            "arguments": {
                "self": [],
                "path": []
            }
        }
    },
    "pyksp-master/pyksp/compiler/bi_midi.py": {
        "MfInsertFile.__init__": {
            "name": "__init__",
            "location": 144,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MfInsertFile.__call__": {
            "name": "__call__",
            "location": 156,
            "return": [],
            "arguments": {
                "self": [],
                "path": [],
                "track_offset": [],
                "position_offset": [],
                "mode": []
            }
        },
        "MfSetExportArea.__init__": {
            "name": "__init__",
            "location": 187,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MfSetExportArea.__call__": {
            "name": "__call__",
            "location": 195,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "end_pos": [],
                "start_track": [],
                "end_track": []
            }
        },
        "MfSetBufferSize.__init__": {
            "name": "__init__",
            "location": 259,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MfSetBufferSize.__call__": {
            "name": "__call__",
            "location": 264,
            "return": [],
            "arguments": {
                "self": [],
                "size": []
            }
        },
        "MfGetBufferSize.__init__": {
            "name": "__init__",
            "location": 289,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MfGetBufferSize.__call__": {
            "name": "__call__",
            "location": 293,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MfReset.__init__": {
            "name": "__init__",
            "location": 308,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MfReset.__call__": {
            "name": "__call__",
            "location": 312,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MfInsetEvent.__init__": {
            "name": "__init__",
            "location": 327,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MfInsetEvent.__call__": {
            "name": "__call__",
            "location": 336,
            "return": [],
            "arguments": {
                "self": [],
                "track": [],
                "pos": [],
                "command": [],
                "byte1": [],
                "byte2": []
            }
        },
        "MfRemoveEvent.__init__": {
            "name": "__init__",
            "location": 375,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MfRemoveEvent.__call__": {
            "name": "__call__",
            "location": 380,
            "return": [],
            "arguments": {
                "self": [],
                "event_id": []
            }
        },
        "MfSetEventPar.__init__": {
            "name": "__init__",
            "location": 393,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MfSetEventPar.__call__": {
            "name": "__call__",
            "location": 400,
            "return": [],
            "arguments": {
                "self": [],
                "event_id": [],
                "parameter": [],
                "value": []
            }
        },
        "MfGetEventPar.__init__": {
            "name": "__init__",
            "location": 436,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MfGetEventPar.__call__": {
            "name": "__call__",
            "location": 442,
            "return": [],
            "arguments": {
                "self": [],
                "event_id": [],
                "parameter": []
            }
        },
        "MfGetId.__init__": {
            "name": "__init__",
            "location": 470,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MfGetId.__call__": {
            "name": "__call__",
            "location": 474,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MfSetMark.__init__": {
            "name": "__init__",
            "location": 486,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MfSetMark.__call__": {
            "name": "__call__",
            "location": 493,
            "return": [],
            "arguments": {
                "self": [],
                "event_id": [],
                "mark": [],
                "status": []
            }
        },
        "MfGetMark.__init__": {
            "name": "__init__",
            "location": 510,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MfGetMark.__call__": {
            "name": "__call__",
            "location": 516,
            "return": [],
            "arguments": {
                "self": [],
                "event_id": [],
                "mark": []
            }
        },
        "MfByTrack.__init__": {
            "name": "__init__",
            "location": 533,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MfByTrack.__call__": {
            "name": "__call__",
            "location": 538,
            "return": [],
            "arguments": {
                "self": [],
                "track_nr": []
            }
        },
        "MfGetFirst.__init__": {
            "name": "__init__",
            "location": 550,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MfGetFirst.__call__": {
            "name": "__call__",
            "location": 555,
            "return": [],
            "arguments": {
                "self": [],
                "track_nr": []
            }
        },
        "MfGetLast.__init__": {
            "name": "__init__",
            "location": 568,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MfGetLast.__call__": {
            "name": "__call__",
            "location": 573,
            "return": [],
            "arguments": {
                "self": [],
                "track_nr": []
            }
        },
        "MfGetNext.__init__": {
            "name": "__init__",
            "location": 586,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MfGetNext.__call__": {
            "name": "__call__",
            "location": 591,
            "return": [],
            "arguments": {
                "self": [],
                "track_nr": []
            }
        },
        "MfGetPrev.__init__": {
            "name": "__init__",
            "location": 604,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MfGetPrev.__call__": {
            "name": "__call__",
            "location": 609,
            "return": [],
            "arguments": {
                "self": [],
                "track_nr": []
            }
        },
        "MfGetNextAt.__init__": {
            "name": "__init__",
            "location": 623,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MfGetNextAt.__call__": {
            "name": "__call__",
            "location": 629,
            "return": [],
            "arguments": {
                "self": [],
                "track_nr": [],
                "pos": []
            }
        },
        "MfGetPrevAt.__init__": {
            "name": "__init__",
            "location": 645,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MfGetPrevAt.__call__": {
            "name": "__call__",
            "location": 651,
            "return": [],
            "arguments": {
                "self": [],
                "track_nr": [],
                "pos": []
            }
        },
        "MfGetNumTracks.__init__": {
            "name": "__init__",
            "location": 667,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MfGetNumTracks.__call__": {
            "name": "__call__",
            "location": 671,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SetMidi.__init__": {
            "name": "__init__",
            "location": 683,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SetMidi.__call__": {
            "name": "__call__",
            "location": 696,
            "return": [],
            "arguments": {
                "self": [],
                "channel": [],
                "command": [],
                "byte1": [],
                "byte2": []
            }
        }
    },
    "pyksp-master/pyksp/compiler/bi_misc.py": {
        "logpr": {
            "name": "logpr",
            "location": 1224,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "InRange.__init__": {
            "name": "__init__",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "InRange.__call__": {
            "name": "__call__",
            "location": 50,
            "return": [],
            "arguments": {
                "self": [],
                "value": [],
                "min_val": [],
                "max_val": []
            }
        },
        "InRange.calculate": {
            "name": "calculate",
            "location": 54,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "value": [],
                "min_val": [],
                "max_val": []
            }
        },
        "ArrayEqual.__init__": {
            "name": "__init__",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ArrayEqual.__call__": {
            "name": "__call__",
            "location": 71,
            "return": [],
            "arguments": {
                "self": [],
                "array_1": [],
                "array_2": []
            }
        },
        "ArrayEqual.calculate": {
            "name": "calculate",
            "location": 76,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "array_1": [],
                "array_2": []
            }
        },
        "NumElements.__init__": {
            "name": "__init__",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "NumElements.__call__": {
            "name": "__call__",
            "location": 92,
            "return": [],
            "arguments": {
                "self": [],
                "array": []
            }
        },
        "NumElements.calculate": {
            "name": "calculate",
            "location": 96,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "array": []
            }
        },
        "Search.__init__": {
            "name": "__init__",
            "location": 105,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Search.__call__": {
            "name": "__call__",
            "location": 109,
            "return": [],
            "arguments": {
                "self": [],
                "array": [],
                "value": []
            }
        },
        "Search.calculate": {
            "name": "calculate",
            "location": 113,
            "return": [],
            "arguments": {
                "self": [],
                "array": [],
                "value": []
            }
        },
        "Sort.__init__": {
            "name": "__init__",
            "location": 128,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Sort.__call__": {
            "name": "__call__",
            "location": 132,
            "return": [],
            "arguments": {
                "self": [],
                "array": [],
                "direction": []
            }
        },
        "Sort.calculate": {
            "name": "calculate",
            "location": 136,
            "return": [],
            "arguments": {
                "self": [],
                "array": [],
                "direction": []
            }
        },
        "AllowGroup.__init__": {
            "name": "__init__",
            "location": 150,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AllowGroup.__call__": {
            "name": "__call__",
            "location": 155,
            "return": [],
            "arguments": {
                "self": [],
                "group_idx": []
            }
        },
        "DisAllowGroup.__init__": {
            "name": "__init__",
            "location": 170,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DisAllowGroup.__call__": {
            "name": "__call__",
            "location": 175,
            "return": [],
            "arguments": {
                "self": [],
                "group_idx": []
            }
        },
        "FindGroup.__init__": {
            "name": "__init__",
            "location": 190,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FindGroup.__call__": {
            "name": "__call__",
            "location": 195,
            "return": [],
            "arguments": {
                "self": [],
                "group_name": []
            }
        },
        "GetPurgeState.__init__": {
            "name": "__init__",
            "location": 210,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GetPurgeState.__call__": {
            "name": "__call__",
            "location": 215,
            "return": [],
            "arguments": {
                "self": [],
                "group_idx": []
            }
        },
        "GroupName.__init__": {
            "name": "__init__",
            "location": 229,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GroupName.__call__": {
            "name": "__call__",
            "location": 234,
            "return": [],
            "arguments": {
                "self": [],
                "group_idx": []
            }
        },
        "PurgeGroup.__init__": {
            "name": "__init__",
            "location": 247,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PurgeGroup.__call__": {
            "name": "__call__",
            "location": 252,
            "return": [],
            "arguments": {
                "self": [],
                "group_idx": [],
                "value": []
            }
        },
        "ChangeListener.__init__": {
            "name": "__init__",
            "location": 269,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ChangeListener.__call__": {
            "name": "__call__",
            "location": 275,
            "return": [],
            "arguments": {
                "self": [],
                "signal_type": [],
                "value": []
            }
        },
        "MsToTicks.__init__": {
            "name": "__init__",
            "location": 296,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MsToTicks.__call__": {
            "name": "__call__",
            "location": 301,
            "return": [],
            "arguments": {
                "self": [],
                "microseconds": []
            }
        },
        "TicksToMs.__init__": {
            "name": "__init__",
            "location": 312,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TicksToMs.__call__": {
            "name": "__call__",
            "location": 317,
            "return": [],
            "arguments": {
                "self": [],
                "ticks": []
            }
        },
        "SetListener.__init__": {
            "name": "__init__",
            "location": 328,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SetListener.__call__": {
            "name": "__call__",
            "location": 335,
            "return": [],
            "arguments": {
                "self": [],
                "signal_type": [],
                "value": []
            }
        },
        "StopWait.__init__": {
            "name": "__init__",
            "location": 368,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "StopWait.__call__": {
            "name": "__call__",
            "location": 374,
            "return": [],
            "arguments": {
                "self": [],
                "callback_id": [],
                "parameter": []
            }
        },
        "Wait.__init__": {
            "name": "__init__",
            "location": 391,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Wait.__call__": {
            "name": "__call__",
            "location": 396,
            "return": [],
            "arguments": {
                "self": [],
                "microseconds": []
            }
        },
        "WaitTicks.__init__": {
            "name": "__init__",
            "location": 406,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "WaitTicks.__call__": {
            "name": "__call__",
            "location": 411,
            "return": [],
            "arguments": {
                "self": [],
                "ticks": []
            }
        },
        "key_color._get_item": {
            "name": "_get_item",
            "location": 432,
            "return": [],
            "arguments": {
                "note_nr": []
            }
        },
        "key_color._set_item": {
            "name": "_set_item",
            "location": 442,
            "return": [
                "None"
            ],
            "arguments": {
                "note_nr": [],
                "color": []
            }
        },
        "Key.__init__": {
            "name": "__init__",
            "location": 472,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "nr": []
            }
        },
        "Key.pressed": {
            "name": "pressed",
            "location": 484,
            "return": [],
            "arguments": {
                "self": [],
                "val": []
            }
        },
        "Key.type": {
            "name": "type",
            "location": 496,
            "return": [],
            "arguments": {
                "self": [],
                "val": []
            }
        },
        "GetKeyColor.__init__": {
            "name": "__init__",
            "location": 505,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GetKeyColor.__call__": {
            "name": "__call__",
            "location": 509,
            "return": [],
            "arguments": {
                "self": [],
                "note_nr": []
            }
        },
        "GetKeyColor.calculate": {
            "name": "calculate",
            "location": 514,
            "return": [],
            "arguments": {
                "self": [],
                "note_nr": []
            }
        },
        "SetKeyColor.__init__": {
            "name": "__init__",
            "location": 523,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SetKeyColor.__call__": {
            "name": "__call__",
            "location": 529,
            "return": [],
            "arguments": {
                "self": [],
                "note_nr": [],
                "color": []
            }
        },
        "GetKeyName.__init__": {
            "name": "__init__",
            "location": 563,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GetKeyName.__call__": {
            "name": "__call__",
            "location": 567,
            "return": [],
            "arguments": {
                "self": [],
                "note_nr": []
            }
        },
        "GetKeyName.calculate": {
            "name": "calculate",
            "location": 571,
            "return": [],
            "arguments": {
                "self": [],
                "note_nr": []
            }
        },
        "SetKeyName.__init__": {
            "name": "__init__",
            "location": 581,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SetKeyName.__call__": {
            "name": "__call__",
            "location": 585,
            "return": [],
            "arguments": {
                "self": [],
                "note_nr": [],
                "name": []
            }
        },
        "SetKeyName.calculate": {
            "name": "calculate",
            "location": 589,
            "return": [],
            "arguments": {
                "self": [],
                "note_nr": [],
                "name": []
            }
        },
        "GetKeyTriggerstate.__init__": {
            "name": "__init__",
            "location": 601,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GetKeyTriggerstate.__call__": {
            "name": "__call__",
            "location": 605,
            "return": [],
            "arguments": {
                "self": [],
                "note_nr": []
            }
        },
        "GetKeyTriggerstate.calculate": {
            "name": "calculate",
            "location": 609,
            "return": [],
            "arguments": {
                "self": [],
                "note_nr": []
            }
        },
        "GetKeyType.__init__": {
            "name": "__init__",
            "location": 619,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GetKeyType.__call__": {
            "name": "__call__",
            "location": 623,
            "return": [],
            "arguments": {
                "self": [],
                "note_nr": []
            }
        },
        "GetKeyType.calculate": {
            "name": "calculate",
            "location": 627,
            "return": [],
            "arguments": {
                "self": [],
                "note_nr": []
            }
        },
        "GetKeyRangeMinNote.__init__": {
            "name": "__init__",
            "location": 637,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GetKeyRangeMinNote.__call__": {
            "name": "__call__",
            "location": 642,
            "return": [],
            "arguments": {
                "self": [],
                "note_nr": []
            }
        },
        "GetKeyRangeMaxNote.__init__": {
            "name": "__init__",
            "location": 667,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GetKeyRangeMaxNote.__call__": {
            "name": "__call__",
            "location": 672,
            "return": [],
            "arguments": {
                "self": [],
                "note_nr": []
            }
        },
        "SetKeyPressed.__init__": {
            "name": "__init__",
            "location": 682,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SetKeyPressed.__call__": {
            "name": "__call__",
            "location": 686,
            "return": [],
            "arguments": {
                "self": [],
                "note_nr": [],
                "value": []
            }
        },
        "SetKeyPressed.calculate": {
            "name": "calculate",
            "location": 691,
            "return": [],
            "arguments": {
                "self": [],
                "note_nr": [],
                "value": []
            }
        },
        "SetKeyPressedSupport.__init__": {
            "name": "__init__",
            "location": 703,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SetKeyPressedSupport.__call__": {
            "name": "__call__",
            "location": 708,
            "return": [],
            "arguments": {
                "self": [],
                "mode": []
            }
        },
        "SetKeyType.__init__": {
            "name": "__init__",
            "location": 721,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SetKeyType.__call__": {
            "name": "__call__",
            "location": 725,
            "return": [],
            "arguments": {
                "self": [],
                "note_nr": [],
                "value": []
            }
        },
        "SetKeyType.calculate": {
            "name": "calculate",
            "location": 735,
            "return": [],
            "arguments": {
                "self": [],
                "note_nr": [],
                "value": []
            }
        },
        "SetKeyrange.__init__": {
            "name": "__init__",
            "location": 746,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SetKeyrange.__call__": {
            "name": "__call__",
            "location": 751,
            "return": [],
            "arguments": {
                "self": [],
                "min": [],
                "max": [],
                "name": []
            }
        },
        "RemoveKeyrange.__init__": {
            "name": "__init__",
            "location": 770,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RemoveKeyrange.__call__": {
            "name": "__call__",
            "location": 775,
            "return": [],
            "arguments": {
                "self": [],
                "note_nr": []
            }
        },
        "ConditiionSymbol.__init__": {
            "name": "__init__",
            "location": 790,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "symbol": []
            }
        },
        "ConditiionSymbol._get_compiled": {
            "name": "_get_compiled",
            "location": 793,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SetCondition.__init__": {
            "name": "__init__",
            "location": 804,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SetCondition.__call__": {
            "name": "__call__",
            "location": 809,
            "return": [],
            "arguments": {
                "self": [],
                "condition": []
            }
        },
        "ResetCondition.__init__": {
            "name": "__init__",
            "location": 825,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ResetCondition.__call__": {
            "name": "__call__",
            "location": 830,
            "return": [],
            "arguments": {
                "self": [],
                "condition": []
            }
        },
        "FindZone.__init__": {
            "name": "__init__",
            "location": 845,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FindZone.__call__": {
            "name": "__call__",
            "location": 850,
            "return": [],
            "arguments": {
                "self": [],
                "zone_name": []
            }
        },
        "GetSampleLength.__init__": {
            "name": "__init__",
            "location": 861,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GetSampleLength.__call__": {
            "name": "__call__",
            "location": 866,
            "return": [],
            "arguments": {
                "self": [],
                "zone_id": []
            }
        },
        "NumSlicesZone.__init__": {
            "name": "__init__",
            "location": 877,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "NumSlicesZone.__call__": {
            "name": "__call__",
            "location": 882,
            "return": [],
            "arguments": {
                "self": [],
                "zone_id": []
            }
        },
        "ZoneSliceLength.__init__": {
            "name": "__init__",
            "location": 892,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ZoneSliceLength.__call__": {
            "name": "__call__",
            "location": 898,
            "return": [],
            "arguments": {
                "self": [],
                "zone_id": [],
                "slice_idx": []
            }
        },
        "ZoneSliceStart.__init__": {
            "name": "__init__",
            "location": 909,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ZoneSliceStart.__call__": {
            "name": "__call__",
            "location": 915,
            "return": [],
            "arguments": {
                "self": [],
                "zone_id": [],
                "slice_idx": []
            }
        },
        "ZoneLoopStart.__init__": {
            "name": "__init__",
            "location": 926,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ZoneLoopStart.__call__": {
            "name": "__call__",
            "location": 932,
            "return": [],
            "arguments": {
                "self": [],
                "zone_id": [],
                "loop_idx": []
            }
        },
        "ZoneLoopEnd.__init__": {
            "name": "__init__",
            "location": 942,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ZoneLoopEnd.__call__": {
            "name": "__call__",
            "location": 948,
            "return": [],
            "arguments": {
                "self": [],
                "zone_id": [],
                "loop_idx": []
            }
        },
        "ZoneLoopCount.__init__": {
            "name": "__init__",
            "location": 958,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ZoneLoopCount.__call__": {
            "name": "__call__",
            "location": 964,
            "return": [],
            "arguments": {
                "self": [],
                "zone_id": [],
                "loop_idx": []
            }
        },
        "DontUseMachineMode.__init__": {
            "name": "__init__",
            "location": 974,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DontUseMachineMode.__call__": {
            "name": "__call__",
            "location": 979,
            "return": [],
            "arguments": {
                "self": [],
                "event_id": []
            }
        },
        "PgsKey.__init__": {
            "name": "__init__",
            "location": 989,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "size": [],
                "is_str": []
            }
        },
        "PgsKey.set": {
            "name": "set",
            "location": 997,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "idx": [],
                "val": []
            }
        },
        "PgsKey.get": {
            "name": "get",
            "location": 1004,
            "return": [],
            "arguments": {
                "self": [],
                "idx": []
            }
        },
        "PGS.__init__": {
            "name": "__init__",
            "location": 1010,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PGS.key_exists": {
            "name": "key_exists",
            "location": 1014,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "PGS.str_key_exists": {
            "name": "str_key_exists",
            "location": 1017,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "PGS.create_key": {
            "name": "create_key",
            "location": 1020,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [],
                "size": []
            }
        },
        "PGS.create_str_key": {
            "name": "create_str_key",
            "location": 1023,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "PGS.set_key_val": {
            "name": "set_key_val",
            "location": 1026,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [],
                "idx": [],
                "val": []
            }
        },
        "PGS.set_str_key_val": {
            "name": "set_str_key_val",
            "location": 1029,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [],
                "val": []
            }
        },
        "PGS.get_key_val": {
            "name": "get_key_val",
            "location": 1032,
            "return": [],
            "arguments": {
                "self": [],
                "key": [],
                "idx": []
            }
        },
        "PGS.get_str_key_val": {
            "name": "get_str_key_val",
            "location": 1035,
            "return": [],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "PgsKeyConverter.__init__": {
            "name": "__init__",
            "location": 1041,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "PgsKeyConverter._get_compiled": {
            "name": "_get_compiled",
            "location": 1046,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PgsKeyConverter._get_runtime": {
            "name": "_get_runtime",
            "location": 1049,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PgsKeyConverter.val": {
            "name": "val",
            "location": 1053,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PgsCreateKey.__init__": {
            "name": "__init__",
            "location": 1059,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PgsCreateKey.__call__": {
            "name": "__call__",
            "location": 1065,
            "return": [],
            "arguments": {
                "self": [],
                "key": [],
                "size": []
            }
        },
        "PgsCreateKeyStr.__init__": {
            "name": "__init__",
            "location": 1079,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PgsCreateKeyStr.__call__": {
            "name": "__call__",
            "location": 1084,
            "return": [],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "PgsKeyExsists.__init__": {
            "name": "__init__",
            "location": 1097,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PgsKeyExsists.__call__": {
            "name": "__call__",
            "location": 1101,
            "return": [],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "PgsKeyExsists.calculate": {
            "name": "calculate",
            "location": 1107,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "PgsStrKeyExsists.__init__": {
            "name": "__init__",
            "location": 1118,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PgsStrKeyExsists.__call__": {
            "name": "__call__",
            "location": 1122,
            "return": [],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "PgsStrKeyExsists.calculate": {
            "name": "calculate",
            "location": 1128,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "PgsSetKeyVal.__init__": {
            "name": "__init__",
            "location": 1139,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PgsSetKeyVal.__call__": {
            "name": "__call__",
            "location": 1145,
            "return": [],
            "arguments": {
                "self": [],
                "key": [],
                "idx": [],
                "val": []
            }
        },
        "PgsSetStrKeyVal.__init__": {
            "name": "__init__",
            "location": 1162,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PgsSetStrKeyVal.__call__": {
            "name": "__call__",
            "location": 1167,
            "return": [],
            "arguments": {
                "self": [],
                "key": [],
                "val": []
            }
        },
        "PgsGetKeyVal.__init__": {
            "name": "__init__",
            "location": 1182,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PgsGetKeyVal.__call__": {
            "name": "__call__",
            "location": 1187,
            "return": [],
            "arguments": {
                "self": [],
                "key": [],
                "idx": []
            }
        },
        "PgsGetKeyVal.calculate": {
            "name": "calculate",
            "location": 1194,
            "return": [],
            "arguments": {
                "self": [],
                "key": [],
                "idx": []
            }
        },
        "PgsGetStrKeyVal.__init__": {
            "name": "__init__",
            "location": 1205,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PgsGetStrKeyVal.__call__": {
            "name": "__call__",
            "location": 1209,
            "return": [],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "PgsGetStrKeyVal.calculate": {
            "name": "calculate",
            "location": 1216,
            "return": [],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "kLog.__init__": {
            "name": "__init__",
            "location": 1277,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "l_type": [],
                "path": [
                    "None"
                ]
            }
        },
        "kLog._simple_log_init": {
            "name": "_simple_log_init",
            "location": 1295,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "kLog._log_with_path_init": {
            "name": "_log_with_path_init",
            "location": 1298,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "kLog._log_arr_pers": {
            "name": "_log_arr_pers",
            "location": 1322,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "kLog.put": {
            "name": "put",
            "location": 1334,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "kLog._check_sep": {
            "name": "_check_sep",
            "location": 1355,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sep": []
            }
        }
    },
    "pyksp-master/pyksp/compiler/bi_notes_events.py": {
        "NoteOff.__init__": {
            "name": "__init__",
            "location": 118,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "NoteOff.__call__": {
            "name": "__call__",
            "location": 123,
            "return": [],
            "arguments": {
                "self": [],
                "note_id": [
                    "int"
                ]
            }
        },
        "PlayNote.__init__": {
            "name": "__init__",
            "location": 143,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PlayNote.__call__": {
            "name": "__call__",
            "location": 153,
            "return": [],
            "arguments": {
                "self": [],
                "note": [
                    "int"
                ],
                "velocity": [
                    "int"
                ],
                "sample_offset": [
                    "int"
                ],
                "duration": [
                    "int"
                ]
            }
        },
        "SetController.__init__": {
            "name": "__init__",
            "location": 188,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SetController.__call__": {
            "name": "__call__",
            "location": 193,
            "return": [],
            "arguments": {
                "self": [],
                "controller": [
                    "int"
                ],
                "value": [
                    "int"
                ]
            }
        },
        "SetRpn.__init__": {
            "name": "__init__",
            "location": 219,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "SetRpn.__call__": {
            "name": "__call__",
            "location": 224,
            "return": [],
            "arguments": {
                "self": [],
                "address": [
                    "int"
                ],
                "value": [
                    "int"
                ]
            }
        },
        "SetSnapshotType.__init__": {
            "name": "__init__",
            "location": 240,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SetSnapshotType.__call__": {
            "name": "__call__",
            "location": 245,
            "return": [],
            "arguments": {
                "self": [],
                "s_type": []
            }
        },
        "ByMarks.__init__": {
            "name": "__init__",
            "location": 261,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ByMarks.__call__": {
            "name": "__call__",
            "location": 266,
            "return": [],
            "arguments": {
                "self": [],
                "bit_mark": []
            }
        },
        "ChangeNote.__init__": {
            "name": "__init__",
            "location": 277,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ChangeNote.__call__": {
            "name": "__call__",
            "location": 283,
            "return": [],
            "arguments": {
                "self": [],
                "event_id": [],
                "note_nr": []
            }
        },
        "ChangeVelo.__init__": {
            "name": "__init__",
            "location": 301,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ChangeVelo.__call__": {
            "name": "__call__",
            "location": 307,
            "return": [],
            "arguments": {
                "self": [],
                "event_id": [],
                "note_nr": []
            }
        },
        "ChangePan.__init__": {
            "name": "__init__",
            "location": 325,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ChangePan.__call__": {
            "name": "__call__",
            "location": 332,
            "return": [],
            "arguments": {
                "self": [],
                "event_id": [],
                "panorama": [],
                "relative_bit": []
            }
        },
        "ChangeTune.__init__": {
            "name": "__init__",
            "location": 358,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ChangeTune.__call__": {
            "name": "__call__",
            "location": 365,
            "return": [],
            "arguments": {
                "self": [],
                "event_id": [],
                "tune": [],
                "relative_bit": []
            }
        },
        "ChangeVol.__init__": {
            "name": "__init__",
            "location": 391,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ChangeVol.__call__": {
            "name": "__call__",
            "location": 398,
            "return": [],
            "arguments": {
                "self": [],
                "event_id": [],
                "vol": [],
                "relative_bit": []
            }
        },
        "DeleteEventMark.__init__": {
            "name": "__init__",
            "location": 424,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DeleteEventMark.__call__": {
            "name": "__call__",
            "location": 430,
            "return": [],
            "arguments": {
                "self": [],
                "event_id": [],
                "bit_mark": []
            }
        },
        "EventStatus.__init__": {
            "name": "__init__",
            "location": 446,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EventStatus.__call__": {
            "name": "__call__",
            "location": 451,
            "return": [],
            "arguments": {
                "self": [],
                "event_id": []
            }
        },
        "FadeIn.__init__": {
            "name": "__init__",
            "location": 470,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FadeIn.__call__": {
            "name": "__call__",
            "location": 475,
            "return": [],
            "arguments": {
                "self": [],
                "event_id": [],
                "fade_time": []
            }
        },
        "FadeOuut.__init__": {
            "name": "__init__",
            "location": 489,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FadeOuut.__call__": {
            "name": "__call__",
            "location": 495,
            "return": [],
            "arguments": {
                "self": [],
                "event_id": [],
                "fade_time": [],
                "stop_voice": []
            }
        },
        "GetEventIds.__init__": {
            "name": "__init__",
            "location": 513,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GetEventIds.__call__": {
            "name": "__call__",
            "location": 517,
            "return": [],
            "arguments": {
                "self": [],
                "dest_array": []
            }
        },
        "GetEventIds.calculate": {
            "name": "calculate",
            "location": 525,
            "return": [],
            "arguments": {
                "self": [],
                "dest_array": []
            }
        },
        "GetEventPar.__init__": {
            "name": "__init__",
            "location": 539,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GetEventPar.__call__": {
            "name": "__call__",
            "location": 545,
            "return": [],
            "arguments": {
                "self": [],
                "event_id": [],
                "parameter": []
            }
        },
        "GetEventParArr.__init__": {
            "name": "__init__",
            "location": 582,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GetEventParArr.__call__": {
            "name": "__call__",
            "location": 589,
            "return": [],
            "arguments": {
                "self": [],
                "event_id": [],
                "parameter": [],
                "group_idx": []
            }
        },
        "SetEventPar.__init__": {
            "name": "__init__",
            "location": 613,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SetEventPar.__call__": {
            "name": "__call__",
            "location": 620,
            "return": [],
            "arguments": {
                "self": [],
                "event_id": [],
                "parameter": [],
                "value": []
            }
        },
        "SetEventParArr.__init__": {
            "name": "__init__",
            "location": 658,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SetEventParArr.__call__": {
            "name": "__call__",
            "location": 666,
            "return": [],
            "arguments": {
                "self": [],
                "event_id": [],
                "parameter": [],
                "value": [],
                "group_idx": []
            }
        },
        "IgnoreEvent.__init__": {
            "name": "__init__",
            "location": 694,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IgnoreEvent.__call__": {
            "name": "__call__",
            "location": 699,
            "return": [],
            "arguments": {
                "self": [],
                "event_id": []
            }
        },
        "SetEventMark.__init__": {
            "name": "__init__",
            "location": 716,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SetEventMark.__call__": {
            "name": "__call__",
            "location": 722,
            "return": [],
            "arguments": {
                "self": [],
                "event_id": [],
                "bit_mark": []
            }
        },
        "ResetRlsTriggCount.__init__": {
            "name": "__init__",
            "location": 744,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ResetRlsTriggCount.__call__": {
            "name": "__call__",
            "location": 749,
            "return": [],
            "arguments": {
                "self": [],
                "note_nr": []
            }
        },
        "WillNeverTerminate.__init__": {
            "name": "__init__",
            "location": 760,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "WillNeverTerminate.__call__": {
            "name": "__call__",
            "location": 765,
            "return": [],
            "arguments": {
                "self": [],
                "event_id": []
            }
        }
    },
    "pyksp-master/pyksp/compiler/bi_ui_controls.py": {
        "refresh": {
            "name": "refresh",
            "location": 1738,
            "return": [],
            "arguments": {}
        },
        "init_value": {
            "name": "init_value",
            "location": 1969,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "init_default": {
            "name": "init_default",
            "location": 1976,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "init_picture": {
            "name": "init_picture",
            "location": 1983,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "init_picture_state": {
            "name": "init_picture_state",
            "location": 1990,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "init_text": {
            "name": "init_text",
            "location": 1997,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "init_textline": {
            "name": "init_textline",
            "location": 2004,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "init_label": {
            "name": "init_label",
            "location": 2011,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "init_font_type": {
            "name": "init_font_type",
            "location": 2018,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "init_textpos_y": {
            "name": "init_textpos_y",
            "location": 2025,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "init_text_alignment": {
            "name": "init_text_alignment",
            "location": 2032,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "init_automation_name": {
            "name": "init_automation_name",
            "location": 2039,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "init_allow_automation": {
            "name": "init_allow_automation",
            "location": 2046,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "init_automation_id": {
            "name": "init_automation_id",
            "location": 2053,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "value_min_max": {
            "name": "value_min_max",
            "location": 2137,
            "return": [],
            "arguments": {
                "obj": [],
                "min_val": [],
                "max_val": []
            }
        },
        "kParVarGetError.__init__": {
            "name": "__init__",
            "location": 59,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "kMainWindow.__init__": {
            "name": "__init__",
            "location": 68,
            "return": [],
            "arguments": {
                "self": [],
                "width": [],
                "height": [],
                "wallpaper": [],
                "icon": [],
                "skin_offset": []
            }
        },
        "kMainWindow.skin_offset": {
            "name": "skin_offset",
            "location": 100,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "kMainWindow.x": {
            "name": "x",
            "location": 104,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "kMainWindow.y": {
            "name": "y",
            "location": 108,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "kMainWindow.width": {
            "name": "width",
            "location": 112,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "kMainWindow.height": {
            "name": "height",
            "location": 116,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "kMainWindow._grid": {
            "name": "_grid",
            "location": 120,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "WidgetPar.__init__": {
            "name": "__init__",
            "location": 127,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "value": []
            }
        },
        "WidgetPar._set_compiled": {
            "name": "_set_compiled",
            "location": 132,
            "return": [],
            "arguments": {
                "self": [],
                "val": []
            }
        },
        "WidgetPar._set_runtime": {
            "name": "_set_runtime",
            "location": 137,
            "return": [],
            "arguments": {
                "self": [],
                "val": []
            }
        },
        "WidgetPar._get_compiled": {
            "name": "_get_compiled",
            "location": 140,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "WidgetPar._get_runtime": {
            "name": "_get_runtime",
            "location": 150,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "WidgetPar.val": {
            "name": "val",
            "location": 156,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "WidgetGrid.__init__": {
            "name": "__init__",
            "location": 166,
            "return": [],
            "arguments": {
                "self": [],
                "obj": [],
                "columns": [],
                "rows": [],
                "top_offset": [],
                "bottom_offset": [],
                "left_offset": [],
                "right_offset": []
            }
        },
        "WidgetGrid._make_ceils": {
            "name": "_make_ceils",
            "location": 180,
            "return": [],
            "arguments": {
                "self": [],
                "columns": [],
                "rows": []
            }
        },
        "WidgetGrid._get_idx_from_matrix": {
            "name": "_get_idx_from_matrix",
            "location": 194,
            "return": [],
            "arguments": {
                "self": [],
                "column": [],
                "row": []
            }
        },
        "WidgetGrid.get_ceil": {
            "name": "get_ceil",
            "location": 197,
            "return": [],
            "arguments": {
                "self": [],
                "column": [],
                "row": []
            }
        },
        "WidgetMeta.__call__": {
            "name": "__call__",
            "location": 208,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "kWidget.__init__": {
            "name": "__init__",
            "location": 220,
            "return": [],
            "arguments": {
                "self": [],
                "parent": [],
                "x": [],
                "y": [],
                "width": [],
                "height": []
            }
        },
        "kWidget.childs": {
            "name": "childs",
            "location": 237,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "kWidget.pack": {
            "name": "pack",
            "location": 240,
            "return": [],
            "arguments": {
                "self": [],
                "sticky": []
            }
        },
        "kWidget.add_grid": {
            "name": "add_grid",
            "location": 306,
            "return": [],
            "arguments": {
                "self": [],
                "columns": [],
                "rows": [],
                "top_offset": [],
                "bottom_offset": [],
                "left_offset": [],
                "right_offset": []
            }
        },
        "kWidget.grid": {
            "name": "grid",
            "location": 316,
            "return": [],
            "arguments": {
                "self": [],
                "column": [],
                "row": [],
                "columnspan": [],
                "rowspan": [],
                "top_offset": [],
                "bottom_offset": [],
                "left_offset": [],
                "right_offset": []
            }
        },
        "kWidget.place": {
            "name": "place",
            "location": 334,
            "return": [],
            "arguments": {
                "self": [],
                "x": [],
                "y": [],
                "width": [],
                "height": [],
                "x_pct": [],
                "y_pct": [],
                "width_pct": [],
                "height_pct": []
            }
        },
        "kWidget.place_pct": {
            "name": "place_pct",
            "location": 424,
            "return": [],
            "arguments": {
                "self": [],
                "x": [],
                "y": [],
                "width": [],
                "height": []
            }
        },
        "bControlParVar.__init__": {
            "name": "__init__",
            "location": 434,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "short": [],
                "callbacks": []
            }
        },
        "bControlParConst.__init__": {
            "name": "__init__",
            "location": 451,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "callbacks": []
            }
        },
        "SetUiColor.__init__": {
            "name": "__init__",
            "location": 768,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SetUiColor.__call__": {
            "name": "__call__",
            "location": 773,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "ControlParFunc._resolve_parameter": {
            "name": "_resolve_parameter",
            "location": 781,
            "return": [],
            "arguments": {
                "self": [],
                "ctrl": [],
                "parameter": []
            }
        },
        "ControlParFunc._get_contrl_obj": {
            "name": "_get_contrl_obj",
            "location": 790,
            "return": [],
            "arguments": {
                "self": [],
                "control_or_id": []
            }
        },
        "ControlParFunc._add_ksp_control_to_ref": {
            "name": "_add_ksp_control_to_ref",
            "location": 798,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ControlParFunc._get_line_c_id": {
            "name": "_get_line_c_id",
            "location": 802,
            "return": [],
            "arguments": {
                "self": [],
                "control_or_id": []
            }
        },
        "kParVar.__init__": {
            "name": "__init__",
            "location": 812,
            "return": [],
            "arguments": {
                "self": [],
                "control": [],
                "control_par": [],
                "var_type": [],
                "value": []
            }
        },
        "kParVar._set_func_invoke": {
            "name": "_set_func_invoke",
            "location": 839,
            "return": [],
            "arguments": {
                "self": [],
                "val": []
            }
        },
        "kParVar._set_func_put_line": {
            "name": "_set_func_put_line",
            "location": 843,
            "return": [],
            "arguments": {
                "self": [],
                "val": []
            }
        },
        "kParVar._get_func_invoke": {
            "name": "_get_func_invoke",
            "location": 847,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "kParVar._raise_get_compiled": {
            "name": "_raise_get_compiled",
            "location": 850,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "kParVar._get_compiled": {
            "name": "_get_compiled",
            "location": 854,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "kParVar._set_compiled": {
            "name": "_set_compiled",
            "location": 859,
            "return": [],
            "arguments": {
                "self": [],
                "val": []
            }
        },
        "kParVar._get_runtime": {
            "name": "_get_runtime",
            "location": 864,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "kParVar._set_runtime": {
            "name": "_set_runtime",
            "location": 871,
            "return": [],
            "arguments": {
                "self": [],
                "val": []
            }
        },
        "kParVar.bound_var": {
            "name": "bound_var",
            "location": 878,
            "return": [],
            "arguments": {
                "self": [],
                "var": []
            }
        },
        "kParVar.val": {
            "name": "val",
            "location": 882,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "kParPosVar.__init__": {
            "name": "__init__",
            "location": 890,
            "return": [],
            "arguments": {
                "self": [],
                "control": [],
                "control_par": [],
                "value": []
            }
        },
        "kParPosVar._get_func_invoke": {
            "name": "_get_func_invoke",
            "location": 900,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "kParPosVar._set_func_invoke": {
            "name": "_set_func_invoke",
            "location": 904,
            "return": [],
            "arguments": {
                "self": [],
                "val": []
            }
        },
        "kParPosVar._set_func_put_line": {
            "name": "_set_func_put_line",
            "location": 907,
            "return": [],
            "arguments": {
                "self": [],
                "val": []
            }
        },
        "kParPosVar._get_compiled": {
            "name": "_get_compiled",
            "location": 910,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "kParPosVar._get_runtime": {
            "name": "_get_runtime",
            "location": 917,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "kParPosVar._set_runtime": {
            "name": "_set_runtime",
            "location": 924,
            "return": [],
            "arguments": {
                "self": [],
                "val": []
            }
        },
        "kParPosVar._set_compiled": {
            "name": "_set_compiled",
            "location": 937,
            "return": [],
            "arguments": {
                "self": [],
                "val": []
            }
        },
        "kParPosVar.bound_var": {
            "name": "bound_var",
            "location": 942,
            "return": [],
            "arguments": {
                "self": [],
                "var": []
            }
        },
        "kParPosVar.val": {
            "name": "val",
            "location": 946,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "kParIntVar.__init__": {
            "name": "__init__",
            "location": 953,
            "return": [],
            "arguments": {
                "self": [],
                "control": [],
                "control_par": [],
                "value": []
            }
        },
        "kParIntVar._get_func_invoke": {
            "name": "_get_func_invoke",
            "location": 965,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "kParIntVar._set_func_invoke": {
            "name": "_set_func_invoke",
            "location": 969,
            "return": [],
            "arguments": {
                "self": [],
                "val": []
            }
        },
        "kParIntVar._set_func_put_line": {
            "name": "_set_func_put_line",
            "location": 972,
            "return": [],
            "arguments": {
                "self": [],
                "val": []
            }
        },
        "kParStrVar.__init__": {
            "name": "__init__",
            "location": 977,
            "return": [],
            "arguments": {
                "self": [],
                "control": [],
                "control_par": [],
                "value": []
            }
        },
        "kParStrVar._get_func_invoke": {
            "name": "_get_func_invoke",
            "location": 989,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "kParStrVar._set_func_invoke": {
            "name": "_set_func_invoke",
            "location": 993,
            "return": [],
            "arguments": {
                "self": [],
                "val": []
            }
        },
        "kParStrVar._set_func_put_line": {
            "name": "_set_func_put_line",
            "location": 996,
            "return": [],
            "arguments": {
                "self": [],
                "val": []
            }
        },
        "kParArrIntVar.__init__": {
            "name": "__init__",
            "location": 1001,
            "return": [],
            "arguments": {
                "self": [],
                "control": [],
                "control_par": [],
                "value": []
            }
        },
        "kParArrIntVar.update_idx": {
            "name": "update_idx",
            "location": 1014,
            "return": [],
            "arguments": {
                "self": [],
                "idx": []
            }
        },
        "kParArrIntVar._get_func_invoke": {
            "name": "_get_func_invoke",
            "location": 1021,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "kParArrIntVar._set_func_invoke": {
            "name": "_set_func_invoke",
            "location": 1025,
            "return": [],
            "arguments": {
                "self": [],
                "val": []
            }
        },
        "kParArrIntVar._set_func_put_line": {
            "name": "_set_func_put_line",
            "location": 1029,
            "return": [],
            "arguments": {
                "self": [],
                "val": []
            }
        },
        "kParArrStrVar.__init__": {
            "name": "__init__",
            "location": 1035,
            "return": [],
            "arguments": {
                "self": [],
                "control": [],
                "control_par": [],
                "value": []
            }
        },
        "kParArrStrVar.update_idx": {
            "name": "update_idx",
            "location": 1048,
            "return": [],
            "arguments": {
                "self": [],
                "idx": []
            }
        },
        "kParArrStrVar._get_func_invoke": {
            "name": "_get_func_invoke",
            "location": 1055,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "kParArrStrVar._set_func_invoke": {
            "name": "_set_func_invoke",
            "location": 1059,
            "return": [],
            "arguments": {
                "self": [],
                "val": []
            }
        },
        "kParArrStrVar._set_func_put_line": {
            "name": "_set_func_put_line",
            "location": 1063,
            "return": [],
            "arguments": {
                "self": [],
                "val": []
            }
        },
        "kParVarArrInt.__init__": {
            "name": "__init__",
            "location": 1071,
            "return": [],
            "arguments": {
                "self": [],
                "seq": []
            }
        },
        "kParVarArrInt.__getitem__": {
            "name": "__getitem__",
            "location": 1075,
            "return": [],
            "arguments": {
                "self": [],
                "idx": []
            }
        },
        "kParVarArrInt.__setitem__": {
            "name": "__setitem__",
            "location": 1081,
            "return": [],
            "arguments": {
                "self": [],
                "idx": [],
                "val": []
            }
        },
        "kParVarArrStr.__init__": {
            "name": "__init__",
            "location": 1087,
            "return": [],
            "arguments": {
                "self": [],
                "seq": []
            }
        },
        "kParVarArrStr.__getitem__": {
            "name": "__getitem__",
            "location": 1091,
            "return": [],
            "arguments": {
                "self": [],
                "idx": []
            }
        },
        "kParVarArrStr.__setitem__": {
            "name": "__setitem__",
            "location": 1097,
            "return": [],
            "arguments": {
                "self": [],
                "idx": [],
                "val": []
            }
        },
        "ControlParControls.__init__": {
            "name": "__init__",
            "location": 1130,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ControlParControls.append": {
            "name": "append",
            "location": 1134,
            "return": [],
            "arguments": {
                "self": [],
                "control_obj": []
            }
        },
        "ControlParControls.__getitem__": {
            "name": "__getitem__",
            "location": 1143,
            "return": [],
            "arguments": {
                "self": [],
                "idx": []
            }
        },
        "ControlParControls._get_key_from_control": {
            "name": "_get_key_from_control",
            "location": 1150,
            "return": [],
            "arguments": {
                "self": [],
                "control_obj": []
            }
        },
        "ControlPar.__init__": {
            "name": "__init__",
            "location": 1158,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "cls": [],
                "arr_type": [],
                "var_type": [],
                "ref_type": [],
                "size": [],
                "set_func": [],
                "get_func": [],
                "parameter": []
            }
        },
        "ControlPar.refresh": {
            "name": "refresh",
            "location": 1183,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ControlPar.__call__": {
            "name": "__call__",
            "location": 1191,
            "return": [],
            "arguments": {
                "self": [],
                "func": []
            }
        },
        "ControlPar._get_key_from_control": {
            "name": "_get_key_from_control",
            "location": 1198,
            "return": [],
            "arguments": {
                "self": [],
                "control_obj": []
            }
        },
        "ControlPar._get_ref_from_basic": {
            "name": "_get_ref_from_basic",
            "location": 1202,
            "return": [],
            "arguments": {
                "self": [],
                "ref_type": []
            }
        },
        "ControlPar._get": {
            "name": "_get",
            "location": 1211,
            "return": [],
            "arguments": {
                "self": [],
                "control_or_id": [],
                "idx": []
            }
        },
        "ControlPar._get_args": {
            "name": "_get_args",
            "location": 1218,
            "return": [],
            "arguments": {
                "self": [],
                "control_or_id": [],
                "idx": []
            }
        },
        "ControlPar._check_val": {
            "name": "_check_val",
            "location": 1229,
            "return": [],
            "arguments": {
                "self": [],
                "value": [],
                "c_obj": []
            }
        },
        "ControlPar._init_control": {
            "name": "_init_control",
            "location": 1237,
            "return": [],
            "arguments": {
                "self": [],
                "control_obj": [],
                "value": [],
                "bounded_var": []
            }
        },
        "ControlPar.__get__": {
            "name": "__get__",
            "location": 1281,
            "return": [],
            "arguments": {
                "self": [],
                "obj": [],
                "cls": []
            }
        },
        "ControlPar.__set__": {
            "name": "__set__",
            "location": 1305,
            "return": [],
            "arguments": {
                "self": [],
                "obj": [],
                "val": []
            }
        },
        "ControlPar.generate_init_code": {
            "name": "generate_init_code",
            "location": 1314,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SetControlPar.__init__": {
            "name": "__init__",
            "location": 1353,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SetControlPar.__call__": {
            "name": "__call__",
            "location": 1360,
            "return": [],
            "arguments": {
                "self": [],
                "control_or_id": [],
                "parameter": [],
                "value": []
            }
        },
        "SetControlPar._set_runtime": {
            "name": "_set_runtime",
            "location": 1368,
            "return": [],
            "arguments": {
                "self": [],
                "control_or_id": [],
                "parameter": [],
                "value": []
            }
        },
        "SetControlPar._put_line": {
            "name": "_put_line",
            "location": 1374,
            "return": [],
            "arguments": {
                "self": [],
                "control_or_id": [],
                "parameter": [],
                "value": []
            }
        },
        "GetControlPar.__init__": {
            "name": "__init__",
            "location": 1394,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GetControlPar.__call__": {
            "name": "__call__",
            "location": 1400,
            "return": [],
            "arguments": {
                "self": [],
                "control_or_id": [],
                "parameter": []
            }
        },
        "GetControlPar.calculate": {
            "name": "calculate",
            "location": 1408,
            "return": [],
            "arguments": {
                "self": [],
                "control_or_id": [],
                "parameter": []
            }
        },
        "GetControlPar._get_runtime": {
            "name": "_get_runtime",
            "location": 1412,
            "return": [],
            "arguments": {
                "self": [],
                "control_or_id": [],
                "parameter": []
            }
        },
        "GetControlPar._put_line": {
            "name": "_put_line",
            "location": 1423,
            "return": [],
            "arguments": {
                "self": [],
                "control_or_id": [],
                "parameter": []
            }
        },
        "SetControlParStr.__init__": {
            "name": "__init__",
            "location": 1445,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SetControlParStr.__call__": {
            "name": "__call__",
            "location": 1452,
            "return": [],
            "arguments": {
                "self": [],
                "control_or_id": [],
                "parameter": [],
                "value": []
            }
        },
        "SetControlParStr._set_runtime": {
            "name": "_set_runtime",
            "location": 1460,
            "return": [],
            "arguments": {
                "self": [],
                "control_or_id": [],
                "parameter": [],
                "value": []
            }
        },
        "SetControlParStr._put_line": {
            "name": "_put_line",
            "location": 1466,
            "return": [],
            "arguments": {
                "self": [],
                "control_or_id": [],
                "parameter": [],
                "value": []
            }
        },
        "GetControlParStr.__init__": {
            "name": "__init__",
            "location": 1486,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GetControlParStr.__call__": {
            "name": "__call__",
            "location": 1492,
            "return": [],
            "arguments": {
                "self": [],
                "control_or_id": [],
                "parameter": []
            }
        },
        "GetControlParStr.calculate": {
            "name": "calculate",
            "location": 1500,
            "return": [],
            "arguments": {
                "self": [],
                "control_or_id": [],
                "parameter": []
            }
        },
        "GetControlParStr._get_runtime": {
            "name": "_get_runtime",
            "location": 1504,
            "return": [],
            "arguments": {
                "self": [],
                "control_or_id": [],
                "parameter": []
            }
        },
        "GetControlParStr._put_line": {
            "name": "_put_line",
            "location": 1515,
            "return": [],
            "arguments": {
                "self": [],
                "control_or_id": [],
                "parameter": []
            }
        },
        "SetControlParArr.__init__": {
            "name": "__init__",
            "location": 1539,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SetControlParArr.__call__": {
            "name": "__call__",
            "location": 1548,
            "return": [],
            "arguments": {
                "self": [],
                "control_or_id": [],
                "parameter": [],
                "value": [],
                "idx": []
            }
        },
        "SetControlParArr._set_runtime": {
            "name": "_set_runtime",
            "location": 1559,
            "return": [],
            "arguments": {
                "self": [],
                "control_or_id": [],
                "parameter": [],
                "value": [],
                "idx": []
            }
        },
        "SetControlParArr._put_line": {
            "name": "_put_line",
            "location": 1567,
            "return": [],
            "arguments": {
                "self": [],
                "control_or_id": [],
                "parameter": [],
                "value": [],
                "idx": []
            }
        },
        "GetControlParArr.__init__": {
            "name": "__init__",
            "location": 1587,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GetControlParArr.__call__": {
            "name": "__call__",
            "location": 1594,
            "return": [],
            "arguments": {
                "self": [],
                "control_or_id": [],
                "parameter": [],
                "idx": []
            }
        },
        "GetControlParArr.calculate": {
            "name": "calculate",
            "location": 1607,
            "return": [],
            "arguments": {
                "self": [],
                "control_or_id": [],
                "parameter": [],
                "idx": []
            }
        },
        "GetControlParArr._get_runtime": {
            "name": "_get_runtime",
            "location": 1611,
            "return": [],
            "arguments": {
                "self": [],
                "control_or_id": [],
                "parameter": [],
                "idx": []
            }
        },
        "GetControlParArr._put_line": {
            "name": "_put_line",
            "location": 1623,
            "return": [],
            "arguments": {
                "self": [],
                "control_or_id": [],
                "parameter": [],
                "idx": []
            }
        },
        "SetControlParStrArr.__init__": {
            "name": "__init__",
            "location": 1647,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SetControlParStrArr.__call__": {
            "name": "__call__",
            "location": 1656,
            "return": [],
            "arguments": {
                "self": [],
                "control_or_id": [],
                "parameter": [],
                "value": [],
                "idx": []
            }
        },
        "SetControlParStrArr._set_runtime": {
            "name": "_set_runtime",
            "location": 1667,
            "return": [],
            "arguments": {
                "self": [],
                "control_or_id": [],
                "parameter": [],
                "value": [],
                "idx": []
            }
        },
        "SetControlParStrArr._put_line": {
            "name": "_put_line",
            "location": 1675,
            "return": [],
            "arguments": {
                "self": [],
                "control_or_id": [],
                "parameter": [],
                "value": [],
                "idx": []
            }
        },
        "GetControlParStrArr.__init__": {
            "name": "__init__",
            "location": 1695,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GetControlParStrArr.__call__": {
            "name": "__call__",
            "location": 1702,
            "return": [],
            "arguments": {
                "self": [],
                "control_or_id": [],
                "parameter": [],
                "idx": []
            }
        },
        "GetControlParStrArr.calculate": {
            "name": "calculate",
            "location": 1710,
            "return": [],
            "arguments": {
                "self": [],
                "control_or_id": [],
                "parameter": [],
                "idx": []
            }
        },
        "GetControlParStrArr._get_runtime": {
            "name": "_get_runtime",
            "location": 1714,
            "return": [],
            "arguments": {
                "self": [],
                "control_or_id": [],
                "parameter": [],
                "idx": []
            }
        },
        "GetControlParStrArr._put_line": {
            "name": "_put_line",
            "location": 1726,
            "return": [],
            "arguments": {
                "self": [],
                "control_or_id": [],
                "parameter": [],
                "idx": []
            }
        },
        "ControlId.__init__": {
            "name": "__init__",
            "location": 1759,
            "return": [],
            "arguments": {
                "self": [],
                "control_obj": []
            }
        },
        "ControlId.__get__": {
            "name": "__get__",
            "location": 1769,
            "return": [],
            "arguments": {
                "self": [],
                "obj": [],
                "cls": []
            }
        },
        "ControlId.get_by_id": {
            "name": "get_by_id",
            "location": 1775,
            "return": [],
            "arguments": {
                "control_id": []
            }
        },
        "KspNativeControlMeta.__new__": {
            "name": "__new__",
            "location": 1788,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "bases": [],
                "dct": []
            }
        },
        "KspNativeControlMeta.__call__": {
            "name": "__call__",
            "location": 1856,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "KspNativeControlMeta.generate_init_code": {
            "name": "generate_init_code",
            "location": 1920,
            "return": [],
            "arguments": {}
        },
        "KspNativeControl.__init__": {
            "name": "__init__",
            "location": 2100,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "persist": [],
                "preserve": [],
                "parent": [],
                "x": [],
                "y": [],
                "width": [],
                "height": []
            }
        },
        "KspNativeControl.read": {
            "name": "read",
            "location": 2109,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "KspNativeControl._generate_init": {
            "name": "_generate_init",
            "location": 2113,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "KspNativeControl.bound_callback": {
            "name": "bound_callback",
            "location": 2125,
            "return": [],
            "arguments": {
                "self": [],
                "function": []
            }
        },
        "value_min_max.wrapper": {
            "name": "wrapper",
            "location": 2150,
            "return": [],
            "arguments": {
                "val": []
            }
        },
        "kButtonMeta.__new__": {
            "name": "__new__",
            "location": 2161,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "bases": [],
                "dct": []
            }
        },
        "kButtonMeta.__call__": {
            "name": "__call__",
            "location": 2175,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "kButton.__init__": {
            "name": "__init__",
            "location": 2199,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "persist": [],
                "preserve": [],
                "parent": [],
                "x": [],
                "y": [],
                "width": [],
                "height": []
            }
        },
        "kSwitchMeta.__new__": {
            "name": "__new__",
            "location": 2212,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "bases": [],
                "dct": []
            }
        },
        "kSwitchMeta.__call__": {
            "name": "__call__",
            "location": 2222,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "kSwitch.__init__": {
            "name": "__init__",
            "location": 2243,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "persist": [],
                "preserve": [],
                "parent": [],
                "x": [],
                "y": [],
                "width": [],
                "height": []
            }
        },
        "kKnobMeta.__new__": {
            "name": "__new__",
            "location": 2256,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "bases": [],
                "dct": []
            }
        },
        "kKnobMeta.__call__": {
            "name": "__call__",
            "location": 2279,
            "return": [],
            "arguments": {
                "cls": [],
                "min_val": [],
                "max_val": [],
                "display_ratio": []
            }
        },
        "kKnob.__init__": {
            "name": "__init__",
            "location": 2316,
            "return": [],
            "arguments": {
                "self": [],
                "min_val": [],
                "max_val": [],
                "display_ratio": [],
                "name": [],
                "persist": [],
                "preserve": [],
                "parent": [],
                "x": [],
                "y": [],
                "width": [],
                "height": []
            }
        },
        "kFileSelectorMeta.__new__": {
            "name": "__new__",
            "location": 2328,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "bases": [],
                "dct": []
            }
        },
        "kFileSelectorMeta.__call__": {
            "name": "__call__",
            "location": 2340,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "kFileSelector.get_file_name": {
            "name": "get_file_name",
            "location": 2352,
            "return": [],
            "arguments": {
                "self": [],
                "return_format": []
            }
        },
        "kFileSelector.navigate": {
            "name": "navigate",
            "location": 2377,
            "return": [],
            "arguments": {
                "self": [],
                "direction": []
            }
        },
        "kFileSelector.base_path": {
            "name": "base_path",
            "location": 2402,
            "return": [],
            "arguments": {
                "self": [],
                "path": []
            }
        },
        "kFileSelector.column_width": {
            "name": "column_width",
            "location": 2428,
            "return": [],
            "arguments": {
                "self": [],
                "width": []
            }
        },
        "kFileSelector.file_type": {
            "name": "file_type",
            "location": 2449,
            "return": [],
            "arguments": {
                "self": [],
                "file_type": []
            }
        },
        "kLabelMeta.__new__": {
            "name": "__new__",
            "location": 2476,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "bases": [],
                "dct": []
            }
        },
        "kLabelMeta.__call__": {
            "name": "__call__",
            "location": 2496,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "kLabel.__init__": {
            "name": "__init__",
            "location": 2517,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "persist": [],
                "preserve": [],
                "parent": [],
                "x": [],
                "y": [],
                "width": [],
                "height": []
            }
        },
        "kLevelMeterMeta.__new__": {
            "name": "__new__",
            "location": 2530,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "bases": [],
                "dct": []
            }
        },
        "kLevelMeterMeta.__call__": {
            "name": "__call__",
            "location": 2568,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "kLevelMeter.__init__": {
            "name": "__init__",
            "location": 2588,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "persist": [],
                "preserve": [],
                "parent": [],
                "x": [],
                "y": [],
                "width": [],
                "height": []
            }
        },
        "kLevelMeter.attach": {
            "name": "attach",
            "location": 2598,
            "return": [],
            "arguments": {
                "self": [],
                "channel": [],
                "bus": []
            }
        },
        "kMenuMeta.__new__": {
            "name": "__new__",
            "location": 2624,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "bases": [],
                "dct": []
            }
        },
        "kMenuMeta.__call__": {
            "name": "__call__",
            "location": 2642,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "MenuItem.__init__": {
            "name": "__init__",
            "location": 2654,
            "return": [],
            "arguments": {
                "self": [],
                "text": [],
                "val": [],
                "idx": []
            }
        },
        "kMenu.__init__": {
            "name": "__init__",
            "location": 2666,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "persist": [],
                "preserve": [],
                "parent": [],
                "x": [],
                "y": [],
                "width": [],
                "height": []
            }
        },
        "kMenu._get_value": {
            "name": "_get_value",
            "location": 2677,
            "return": [],
            "arguments": {
                "self": [],
                "prop_ret": []
            }
        },
        "kMenu._set_value": {
            "name": "_set_value",
            "location": 2680,
            "return": [],
            "arguments": {
                "self": [],
                "val": [],
                "prop_ret": []
            }
        },
        "kMenu.add_item": {
            "name": "add_item",
            "location": 2683,
            "return": [],
            "arguments": {
                "self": [],
                "text": [],
                "value": []
            }
        },
        "kMenu.get_item_str": {
            "name": "get_item_str",
            "location": 2704,
            "return": [],
            "arguments": {
                "self": [],
                "idx": []
            }
        },
        "kMenu.get_item_value": {
            "name": "get_item_value",
            "location": 2708,
            "return": [],
            "arguments": {
                "self": [],
                "idx": []
            }
        },
        "kMenu.get_item_visibility": {
            "name": "get_item_visibility",
            "location": 2712,
            "return": [],
            "arguments": {
                "self": [],
                "idx": []
            }
        },
        "kMenu.set_item_str": {
            "name": "set_item_str",
            "location": 2716,
            "return": [],
            "arguments": {
                "self": [],
                "idx": [],
                "val": []
            }
        },
        "kMenu.set_item_value": {
            "name": "set_item_value",
            "location": 2720,
            "return": [],
            "arguments": {
                "self": [],
                "idx": [],
                "val": []
            }
        },
        "kMenu.set_item_visibility": {
            "name": "set_item_visibility",
            "location": 2724,
            "return": [],
            "arguments": {
                "self": [],
                "idx": [],
                "val": []
            }
        },
        "GetMenuItemStr.__init__": {
            "name": "__init__",
            "location": 2734,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GetMenuItemStr.__call__": {
            "name": "__call__",
            "location": 2740,
            "return": [],
            "arguments": {
                "self": [],
                "menu_or_id": [],
                "idx": []
            }
        },
        "GetMenuItemStr.calculate": {
            "name": "calculate",
            "location": 2751,
            "return": [],
            "arguments": {
                "self": [],
                "menu_id": [],
                "idx": []
            }
        },
        "GetMenuItemValue.__init__": {
            "name": "__init__",
            "location": 2762,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GetMenuItemValue.__call__": {
            "name": "__call__",
            "location": 2768,
            "return": [],
            "arguments": {
                "self": [],
                "menu_or_id": [],
                "idx": []
            }
        },
        "GetMenuItemValue.calculate": {
            "name": "calculate",
            "location": 2779,
            "return": [],
            "arguments": {
                "self": [],
                "menu_id": [],
                "idx": []
            }
        },
        "GetMenuItemVisibility.__init__": {
            "name": "__init__",
            "location": 2790,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GetMenuItemVisibility.__call__": {
            "name": "__call__",
            "location": 2796,
            "return": [],
            "arguments": {
                "self": [],
                "menu_or_id": [],
                "idx": []
            }
        },
        "GetMenuItemVisibility.calculate": {
            "name": "calculate",
            "location": 2807,
            "return": [],
            "arguments": {
                "self": [],
                "menu_id": [],
                "idx": []
            }
        },
        "SetMenuItemStr.__init__": {
            "name": "__init__",
            "location": 2818,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SetMenuItemStr.__call__": {
            "name": "__call__",
            "location": 2825,
            "return": [],
            "arguments": {
                "self": [],
                "menu_or_id": [],
                "idx": [],
                "text": []
            }
        },
        "SetMenuItemStr.calculate": {
            "name": "calculate",
            "location": 2836,
            "return": [],
            "arguments": {
                "self": [],
                "menu_id": [],
                "idx": [],
                "val": []
            }
        },
        "SetMenuItemValue.__init__": {
            "name": "__init__",
            "location": 2853,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SetMenuItemValue.__call__": {
            "name": "__call__",
            "location": 2860,
            "return": [],
            "arguments": {
                "self": [],
                "menu_or_id": [],
                "idx": [],
                "value": []
            }
        },
        "SetMenuItemValue.calculate": {
            "name": "calculate",
            "location": 2871,
            "return": [],
            "arguments": {
                "self": [],
                "menu_id": [],
                "idx": [],
                "val": []
            }
        },
        "SetMenuItemVisibility.__init__": {
            "name": "__init__",
            "location": 2888,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SetMenuItemVisibility.__call__": {
            "name": "__call__",
            "location": 2895,
            "return": [],
            "arguments": {
                "self": [],
                "menu_or_id": [],
                "idx": [],
                "value": []
            }
        },
        "SetMenuItemVisibility.calculate": {
            "name": "calculate",
            "location": 2908,
            "return": [],
            "arguments": {
                "self": [],
                "menu_id": [],
                "idx": [],
                "val": []
            }
        },
        "kSliderMeta.__new__": {
            "name": "__new__",
            "location": 2925,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "bases": [],
                "dct": []
            }
        },
        "kSliderMeta.__call__": {
            "name": "__call__",
            "location": 2944,
            "return": [],
            "arguments": {
                "cls": [],
                "min_val": [],
                "max_val": []
            }
        },
        "kSlider.__init__": {
            "name": "__init__",
            "location": 2968,
            "return": [],
            "arguments": {
                "self": [],
                "min_val": [],
                "max_val": [],
                "name": [],
                "persist": [],
                "preserve": [],
                "parent": [],
                "x": [],
                "y": [],
                "width": [],
                "height": []
            }
        },
        "kTextEditMeta.__new__": {
            "name": "__new__",
            "location": 2983,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "bases": [],
                "dct": []
            }
        },
        "kTextEditMeta.__call__": {
            "name": "__call__",
            "location": 2996,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "kTextEdit.__init__": {
            "name": "__init__",
            "location": 3017,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "persist": [],
                "preserve": [],
                "parent": [],
                "x": [],
                "y": [],
                "width": [],
                "height": []
            }
        },
        "kValueEditMeta.__new__": {
            "name": "__new__",
            "location": 3028,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "bases": [],
                "dct": []
            }
        },
        "kValueEditMeta.__call__": {
            "name": "__call__",
            "location": 3047,
            "return": [],
            "arguments": {
                "cls": [],
                "min_val": [],
                "max_val": [],
                "display_ratio": []
            }
        },
        "kValueEdit.__init__": {
            "name": "__init__",
            "location": 3093,
            "return": [],
            "arguments": {
                "self": [],
                "min_val": [],
                "max_val": [],
                "display_ratio": [],
                "name": [],
                "persist": [],
                "preserve": [],
                "parent": [],
                "x": [],
                "y": [],
                "width": [],
                "height": []
            }
        },
        "kWaveFormMeta.__new__": {
            "name": "__new__",
            "location": 3106,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "bases": [],
                "dct": []
            }
        },
        "kWaveFormMeta.__call__": {
            "name": "__call__",
            "location": 3154,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "GetWfProperty.__init__": {
            "name": "__init__",
            "location": 3172,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GetWfProperty.__call__": {
            "name": "__call__",
            "location": 3179,
            "return": [],
            "arguments": {
                "self": [],
                "waveform": [],
                "prop": [],
                "idx": []
            }
        },
        "GetWfProperty.calculate": {
            "name": "calculate",
            "location": 3200,
            "return": [],
            "arguments": {
                "self": [],
                "waveform": [],
                "prop": [],
                "idx": []
            }
        },
        "SetWfProperty.__init__": {
            "name": "__init__",
            "location": 3210,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SetWfProperty.__call__": {
            "name": "__call__",
            "location": 3218,
            "return": [],
            "arguments": {
                "self": [],
                "waveform": [],
                "prop": [],
                "idx": [],
                "value": []
            }
        },
        "SetWfProperty.calculate": {
            "name": "calculate",
            "location": 3241,
            "return": [],
            "arguments": {
                "self": [],
                "waveform": [],
                "prop": [],
                "idx": [],
                "value": []
            }
        },
        "kWaveForm.__init__": {
            "name": "__init__",
            "location": 3256,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "persist": [],
                "preserve": [],
                "parent": [],
                "x": [],
                "y": [],
                "width": [],
                "height": []
            }
        },
        "kWaveForm.attach_zone": {
            "name": "attach_zone",
            "location": 3271,
            "return": [],
            "arguments": {
                "self": [],
                "zone_id": [],
                "flags": []
            }
        },
        "kWaveForm.attached_zone": {
            "name": "attached_zone",
            "location": 3304,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "kWaveForm.get_property": {
            "name": "get_property",
            "location": 3307,
            "return": [],
            "arguments": {
                "self": [],
                "prop": [],
                "index": []
            }
        },
        "kWaveForm.set_property": {
            "name": "set_property",
            "location": 3310,
            "return": [],
            "arguments": {
                "self": [],
                "prop": [],
                "index": [],
                "value": []
            }
        },
        "kWaveForm._get_property": {
            "name": "_get_property",
            "location": 3314,
            "return": [],
            "arguments": {
                "self": [],
                "prop": [],
                "idx": []
            }
        },
        "kWaveForm._set_property": {
            "name": "_set_property",
            "location": 3323,
            "return": [],
            "arguments": {
                "self": [],
                "prop": [],
                "idx": [],
                "value": []
            }
        },
        "kTableMeta.__new__": {
            "name": "__new__",
            "location": 3331,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "bases": [],
                "dct": []
            }
        },
        "kTableMeta.__call__": {
            "name": "__call__",
            "location": 3362,
            "return": [],
            "arguments": {
                "cls": [],
                "size": [],
                "val_range": []
            }
        },
        "kTable.__init__": {
            "name": "__init__",
            "location": 3386,
            "return": [],
            "arguments": {
                "self": [],
                "size": [],
                "val_range": [],
                "name": [],
                "persist": [],
                "preserve": [],
                "parent": [],
                "x": [],
                "y": [],
                "width": [],
                "height": []
            }
        },
        "kXyMeta.__new__": {
            "name": "__new__",
            "location": 3398,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "bases": [],
                "dct": []
            }
        },
        "kXyMeta.__call__": {
            "name": "__call__",
            "location": 3447,
            "return": [],
            "arguments": {
                "cls": [],
                "size": []
            }
        },
        "kXy.__init__": {
            "name": "__init__",
            "location": 3491,
            "return": [],
            "arguments": {
                "self": [],
                "size": [],
                "name": [],
                "persist": [],
                "preserve": [],
                "parent": [],
                "x": [],
                "y": [],
                "width": [],
                "height": []
            }
        },
        "kWidget.pack.get_self_par": {
            "name": "get_self_par",
            "location": 255,
            "return": [],
            "arguments": {
                "par": [],
                "def_par": []
            }
        },
        "kWidget.pack.s_w": {
            "name": "s_w",
            "location": 269,
            "return": [],
            "arguments": {}
        },
        "kWidget.pack.s_h": {
            "name": "s_h",
            "location": 272,
            "return": [],
            "arguments": {}
        },
        "kWidget.pack.center_w": {
            "name": "center_w",
            "location": 275,
            "return": [],
            "arguments": {}
        },
        "kWidget.pack.center_h": {
            "name": "center_h",
            "location": 281,
            "return": [],
            "arguments": {}
        }
    },
    "pyksp-master/pyksp/compiler/callbacks.py": {
        "init": {
            "name": "init",
            "location": 35,
            "return": [],
            "arguments": {
                "f": []
            }
        },
        "async_comlete": {
            "name": "async_comlete",
            "location": 50,
            "return": [],
            "arguments": {
                "f": []
            }
        },
        "listener": {
            "name": "listener",
            "location": 66,
            "return": [],
            "arguments": {
                "f": []
            }
        },
        "persistence_changed": {
            "name": "persistence_changed",
            "location": 80,
            "return": [],
            "arguments": {
                "f": []
            }
        },
        "pgs_changed": {
            "name": "pgs_changed",
            "location": 92,
            "return": [],
            "arguments": {
                "f": []
            }
        },
        "poly_at": {
            "name": "poly_at",
            "location": 102,
            "return": [],
            "arguments": {
                "f": []
            }
        },
        "note": {
            "name": "note",
            "location": 109,
            "return": [],
            "arguments": {
                "f": []
            }
        },
        "release": {
            "name": "release",
            "location": 115,
            "return": [],
            "arguments": {
                "f": []
            }
        },
        "controller": {
            "name": "controller",
            "location": 121,
            "return": [],
            "arguments": {
                "f": []
            }
        },
        "rpn": {
            "name": "rpn",
            "location": 128,
            "return": [],
            "arguments": {
                "f": []
            }
        },
        "nrpn": {
            "name": "nrpn",
            "location": 135,
            "return": [],
            "arguments": {
                "f": []
            }
        },
        "ui_update": {
            "name": "ui_update",
            "location": 142,
            "return": [],
            "arguments": {
                "f": []
            }
        },
        "midi_in": {
            "name": "midi_in",
            "location": 151,
            "return": [],
            "arguments": {
                "f": []
            }
        }
    },
    "pyksp-master/pyksp/compiler/classic_builtins.py": {},
    "pyksp-master/pyksp/compiler/conditions_loops.py": {
        "Break": {
            "name": "Break",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "CondFalse": {
            "name": "CondFalse",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "check": {
            "name": "check",
            "location": 48,
            "return": [
                "bool"
            ],
            "arguments": {
                "condition": [
                    "None",
                    "str",
                    "int",
                    "float"
                ]
            }
        },
        "If._condition": {
            "name": "_condition",
            "location": 102,
            "return": [],
            "arguments": {
                "self": [],
                "val": []
            }
        },
        "If.__init__": {
            "name": "__init__",
            "location": 105,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "condition": [
                    "int",
                    "float"
                ]
            }
        },
        "If.__enter__": {
            "name": "__enter__",
            "location": 115,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "If.__exit__": {
            "name": "__exit__",
            "location": 128,
            "return": [
                "None",
                "bool"
            ],
            "arguments": {
                "self": [],
                "exc_type": [
                    "bool",
                    "str",
                    "None"
                ],
                "value": [
                    "str",
                    "typing.Type",
                    "int",
                    "dict[, ]"
                ],
                "traceback": [
                    "typing.Type",
                    "None",
                    "BaseException",
                    "bool",
                    "typing.Callable[str, typing.Any]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "If.refresh": {
            "name": "refresh",
            "location": 144,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "Else.__init__": {
            "name": "__init__",
            "location": 168,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "condition": [
                    "None",
                    "str",
                    "bool",
                    "collections.abc.AsyncGenerator",
                    "list[str]"
                ]
            }
        },
        "Else.__enter__": {
            "name": "__enter__",
            "location": 181,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Else.is_after_if": {
            "name": "is_after_if",
            "location": 185,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Else.__is_else": {
            "name": "__is_else",
            "location": 202,
            "return": [
                "None",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Else.__is_elif": {
            "name": "__is_elif",
            "location": 213,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Else.__exit__": {
            "name": "__exit__",
            "location": 233,
            "return": [
                "None",
                "bool"
            ],
            "arguments": {
                "self": [],
                "exc_type": [
                    "int"
                ],
                "value": [
                    "list[tuple[typing.Union[str,typing.Any]]]",
                    "int"
                ],
                "trace": [
                    "typing.Type",
                    "None",
                    "BaseException",
                    "bool",
                    "typing.Callable[str, typing.Any]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "Else.__build_end_code": {
            "name": "__build_end_code",
            "location": 247,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "float",
                    "None",
                    "int"
                ]
            }
        },
        "Select.__init__": {
            "name": "__init__",
            "location": 305,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "expression": [
                    "str"
                ]
            }
        },
        "Select.__enter__": {
            "name": "__enter__",
            "location": 313,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Select.__exit__": {
            "name": "__exit__",
            "location": 320,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "exc_type": [
                    "typing.Type",
                    "None",
                    "BaseException",
                    "bool",
                    "typing.Callable[str, typing.Any]",
                    "dict[str, typing.Any]"
                ],
                "value": [
                    "typing.Type",
                    "None",
                    "BaseException",
                    "bool",
                    "typing.Callable[str, typing.Any]",
                    "dict[str, typing.Any]"
                ],
                "trace": [
                    "typing.Type",
                    "None",
                    "BaseException",
                    "bool",
                    "typing.Callable[str, typing.Any]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "Case.__init__": {
            "name": "__init__",
            "location": 339,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "str"
                ]
            }
        },
        "Case.__enter__": {
            "name": "__enter__",
            "location": 345,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Case.__exit__": {
            "name": "__exit__",
            "location": 360,
            "return": [
                "None",
                "bool"
            ],
            "arguments": {
                "self": [],
                "exc_type": [
                    "int"
                ],
                "value": [
                    "str",
                    "typing.Type",
                    "int",
                    "dict[, ]"
                ],
                "trace": [
                    "typing.Type",
                    "None",
                    "BaseException",
                    "bool",
                    "typing.Callable[str, typing.Any]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "For.maxlen": {
            "name": "maxlen",
            "location": 425,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "val": [
                    "bool",
                    "str",
                    "float",
                    "typing.Sequence[int]"
                ]
            }
        },
        "For.init_arrays": {
            "name": "init_arrays",
            "location": 429,
            "return": [
                "list[]"
            ],
            "arguments": {
                "cls": [
                    "typing.Iterable[str]",
                    "None",
                    "str"
                ]
            }
        },
        "For.__init__": {
            "name": "__init__",
            "location": 439,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "start": [
                    "None",
                    "int",
                    "str",
                    "list[]"
                ],
                "stop": [
                    "None",
                    "int",
                    "str",
                    "list[]"
                ],
                "step": [
                    "None",
                    "int",
                    "str",
                    "list[]"
                ],
                "arr": [
                    "None",
                    "str",
                    "int",
                    "set[]"
                ]
            }
        },
        "For.__is_foreach": {
            "name": "__is_foreach",
            "location": 462,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "arr": [
                    "str",
                    "typing.Callable[, ]",
                    "float",
                    "None"
                ],
                "start": [
                    "int",
                    "None",
                    "str",
                    "float",
                    "dict[str, str]"
                ],
                "stop": [
                    "int",
                    "None",
                    "str",
                    "float",
                    "dict[str, str]"
                ],
                "step": [
                    "int",
                    "None",
                    "str",
                    "float",
                    "dict[str, str]"
                ]
            }
        },
        "For.__check_duck_arg": {
            "name": "__check_duck_arg",
            "location": 476,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "arg": [
                    "str",
                    "int",
                    "float",
                    "tuple[]",
                    "list[]"
                ],
                "arg_name": [
                    "str"
                ],
                "requirement": [
                    "str",
                    "bool",
                    "list[typing.Union[int,typing.Any]]",
                    "None"
                ]
            }
        },
        "For.__duck_typing": {
            "name": "__duck_typing",
            "location": 488,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "start": [
                    "int",
                    "str",
                    "None"
                ],
                "stop": [
                    "str",
                    "None",
                    "bytes",
                    "typing.Pattern"
                ],
                "step": [
                    "int",
                    "list[str]",
                    "float"
                ]
            }
        },
        "For.__enter__": {
            "name": "__enter__",
            "location": 499,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "For.__exit__": {
            "name": "__exit__",
            "location": 503,
            "return": [
                "None",
                "bool"
            ],
            "arguments": {
                "self": [],
                "exc": [
                    "float",
                    "None",
                    "str",
                    "bool"
                ],
                "value": [
                    "list[list[typing.Any]]",
                    "int"
                ],
                "trace": [
                    "BaseException",
                    "None",
                    "typing.Callable[str,object, None]",
                    "typing.Iterable[float]",
                    "bool"
                ]
            }
        },
        "For.__generate_exit_code": {
            "name": "__generate_exit_code",
            "location": 520,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "For.__foreach_handler": {
            "name": "__foreach_handler",
            "location": 530,
            "return": [
                "typing.Generator[]",
                "None",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "For.__parse_args": {
            "name": "__parse_args",
            "location": 551,
            "return": [
                "tuple[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "For.__range_handler": {
            "name": "__range_handler",
            "location": 559,
            "return": [
                "typing.Generator[]",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "For.refresh": {
            "name": "refresh",
            "location": 579,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "While.__init__": {
            "name": "__init__",
            "location": 609,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "While.__call__": {
            "name": "__call__",
            "location": 613,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "condition": [
                    "typing.Callable[, ]",
                    "int",
                    "float"
                ]
            }
        },
        "While.__enter__": {
            "name": "__enter__",
            "location": 635,
            "return": [
                "While"
            ],
            "arguments": {
                "self": []
            }
        },
        "While.__exit__": {
            "name": "__exit__",
            "location": 638,
            "return": [
                "None",
                "bool"
            ],
            "arguments": {
                "self": [],
                "exc": [
                    "float",
                    "None",
                    "str",
                    "bool"
                ],
                "value": [
                    "BaseException",
                    "None",
                    "typing.Callable[str,object, None]",
                    "typing.Iterable[float]",
                    "bool"
                ],
                "trace": [
                    "BaseException",
                    "None",
                    "typing.Callable[str,object, None]",
                    "typing.Iterable[float]",
                    "bool"
                ]
            }
        }
    },
    "pyksp-master/pyksp/compiler/dev_tools.py": {
        "print_lines": {
            "name": "print_lines",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "arg": [],
                "title": [
                    "None"
                ]
            }
        },
        "unpack_lines": {
            "name": "unpack_lines",
            "location": 68,
            "return": [
                "str",
                "typing.Text"
            ],
            "arguments": {
                "arg": []
            }
        },
        "WrapProp.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "prop": [],
                "fget": [],
                "fset": [],
                "wrap_type": []
            }
        },
        "WrapProp.__get__": {
            "name": "__get__",
            "location": 27,
            "return": [],
            "arguments": {
                "self": [],
                "obj": [],
                "cls": []
            }
        },
        "WrapProp.__set__": {
            "name": "__set__",
            "location": 41,
            "return": [],
            "arguments": {
                "self": [],
                "obj": [],
                "val": []
            }
        }
    },
    "pyksp-master/pyksp/compiler/functions.py": {
        "func": {
            "name": "func",
            "location": 526,
            "return": [],
            "arguments": {
                "f": [
                    "typing.Callable[[], typing.Any]",
                    "list[]",
                    "typing.Type",
                    "str"
                ]
            }
        },
        "kOut.__init__": {
            "name": "__init__",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ref_type": [
                    "str",
                    "dict[str, object]",
                    "typing.Type"
                ],
                "size": [
                    "None",
                    "bool",
                    "list[float]",
                    "str"
                ]
            }
        },
        "kOut._get_ref_type": {
            "name": "_get_ref_type",
            "location": 44,
            "return": [],
            "arguments": {
                "ref_type": [
                    "int",
                    "str",
                    "typing.Type",
                    "None"
                ]
            }
        },
        "kOut.check": {
            "name": "check",
            "location": 55,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "variable": []
            }
        },
        "kOut.ref_type": {
            "name": "ref_type",
            "location": 77,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "kOut.size": {
            "name": "size",
            "location": 82,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "kArg.__init__": {
            "name": "__init__",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ref_type": [
                    "str",
                    "int",
                    "None"
                ],
                "size": [
                    "None",
                    "bool",
                    "list[float]",
                    "str"
                ]
            }
        },
        "kArg._single_ref": {
            "name": "_single_ref",
            "location": 104,
            "return": [
                "tuple[int]",
                "tuple[str]",
                "tuple[float]"
            ],
            "arguments": {
                "self": [],
                "ref_type": [
                    "str",
                    "typing.Type",
                    "bool"
                ]
            }
        },
        "kArg.ref_type": {
            "name": "ref_type",
            "location": 115,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "kArg.size": {
            "name": "size",
            "location": 121,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FuncArg.__init__": {
            "name": "__init__",
            "location": 131,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "par": [
                    "bool",
                    "str"
                ]
            }
        },
        "FuncArg._check_if_local": {
            "name": "_check_if_local",
            "location": 152,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "par": [
                    "str",
                    "None",
                    "int"
                ]
            }
        },
        "FuncArg._check_if_out": {
            "name": "_check_if_out",
            "location": 161,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "par": [
                    "str",
                    "typing.Iterable[str]",
                    "bytes"
                ]
            }
        },
        "FuncArg._get_ref_type": {
            "name": "_get_ref_type",
            "location": 170,
            "return": [
                "tuple[int]",
                "tuple[str]",
                "tuple[float]"
            ],
            "arguments": {
                "self": [],
                "anno": [
                    "int"
                ]
            }
        },
        "FuncArg.is_local": {
            "name": "is_local",
            "location": 192,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FuncArg.is_out": {
            "name": "is_out",
            "location": 197,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FuncArg.ref_type": {
            "name": "ref_type",
            "location": 202,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FuncArg.size": {
            "name": "size",
            "location": 207,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FuncArg.default": {
            "name": "default",
            "location": 212,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FuncArg.name": {
            "name": "name",
            "location": 217,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FuncArg.check": {
            "name": "check",
            "location": 221,
            "return": [
                "int",
                "None",
                "str",
                "bytes",
                "dict[str, typing.Any]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "int",
                    "None",
                    "str",
                    "bytes",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "FuncArg._check_array": {
            "name": "_check_array",
            "location": 241,
            "return": [
                "int",
                "float",
                "typing.Collection",
                "str"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "int",
                    "float",
                    "typing.Collection",
                    "str"
                ]
            }
        },
        "FuncArgs.__init__": {
            "name": "__init__",
            "location": 266,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "func": [
                    "set[str]",
                    "typing.Callable[, ]"
                ]
            }
        },
        "FuncArgs.args": {
            "name": "args",
            "location": 276,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FuncArgs.map": {
            "name": "map",
            "location": 280,
            "return": [
                "tuple[typing.Union[bool,dict[, ]]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "FuncCallsStack.append": {
            "name": "append",
            "location": 315,
            "return": [
                "None"
            ],
            "arguments": {
                "seq": [
                    "str"
                ]
            }
        },
        "FuncCallsStack.put": {
            "name": "put",
            "location": 322,
            "return": [
                "None"
            ],
            "arguments": {
                "func": [
                    "typing.Type",
                    "typing.Mapping",
                    "typing.Sequence[typing.Any]",
                    "typing.Callable[, ]"
                ]
            }
        },
        "FuncCallsStack.pop": {
            "name": "pop",
            "location": 328,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "FuncStack.__init__": {
            "name": "__init__",
            "location": 338,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FuncStack.__get__": {
            "name": "__get__",
            "location": 342,
            "return": [],
            "arguments": {
                "self": [],
                "obj": [
                    "typing.Type",
                    "typing.Callable[, ]",
                    "None"
                ],
                "cls": [
                    "typing.Type",
                    "typing.Callable[, ]",
                    "None"
                ]
            }
        },
        "FuncStack.refr": {
            "name": "refr",
            "location": 345,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Function.__init__": {
            "name": "__init__",
            "location": 354,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "func": [
                    "typing.Callable[, ]",
                    "bool",
                    "None"
                ]
            }
        },
        "Function.called": {
            "name": "called",
            "location": 373,
            "return": [
                "float",
                "dict[, ]",
                "bool",
                "None",
                "list[]",
                "str"
            ],
            "arguments": {
                "self": [],
                "val": []
            }
        },
        "Function.args": {
            "name": "args",
            "location": 378,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Function.cash_args": {
            "name": "cash_args",
            "location": 383,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "args": []
            }
        },
        "Function._get_key": {
            "name": "_get_key",
            "location": 392,
            "return": [
                "str"
            ],
            "arguments": {
                "func": [
                    "list[str]",
                    "typing.Callable[, ]",
                    "bool",
                    "dict[, ]",
                    "set[]"
                ]
            }
        },
        "Function._check_func": {
            "name": "_check_func",
            "location": 397,
            "return": [],
            "arguments": {
                "self": [],
                "func": [
                    "bytes",
                    "bool",
                    "str",
                    "typing.Callable[, ]"
                ]
            }
        },
        "Function._get_func_name": {
            "name": "_get_func_name",
            "location": 406,
            "return": [],
            "arguments": {
                "func": []
            }
        },
        "Function._generate_init": {
            "name": "_generate_init",
            "location": 420,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Function._generate_executable": {
            "name": "_generate_executable",
            "location": 424,
            "return": [
                "list[]",
                "list[typing.Text]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Function._generate_ex_proxy": {
            "name": "_generate_ex_proxy",
            "location": 466,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Function.get_func_name": {
            "name": "get_func_name",
            "location": 498,
            "return": [],
            "arguments": {
                "func": []
            }
        },
        "Function.refresh": {
            "name": "refresh",
            "location": 521,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "func.wrapper": {
            "name": "wrapper",
            "location": 562,
            "return": [],
            "arguments": {}
        }
    },
    "pyksp-master/pyksp/compiler/k_built_ins.py": {
        "get_runtime_val": {
            "name": "get_runtime_val",
            "location": 37,
            "return": [],
            "arguments": {
                "val": []
            }
        },
        "_all_subclasses": {
            "name": "_all_subclasses",
            "location": 45,
            "return": [
                "set[]"
            ],
            "arguments": {
                "cls": []
            }
        },
        "Callback.__init__": {
            "name": "__init__",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "header": [
                    "str",
                    "list[str]",
                    "int",
                    "bytes"
                ],
                "cb_type": [
                    "bool",
                    "set[str]",
                    "list[str]",
                    "str"
                ],
                "built_in_vars": [
                    "tuple[str]",
                    "dict[str, str]",
                    "list[int]"
                ]
            }
        },
        "Callback.add_function": {
            "name": "add_function",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "function": [
                    "list[]",
                    "typing.Callable[, ]"
                ]
            }
        },
        "Callback.open": {
            "name": "open",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Callback.close": {
            "name": "close",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "keep_type": [
                    "None",
                    "typing.Type",
                    "str",
                    "BaseException",
                    "Exception"
                ]
            }
        },
        "Callback.generate_body": {
            "name": "generate_body",
            "location": 84,
            "return": [
                "list[]",
                "list[typing.Text]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Callback.get_all_bodies": {
            "name": "get_all_bodies",
            "location": 113,
            "return": [
                "list[]"
            ],
            "arguments": {}
        },
        "Callback.refresh": {
            "name": "refresh",
            "location": 122,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "Callback._refresh": {
            "name": "_refresh",
            "location": 127,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "InitCallbackCl.open": {
            "name": "open",
            "location": 132,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "InitCallbackCl.close": {
            "name": "close",
            "location": 136,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Control.__init__": {
            "name": "__init__",
            "location": 143,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "control": [
                    "int",
                    "float"
                ]
            }
        },
        "UiControlCallbackCl.__init__": {
            "name": "__init__",
            "location": 150,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cb_type": [
                    "str",
                    "bool"
                ]
            }
        },
        "UiControlCallbackCl.open": {
            "name": "open",
            "location": 154,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "control": []
            }
        },
        "UiControlCallbackCl.generate_body": {
            "name": "generate_body",
            "location": 167,
            "return": [
                "list[]",
                "list[typing.Text]"
            ],
            "arguments": {
                "self": []
            }
        },
        "FunctionCallbackCl.__init__": {
            "name": "__init__",
            "location": 180,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FunctionCallbackCl.open": {
            "name": "open",
            "location": 185,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FunctionCallbackCl.close": {
            "name": "close",
            "location": 196,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FunctionCallbackCl.generate_body": {
            "name": "generate_body",
            "location": 211,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BuiltIn.__init__": {
            "name": "__init__",
            "location": 220,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "callbacks": []
            }
        },
        "BuiltIn.id": {
            "name": "id",
            "location": 228,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BuiltIn.get_by_id": {
            "name": "get_by_id",
            "location": 234,
            "return": [],
            "arguments": {
                "idx": []
            }
        },
        "BuiltIn.__rshift__": {
            "name": "__rshift__",
            "location": 239,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "list[str]",
                    "int",
                    "float",
                    "typing.AbstractSet"
                ]
            }
        },
        "BuiltIn._generate_executable": {
            "name": "_generate_executable",
            "location": 242,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BuiltIn._generate_init": {
            "name": "_generate_init",
            "location": 245,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BuiltIn._set_runtime": {
            "name": "_set_runtime",
            "location": 248,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "val": [
                    "int",
                    "str"
                ]
            }
        },
        "BuiltIn._check_callback": {
            "name": "_check_callback",
            "location": 251,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BuiltIn.refresh": {
            "name": "refresh",
            "location": 261,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "BuilInVar.set_value": {
            "name": "set_value",
            "location": 268,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "val": [
                    "str",
                    "dict[, ]",
                    "bool",
                    "tuple[int]",
                    "list[dict[str, str]]"
                ]
            }
        },
        "BuiltInIntVar.__init__": {
            "name": "__init__",
            "location": 275,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "bool",
                    "typing.Mapping"
                ],
                "callbacks": [],
                "def_val": [
                    "int"
                ]
            }
        },
        "BuiltInRealVar.__init__": {
            "name": "__init__",
            "location": 285,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "float",
                    "typing.Callable[, ]"
                ],
                "callbacks": [],
                "def_val": [
                    "float"
                ]
            }
        },
        "BuiltInArray.__init__": {
            "name": "__init__",
            "location": 294,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "callbacks": []
            }
        },
        "BuiltInArray.__setitem__": {
            "name": "__setitem__",
            "location": 297,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "idx": [
                    "int",
                    "typing.Hashable"
                ],
                "val": [
                    "int",
                    "typing.Hashable"
                ]
            }
        },
        "BuiltInArray.set_value": {
            "name": "set_value",
            "location": 300,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "idx": [],
                "value": [
                    "str",
                    "None"
                ]
            }
        },
        "BuiltInArray.append": {
            "name": "append",
            "location": 307,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "val": [
                    "int",
                    "str",
                    "typing.Iterable[C]"
                ]
            }
        },
        "BuiltInArray.extend": {
            "name": "extend",
            "location": 310,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "val": [
                    "int",
                    "str",
                    "typing.Iterable[C]"
                ]
            }
        },
        "BuiltInArrayInt.__init__": {
            "name": "__init__",
            "location": 316,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "float",
                    "str",
                    "typing.Callable[[], typing.Iterable[float]]",
                    "int"
                ],
                "size": [
                    "float",
                    "int"
                ],
                "callbacks": []
            }
        },
        "BuiltInArrayReal.__init__": {
            "name": "__init__",
            "location": 326,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "typing.Type",
                    "None",
                    "bool"
                ],
                "size": [
                    "bool"
                ],
                "callbacks": []
            }
        },
        "BuiltInFunc.__init__": {
            "name": "__init__",
            "location": 336,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "typing.Sequence[typing.Any]",
                    "None",
                    "dict[str, typing.Any]"
                ],
                "callbacks": [],
                "args": [
                    "None"
                ],
                "def_ret": [
                    "None",
                    "bool",
                    "str",
                    "typing.Sequence[]",
                    "typing.Mapping"
                ],
                "no_parentesis": [
                    "bool"
                ]
            }
        },
        "BuiltInFunc._check_arg": {
            "name": "_check_arg",
            "location": 347,
            "return": [],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "bool"
                ],
                "val": []
            }
        },
        "BuiltInFunc.__call__": {
            "name": "__call__",
            "location": 365,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BuiltInFunc._remove_line": {
            "name": "_remove_line",
            "location": 387,
            "return": [
                "str",
                "typing.Iterable[str]",
                "typing.Type",
                "None",
                "BaseException"
            ],
            "arguments": {
                "self": [],
                "line": [
                    "str",
                    "typing.Iterable[str]",
                    "typing.Type",
                    "None",
                    "BaseException"
                ]
            }
        },
        "BuiltInFunc._build": {
            "name": "_build",
            "location": 399,
            "return": [],
            "arguments": {
                "self": [],
                "line": [
                    "None",
                    "str",
                    "list[str]",
                    "list[]",
                    "dict[str, typing.Any]"
                ],
                "args": [
                    "None"
                ]
            }
        },
        "BuiltInFunc.calculate": {
            "name": "calculate",
            "location": 415,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BuiltInFuncInt.__init__": {
            "name": "__init__",
            "location": 421,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "typing.OrderedDict",
                    "typing.Callable[..., collections.abc.Coroutine]",
                    "dict[str, str]"
                ],
                "callbacks": [],
                "args": [
                    "None"
                ],
                "def_ret": [
                    "None",
                    "typing.OrderedDict",
                    "str",
                    "typing.Callable[..., collections.abc.Coroutine]"
                ],
                "no_parentesis": [
                    "bool"
                ]
            }
        },
        "BuiltInFuncStr.__init__": {
            "name": "__init__",
            "location": 436,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "typing.OrderedDict",
                    "typing.Callable[..., collections.abc.Coroutine]"
                ],
                "callbacks": [],
                "args": [
                    "None"
                ],
                "def_ret": [
                    "None",
                    "typing.OrderedDict",
                    "str",
                    "typing.Callable[..., collections.abc.Coroutine]"
                ],
                "no_parentesis": [
                    "bool"
                ]
            }
        },
        "BuiltInFuncReal.__init__": {
            "name": "__init__",
            "location": 451,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "typing.OrderedDict",
                    "typing.Callable[..., collections.abc.Coroutine]"
                ],
                "callbacks": [],
                "args": [
                    "None"
                ],
                "def_ret": [
                    "None",
                    "typing.OrderedDict",
                    "str",
                    "typing.Callable[..., collections.abc.Coroutine]"
                ],
                "no_parentesis": [
                    "bool"
                ]
            }
        },
        "MessageFunc.__init__": {
            "name": "__init__",
            "location": 475,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MessageFunc.__call__": {
            "name": "__call__",
            "location": 480,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MessageFunc._check_sep": {
            "name": "_check_sep",
            "location": 499,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sep": [
                    "str"
                ]
            }
        },
        "Exp.__init__": {
            "name": "__init__",
            "location": 674,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Exp.calculate": {
            "name": "calculate",
            "location": 679,
            "return": [],
            "arguments": {
                "self": [],
                "value": [
                    "int",
                    "str"
                ]
            }
        },
        "Exp.__call__": {
            "name": "__call__",
            "location": 682,
            "return": [],
            "arguments": {
                "self": [],
                "value": [
                    "float"
                ]
            }
        },
        "Log.__init__": {
            "name": "__init__",
            "location": 692,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Log.calculate": {
            "name": "calculate",
            "location": 697,
            "return": [],
            "arguments": {
                "self": [],
                "value": [
                    "typing.Type"
                ]
            }
        },
        "Log.__call__": {
            "name": "__call__",
            "location": 700,
            "return": [],
            "arguments": {
                "self": [],
                "value": [
                    "float"
                ]
            }
        },
        "Pow.__init__": {
            "name": "__init__",
            "location": 710,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Pow.calculate": {
            "name": "calculate",
            "location": 716,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "x": [],
                "y": [
                    "int",
                    "list[int]"
                ]
            }
        },
        "Pow.__call__": {
            "name": "__call__",
            "location": 721,
            "return": [],
            "arguments": {
                "self": [],
                "x": [
                    "float",
                    "int"
                ],
                "y": [
                    "float",
                    "int"
                ]
            }
        },
        "Sqrt.__init__": {
            "name": "__init__",
            "location": 731,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Sqrt.calculate": {
            "name": "calculate",
            "location": 736,
            "return": [],
            "arguments": {
                "self": [],
                "value": [
                    "int",
                    "str"
                ]
            }
        },
        "Sqrt.__call__": {
            "name": "__call__",
            "location": 739,
            "return": [],
            "arguments": {
                "self": [],
                "value": [
                    "float"
                ]
            }
        },
        "Ceil.__init__": {
            "name": "__init__",
            "location": 749,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Ceil.calculate": {
            "name": "calculate",
            "location": 754,
            "return": [],
            "arguments": {
                "self": [],
                "value": [
                    "int",
                    "str"
                ]
            }
        },
        "Ceil.__call__": {
            "name": "__call__",
            "location": 757,
            "return": [],
            "arguments": {
                "self": [],
                "value": [
                    "float"
                ]
            }
        },
        "Floor.__init__": {
            "name": "__init__",
            "location": 768,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Floor.calculate": {
            "name": "calculate",
            "location": 773,
            "return": [],
            "arguments": {
                "self": [],
                "value": [
                    "int",
                    "str"
                ]
            }
        },
        "Floor.__call__": {
            "name": "__call__",
            "location": 776,
            "return": [],
            "arguments": {
                "self": [],
                "value": [
                    "float"
                ]
            }
        },
        "Round.__init__": {
            "name": "__init__",
            "location": 787,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Round.calculate": {
            "name": "calculate",
            "location": 792,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "int"
                ]
            }
        },
        "Round.__call__": {
            "name": "__call__",
            "location": 795,
            "return": [],
            "arguments": {
                "self": [],
                "value": [
                    "float"
                ]
            }
        },
        "Cos.__init__": {
            "name": "__init__",
            "location": 807,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Cos.calculate": {
            "name": "calculate",
            "location": 812,
            "return": [],
            "arguments": {
                "self": [],
                "value": [
                    "int",
                    "str"
                ]
            }
        },
        "Cos.__call__": {
            "name": "__call__",
            "location": 815,
            "return": [],
            "arguments": {
                "self": [],
                "value": [
                    "float"
                ]
            }
        },
        "Sin.__init__": {
            "name": "__init__",
            "location": 825,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Sin.calculate": {
            "name": "calculate",
            "location": 830,
            "return": [],
            "arguments": {
                "self": [],
                "value": [
                    "int",
                    "str"
                ]
            }
        },
        "Sin.__call__": {
            "name": "__call__",
            "location": 833,
            "return": [],
            "arguments": {
                "self": [],
                "value": [
                    "float"
                ]
            }
        },
        "Tan.__init__": {
            "name": "__init__",
            "location": 843,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Tan.calculate": {
            "name": "calculate",
            "location": 848,
            "return": [],
            "arguments": {
                "self": [],
                "value": [
                    "int",
                    "str"
                ]
            }
        },
        "Tan.__call__": {
            "name": "__call__",
            "location": 851,
            "return": [],
            "arguments": {
                "self": [],
                "value": [
                    "float"
                ]
            }
        },
        "Acos.__init__": {
            "name": "__init__",
            "location": 861,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Acos.calculate": {
            "name": "calculate",
            "location": 866,
            "return": [],
            "arguments": {
                "self": [],
                "value": [
                    "int",
                    "str"
                ]
            }
        },
        "Acos.__call__": {
            "name": "__call__",
            "location": 869,
            "return": [],
            "arguments": {
                "self": [],
                "value": [
                    "float"
                ]
            }
        },
        "Asin.__init__": {
            "name": "__init__",
            "location": 879,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Asin.calculate": {
            "name": "calculate",
            "location": 884,
            "return": [],
            "arguments": {
                "self": [],
                "value": [
                    "int",
                    "str"
                ]
            }
        },
        "Asin.__call__": {
            "name": "__call__",
            "location": 887,
            "return": [],
            "arguments": {
                "self": [],
                "value": [
                    "float"
                ]
            }
        },
        "Atan.__init__": {
            "name": "__init__",
            "location": 897,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Atan.calculate": {
            "name": "calculate",
            "location": 902,
            "return": [],
            "arguments": {
                "self": [],
                "value": [
                    "int",
                    "str"
                ]
            }
        },
        "Atan.__call__": {
            "name": "__call__",
            "location": 905,
            "return": [],
            "arguments": {
                "self": [],
                "value": [
                    "float"
                ]
            }
        }
    },
    "pyksp-master/pyksp/compiler/native_types.py": {
        "refresh_names_count": {
            "name": "refresh_names_count",
            "location": 318,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "kInt.__init__": {
            "name": "__init__",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "int"
                ],
                "name": [
                    "None"
                ],
                "preserve": [
                    "bool"
                ],
                "is_local": [
                    "bool"
                ],
                "persist": [
                    "bool"
                ]
            }
        },
        "kInt._generate_init": {
            "name": "_generate_init",
            "location": 75,
            "return": [
                "list[typing.Text]"
            ],
            "arguments": {
                "self": []
            }
        },
        "kInt._get_compiled": {
            "name": "_get_compiled",
            "location": 85,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "kInt._get_runtime": {
            "name": "_get_runtime",
            "location": 88,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "kInt._set_runtime": {
            "name": "_set_runtime",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "kInt.inc": {
            "name": "inc",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "kInt.dec": {
            "name": "dec",
            "location": 99,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "kReal.__init__": {
            "name": "__init__",
            "location": 110,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "float"
                ],
                "name": [
                    "None"
                ],
                "preserve": [
                    "bool"
                ],
                "is_local": [
                    "bool"
                ],
                "persist": [
                    "bool"
                ]
            }
        },
        "kReal._generate_init": {
            "name": "_generate_init",
            "location": 129,
            "return": [
                "list[typing.Text]"
            ],
            "arguments": {
                "self": []
            }
        },
        "kReal._get_compiled": {
            "name": "_get_compiled",
            "location": 139,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "kReal._get_runtime": {
            "name": "_get_runtime",
            "location": 142,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "kReal._set_runtime": {
            "name": "_set_runtime",
            "location": 145,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "kStr.__init__": {
            "name": "__init__",
            "location": 154,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "typing.Text"
                ],
                "name": [
                    "None"
                ],
                "preserve": [
                    "bool"
                ],
                "is_local": [
                    "bool"
                ],
                "persist": [
                    "bool"
                ]
            }
        },
        "kStr._generate_init": {
            "name": "_generate_init",
            "location": 174,
            "return": [
                "list[typing.Text]"
            ],
            "arguments": {
                "self": []
            }
        },
        "kStr._get_compiled": {
            "name": "_get_compiled",
            "location": 185,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "kStr._get_runtime": {
            "name": "_get_runtime",
            "location": 188,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "kStr._set_runtime": {
            "name": "_set_runtime",
            "location": 191,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "kArrInt.__init__": {
            "name": "__init__",
            "location": 199,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sequence": [
                    "None"
                ],
                "name": [
                    "None"
                ],
                "size": [
                    "None"
                ],
                "preserve": [
                    "bool"
                ],
                "persist": [
                    "bool"
                ],
                "is_local": [
                    "bool"
                ]
            }
        },
        "kArrInt._get_compiled": {
            "name": "_get_compiled",
            "location": 223,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "kArrInt._get_runtime": {
            "name": "_get_runtime",
            "location": 226,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "kArrInt._generate_init": {
            "name": "_generate_init",
            "location": 229,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "kArrReal.__init__": {
            "name": "__init__",
            "location": 240,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sequence": [
                    "None"
                ],
                "name": [
                    "None"
                ],
                "size": [
                    "None"
                ],
                "preserve": [
                    "bool"
                ],
                "persist": [
                    "bool"
                ],
                "is_local": [
                    "bool"
                ]
            }
        },
        "kArrReal._get_compiled": {
            "name": "_get_compiled",
            "location": 264,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "kArrReal._get_runtime": {
            "name": "_get_runtime",
            "location": 267,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "kArrReal._generate_init": {
            "name": "_generate_init",
            "location": 270,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "kArrStr.__init__": {
            "name": "__init__",
            "location": 281,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sequence": [
                    "None"
                ],
                "name": [
                    "None"
                ],
                "size": [
                    "None"
                ],
                "preserve": [
                    "bool"
                ],
                "persist": [
                    "bool"
                ],
                "is_local": [
                    "bool"
                ]
            }
        },
        "kArrStr._get_compiled": {
            "name": "_get_compiled",
            "location": 305,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "kArrStr._get_runtime": {
            "name": "_get_runtime",
            "location": 308,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "kArrStr._generate_init": {
            "name": "_generate_init",
            "location": 311,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "kVar.__new__": {
            "name": "__new__",
            "location": 343,
            "return": [
                "kInt",
                "kStr",
                "kReal",
                "kArrInt",
                "kArrStr",
                "kArrReal"
            ],
            "arguments": {
                "cls": [],
                "value": [
                    "None"
                ],
                "name": [
                    "None"
                ],
                "size": [
                    "None"
                ],
                "preserve": [
                    "bool"
                ],
                "persist": [
                    "bool"
                ]
            }
        },
        "kVar.__ilshift__": {
            "name": "__ilshift__",
            "location": 381,
            "return": [
                "kInt",
                "kStr",
                "kReal",
                "kArrInt",
                "kArrStr",
                "kArrReal"
            ],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "kNone.__init__": {
            "name": "__init__",
            "location": 423,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "kNone._get_compiled": {
            "name": "_get_compiled",
            "location": 427,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "kNone._get_runtime": {
            "name": "_get_runtime",
            "location": 430,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "kNone._set_runtime": {
            "name": "_set_runtime",
            "location": 433,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "kNone._set_compiled": {
            "name": "_set_compiled",
            "location": 436,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "kNone.inc": {
            "name": "inc",
            "location": 439,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "kNone.dec": {
            "name": "dec",
            "location": 442,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "kFalse.__init__": {
            "name": "__init__",
            "location": 448,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "kFalse._get_compiled": {
            "name": "_get_compiled",
            "location": 452,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "kFalse._get_runtime": {
            "name": "_get_runtime",
            "location": 455,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "kFalse._set_runtime": {
            "name": "_set_runtime",
            "location": 458,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "kFalse._set_compiled": {
            "name": "_set_compiled",
            "location": 461,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "kFalse.inc": {
            "name": "inc",
            "location": 464,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "kFalse.dec": {
            "name": "dec",
            "location": 467,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "kTrue.__init__": {
            "name": "__init__",
            "location": 473,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "kTrue._get_compiled": {
            "name": "_get_compiled",
            "location": 477,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "kTrue._get_runtime": {
            "name": "_get_runtime",
            "location": 480,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "kTrue._set_runtime": {
            "name": "_set_runtime",
            "location": 483,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "kTrue._set_compiled": {
            "name": "_set_compiled",
            "location": 486,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "kTrue.inc": {
            "name": "inc",
            "location": 489,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "kTrue.dec": {
            "name": "dec",
            "location": 492,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "kTrue.__eq__": {
            "name": "__eq__",
            "location": 495,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        }
    },
    "pyksp-master/pyksp/compiler/pyksp_ast.py": {},
    "pyksp-master/pyksp/compiler/script.py": {
        "refresh_all": {
            "name": "refresh_all",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "kScript.__init__": {
            "name": "__init__",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "out_file": [
                    "str",
                    "int",
                    "list[str]"
                ],
                "title": [
                    "None",
                    "str",
                    "float",
                    "int",
                    "list[int]"
                ],
                "compact": [
                    "bool"
                ],
                "max_line_length": [
                    "int"
                ],
                "indents": [
                    "bool"
                ],
                "docstrings": [
                    "bool"
                ]
            }
        },
        "kScript._generate_code": {
            "name": "_generate_code",
            "location": 99,
            "return": [
                "list[]",
                "list[typing.Literal]",
                "dict[str, list[typing.Any]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "kScript._check_length": {
            "name": "_check_length",
            "location": 164,
            "return": [
                "list[typing.AnyStr]",
                "list[str]",
                "list[]"
            ],
            "arguments": {
                "self": [],
                "lines": [
                    "list[typing.AnyStr]",
                    "list[str]"
                ]
            }
        },
        "kScript.wrap": {
            "name": "wrap",
            "location": 179,
            "return": [],
            "arguments": {
                "self": [],
                "s": [
                    "str",
                    "float"
                ],
                "w": [
                    "str",
                    "float"
                ]
            }
        },
        "kScript.compile": {
            "name": "compile",
            "location": 187,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "kScript.compile.main_is_frozen": {
            "name": "main_is_frozen",
            "location": 198,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "kScript.compile.get_main_dir": {
            "name": "get_main_dir",
            "location": 202,
            "return": [],
            "arguments": {}
        }
    },
    "pyksp-master/pyksp/compiler/stack.py": {
        "kLoc.__init__": {
            "name": "__init__",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ref_type": [
                    "bool",
                    "str",
                    "typing.Hashable"
                ],
                "size": [
                    "int"
                ]
            }
        },
        "kLoc.__get_type": {
            "name": "__get_type",
            "location": 33,
            "return": [],
            "arguments": {
                "self": [],
                "ref_type": [
                    "str",
                    "int",
                    "None"
                ]
            }
        },
        "kLoc._size": {
            "name": "_size",
            "location": 42,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "kLoc.ref_type": {
            "name": "ref_type",
            "location": 47,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "StackFrameArray.__init__": {
            "name": "__init__",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "arr": [],
                "start_idx": [
                    "int"
                ],
                "end_idx": [
                    "int"
                ]
            }
        },
        "StackFrameArray._get_compiled": {
            "name": "_get_compiled",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "StackFrameArray._get_runtime": {
            "name": "_get_runtime",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "StackFrameArray.__getitem__": {
            "name": "__getitem__",
            "location": 83,
            "return": [],
            "arguments": {
                "self": [],
                "idx": [
                    "int",
                    "frozenset",
                    "None",
                    "float"
                ]
            }
        },
        "StackFrameArray.__setitem__": {
            "name": "__setitem__",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "idx": [
                    "int",
                    "str",
                    "list[int]",
                    "typing.Callable[, ]"
                ],
                "val": [
                    "int",
                    "frozenset",
                    "list[str]",
                    "str",
                    "tuple[typing.Union[int,int]]"
                ]
            }
        },
        "StackFrameArray.iter_runtime": {
            "name": "iter_runtime",
            "location": 94,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "StackFrameArray.__len__": {
            "name": "__len__",
            "location": 100,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "StackFrame.__init__": {
            "name": "__init__",
            "location": 110,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "arr": [
                    "str"
                ],
                "variables": [
                    "tuple[]",
                    "dict[, ]"
                ],
                "start_idx": [
                    "int"
                ]
            }
        },
        "StackFrame.vars": {
            "name": "vars",
            "location": 157,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "StackFrame.size": {
            "name": "size",
            "location": 163,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Stack.__init__": {
            "name": "__init__",
            "location": 175,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "None",
                    "bool",
                    "typing.Type"
                ],
                "ref_type": [
                    "bool",
                    "float",
                    "bytes",
                    "str",
                    "typing.Any",
                    "None"
                ],
                "size": [
                    "bool",
                    "str",
                    "None"
                ]
            }
        },
        "Stack.push": {
            "name": "push",
            "location": 191,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Stack.pop": {
            "name": "pop",
            "location": 206,
            "return": [
                "int",
                "bytes",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "Stack.is_empty": {
            "name": "is_empty",
            "location": 212,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "MultiFrame.__init__": {
            "name": "__init__",
            "location": 225,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_vars": [
                    "str",
                    "bool",
                    "None"
                ],
                "int_count": [
                    "bool"
                ],
                "str_count": [
                    "bool"
                ],
                "real_count": [
                    "bool"
                ]
            }
        },
        "MultiStack.__init__": {
            "name": "__init__",
            "location": 235,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "int",
                    "None",
                    "typing.Callable[int, None]"
                ],
                "size": [
                    "int",
                    "None",
                    "typing.Callable[int, None]"
                ]
            }
        },
        "MultiStack.push": {
            "name": "push",
            "location": 250,
            "return": [
                "list[typing.Union[typing.Text,int,list[typing.Any]]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MultiStack._get_var_type": {
            "name": "_get_var_type",
            "location": 291,
            "return": [
                "int",
                "float",
                "str"
            ],
            "arguments": {
                "var": []
            }
        },
        "MultiStack.pop": {
            "name": "pop",
            "location": 311,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MultiStack.is_empty": {
            "name": "is_empty",
            "location": 323,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pyksp-master/pyksp/compiler/__init__.py": {},
    "pyksp-master/pyksp/compiler/tests/misc.py": {
        "SimpleKspVar.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "float"
                ],
                "is_local": [
                    "bool"
                ],
                "value": [
                    "None",
                    "str",
                    "float"
                ]
            }
        },
        "SimpleKspVar._get_compiled": {
            "name": "_get_compiled",
            "location": 26,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SimpleKspVar._get_runtime": {
            "name": "_get_runtime",
            "location": 30,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SimpleKspVar._set_runtime": {
            "name": "_set_runtime",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "val": [
                    "str",
                    "bool",
                    "dict[, ]",
                    "float"
                ]
            }
        },
        "SimpleKspVar.val": {
            "name": "val",
            "location": 39,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SimpleKspVar._generate_executable": {
            "name": "_generate_executable",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SimpleKspVar._generate_init": {
            "name": "_generate_init",
            "location": 48,
            "return": [
                "list[typing.Text]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ValuebleKspVar._set_runtime": {
            "name": "_set_runtime",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "val": [
                    "str",
                    "typing.Sequence[str]",
                    "bool"
                ]
            }
        },
        "ValuebleKspVar._get_runtime": {
            "name": "_get_runtime",
            "location": 58,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SimpleAst.expand": {
            "name": "expand",
            "location": 64,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pyksp-master/pyksp/compiler/tests/mytests.py": {
        "DevTest.setUp": {
            "name": "setUp",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DevTest.tearDown": {
            "name": "tearDown",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pyksp-master/pyksp/compiler/tests/test_abstract.py": {
        "TestSingleton.runTest": {
            "name": "runTest",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestKspBoolProp.runTest": {
            "name": "runTest",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestKSP.runTest": {
            "name": "runTest",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestName.test_name": {
            "name": "test_name",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestKspObject.runTest": {
            "name": "runTest",
            "location": 151,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestOutput.runTest": {
            "name": "runTest",
            "location": 168,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestOutput.my_call": {
            "name": "my_call",
            "location": 196,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSingleton.Test.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "val": []
            }
        },
        "TestName.Test.__init__": {
            "name": "__init__",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "TestName.Test2.__init__": {
            "name": "__init__",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "TestName.Test3.__init__": {
            "name": "__init__",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [],
                "preserve": []
            }
        },
        "TestName.Test4.__init__": {
            "name": "__init__",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [],
                "postfix": []
            }
        },
        "TestKspObject.Test.__init__": {
            "name": "__init__",
            "location": 121,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [],
                "preserve_name": [
                    "bool"
                ],
                "has_init": [
                    "bool"
                ],
                "is_local": [
                    "bool"
                ],
                "has_executable": [
                    "bool"
                ]
            }
        },
        "TestKspObject.Test._generate_executable": {
            "name": "_generate_executable",
            "location": 127,
            "return": [
                "list[typing.Text]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestKspObject.Test._generate_init": {
            "name": "_generate_init",
            "location": 131,
            "return": [
                "list[typing.Text]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestKspObject.BadGenerators.__init__": {
            "name": "__init__",
            "location": 137,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [],
                "preserve_name": [
                    "bool"
                ],
                "has_init": [
                    "bool"
                ],
                "is_local": [
                    "bool"
                ],
                "has_executable": [
                    "bool"
                ]
            }
        },
        "TestKspObject.BadGenerators._generate_executable": {
            "name": "_generate_executable",
            "location": 143,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestKspObject.BadGenerators._generate_init": {
            "name": "_generate_init",
            "location": 147,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pyksp-master/pyksp/compiler/tests/test_ast_brackets.py": {
        "TestBrackets.runTest": {
            "name": "runTest",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pyksp-master/pyksp/compiler/tests/test_base_types.py": {
        "SimpleAst.expand": {
            "name": "expand",
            "location": 21,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "SimpleAst.get_value": {
            "name": "get_value",
            "location": 24,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "GoodKspVar.__init__": {
            "name": "__init__",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "float",
                    "None",
                    "int"
                ],
                "is_local": [
                    "bool"
                ],
                "value": [
                    "None",
                    "str",
                    "float",
                    "int"
                ],
                "name_prefix": [
                    "typing.Text"
                ],
                "name_postfix": [
                    "typing.Text"
                ]
            }
        },
        "GoodKspVar._get_compiled": {
            "name": "_get_compiled",
            "location": 44,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GoodKspVar._get_runtime": {
            "name": "_get_runtime",
            "location": 48,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GoodKspVar._set_runtime": {
            "name": "_set_runtime",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "val": [
                    "str",
                    "bool",
                    "dict[, ]",
                    "float"
                ]
            }
        },
        "GoodKspVar.val": {
            "name": "val",
            "location": 57,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GoodKspVar._generate_executable": {
            "name": "_generate_executable",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GoodKspVar._generate_init": {
            "name": "_generate_init",
            "location": 66,
            "return": [
                "list[typing.Text]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ValuebleKspVar._set_runtime": {
            "name": "_set_runtime",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "val": [
                    "str",
                    "typing.Sequence[str]",
                    "bool"
                ]
            }
        },
        "ValuebleKspVar._get_runtime": {
            "name": "_get_runtime",
            "location": 76,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestAstBase.runTest": {
            "name": "runTest",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAstAssign.test_AstBase": {
            "name": "test_AstBase",
            "location": 129,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAstAssign.test_AstAddString": {
            "name": "test_AstAddString",
            "location": 145,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAstOperator.setUp": {
            "name": "setUp",
            "location": 184,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAstOperator.test_unpack": {
            "name": "test_unpack",
            "location": 188,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAstOperator.test_get_value": {
            "name": "test_get_value",
            "location": 208,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAstOperator.test_methods": {
            "name": "test_methods",
            "location": 213,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAstOperator.test_magic": {
            "name": "test_magic",
            "location": 227,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestKspVar.test_bad": {
            "name": "test_bad",
            "location": 320,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestKspVar.test_good": {
            "name": "test_good",
            "location": 331,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestKspVar.test_str_var": {
            "name": "test_str_var",
            "location": 376,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestKspVar.test_numeric": {
            "name": "test_numeric",
            "location": 427,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestKspVar.test_int": {
            "name": "test_int",
            "location": 440,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestKspVar.test_real": {
            "name": "test_real",
            "location": 686,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestKspArray.test_item": {
            "name": "test_item",
            "location": 961,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestKspArray.test_size": {
            "name": "test_size",
            "location": 989,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestKspArray.test_generate_init": {
            "name": "test_generate_init",
            "location": 1016,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestKspArray.test_iter": {
            "name": "test_iter",
            "location": 1047,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAstBase.AstChild.expand": {
            "name": "expand",
            "location": 87,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAstBase.AstChild.get_value": {
            "name": "get_value",
            "location": 90,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAstAssign.TestAst.expand": {
            "name": "expand",
            "location": 105,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAstAssign.TestAst.get_value": {
            "name": "get_value",
            "location": 108,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestAstAssign.TestKspVar.__init__": {
            "name": "__init__",
            "location": 113,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "TestAstAssign.TestKspVar.null": {
            "name": "null",
            "location": 116,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAstAssign.TestKspVar.val": {
            "name": "val",
            "location": 126,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestAstAssign.test_AstAddString.called": {
            "name": "called",
            "location": 158,
            "return": [],
            "arguments": {}
        },
        "TestAstOperator.Operator.__init__": {
            "name": "__init__",
            "location": 175,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "arg": []
            }
        },
        "TestAstOperator.Operator.expand": {
            "name": "expand",
            "location": 178,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAstOperator.Operator.get_value": {
            "name": "get_value",
            "location": 181,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestKspVar.GoodNumeric.__truediv__": {
            "name": "__truediv__",
            "location": 409,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "TestKspVar.GoodNumeric.__rtruediv__": {
            "name": "__rtruediv__",
            "location": 412,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "TestKspVar.GoodNumeric.__itruediv__": {
            "name": "__itruediv__",
            "location": 415,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "TestKspVar.GoodNumeric.__floordiv__": {
            "name": "__floordiv__",
            "location": 418,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "TestKspVar.GoodNumeric.__rfloordiv__": {
            "name": "__rfloordiv__",
            "location": 421,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "TestKspVar.GoodNumeric.__ifloordiv__": {
            "name": "__ifloordiv__",
            "location": 424,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "TestKspVar.TestRealVar.__init__": {
            "name": "__init__",
            "location": 670,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "TestKspVar.TestRealVar._generate_init": {
            "name": "_generate_init",
            "location": 674,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestKspVar.TestRealVar._get_compiled": {
            "name": "_get_compiled",
            "location": 677,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestKspVar.TestRealVar._get_runtime": {
            "name": "_get_runtime",
            "location": 680,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestKspVar.TestRealVar._set_runtime": {
            "name": "_set_runtime",
            "location": 683,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "val": [
                    "str",
                    "typing.Sequence[str]",
                    "bool"
                ]
            }
        },
        "TestKspArray.TestArr.__init__": {
            "name": "__init__",
            "location": 920,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [],
                "seq": [],
                "ref_type": [],
                "is_local": [],
                "item_type": [],
                "size": [],
                "name_prefix": []
            }
        },
        "TestKspArray.TestArr._get_compiled": {
            "name": "_get_compiled",
            "location": 937,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestKspArray.TestArr._get_runtime": {
            "name": "_get_runtime",
            "location": 941,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestKspArray.TestArr.val": {
            "name": "val",
            "location": 946,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestKspArray.TestArr._generate_executable": {
            "name": "_generate_executable",
            "location": 951,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestKspArray.TestIntVar._get_runtime": {
            "name": "_get_runtime",
            "location": 958,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "pyksp-master/pyksp/compiler/tests/test_built_ins.py": {
        "TestCallback.test_mycb": {
            "name": "test_mycb",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCallback.test_func_callback": {
            "name": "test_func_callback",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCallback.test_ui_control": {
            "name": "test_ui_control",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestWrapers.setUp": {
            "name": "setUp",
            "location": 128,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestWrapers.cb": {
            "name": "cb",
            "location": 132,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestWrapers.runTest": {
            "name": "runTest",
            "location": 136,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBuiltInClasses.test_vars": {
            "name": "test_vars",
            "location": 163,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBuiltInClasses.test_func": {
            "name": "test_func",
            "location": 219,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBuiltInClasses.test_message": {
            "name": "test_message",
            "location": 251,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestWrapers.runTest.foo": {
            "name": "foo",
            "location": 139,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "TestWrapers.runTest.bar": {
            "name": "bar",
            "location": 143,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "TestWrapers.runTest.rls": {
            "name": "rls",
            "location": 153,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "TestBuiltInClasses.MyFunc.__init__": {
            "name": "__init__",
            "location": 195,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [],
                "callbacks": [],
                "args": [
                    "None"
                ]
            }
        },
        "TestBuiltInClasses.MyFunc.calculate": {
            "name": "calculate",
            "location": 200,
            "return": [],
            "arguments": {
                "self": [],
                "arg1": [],
                "arg2": []
            }
        },
        "TestBuiltInClasses.MyFuncInt.__init__": {
            "name": "__init__",
            "location": 208,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [],
                "callbacks": [],
                "args": [
                    "None"
                ]
            }
        },
        "TestBuiltInClasses.MyFuncInt.calculate": {
            "name": "calculate",
            "location": 212,
            "return": [],
            "arguments": {
                "self": [],
                "arg1": [],
                "arg2": []
            }
        }
    },
    "pyksp-master/pyksp/compiler/tests/test_conditions_loops.py": {
        "TestIf.test_compiled": {
            "name": "test_compiled",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestIf.test_runtime": {
            "name": "test_runtime",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSelect.runTest": {
            "name": "runTest",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSelect.code": {
            "name": "code",
            "location": 103,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestForEach.setUp": {
            "name": "setUp",
            "location": 163,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestForEach.tearDown": {
            "name": "tearDown",
            "location": 170,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestForEach.test_simple_out": {
            "name": "test_simple_out",
            "location": 174,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestForEach.test_simple_returns": {
            "name": "test_simple_returns",
            "location": 178,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestForEach.simple_for": {
            "name": "simple_for",
            "location": 182,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestForEach.test_folded_out": {
            "name": "test_folded_out",
            "location": 194,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestForEach.test_folded_returns": {
            "name": "test_folded_returns",
            "location": 199,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestForEach.folded_for": {
            "name": "folded_for",
            "location": 203,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestForRange.setUp": {
            "name": "setUp",
            "location": 258,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestForRange.tearDown": {
            "name": "tearDown",
            "location": 263,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestForRange.test_exceptions": {
            "name": "test_exceptions",
            "location": 267,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestForRange.test_start_out": {
            "name": "test_start_out",
            "location": 292,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestForRange.test_start_return": {
            "name": "test_start_return",
            "location": 297,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestForRange.start": {
            "name": "start",
            "location": 301,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestForRange.test_stop_out": {
            "name": "test_stop_out",
            "location": 316,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestForRange.test_stop_return": {
            "name": "test_stop_return",
            "location": 321,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestForRange.stop": {
            "name": "stop",
            "location": 325,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestForRange.test_step_out": {
            "name": "test_step_out",
            "location": 340,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestForRange.test_step_return": {
            "name": "test_step_return",
            "location": 345,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestForRange.step": {
            "name": "step",
            "location": 349,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestWhile.setUp": {
            "name": "setUp",
            "location": 375,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestWhile.tearDown": {
            "name": "tearDown",
            "location": 384,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestWhile.test_generator": {
            "name": "test_generator",
            "location": 387,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestWhile.test_return": {
            "name": "test_return",
            "location": 391,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestWhile.main": {
            "name": "main",
            "location": 395,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pyksp-master/pyksp/compiler/tests/test_functions.py": {
        "TestOut.runTest": {
            "name": "runTest",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFuncArg.runTest": {
            "name": "runTest",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFuncArgs.runTest": {
            "name": "runTest",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFunc.setUp": {
            "name": "setUp",
            "location": 205,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFunc.tearDown": {
            "name": "tearDown",
            "location": 211,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFunc.method": {
            "name": "method",
            "location": 215,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "arg": []
            }
        },
        "TestFunc.test_calls": {
            "name": "test_calls",
            "location": 223,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFuncRefresh.method": {
            "name": "method",
            "location": 283,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFuncRefresh.runTest": {
            "name": "runTest",
            "location": 286,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFuncArg.runTest.foo": {
            "name": "foo",
            "location": 58,
            "return": [
                "bool"
            ],
            "arguments": {
                "x": [],
                "y": [],
                "z": [],
                "out": [],
                "bad": [],
                "bad2": []
            }
        },
        "TestFuncArgs.runTest.foo": {
            "name": "foo",
            "location": 102,
            "return": [
                "bool"
            ],
            "arguments": {
                "x": [],
                "y": [],
                "z": [],
                "arr_int": [],
                "arr_str": [],
                "loc1": [],
                "loc2": [],
                "out": [],
                "out_str": []
            }
        },
        "TestFunc.test_calls.foo": {
            "name": "foo",
            "location": 248,
            "return": [
                "None"
            ],
            "arguments": {
                "loc": []
            }
        },
        "TestFunc.test_calls.bar": {
            "name": "bar",
            "location": 258,
            "return": [
                "None"
            ],
            "arguments": {
                "var": []
            }
        },
        "TestFunc.test_calls.foobar": {
            "name": "foobar",
            "location": 272,
            "return": [
                "None"
            ],
            "arguments": {
                "arg": []
            }
        }
    },
    "pyksp-master/pyksp/compiler/tests/test_gui_system.py": {
        "TestMainWindow.runTest": {
            "name": "runTest",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestWidgetGrid.runTest": {
            "name": "runTest",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestWidget.setUp": {
            "name": "setUp",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestWidget.test_widgets": {
            "name": "test_widgets",
            "location": 95,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pyksp-master/pyksp/compiler/tests/test_native_types.py": {
        "TestNativeVars.test_kInt": {
            "name": "test_kInt",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestNativeVars.test_kReal": {
            "name": "test_kReal",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestNativeVars.test_kStr": {
            "name": "test_kStr",
            "location": 145,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestNativeVars.test_locals": {
            "name": "test_locals",
            "location": 202,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestNativeArrays.test_int": {
            "name": "test_int",
            "location": 230,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestNativeArrays.test_real": {
            "name": "test_real",
            "location": 268,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestNativeArrays.test_str": {
            "name": "test_str",
            "location": 302,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestNativeArrays.test_kVar": {
            "name": "test_kVar",
            "location": 342,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pyksp-master/pyksp/compiler/tests/test_script.py": {
        "note_cb": {
            "name": "note_cb",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "null_msg": {
            "name": "null_msg",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "TestScript.switch": {
            "name": "switch",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ids": [
                    "str",
                    "None",
                    "list[tuple[typing.Union[int,int]]]",
                    "int"
                ],
                "on_id": [
                    "int",
                    "str",
                    "None"
                ]
            }
        },
        "TestScript.runTest": {
            "name": "runTest",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestScript.runTest.foo": {
            "name": "foo",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "TestScript.runTest.foo.b_callback": {
            "name": "b_callback",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "control": []
            }
        }
    },
    "pyksp-master/pyksp/compiler/tests/test_stack.py": {
        "TestLocal.runTest": {
            "name": "runTest",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestStackFrame.runTest": {
            "name": "runTest",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestStackFrameArray.runTest": {
            "name": "runTest",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestStack.test_arrays": {
            "name": "test_arrays",
            "location": 125,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestStack.test_push": {
            "name": "test_push",
            "location": 160,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestStack.test_pop": {
            "name": "test_pop",
            "location": 198,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestStack.test_empty": {
            "name": "test_empty",
            "location": 210,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMultiStack.runTest": {
            "name": "runTest",
            "location": 243,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pyksp-master/pyksp/compiler/tests/test_ui_controls.py": {
        "oget": {
            "name": "oget",
            "location": 27,
            "return": [],
            "arguments": {}
        },
        "olines": {
            "name": "olines",
            "location": 31,
            "return": [],
            "arguments": {}
        },
        "opop": {
            "name": "opop",
            "location": 35,
            "return": [],
            "arguments": {}
        },
        "TestContolParVars.test_int": {
            "name": "test_int",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestContolParVars.test_str": {
            "name": "test_str",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestKspNativeControl.test_basic": {
            "name": "test_basic",
            "location": 140,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestKspNativeControl.test_child": {
            "name": "test_child",
            "location": 201,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestKspNativeControl.callback": {
            "name": "callback",
            "location": 441,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "control": [
                    "str",
                    "bool"
                ],
                "value": [
                    "str",
                    "bool"
                ]
            }
        },
        "TestKspNativeControl.test_generation": {
            "name": "test_generation",
            "location": 445,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pyksp-master/pyksp/compiler/tests/__init__.py": {}
}
{
    "pylow-master/setup.py": {},
    "pylow-master/wsgi.py": {},
    "pylow-master/datapylot/logger.py": {
        "log": {
            "name": "log",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "origin": [
                    "str",
                    "dict[, ]",
                    "int"
                ],
                "message": [
                    "int",
                    "None",
                    "float",
                    "str",
                    "typing.Mapping"
                ]
            }
        }
    },
    "pylow-master/datapylot/utils.py": {
        "make_unique_string_list": {
            "name": "make_unique_string_list",
            "location": 10,
            "return": [
                "list[typing.Text]"
            ],
            "arguments": {
                "content": [
                    "list[str]",
                    "dict[str, typing.Any]",
                    "str"
                ]
            }
        },
        "unique_list": {
            "name": "unique_list",
            "location": 23,
            "return": [
                "list[T]"
            ],
            "arguments": {
                "content": [
                    "list[T]"
                ]
            }
        },
        "reverse_lerp": {
            "name": "reverse_lerp",
            "location": 32,
            "return": [
                "int",
                "float"
            ],
            "arguments": {
                "point": [
                    "int"
                ],
                "pointlist": []
            }
        }
    },
    "pylow-master/datapylot/__init__.py": {},
    "pylow-master/datapylot/data/attributes.py": {
        "Attribute.__init__": {
            "name": "__init__",
            "location": 2,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "col_name": [
                    "str"
                ]
            }
        },
        "Attribute.__str__": {
            "name": "__str__",
            "location": 5,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Attribute.__repr__": {
            "name": "__repr__",
            "location": 8,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "Attribute.__eq__": {
            "name": "__eq__",
            "location": 11,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "str",
                    "typing.Type",
                    "int"
                ]
            }
        },
        "Attribute.__hash__": {
            "name": "__hash__",
            "location": 16,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Dimension.__init__": {
            "name": "__init__",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "col_name": [
                    "str",
                    "int",
                    "None"
                ]
            }
        },
        "Measure.__init__": {
            "name": "__init__",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "col_name": [
                    "str",
                    "int",
                    "None"
                ]
            }
        }
    },
    "pylow-master/datapylot/data/datasource.py": {
        "Datasource.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict[str, typing.Any]",
                    "bytes",
                    "dict[str, str]",
                    "list[]",
                    "str",
                    "dict[str, pandas.DataFrame]",
                    "None"
                ]
            }
        },
        "Datasource.columns": {
            "name": "columns",
            "location": 17,
            "return": [
                "dict[, ]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Datasource.add_column": {
            "name": "add_column",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "typing.Callable[..., T]",
                    "dict[str, typing.Any]"
                ],
                "formula": [
                    "str",
                    "typing.Callable[..., T]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "Datasource._add_noc": {
            "name": "_add_noc",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Datasource._guess_types": {
            "name": "_guess_types",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Datasource.get_variations_of": {
            "name": "get_variations_of",
            "location": 47,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": [],
                "column": [
                    "list[typing.Optional[str]]",
                    "int",
                    "None",
                    "typing.Sequence[str]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "Datasource.group_by": {
            "name": "group_by",
            "location": 56,
            "return": [],
            "arguments": {
                "self": [],
                "dimensions": [
                    "str",
                    "dict[, ]"
                ]
            }
        },
        "Datasource.from_csv": {
            "name": "from_csv",
            "location": 67,
            "return": [],
            "arguments": {
                "cls": [
                    "dict[str, tuple[typing.Union[typing.Any,typing.Any]]]",
                    "str",
                    "typing.Type",
                    "bool",
                    "dict[, ]"
                ],
                "filename": [
                    "str",
                    "None",
                    "bytes"
                ],
                "options": [
                    "None",
                    "str",
                    "bytes",
                    "float",
                    "int"
                ]
            }
        },
        "Datasource.columns.mapping": {
            "name": "mapping",
            "location": 22,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "dtype": []
            }
        }
    },
    "pylow-master/datapylot/data/vizconfig.py": {
        "VizConfig.__init__": {
            "name": "__init__",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "columns": [
                    "int",
                    "str"
                ],
                "rows": [
                    "int",
                    "str",
                    "None"
                ],
                "color": [
                    "int",
                    "str"
                ],
                "size": [
                    "int",
                    "str"
                ],
                "mark_type": [
                    "bool",
                    "str"
                ]
            }
        },
        "VizConfig.from_dict": {
            "name": "from_dict",
            "location": 42,
            "return": [
                "int",
                "typing.Counter",
                "list[int]"
            ],
            "arguments": {
                "cls": [
                    "int",
                    "bytes",
                    "None",
                    "str"
                ],
                "_dict": [
                    "dict[, ]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "VizConfig.columns": {
            "name": "columns",
            "location": 61,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "VizConfig.rows": {
            "name": "rows",
            "location": 65,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "VizConfig.dimensions": {
            "name": "dimensions",
            "location": 69,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "VizConfig.measures": {
            "name": "measures",
            "location": 73,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "VizConfig.x_separators": {
            "name": "x_separators",
            "location": 77,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "VizConfig.x_data": {
            "name": "x_data",
            "location": 83,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "VizConfig.y_separators": {
            "name": "y_separators",
            "location": 89,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "VizConfig.y_data": {
            "name": "y_data",
            "location": 95,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "VizConfig.find_attrs": {
            "name": "find_attrs",
            "location": 101,
            "return": [
                "list[typing.Text]"
            ],
            "arguments": {
                "iterable": [
                    "str",
                    "dict[str, typing.Any]"
                ],
                "attr_class": [
                    "typing.Type",
                    "str",
                    "typing.Callable[, ]",
                    "dict[str, typing.Any]",
                    "None"
                ]
            }
        },
        "VizConfig.is_valid_config": {
            "name": "is_valid_config",
            "location": 104,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "VizConfig.__repr__": {
            "name": "__repr__",
            "location": 116,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pylow-master/datapylot/data/__init__.py": {},
    "pylow-master/datapylot/data_preparation/aggregator.py": {
        "Aggregator.__init__": {
            "name": "__init__",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "datasource": [
                    "dict[, ]",
                    "str",
                    "dict[str, typing.Any]",
                    "typing.Type"
                ],
                "config": [
                    "list[str]",
                    "None",
                    "dict[, ]",
                    "dict[str, str]"
                ]
            }
        },
        "Aggregator.is_in_first_column": {
            "name": "is_in_first_column",
            "location": 35,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "plot_info": [
                    "dict[, ]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "Aggregator.is_in_first_row": {
            "name": "is_in_first_row",
            "location": 38,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "plot_info": [
                    "dict[str, typing.Any]",
                    "dict[, ]"
                ]
            }
        },
        "Aggregator.is_in_last_row": {
            "name": "is_in_last_row",
            "location": 41,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "plot_info": [
                    "typing.Sequence[]",
                    "dict[str, typing.Any]",
                    "None",
                    "list[dict[str, typing.Any]]"
                ]
            }
        },
        "Aggregator.is_in_center_top_column": {
            "name": "is_in_center_top_column",
            "location": 44,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "plot_info": [
                    "dict[, ]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "Aggregator.update_data": {
            "name": "update_data",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Aggregator._update_data_attributes": {
            "name": "_update_data_attributes",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "Aggregator._update_min_max_values": {
            "name": "_update_min_max_values",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "str",
                    "dict[str, typing.Any]",
                    "dict[, ]"
                ],
                "axis": [
                    "dict[, ]",
                    "dict[str, typing.Any]",
                    "bool"
                ]
            }
        },
        "Aggregator._calculate_ncols": {
            "name": "_calculate_ncols",
            "location": 103,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "str",
                    "list[P]"
                ]
            }
        },
        "Aggregator._get_assigned_data": {
            "name": "_get_assigned_data",
            "location": 112,
            "return": [
                "list[list[AVP]]"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict[, ]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "Aggregator._get_prepared_data": {
            "name": "_get_prepared_data",
            "location": 122,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Aggregator._get_measure_data": {
            "name": "_get_measure_data",
            "location": 141,
            "return": [],
            "arguments": {
                "self": [],
                "data": [
                    "dict[, ]",
                    "str",
                    "dict[str, typing.Any]",
                    "typing.Callable[pandas.DataFrame, pandas.DataFrame]"
                ],
                "measure": [
                    "dict[, ]",
                    "dict[str, typing.Any]",
                    "str"
                ]
            }
        }
    },
    "pylow-master/datapylot/data_preparation/avp.py": {},
    "pylow-master/datapylot/data_preparation/colorization_behaviour.py": {
        "ColorizationBehaviour.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "vizconfig": [
                    "int",
                    "typing.Callable[, ]",
                    "str",
                    "collections.abc.AsyncIterator",
                    "list[P]"
                ],
                "all_plotinfos": [
                    "int",
                    "typing.Callable[, ]",
                    "str",
                    "collections.abc.AsyncIterator",
                    "list[P]"
                ]
            }
        },
        "ColorizationBehaviour.get_correct_behaviour": {
            "name": "get_correct_behaviour",
            "location": 25,
            "return": [
                "NoColorColorizationBehaviour",
                "ExistingDimensionColorizationBehaviour",
                "NewDimensionColorizationBehaviour",
                "MeasureColorizationBehaviour"
            ],
            "arguments": {
                "vizconfig": [
                    "typing.Sequence[str]",
                    "dict[str, float]"
                ],
                "all_plotinfos": [
                    "float",
                    "bool",
                    "bytearray"
                ]
            }
        },
        "ColorizationBehaviour.get_colors": {
            "name": "get_colors",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "plot_info": [
                    "dict[str, typing.Any]",
                    "list[tuple[typing.Union[str,str]]]",
                    "bool",
                    "list[str]",
                    "typing.Sequence[str]",
                    "tuple[]"
                ]
            }
        },
        "ColorizationBehaviour.__repr__": {
            "name": "__repr__",
            "location": 59,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "NoColorColorizationBehaviour.get_colors": {
            "name": "get_colors",
            "location": 67,
            "return": [],
            "arguments": {
                "self": [],
                "plot_info": [
                    "bool",
                    "dict[str, typing.Any]",
                    "dict[str, dict[str, dict[, ]]]"
                ]
            }
        },
        "ExistingDimensionColorizationBehaviour.get_colors": {
            "name": "get_colors",
            "location": 79,
            "return": [
                "list[AVP]"
            ],
            "arguments": {
                "self": [],
                "plot_info": []
            }
        },
        "NewDimensionColorizationBehaviour.get_colors": {
            "name": "get_colors",
            "location": 106,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": [],
                "plot_info": [
                    "float",
                    "int"
                ]
            }
        },
        "NewDimensionColorizationBehaviour.get_colors_for_color_separators": {
            "name": "get_colors_for_color_separators",
            "location": 114,
            "return": [
                "typing.Generator[AVP]"
            ],
            "arguments": {
                "col_seps": [
                    "str",
                    "list[str]"
                ]
            }
        },
        "MeasureColorizationBehaviour.get_colors": {
            "name": "get_colors",
            "location": 127,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": [],
                "plot_info": [
                    "dict[str, typing.Any]",
                    "str",
                    "dict[, ]"
                ]
            }
        },
        "MeasureColorizationBehaviour._get_color_data": {
            "name": "_get_color_data",
            "location": 140,
            "return": [
                "AVP"
            ],
            "arguments": {
                "self": [],
                "curr_val": [
                    "str",
                    "int"
                ],
                "possible_vals": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "pylow-master/datapylot/data_preparation/colorizer.py": {
        "adjust_brightness": {
            "name": "adjust_brightness",
            "location": 20,
            "return": [],
            "arguments": {
                "color": [
                    "str",
                    "int"
                ],
                "amount": [
                    "str",
                    "int"
                ]
            }
        },
        "to_hex": {
            "name": "to_hex",
            "location": 30,
            "return": [
                "str"
            ],
            "arguments": {
                "r": [
                    "int",
                    "str"
                ],
                "g": [
                    "int",
                    "str"
                ],
                "b": [
                    "int",
                    "str"
                ]
            }
        },
        "to_rgb": {
            "name": "to_rgb",
            "location": 34,
            "return": [
                "tuple[int]"
            ],
            "arguments": {
                "color": []
            }
        },
        "to_valid_rgb_range": {
            "name": "to_valid_rgb_range",
            "location": 39,
            "return": [
                "int"
            ],
            "arguments": {
                "color": [
                    "dict[str, typing.Any]",
                    "int",
                    "set[]"
                ]
            }
        }
    },
    "pylow-master/datapylot/data_preparation/plotinfo.py": {
        "PlotInfo.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "x_coords": [
                    "list[int]",
                    "list[]",
                    "bool",
                    "list[float]",
                    "str",
                    "typing.Callable[, ]"
                ],
                "y_coords": [
                    "list[int]",
                    "list[]",
                    "bool",
                    "list[float]",
                    "str",
                    "typing.Callable[, ]"
                ],
                "x_seps": [
                    "int"
                ],
                "y_seps": [
                    "bool",
                    "str",
                    "dict[, ]",
                    "list[]"
                ],
                "additional_data": [
                    "bool",
                    "bytes",
                    "typing.Iterable[allennlp.data.instance.Instance]",
                    "None"
                ],
                "colorization_behaviour": [
                    "int"
                ],
                "sizing_behaviour": [
                    "int",
                    "str",
                    "float",
                    "bytes"
                ]
            }
        },
        "PlotInfo.colors": {
            "name": "colors",
            "location": 36,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PlotInfo.sizes": {
            "name": "sizes",
            "location": 40,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PlotInfo.column_names": {
            "name": "column_names",
            "location": 44,
            "return": [
                "ColumnNameCollection"
            ],
            "arguments": {
                "self": []
            }
        },
        "PlotInfo.find_attributes": {
            "name": "find_attributes",
            "location": 57,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": [],
                "attribute": [
                    "str",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "PlotInfo.variations_of": {
            "name": "variations_of",
            "location": 62,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": [],
                "attribute": [
                    "dict[str, dict[str, int]]",
                    "dict[str, float]",
                    "dict[, ]",
                    "str"
                ]
            }
        },
        "PlotInfo.is_in_plot_of": {
            "name": "is_in_plot_of",
            "location": 66,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other_x_seps": [
                    "int",
                    "str"
                ],
                "other_y_seps": [
                    "int",
                    "str"
                ]
            }
        },
        "PlotInfo.get_axis_label": {
            "name": "get_axis_label",
            "location": 69,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": [],
                "x_or_y": [
                    "str",
                    "typing.Any",
                    "None"
                ]
            }
        },
        "PlotInfo.get_coord_values": {
            "name": "get_coord_values",
            "location": 78,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": [],
                "x_or_y": [
                    "int",
                    "tuple[]"
                ]
            }
        },
        "PlotInfo.get_example_avp_for_axis": {
            "name": "get_example_avp_for_axis",
            "location": 89,
            "return": [
                "AVP"
            ],
            "arguments": {
                "self": [],
                "x_or_y": [
                    "str",
                    "dict[, ]"
                ]
            }
        },
        "PlotInfo.get_viz_data": {
            "name": "get_viz_data",
            "location": 100,
            "return": [
                "dict[, list[]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "PlotInfo._check_data": {
            "name": "_check_data",
            "location": 115,
            "return": [
                "None"
            ],
            "arguments": {
                "data": []
            }
        },
        "PlotInfo.__repr__": {
            "name": "__repr__",
            "location": 121,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pylow-master/datapylot/data_preparation/plotinfobuilder.py": {
        "PlotInfoBuilder.create_all_plotinfos": {
            "name": "create_all_plotinfos",
            "location": 14,
            "return": [
                "list[]"
            ],
            "arguments": {
                "cls": [],
                "data": [],
                "config": [
                    "dict[str, typing.Any]",
                    "dict[, ]",
                    "None"
                ]
            }
        },
        "PlotInfoBuilder._make_plot_info": {
            "name": "_make_plot_info",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "typing.Type",
                    "list[dict[, ]]",
                    "str"
                ],
                "plot_data": [],
                "config": [
                    "dict[, ]"
                ],
                "plotinfo_cache": []
            }
        }
    },
    "pylow-master/datapylot/data_preparation/sizing_behaviour.py": {
        "SizingBehaviour.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "vizconfig": [
                    "int",
                    "typing.Callable[, ]",
                    "str",
                    "collections.abc.AsyncIterator",
                    "list[P]"
                ],
                "all_plotinfos": [
                    "int",
                    "typing.Callable[, ]",
                    "str",
                    "collections.abc.AsyncIterator",
                    "list[P]"
                ]
            }
        },
        "SizingBehaviour.get_correct_behaviour": {
            "name": "get_correct_behaviour",
            "location": 26,
            "return": [
                "NoColorSizingBehaviour",
                "DimensionSizingBehaviour",
                "MeasureSizingBehaviour"
            ],
            "arguments": {
                "vizconfig": [
                    "int",
                    "list[]"
                ],
                "all_plotinfos": [
                    "bytes",
                    "str",
                    "int",
                    "set[str]"
                ]
            }
        },
        "SizingBehaviour.get_sizes": {
            "name": "get_sizes",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "plot_info": [
                    "dict[str, typing.Any]",
                    "tuple[]",
                    "list[tuple[typing.Union[str,str]]]"
                ]
            }
        },
        "SizingBehaviour.__repr__": {
            "name": "__repr__",
            "location": 56,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "NoColorSizingBehaviour.get_sizes": {
            "name": "get_sizes",
            "location": 64,
            "return": [],
            "arguments": {
                "self": [],
                "plot_info": [
                    "dict[str, typing.Any]",
                    "dict[, ]",
                    "bool",
                    "str",
                    "dict[str, dict[str, dict[, ]]]"
                ]
            }
        },
        "DimensionSizingBehaviour.get_sizes": {
            "name": "get_sizes",
            "location": 76,
            "return": [
                "list[AVP]"
            ],
            "arguments": {
                "self": [],
                "plot_info": []
            }
        },
        "DimensionSizingBehaviour._get_size_for_dimension": {
            "name": "_get_size_for_dimension",
            "location": 103,
            "return": [
                "bool",
                "float"
            ],
            "arguments": {
                "value": [],
                "all_values": [],
                "base_size": [
                    "bool"
                ]
            }
        },
        "MeasureSizingBehaviour.get_sizes": {
            "name": "get_sizes",
            "location": 120,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": [],
                "plot_info": [
                    "str",
                    "dict[str, typing.Any]",
                    "typing.Mapping"
                ]
            }
        },
        "MeasureSizingBehaviour._get_size_data": {
            "name": "_get_size_data",
            "location": 133,
            "return": [
                "AVP"
            ],
            "arguments": {
                "self": [],
                "curr_val": [
                    "str",
                    "int",
                    "dict[str, typing.Any]"
                ],
                "possible_vals": [
                    "str",
                    "int",
                    "dict[str, typing.Any]"
                ]
            }
        }
    },
    "pylow-master/datapylot/data_preparation/__init__.py": {},
    "pylow-master/datapylot/extensions/flexline.py": {},
    "pylow-master/datapylot/extensions/__init__.py": {},
    "pylow-master/datapylot/plotting/bokeh_plotter.py": {
        "Plotter.__init__": {
            "name": "__init__",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "datasource": [
                    "dict[, ]",
                    "str",
                    "list[]"
                ],
                "config": [
                    "dict[, ]",
                    "str",
                    "list[]"
                ]
            }
        },
        "Plotter.create_viz": {
            "name": "create_viz",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Plotter._make_plot": {
            "name": "_make_plot",
            "location": 38,
            "return": [
                "Plot"
            ],
            "arguments": {
                "self": [],
                "plot_info": []
            }
        },
        "Plotter._get_plot_options": {
            "name": "_get_plot_options",
            "location": 66,
            "return": [
                "dict[typing.Text, typing.Union[int,None,Title]]"
            ],
            "arguments": {
                "self": [],
                "plot_info": [
                    "int",
                    "None"
                ],
                "x_range": [
                    "int",
                    "None"
                ],
                "y_range": [
                    "int",
                    "None"
                ]
            }
        },
        "Plotter._add_labels": {
            "name": "_add_labels",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "plot": [],
                "plot_info": [],
                "options": [
                    "str"
                ]
            }
        },
        "Plotter._add_axes_and_grids": {
            "name": "_add_axes_and_grids",
            "location": 112,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "plot": [],
                "plot_info": [
                    "dict[, ]"
                ]
            }
        },
        "Plotter._get_range": {
            "name": "_get_range",
            "location": 135,
            "return": [
                "FactorRange",
                "Range1d"
            ],
            "arguments": {
                "self": [],
                "plot_info": [
                    "dict[, ]",
                    "int",
                    "typing.Mapping"
                ],
                "axis": [
                    "dict[, ]",
                    "int",
                    "typing.Mapping"
                ]
            }
        },
        "Plotter._get_axis": {
            "name": "_get_axis",
            "location": 152,
            "return": [
                "tuple[typing.Union[BasicTicker,CategoricalTicker,LinearAxis,CategoricalAxis]]"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "str",
                    "dict[, ]",
                    "None"
                ],
                "axis": [
                    "str",
                    "dict[, ]",
                    "None"
                ]
            }
        },
        "Plotter.get_output": {
            "name": "get_output",
            "location": 174,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "pylow-master/datapylot/plotting/glyph_factory.py": {
        "create_glyph": {
            "name": "create_glyph",
            "location": 8,
            "return": [],
            "arguments": {
                "mark_type": [
                    "str",
                    "None",
                    "set[accounts.models.AccountPermissionType]"
                ],
                "col_names": [
                    "str",
                    "None",
                    "set[accounts.models.AccountPermissionType]"
                ]
            }
        },
        "_make_line": {
            "name": "_make_line",
            "location": 18,
            "return": [
                "FlexLine"
            ],
            "arguments": {
                "col_names": [
                    "str"
                ]
            }
        },
        "_make_bar": {
            "name": "_make_bar",
            "location": 27,
            "return": [
                "VBar"
            ],
            "arguments": {
                "col_names": [
                    "str",
                    "float"
                ]
            }
        },
        "_make_circle": {
            "name": "_make_circle",
            "location": 37,
            "return": [
                "Circle"
            ],
            "arguments": {
                "col_names": [
                    "str"
                ]
            }
        }
    },
    "pylow-master/datapylot/plotting/tooltip_factory.py": {
        "generate_tooltip": {
            "name": "generate_tooltip",
            "location": 8,
            "return": [
                "HoverTool"
            ],
            "arguments": {
                "renderer": [
                    "str"
                ],
                "plot_info": [
                    "dict[, ]"
                ]
            }
        }
    },
    "pylow-master/datapylot/plotting/__init__.py": {},
    "pylow-master/datapylot/web/plotserver.py": {
        "get_cached_datasource": {
            "name": "get_cached_datasource",
            "location": 18,
            "return": [],
            "arguments": {
                "ds_name": [
                    "str"
                ]
            }
        },
        "get_datasource_attributes": {
            "name": "get_datasource_attributes",
            "location": 23,
            "return": [],
            "arguments": {
                "ds_name": [
                    "str",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "make_conf_from_form": {
            "name": "make_conf_from_form",
            "location": 27,
            "return": [],
            "arguments": {
                "data": []
            }
        },
        "root": {
            "name": "root",
            "location": 52,
            "return": [],
            "arguments": {}
        }
    },
    "pylow-master/test/config_builder.py": {
        "get_configs": {
            "name": "get_configs",
            "location": 19,
            "return": [
                "list[]"
            ],
            "arguments": {
                "filtering": [
                    "None",
                    "bool",
                    "typing.Iterable[dict[, ]]"
                ]
            }
        },
        "_build_configs": {
            "name": "_build_configs",
            "location": 30,
            "return": [
                "typing.Generator[tuple[dict[typing.Text, ]]]"
            ],
            "arguments": {}
        },
        "_determine_glyphs_in_plot_amount": {
            "name": "_determine_glyphs_in_plot_amount",
            "location": 42,
            "return": [],
            "arguments": {
                "vizconfig": [
                    "int",
                    "list[]"
                ]
            }
        },
        "_determine_plot_amount": {
            "name": "_determine_plot_amount",
            "location": 61,
            "return": [],
            "arguments": {
                "vizconfig": [
                    "tuple[]",
                    "tuple[typing.Union[str,str,str]]"
                ]
            }
        },
        "_build_config_dicts": {
            "name": "_build_config_dicts",
            "location": 74,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {}
        },
        "_get_possible_permutations": {
            "name": "_get_possible_permutations",
            "location": 89,
            "return": [
                "tuple[typing.Union[list[typing.Text],list[dict[str, typing.Any]]]]"
            ],
            "arguments": {}
        },
        "_filter_duplicates": {
            "name": "_filter_duplicates",
            "location": 109,
            "return": [
                "typing.Generator[typing.Union[T,typing.Text]]"
            ],
            "arguments": {
                "confs": [
                    "list[T]",
                    "str",
                    "list[]"
                ]
            }
        },
        "_filter_invalids": {
            "name": "_filter_invalids",
            "location": 119,
            "return": [
                "typing.Generator[typing.Union[T,typing.Text]]"
            ],
            "arguments": {
                "confs": [
                    "list[T]",
                    "str",
                    "list[]"
                ]
            }
        },
        "get_configs.filter_func": {
            "name": "filter_func",
            "location": 22,
            "return": [
                "bool"
            ],
            "arguments": {
                "vc": []
            }
        }
    },
    "pylow-master/test/testutils.py": {
        "save_plot_temp": {
            "name": "save_plot_temp",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "plot": [
                    "str"
                ],
                "name": [
                    "str"
                ]
            }
        },
        "get_plot_temp": {
            "name": "get_plot_temp",
            "location": 20,
            "return": [],
            "arguments": {
                "name": [
                    "str"
                ]
            }
        }
    },
    "pylow-master/test/test_bokeh_multiglyph.py": {
        "test_flexline": {
            "name": "test_flexline",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "pylow-master/test/test_colorization_behaviour.py": {
        "test_colorization_behaviour_selection": {
            "name": "test_colorization_behaviour_selection",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "pylow-master/test/test_datasource.py": {
        "test_datasource_groupby": {
            "name": "test_datasource_groupby",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_datasource_from_file_types": {
            "name": "test_datasource_from_file_types",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_datasource_from_file_calcs_1": {
            "name": "test_datasource_from_file_calcs_1",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_datasource_from_file_calcs_2": {
            "name": "test_datasource_from_file_calcs_2",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_datasource_from_file_calcs_3": {
            "name": "test_datasource_from_file_calcs_3",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_datasource_data_preparation": {
            "name": "test_datasource_data_preparation",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "pylow-master/test/test_data_preparation.py": {
        "test_color_lightning": {
            "name": "test_color_lightning",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_output_coloring_measures": {
            "name": "test_output_coloring_measures",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_output_coloring_dimensions": {
            "name": "test_output_coloring_dimensions",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_output_ordering": {
            "name": "test_output_ordering",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "pylow-master/test/test_flexline.py": {
        "test_flexline": {
            "name": "test_flexline",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "pylow-master/test/test_vizbuilder.py": {
        "test_aggregator": {
            "name": "test_aggregator",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "viz_config": [],
                "infos": []
            }
        },
        "test_viz": {
            "name": "test_viz",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "viz_config": [
                    "dict[str, typing.Any]"
                ],
                "infos": [
                    "typing.IO",
                    "dict[, ]"
                ]
            }
        },
        "check_html": {
            "name": "check_html",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "viz_config": [
                    "str",
                    "typing.Mapping"
                ],
                "infos": [
                    "list[dict[, ]]",
                    "list[]"
                ]
            }
        },
        "extract_plot_structure": {
            "name": "extract_plot_structure",
            "location": 76,
            "return": [],
            "arguments": {
                "file_name": [
                    "str"
                ]
            }
        }
    },
    "pylow-master/test/__init__.py": {}
}
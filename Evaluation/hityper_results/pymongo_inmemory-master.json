{
    "pymongo_inmemory-master/examples/able_to_connect.py": {},
    "pymongo_inmemory-master/examples/several_clients.py": {},
    "pymongo_inmemory-master/pymongo_inmemory/mongod.py": {
        "cleanup": {
            "name": "cleanup",
            "location": 25,
            "return": [],
            "arguments": {}
        },
        "clean_before_kill": {
            "name": "clean_before_kill",
            "location": 33,
            "return": [],
            "arguments": {
                "signum": [],
                "stack": []
            }
        },
        "_last_line": {
            "name": "_last_line",
            "location": 39,
            "return": [],
            "arguments": {
                "input": [],
                "as_a": []
            }
        },
        "MongodConfig.__init__": {
            "name": "__init__",
            "location": 63,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MongodConfig.port": {
            "name": "port",
            "location": 68,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Mongod.__init__": {
            "name": "__init__",
            "location": 85,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Mongod.__enter__": {
            "name": "__enter__",
            "location": 93,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Mongod.__exit__": {
            "name": "__exit__",
            "location": 97,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Mongod.start": {
            "name": "start",
            "location": 100,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Mongod.stop": {
            "name": "stop",
            "location": 132,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Mongod.connection_string": {
            "name": "connection_string",
            "location": 141,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Mongod.is_locked": {
            "name": "is_locked",
            "location": 151,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Mongod.is_healthy": {
            "name": "is_healthy",
            "location": 155,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Mongod.mongodump": {
            "name": "mongodump",
            "location": 176,
            "return": [],
            "arguments": {
                "self": [],
                "database": [],
                "collection": []
            }
        },
        "Mongod.logs": {
            "name": "logs",
            "location": 188,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "pymongo_inmemory-master/pymongo_inmemory/_pim.py": {
        "MongoClient.__init__": {
            "name": "__init__",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "host": [
                    "None",
                    "int",
                    "dict[str, typing.Any]",
                    "str"
                ],
                "port": [
                    "None",
                    "int",
                    "dict[str, typing.Any]",
                    "str"
                ]
            }
        },
        "MongoClient.close": {
            "name": "close",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MongoClient.pim_mongodump": {
            "name": "pim_mongodump",
            "location": 16,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "pymongo_inmemory-master/pymongo_inmemory/_utils.py": {
        "find_open_port": {
            "name": "find_open_port",
            "location": 13,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "sq": [
                    "str"
                ]
            }
        },
        "_check_environment_vars": {
            "name": "_check_environment_vars",
            "location": 23,
            "return": [],
            "arguments": {
                "option": [
                    "list[dict[, ]]",
                    "dict[str, set[str]]",
                    "typing.Type",
                    "dict[, ]",
                    "None"
                ],
                "fallback": [
                    "None",
                    "list[dict[, ]]",
                    "dict[str, set[str]]",
                    "typing.Type",
                    "dict[, ]"
                ]
            }
        },
        "_check_cfg": {
            "name": "_check_cfg",
            "location": 28,
            "return": [],
            "arguments": {
                "option": [
                    "str",
                    "dict[, ]"
                ],
                "filename": [
                    "str",
                    "bool"
                ],
                "fallback": [
                    "None",
                    "str",
                    "dict[, ]"
                ]
            }
        },
        "make_semver": {
            "name": "make_semver",
            "location": 40,
            "return": [
                "SemVer"
            ],
            "arguments": {
                "version": [
                    "dict[, ]",
                    "str",
                    "typing.Any",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "conf": {
            "name": "conf",
            "location": 59,
            "return": [
                "str",
                "list[]",
                "dict[str, dict[str, typing.Any]]"
            ],
            "arguments": {
                "option": [
                    "str",
                    "Exception",
                    "list[str]",
                    "bool"
                ],
                "fallback": [
                    "None",
                    "str",
                    "Exception",
                    "list[str]",
                    "dict[str, typing.Any]"
                ],
                "optional": [
                    "bool"
                ]
            }
        }
    },
    "pymongo_inmemory-master/pymongo_inmemory/__init__.py": {},
    "pymongo_inmemory-master/pymongo_inmemory/downloader/check_urls.py": {
        "split": {
            "name": "split",
            "location": 16,
            "return": [
                "tuple[typing.Union[int,list[int],float,typing.Type,str]]"
            ],
            "arguments": {
                "url": [
                    "str"
                ]
            }
        },
        "check_url": {
            "name": "check_url",
            "location": 24,
            "return": [
                "str",
                "float",
                "int",
                "dict[, ]",
                "list[dict[, ]]"
            ],
            "arguments": {
                "expanded": [
                    "str",
                    "float",
                    "int",
                    "dict[, ]",
                    "list[dict[, ]]"
                ],
                "progress_bar": []
            }
        },
        "failed_url_check": {
            "name": "failed_url_check",
            "location": 57,
            "return": [],
            "arguments": {
                "x": []
            }
        }
    },
    "pymongo_inmemory-master/pymongo_inmemory/downloader/_patterns.py": {},
    "pymongo_inmemory-master/pymongo_inmemory/downloader/_urls.py": {
        "best_url": {
            "name": "best_url",
            "location": 26,
            "return": [],
            "arguments": {
                "os_name": [
                    "str",
                    "bool",
                    "dict[str, str]",
                    "list[str]",
                    "typing.Callable[, ]",
                    "list[]"
                ],
                "version": [
                    "None",
                    "bool",
                    "str"
                ],
                "os_ver": [
                    "None",
                    "str",
                    "bool",
                    "typing.Callable[, ]"
                ],
                "url_tree": [
                    "None",
                    "dict[, ]",
                    "bool",
                    "str",
                    "typing.Callable[[], typing.Any]",
                    "tuple[typing.Union[str,typing.Any]]"
                ]
            }
        },
        "expand_url_tree": {
            "name": "expand_url_tree",
            "location": 71,
            "return": [
                "typing.Generator[ExpandedURL]"
            ],
            "arguments": {
                "tree": [
                    "dict[, ]",
                    "dict[str, str]"
                ]
            }
        }
    },
    "pymongo_inmemory-master/pymongo_inmemory/downloader/__init__.py": {
        "_mkdir_ifnot_exist": {
            "name": "_mkdir_ifnot_exist",
            "location": 34,
            "return": [],
            "arguments": {}
        },
        "_download_folder": {
            "name": "_download_folder",
            "location": 45,
            "return": [],
            "arguments": {}
        },
        "_extract_folder": {
            "name": "_extract_folder",
            "location": 49,
            "return": [],
            "arguments": {}
        },
        "_dl_reporter": {
            "name": "_dl_reporter",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "blocknum": [
                    "int",
                    "float"
                ],
                "block_size": [
                    "int",
                    "float"
                ],
                "total_size": [
                    "int"
                ]
            }
        },
        "_download_file": {
            "name": "_download_file",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "dl_url": [
                    "str"
                ],
                "destination_file": [
                    "str"
                ]
            }
        },
        "_extract": {
            "name": "_extract",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {
                "archive_file": [
                    "str",
                    "bool"
                ]
            }
        },
        "_extract_tar": {
            "name": "_extract_tar",
            "location": 105,
            "return": [
                "None"
            ],
            "arguments": {
                "tar_file": [
                    "str",
                    "bytes",
                    "set[str]"
                ],
                "extract_folder": [
                    "bool",
                    "typing.Any",
                    "None",
                    "str"
                ]
            }
        },
        "_extract_zip": {
            "name": "_extract_zip",
            "location": 115,
            "return": [
                "None"
            ],
            "arguments": {
                "zip_file": [
                    "str",
                    "None",
                    "typing.IO"
                ],
                "extract_folder": [
                    "str",
                    "None"
                ]
            }
        },
        "_collect_archive_name": {
            "name": "_collect_archive_name",
            "location": 125,
            "return": [
                "str"
            ],
            "arguments": {
                "url": [
                    "str"
                ]
            }
        },
        "_get_mongod": {
            "name": "_get_mongod",
            "location": 129,
            "return": [],
            "arguments": {}
        },
        "_has_mongod": {
            "name": "_has_mongod",
            "location": 142,
            "return": [],
            "arguments": {}
        },
        "download": {
            "name": "download",
            "location": 146,
            "return": [],
            "arguments": {
                "os_name": [
                    "None",
                    "str",
                    "list[str]"
                ],
                "version": [
                    "None",
                    "str",
                    "typing.Sequence[str]",
                    "bool"
                ],
                "os_ver": [
                    "None",
                    "str",
                    "typing.Sequence[str]",
                    "bool"
                ],
                "ignore_cache": [
                    "bool"
                ]
            }
        }
    },
    "pymongo_inmemory-master/pymongo_inmemory/downloader/__main__.py": {},
    "pymongo_inmemory-master/tests/functional/test_downloader.py": {
        "make_mongo_payload": {
            "name": "make_mongo_payload",
            "location": 12,
            "return": [],
            "arguments": {}
        },
        "urlretrieve_patcher": {
            "name": "urlretrieve_patcher",
            "location": 26,
            "return": [],
            "arguments": {}
        },
        "test_downloader": {
            "name": "test_downloader",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "make_mongo_payload": [
                    "str",
                    "float"
                ],
                "urlretrieve_patcher": [
                    "str",
                    "float"
                ],
                "monkeypatch": [
                    "str"
                ],
                "tmpdir": []
            }
        },
        "make_mongo_payload._make_payload": {
            "name": "_make_payload",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "_path": []
            }
        },
        "urlretrieve_patcher.patcher": {
            "name": "patcher",
            "location": 27,
            "return": [],
            "arguments": {
                "tarpath": []
            }
        },
        "urlretrieve_patcher.patcher._urlretrieve_patch": {
            "name": "_urlretrieve_patch",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "pymongo_inmemory-master/tests/functional/test_open_ports_socket.py": {
        "server": {
            "name": "server",
            "location": 9,
            "return": [],
            "arguments": {
                "request": [
                    "typing.Callable[, ]"
                ]
            }
        },
        "test_find_open_port": {
            "name": "test_find_open_port",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "server": [
                    "str"
                ]
            }
        },
        "server.fin": {
            "name": "fin",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "pymongo_inmemory-master/tests/unit/test_async.py": {
        "test_init_module_in_loop": {
            "name": "test_init_module_in_loop",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "pymongo_inmemory-master/tests/unit/test_downloader_functions.py": {
        "test_env_folders_overwrite_default_downloadfolder": {
            "name": "test_env_folders_overwrite_default_downloadfolder",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": []
            }
        },
        "test_env_folders_overwrite_default_extractfolder": {
            "name": "test_env_folders_overwrite_default_extractfolder",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": []
            }
        },
        "test_default_dl_folder": {
            "name": "test_default_dl_folder",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": [
                    "dict[str, typing.Any]",
                    "None",
                    "bool"
                ],
                "tmpdir": []
            }
        },
        "test_default_extract_folder": {
            "name": "test_default_extract_folder",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": [
                    "dict[str, typing.Any]",
                    "None",
                    "bool"
                ],
                "tmpdir": []
            }
        },
        "test_make_folder": {
            "name": "test_make_folder",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": [
                    "str",
                    "typing.Mapping"
                ],
                "tmpdir": [
                    "str"
                ]
            }
        },
        "test_fails_if_os_unknown": {
            "name": "test_fails_if_os_unknown",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": []
            }
        },
        "test_fails_if_os_unknown.system": {
            "name": "system",
            "location": 50,
            "return": [
                "typing.Text"
            ],
            "arguments": {}
        },
        "test_fails_if_os_unknown.conf": {
            "name": "conf",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "pymongo_inmemory-master/tests/unit/test_urls.py": {
        "test_best_url": {
            "name": "test_best_url",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "pymongo_inmemory-master/tests/unit/test_utils.py": {
        "test__last_line": {
            "name": "test__last_line",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_find_open_port": {
            "name": "test_find_open_port",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": []
            }
        },
        "test_environment_var_option": {
            "name": "test_environment_var_option",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": []
            }
        },
        "test_make_semver": {
            "name": "test_make_semver",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_find_open_port.mock_socket.__init__": {
            "name": "__init__",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "test_find_open_port.mock_socket.connect_ex": {
            "name": "connect_ex",
            "location": 24,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "obj": []
            }
        },
        "test_find_open_port.mock_socket.__enter__": {
            "name": "__enter__",
            "location": 29,
            "return": [
                "mock_socket"
            ],
            "arguments": {
                "self": []
            }
        },
        "test_find_open_port.mock_socket.__exit__": {
            "name": "__exit__",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    }
}
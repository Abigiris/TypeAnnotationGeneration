{
    "pynn-master/mnist.py": {},
    "pynn-master/xor.py": {},
    "pynn-master/pynn/data.py": {
        "DataIterator.__call__": {
            "name": "__call__",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "inputs": [
                    "dict[, ]"
                ],
                "target": [
                    "dict[, ]"
                ]
            }
        },
        "BatchIterator.__init__": {
            "name": "__init__",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "batch_size": [
                    "int"
                ],
                "shuffle": [
                    "bool"
                ]
            }
        },
        "BatchIterator.__call__": {
            "name": "__call__",
            "location": 37,
            "return": [
                "typing.Generator[Batch]"
            ],
            "arguments": {
                "self": [],
                "inputs": [],
                "targets": [
                    "list[]",
                    "list[int]",
                    "dict[, ]",
                    "dict[str, typing.Any]"
                ]
            }
        }
    },
    "pynn-master/pynn/layer.py": {
        "Layer.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Layer.forward": {
            "name": "forward",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "inputs": [
                    "int",
                    "str",
                    "typing.Iterable[C]"
                ]
            }
        },
        "Layer.backward": {
            "name": "backward",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "grad": [
                    "int",
                    "str",
                    "typing.Iterable[C]"
                ]
            }
        },
        "Linear.__init__": {
            "name": "__init__",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "input_size": [
                    "int",
                    "list[int]"
                ],
                "output_size": [
                    "int",
                    "list[int]",
                    "float"
                ]
            }
        },
        "Linear.forward": {
            "name": "forward",
            "location": 56,
            "return": [],
            "arguments": {
                "self": [],
                "inputs": [
                    "str",
                    "None",
                    "list[]",
                    "int",
                    "list[str]"
                ]
            }
        },
        "Linear.backward": {
            "name": "backward",
            "location": 66,
            "return": [],
            "arguments": {
                "self": [],
                "grad": [
                    "int",
                    "list[float]"
                ]
            }
        },
        "Linear.__repr__": {
            "name": "__repr__",
            "location": 76,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "Activation.__init__": {
            "name": "__init__",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "f": [
                    "typing.Callable[[], bool]",
                    "bool",
                    "list[tuple[typing.Union[str,str,str,str]]]",
                    "list[str]"
                ],
                "df": [
                    "str",
                    "int",
                    "float"
                ]
            }
        },
        "Activation.forward": {
            "name": "forward",
            "location": 98,
            "return": [],
            "arguments": {
                "self": [],
                "inputs": [
                    "float",
                    "list[T]",
                    "list[str]"
                ]
            }
        },
        "Activation.backward": {
            "name": "backward",
            "location": 104,
            "return": [],
            "arguments": {
                "self": [],
                "grad": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ]
            }
        },
        "Activation.__repr__": {
            "name": "__repr__",
            "location": 107,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "Tanh.__init__": {
            "name": "__init__",
            "location": 120,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SoftPlus.__init__": {
            "name": "__init__",
            "location": 134,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ReLU.__init__": {
            "name": "__init__",
            "location": 146,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pynn-master/pynn/loss.py": {
        "Loss.loss": {
            "name": "loss",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "predicted": [
                    "int",
                    "str",
                    "typing.Iterable['Context']"
                ],
                "target": [
                    "int",
                    "str",
                    "typing.Iterable['Context']"
                ]
            }
        },
        "Loss.grad": {
            "name": "grad",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "predicted": [
                    "int",
                    "str",
                    "typing.Iterable['Context']"
                ],
                "target": [
                    "int",
                    "str",
                    "typing.Iterable['Context']"
                ]
            }
        },
        "MSE.loss": {
            "name": "loss",
            "location": 45,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "predicted": [
                    "int"
                ],
                "target": [
                    "int"
                ]
            }
        },
        "MSE.grad": {
            "name": "grad",
            "location": 50,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "predicted": [
                    "int"
                ],
                "target": [
                    "int"
                ]
            }
        }
    },
    "pynn-master/pynn/nn.py": {
        "NeuralNetwork.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "layers": [
                    "int",
                    "float"
                ]
            }
        },
        "NeuralNetwork.forward": {
            "name": "forward",
            "location": 18,
            "return": [
                "int",
                "typing.Callable[, ]",
                "str"
            ],
            "arguments": {
                "self": [],
                "inputs": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ]
            }
        },
        "NeuralNetwork.__call__": {
            "name": "__call__",
            "location": 27,
            "return": [],
            "arguments": {
                "self": [],
                "inputs": [
                    "typing.Callable[, ]",
                    "int",
                    "float"
                ]
            }
        },
        "NeuralNetwork.backward": {
            "name": "backward",
            "location": 33,
            "return": [
                "int",
                "typing.Callable[, ]",
                "str"
            ],
            "arguments": {
                "self": [],
                "grad": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ]
            }
        },
        "NeuralNetwork.params_and_grads": {
            "name": "params_and_grads",
            "location": 42,
            "return": [
                "typing.Generator[tuple[]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "NeuralNetwork.__repr__": {
            "name": "__repr__",
            "location": 49,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pynn-master/pynn/optim.py": {
        "Optimizer.step": {
            "name": "step",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "nn": [
                    "int",
                    "str",
                    "typing.Iterable['Context']"
                ]
            }
        },
        "SGD.__init__": {
            "name": "__init__",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "lr": [
                    "float"
                ]
            }
        },
        "SGD.step": {
            "name": "step",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "nn": []
            }
        }
    },
    "pynn-master/pynn/tensor.py": {},
    "pynn-master/pynn/train.py": {
        "train": {
            "name": "train",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "nn": [
                    "tuple[typing.Union[float,float,float,float]]",
                    "float",
                    "bytes",
                    "list[typing.Any]",
                    "None"
                ],
                "inputs": [
                    "int",
                    "None",
                    "str"
                ],
                "targets": [
                    "int",
                    "None",
                    "typing.Collection"
                ],
                "num_epochs": [
                    "int"
                ],
                "iterator": [
                    "BatchIterator"
                ],
                "loss": [
                    "MSE"
                ],
                "optimizer": [
                    "SGD"
                ]
            }
        }
    },
    "pynn-master/pynn/utils.py": {
        "size": {
            "name": "size",
            "location": 6,
            "return": [],
            "arguments": {}
        },
        "tanh": {
            "name": "tanh",
            "location": 19,
            "return": [],
            "arguments": {
                "x": [
                    "int",
                    "float",
                    "str"
                ]
            }
        },
        "tanh_derivative": {
            "name": "tanh_derivative",
            "location": 23,
            "return": [
                "float",
                "int"
            ],
            "arguments": {
                "x": [
                    "int",
                    "float",
                    "str"
                ]
            }
        },
        "softplus": {
            "name": "softplus",
            "location": 27,
            "return": [],
            "arguments": {
                "x": [
                    "float",
                    "typing.Iterable[T]",
                    "int"
                ]
            }
        },
        "sigmoid": {
            "name": "sigmoid",
            "location": 31,
            "return": [
                "float"
            ],
            "arguments": {
                "x": [
                    "int",
                    "float"
                ]
            }
        },
        "relu": {
            "name": "relu",
            "location": 35,
            "return": [
                "float",
                "int"
            ],
            "arguments": {
                "x": [
                    "int",
                    "float"
                ]
            }
        },
        "relu_derivative": {
            "name": "relu_derivative",
            "location": 39,
            "return": [
                "float"
            ],
            "arguments": {
                "x": [
                    "bool",
                    "float"
                ]
            }
        }
    },
    "pynn-master/pynn/__init__.py": {},
    "pynn-master/test/layer_test.py": {
        "test_linear_forward_1d": {
            "name": "test_linear_forward_1d",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_linear_forward": {
            "name": "test_linear_forward",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_linear_backward_1d": {
            "name": "test_linear_backward_1d",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_linear_backward": {
            "name": "test_linear_backward",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_linear_repr": {
            "name": "test_linear_repr",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_activation_forward": {
            "name": "test_activation_forward",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_activation_backward": {
            "name": "test_activation_backward",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_tanh_forward": {
            "name": "test_tanh_forward",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_tanh_backward": {
            "name": "test_tanh_backward",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_tanh_repr": {
            "name": "test_tanh_repr",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_relu_forward": {
            "name": "test_relu_forward",
            "location": 102,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_relu_backward": {
            "name": "test_relu_backward",
            "location": 111,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_relu_repr": {
            "name": "test_relu_repr",
            "location": 124,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "pynn-master/test/loss_test.py": {
        "test_mse_loss": {
            "name": "test_mse_loss",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "n": [
                    "int"
                ]
            }
        },
        "test_mse_grad": {
            "name": "test_mse_grad",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "n": [
                    "int"
                ]
            }
        }
    },
    "pynn-master/test/nn_test.py": {
        "test_feed_forward_and": {
            "name": "test_feed_forward_and",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_feed_forward_or": {
            "name": "test_feed_forward_or",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_feed_forward_not_callable": {
            "name": "test_feed_forward_not_callable",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_backpropagation_linear_tanh": {
            "name": "test_backpropagation_linear_tanh",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_backpropagation_tanh_tanh": {
            "name": "test_backpropagation_tanh_tanh",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_backpropagation_tanh_tanh_grad2": {
            "name": "test_backpropagation_tanh_tanh_grad2",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_repr": {
            "name": "test_repr",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_linear_tanh_linear": {
            "name": "test_linear_tanh_linear",
            "location": 108,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_linear_relu_linear": {
            "name": "test_linear_relu_linear",
            "location": 356,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "pynn-master/test/optim_test.py": {
        "test_SGD_step": {
            "name": "test_SGD_step",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "pynn-master/test/utils_test.py": {
        "test_size_no_args": {
            "name": "test_size_no_args",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_size_error": {
            "name": "test_size_error",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_size_one": {
            "name": "test_size_one",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "n": [
                    "int"
                ]
            }
        },
        "test_size": {
            "name": "test_size",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "n": [
                    "int"
                ]
            }
        },
        "test_tanh": {
            "name": "test_tanh",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test__tanh_derivative": {
            "name": "test__tanh_derivative",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_softplus": {
            "name": "test_softplus",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_sigmoid": {
            "name": "test_sigmoid",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_relu": {
            "name": "test_relu",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_relu_derivative": {
            "name": "test_relu_derivative",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "pynn-master/test/__init__.py": {}
}
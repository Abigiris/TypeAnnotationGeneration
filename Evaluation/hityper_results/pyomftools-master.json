{
    "pyomftools-master/omftools/__init__.py": {},
    "pyomftools-master/omftools/cli/af_compile.py": {},
    "pyomftools-master/omftools/cli/af_decompile.py": {},
    "pyomftools-master/omftools/cli/bk_compile.py": {},
    "pyomftools-master/omftools/cli/bk_decompile.py": {},
    "pyomftools-master/omftools/cli/enumize_translation.py": {
        "txt": {
            "name": "txt",
            "location": 9,
            "return": [],
            "arguments": {
                "text": [
                    "str"
                ]
            }
        },
        "generate_enum": {
            "name": "generate_enum",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "in_file": [
                    "str",
                    "list[str]"
                ],
                "out_file": [
                    "str"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "pyomftools-master/omftools/cli/generate_html.py": {
        "generate_language": {
            "name": "generate_language",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "file": [
                    "str",
                    "list[str]"
                ],
                "files": [
                    "str",
                    "list[str]"
                ],
                "output_dir": [
                    "str"
                ]
            }
        },
        "generate_sounds": {
            "name": "generate_sounds",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "file": [
                    "str",
                    "list[str]"
                ],
                "files": [
                    "str",
                    "list[str]"
                ],
                "output_dir": [
                    "str"
                ]
            }
        },
        "generate_pics": {
            "name": "generate_pics",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "file": [
                    "str",
                    "bool"
                ],
                "files": [
                    "str"
                ],
                "output_dir": [
                    "str"
                ],
                "src_pal": [
                    "bool",
                    "dict[str, typing.Any]",
                    "str"
                ]
            }
        },
        "generate_altpals": {
            "name": "generate_altpals",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {
                "alt_pals": [
                    "str"
                ],
                "files": [
                    "str"
                ],
                "output_dir": [
                    "str"
                ]
            }
        },
        "generate_trn": {
            "name": "generate_trn",
            "location": 102,
            "return": [
                "None"
            ],
            "arguments": {
                "file": [
                    "str"
                ],
                "files": [
                    "str",
                    "typing.Pattern",
                    "None",
                    "dict[str, str]"
                ],
                "output_dir": [
                    "str"
                ]
            }
        },
        "generate_bk": {
            "name": "generate_bk",
            "location": 121,
            "return": [
                "None"
            ],
            "arguments": {
                "file": [
                    "str"
                ],
                "files": [
                    "str",
                    "list[str]"
                ],
                "output_dir": [
                    "str",
                    "typing.Deque"
                ],
                "alt_pals": [
                    "bool",
                    "str"
                ]
            }
        },
        "generate_af": {
            "name": "generate_af",
            "location": 150,
            "return": [
                "None"
            ],
            "arguments": {
                "file": [
                    "str"
                ],
                "files": [
                    "str",
                    "list[str]"
                ],
                "output_dir": [
                    "str"
                ],
                "alt_pals": [
                    "str",
                    "bytes",
                    "bool"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 168,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "pyomftools-master/omftools/cli/sounds_decompile.py": {},
    "pyomftools-master/omftools/cli/__init__.py": {},
    "pyomftools-master/omftools/pyshadowdive/af.py": {
        "AFFile.__init__": {
            "name": "__init__",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AFFile.serialize": {
            "name": "serialize",
            "location": 63,
            "return": [
                "dict[typing.Text, dict[, ]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "AFFile.unserialize": {
            "name": "unserialize",
            "location": 80,
            "return": [
                "AFFile"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "str",
                    "bytes"
                ]
            }
        },
        "AFFile.read": {
            "name": "read",
            "location": 96,
            "return": [
                "AFFile"
            ],
            "arguments": {
                "self": [],
                "parser": []
            }
        },
        "AFFile.write": {
            "name": "write",
            "location": 133,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parser": []
            }
        },
        "AFFile.real_endurance": {
            "name": "real_endurance",
            "location": 163,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "AFFile.real_forward_speed": {
            "name": "real_forward_speed",
            "location": 171,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "AFFile.real_reverse_speed": {
            "name": "real_reverse_speed",
            "location": 179,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "AFFile.real_jump_speed": {
            "name": "real_jump_speed",
            "location": 187,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "AFFile.real_fall_speed": {
            "name": "real_fall_speed",
            "location": 195,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "value": []
            }
        }
    },
    "pyomftools-master/omftools/pyshadowdive/afmove.py": {
        "AIOptions.__str__": {
            "name": "__str__",
            "location": 27,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "PositionConstraint.__str__": {
            "name": "__str__",
            "location": 40,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "CollisionOpts.__str__": {
            "name": "__str__",
            "location": 55,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MoveCategory.__str__": {
            "name": "__str__",
            "location": 75,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "AFMove.__init__": {
            "name": "__init__",
            "location": 156,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AFMove.get_name": {
            "name": "get_name",
            "location": 181,
            "return": [
                "None"
            ],
            "arguments": {
                "index": [
                    "dict[str, typing.Any]",
                    "str",
                    "dict[str, list[str]]"
                ]
            }
        },
        "AFMove.read": {
            "name": "read",
            "location": 186,
            "return": [
                "AFMove"
            ],
            "arguments": {
                "self": [],
                "parser": []
            }
        },
        "AFMove.write": {
            "name": "write",
            "location": 211,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parser": [
                    "bool"
                ]
            }
        },
        "AFMove.serialize": {
            "name": "serialize",
            "location": 235,
            "return": [
                "dict[, dict[typing.Text, ]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "AFMove.unserialize": {
            "name": "unserialize",
            "location": 263,
            "return": [
                "AFMove"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "str"
                ]
            }
        }
    },
    "pyomftools-master/omftools/pyshadowdive/altpals.py": {
        "AltPaletteFile.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AltPaletteFile.serialize": {
            "name": "serialize",
            "location": 13,
            "return": [
                "dict[typing.Text, list[]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "AltPaletteFile.read": {
            "name": "read",
            "location": 18,
            "return": [
                "AltPaletteFile"
            ],
            "arguments": {
                "self": [],
                "parser": [
                    "bool"
                ]
            }
        }
    },
    "pyomftools-master/omftools/pyshadowdive/animation.py": {
        "Animation.__init__": {
            "name": "__init__",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Animation.read": {
            "name": "read",
            "location": 48,
            "return": [
                "Animation"
            ],
            "arguments": {
                "self": [],
                "parser": []
            }
        },
        "Animation.write": {
            "name": "write",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parser": []
            }
        },
        "Animation.serialize": {
            "name": "serialize",
            "location": 108,
            "return": [
                "dict[typing.Text, list[]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Animation.unserialize": {
            "name": "unserialize",
            "location": 118,
            "return": [
                "Animation"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "bytes",
                    "str"
                ]
            }
        }
    },
    "pyomftools-master/omftools/pyshadowdive/bk.py": {
        "BKFile.__init__": {
            "name": "__init__",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BKFile.serialize": {
            "name": "serialize",
            "location": 52,
            "return": [
                "dict[typing.Text, typing.Union[dict[, ],list[]]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BKFile.unserialize": {
            "name": "unserialize",
            "location": 64,
            "return": [
                "BKFile"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "list[list[typing.Any]]",
                    "bytes"
                ]
            }
        },
        "BKFile.read": {
            "name": "read",
            "location": 77,
            "return": [
                "BKFile"
            ],
            "arguments": {
                "self": [],
                "parser": []
            }
        },
        "BKFile.write": {
            "name": "write",
            "location": 104,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parser": []
            }
        },
        "BKFile.save_background": {
            "name": "save_background",
            "location": 141,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "str",
                    "int",
                    "tuple[]",
                    "dict[str, int]",
                    "float"
                ]
            }
        }
    },
    "pyomftools-master/omftools/pyshadowdive/bkanim.py": {
        "BKAnimation.__init__": {
            "name": "__init__",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BKAnimation.get_name": {
            "name": "get_name",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "index": [
                    "dict[str, typing.Any]",
                    "str",
                    "dict[str, list[str]]"
                ]
            }
        },
        "BKAnimation.read": {
            "name": "read",
            "location": 65,
            "return": [
                "BKAnimation"
            ],
            "arguments": {
                "self": [],
                "parser": []
            }
        },
        "BKAnimation.write": {
            "name": "write",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parser": [
                    "typing.Type"
                ]
            }
        },
        "BKAnimation.serialize": {
            "name": "serialize",
            "location": 86,
            "return": [
                "dict[, dict[typing.Text, ]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BKAnimation.unserialize": {
            "name": "unserialize",
            "location": 100,
            "return": [
                "BKAnimation"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "str"
                ]
            }
        }
    },
    "pyomftools-master/omftools/pyshadowdive/language.py": {
        "LanguageFile.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LanguageFile.serialize": {
            "name": "serialize",
            "location": 16,
            "return": [
                "dict[typing.Text, ]"
            ],
            "arguments": {
                "self": []
            }
        },
        "LanguageFile.read": {
            "name": "read",
            "location": 22,
            "return": [
                "LanguageFile"
            ],
            "arguments": {
                "self": [],
                "parser": []
            }
        }
    },
    "pyomftools-master/omftools/pyshadowdive/palette.py": {
        "Palette.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Palette.remap": {
            "name": "remap",
            "location": 17,
            "return": [
                "Palette"
            ],
            "arguments": {
                "self": [],
                "remapping": []
            }
        },
        "Palette._read_one": {
            "name": "_read_one",
            "location": 23,
            "return": [
                "tuple[int]"
            ],
            "arguments": {
                "parser": []
            }
        },
        "Palette.read_range": {
            "name": "read_range",
            "location": 32,
            "return": [
                "Palette"
            ],
            "arguments": {
                "self": [],
                "parser": [
                    "int"
                ],
                "start": [
                    "int"
                ],
                "length": [
                    "int"
                ]
            }
        },
        "Palette.read": {
            "name": "read",
            "location": 37,
            "return": [
                "Palette"
            ],
            "arguments": {
                "self": [],
                "parser": [
                    "str",
                    "bytes",
                    "dict[, ]"
                ]
            }
        },
        "Palette._write_one": {
            "name": "_write_one",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "parser": [
                    "typing.Callable[Optional,Optional,str, None]",
                    "bool",
                    "str",
                    "tuple[]",
                    "None",
                    "dict[, ]"
                ],
                "c": [
                    "str",
                    "tuple[]"
                ]
            }
        },
        "Palette.write_range": {
            "name": "write_range",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parser": [
                    "int",
                    "dict[str, typing.Any]",
                    "typing.Pattern",
                    "list['Book']",
                    "list[P]",
                    "str"
                ],
                "start": [
                    "int"
                ],
                "length": [
                    "int"
                ]
            }
        },
        "Palette.write": {
            "name": "write",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parser": []
            }
        },
        "Palette.serialize": {
            "name": "serialize",
            "location": 57,
            "return": [
                "dict[typing.Text, ]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Palette.unserialize": {
            "name": "unserialize",
            "location": 62,
            "return": [
                "Palette"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "bytes",
                    "list[]",
                    "str"
                ]
            }
        }
    },
    "pyomftools-master/omftools/pyshadowdive/palette_mapping.py": {
        "PaletteMapping.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PaletteMapping.remap": {
            "name": "remap",
            "location": 22,
            "return": [],
            "arguments": {
                "self": [],
                "remap_id": [
                    "int",
                    "str"
                ]
            }
        },
        "PaletteMapping.read": {
            "name": "read",
            "location": 25,
            "return": [
                "PaletteMapping"
            ],
            "arguments": {
                "self": [],
                "parser": []
            }
        },
        "PaletteMapping.write": {
            "name": "write",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parser": []
            }
        },
        "PaletteMapping.serialize": {
            "name": "serialize",
            "location": 40,
            "return": [
                "dict[typing.Text, ]"
            ],
            "arguments": {
                "self": []
            }
        },
        "PaletteMapping.unserialize": {
            "name": "unserialize",
            "location": 43,
            "return": [
                "PaletteMapping"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "str"
                ]
            }
        }
    },
    "pyomftools-master/omftools/pyshadowdive/pic.py": {
        "Photo.__init__": {
            "name": "__init__",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Photo.serialize": {
            "name": "serialize",
            "location": 31,
            "return": [
                "dict[typing.Text, ]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Photo.read": {
            "name": "read",
            "location": 40,
            "return": [
                "Photo"
            ],
            "arguments": {
                "self": [],
                "parser": []
            }
        },
        "Photo.write": {
            "name": "write",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parser": []
            }
        },
        "PicFile.__init__": {
            "name": "__init__",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PicFile.serialize": {
            "name": "serialize",
            "location": 69,
            "return": [
                "dict[typing.Text, list[]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "PicFile.read": {
            "name": "read",
            "location": 74,
            "return": [
                "PicFile"
            ],
            "arguments": {
                "self": [],
                "parser": []
            }
        },
        "PicFile.write": {
            "name": "write",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parser": []
            }
        }
    },
    "pyomftools-master/omftools/pyshadowdive/pilot.py": {
        "Pilot.__init__": {
            "name": "__init__",
            "location": 207,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Pilot.serialize": {
            "name": "serialize",
            "location": 293,
            "return": [
                "dict[typing.Text, ]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Pilot.read_player_block": {
            "name": "read_player_block",
            "location": 374,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parser": []
            }
        },
        "Pilot.read_pilot_block": {
            "name": "read_pilot_block",
            "location": 404,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parser": []
            }
        },
        "Pilot.read": {
            "name": "read",
            "location": 481,
            "return": [
                "Pilot"
            ],
            "arguments": {
                "self": [],
                "parser": []
            }
        }
    },
    "pyomftools-master/omftools/pyshadowdive/protos.py": {
        "DataObject.read": {
            "name": "read",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parser": [
                    "bool"
                ]
            }
        },
        "DataObject.write": {
            "name": "write",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parser": [
                    "bool"
                ]
            }
        },
        "DataObject.unserialize": {
            "name": "unserialize",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "int",
                    "bytes",
                    "dict[, ]"
                ]
            }
        },
        "DataObject.serialize": {
            "name": "serialize",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataObject.get_selected_props": {
            "name": "get_selected_props",
            "location": 39,
            "return": [
                "list[tuple[typing.Text]]"
            ],
            "arguments": {
                "self": [],
                "prop_names": [
                    "str",
                    "list[str]"
                ]
            }
        },
        "DataObject.get_props": {
            "name": "get_props",
            "location": 47,
            "return": [
                "list[tuple[typing.Union[list[str],list[],typing.Type,typing.Pattern,dict[str, str],typing.Match,str]]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Entrypoint.load_native": {
            "name": "load_native",
            "location": 64,
            "return": [],
            "arguments": {
                "cls": [
                    "list[str]"
                ],
                "filename": [
                    "str"
                ]
            }
        },
        "Entrypoint.save_native": {
            "name": "save_native",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "str"
                ]
            }
        },
        "Entrypoint.load_json": {
            "name": "load_json",
            "location": 75,
            "return": [
                "str",
                "list[]",
                "dict[str, str]",
                "int"
            ],
            "arguments": {
                "cls": [
                    "list[str]"
                ],
                "filename": [
                    "str"
                ]
            }
        },
        "Entrypoint.save_json": {
            "name": "save_json",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "str"
                ]
            }
        },
        "Entrypoint.to_json": {
            "name": "to_json",
            "location": 85,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Entrypoint.from_json": {
            "name": "from_json",
            "location": 89,
            "return": [],
            "arguments": {
                "cls": [
                    "dict[, ]",
                    "float",
                    "None",
                    "list[]",
                    "int"
                ],
                "data": [
                    "dict[, ]",
                    "dict[str, typing.Any]",
                    "str",
                    "typing.Type"
                ]
            }
        }
    },
    "pyomftools-master/omftools/pyshadowdive/sounds.py": {
        "Sound.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Sound.serialize": {
            "name": "serialize",
            "location": 14,
            "return": [
                "dict[typing.Text, ]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Sound.read": {
            "name": "read",
            "location": 20,
            "return": [
                "Sound"
            ],
            "arguments": {
                "self": [],
                "parser": []
            }
        },
        "Sound.save_wav": {
            "name": "save_wav",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "str",
                    "typing.TextIO",
                    "int"
                ]
            }
        },
        "SoundFile.__init__": {
            "name": "__init__",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SoundFile.serialize": {
            "name": "serialize",
            "location": 41,
            "return": [
                "dict[typing.Text, list[]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SoundFile.read": {
            "name": "read",
            "location": 46,
            "return": [
                "SoundFile"
            ],
            "arguments": {
                "self": [],
                "parser": []
            }
        }
    },
    "pyomftools-master/omftools/pyshadowdive/sprite.py": {
        "Sprite.__init__": {
            "name": "__init__",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Sprite.read": {
            "name": "read",
            "location": 45,
            "return": [
                "Sprite"
            ],
            "arguments": {
                "self": [],
                "parser": []
            }
        },
        "Sprite.decode_image": {
            "name": "decode_image",
            "location": 60,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Sprite.save_png": {
            "name": "save_png",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "int",
                    "dict[str, int]",
                    "str"
                ],
                "palette": [
                    "int",
                    "dict[str, int]",
                    "str"
                ]
            }
        },
        "Sprite.write": {
            "name": "write",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parser": []
            }
        },
        "Sprite.serialize": {
            "name": "serialize",
            "location": 120,
            "return": [
                "dict[typing.Text, ]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Sprite.unserialize": {
            "name": "unserialize",
            "location": 131,
            "return": [
                "Sprite"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "bytearray",
                    "bytes"
                ]
            }
        },
        "Sprite.len": {
            "name": "len",
            "location": 142,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pyomftools-master/omftools/pyshadowdive/string_parser.py": {
        "get_total_frames_duration": {
            "name": "get_total_frames_duration",
            "location": 20,
            "return": [
                "bool"
            ],
            "arguments": {
                "frames": [
                    "str"
                ]
            }
        },
        "get_frame_at_time_offset": {
            "name": "get_frame_at_time_offset",
            "location": 24,
            "return": [
                "tuple[]",
                "tuple[None]"
            ],
            "arguments": {
                "frames": [
                    "str",
                    "bytes"
                ],
                "offset": [
                    "int"
                ]
            }
        },
        "_read_next_int": {
            "name": "_read_next_int",
            "location": 34,
            "return": [
                "tuple[typing.Optional[int]]"
            ],
            "arguments": {
                "in_str": [],
                "start_pos": [
                    "bool"
                ]
            }
        },
        "_read_next_tag": {
            "name": "_read_next_tag",
            "location": 42,
            "return": [
                "tuple[typing.Optional[str]]"
            ],
            "arguments": {
                "in_str": [
                    "str",
                    "float",
                    "None"
                ],
                "start_pos": [
                    "str",
                    "int",
                    "None",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "parse_string": {
            "name": "parse_string",
            "location": 56,
            "return": [
                "list[Frame]"
            ],
            "arguments": {
                "animation_string": []
            }
        }
    },
    "pyomftools-master/omftools/pyshadowdive/tournament.py": {
        "TournamentFile.__init__": {
            "name": "__init__",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TournamentFile.serialize": {
            "name": "serialize",
            "location": 44,
            "return": [
                "dict[typing.Text, list[]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TournamentFile.read": {
            "name": "read",
            "location": 61,
            "return": [
                "TournamentFile"
            ],
            "arguments": {
                "self": [],
                "parser": []
            }
        }
    },
    "pyomftools-master/omftools/pyshadowdive/valid_tags.py": {
        "describe_tag": {
            "name": "describe_tag",
            "location": 170,
            "return": [],
            "arguments": {
                "tag": [
                    "str",
                    "list[str]",
                    "dict[, ]",
                    "bool"
                ]
            }
        },
        "is_valid_tag": {
            "name": "is_valid_tag",
            "location": 174,
            "return": [
                "bool"
            ],
            "arguments": {
                "tag": [
                    "str",
                    "typing.Sequence[str]",
                    "dict[str, int]",
                    "bool",
                    "list[str]"
                ]
            }
        },
        "tag_has_arg": {
            "name": "tag_has_arg",
            "location": 178,
            "return": [],
            "arguments": {
                "tag": [
                    "str",
                    "list[str]",
                    "dict[, ]",
                    "bool",
                    "None"
                ]
            }
        }
    },
    "pyomftools-master/omftools/pyshadowdive/__init__.py": {},
    "pyomftools-master/omftools/pyshadowdive/utils/audio.py": {
        "save_wav": {
            "name": "save_wav",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {
                "data": [],
                "filename": [
                    "str",
                    "bool",
                    "None",
                    "bytes"
                ]
            }
        }
    },
    "pyomftools-master/omftools/pyshadowdive/utils/exceptions.py": {},
    "pyomftools-master/omftools/pyshadowdive/utils/images.py": {
        "generate_png": {
            "name": "generate_png",
            "location": 8,
            "return": [],
            "arguments": {
                "data": [
                    "bytes",
                    "dict[str, typing.Any]",
                    "str",
                    "dict[, ]",
                    "typing.Callable[bytes, bytes]"
                ],
                "w": [
                    "str",
                    "list[dict[, ]]"
                ],
                "h": [
                    "str",
                    "list[dict[, ]]"
                ],
                "palette": [
                    "dict[, ]",
                    "bytes",
                    "bytearray",
                    "memoryview"
                ]
            }
        },
        "save_png": {
            "name": "save_png",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "img": [],
                "filename": [
                    "str"
                ],
                "transparency": [
                    "None",
                    "str"
                ]
            }
        }
    },
    "pyomftools-master/omftools/pyshadowdive/utils/parser.py": {
        "BinaryParser.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "handle": [
                    "int",
                    "float"
                ]
            }
        },
        "BinaryParser.get_file_size": {
            "name": "get_file_size",
            "location": 18,
            "return": [
                "int",
                "typing.Final"
            ],
            "arguments": {
                "self": []
            }
        },
        "BinaryParser.xor_data": {
            "name": "xor_data",
            "location": 25,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "BinaryParser.write": {
            "name": "write",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "str",
                    "bytes",
                    "bytearray"
                ]
            }
        },
        "BinaryParser.read": {
            "name": "read",
            "location": 43,
            "return": [
                "bytes",
                "str",
                "list[str]",
                "dict[str, typing.Any]"
            ],
            "arguments": {
                "self": [],
                "size": [
                    "int",
                    "bytes",
                    "None"
                ]
            }
        },
        "BinaryParser.set_xor_key": {
            "name": "set_xor_key",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "None",
                    "str",
                    "typing.Iterable[str]",
                    "int",
                    "typing.Hashable"
                ]
            }
        },
        "BinaryParser.skip": {
            "name": "skip",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "size": [
                    "int",
                    "tuple[]",
                    "float",
                    "tuple[typing.Union[float,float]]"
                ]
            }
        },
        "BinaryParser.get_pos": {
            "name": "get_pos",
            "location": 57,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BinaryParser.set_pos": {
            "name": "set_pos",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pos": [
                    "bytearray",
                    "typing.Callable[, ]",
                    "typing.Sequence[str]"
                ]
            }
        },
        "BinaryParser.check_uint8": {
            "name": "check_uint8",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "compare_to": [
                    "int",
                    "dict[str, typing.Any]",
                    "str",
                    "list[dict[, ]]"
                ]
            }
        },
        "BinaryParser.check_uint16": {
            "name": "check_uint16",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "compare_to": [
                    "int",
                    "dict[str, typing.Any]",
                    "str",
                    "list[dict[, ]]"
                ]
            }
        },
        "BinaryParser.check_uint32": {
            "name": "check_uint32",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "compare_to": [
                    "int",
                    "dict[str, typing.Any]",
                    "str",
                    "list[dict[, ]]"
                ]
            }
        },
        "BinaryParser.get_null_padded_str": {
            "name": "get_null_padded_str",
            "location": 78,
            "return": [],
            "arguments": {
                "self": [],
                "max_length": [
                    "int",
                    "float"
                ]
            }
        },
        "BinaryParser.get_str": {
            "name": "get_str",
            "location": 90,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": [],
                "length": []
            }
        },
        "BinaryParser.get_bytes": {
            "name": "get_bytes",
            "location": 93,
            "return": [],
            "arguments": {
                "self": [],
                "length": [
                    "float",
                    "bool",
                    "str"
                ]
            }
        },
        "BinaryParser.get_int8": {
            "name": "get_int8",
            "location": 96,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BinaryParser.get_uint8": {
            "name": "get_uint8",
            "location": 99,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BinaryParser.get_int16": {
            "name": "get_int16",
            "location": 102,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BinaryParser.get_uint16": {
            "name": "get_uint16",
            "location": 105,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BinaryParser.get_int32": {
            "name": "get_int32",
            "location": 108,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BinaryParser.get_uint32": {
            "name": "get_uint32",
            "location": 111,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BinaryParser.get_float": {
            "name": "get_float",
            "location": 114,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BinaryParser.get_boolean": {
            "name": "get_boolean",
            "location": 117,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "BinaryParser.get_var_str": {
            "name": "get_var_str",
            "location": 120,
            "return": [
                "typing.Text",
                "str",
                "dict[str, list[typing.Any]]",
                "list[]",
                "int"
            ],
            "arguments": {
                "self": [],
                "size_includes_zero": [
                    "bool"
                ]
            }
        },
        "BinaryParser.put_null_padded_str": {
            "name": "put_null_padded_str",
            "location": 128,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "str"
                ],
                "max_length": []
            }
        },
        "BinaryParser.put_padding": {
            "name": "put_padding",
            "location": 135,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "length": [
                    "int",
                    "dict[str, bool]",
                    "str"
                ]
            }
        },
        "BinaryParser.put_str": {
            "name": "put_str",
            "location": 139,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "str"
                ]
            }
        },
        "BinaryParser.put_bytes": {
            "name": "put_bytes",
            "location": 142,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict[, ]",
                    "bytes",
                    "bytearray",
                    "memoryview"
                ]
            }
        },
        "BinaryParser.put_int8": {
            "name": "put_int8",
            "location": 145,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict[, ]",
                    "str",
                    "bytes"
                ]
            }
        },
        "BinaryParser.put_uint8": {
            "name": "put_uint8",
            "location": 148,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict[, ]",
                    "str",
                    "bytes"
                ]
            }
        },
        "BinaryParser.put_int16": {
            "name": "put_int16",
            "location": 151,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict[, ]",
                    "str",
                    "bytes"
                ]
            }
        },
        "BinaryParser.put_uint16": {
            "name": "put_uint16",
            "location": 154,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict[, ]",
                    "str",
                    "bytes"
                ]
            }
        },
        "BinaryParser.put_int32": {
            "name": "put_int32",
            "location": 157,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict[, ]",
                    "str",
                    "bytes"
                ]
            }
        },
        "BinaryParser.put_uint32": {
            "name": "put_uint32",
            "location": 160,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict[, ]",
                    "str",
                    "bytes"
                ]
            }
        },
        "BinaryParser.put_float": {
            "name": "put_float",
            "location": 163,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict[, ]",
                    "str",
                    "bytes"
                ]
            }
        },
        "BinaryParser.put_boolean": {
            "name": "put_boolean",
            "location": 166,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "bytes",
                    "int",
                    "tuple[typing.Union[int,int]]",
                    "float",
                    "str"
                ]
            }
        },
        "BinaryParser.put_var_str": {
            "name": "put_var_str",
            "location": 169,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "str"
                ],
                "size_includes_zero": [
                    "bool"
                ]
            }
        }
    },
    "pyomftools-master/omftools/pyshadowdive/utils/types.py": {},
    "pyomftools-master/omftools/pyshadowdive/utils/validator.py": {},
    "pyomftools-master/omftools/pyshadowdive/utils/__init__.py": {}
}
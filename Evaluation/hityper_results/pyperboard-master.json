{
    "pyperboard-master/pyperboard/errors.py": {
        "exit_on_error": {
            "name": "exit_on_error",
            "location": 12,
            "return": [],
            "arguments": {
                "func": [
                    "typing.Callable[[], typing.Any]"
                ]
            }
        },
        "exit_on_error.decorator": {
            "name": "decorator",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "pyperboard-master/pyperboard/cli/reporter.py": {
        "Reporter.info": {
            "name": "info",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "str",
                    "None",
                    "typing.Iterable[str]"
                ]
            }
        },
        "Reporter.error": {
            "name": "error",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "error": [
                    "str"
                ]
            }
        },
        "Reporter.success": {
            "name": "success",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "bool"
                ]
            }
        }
    },
    "pyperboard-master/pyperboard/cli/__init__.py": {},
    "pyperboard-master/pyperboard/config/base.py": {
        "Config.__init__": {
            "name": "__init__",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Config.update": {
            "name": "update",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "dict[, ]",
                    "dict[str, typing.Any]",
                    "dict[str, bool]"
                ]
            }
        }
    },
    "pyperboard-master/pyperboard/config/config_file.py": {
        "ConfigFile.__init__": {
            "name": "__init__",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "file_path": [
                    "str"
                ]
            }
        },
        "ConfigFile.read": {
            "name": "read",
            "location": 10,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "pyperboard-master/pyperboard/config/schema.py": {
        "File._validate": {
            "name": "_validate",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "bytes"
                ]
            }
        }
    },
    "pyperboard-master/pyperboard/config/__init__.py": {
        "ConfigAssembler.assemble": {
            "name": "assemble",
            "location": 16,
            "return": [
                "dict[str, typing.Union[typing.Any,str,dict[str, bool]]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConfigAssembler._get_config_file_path": {
            "name": "_get_config_file_path",
            "location": 34,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConfigAssembler.current_working_dir": {
            "name": "current_working_dir",
            "location": 46,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ConfigAssembler._load_config_data": {
            "name": "_load_config_data",
            "location": 49,
            "return": [],
            "arguments": {
                "self": [],
                "raw_data": [
                    "dict[, ]",
                    "str",
                    "bytes",
                    "dict[str, float]",
                    "dict[str, str]"
                ]
            }
        }
    }
}
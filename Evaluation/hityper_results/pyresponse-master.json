{
    "pyresponse-master/setup.py": {
        "_get_files_recursive": {
            "name": "_get_files_recursive",
            "location": 21,
            "return": [
                "list[]"
            ],
            "arguments": {
                "top": [
                    "str"
                ]
            }
        },
        "_get_package_data": {
            "name": "_get_package_data",
            "location": 34,
            "return": [
                "list[]"
            ],
            "arguments": {}
        },
        "_get_files_recursive.get_files_recursive_acc": {
            "name": "get_files_recursive_acc",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "top": [],
                "files": []
            }
        }
    },
    "pyresponse-master/versioneer.py": {
        "get_root": {
            "name": "get_root",
            "location": 297,
            "return": [],
            "arguments": {}
        },
        "get_config_from_root": {
            "name": "get_config_from_root",
            "location": 340,
            "return": [],
            "arguments": {
                "root": []
            }
        },
        "register_vcs_handler": {
            "name": "register_vcs_handler",
            "location": 379,
            "return": [],
            "arguments": {
                "vcs": [],
                "method": []
            }
        },
        "run_command": {
            "name": "run_command",
            "location": 392,
            "return": [],
            "arguments": {
                "commands": [],
                "args": [],
                "cwd": [],
                "verbose": [],
                "hide_stderr": [],
                "env": []
            }
        },
        "git_get_keywords": {
            "name": "git_get_keywords",
            "location": 957,
            "return": [],
            "arguments": {
                "versionfile_abs": []
            }
        },
        "git_versions_from_keywords": {
            "name": "git_versions_from_keywords",
            "location": 986,
            "return": [],
            "arguments": {
                "keywords": [],
                "tag_prefix": [],
                "verbose": []
            }
        },
        "git_pieces_from_vcs": {
            "name": "git_pieces_from_vcs",
            "location": 1048,
            "return": [],
            "arguments": {
                "tag_prefix": [],
                "root": [],
                "verbose": [],
                "run_command": []
            }
        },
        "do_vcs_install": {
            "name": "do_vcs_install",
            "location": 1146,
            "return": [],
            "arguments": {
                "manifest_in": [],
                "versionfile_source": [],
                "ipy": []
            }
        },
        "versions_from_parentdir": {
            "name": "versions_from_parentdir",
            "location": 1184,
            "return": [],
            "arguments": {
                "parentdir_prefix": [],
                "root": [],
                "verbose": []
            }
        },
        "versions_from_file": {
            "name": "versions_from_file",
            "location": 1233,
            "return": [],
            "arguments": {
                "filename": []
            }
        },
        "write_to_version_file": {
            "name": "write_to_version_file",
            "location": 1248,
            "return": [],
            "arguments": {
                "filename": [],
                "versions": []
            }
        },
        "plus_or_dot": {
            "name": "plus_or_dot",
            "location": 1258,
            "return": [],
            "arguments": {
                "pieces": []
            }
        },
        "render_pep440": {
            "name": "render_pep440",
            "location": 1265,
            "return": [],
            "arguments": {
                "pieces": []
            }
        },
        "render_pep440_pre": {
            "name": "render_pep440_pre",
            "location": 1289,
            "return": [],
            "arguments": {
                "pieces": []
            }
        },
        "render_pep440_post": {
            "name": "render_pep440_post",
            "location": 1305,
            "return": [],
            "arguments": {
                "pieces": []
            }
        },
        "render_pep440_old": {
            "name": "render_pep440_old",
            "location": 1332,
            "return": [],
            "arguments": {
                "pieces": []
            }
        },
        "render_git_describe": {
            "name": "render_git_describe",
            "location": 1354,
            "return": [],
            "arguments": {
                "pieces": []
            }
        },
        "render_git_describe_long": {
            "name": "render_git_describe_long",
            "location": 1374,
            "return": [],
            "arguments": {
                "pieces": []
            }
        },
        "render": {
            "name": "render",
            "location": 1394,
            "return": [],
            "arguments": {
                "pieces": [],
                "style": []
            }
        },
        "get_versions": {
            "name": "get_versions",
            "location": 1436,
            "return": [],
            "arguments": {
                "verbose": []
            }
        },
        "get_version": {
            "name": "get_version",
            "location": 1515,
            "return": [],
            "arguments": {}
        },
        "get_cmdclass": {
            "name": "get_cmdclass",
            "location": 1520,
            "return": [],
            "arguments": {}
        },
        "do_setup": {
            "name": "do_setup",
            "location": 1744,
            "return": [],
            "arguments": {}
        },
        "scan_setup_py": {
            "name": "scan_setup_py",
            "location": 1830,
            "return": [],
            "arguments": {}
        },
        "get_config_from_root.get": {
            "name": "get",
            "location": 352,
            "return": [],
            "arguments": {
                "parser": [],
                "name": []
            }
        },
        "register_vcs_handler.decorate": {
            "name": "decorate",
            "location": 382,
            "return": [],
            "arguments": {
                "f": []
            }
        },
        "get_cmdclass.cmd_version.initialize_options": {
            "name": "initialize_options",
            "location": 1547,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "get_cmdclass.cmd_version.finalize_options": {
            "name": "finalize_options",
            "location": 1550,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "get_cmdclass.cmd_version.run": {
            "name": "run",
            "location": 1553,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "get_cmdclass.cmd_build_py.run": {
            "name": "run",
            "location": 1586,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "get_cmdclass.cmd_sdist.run": {
            "name": "run",
            "location": 1676,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "get_cmdclass.cmd_sdist.make_release_tree": {
            "name": "make_release_tree",
            "location": 1684,
            "return": [],
            "arguments": {
                "self": [],
                "base_dir": [],
                "files": []
            }
        },
        "get_cmdclass.cmd_build_exe.run": {
            "name": "run",
            "location": 1611,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "get_cmdclass.cmd_py2exe.run": {
            "name": "run",
            "location": 1644,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "pyresponse-master/devtools/scripts/create_conda_env.py": {
        "temp_cd": {
            "name": "temp_cd",
            "location": 50,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {}
        }
    },
    "pyresponse-master/docs/source/conf.py": {},
    "pyresponse-master/pyresponse/ao2mo.py": {
        "AO2MO.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "C": [
                    "bool",
                    "float"
                ],
                "occupations": [
                    "bool",
                    "float"
                ],
                "verbose": [
                    "int"
                ],
                "I": [
                    "None",
                    "int",
                    "float",
                    "str"
                ]
            }
        },
        "AO2MO.transform": {
            "name": "transform",
            "location": 34,
            "return": [],
            "arguments": {
                "I": [
                    "int",
                    "str",
                    "None"
                ],
                "C1": [
                    "int",
                    "float",
                    "dict[str, typing.Any]",
                    "list[int]"
                ],
                "C2": [
                    "int",
                    "str",
                    "tuple[typing.Union[int,int,int]]"
                ],
                "C3": [
                    "int",
                    "str",
                    "tuple[typing.Union[int,int,int]]"
                ],
                "C4": [
                    "int",
                    "str",
                    "tuple[typing.Union[int,int,int]]"
                ]
            }
        },
        "AO2MO.perform_rhf_full": {
            "name": "perform_rhf_full",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AO2MO.perform_rhf_partial": {
            "name": "perform_rhf_partial",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AO2MO.perform_uhf_full": {
            "name": "perform_uhf_full",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AO2MO.perform_uhf_partial": {
            "name": "perform_uhf_partial",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pyresponse-master/pyresponse/constants.py": {},
    "pyresponse-master/pyresponse/core.py": {},
    "pyresponse-master/pyresponse/cphf.py": {
        "Driver.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "solver": [
                    "int",
                    "float"
                ]
            }
        },
        "Driver.run": {
            "name": "run",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "hamiltonian": [
                    "str",
                    "bool"
                ],
                "spin": [
                    "str",
                    "bool"
                ],
                "program": [
                    "str",
                    "bool"
                ],
                "program_obj": [
                    "str",
                    "bool"
                ]
            }
        },
        "CPHF.__init__": {
            "name": "__init__",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "solver": [
                    "dict[, ]",
                    "bool"
                ]
            }
        },
        "CPHF.set_frequencies": {
            "name": "set_frequencies",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "frequencies": [
                    "None",
                    "str",
                    "bool",
                    "dict[, ]",
                    "float"
                ]
            }
        },
        "CPHF.add_operator": {
            "name": "add_operator",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "operator": [
                    "int"
                ]
            }
        },
        "CPHF.run": {
            "name": "run",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "hamiltonian": [
                    "str"
                ],
                "spin": [
                    "str"
                ],
                "program": [],
                "program_obj": []
            }
        },
        "CPHF.form_uncoupled_results": {
            "name": "form_uncoupled_results",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CPHF.form_results": {
            "name": "form_results",
            "location": 163,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pyresponse-master/pyresponse/explicit_equations_full.py": {
        "form_rpa_a_matrix_mo_singlet_full": {
            "name": "form_rpa_a_matrix_mo_singlet_full",
            "location": 8,
            "return": [],
            "arguments": {
                "E_MO": [
                    "str",
                    "typing.Type",
                    "dict[str, typing.Any]"
                ],
                "TEI_MO": [
                    "str"
                ],
                "nocc": [
                    "str",
                    "typing.Type",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "form_rpa_a_matrix_mo_triplet_full": {
            "name": "form_rpa_a_matrix_mo_triplet_full",
            "location": 42,
            "return": [],
            "arguments": {
                "E_MO": [
                    "str",
                    "typing.Type",
                    "dict[str, typing.Any]"
                ],
                "TEI_MO": [],
                "nocc": [
                    "str",
                    "typing.Type",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "form_rpa_b_matrix_mo_singlet_full": {
            "name": "form_rpa_b_matrix_mo_singlet_full",
            "location": 73,
            "return": [],
            "arguments": {
                "TEI_MO": [],
                "nocc": [
                    "int",
                    "bytes"
                ]
            }
        },
        "form_rpa_b_matrix_mo_triplet_full": {
            "name": "form_rpa_b_matrix_mo_triplet_full",
            "location": 100,
            "return": [
                "float"
            ],
            "arguments": {
                "TEI_MO": [
                    "bytes"
                ],
                "nocc": []
            }
        },
        "form_rpa_a_matrix_mo_singlet_ss_full": {
            "name": "form_rpa_a_matrix_mo_singlet_ss_full",
            "location": 123,
            "return": [],
            "arguments": {
                "E_MO": [
                    "str",
                    "typing.Type",
                    "dict[str, typing.Any]"
                ],
                "TEI_MO": [
                    "str"
                ],
                "nocc": [
                    "str",
                    "typing.Type",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "form_rpa_a_matrix_mo_singlet_os_full": {
            "name": "form_rpa_a_matrix_mo_singlet_os_full",
            "location": 153,
            "return": [],
            "arguments": {
                "TEI_MO_xxyy": [
                    "str",
                    "bytes"
                ],
                "nocc_x": [
                    "int",
                    "typing.Mapping",
                    "str"
                ],
                "nocc_y": [
                    "float",
                    "int"
                ]
            }
        },
        "form_rpa_b_matrix_mo_singlet_ss_full": {
            "name": "form_rpa_b_matrix_mo_singlet_ss_full",
            "location": 181,
            "return": [
                "float"
            ],
            "arguments": {
                "TEI_MO": [
                    "str"
                ],
                "nocc": [
                    "int",
                    "float"
                ]
            }
        },
        "form_rpa_b_matrix_mo_singlet_os_full": {
            "name": "form_rpa_b_matrix_mo_singlet_os_full",
            "location": 205,
            "return": [],
            "arguments": {
                "TEI_MO_xxyy": [
                    "str"
                ],
                "nocc_x": [
                    "float",
                    "int"
                ],
                "nocc_y": [
                    "int",
                    "str"
                ]
            }
        }
    },
    "pyresponse-master/pyresponse/explicit_equations_partial.py": {
        "form_rpa_a_matrix_mo_singlet_partial": {
            "name": "form_rpa_a_matrix_mo_singlet_partial",
            "location": 9,
            "return": [],
            "arguments": {
                "E_MO": [
                    "str",
                    "typing.Type",
                    "dict[str, typing.Any]"
                ],
                "TEI_MO_iajb": [
                    "str"
                ],
                "TEI_MO_ijab": []
            }
        },
        "form_rpa_a_matrix_mo_triplet_partial": {
            "name": "form_rpa_a_matrix_mo_triplet_partial",
            "location": 43,
            "return": [],
            "arguments": {
                "E_MO": [
                    "str",
                    "typing.Type",
                    "dict[str, typing.Any]"
                ],
                "TEI_MO_ijab": []
            }
        },
        "form_rpa_b_matrix_mo_singlet_partial": {
            "name": "form_rpa_b_matrix_mo_singlet_partial",
            "location": 73,
            "return": [],
            "arguments": {
                "TEI_MO_iajb": []
            }
        },
        "form_rpa_b_matrix_mo_triplet_partial": {
            "name": "form_rpa_b_matrix_mo_triplet_partial",
            "location": 96,
            "return": [],
            "arguments": {
                "TEI_MO_iajb": []
            }
        },
        "form_rpa_a_matrix_mo_singlet_ss_partial": {
            "name": "form_rpa_a_matrix_mo_singlet_ss_partial",
            "location": 117,
            "return": [],
            "arguments": {
                "E_MO": [
                    "str",
                    "typing.Type",
                    "dict[str, typing.Any]"
                ],
                "TEI_MO_iajb": [
                    "set[str]"
                ],
                "TEI_MO_ijab": []
            }
        },
        "form_rpa_a_matrix_mo_singlet_os_partial": {
            "name": "form_rpa_a_matrix_mo_singlet_os_partial",
            "location": 149,
            "return": [
                "dict['cirq.Qid', float]"
            ],
            "arguments": {
                "TEI_MO_iajb_xxyy": [
                    "dict['cirq.Qid', float]"
                ]
            }
        },
        "form_rpa_b_matrix_mo_singlet_ss_partial": {
            "name": "form_rpa_b_matrix_mo_singlet_ss_partial",
            "location": 168,
            "return": [],
            "arguments": {
                "TEI_MO_iajb": []
            }
        },
        "form_rpa_b_matrix_mo_singlet_os_partial": {
            "name": "form_rpa_b_matrix_mo_singlet_os_partial",
            "location": 190,
            "return": [],
            "arguments": {
                "TEI_MO_iajb_xxyy": []
            }
        }
    },
    "pyresponse-master/pyresponse/helpers.py": {
        "get_most_abundant_isotope": {
            "name": "get_most_abundant_isotope",
            "location": 9,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "element": [
                    "str"
                ]
            }
        },
        "get_isotopic_masses": {
            "name": "get_isotopic_masses",
            "location": 21,
            "return": [],
            "arguments": {
                "charges": [
                    "str",
                    "dict[, ]"
                ]
            }
        },
        "calc_center_of_mass": {
            "name": "calc_center_of_mass",
            "location": 31,
            "return": [],
            "arguments": {
                "coords": [],
                "masses": [
                    "str"
                ]
            }
        },
        "calc_center_of_nuclear_charge": {
            "name": "calc_center_of_nuclear_charge",
            "location": 38,
            "return": [],
            "arguments": {
                "coords": [
                    "typing.Sequence[]",
                    "str"
                ],
                "charges": [
                    "typing.Sequence[]",
                    "str"
                ]
            }
        },
        "nuclear_dipole_contribution": {
            "name": "nuclear_dipole_contribution",
            "location": 45,
            "return": [],
            "arguments": {
                "nuccoords": [
                    "int"
                ],
                "nuccharges": [],
                "origin_in_bohrs": [
                    "float",
                    "int"
                ]
            }
        },
        "get_uhf_values": {
            "name": "get_uhf_values",
            "location": 65,
            "return": [
                "list[numpy.dtype]"
            ],
            "arguments": {
                "mat_uhf_a": [
                    "tuple[numpy.dtype]"
                ],
                "mat_uhf_b": [],
                "pair_rohf": [],
                "nocc_a": [
                    "int"
                ],
                "nvirt_a": [
                    "int"
                ],
                "nocc_b": [
                    "int"
                ],
                "nvirt_b": [
                    "int"
                ]
            }
        },
        "mat_uhf_to_packed_rohf": {
            "name": "mat_uhf_to_packed_rohf",
            "location": 105,
            "return": [],
            "arguments": {
                "mat_alpha": [
                    "int",
                    "dict[, ]"
                ],
                "mat_beta": [
                    "int",
                    "dict[, ]"
                ],
                "indices_display_rohf": []
            }
        }
    },
    "pyresponse-master/pyresponse/integrals.py": {
        "read_binary": {
            "name": "read_binary",
            "location": 61,
            "return": [],
            "arguments": {
                "binaryfilename": [
                    "str"
                ]
            }
        },
        "parse_aoproper": {
            "name": "parse_aoproper",
            "location": 70,
            "return": [],
            "arguments": {
                "integralfilename": [
                    "str"
                ]
            }
        },
        "_form_rhs_geometric": {
            "name": "_form_rhs_geometric",
            "location": 147,
            "return": [],
            "arguments": {
                "C": [
                    "float",
                    "list[list[T]]"
                ],
                "occupations": [
                    "typing.Callable[typing.Any, T]"
                ],
                "natoms": [
                    "int"
                ],
                "MO": [],
                "mints": [
                    "list[]",
                    "int"
                ]
            }
        },
        "Integrals.__init__": {
            "name": "__init__",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Integrals.integrals": {
            "name": "integrals",
            "location": 32,
            "return": [],
            "arguments": {
                "self": [],
                "label": [
                    "typing.Collection",
                    "str",
                    "None",
                    "dict[int, str]"
                ]
            }
        },
        "Integrals._compute": {
            "name": "_compute",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "label": [
                    "list[int]",
                    "str",
                    "list[str]",
                    "tuple[typing.Union[typing.Sequence[typing.Any],typing.Sequence[typing.Any]]]",
                    "set[str]"
                ]
            }
        },
        "JK.__init__": {
            "name": "__init__",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "JK.compute_from_density": {
            "name": "compute_from_density",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "D": [
                    "dict[, ]",
                    "typing.Callable[, ]",
                    "int"
                ]
            }
        },
        "JK.compute_from_mocoeffs": {
            "name": "compute_from_mocoeffs",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "C_left": [
                    "list[str]",
                    "bool",
                    "None",
                    "str"
                ],
                "C_right": [
                    "None",
                    "list[str]",
                    "bool",
                    "str"
                ]
            }
        }
    },
    "pyresponse-master/pyresponse/molecular_property.py": {
        "MolecularProperty.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "program": [
                    "int",
                    "float"
                ],
                "program_obj": [
                    "int",
                    "float"
                ],
                "driver": [
                    "collections.abc.Coroutine"
                ],
                "mocoeffs": [
                    "int",
                    "float"
                ],
                "moenergies": [
                    "int",
                    "float"
                ],
                "occupations": [
                    "int",
                    "float"
                ]
            }
        },
        "MolecularProperty.run": {
            "name": "run",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "hamiltonian": [
                    "str"
                ],
                "spin": [
                    "str"
                ]
            }
        },
        "MolecularProperty.form_operators": {
            "name": "form_operators",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MolecularProperty.form_results": {
            "name": "form_results",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ResponseProperty.__init__": {
            "name": "__init__",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "program": [
                    "int",
                    "str",
                    "typing.Mapping",
                    "None",
                    "dict[, ]"
                ],
                "program_obj": [
                    "int",
                    "str",
                    "typing.Mapping",
                    "None",
                    "dict[, ]"
                ],
                "driver": [],
                "mocoeffs": [
                    "int",
                    "str",
                    "typing.Mapping",
                    "None",
                    "dict[, ]"
                ],
                "moenergies": [
                    "int",
                    "str",
                    "typing.Mapping",
                    "None",
                    "dict[, ]"
                ],
                "occupations": [
                    "int",
                    "str",
                    "typing.Mapping",
                    "None",
                    "dict[, ]"
                ]
            }
        },
        "ResponseProperty.form_operators": {
            "name": "form_operators",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ResponseProperty.form_results": {
            "name": "form_results",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TransitionProperty.__init__": {
            "name": "__init__",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "program": [
                    "int",
                    "None",
                    "str",
                    "typing.Any"
                ],
                "program_obj": [
                    "int",
                    "None",
                    "str",
                    "typing.Any"
                ],
                "driver": [
                    "int",
                    "None",
                    "str",
                    "typing.Any"
                ],
                "mocoeffs": [
                    "int",
                    "None",
                    "str",
                    "typing.Any"
                ],
                "moenergies": [
                    "int",
                    "None",
                    "str",
                    "typing.Any"
                ],
                "occupations": [
                    "int",
                    "None",
                    "str",
                    "typing.Any"
                ]
            }
        },
        "TransitionProperty.form_operators": {
            "name": "form_operators",
            "location": 108,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TransitionProperty.form_results": {
            "name": "form_results",
            "location": 112,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pyresponse-master/pyresponse/operators.py": {
        "Operator.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "label": [
                    "typing.Text"
                ],
                "is_imaginary": [
                    "bool"
                ],
                "is_spin_dependent": [
                    "bool"
                ],
                "triplet": [
                    "bool"
                ],
                "slice_idx": [
                    "int"
                ],
                "ao_integrals": [
                    "None",
                    "bool",
                    "Exception"
                ]
            }
        },
        "Operator.__str__": {
            "name": "__str__",
            "location": 39,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "Operator.calculate_ao_integrals": {
            "name": "calculate_ao_integrals",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Operator.form_rhs": {
            "name": "form_rhs",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "C": [
                    "str"
                ],
                "occupations": [
                    "int",
                    "tuple['cirq.Qid']",
                    "list[str]"
                ]
            }
        },
        "Operator.form_rhs_geometric": {
            "name": "form_rhs_geometric",
            "location": 122,
            "return": [],
            "arguments": {
                "self": [],
                "C": [
                    "bool",
                    "float",
                    "str",
                    "dict[str, list[typing.Any]]"
                ],
                "occupations": [
                    "dict[str, str]",
                    "dict[, ]",
                    "bool",
                    "tuple[bool]",
                    "str"
                ],
                "natoms": [
                    "dict[str, str]",
                    "dict[, ]",
                    "bool",
                    "tuple[bool]",
                    "str"
                ],
                "MO_full": [
                    "dict[str, str]",
                    "dict[, ]",
                    "bool",
                    "tuple[bool]",
                    "str"
                ],
                "mints": [
                    "dict[str, str]",
                    "dict[, ]",
                    "bool",
                    "tuple[bool]",
                    "str"
                ],
                "return_dict": [
                    "bool"
                ]
            }
        }
    },
    "pyresponse-master/pyresponse/solvers.py": {
        "Solver.__init__": {
            "name": "__init__",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mocoeffs": [
                    "int",
                    "float"
                ],
                "moenergies": [
                    "int",
                    "float"
                ],
                "occupations": [
                    "int",
                    "float"
                ]
            }
        },
        "Solver.form_tei_mo": {
            "name": "form_tei_mo",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "program": [
                    "bool",
                    "float",
                    "str"
                ],
                "program_obj": [
                    "bool",
                    "list[str]",
                    "float"
                ],
                "tei_mo_type": [
                    "typing.Callable[int, typing.Any]"
                ]
            }
        },
        "Solver.form_ranges_from_occupations": {
            "name": "form_ranges_from_occupations",
            "location": 131,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Solver.set_frequencies": {
            "name": "set_frequencies",
            "location": 151,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "frequencies": [
                    "None",
                    "float",
                    "str",
                    "int"
                ]
            }
        },
        "Solver.add_operator": {
            "name": "add_operator",
            "location": 160,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "operator": [
                    "int",
                    "str",
                    "None"
                ]
            }
        },
        "Solver.run": {
            "name": "run",
            "location": 176,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "hamiltonian": [
                    "str",
                    "bool"
                ],
                "spin": [
                    "str",
                    "bool"
                ],
                "program": [
                    "str",
                    "bool"
                ],
                "program_obj": [
                    "str",
                    "bool"
                ]
            }
        },
        "LineqSolver.__init__": {
            "name": "__init__",
            "location": 183,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mocoeffs": [
                    "bool",
                    "dict[str, typing.Any]",
                    "typing.Callable[A, bool]"
                ],
                "moenergies": [
                    "bool",
                    "dict[str, typing.Any]",
                    "typing.Callable[A, bool]"
                ],
                "occupations": [
                    "bool",
                    "dict[str, typing.Any]",
                    "typing.Callable[A, bool]"
                ]
            }
        },
        "ExactLineqSolver.__init__": {
            "name": "__init__",
            "location": 194,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mocoeffs": [
                    "bool",
                    "dict[str, typing.Any]",
                    "typing.Callable[A, bool]"
                ],
                "moenergies": [
                    "bool",
                    "dict[str, typing.Any]",
                    "typing.Callable[A, bool]"
                ],
                "occupations": [
                    "bool",
                    "dict[str, typing.Any]",
                    "typing.Callable[A, bool]"
                ]
            }
        },
        "ExactLineqSolver.form_explicit_hessian": {
            "name": "form_explicit_hessian",
            "location": 199,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "hamiltonian": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ],
                "spin": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ],
                "frequency": [
                    "None",
                    "int"
                ]
            }
        },
        "ExactLineqSolver.invert_explicit_hessian": {
            "name": "invert_explicit_hessian",
            "location": 430,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ExactLineqSolver.form_response_vectors": {
            "name": "form_response_vectors",
            "location": 433,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ExactLineqSolver.run": {
            "name": "run",
            "location": 505,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "hamiltonian": [
                    "str",
                    "int",
                    "list[]"
                ],
                "spin": [
                    "str",
                    "int",
                    "list[]"
                ],
                "program": [
                    "bool",
                    "str",
                    "None"
                ],
                "program_obj": [
                    "typing.Iterable[list[T]]",
                    "bool"
                ]
            }
        },
        "ExactInv.__init__": {
            "name": "__init__",
            "location": 519,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mocoeffs": [
                    "int",
                    "tuple[typing.Union[int,int]]",
                    "str"
                ],
                "moenergies": [
                    "int",
                    "tuple[typing.Union[int,int]]",
                    "str"
                ],
                "occupations": [
                    "int",
                    "tuple[typing.Union[int,int]]",
                    "str"
                ]
            }
        },
        "ExactInv.invert_explicit_hessian": {
            "name": "invert_explicit_hessian",
            "location": 534,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ExactInvCholesky.__init__": {
            "name": "__init__",
            "location": 555,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mocoeffs": [
                    "bool",
                    "dict[str, typing.Any]",
                    "typing.Callable[A, bool]"
                ],
                "moenergies": [
                    "bool",
                    "dict[str, typing.Any]",
                    "typing.Callable[A, bool]"
                ],
                "occupations": [
                    "bool",
                    "dict[str, typing.Any]",
                    "typing.Callable[A, bool]"
                ]
            }
        },
        "ExactInvCholesky.invert_explicit_hessian": {
            "name": "invert_explicit_hessian",
            "location": 560,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IterativeLinEqSolver.__init__": {
            "name": "__init__",
            "location": 594,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mocoeffs": [
                    "bool",
                    "dict[str, typing.Any]",
                    "typing.Callable[A, bool]"
                ],
                "moenergies": [
                    "bool",
                    "dict[str, typing.Any]",
                    "typing.Callable[A, bool]"
                ],
                "occupations": [
                    "bool",
                    "dict[str, typing.Any]",
                    "typing.Callable[A, bool]"
                ],
                "jk_generator": [
                    "int",
                    "float"
                ]
            }
        },
        "IterativeLinEqSolver.run": {
            "name": "run",
            "location": 614,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "hamiltonian": [
                    "str",
                    "int"
                ],
                "spin": [
                    "str",
                    "int"
                ],
                "program": [
                    "str"
                ],
                "program_obj": [
                    "str",
                    "bool"
                ]
            }
        },
        "IterativeLinEqSolver._run": {
            "name": "_run",
            "location": 623,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "hamiltonian": [
                    "str",
                    "bool"
                ],
                "spin": [
                    "str",
                    "bool"
                ],
                "omega": [
                    "str",
                    "int",
                    "list[]"
                ],
                "maxiter": [
                    "int",
                    "list[]"
                ],
                "conv": [
                    "str",
                    "int",
                    "list[]"
                ]
            }
        },
        "EigSolver.__init__": {
            "name": "__init__",
            "location": 710,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mocoeffs": [
                    "bool",
                    "dict[str, typing.Any]",
                    "typing.Callable[A, bool]"
                ],
                "moenergies": [
                    "bool",
                    "dict[str, typing.Any]",
                    "typing.Callable[A, bool]"
                ],
                "occupations": [
                    "bool",
                    "dict[str, typing.Any]",
                    "typing.Callable[A, bool]"
                ]
            }
        },
        "EigSolver.norm_xy": {
            "name": "norm_xy",
            "location": 716,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "z": [],
                "nocc": [
                    "int",
                    "list[]",
                    "str"
                ],
                "nvirt": [
                    "int",
                    "list[]",
                    "str"
                ]
            }
        },
        "EigSolverTDA.__init__": {
            "name": "__init__",
            "location": 728,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mocoeffs": [
                    "bool",
                    "dict[str, typing.Any]",
                    "typing.Callable[A, bool]"
                ],
                "moenergies": [
                    "bool",
                    "dict[str, typing.Any]",
                    "typing.Callable[A, bool]"
                ],
                "occupations": [
                    "bool",
                    "dict[str, typing.Any]",
                    "typing.Callable[A, bool]"
                ]
            }
        },
        "ExactDiagonalizationSolver.__init__": {
            "name": "__init__",
            "location": 739,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mocoeffs": [
                    "bool",
                    "dict[str, typing.Any]",
                    "typing.Callable[A, bool]"
                ],
                "moenergies": [
                    "bool",
                    "dict[str, typing.Any]",
                    "typing.Callable[A, bool]"
                ],
                "occupations": [
                    "bool",
                    "dict[str, typing.Any]",
                    "typing.Callable[A, bool]"
                ]
            }
        },
        "ExactDiagonalizationSolver.form_explicit_hessian": {
            "name": "form_explicit_hessian",
            "location": 744,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "hamiltonian": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ],
                "spin": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ],
                "frequency": [
                    "int",
                    "None"
                ]
            }
        },
        "ExactDiagonalizationSolver.diagonalize_explicit_hessian": {
            "name": "diagonalize_explicit_hessian",
            "location": 808,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ExactDiagonalizationSolver.run": {
            "name": "run",
            "location": 828,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "hamiltonian": [
                    "str",
                    "float",
                    "bool"
                ],
                "spin": [
                    "str",
                    "float",
                    "bool"
                ],
                "program": [
                    "str",
                    "float"
                ],
                "program_obj": [
                    "typing.Iterable[list[T]]",
                    "bool"
                ]
            }
        },
        "ExactDiagonalizationSolverTDA.__init__": {
            "name": "__init__",
            "location": 844,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mocoeffs": [
                    "bool",
                    "dict[str, typing.Any]",
                    "typing.Callable[A, bool]"
                ],
                "moenergies": [
                    "bool",
                    "dict[str, typing.Any]",
                    "typing.Callable[A, bool]"
                ],
                "occupations": [
                    "bool",
                    "dict[str, typing.Any]",
                    "typing.Callable[A, bool]"
                ]
            }
        },
        "ExactDiagonalizationSolverTDA.form_explicit_hessian": {
            "name": "form_explicit_hessian",
            "location": 849,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "hamiltonian": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ],
                "spin": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ],
                "frequency": [
                    "int",
                    "None"
                ]
            }
        },
        "ExactDiagonalizationSolverTDA.diagonalize_explicit_hessian": {
            "name": "diagonalize_explicit_hessian",
            "location": 894,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pyresponse-master/pyresponse/td.py": {
        "TDHF.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "solver": [
                    "str",
                    "None"
                ]
            }
        },
        "TDHF.run": {
            "name": "run",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "hamiltonian": [
                    "str"
                ],
                "spin": [
                    "str"
                ],
                "program": [],
                "program_obj": []
            }
        },
        "TDHF.form_results": {
            "name": "form_results",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TDHF.print_results": {
            "name": "print_results",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TDHF.print_results_nwchem": {
            "name": "print_results_nwchem",
            "location": 88,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TDHF.print_results_orca": {
            "name": "print_results_orca",
            "location": 118,
            "return": [],
            "arguments": {
                "self": [],
                "cutoff": [
                    "float"
                ]
            }
        },
        "TDA.__init__": {
            "name": "__init__",
            "location": 174,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "solver": [
                    "str",
                    "int"
                ]
            }
        },
        "TDA.form_results": {
            "name": "form_results",
            "location": 178,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pyresponse-master/pyresponse/utils.py": {
        "form_results": {
            "name": "form_results",
            "location": 11,
            "return": [
                "int",
                "list[]",
                "dict[str, typing.Any]",
                "str"
            ],
            "arguments": {
                "vecs_property": [
                    "str",
                    "list[]",
                    "bytes"
                ],
                "vecs_response": [
                    "str",
                    "list[int]"
                ]
            }
        },
        "np_load": {
            "name": "np_load",
            "location": 19,
            "return": [
                "str",
                "None",
                "dict[str, typing.Any]",
                "int",
                "np_@_lib_@_npyio_@_NpzFile"
            ],
            "arguments": {
                "filename": [
                    "str",
                    "bytes",
                    "int"
                ]
            }
        },
        "parse_int_file_2": {
            "name": "parse_int_file_2",
            "location": 31,
            "return": [],
            "arguments": {
                "filename": [
                    "str"
                ],
                "dim": [
                    "str",
                    "bool"
                ]
            }
        },
        "repack_matrix_to_vector": {
            "name": "repack_matrix_to_vector",
            "location": 42,
            "return": [],
            "arguments": {
                "mat": [
                    "float",
                    "int",
                    "None",
                    "str"
                ]
            }
        },
        "repack_vector_to_matrix": {
            "name": "repack_vector_to_matrix",
            "location": 46,
            "return": [],
            "arguments": {
                "vec": [],
                "shape": [
                    "float",
                    "int",
                    "None",
                    "str"
                ]
            }
        },
        "get_reference_value_from_file": {
            "name": "get_reference_value_from_file",
            "location": 50,
            "return": [
                "float"
            ],
            "arguments": {
                "filename": [
                    "str"
                ],
                "hamiltonian": [
                    "str",
                    "int"
                ],
                "spin": [
                    "str",
                    "int"
                ],
                "frequency": [
                    "str",
                    "int"
                ],
                "label_1": [
                    "str",
                    "int"
                ],
                "label_2": [
                    "str",
                    "int"
                ]
            }
        },
        "read_file_occupations": {
            "name": "read_file_occupations",
            "location": 84,
            "return": [],
            "arguments": {
                "filename": [
                    "str"
                ]
            }
        },
        "read_file_1": {
            "name": "read_file_1",
            "location": 93,
            "return": [],
            "arguments": {
                "filename": [
                    "str"
                ]
            }
        },
        "read_file_2": {
            "name": "read_file_2",
            "location": 103,
            "return": [],
            "arguments": {
                "filename": [
                    "str"
                ]
            }
        },
        "read_file_3": {
            "name": "read_file_3",
            "location": 114,
            "return": [],
            "arguments": {
                "filename": [
                    "str"
                ]
            }
        },
        "read_file_4": {
            "name": "read_file_4",
            "location": 124,
            "return": [],
            "arguments": {
                "filename": [
                    "str"
                ]
            }
        },
        "occupations_from_sirifc": {
            "name": "occupations_from_sirifc",
            "location": 134,
            "return": [],
            "arguments": {
                "ifc": [
                    "str",
                    "tuple[str]",
                    "int"
                ]
            }
        },
        "fix_mocoeffs_shape": {
            "name": "fix_mocoeffs_shape",
            "location": 170,
            "return": [
                "list[S]",
                "set[str]",
                "S"
            ],
            "arguments": {
                "mocoeffs": [
                    "list[S]",
                    "set[str]"
                ]
            }
        },
        "fix_moenergies_shape": {
            "name": "fix_moenergies_shape",
            "location": 185,
            "return": [
                "list[S]",
                "set[str]",
                "S"
            ],
            "arguments": {
                "moenergies": [
                    "list[S]",
                    "set[str]"
                ]
            }
        },
        "read_dalton_propfile": {
            "name": "read_dalton_propfile",
            "location": 225,
            "return": [
                "list[]"
            ],
            "arguments": {
                "tmpdir": [
                    "int"
                ]
            }
        },
        "tensor_printer": {
            "name": "tensor_printer",
            "location": 237,
            "return": [
                "tuple[typing.Union[int,dict[str, dict[str, str]],str,typing.Iterator,float]]"
            ],
            "arguments": {
                "tensor": [
                    "str",
                    "None",
                    "int"
                ]
            }
        },
        "form_vec_energy_differences": {
            "name": "form_vec_energy_differences",
            "location": 255,
            "return": [],
            "arguments": {
                "moene_occ": [],
                "moene_virt": []
            }
        },
        "screen": {
            "name": "screen",
            "location": 271,
            "return": [],
            "arguments": {
                "mat": [],
                "thresh": [
                    "float"
                ]
            }
        },
        "matsym": {
            "name": "matsym",
            "location": 291,
            "return": [
                "int"
            ],
            "arguments": {
                "amat": [],
                "thrzer": [
                    "float"
                ]
            }
        },
        "flip_triangle_sign": {
            "name": "flip_triangle_sign",
            "location": 332,
            "return": [],
            "arguments": {
                "A": [],
                "triangle": [
                    "typing.Text"
                ]
            }
        },
        "form_first_hyperpolarizability_averages": {
            "name": "form_first_hyperpolarizability_averages",
            "location": 359,
            "return": [
                "tuple[float]"
            ],
            "arguments": {
                "beta": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ]
            }
        },
        "form_indices_orbwin": {
            "name": "form_indices_orbwin",
            "location": 370,
            "return": [
                "list[tuple[]]"
            ],
            "arguments": {
                "nocc": [
                    "int"
                ],
                "nvirt": [
                    "int"
                ]
            }
        },
        "form_indices_zero": {
            "name": "form_indices_zero",
            "location": 375,
            "return": [
                "list[tuple[]]"
            ],
            "arguments": {
                "nocc": [
                    "int",
                    "str"
                ],
                "nvirt": [
                    "int",
                    "str"
                ]
            }
        },
        "Splitter.__init__": {
            "name": "__init__",
            "location": 146,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "widths": [
                    "int",
                    "typing.Sequence[int]",
                    "str",
                    "None"
                ]
            }
        },
        "Splitter.split": {
            "name": "split",
            "location": 150,
            "return": [],
            "arguments": {
                "self": [],
                "line": [
                    "str",
                    "int",
                    "list[str]"
                ],
                "truncate": [
                    "bool"
                ]
            }
        }
    },
    "pyresponse-master/pyresponse/_version.py": {
        "get_keywords": {
            "name": "get_keywords",
            "location": 21,
            "return": [],
            "arguments": {}
        },
        "get_config": {
            "name": "get_config",
            "location": 38,
            "return": [],
            "arguments": {}
        },
        "register_vcs_handler": {
            "name": "register_vcs_handler",
            "location": 60,
            "return": [],
            "arguments": {
                "vcs": [],
                "method": []
            }
        },
        "run_command": {
            "name": "run_command",
            "location": 73,
            "return": [],
            "arguments": {
                "commands": [],
                "args": [],
                "cwd": [],
                "verbose": [],
                "hide_stderr": [],
                "env": []
            }
        },
        "versions_from_parentdir": {
            "name": "versions_from_parentdir",
            "location": 112,
            "return": [],
            "arguments": {
                "parentdir_prefix": [],
                "root": [],
                "verbose": []
            }
        },
        "git_get_keywords": {
            "name": "git_get_keywords",
            "location": 144,
            "return": [],
            "arguments": {
                "versionfile_abs": []
            }
        },
        "git_versions_from_keywords": {
            "name": "git_versions_from_keywords",
            "location": 173,
            "return": [],
            "arguments": {
                "keywords": [],
                "tag_prefix": [],
                "verbose": []
            }
        },
        "git_pieces_from_vcs": {
            "name": "git_pieces_from_vcs",
            "location": 235,
            "return": [],
            "arguments": {
                "tag_prefix": [],
                "root": [],
                "verbose": [],
                "run_command": []
            }
        },
        "plus_or_dot": {
            "name": "plus_or_dot",
            "location": 333,
            "return": [],
            "arguments": {
                "pieces": []
            }
        },
        "render_pep440": {
            "name": "render_pep440",
            "location": 340,
            "return": [],
            "arguments": {
                "pieces": []
            }
        },
        "render_pep440_pre": {
            "name": "render_pep440_pre",
            "location": 364,
            "return": [],
            "arguments": {
                "pieces": []
            }
        },
        "render_pep440_post": {
            "name": "render_pep440_post",
            "location": 380,
            "return": [],
            "arguments": {
                "pieces": []
            }
        },
        "render_pep440_old": {
            "name": "render_pep440_old",
            "location": 407,
            "return": [],
            "arguments": {
                "pieces": []
            }
        },
        "render_git_describe": {
            "name": "render_git_describe",
            "location": 429,
            "return": [],
            "arguments": {
                "pieces": []
            }
        },
        "render_git_describe_long": {
            "name": "render_git_describe_long",
            "location": 449,
            "return": [],
            "arguments": {
                "pieces": []
            }
        },
        "render": {
            "name": "render",
            "location": 469,
            "return": [],
            "arguments": {
                "pieces": [],
                "style": []
            }
        },
        "get_versions": {
            "name": "get_versions",
            "location": 507,
            "return": [],
            "arguments": {}
        },
        "register_vcs_handler.decorate": {
            "name": "decorate",
            "location": 63,
            "return": [],
            "arguments": {
                "f": []
            }
        }
    },
    "pyresponse-master/pyresponse/__init__.py": {},
    "pyresponse-master/pyresponse/dalton/utils.py": {
        "clean_dalton_label": {
            "name": "clean_dalton_label",
            "location": 4,
            "return": [],
            "arguments": {
                "original_label": [
                    "str"
                ]
            }
        },
        "dalton_label_to_operator": {
            "name": "dalton_label_to_operator",
            "location": 15,
            "return": [],
            "arguments": {
                "label": [
                    "dict[typing.Any, int]",
                    "list[]"
                ]
            }
        }
    },
    "pyresponse-master/pyresponse/dalton/__init__.py": {},
    "pyresponse-master/pyresponse/data/__init__.py": {},
    "pyresponse-master/pyresponse/properties/ecd.py": {
        "ECD.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "program": [
                    "int",
                    "None",
                    "str",
                    "typing.Any",
                    "typing.Callable[..., str]"
                ],
                "program_obj": [
                    "int",
                    "None",
                    "str",
                    "typing.Any",
                    "typing.Callable[..., str]"
                ],
                "driver": [
                    "int",
                    "None",
                    "str",
                    "typing.Any",
                    "typing.Callable[..., str]"
                ],
                "mocoeffs": [
                    "int",
                    "None",
                    "str",
                    "typing.Any",
                    "typing.Callable[..., str]"
                ],
                "moenergies": [
                    "int",
                    "None",
                    "str",
                    "typing.Any",
                    "typing.Callable[..., str]"
                ],
                "occupations": [
                    "int",
                    "None",
                    "str",
                    "typing.Any",
                    "typing.Callable[..., str]"
                ]
            }
        },
        "ECD.form_operators": {
            "name": "form_operators",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ECD.form_results": {
            "name": "form_results",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ECD.print_results_nwchem": {
            "name": "print_results_nwchem",
            "location": 108,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ECD.print_results_orca": {
            "name": "print_results_orca",
            "location": 177,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ECD.print_results_qchem": {
            "name": "print_results_qchem",
            "location": 252,
            "return": [],
            "arguments": {
                "self": [],
                "cutoff": [
                    "float"
                ]
            }
        }
    },
    "pyresponse-master/pyresponse/properties/electric.py": {
        "Polarizability.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "program": [
                    "int",
                    "str",
                    "typing.Mapping",
                    "None",
                    "dict[, ]"
                ],
                "program_obj": [
                    "int",
                    "str",
                    "typing.Mapping",
                    "None",
                    "dict[, ]"
                ],
                "driver": [
                    "int",
                    "str",
                    "typing.Mapping",
                    "None",
                    "dict[, ]"
                ],
                "mocoeffs": [
                    "int",
                    "str",
                    "typing.Mapping",
                    "None",
                    "dict[, ]"
                ],
                "moenergies": [
                    "int",
                    "str",
                    "typing.Mapping",
                    "None",
                    "dict[, ]"
                ],
                "occupations": [
                    "int",
                    "str",
                    "typing.Mapping",
                    "None",
                    "dict[, ]"
                ]
            }
        },
        "Polarizability.form_operators": {
            "name": "form_operators",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Polarizability.form_results": {
            "name": "form_results",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pyresponse-master/pyresponse/properties/magnetic.py": {
        "Magnetizability.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "program": [
                    "int",
                    "None",
                    "str",
                    "typing.Any"
                ],
                "program_obj": [
                    "int",
                    "None",
                    "str",
                    "typing.Any"
                ],
                "driver": [
                    "int",
                    "None",
                    "str",
                    "typing.Any"
                ],
                "mocoeffs": [
                    "int",
                    "None",
                    "str",
                    "typing.Any"
                ],
                "moenergies": [
                    "int",
                    "None",
                    "str",
                    "typing.Any"
                ],
                "occupations": [
                    "int",
                    "None",
                    "str",
                    "typing.Any"
                ],
                "use_giao": [
                    "bool"
                ]
            }
        },
        "Magnetizability.form_operators": {
            "name": "form_operators",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Magnetizability.form_results": {
            "name": "form_results",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ElectronicGTensor.__init__": {
            "name": "__init__",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "program": [
                    "int",
                    "str",
                    "typing.Mapping",
                    "None",
                    "dict[, ]"
                ],
                "program_obj": [],
                "driver": [
                    "int",
                    "str",
                    "typing.Mapping",
                    "None",
                    "dict[, ]"
                ],
                "mocoeffs": [
                    "str"
                ],
                "moenergies": [
                    "int",
                    "str",
                    "typing.Mapping",
                    "None",
                    "dict[, ]"
                ],
                "occupations": [
                    "str",
                    "typing.Iterable[str]",
                    "int"
                ]
            }
        },
        "ElectronicGTensor.form_operators": {
            "name": "form_operators",
            "location": 116,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ElectronicGTensor.form_results": {
            "name": "form_results",
            "location": 162,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pyresponse-master/pyresponse/properties/optrot.py": {
        "ORD.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "program": [
                    "int",
                    "None",
                    "typing.Any",
                    "str"
                ],
                "program_obj": [
                    "int",
                    "None",
                    "typing.Any",
                    "str"
                ],
                "driver": [
                    "int",
                    "None",
                    "typing.Any",
                    "str"
                ],
                "mocoeffs": [
                    "int",
                    "None",
                    "typing.Any",
                    "str"
                ],
                "moenergies": [
                    "int",
                    "None",
                    "typing.Any",
                    "str"
                ],
                "occupations": [
                    "int",
                    "None",
                    "typing.Any",
                    "str"
                ]
            }
        },
        "ORD.form_operators": {
            "name": "form_operators",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ORD.form_results": {
            "name": "form_results",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pyresponse-master/pyresponse/properties/__init__.py": {},
    "pyresponse-master/pyresponse/psi4/integrals.py": {
        "compute_jk": {
            "name": "compute_jk",
            "location": 39,
            "return": [
                "tuple[list[]]",
                "tuple[]"
            ],
            "arguments": {
                "jk": [],
                "C_left": [],
                "C_right": [
                    "None",
                    "bool",
                    "str",
                    "list[str]"
                ]
            }
        },
        "IntegralsPsi4.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "wfn_or_mol": [
                    "str",
                    "None"
                ]
            }
        },
        "IntegralsPsi4._compute": {
            "name": "_compute",
            "location": 27,
            "return": [],
            "arguments": {
                "self": [],
                "label": [
                    "bytes"
                ]
            }
        },
        "JKPsi4.__init__": {
            "name": "__init__",
            "location": 133,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "wfn": []
            }
        },
        "JKPsi4.compute_from_density": {
            "name": "compute_from_density",
            "location": 139,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "D": [
                    "dict[, ]",
                    "typing.Callable[, ]",
                    "int"
                ]
            }
        },
        "JKPsi4.compute_from_mocoeffs": {
            "name": "compute_from_mocoeffs",
            "location": 142,
            "return": [],
            "arguments": {
                "self": [],
                "C_left": [
                    "str",
                    "int",
                    "typing.Type",
                    "dict[str, int]",
                    "float"
                ],
                "C_right": [
                    "None",
                    "str",
                    "int",
                    "typing.Type",
                    "dict[str, int]",
                    "float"
                ]
            }
        }
    },
    "pyresponse-master/pyresponse/psi4/molecules.py": {
        "molecule_water_sto3g": {
            "name": "molecule_water_sto3g",
            "location": 8,
            "return": [],
            "arguments": {}
        },
        "molecule_physicists_water_sto3g": {
            "name": "molecule_physicists_water_sto3g",
            "location": 29,
            "return": [],
            "arguments": {}
        },
        "molecule_physicists_water_augccpvdz": {
            "name": "molecule_physicists_water_augccpvdz",
            "location": 47,
            "return": [],
            "arguments": {}
        },
        "molecule_glycine_sto3g": {
            "name": "molecule_glycine_sto3g",
            "location": 65,
            "return": [],
            "arguments": {}
        },
        "molecule_trithiolane_sto3g": {
            "name": "molecule_trithiolane_sto3g",
            "location": 83,
            "return": [],
            "arguments": {}
        },
        "hydrogen_atom_sto3g": {
            "name": "hydrogen_atom_sto3g",
            "location": 101,
            "return": [],
            "arguments": {}
        },
        "molecule_bc2h4_cation_sto3g": {
            "name": "molecule_bc2h4_cation_sto3g",
            "location": 121,
            "return": [],
            "arguments": {}
        },
        "molecule_lih_cation_sto3g": {
            "name": "molecule_lih_cation_sto3g",
            "location": 151,
            "return": [],
            "arguments": {}
        },
        "molecule_0w4a_dication_321g": {
            "name": "molecule_0w4a_dication_321g",
            "location": 169,
            "return": [],
            "arguments": {}
        },
        "molecule_bh_cation_def2_svp": {
            "name": "molecule_bh_cation_def2_svp",
            "location": 187,
            "return": [],
            "arguments": {}
        }
    },
    "pyresponse-master/pyresponse/psi4/utils.py": {
        "occupations_from_psi4wfn": {
            "name": "occupations_from_psi4wfn",
            "location": 8,
            "return": [],
            "arguments": {
                "wfn": []
            }
        },
        "mocoeffs_from_psi4wfn": {
            "name": "mocoeffs_from_psi4wfn",
            "location": 21,
            "return": [],
            "arguments": {
                "wfn": []
            }
        },
        "moenergies_from_psi4wfn": {
            "name": "moenergies_from_psi4wfn",
            "location": 33,
            "return": [],
            "arguments": {
                "wfn": []
            }
        }
    },
    "pyresponse-master/pyresponse/psi4/__init__.py": {},
    "pyresponse-master/pyresponse/pyscf/ao2mo.py": {
        "AO2MOpyscf.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "C": [
                    "float",
                    "bool",
                    "dict[str, typing.Any]"
                ],
                "verbose": [
                    "int"
                ],
                "pyscfmol": [
                    "None",
                    "int",
                    "float"
                ]
            }
        },
        "AO2MOpyscf.perform_rhf_full": {
            "name": "perform_rhf_full",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AO2MOpyscf.perform_rhf_partial": {
            "name": "perform_rhf_partial",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AO2MOpyscf.perform_uhf_full": {
            "name": "perform_uhf_full",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AO2MOpyscf.perform_uhf_partial": {
            "name": "perform_uhf_partial",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pyresponse-master/pyresponse/pyscf/helpers.py": {
        "calc_center_of_mass_pyscf": {
            "name": "calc_center_of_mass_pyscf",
            "location": 15,
            "return": [],
            "arguments": {
                "pyscfmol": []
            }
        },
        "calc_center_of_electronic_charge_pyscf": {
            "name": "calc_center_of_electronic_charge_pyscf",
            "location": 22,
            "return": [],
            "arguments": {
                "D": [
                    "typing.AbstractSet",
                    "typing.Callable[, ]"
                ],
                "pyscfmol": []
            }
        },
        "electronic_dipole_contribution_pyscf": {
            "name": "electronic_dipole_contribution_pyscf",
            "location": 32,
            "return": [],
            "arguments": {
                "D": [
                    "int"
                ],
                "pyscfmol": [],
                "origin_in_bohrs": [
                    "float",
                    "int",
                    "typing.Mapping"
                ]
            }
        },
        "calculate_dipole_pyscf": {
            "name": "calculate_dipole_pyscf",
            "location": 62,
            "return": [],
            "arguments": {
                "nuccoords": [
                    "int",
                    "float",
                    "list[typing.Any]",
                    "None"
                ],
                "nuccharges": [
                    "int",
                    "float",
                    "list[typing.Any]",
                    "None"
                ],
                "origin": [
                    "tuple[]",
                    "int",
                    "float",
                    "None"
                ],
                "D": [
                    "float",
                    "int"
                ],
                "pyscfmol": [
                    "float",
                    "int"
                ],
                "do_print": [
                    "bool"
                ]
            }
        },
        "calculate_origin_pyscf": {
            "name": "calculate_origin_pyscf",
            "location": 102,
            "return": [
                "int"
            ],
            "arguments": {
                "origin_string": [
                    "str",
                    "bytes"
                ],
                "nuccoords": [
                    "str",
                    "int",
                    "list[str]",
                    "None"
                ],
                "nuccharges": [
                    "str"
                ],
                "D": [
                    "float",
                    "str",
                    "int"
                ],
                "pyscfmol": [
                    "float",
                    "str",
                    "int"
                ],
                "do_print": [
                    "bool"
                ]
            }
        }
    },
    "pyresponse-master/pyresponse/pyscf/integrals.py": {
        "IntegralsPyscf.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pyscfmol": [
                    "int",
                    "float"
                ]
            }
        },
        "IntegralsPyscf._compute": {
            "name": "_compute",
            "location": 27,
            "return": [],
            "arguments": {
                "self": [],
                "label": [
                    "list[int]",
                    "str",
                    "bool"
                ]
            }
        },
        "JKPyscf.__init__": {
            "name": "__init__",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pyscfmol": [
                    "int",
                    "float"
                ]
            }
        },
        "JKPyscf.compute_from_density": {
            "name": "compute_from_density",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "D": [
                    "dict[, ]",
                    "typing.Callable[, ]",
                    "int"
                ]
            }
        },
        "JKPyscf.compute_from_mocoeffs": {
            "name": "compute_from_mocoeffs",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "C_left": [
                    "list[str]",
                    "bool",
                    "None",
                    "str"
                ],
                "C_right": [
                    "None",
                    "list[str]",
                    "bool",
                    "str"
                ]
            }
        }
    },
    "pyresponse-master/pyresponse/pyscf/molecules.py": {
        "molecule_water_sto3g_angstrom": {
            "name": "molecule_water_sto3g_angstrom",
            "location": 6,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "verbose": [
                    "int"
                ]
            }
        },
        "molecule_water_sto3g": {
            "name": "molecule_water_sto3g",
            "location": 24,
            "return": [
                "str",
                "dict[str, typing.Any]",
                "None",
                "bool"
            ],
            "arguments": {
                "verbose": [
                    "int"
                ]
            }
        },
        "molecule_physicists_water_sto3g": {
            "name": "molecule_physicists_water_sto3g",
            "location": 41,
            "return": [
                "str",
                "dict[str, typing.Any]",
                "None",
                "bool"
            ],
            "arguments": {
                "verbose": [
                    "int"
                ]
            }
        },
        "molecule_physicists_water_augccpvdz": {
            "name": "molecule_physicists_water_augccpvdz",
            "location": 58,
            "return": [
                "str",
                "dict[str, typing.Any]",
                "None",
                "bool"
            ],
            "arguments": {
                "verbose": [
                    "int"
                ]
            }
        },
        "molecule_glycine_sto3g": {
            "name": "molecule_glycine_sto3g",
            "location": 75,
            "return": [
                "str",
                "dict[str, typing.Any]",
                "None",
                "bool"
            ],
            "arguments": {
                "verbose": [
                    "int"
                ]
            }
        },
        "molecule_trithiolane_sto3g": {
            "name": "molecule_trithiolane_sto3g",
            "location": 92,
            "return": [
                "str",
                "dict[str, typing.Any]",
                "None",
                "bool"
            ],
            "arguments": {
                "verbose": [
                    "int"
                ]
            }
        },
        "hydrogen_atom_sto3g": {
            "name": "hydrogen_atom_sto3g",
            "location": 109,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "verbose": [
                    "int"
                ]
            }
        },
        "molecule_bc2h4_cation_sto3g": {
            "name": "molecule_bc2h4_cation_sto3g",
            "location": 123,
            "return": [
                "str",
                "dict[str, typing.Any]",
                "None",
                "bool"
            ],
            "arguments": {
                "verbose": [
                    "int"
                ]
            }
        },
        "molecule_bc2h4_neutral_radical_sto3g": {
            "name": "molecule_bc2h4_neutral_radical_sto3g",
            "location": 140,
            "return": [
                "str",
                "list[str]",
                "list[]",
                "tuple[typing.Union[str,str]]"
            ],
            "arguments": {
                "verbose": [
                    "int"
                ]
            }
        },
        "molecule_lih_cation_sto3g": {
            "name": "molecule_lih_cation_sto3g",
            "location": 149,
            "return": [
                "str",
                "dict[str, typing.Any]",
                "None",
                "bool"
            ],
            "arguments": {
                "verbose": [
                    "int"
                ]
            }
        },
        "molecule_0w4a_dication_321g": {
            "name": "molecule_0w4a_dication_321g",
            "location": 166,
            "return": [
                "str",
                "dict[str, typing.Any]",
                "None",
                "bool"
            ],
            "arguments": {
                "verbose": [
                    "int"
                ]
            }
        },
        "molecule_bh_cation_def2_svp": {
            "name": "molecule_bh_cation_def2_svp",
            "location": 183,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "verbose": [
                    "int"
                ]
            }
        }
    },
    "pyresponse-master/pyresponse/pyscf/utils.py": {
        "occupations_from_pyscf_mol": {
            "name": "occupations_from_pyscf_mol",
            "location": 8,
            "return": [],
            "arguments": {
                "mol": [
                    "int",
                    "str",
                    "float"
                ],
                "C": [
                    "int",
                    "str",
                    "typing.Callable[, ]"
                ]
            }
        }
    },
    "pyresponse-master/pyresponse/pyscf/__init__.py": {},
    "pyresponse-master/pyresponse/tests/test_ao2mo.py": {
        "test_ao2mo_hand_against_pyscf_rhf_full": {
            "name": "test_ao2mo_hand_against_pyscf_rhf_full",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_ao2mo_hand_against_pyscf_rhf_partial": {
            "name": "test_ao2mo_hand_against_pyscf_rhf_partial",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "pyresponse-master/pyresponse/tests/test_calculators.py": {
        "calculate_disk_rhf": {
            "name": "calculate_disk_rhf",
            "location": 22,
            "return": [],
            "arguments": {
                "testcasedir": [
                    "bool"
                ],
                "hamiltonian": [],
                "spin": [
                    "typing.Callable[, ]"
                ],
                "frequency": [
                    "int"
                ],
                "label_1": [
                    "str",
                    "int",
                    "typing.Callable[, ]",
                    "list[]"
                ],
                "label_2": [
                    "str",
                    "int",
                    "typing.Callable[, ]",
                    "list[]"
                ]
            }
        },
        "calculate_disk_uhf": {
            "name": "calculate_disk_uhf",
            "location": 102,
            "return": [],
            "arguments": {
                "testcasedir": [
                    "bool"
                ],
                "hamiltonian": [],
                "spin": [
                    "typing.Callable[, ]"
                ],
                "frequency": [
                    "int"
                ],
                "label_1": [
                    "str",
                    "int",
                    "typing.Callable[, ]",
                    "list[]"
                ],
                "label_2": [
                    "str",
                    "int",
                    "typing.Callable[, ]",
                    "list[]"
                ]
            }
        },
        "calculate_rhf": {
            "name": "calculate_rhf",
            "location": 197,
            "return": [],
            "arguments": {
                "dalton_tmpdir": [
                    "bool"
                ],
                "hamiltonian": [
                    "typing.Any",
                    "None",
                    "str",
                    "typing.Iterable[str]"
                ],
                "spin": [
                    "bool",
                    "str",
                    "None",
                    "dict[, ]"
                ],
                "operator_label": [
                    "bool"
                ],
                "operator": [
                    "dict[str, typing.Any]",
                    "bool",
                    "str",
                    "BaseException"
                ],
                "source_moenergies": [
                    "str",
                    "None",
                    "int",
                    "tuple[int]"
                ],
                "source_mocoeffs": [
                    "str",
                    "None",
                    "int",
                    "tuple[int]"
                ],
                "source_operator": [
                    "bool"
                ]
            }
        },
        "calculate_uhf": {
            "name": "calculate_uhf",
            "location": 312,
            "return": [],
            "arguments": {
                "dalton_tmpdir": [
                    "bool"
                ],
                "hamiltonian": [
                    "typing.Any",
                    "None",
                    "str",
                    "typing.Iterable[str]"
                ],
                "spin": [
                    "bool",
                    "str",
                    "None",
                    "dict[, ]"
                ],
                "operator_label": [
                    "bool"
                ],
                "operator": [
                    "dict[str, typing.Any]",
                    "bool",
                    "str",
                    "BaseException"
                ],
                "source_moenergies": [
                    "str",
                    "None",
                    "int",
                    "tuple[int]"
                ],
                "source_mocoeffs": [
                    "str",
                    "None",
                    "int",
                    "tuple[int]"
                ],
                "source_operator": [
                    "bool"
                ]
            }
        }
    },
    "pyresponse-master/pyresponse/tests/test_final_result.py": {
        "test_final_result_rhf_h2o_sto3g_rpa_singlet": {
            "name": "test_final_result_rhf_h2o_sto3g_rpa_singlet",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_final_result_rhf_h2o_sto3g_rpa_triplet": {
            "name": "test_final_result_rhf_h2o_sto3g_rpa_triplet",
            "location": 99,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_final_result_rhf_h2o_sto3g_tda_singlet": {
            "name": "test_final_result_rhf_h2o_sto3g_tda_singlet",
            "location": 184,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_final_result_rhf_h2o_sto3g_tda_triplet": {
            "name": "test_final_result_rhf_h2o_sto3g_tda_triplet",
            "location": 267,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_as_many_as_possible_rhf_disk": {
            "name": "test_as_many_as_possible_rhf_disk",
            "location": 352,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_as_many_as_possible_uhf_disk": {
            "name": "test_as_many_as_possible_uhf_disk",
            "location": 359,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "pyresponse-master/pyresponse/tests/test_hydrogen.py": {},
    "pyresponse-master/pyresponse/tests/test_molecular_property.py": {
        "test_molecular_property": {
            "name": "test_molecular_property",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_response_property": {
            "name": "test_response_property",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_transition_property": {
            "name": "test_transition_property",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "pyresponse-master/pyresponse/tests/test_operators.py": {
        "test_dalton_label_to_operator": {
            "name": "test_dalton_label_to_operator",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "pyresponse-master/pyresponse/tests/test_rhf.py": {
        "test_explicit_rhf_outside_solver_off_diagonal_blocks": {
            "name": "test_explicit_rhf_outside_solver_off_diagonal_blocks",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "pyresponse-master/pyresponse/tests/test_runners.py": {
        "run_dalton_label_to_operator": {
            "name": "run_dalton_label_to_operator",
            "location": 11,
            "return": [
                "str",
                "list[str]"
            ],
            "arguments": {
                "dalton_label": [
                    "str",
                    "tuple[typing.Union[str,str]]",
                    "list[str]"
                ],
                "operator_label": [
                    "str",
                    "bool",
                    "tuple[int]",
                    "list[str]"
                ],
                "slice_idx": [
                    "int",
                    "tuple[typing.Union[int,int]]",
                    "bytes",
                    "list[list[int]]"
                ],
                "is_imaginary": [
                    "bool",
                    "dict[str, str]",
                    "str",
                    "typing.Mapping",
                    "None"
                ],
                "is_spin_dependent": [
                    "bool",
                    "dict[str, str]",
                    "str",
                    "typing.Mapping",
                    "None"
                ]
            }
        },
        "run_as_many_tests_as_possible_rhf_disk": {
            "name": "run_as_many_tests_as_possible_rhf_disk",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "testcase": [
                    "bool"
                ]
            }
        },
        "run_as_many_tests_as_possible_uhf_disk": {
            "name": "run_as_many_tests_as_possible_uhf_disk",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "testcase": [
                    "bool"
                ]
            }
        }
    },
    "pyresponse-master/pyresponse/tests/test_solvers.py": {
        "test_inversion": {
            "name": "test_inversion",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_final_result_rhf_h2o_sto3g_rpa_singlet_iter": {
            "name": "test_final_result_rhf_h2o_sto3g_rpa_singlet_iter",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "pyresponse-master/pyresponse/tests/test_td.py": {
        "test_HF_both_singlet_HF_STO3G": {
            "name": "test_HF_both_singlet_HF_STO3G",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "pyresponse-master/pyresponse/tests/test_uhf.py": {
        "test_explicit_uhf_from_rhf_outside_solver": {
            "name": "test_explicit_uhf_from_rhf_outside_solver",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_explicit_uhf_outside_solver": {
            "name": "test_explicit_uhf_outside_solver",
            "location": 148,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_explicit_uhf": {
            "name": "test_explicit_uhf",
            "location": 256,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "pyresponse-master/pyresponse/tests/test_uhf_partial_mo_trafo.py": {
        "test_explicit_uhf_outside_solver": {
            "name": "test_explicit_uhf_outside_solver",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_explicit_uhf": {
            "name": "test_explicit_uhf",
            "location": 148,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "pyresponse-master/pyresponse/tests/test_uncoupled.py": {
        "mol_atom": {
            "name": "mol_atom",
            "location": 12,
            "return": [],
            "arguments": {
                "symbol": [
                    "typing.Text"
                ],
                "charge": [
                    "int"
                ],
                "spin": [
                    "int"
                ],
                "basis": [
                    "typing.Text"
                ],
                "verbose": [
                    "int"
                ]
            }
        },
        "test_uncoupled_rhf": {
            "name": "test_uncoupled_rhf",
            "location": 191,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_uncoupled_uhf": {
            "name": "test_uncoupled_uhf",
            "location": 248,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "pyresponse-master/pyresponse/tests/test_utils.py": {
        "SplitterTest.test_default": {
            "name": "test_default",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SplitterTest.test_no_truncation": {
            "name": "test_no_truncation",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pyresponse-master/pyresponse/tests/__init__.py": {},
    "pyresponse-master/pyresponse/tests/properties/test_ecd.py": {
        "test_ECD_TDA_singlet_BC2H4_cation_HF_STO3G": {
            "name": "test_ECD_TDA_singlet_BC2H4_cation_HF_STO3G",
            "location": 154,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_ECD_RPA_singlet_BC2H4_cation_HF_STO3G": {
            "name": "test_ECD_RPA_singlet_BC2H4_cation_HF_STO3G",
            "location": 241,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "pyresponse-master/pyresponse/tests/properties/test_geometric_hessian.py": {
        "test_geometric_hessian_rhf_outside_solver_psi4numpy": {
            "name": "test_geometric_hessian_rhf_outside_solver_psi4numpy",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_geometric_hessian_rhf_outside_solver_chemists": {
            "name": "test_geometric_hessian_rhf_outside_solver_chemists",
            "location": 467,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_geometric_hessian_rhf_right_hand_side": {
            "name": "test_geometric_hessian_rhf_right_hand_side",
            "location": 876,
            "return": [],
            "arguments": {}
        },
        "test_atomic_polar_tensor_rhf": {
            "name": "test_atomic_polar_tensor_rhf",
            "location": 985,
            "return": [
                "dict[, ]"
            ],
            "arguments": {}
        }
    },
    "pyresponse-master/pyresponse/tests/properties/test_magnetic.py": {
        "test_magnetizability_rhf": {
            "name": "test_magnetizability_rhf",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_magnetizability_uhf": {
            "name": "test_magnetizability_uhf",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_electronicgtensor_tiny": {
            "name": "test_electronicgtensor_tiny",
            "location": 116,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_electronicgtensor_small": {
            "name": "test_electronicgtensor_small",
            "location": 151,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "pyresponse-master/pyresponse/tests/properties/test_optrot.py": {
        "test_ORD_RPA_singlet_BC2H4_cation_HF_STO3G": {
            "name": "test_ORD_RPA_singlet_BC2H4_cation_HF_STO3G",
            "location": 194,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_ORD_RPA_singlet_BC2H4_HF_STO3G": {
            "name": "test_ORD_RPA_singlet_BC2H4_HF_STO3G",
            "location": 262,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_ORD_RPA_singlet_trithiolane_HF_STO3G": {
            "name": "test_ORD_RPA_singlet_trithiolane_HF_STO3G",
            "location": 321,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "pyresponse-master/pyresponse/tests/properties/test_quadratic.py": {
        "test_first_hyperpolarizability_static_rhf_wigner_explicit": {
            "name": "test_first_hyperpolarizability_static_rhf_wigner_explicit",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_first_hyperpolarizability_shg_rhf_wigner_explicit": {
            "name": "test_first_hyperpolarizability_shg_rhf_wigner_explicit",
            "location": 233,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_first_hyperpolarizability_eope_rhf_wigner_explicit": {
            "name": "test_first_hyperpolarizability_eope_rhf_wigner_explicit",
            "location": 557,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_first_hyperpolarizability_or_rhf_wigner_explicit": {
            "name": "test_first_hyperpolarizability_or_rhf_wigner_explicit",
            "location": 784,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "pyresponse-master/pyresponse/tests/properties/test_quadratic_psi4numpy.py": {
        "test_first_hyperpolarizability_shg_rhf_wigner_explicit_psi4numpy_pyscf_small": {
            "name": "test_first_hyperpolarizability_shg_rhf_wigner_explicit_psi4numpy_pyscf_small",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_first_hyperpolarizability_shg_rhf_wigner_explicit_psi4numpy_pyscf_large": {
            "name": "test_first_hyperpolarizability_shg_rhf_wigner_explicit_psi4numpy_pyscf_large",
            "location": 302,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "pyresponse-master/pyresponse/tests/psi4/test_integrals_psi4.py": {
        "test_integrals_psi4": {
            "name": "test_integrals_psi4",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_jk_psi4": {
            "name": "test_jk_psi4",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "pyresponse-master/pyresponse/tests/pyscf/test_integrals_pyscf.py": {
        "test_integrals_pyscf": {
            "name": "test_integrals_pyscf",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_jk_pyscf": {
            "name": "test_jk_pyscf",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    }
}
{
    "python-alerta-client-master/setup.py": {
        "read": {
            "name": "read",
            "location": 8,
            "return": [],
            "arguments": {
                "filename": [
                    "str"
                ]
            }
        }
    },
    "python-alerta-client-master/alertaclient/api.py": {
        "Client.__init__": {
            "name": "__init__",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "endpoint": [
                    "None",
                    "str",
                    "dict[str, str]"
                ],
                "key": [
                    "None",
                    "str"
                ],
                "secret": [
                    "None",
                    "str",
                    "dict[str, int]"
                ],
                "token": [
                    "None",
                    "str",
                    "dict[str, int]"
                ],
                "username": [
                    "None",
                    "str",
                    "dict[str, int]"
                ],
                "password": [
                    "None",
                    "str",
                    "dict[str, int]"
                ],
                "timeout": [
                    "float"
                ],
                "ssl_verify": [
                    "bool"
                ],
                "ssl_cert": [
                    "None",
                    "str",
                    "dict[str, int]"
                ],
                "ssl_key": [
                    "None",
                    "str",
                    "dict[str, int]"
                ],
                "headers": [
                    "None",
                    "str",
                    "dict[str, int]"
                ],
                "debug": [
                    "bool"
                ]
            }
        },
        "Client.send_alert": {
            "name": "send_alert",
            "location": 47,
            "return": [
                "tuple[None]"
            ],
            "arguments": {
                "self": [],
                "resource": [
                    "dict[, ]",
                    "typing.OrderedDict",
                    "dict[str, typing.Any]"
                ],
                "event": [
                    "dict[, ]",
                    "typing.OrderedDict",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "Client.get_alert": {
            "name": "get_alert",
            "location": 72,
            "return": [],
            "arguments": {
                "self": [],
                "id": [
                    "str"
                ]
            }
        },
        "Client.set_status": {
            "name": "set_status",
            "location": 75,
            "return": [],
            "arguments": {
                "self": [],
                "id": [
                    "str",
                    "int"
                ],
                "status": [
                    "str",
                    "int"
                ],
                "text": [
                    "typing.Text"
                ],
                "timeout": [
                    "None",
                    "str",
                    "int"
                ]
            }
        },
        "Client.action": {
            "name": "action",
            "location": 83,
            "return": [],
            "arguments": {
                "self": [],
                "id": [
                    "str",
                    "int"
                ],
                "action": [
                    "str"
                ],
                "text": [
                    "typing.Text"
                ],
                "timeout": [
                    "None",
                    "str"
                ]
            }
        },
        "Client.tag_alert": {
            "name": "tag_alert",
            "location": 91,
            "return": [],
            "arguments": {
                "self": [],
                "id": [
                    "str",
                    "None",
                    "float"
                ],
                "tags": [
                    "str",
                    "None",
                    "float"
                ]
            }
        },
        "Client.untag_alert": {
            "name": "untag_alert",
            "location": 94,
            "return": [],
            "arguments": {
                "self": [],
                "id": [
                    "str",
                    "None",
                    "float"
                ],
                "tags": [
                    "str",
                    "None",
                    "float"
                ]
            }
        },
        "Client.update_attributes": {
            "name": "update_attributes",
            "location": 97,
            "return": [],
            "arguments": {
                "self": [],
                "id": [
                    "str",
                    "int",
                    "None"
                ],
                "attributes": [
                    "str",
                    "None",
                    "int"
                ]
            }
        },
        "Client.delete_alert": {
            "name": "delete_alert",
            "location": 103,
            "return": [],
            "arguments": {
                "self": [],
                "id": [
                    "int",
                    "list[int]",
                    "str"
                ]
            }
        },
        "Client.search": {
            "name": "search",
            "location": 106,
            "return": [],
            "arguments": {
                "self": [],
                "query": [
                    "None",
                    "str",
                    "int"
                ],
                "page": [
                    "int"
                ],
                "page_size": [
                    "None",
                    "str",
                    "int"
                ]
            }
        },
        "Client.get_alerts": {
            "name": "get_alerts",
            "location": 109,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": [],
                "query": [
                    "None",
                    "int",
                    "str",
                    "float"
                ],
                "page": [
                    "int"
                ],
                "page_size": [
                    "None",
                    "int",
                    "str",
                    "float"
                ]
            }
        },
        "Client.get_history": {
            "name": "get_history",
            "location": 113,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": [],
                "query": [
                    "None",
                    "int",
                    "str",
                    "float"
                ],
                "page": [
                    "int"
                ],
                "page_size": [
                    "None",
                    "int",
                    "str",
                    "float"
                ]
            }
        },
        "Client.get_count": {
            "name": "get_count",
            "location": 117,
            "return": [
                "tuple[str]"
            ],
            "arguments": {
                "self": [],
                "query": [
                    "None",
                    "str",
                    "dict[, ]"
                ]
            }
        },
        "Client.get_top10_count": {
            "name": "get_top10_count",
            "location": 121,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "query": [
                    "None",
                    "str",
                    "dict[, ]"
                ]
            }
        },
        "Client.get_top10_flapping": {
            "name": "get_top10_flapping",
            "location": 125,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "query": [
                    "None",
                    "str",
                    "dict[, ]"
                ]
            }
        },
        "Client.get_top10_standing": {
            "name": "get_top10_standing",
            "location": 129,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "query": [
                    "None",
                    "str",
                    "dict[, ]"
                ]
            }
        },
        "Client.get_environments": {
            "name": "get_environments",
            "location": 133,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "query": [
                    "None",
                    "str",
                    "dict[str, str]",
                    "dict[, ]"
                ]
            }
        },
        "Client.get_services": {
            "name": "get_services",
            "location": 137,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "query": [
                    "None",
                    "str",
                    "dict[str, str]",
                    "dict[, ]"
                ]
            }
        },
        "Client.get_groups": {
            "name": "get_groups",
            "location": 141,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "query": [
                    "None",
                    "str",
                    "dict[str, str]",
                    "dict[, ]"
                ]
            }
        },
        "Client.get_tags": {
            "name": "get_tags",
            "location": 145,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "query": [
                    "None",
                    "str",
                    "dict[str, str]"
                ]
            }
        },
        "Client.alert_note": {
            "name": "alert_note",
            "location": 149,
            "return": [],
            "arguments": {
                "self": [],
                "id": [
                    "str",
                    "bytes"
                ],
                "text": [
                    "str",
                    "None",
                    "int"
                ]
            }
        },
        "Client.get_alert_notes": {
            "name": "get_alert_notes",
            "location": 156,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": [],
                "id": [
                    "int",
                    "bytes"
                ],
                "page": [
                    "int"
                ],
                "page_size": [
                    "None",
                    "int",
                    "bytes"
                ]
            }
        },
        "Client.update_alert_note": {
            "name": "update_alert_note",
            "location": 160,
            "return": [],
            "arguments": {
                "self": [],
                "id": [
                    "str",
                    "int"
                ],
                "note_id": [
                    "str",
                    "int"
                ],
                "text": [
                    "str"
                ]
            }
        },
        "Client.delete_alert_note": {
            "name": "delete_alert_note",
            "location": 167,
            "return": [],
            "arguments": {
                "self": [],
                "id": [
                    "str"
                ],
                "note_id": [
                    "str"
                ]
            }
        },
        "Client.create_blackout": {
            "name": "create_blackout",
            "location": 171,
            "return": [],
            "arguments": {
                "self": [],
                "environment": [
                    "list[dict[, ]]",
                    "str",
                    "None",
                    "list[]",
                    "list[str]",
                    "typing.Any"
                ],
                "service": [
                    "None",
                    "list[dict[, ]]",
                    "str",
                    "list[]",
                    "list[str]",
                    "typing.Any"
                ],
                "resource": [
                    "None",
                    "list[dict[, ]]",
                    "str",
                    "list[]",
                    "list[str]",
                    "typing.Any"
                ],
                "event": [
                    "None",
                    "list[dict[, ]]",
                    "str",
                    "list[]",
                    "list[str]",
                    "typing.Any"
                ],
                "group": [
                    "None",
                    "list[dict[, ]]",
                    "str",
                    "list[]",
                    "list[str]",
                    "typing.Any"
                ],
                "tags": [
                    "None",
                    "list[dict[, ]]",
                    "str",
                    "list[]",
                    "list[str]",
                    "typing.Any"
                ],
                "origin": [
                    "None",
                    "list[dict[, ]]",
                    "str",
                    "list[]",
                    "list[str]",
                    "typing.Any"
                ],
                "customer": [
                    "None",
                    "list[dict[, ]]",
                    "str",
                    "list[]",
                    "list[str]",
                    "typing.Any"
                ],
                "start": [
                    "None",
                    "list[dict[, ]]",
                    "str",
                    "list[]",
                    "list[str]",
                    "typing.Any"
                ],
                "duration": [
                    "None",
                    "list[dict[, ]]",
                    "str",
                    "list[]",
                    "list[str]",
                    "typing.Any"
                ],
                "text": [
                    "None",
                    "list[dict[, ]]",
                    "str",
                    "list[]",
                    "list[str]",
                    "typing.Any"
                ]
            }
        },
        "Client.get_blackout": {
            "name": "get_blackout",
            "location": 189,
            "return": [],
            "arguments": {
                "self": [],
                "id": [
                    "str"
                ]
            }
        },
        "Client.get_blackouts": {
            "name": "get_blackouts",
            "location": 192,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": [],
                "query": [
                    "None",
                    "str",
                    "dict[str, str]",
                    "dict[, ]"
                ]
            }
        },
        "Client.update_blackout": {
            "name": "update_blackout",
            "location": 196,
            "return": [],
            "arguments": {
                "self": [],
                "id": [
                    "str",
                    "int"
                ]
            }
        },
        "Client.delete_blackout": {
            "name": "delete_blackout",
            "location": 214,
            "return": [],
            "arguments": {
                "self": [],
                "id": [
                    "int",
                    "list[int]",
                    "str"
                ]
            }
        },
        "Client.create_customer": {
            "name": "create_customer",
            "location": 218,
            "return": [],
            "arguments": {
                "self": [],
                "customer": [
                    "str",
                    "None",
                    "tuple[typing.Union[int,int]]",
                    "int"
                ],
                "match": [
                    "str",
                    "None",
                    "tuple[typing.Union[int,int]]",
                    "int"
                ]
            }
        },
        "Client.get_customer": {
            "name": "get_customer",
            "location": 226,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Client.get_customers": {
            "name": "get_customers",
            "location": 229,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": [],
                "query": [
                    "None",
                    "str",
                    "dict[str, str]",
                    "dict[, ]"
                ]
            }
        },
        "Client.update_customer": {
            "name": "update_customer",
            "location": 233,
            "return": [],
            "arguments": {
                "self": [],
                "id": [
                    "str",
                    "int"
                ]
            }
        },
        "Client.delete_customer": {
            "name": "delete_customer",
            "location": 241,
            "return": [],
            "arguments": {
                "self": [],
                "id": [
                    "int",
                    "list[int]",
                    "str"
                ]
            }
        },
        "Client.heartbeat": {
            "name": "heartbeat",
            "location": 245,
            "return": [],
            "arguments": {
                "self": [],
                "origin": [
                    "str",
                    "None",
                    "typing.Callable[, ]",
                    "list[typing.Any]",
                    "tuple[typing.Union[str,str]]",
                    "tuple[typing.Union[int,int]]"
                ],
                "tags": [
                    "None",
                    "str",
                    "typing.Callable[, ]",
                    "list[typing.Any]",
                    "tuple[typing.Union[str,str]]",
                    "tuple[typing.Union[int,int]]"
                ],
                "attributes": [
                    "None",
                    "str",
                    "typing.Callable[, ]",
                    "list[typing.Any]",
                    "tuple[typing.Union[str,str]]",
                    "tuple[typing.Union[int,int]]"
                ],
                "timeout": [
                    "None",
                    "str",
                    "typing.Callable[, ]",
                    "list[typing.Any]",
                    "tuple[typing.Union[str,str]]",
                    "tuple[typing.Union[int,int]]"
                ],
                "customer": [
                    "None",
                    "str",
                    "typing.Callable[, ]",
                    "list[typing.Any]",
                    "tuple[typing.Union[str,str]]",
                    "tuple[typing.Union[int,int]]"
                ]
            }
        },
        "Client.get_heartbeat": {
            "name": "get_heartbeat",
            "location": 257,
            "return": [],
            "arguments": {
                "self": [],
                "id": [
                    "str"
                ]
            }
        },
        "Client.get_heartbeats": {
            "name": "get_heartbeats",
            "location": 260,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": [],
                "query": [
                    "None",
                    "str",
                    "dict[str, str]",
                    "dict[, ]"
                ]
            }
        },
        "Client.delete_heartbeat": {
            "name": "delete_heartbeat",
            "location": 264,
            "return": [],
            "arguments": {
                "self": [],
                "id": [
                    "int",
                    "list[int]",
                    "str"
                ]
            }
        },
        "Client.create_key": {
            "name": "create_key",
            "location": 268,
            "return": [],
            "arguments": {
                "self": [],
                "username": [
                    "typing.Sequence[str]",
                    "str",
                    "typing.Iterator"
                ],
                "scopes": [
                    "None",
                    "typing.Sequence[str]",
                    "str",
                    "typing.Iterator"
                ],
                "expires": [
                    "None",
                    "str",
                    "int",
                    "typing.Callable[[], None]"
                ],
                "text": [
                    "typing.Text"
                ],
                "customer": [
                    "None",
                    "typing.Sequence[str]",
                    "str",
                    "typing.Iterator"
                ]
            }
        },
        "Client.get_key": {
            "name": "get_key",
            "location": 281,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Client.get_keys": {
            "name": "get_keys",
            "location": 284,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": [],
                "query": [
                    "None",
                    "str",
                    "bool",
                    "dict[str, str]"
                ]
            }
        },
        "Client.update_key": {
            "name": "update_key",
            "location": 288,
            "return": [],
            "arguments": {
                "self": [],
                "id": [
                    "str",
                    "int"
                ]
            }
        },
        "Client.delete_key": {
            "name": "delete_key",
            "location": 298,
            "return": [],
            "arguments": {
                "self": [],
                "id": [
                    "int",
                    "list[int]",
                    "str"
                ]
            }
        },
        "Client.create_perm": {
            "name": "create_perm",
            "location": 302,
            "return": [],
            "arguments": {
                "self": [],
                "role": [
                    "str",
                    "typing.Callable[, ]",
                    "int"
                ],
                "scopes": [
                    "None",
                    "str",
                    "typing.Callable[, ]",
                    "int"
                ]
            }
        },
        "Client.get_perm": {
            "name": "get_perm",
            "location": 310,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Client.get_perms": {
            "name": "get_perms",
            "location": 313,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": [],
                "query": [
                    "None",
                    "str",
                    "dict[str, str]",
                    "dict[, ]"
                ]
            }
        },
        "Client.update_perm": {
            "name": "update_perm",
            "location": 317,
            "return": [],
            "arguments": {
                "self": [],
                "id": [
                    "str",
                    "int"
                ]
            }
        },
        "Client.delete_perm": {
            "name": "delete_perm",
            "location": 325,
            "return": [],
            "arguments": {
                "self": [],
                "id": [
                    "int",
                    "list[int]",
                    "str"
                ]
            }
        },
        "Client.get_scopes": {
            "name": "get_scopes",
            "location": 328,
            "return": [
                "list[Scope]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Client.signup": {
            "name": "signup",
            "location": 333,
            "return": [],
            "arguments": {
                "self": [],
                "name": [
                    "bool",
                    "str",
                    "dict[str, str]",
                    "None",
                    "dict[str, bool]"
                ],
                "email": [
                    "bool",
                    "str",
                    "dict[str, str]",
                    "None",
                    "dict[str, bool]"
                ],
                "password": [
                    "bool",
                    "str",
                    "dict[str, str]",
                    "None",
                    "dict[str, bool]"
                ],
                "status": [
                    "bool",
                    "str",
                    "dict[str, str]",
                    "None",
                    "dict[str, bool]"
                ],
                "attributes": [
                    "None",
                    "bool",
                    "str",
                    "dict[str, str]",
                    "dict[str, bool]"
                ],
                "text": [
                    "typing.Text"
                ]
            }
        },
        "Client.create_user": {
            "name": "create_user",
            "location": 344,
            "return": [],
            "arguments": {
                "self": [],
                "name": [
                    "bool",
                    "dict[str, str]",
                    "None",
                    "list[str]",
                    "str",
                    "dict[, ]"
                ],
                "email": [
                    "bool",
                    "dict[str, str]",
                    "None",
                    "list[str]",
                    "str",
                    "dict[, ]"
                ],
                "password": [
                    "bool",
                    "dict[str, str]",
                    "None",
                    "list[str]",
                    "str",
                    "dict[, ]"
                ],
                "status": [
                    "bool",
                    "dict[str, str]",
                    "None",
                    "list[str]",
                    "str",
                    "dict[, ]"
                ],
                "roles": [
                    "None",
                    "bool",
                    "dict[str, str]",
                    "list[str]",
                    "str",
                    "dict[, ]"
                ],
                "attributes": [
                    "None",
                    "bool",
                    "dict[str, str]",
                    "list[str]",
                    "str",
                    "dict[, ]"
                ],
                "text": [
                    "typing.Text"
                ],
                "email_verified": [
                    "bool"
                ]
            }
        },
        "Client.get_user": {
            "name": "get_user",
            "location": 358,
            "return": [],
            "arguments": {
                "self": [],
                "id": [
                    "str"
                ]
            }
        },
        "Client.get_user_groups": {
            "name": "get_user_groups",
            "location": 361,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": [],
                "id": [
                    "str",
                    "bool",
                    "None"
                ]
            }
        },
        "Client.get_me": {
            "name": "get_me",
            "location": 365,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Client.get_me_attributes": {
            "name": "get_me_attributes",
            "location": 368,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Client.get_users": {
            "name": "get_users",
            "location": 371,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": [],
                "query": [
                    "None",
                    "str",
                    "dict[, ]",
                    "typing.Optional[]"
                ]
            }
        },
        "Client.update_user": {
            "name": "update_user",
            "location": 375,
            "return": [],
            "arguments": {
                "self": [],
                "id": [
                    "str",
                    "int"
                ]
            }
        },
        "Client.update_me": {
            "name": "update_me",
            "location": 389,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Client.update_user_attributes": {
            "name": "update_user_attributes",
            "location": 401,
            "return": [],
            "arguments": {
                "self": [],
                "id": [
                    "str",
                    "int",
                    "None"
                ],
                "attributes": [
                    "str",
                    "None",
                    "int"
                ]
            }
        },
        "Client.update_me_attributes": {
            "name": "update_me_attributes",
            "location": 407,
            "return": [],
            "arguments": {
                "self": [],
                "attributes": [
                    "str",
                    "int"
                ]
            }
        },
        "Client.delete_user": {
            "name": "delete_user",
            "location": 413,
            "return": [],
            "arguments": {
                "self": [],
                "id": [
                    "int",
                    "list[int]",
                    "str"
                ]
            }
        },
        "Client.login": {
            "name": "login",
            "location": 417,
            "return": [],
            "arguments": {
                "self": [],
                "username": [
                    "str"
                ],
                "password": [
                    "str"
                ]
            }
        },
        "Client.token": {
            "name": "token",
            "location": 424,
            "return": [],
            "arguments": {
                "self": [],
                "provider": [
                    "str",
                    "dict[str, typing.Any]",
                    "int"
                ],
                "data": [
                    "bytes",
                    "dict[, ]",
                    "str",
                    "dict[str, typing.Any]",
                    "int"
                ]
            }
        },
        "Client.userinfo": {
            "name": "userinfo",
            "location": 436,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Client.config": {
            "name": "config",
            "location": 439,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Client.create_group": {
            "name": "create_group",
            "location": 443,
            "return": [],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "typing.Iterable[str]",
                    "None",
                    "typing.Callable[..., T]"
                ],
                "text": [
                    "str",
                    "typing.Iterable[str]",
                    "None",
                    "typing.Callable[..., T]"
                ]
            }
        },
        "Client.get_group": {
            "name": "get_group",
            "location": 451,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Client.get_group_users": {
            "name": "get_group_users",
            "location": 454,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": [],
                "id": [
                    "str",
                    "bool",
                    "None"
                ]
            }
        },
        "Client.get_users_groups": {
            "name": "get_users_groups",
            "location": 458,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": [],
                "query": [
                    "None",
                    "str",
                    "dict[, ]",
                    "typing.Optional[]"
                ]
            }
        },
        "Client.update_group": {
            "name": "update_group",
            "location": 462,
            "return": [],
            "arguments": {
                "self": [],
                "id": [
                    "str",
                    "int"
                ]
            }
        },
        "Client.add_user_to_group": {
            "name": "add_user_to_group",
            "location": 470,
            "return": [],
            "arguments": {
                "self": [],
                "group_id": [
                    "int",
                    "str"
                ],
                "user_id": [
                    "int",
                    "str"
                ]
            }
        },
        "Client.remove_user_from_group": {
            "name": "remove_user_from_group",
            "location": 473,
            "return": [],
            "arguments": {
                "self": [],
                "group_id": [
                    "int"
                ],
                "user_id": [
                    "int"
                ]
            }
        },
        "Client.delete_group": {
            "name": "delete_group",
            "location": 476,
            "return": [],
            "arguments": {
                "self": [],
                "id": [
                    "int",
                    "list[int]",
                    "str"
                ]
            }
        },
        "Client.mgmt_status": {
            "name": "mgmt_status",
            "location": 480,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Client.housekeeping": {
            "name": "housekeeping",
            "location": 483,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "expired_delete_hours": [
                    "None",
                    "int",
                    "str",
                    "typing.Iterable[str]"
                ],
                "info_delete_hours": [
                    "None",
                    "int",
                    "str",
                    "typing.Iterable[str]"
                ]
            }
        },
        "ApiKeyAuth.__init__": {
            "name": "__init__",
            "location": 498,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "api_key": [
                    "None",
                    "typing.Mapping",
                    "dict[, ]",
                    "list[str]",
                    "str"
                ],
                "auth_token": [
                    "None",
                    "str",
                    "int"
                ]
            }
        },
        "ApiKeyAuth.__call__": {
            "name": "__call__",
            "location": 502,
            "return": [
                "list[str]",
                "str",
                "bool",
                "dict[, ]"
            ],
            "arguments": {
                "self": [],
                "r": [
                    "list[str]",
                    "str",
                    "bool",
                    "dict[, ]"
                ]
            }
        },
        "TokenAuth.__init__": {
            "name": "__init__",
            "location": 509,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "auth_token": [
                    "None",
                    "str",
                    "float",
                    "list[str]"
                ]
            }
        },
        "TokenAuth.__call__": {
            "name": "__call__",
            "location": 512,
            "return": [
                "list[str]",
                "str",
                "typing.Type",
                "float",
                "int"
            ],
            "arguments": {
                "self": [],
                "r": [
                    "list[str]",
                    "str",
                    "typing.Type",
                    "float",
                    "int"
                ]
            }
        },
        "HTTPClient.__init__": {
            "name": "__init__",
            "location": 522,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "endpoint": [
                    "str",
                    "int"
                ],
                "key": [
                    "None",
                    "str",
                    "bool",
                    "dict[, ]",
                    "list[]"
                ],
                "secret": [
                    "None",
                    "str",
                    "bool"
                ],
                "token": [
                    "None",
                    "str"
                ],
                "username": [
                    "None",
                    "str",
                    "int"
                ],
                "password": [
                    "None",
                    "str",
                    "int"
                ],
                "timeout": [
                    "float"
                ],
                "ssl_verify": [
                    "bool"
                ],
                "ssl_cert": [
                    "None",
                    "str",
                    "collections.abc.Coroutine"
                ],
                "ssl_key": [
                    "None",
                    "str",
                    "collections.abc.Coroutine"
                ],
                "headers": [
                    "None",
                    "str",
                    "dict[str, typing.Sequence[str]]",
                    "dict[str, typing.Sequence[typing.Any]]",
                    "int"
                ],
                "debug": [
                    "bool"
                ]
            }
        },
        "HTTPClient.default_headers": {
            "name": "default_headers",
            "location": 562,
            "return": [
                "dict[typing.Text, str]"
            ],
            "arguments": {}
        },
        "HTTPClient.get": {
            "name": "get",
            "location": 568,
            "return": [],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "list[object]",
                    "None",
                    "dict[, ]"
                ],
                "query": [
                    "None",
                    "str",
                    "list[str]",
                    "dict[str, str]",
                    "typing.Sequence[typing.Any]"
                ]
            }
        },
        "HTTPClient.post": {
            "name": "post",
            "location": 582,
            "return": [],
            "arguments": {
                "self": [],
                "path": [
                    "dict[, ]",
                    "tuple[str]",
                    "str",
                    "dict[H, str]",
                    "bool"
                ],
                "data": [
                    "None",
                    "list[dict[str, typing.Any]]",
                    "dict[str, str]",
                    "int",
                    "dict[str, dict[str, typing.Any]]"
                ]
            }
        },
        "HTTPClient.put": {
            "name": "put",
            "location": 591,
            "return": [],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ],
                "data": [
                    "None",
                    "dict[, ]",
                    "bool",
                    "bytes"
                ]
            }
        },
        "HTTPClient.delete": {
            "name": "delete",
            "location": 600,
            "return": [],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ]
            }
        },
        "HTTPClient._handle_error": {
            "name": "_handle_error",
            "location": 609,
            "return": [],
            "arguments": {
                "self": [],
                "response": []
            }
        }
    },
    "python-alerta-client-master/alertaclient/cli.py": {
        "cli": {
            "name": "cli",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "ctx": [
                    "str",
                    "bool",
                    "None"
                ],
                "config_file": [
                    "str",
                    "None",
                    "bool"
                ],
                "profile": [
                    "str",
                    "int",
                    "None"
                ],
                "endpoint_url": [
                    "str"
                ],
                "output": [
                    "str",
                    "None",
                    "dict[str, int]",
                    "bool"
                ],
                "color": [
                    "str",
                    "None",
                    "int"
                ],
                "debug": [
                    "str",
                    "bool"
                ]
            }
        },
        "AlertaCLI.list_commands": {
            "name": "list_commands",
            "location": 20,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": [],
                "ctx": [
                    "bool"
                ]
            }
        },
        "AlertaCLI.get_command": {
            "name": "get_command",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ctx": [
                    "str",
                    "tuple[]",
                    "float",
                    "None"
                ],
                "name": [
                    "str"
                ]
            }
        }
    },
    "python-alerta-client-master/alertaclient/config.py": {
        "Config.__init__": {
            "name": "__init__",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config_file": [
                    "str",
                    "bool"
                ],
                "config_override": [
                    "None",
                    "dict[str, typing.Any]",
                    "list[str]",
                    "dict[, ]",
                    "dict[str, str]"
                ]
            }
        },
        "Config.get_config_for_profle": {
            "name": "get_config_for_profle",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "profile": [
                    "None",
                    "str",
                    "dict[str, str]",
                    "dict[, ]"
                ]
            }
        },
        "Config.get_remote_config": {
            "name": "get_remote_config",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "endpoint": [
                    "None",
                    "str"
                ]
            }
        }
    },
    "python-alerta-client-master/alertaclient/exceptions.py": {},
    "python-alerta-client-master/alertaclient/top.py": {
        "Screen.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "client": [
                    "str",
                    "float"
                ],
                "timezone": [
                    "str",
                    "float"
                ]
            }
        },
        "Screen.run": {
            "name": "run",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Screen.main": {
            "name": "main",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "stdscr": [
                    "str",
                    "list[str]",
                    "bool",
                    "None"
                ]
            }
        },
        "Screen.update": {
            "name": "update",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Screen._addstr": {
            "name": "_addstr",
            "location": 139,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "y": [
                    "int"
                ],
                "x": [
                    "int",
                    "typing.Sequence[T]",
                    "str",
                    "tuple[]"
                ],
                "line": [],
                "attr": [
                    "int"
                ]
            }
        },
        "Screen._key_press": {
            "name": "_key_press",
            "location": 147,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "int",
                    "list[]",
                    "bytes"
                ]
            }
        },
        "Screen.update.short_sev": {
            "name": "short_sev",
            "location": 97,
            "return": [],
            "arguments": {
                "severity": []
            }
        },
        "Screen.update.color": {
            "name": "color",
            "location": 100,
            "return": [],
            "arguments": {
                "severity": []
            }
        }
    },
    "python-alerta-client-master/alertaclient/utils.py": {
        "build_query": {
            "name": "build_query",
            "location": 44,
            "return": [
                "list[tuple[str]]"
            ],
            "arguments": {
                "filters": [
                    "str"
                ]
            }
        },
        "action_progressbar": {
            "name": "action_progressbar",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [
                    "str",
                    "dict[str, typing.Any]",
                    "None"
                ],
                "action": [
                    "str",
                    "dict[str, typing.Any]",
                    "None"
                ],
                "ids": [
                    "int",
                    "str",
                    "list[int]",
                    "float",
                    "None"
                ],
                "label": [
                    "int",
                    "str",
                    "list[int]",
                    "float",
                    "None"
                ],
                "text": [
                    "None",
                    "str",
                    "dict[str, typing.Any]"
                ],
                "timeout": [
                    "None",
                    "str",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "origin": {
            "name": "origin",
            "location": 63,
            "return": [
                "typing.Text"
            ],
            "arguments": {}
        },
        "CustomJsonEncoder.default": {
            "name": "default",
            "location": 12,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "o": [
                    "int",
                    "None",
                    "list[]"
                ]
            }
        },
        "DateTime.parse": {
            "name": "parse",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "date_str": [
                    "str"
                ]
            }
        },
        "DateTime.iso8601": {
            "name": "iso8601",
            "location": 32,
            "return": [],
            "arguments": {
                "dt": [
                    "str",
                    "list[str]",
                    "bool"
                ]
            }
        },
        "DateTime.localtime": {
            "name": "localtime",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "dt": [
                    "str"
                ],
                "timezone": [
                    "None",
                    "str",
                    "typing.Sized"
                ],
                "fmt": [
                    "typing.Text"
                ]
            }
        },
        "action_progressbar.show_skipped": {
            "name": "show_skipped",
            "location": 51,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "id": []
            }
        }
    },
    "python-alerta-client-master/alertaclient/version.py": {},
    "python-alerta-client-master/alertaclient/__init__.py": {},
    "python-alerta-client-master/alertaclient/__main__.py": {},
    "python-alerta-client-master/alertaclient/auth/azure.py": {
        "login": {
            "name": "login",
            "location": 7,
            "return": [],
            "arguments": {
                "client": [],
                "azure_tenant": [
                    "int",
                    "str",
                    "list[None]"
                ],
                "client_id": [
                    "int",
                    "str"
                ]
            }
        }
    },
    "python-alerta-client-master/alertaclient/auth/github.py": {
        "login": {
            "name": "login",
            "location": 7,
            "return": [],
            "arguments": {
                "client": [],
                "github_url": [
                    "str",
                    "int",
                    "None"
                ],
                "client_id": [
                    "str",
                    "dict[str, typing.Any]"
                ]
            }
        }
    },
    "python-alerta-client-master/alertaclient/auth/gitlab.py": {
        "login": {
            "name": "login",
            "location": 7,
            "return": [],
            "arguments": {
                "client": [],
                "gitlab_url": [
                    "str",
                    "int",
                    "None"
                ],
                "client_id": [
                    "str",
                    "dict[str, typing.Any]"
                ]
            }
        }
    },
    "python-alerta-client-master/alertaclient/auth/google.py": {
        "login": {
            "name": "login",
            "location": 7,
            "return": [],
            "arguments": {
                "client": [],
                "username": [
                    "dict[, ]",
                    "str",
                    "bool"
                ],
                "client_id": [
                    "str",
                    "dict[, ]",
                    "list[int]",
                    "int"
                ]
            }
        }
    },
    "python-alerta-client-master/alertaclient/auth/hmac.py": {},
    "python-alerta-client-master/alertaclient/auth/oidc.py": {
        "login": {
            "name": "login",
            "location": 7,
            "return": [],
            "arguments": {
                "client": [],
                "oidc_auth_url": [
                    "str",
                    "None",
                    "int"
                ],
                "client_id": [
                    "str",
                    "int",
                    "None"
                ]
            }
        }
    },
    "python-alerta-client-master/alertaclient/auth/token.py": {
        "HTTPServerHandler.__init__": {
            "name": "__init__",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "str",
                    "float",
                    "None"
                ],
                "address": [
                    "str",
                    "float",
                    "None"
                ],
                "server": [
                    "str",
                    "float",
                    "None"
                ],
                "xsrf_token": [
                    "str",
                    "None",
                    "dict[str, str]",
                    "int",
                    "tuple[typing.Union[int,int]]"
                ]
            }
        },
        "HTTPServerHandler.do_GET": {
            "name": "do_GET",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HTTPServerHandler.log_message": {
            "name": "log_message",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "format": [
                    "str",
                    "None"
                ]
            }
        },
        "TokenHandler.get_access_token": {
            "name": "get_access_token",
            "location": 55,
            "return": [],
            "arguments": {
                "self": [],
                "xsrf_token": [
                    "str"
                ]
            }
        },
        "Jwt.parse": {
            "name": "parse",
            "location": 65,
            "return": [],
            "arguments": {
                "self": [],
                "jwt": [
                    "str"
                ]
            }
        }
    },
    "python-alerta-client-master/alertaclient/auth/utils.py": {
        "machine": {
            "name": "machine",
            "location": 10,
            "return": [],
            "arguments": {
                "endpoint": []
            }
        },
        "get_token": {
            "name": "get_token",
            "location": 15,
            "return": [],
            "arguments": {
                "endpoint": []
            }
        },
        "save_token": {
            "name": "save_token",
            "location": 26,
            "return": [],
            "arguments": {
                "endpoint": [],
                "username": [],
                "token": []
            }
        },
        "clear_token": {
            "name": "clear_token",
            "location": 38,
            "return": [],
            "arguments": {
                "endpoint": []
            }
        },
        "dump_netrc": {
            "name": "dump_netrc",
            "location": 52,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "merge": {
            "name": "merge",
            "location": 69,
            "return": [],
            "arguments": {
                "dict1": [],
                "dict2": []
            }
        }
    },
    "python-alerta-client-master/alertaclient/auth/__init__.py": {},
    "python-alerta-client-master/alertaclient/commands/cmd_ack.py": {
        "cli": {
            "name": "cli",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "obj": [
                    "str"
                ],
                "ids": [],
                "query": [
                    "str",
                    "dict[, ]",
                    "None"
                ],
                "filters": [
                    "str",
                    "None",
                    "set[str]",
                    "dict[str, typing.Any]",
                    "dict[typing.Any, list[]]"
                ],
                "text": [
                    "str",
                    "None",
                    "dict[, ]"
                ]
            }
        }
    },
    "python-alerta-client-master/alertaclient/commands/cmd_action.py": {
        "cli": {
            "name": "cli",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "obj": [
                    "str"
                ],
                "action": [
                    "str",
                    "None",
                    "bool"
                ],
                "ids": [],
                "query": [
                    "str",
                    "None"
                ],
                "filters": [
                    "str",
                    "None",
                    "dict[str, str]",
                    "bool"
                ],
                "text": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "python-alerta-client-master/alertaclient/commands/cmd_alerts.py": {
        "cli": {
            "name": "cli",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "obj": [
                    "str"
                ],
                "environments": [
                    "bool",
                    "str",
                    "typing.IO",
                    "list[object]",
                    "None"
                ],
                "services": [
                    "bool",
                    "str",
                    "typing.IO",
                    "list[object]",
                    "None"
                ],
                "groups": [
                    "bool",
                    "str",
                    "typing.IO",
                    "list[object]",
                    "None"
                ],
                "tags": [
                    "bool",
                    "str",
                    "typing.IO",
                    "list[object]",
                    "None"
                ]
            }
        }
    },
    "python-alerta-client-master/alertaclient/commands/cmd_blackout.py": {
        "cli": {
            "name": "cli",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "obj": [
                    "str",
                    "bytes"
                ],
                "environment": [
                    "bool",
                    "str",
                    "typing.Any"
                ],
                "service": [
                    "bool",
                    "str",
                    "typing.Any"
                ],
                "resource": [
                    "bool",
                    "str",
                    "typing.Any"
                ],
                "event": [
                    "bool",
                    "str",
                    "typing.Any"
                ],
                "group": [
                    "bool",
                    "str",
                    "typing.Any"
                ],
                "tags": [
                    "bool",
                    "str",
                    "typing.Any"
                ],
                "origin": [
                    "bool",
                    "str",
                    "typing.Any"
                ],
                "customer": [
                    "bool",
                    "str",
                    "typing.Any"
                ],
                "start": [
                    "bool",
                    "str",
                    "typing.Any"
                ],
                "duration": [
                    "bool",
                    "str",
                    "typing.Any"
                ],
                "text": [
                    "bool",
                    "str",
                    "typing.Any"
                ],
                "delete": [
                    "str",
                    "int",
                    "dict[, ]",
                    "None",
                    "float",
                    "typing.Callable[..., None]",
                    "bytes"
                ]
            }
        }
    },
    "python-alerta-client-master/alertaclient/commands/cmd_blackouts.py": {
        "cli": {
            "name": "cli",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "obj": [
                    "str"
                ],
                "purge": [
                    "int",
                    "str",
                    "typing.Iterable['Context']"
                ]
            }
        }
    },
    "python-alerta-client-master/alertaclient/commands/cmd_close.py": {
        "cli": {
            "name": "cli",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "obj": [
                    "str"
                ],
                "ids": [],
                "query": [
                    "str",
                    "dict[, ]",
                    "None"
                ],
                "filters": [
                    "str",
                    "None",
                    "set[str]",
                    "dict[str, typing.Any]",
                    "dict[typing.Any, list[]]"
                ],
                "text": [
                    "str",
                    "None",
                    "dict[, ]"
                ]
            }
        }
    },
    "python-alerta-client-master/alertaclient/commands/cmd_config.py": {
        "cli": {
            "name": "cli",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {
                "obj": [
                    "dict[str, object]",
                    "dict[str, dict[str, int]]",
                    "dict[str, str]"
                ]
            }
        }
    },
    "python-alerta-client-master/alertaclient/commands/cmd_customer.py": {
        "cli": {
            "name": "cli",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "obj": [],
                "customer": [
                    "bool",
                    "dict[, ]",
                    "None",
                    "str"
                ],
                "match": [
                    "int",
                    "list[int]"
                ],
                "delete": [
                    "typing.Iterable[typing.Union[int,str]]"
                ]
            }
        }
    },
    "python-alerta-client-master/alertaclient/commands/cmd_customers.py": {
        "cli": {
            "name": "cli",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "obj": []
            }
        }
    },
    "python-alerta-client-master/alertaclient/commands/cmd_delete.py": {
        "cli": {
            "name": "cli",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "obj": [
                    "str"
                ],
                "ids": [],
                "query": [
                    "str",
                    "int",
                    "None"
                ],
                "filters": [
                    "str",
                    "None",
                    "bool",
                    "dict[typing.Any, list[]]"
                ]
            }
        }
    },
    "python-alerta-client-master/alertaclient/commands/cmd_group.py": {
        "cli": {
            "name": "cli",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "obj": [
                    "str"
                ],
                "id": [
                    "int",
                    "dict[str, typing.Any]",
                    "None",
                    "str"
                ],
                "name": [
                    "str",
                    "bool"
                ],
                "text": [
                    "str",
                    "bool"
                ],
                "user": [
                    "str",
                    "bool"
                ],
                "users": [
                    "str",
                    "bool",
                    "list[tuple[typing.Union[str,...]]]"
                ],
                "delete": [
                    "str",
                    "dict[str, typing.Any]",
                    "None"
                ]
            }
        }
    },
    "python-alerta-client-master/alertaclient/commands/cmd_groups.py": {
        "cli": {
            "name": "cli",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "obj": [
                    "str"
                ]
            }
        }
    },
    "python-alerta-client-master/alertaclient/commands/cmd_heartbeat.py": {
        "cli": {
            "name": "cli",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "obj": [],
                "origin": [
                    "bool"
                ],
                "environment": [
                    "int",
                    "tuple[typing.Union[int,int,int]]",
                    "list[list[str]]",
                    "str",
                    "float"
                ],
                "severity": [
                    "list[str]",
                    "str",
                    "None"
                ],
                "service": [
                    "int",
                    "tuple[typing.Union[int,int,int]]",
                    "list[list[str]]",
                    "str",
                    "float"
                ],
                "group": [
                    "int",
                    "tuple[typing.Union[int,int,int]]",
                    "list[list[str]]",
                    "str",
                    "float"
                ],
                "tags": [
                    "str"
                ],
                "timeout": [
                    "bool"
                ],
                "customer": [
                    "bool"
                ],
                "delete": [
                    "int",
                    "tuple[typing.Union[int,int,int]]",
                    "list[list[str]]",
                    "str",
                    "float"
                ]
            }
        }
    },
    "python-alerta-client-master/alertaclient/commands/cmd_heartbeats.py": {
        "cli": {
            "name": "cli",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "obj": [
                    "str"
                ],
                "alert": [
                    "str",
                    "int",
                    "list[int]",
                    "dict[, ]",
                    "dict[str, str]",
                    "None"
                ],
                "severity": [
                    "str"
                ],
                "timeout": [
                    "int",
                    "str"
                ],
                "purge": [
                    "str",
                    "int",
                    "list[int]",
                    "dict[, ]",
                    "dict[str, str]",
                    "None"
                ]
            }
        }
    },
    "python-alerta-client-master/alertaclient/commands/cmd_help.py": {
        "cli": {
            "name": "cli",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {
                "ctx": [
                    "str",
                    "None"
                ]
            }
        }
    },
    "python-alerta-client-master/alertaclient/commands/cmd_history.py": {
        "cli": {
            "name": "cli",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "obj": [
                    "str"
                ],
                "ids": [
                    "list[str]",
                    "str",
                    "list[int]"
                ],
                "query": [
                    "int",
                    "typing.Hashable",
                    "str"
                ],
                "filters": [
                    "dict[, ]",
                    "str",
                    "None",
                    "dict[typing.Any, list[]]",
                    "dict[int, str]",
                    "bool",
                    "tuple[object]"
                ]
            }
        }
    },
    "python-alerta-client-master/alertaclient/commands/cmd_housekeeping.py": {
        "cli": {
            "name": "cli",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "obj": [
                    "str"
                ],
                "expired": [
                    "None",
                    "typing.Callable[, ]",
                    "dict[int, str]",
                    "float",
                    "str",
                    "bool"
                ],
                "info": [
                    "None",
                    "typing.Callable[, ]",
                    "dict[int, str]",
                    "float",
                    "str",
                    "bool"
                ]
            }
        }
    },
    "python-alerta-client-master/alertaclient/commands/cmd_key.py": {
        "cli": {
            "name": "cli",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "obj": [
                    "list[typing.Any]"
                ],
                "api_key": [
                    "bool",
                    "None",
                    "typing.Mapping",
                    "str"
                ],
                "username": [
                    "bool",
                    "None",
                    "typing.Mapping",
                    "str"
                ],
                "scopes": [
                    "bool",
                    "None",
                    "typing.Mapping",
                    "str"
                ],
                "duration": [
                    "int"
                ],
                "text": [
                    "bool",
                    "None",
                    "typing.Mapping",
                    "str"
                ],
                "customer": [
                    "bool",
                    "None",
                    "typing.Mapping",
                    "str"
                ],
                "delete": [
                    "float",
                    "int",
                    "str",
                    "list[str]"
                ]
            }
        }
    },
    "python-alerta-client-master/alertaclient/commands/cmd_keys.py": {
        "cli": {
            "name": "cli",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "obj": [
                    "list[]"
                ],
                "alert": [
                    "bool",
                    "str",
                    "None",
                    "typing.Iterable[int]"
                ],
                "maxage": [
                    "int",
                    "float"
                ],
                "severity": [
                    "None",
                    "typing.Callable[..., T]"
                ],
                "timeout": [
                    "None",
                    "typing.Callable[..., T]"
                ]
            }
        }
    },
    "python-alerta-client-master/alertaclient/commands/cmd_login.py": {
        "cli": {
            "name": "cli",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "obj": [
                    "list[cmk.utils.type_defs.HostName]",
                    "bytearray",
                    "str"
                ],
                "username": [
                    "dict[, ]",
                    "str",
                    "int"
                ]
            }
        }
    },
    "python-alerta-client-master/alertaclient/commands/cmd_logout.py": {
        "cli": {
            "name": "cli",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "obj": [
                    "str"
                ]
            }
        }
    },
    "python-alerta-client-master/alertaclient/commands/cmd_me.py": {
        "cli": {
            "name": "cli",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "obj": [
                    "str"
                ],
                "name": [
                    "str",
                    "int"
                ],
                "email": [
                    "str",
                    "int"
                ],
                "password": [
                    "str",
                    "int"
                ],
                "status": [
                    "str",
                    "int"
                ],
                "text": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "python-alerta-client-master/alertaclient/commands/cmd_note.py": {
        "cli": {
            "name": "cli",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "obj": [
                    "str",
                    "list[int]"
                ],
                "alert_ids": [],
                "query": [
                    "str",
                    "None",
                    "int",
                    "float",
                    "list[int]"
                ],
                "filters": [
                    "str",
                    "bool",
                    "list[typing.Any]",
                    "None",
                    "list[str]",
                    "dict[typing.Any, list[]]",
                    "list[tuple[typing.Union[str,str]]]"
                ],
                "text": [
                    "str",
                    "None",
                    "bool"
                ],
                "delete": [
                    "str",
                    "list[int]"
                ]
            }
        }
    },
    "python-alerta-client-master/alertaclient/commands/cmd_notes.py": {
        "cli": {
            "name": "cli",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "obj": [
                    "str"
                ],
                "alert_id": [
                    "str",
                    "None",
                    "int"
                ]
            }
        }
    },
    "python-alerta-client-master/alertaclient/commands/cmd_perm.py": {
        "cli": {
            "name": "cli",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "obj": [
                    "str"
                ],
                "role": [
                    "str",
                    "None",
                    "bytes",
                    "int"
                ],
                "scopes": [
                    "str",
                    "None",
                    "bytes",
                    "int"
                ],
                "delete": [
                    "str",
                    "float",
                    "bool"
                ]
            }
        }
    },
    "python-alerta-client-master/alertaclient/commands/cmd_perms.py": {
        "cli": {
            "name": "cli",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "obj": [
                    "str"
                ],
                "scopes": [
                    "str",
                    "list[str]"
                ]
            }
        }
    },
    "python-alerta-client-master/alertaclient/commands/cmd_query.py": {
        "cli": {
            "name": "cli",
            "location": 27,
            "return": [],
            "arguments": {
                "obj": [
                    "str"
                ],
                "ids": [
                    "str"
                ],
                "query": [
                    "list[int]"
                ],
                "filters": [
                    "str",
                    "None",
                    "dict[str, str]",
                    "dict[typing.Any, list[]]",
                    "set[str]",
                    "dict[str, int]"
                ],
                "display": [
                    "bool",
                    "str",
                    "None",
                    "typing.Mapping",
                    "typing.Sequence[]"
                ],
                "from_date": [
                    "None",
                    "list[]",
                    "int"
                ]
            }
        }
    },
    "python-alerta-client-master/alertaclient/commands/cmd_raw.py": {
        "cli": {
            "name": "cli",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "obj": [
                    "str"
                ],
                "ids": [
                    "list[str]",
                    "str",
                    "list[int]"
                ],
                "query": [
                    "typing.Hashable",
                    "bool"
                ],
                "filters": [
                    "dict[, ]",
                    "str",
                    "None",
                    "dict[typing.Any, list[]]",
                    "dict[int, str]",
                    "bool",
                    "tuple[object]"
                ]
            }
        }
    },
    "python-alerta-client-master/alertaclient/commands/cmd_revoke.py": {
        "cli": {
            "name": "cli",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "ctx": [
                    "str",
                    "int",
                    "bytes"
                ],
                "api_key": [
                    "str",
                    "int",
                    "bytes"
                ]
            }
        }
    },
    "python-alerta-client-master/alertaclient/commands/cmd_scopes.py": {
        "cli": {
            "name": "cli",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "obj": []
            }
        }
    },
    "python-alerta-client-master/alertaclient/commands/cmd_send.py": {
        "cli": {
            "name": "cli",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "obj": [
                    "str"
                ],
                "resource": [
                    "float",
                    "bool",
                    "dict[str, typing.Any]"
                ],
                "event": [
                    "float",
                    "bool",
                    "dict[str, typing.Any]"
                ],
                "environment": [
                    "float",
                    "bool",
                    "dict[str, typing.Any]"
                ],
                "severity": [
                    "float",
                    "bool",
                    "dict[str, typing.Any]"
                ],
                "correlate": [
                    "float",
                    "bool",
                    "dict[str, typing.Any]"
                ],
                "service": [
                    "float",
                    "bool",
                    "dict[str, typing.Any]"
                ],
                "group": [
                    "float",
                    "bool",
                    "dict[str, typing.Any]"
                ],
                "value": [
                    "float",
                    "bool",
                    "dict[str, typing.Any]"
                ],
                "text": [
                    "float",
                    "bool",
                    "dict[str, typing.Any]"
                ],
                "tags": [
                    "float",
                    "bool",
                    "dict[str, typing.Any]"
                ],
                "attributes": [
                    "dict[str, typing.Any]"
                ],
                "origin": [
                    "float",
                    "bool",
                    "dict[str, typing.Any]"
                ],
                "type": [
                    "float",
                    "bool",
                    "dict[str, typing.Any]"
                ],
                "timeout": [
                    "float",
                    "bool",
                    "dict[str, typing.Any]"
                ],
                "raw_data": [
                    "str"
                ],
                "customer": [
                    "float",
                    "bool",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "cli.send_alert": {
            "name": "send_alert",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "resource": [],
                "event": []
            }
        }
    },
    "python-alerta-client-master/alertaclient/commands/cmd_shelve.py": {
        "cli": {
            "name": "cli",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "obj": [
                    "str",
                    "list[dict[str, typing.Any]]"
                ],
                "ids": [],
                "query": [
                    "str",
                    "None",
                    "int",
                    "bytes"
                ],
                "filters": [
                    "str",
                    "None",
                    "dict[str, str]",
                    "list[tuple[typing.Union[str,str]]]",
                    "bool",
                    "dict[tuple[typing.Union[str,str]], int]"
                ],
                "timeout": [
                    "str",
                    "None",
                    "dict[, ]",
                    "int"
                ],
                "text": [
                    "str",
                    "None",
                    "dict[, ]",
                    "int"
                ]
            }
        }
    },
    "python-alerta-client-master/alertaclient/commands/cmd_signup.py": {
        "cli": {
            "name": "cli",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "obj": [
                    "str"
                ],
                "name": [
                    "str",
                    "BaseException",
                    "int",
                    "dict[str, typing.Any]"
                ],
                "email": [
                    "str",
                    "BaseException",
                    "int",
                    "dict[str, typing.Any]"
                ],
                "password": [
                    "str",
                    "BaseException",
                    "int",
                    "dict[str, typing.Any]"
                ],
                "status": [
                    "str",
                    "BaseException",
                    "int",
                    "dict[str, typing.Any]"
                ],
                "text": [
                    "str",
                    "BaseException",
                    "int",
                    "dict[str, typing.Any]"
                ]
            }
        }
    },
    "python-alerta-client-master/alertaclient/commands/cmd_status.py": {
        "cli": {
            "name": "cli",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "obj": []
            }
        }
    },
    "python-alerta-client-master/alertaclient/commands/cmd_tag.py": {
        "cli": {
            "name": "cli",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "obj": [
                    "str"
                ],
                "ids": [],
                "query": [
                    "dict[, ]",
                    "None",
                    "typing.Hashable",
                    "str"
                ],
                "filters": [
                    "dict[, ]",
                    "dict[typing.Hashable, typing.Any]",
                    "str",
                    "None",
                    "list[T]",
                    "list[\"DeliveryItem\"]"
                ],
                "tags": [
                    "str",
                    "None",
                    "tuple[typing.Union[float,float]]",
                    "list[int]",
                    "bool"
                ]
            }
        }
    },
    "python-alerta-client-master/alertaclient/commands/cmd_token.py": {
        "cli": {
            "name": "cli",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "obj": [
                    "str"
                ],
                "decode": [
                    "int",
                    "str",
                    "typing.Iterable['Context']"
                ]
            }
        }
    },
    "python-alerta-client-master/alertaclient/commands/cmd_top.py": {
        "cli": {
            "name": "cli",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "obj": [
                    "str"
                ]
            }
        }
    },
    "python-alerta-client-master/alertaclient/commands/cmd_unack.py": {
        "cli": {
            "name": "cli",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "obj": [
                    "str"
                ],
                "ids": [],
                "query": [
                    "str",
                    "dict[, ]",
                    "None"
                ],
                "filters": [
                    "str",
                    "None",
                    "set[str]",
                    "dict[str, typing.Any]",
                    "dict[typing.Any, list[]]"
                ],
                "text": [
                    "str",
                    "None",
                    "dict[, ]"
                ]
            }
        }
    },
    "python-alerta-client-master/alertaclient/commands/cmd_unshelve.py": {
        "cli": {
            "name": "cli",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "obj": [
                    "str"
                ],
                "ids": [],
                "query": [
                    "str",
                    "dict[, ]",
                    "None"
                ],
                "filters": [
                    "str",
                    "None",
                    "set[str]",
                    "dict[str, typing.Any]",
                    "dict[typing.Any, list[]]"
                ],
                "text": [
                    "str"
                ]
            }
        }
    },
    "python-alerta-client-master/alertaclient/commands/cmd_untag.py": {
        "cli": {
            "name": "cli",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "obj": [
                    "str"
                ],
                "ids": [],
                "query": [
                    "dict[, ]",
                    "None",
                    "typing.Hashable",
                    "str"
                ],
                "filters": [
                    "dict[, ]",
                    "dict[typing.Hashable, typing.Any]",
                    "str",
                    "None",
                    "list[T]",
                    "list[\"DeliveryItem\"]"
                ],
                "tags": [
                    "str",
                    "bytes"
                ]
            }
        }
    },
    "python-alerta-client-master/alertaclient/commands/cmd_update.py": {
        "cli": {
            "name": "cli",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "obj": [
                    "str"
                ],
                "ids": [],
                "query": [
                    "int",
                    "str",
                    "dict[, ]"
                ],
                "filters": [
                    "dict[, ]",
                    "str",
                    "None",
                    "dict[typing.Any, list[]]",
                    "dict[int, str]",
                    "bool",
                    "tuple[object]"
                ],
                "attributes": [
                    "str",
                    "dict[, ]",
                    "list[]"
                ]
            }
        }
    },
    "python-alerta-client-master/alertaclient/commands/cmd_uptime.py": {
        "cli": {
            "name": "cli",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "obj": [
                    "str"
                ]
            }
        }
    },
    "python-alerta-client-master/alertaclient/commands/cmd_user.py": {
        "cli": {
            "name": "cli",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "obj": [
                    "str"
                ],
                "id": [
                    "str",
                    "dict[, ]",
                    "None"
                ],
                "name": [
                    "str",
                    "None",
                    "int",
                    "typing.Type"
                ],
                "email": [
                    "str",
                    "None",
                    "int",
                    "typing.Type"
                ],
                "password": [
                    "str",
                    "None",
                    "int",
                    "typing.Type"
                ],
                "status": [
                    "str",
                    "None",
                    "int",
                    "typing.Type"
                ],
                "roles": [
                    "str",
                    "None",
                    "int",
                    "typing.Type"
                ],
                "text": [
                    "str",
                    "None",
                    "int",
                    "typing.Type"
                ],
                "email_verified": [
                    "str",
                    "None",
                    "int",
                    "typing.Type"
                ],
                "groups": [
                    "str",
                    "bool",
                    "list[tuple[typing.Union[str,...]]]",
                    "list[dict[str, typing.Any]]"
                ],
                "delete": [
                    "str",
                    "int",
                    "None",
                    "typing.Sequence[str]"
                ]
            }
        },
        "CommandWithOptionalPassword.parse_args": {
            "name": "parse_args",
            "location": 9,
            "return": [],
            "arguments": {
                "self": [],
                "ctx": [
                    "str",
                    "None"
                ],
                "args": []
            }
        }
    },
    "python-alerta-client-master/alertaclient/commands/cmd_users.py": {
        "cli": {
            "name": "cli",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "obj": [
                    "list[int]"
                ],
                "roles": [
                    "list[]",
                    "list[list[int]]"
                ]
            }
        }
    },
    "python-alerta-client-master/alertaclient/commands/cmd_version.py": {
        "cli": {
            "name": "cli",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "ctx": [],
                "obj": []
            }
        }
    },
    "python-alerta-client-master/alertaclient/commands/cmd_watch.py": {
        "cli": {
            "name": "cli",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "ctx": [
                    "str",
                    "int",
                    "list[\"custom_index\"]",
                    "None"
                ],
                "ids": [
                    "str",
                    "int",
                    "list[\"custom_index\"]",
                    "None"
                ],
                "query": [
                    "str",
                    "int",
                    "list[\"custom_index\"]",
                    "None"
                ],
                "filters": [
                    "str",
                    "int",
                    "list[\"custom_index\"]",
                    "None"
                ],
                "details": [
                    "str",
                    "tuple[]",
                    "float",
                    "None",
                    "tuple[str]",
                    "bool"
                ],
                "interval": [
                    "str",
                    "bool",
                    "float"
                ]
            }
        }
    },
    "python-alerta-client-master/alertaclient/commands/cmd_whoami.py": {
        "cli": {
            "name": "cli",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "obj": [
                    "str"
                ],
                "show_userinfo": [
                    "int",
                    "str",
                    "typing.Iterable['Context']"
                ]
            }
        }
    },
    "python-alerta-client-master/alertaclient/commands/__init__.py": {},
    "python-alerta-client-master/alertaclient/models/alert.py": {
        "Alert.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "resource": [
                    "str",
                    "dict[str, typing.Any]",
                    "int",
                    "None"
                ],
                "event": [
                    "typing.Callable[, ]",
                    "dict[, ]"
                ]
            }
        },
        "Alert.__repr__": {
            "name": "__repr__",
            "location": 48,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Alert.parse": {
            "name": "parse",
            "location": 53,
            "return": [
                "Alert"
            ],
            "arguments": {
                "cls": [
                    "memoryview",
                    "bool",
                    "str"
                ],
                "json": [
                    "dict[str, typing.Any]"
                ]
            }
        },
        "Alert.get_id": {
            "name": "get_id",
            "location": 96,
            "return": [],
            "arguments": {
                "self": [],
                "short": [
                    "bool"
                ]
            }
        },
        "Alert.tabular": {
            "name": "tabular",
            "location": 99,
            "return": [
                "dict[typing.Text, str]"
            ],
            "arguments": {
                "self": [],
                "timezone": [
                    "None",
                    "int",
                    "str"
                ]
            }
        }
    },
    "python-alerta-client-master/alertaclient/models/blackout.py": {
        "Blackout.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "environment": [
                    "bool"
                ]
            }
        },
        "Blackout.__repr__": {
            "name": "__repr__",
            "location": 65,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Blackout.parse": {
            "name": "parse",
            "location": 94,
            "return": [
                "Blackout"
            ],
            "arguments": {
                "cls": [
                    "memoryview",
                    "bool",
                    "str"
                ],
                "json": [
                    "dict[str, str]"
                ]
            }
        },
        "Blackout.tabular": {
            "name": "tabular",
            "location": 118,
            "return": [
                "dict[typing.Text, str]"
            ],
            "arguments": {
                "self": [],
                "timezone": [
                    "None",
                    "typing.Sequence[str]",
                    "str",
                    "typing.Callable[, ]"
                ]
            }
        }
    },
    "python-alerta-client-master/alertaclient/models/customer.py": {
        "Customer.__init__": {
            "name": "__init__",
            "location": 3,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "match": [
                    "int",
                    "float",
                    "typing.Type",
                    "str"
                ],
                "customer": [
                    "int",
                    "float",
                    "typing.Type",
                    "str"
                ]
            }
        },
        "Customer.__repr__": {
            "name": "__repr__",
            "location": 8,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Customer.parse": {
            "name": "parse",
            "location": 13,
            "return": [
                "Customer"
            ],
            "arguments": {
                "cls": [
                    "memoryview",
                    "bool",
                    "str"
                ],
                "json": [
                    "dict[, ]"
                ]
            }
        },
        "Customer.tabular": {
            "name": "tabular",
            "location": 20,
            "return": [
                "dict[typing.Text, ]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "python-alerta-client-master/alertaclient/models/enums.py": {
        "Scope.action": {
            "name": "action",
            "location": 37,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Scope.resource": {
            "name": "resource",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Scope.from_str": {
            "name": "from_str",
            "location": 48,
            "return": [
                "Scope"
            ],
            "arguments": {
                "action": [
                    "str",
                    "typing.Container"
                ],
                "resource": [
                    "None",
                    "bool",
                    "str",
                    "typing.Callable[, ]",
                    "list[str]",
                    "tuple[typing.Union[str,...]]"
                ]
            }
        },
        "Scope.tabular": {
            "name": "tabular",
            "location": 62,
            "return": [
                "dict[typing.Text, Scope]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "python-alerta-client-master/alertaclient/models/group.py": {
        "Group.__init__": {
            "name": "__init__",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "list[str]",
                    "dict[str, typing.Any]"
                ],
                "text": [
                    "bool",
                    "str",
                    "None"
                ]
            }
        },
        "Group.__repr__": {
            "name": "__repr__",
            "location": 37,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Group.parse": {
            "name": "parse",
            "location": 42,
            "return": [
                "Group"
            ],
            "arguments": {
                "cls": [
                    "memoryview",
                    "bool",
                    "str"
                ],
                "json": [
                    "dict[str, str]",
                    "dict[, ]"
                ]
            }
        },
        "Group.tabular": {
            "name": "tabular",
            "location": 50,
            "return": [
                "dict[typing.Text, ]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "python-alerta-client-master/alertaclient/models/heartbeat.py": {
        "Heartbeat.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "origin": [
                    "None",
                    "bool",
                    "str",
                    "dict[str, tuple[typing.Union[str,str]]]",
                    "list[str]"
                ],
                "tags": [
                    "None",
                    "str",
                    "dict[str, str]"
                ],
                "create_time": [
                    "None",
                    "str",
                    "int"
                ],
                "timeout": [
                    "None",
                    "bool",
                    "str",
                    "dict[str, tuple[typing.Union[str,str]]]",
                    "list[str]"
                ],
                "customer": [
                    "None",
                    "bool",
                    "str",
                    "dict[str, tuple[typing.Union[str,str]]]",
                    "list[str]"
                ]
            }
        },
        "Heartbeat.latency": {
            "name": "latency",
            "location": 28,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Heartbeat.since": {
            "name": "since",
            "location": 32,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Heartbeat.__repr__": {
            "name": "__repr__",
            "location": 36,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Heartbeat.parse": {
            "name": "parse",
            "location": 41,
            "return": [
                "Heartbeat"
            ],
            "arguments": {
                "cls": [
                    "memoryview",
                    "bool",
                    "str"
                ],
                "json": [
                    "dict[, ]"
                ]
            }
        },
        "Heartbeat.tabular": {
            "name": "tabular",
            "location": 63,
            "return": [
                "dict[typing.Text, str]"
            ],
            "arguments": {
                "self": [],
                "timezone": [
                    "None",
                    "int",
                    "float"
                ]
            }
        }
    },
    "python-alerta-client-master/alertaclient/models/history.py": {
        "History.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "id": [
                    "str",
                    "list[str]",
                    "None",
                    "bool"
                ],
                "event": [
                    "bool",
                    "dict[str, typing.Any]",
                    "None",
                    "typing.Sequence[str]"
                ]
            }
        },
        "History.__repr__": {
            "name": "__repr__",
            "location": 19,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "RichHistory.__init__": {
            "name": "__init__",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "resource": [
                    "str",
                    "dict[str, typing.Any]",
                    "int",
                    "None"
                ],
                "event": [
                    "int"
                ]
            }
        },
        "RichHistory.__repr__": {
            "name": "__repr__",
            "location": 46,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "RichHistory.parse": {
            "name": "parse",
            "location": 51,
            "return": [
                "RichHistory"
            ],
            "arguments": {
                "cls": [
                    "memoryview",
                    "bool",
                    "str"
                ],
                "json": [
                    "dict[, ]",
                    "dict[str, str]"
                ]
            }
        },
        "RichHistory.tabular": {
            "name": "tabular",
            "location": 76,
            "return": [
                "dict[typing.Text, str]"
            ],
            "arguments": {
                "self": [],
                "timezone": [
                    "None",
                    "str",
                    "bytes",
                    "typing.Any",
                    "int"
                ]
            }
        }
    },
    "python-alerta-client-master/alertaclient/models/key.py": {
        "ApiKey.__init__": {
            "name": "__init__",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "user": [
                    "str",
                    "bool",
                    "list[]",
                    "list[int]"
                ],
                "scopes": [
                    "str",
                    "bool",
                    "list[]",
                    "list[int]"
                ],
                "text": [
                    "typing.Text"
                ],
                "expire_time": [
                    "None",
                    "int",
                    "float",
                    "dict[, ]"
                ],
                "customer": [
                    "None",
                    "str",
                    "bool",
                    "list[]",
                    "list[int]"
                ]
            }
        },
        "ApiKey.type": {
            "name": "type",
            "location": 18,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ApiKey.__repr__": {
            "name": "__repr__",
            "location": 21,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ApiKey.parse": {
            "name": "parse",
            "location": 26,
            "return": [
                "ApiKey"
            ],
            "arguments": {
                "cls": [
                    "memoryview",
                    "bool",
                    "str"
                ],
                "json": [
                    "dict[, ]"
                ]
            }
        },
        "ApiKey.scopes_to_type": {
            "name": "scopes_to_type",
            "location": 42,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": [],
                "scopes": []
            }
        },
        "ApiKey.tabular": {
            "name": "tabular",
            "location": 48,
            "return": [
                "dict[typing.Text, str]"
            ],
            "arguments": {
                "self": [],
                "timezone": [
                    "None",
                    "dict[str, typing.Any]",
                    "int",
                    "dict[, ]",
                    "str",
                    "float"
                ]
            }
        }
    },
    "python-alerta-client-master/alertaclient/models/note.py": {
        "Note.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str",
                    "bool",
                    "typing.Iterable[str]"
                ],
                "user": [
                    "str",
                    "bool",
                    "typing.Iterable[str]"
                ],
                "note_type": [
                    "str",
                    "None",
                    "dict[str, str]",
                    "bytes",
                    "bool"
                ]
            }
        },
        "Note.parse": {
            "name": "parse",
            "location": 21,
            "return": [
                "Note"
            ],
            "arguments": {
                "cls": [
                    "memoryview",
                    "bool",
                    "str"
                ],
                "json": []
            }
        },
        "Note.__repr__": {
            "name": "__repr__",
            "location": 34,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Note.tabular": {
            "name": "tabular",
            "location": 39,
            "return": [
                "dict[typing.Text, ]"
            ],
            "arguments": {
                "self": [],
                "timezone": [
                    "None",
                    "int",
                    "str"
                ]
            }
        }
    },
    "python-alerta-client-master/alertaclient/models/permission.py": {
        "Permission.__init__": {
            "name": "__init__",
            "location": 3,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "match": [
                    "int",
                    "float",
                    "typing.Type",
                    "str"
                ],
                "scopes": [
                    "int",
                    "tuple[typing.Union[float,float]]",
                    "typing.Callable[, ]",
                    "float"
                ]
            }
        },
        "Permission.__repr__": {
            "name": "__repr__",
            "location": 8,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Permission.parse": {
            "name": "parse",
            "location": 13,
            "return": [
                "Permission"
            ],
            "arguments": {
                "cls": [
                    "memoryview",
                    "bool",
                    "str"
                ],
                "json": [
                    "dict[, ]"
                ]
            }
        },
        "Permission.tabular": {
            "name": "tabular",
            "location": 23,
            "return": [
                "dict[typing.Text, str]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "python-alerta-client-master/alertaclient/models/user.py": {
        "User.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "None"
                ],
                "email": [
                    "bool",
                    "str",
                    "None",
                    "typing.Iterable[str]"
                ],
                "roles": [
                    "bool",
                    "str",
                    "None",
                    "typing.Iterable[str]"
                ],
                "text": [
                    "bool",
                    "str",
                    "None",
                    "typing.Iterable[str]"
                ]
            }
        },
        "User.domain": {
            "name": "domain",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "User.__repr__": {
            "name": "__repr__",
            "location": 26,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "User.parse": {
            "name": "parse",
            "location": 32,
            "return": [
                "User"
            ],
            "arguments": {
                "cls": [
                    "memoryview",
                    "bool",
                    "str"
                ],
                "json": []
            }
        },
        "User.tabular": {
            "name": "tabular",
            "location": 47,
            "return": [
                "dict[typing.Text, str]"
            ],
            "arguments": {
                "self": [],
                "timezone": [
                    "None",
                    "list[str]",
                    "int",
                    "typing.Type",
                    "str"
                ]
            }
        }
    },
    "python-alerta-client-master/alertaclient/models/__init__.py": {},
    "python-alerta-client-master/examples/send.py": {},
    "python-alerta-client-master/tests/__init__.py": {},
    "python-alerta-client-master/tests/integration/test_alerts.py": {
        "AlertTestCase.setUp": {
            "name": "setUp",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AlertTestCase.test_alert": {
            "name": "test_alert",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AlertTestCase.test_alert_notes": {
            "name": "test_alert_notes",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "python-alerta-client-master/tests/integration/test_blackouts.py": {
        "AlertTestCase.setUp": {
            "name": "setUp",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AlertTestCase.test_blackout": {
            "name": "test_blackout",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "python-alerta-client-master/tests/integration/test_customers.py": {
        "AlertTestCase.setUp": {
            "name": "setUp",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AlertTestCase.test_customer": {
            "name": "test_customer",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "python-alerta-client-master/tests/integration/test_groups.py": {
        "AlertTestCase.setUp": {
            "name": "setUp",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AlertTestCase.test_group": {
            "name": "test_group",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "python-alerta-client-master/tests/integration/test_heartbeats.py": {
        "AlertTestCase.setUp": {
            "name": "setUp",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AlertTestCase.test_heartbeat": {
            "name": "test_heartbeat",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "python-alerta-client-master/tests/integration/test_history.py": {
        "AlertTestCase.setUp": {
            "name": "setUp",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AlertTestCase.test_alert": {
            "name": "test_alert",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AlertTestCase.test_history": {
            "name": "test_history",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "python-alerta-client-master/tests/integration/test_keys.py": {
        "AlertTestCase.setUp": {
            "name": "setUp",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AlertTestCase.test_key": {
            "name": "test_key",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "python-alerta-client-master/tests/integration/test_notes.py": {
        "AlertTestCase.setUp": {
            "name": "setUp",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AlertTestCase.test_notes": {
            "name": "test_notes",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "python-alerta-client-master/tests/integration/test_permissions.py": {
        "AlertTestCase.setUp": {
            "name": "setUp",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AlertTestCase.test_permission": {
            "name": "test_permission",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "python-alerta-client-master/tests/integration/test_users.py": {
        "AlertTestCase.setUp": {
            "name": "setUp",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AlertTestCase.test_user": {
            "name": "test_user",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "python-alerta-client-master/tests/integration/__init__.py": {},
    "python-alerta-client-master/tests/unit/test_alerts.py": {
        "AlertTestCase.setUp": {
            "name": "setUp",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AlertTestCase.test_alert": {
            "name": "test_alert",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "m": []
            }
        }
    },
    "python-alerta-client-master/tests/unit/test_blackouts.py": {
        "BlackoutTestCase.setUp": {
            "name": "setUp",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BlackoutTestCase.test_blackout": {
            "name": "test_blackout",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "m": [
                    "str"
                ]
            }
        }
    },
    "python-alerta-client-master/tests/unit/test_commands.py": {
        "CommandsTestCase.setUp": {
            "name": "setUp",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CommandsTestCase.test_heartbeat_cmd": {
            "name": "test_heartbeat_cmd",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "m": []
            }
        },
        "CommandsTestCase.test_heartbeats_cmd": {
            "name": "test_heartbeats_cmd",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "m": []
            }
        },
        "CommandsTestCase.test_whoami_cmd": {
            "name": "test_whoami_cmd",
            "location": 190,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "m": []
            }
        }
    },
    "python-alerta-client-master/tests/unit/test_config.py": {
        "mod_env": {
            "name": "mod_env",
            "location": 10,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {}
        },
        "CommandsTestCase.setUp": {
            "name": "setUp",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CommandsTestCase.test_env_vars": {
            "name": "test_env_vars",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "python-alerta-client-master/tests/unit/test_customers.py": {
        "CustomerTestCase.setUp": {
            "name": "setUp",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CustomerTestCase.test_customer": {
            "name": "test_customer",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "m": []
            }
        }
    },
    "python-alerta-client-master/tests/unit/test_groups.py": {
        "GroupTestCase.setUp": {
            "name": "setUp",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GroupTestCase.test_group": {
            "name": "test_group",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "m": [
                    "str"
                ]
            }
        }
    },
    "python-alerta-client-master/tests/unit/test_heartbeats.py": {
        "HeartbeatTestCase.setUp": {
            "name": "setUp",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HeartbeatTestCase.test_heartbeat": {
            "name": "test_heartbeat",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "m": [
                    "str"
                ]
            }
        }
    },
    "python-alerta-client-master/tests/unit/test_history.py": {
        "HistoryTestCase.setUp": {
            "name": "setUp",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HistoryTestCase.test_history": {
            "name": "test_history",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "m": [
                    "str"
                ]
            }
        }
    },
    "python-alerta-client-master/tests/unit/test_http_client.py": {
        "HttpClientTestCase.setUp": {
            "name": "setUp",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HttpClientTestCase.test_query_string": {
            "name": "test_query_string",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "m": []
            }
        }
    },
    "python-alerta-client-master/tests/unit/test_keys.py": {
        "ApiKeyTestCase.setUp": {
            "name": "setUp",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ApiKeyTestCase.test_key": {
            "name": "test_key",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "m": [
                    "str",
                    "bool",
                    "typing.Any",
                    "None",
                    "dict[, ]"
                ]
            }
        }
    },
    "python-alerta-client-master/tests/unit/test_notes.py": {
        "NotesTestCase.setUp": {
            "name": "setUp",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "NotesTestCase.test_add_note": {
            "name": "test_add_note",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "m": []
            }
        }
    },
    "python-alerta-client-master/tests/unit/test_permissions.py": {
        "PermissionTestCase.setUp": {
            "name": "setUp",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PermissionTestCase.test_permission": {
            "name": "test_permission",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "m": []
            }
        }
    },
    "python-alerta-client-master/tests/unit/test_remoteconfig.py": {
        "RemoteConfigTestCase.setUp": {
            "name": "setUp",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RemoteConfigTestCase.test_config_success": {
            "name": "test_config_success",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "m": [
                    "dict[str, typing.Any]"
                ]
            }
        },
        "RemoteConfigTestCase.test_config_timeout": {
            "name": "test_config_timeout",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "m": [
                    "str",
                    "typing.Callable[, ]"
                ]
            }
        },
        "RemoteConfigTestCase.test_config_not_found": {
            "name": "test_config_not_found",
            "location": 102,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "m": []
            }
        },
        "RemoteConfigTestCase.test_config_not_json": {
            "name": "test_config_not_json",
            "location": 109,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "m": [
                    "dict[, ]"
                ]
            }
        }
    },
    "python-alerta-client-master/tests/unit/test_users.py": {
        "UserTestCase.setUp": {
            "name": "setUp",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserTestCase.test_user": {
            "name": "test_user",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "m": [
                    "str"
                ]
            }
        }
    },
    "python-alerta-client-master/tests/unit/__init__.py": {}
}
{
    "python-can-develop/setup.py": {},
    "python-can-develop/can/bit_timing.py": {
        "BitTiming.__init__": {
            "name": "__init__",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "bitrate": [
                    "None",
                    "int",
                    "float",
                    "list[str]"
                ],
                "f_clock": [
                    "None",
                    "int",
                    "typing.Hashable",
                    "str"
                ],
                "brp": [
                    "None",
                    "int",
                    "float",
                    "list[str]"
                ],
                "tseg1": [
                    "None",
                    "int",
                    "float",
                    "list[str]"
                ],
                "tseg2": [
                    "None",
                    "int",
                    "float",
                    "list[str]"
                ],
                "sjw": [
                    "None",
                    "int",
                    "float",
                    "list[str]"
                ],
                "nof_samples": [
                    "int"
                ],
                "btr0": [
                    "None",
                    "bool"
                ],
                "btr1": [
                    "None",
                    "bool"
                ]
            }
        },
        "BitTiming.nbt": {
            "name": "nbt",
            "location": 87,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BitTiming.bitrate": {
            "name": "bitrate",
            "location": 92,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BitTiming.brp": {
            "name": "brp",
            "location": 101,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "BitTiming.sjw": {
            "name": "sjw",
            "location": 110,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BitTiming.tseg1": {
            "name": "tseg1",
            "location": 117,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BitTiming.tseg2": {
            "name": "tseg2",
            "location": 127,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BitTiming.nof_samples": {
            "name": "nof_samples",
            "location": 137,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BitTiming.f_clock": {
            "name": "f_clock",
            "location": 144,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BitTiming.sample_point": {
            "name": "sample_point",
            "location": 154,
            "return": [
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "BitTiming.btr0": {
            "name": "btr0",
            "location": 159,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "BitTiming.btr1": {
            "name": "btr1",
            "location": 171,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "BitTiming.__str__": {
            "name": "__str__",
            "location": 183,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BitTiming.__repr__": {
            "name": "__repr__",
            "location": 215,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "python-can-develop/can/broadcastmanager.py": {
        "CyclicTask.stop": {
            "name": "stop",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CyclicSendTaskABC.__init__": {
            "name": "__init__",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "messages": [
                    "str",
                    "typing.Mapping"
                ],
                "period": [
                    "int",
                    "float"
                ]
            }
        },
        "CyclicSendTaskABC._check_and_convert_messages": {
            "name": "_check_and_convert_messages",
            "location": 70,
            "return": [
                "tuple[Message]"
            ],
            "arguments": {
                "messages": [
                    "dict[typing.Union[str,str,str,str,str,str,str,str,str,str], str]",
                    "str"
                ]
            }
        },
        "LimitedDurationCyclicSendTaskABC.__init__": {
            "name": "__init__",
            "location": 108,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "messages": [
                    "str",
                    "bool"
                ],
                "period": [
                    "str",
                    "bool"
                ],
                "duration": [
                    "int",
                    "float"
                ]
            }
        },
        "RestartableCyclicTaskABC.start": {
            "name": "start",
            "location": 133,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ModifiableCyclicTaskABC._check_modified_messages": {
            "name": "_check_modified_messages",
            "location": 140,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "messages": []
            }
        },
        "ModifiableCyclicTaskABC.modify_data": {
            "name": "modify_data",
            "location": 162,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "messages": [
                    "str",
                    "typing.Sequence[can.Message]",
                    "int"
                ]
            }
        },
        "MultiRateCyclicSendTaskABC.__init__": {
            "name": "__init__",
            "location": 186,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "channel": [
                    "float",
                    "bool"
                ],
                "messages": [
                    "str",
                    "int"
                ],
                "count": [
                    "bool",
                    "str",
                    "float"
                ],
                "initial_period": [
                    "bool",
                    "str",
                    "float"
                ],
                "subsequent_period": [
                    "str",
                    "int"
                ]
            }
        },
        "ThreadBasedCyclicSendTask.__init__": {
            "name": "__init__",
            "location": 215,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "bus": [
                    "bool",
                    "typing.Callable[typing.Any, None]",
                    "None",
                    "float",
                    "tuple[typing.Union[float,float]]",
                    "str"
                ],
                "lock": [
                    "bool",
                    "typing.Callable[typing.Any, None]",
                    "None",
                    "float",
                    "tuple[typing.Union[float,float]]",
                    "str"
                ],
                "messages": [
                    "int",
                    "float",
                    "None",
                    "str"
                ],
                "period": [
                    "int"
                ],
                "duration": [
                    "None",
                    "bool",
                    "float"
                ],
                "on_error": [
                    "None",
                    "bool",
                    "typing.Callable[typing.Any, None]",
                    "float",
                    "tuple[typing.Union[float,float]]",
                    "str"
                ]
            }
        },
        "ThreadBasedCyclicSendTask.stop": {
            "name": "stop",
            "location": 255,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ThreadBasedCyclicSendTask.start": {
            "name": "start",
            "location": 260,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ThreadBasedCyclicSendTask._run": {
            "name": "_run",
            "location": 274,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "python-can-develop/can/bus.py": {
        "BusABC.__init__": {
            "name": "__init__",
            "location": 48,
            "return": [],
            "arguments": {
                "self": [],
                "channel": [],
                "can_filters": []
            }
        },
        "BusABC.__str__": {
            "name": "__str__",
            "location": 75,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BusABC.recv": {
            "name": "recv",
            "location": 78,
            "return": [],
            "arguments": {
                "self": [],
                "timeout": []
            }
        },
        "BusABC._recv_internal": {
            "name": "_recv_internal",
            "location": 116,
            "return": [],
            "arguments": {
                "self": [],
                "timeout": []
            }
        },
        "BusABC.send": {
            "name": "send",
            "location": 160,
            "return": [],
            "arguments": {
                "self": [],
                "msg": [],
                "timeout": []
            }
        },
        "BusABC.send_periodic": {
            "name": "send_periodic",
            "location": 178,
            "return": [],
            "arguments": {
                "self": [],
                "msgs": [],
                "period": [],
                "duration": [],
                "store_task": []
            }
        },
        "BusABC._send_periodic_internal": {
            "name": "_send_periodic_internal",
            "location": 258,
            "return": [],
            "arguments": {
                "self": [],
                "msgs": [],
                "period": [],
                "duration": []
            }
        },
        "BusABC.stop_all_periodic_tasks": {
            "name": "stop_all_periodic_tasks",
            "location": 290,
            "return": [],
            "arguments": {
                "self": [],
                "remove_tasks": []
            }
        },
        "BusABC.__iter__": {
            "name": "__iter__",
            "location": 307,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BusABC.filters": {
            "name": "filters",
            "location": 331,
            "return": [],
            "arguments": {
                "self": [],
                "filters": []
            }
        },
        "BusABC.set_filters": {
            "name": "set_filters",
            "location": 334,
            "return": [],
            "arguments": {
                "self": [],
                "filters": []
            }
        },
        "BusABC._apply_filters": {
            "name": "_apply_filters",
            "location": 361,
            "return": [],
            "arguments": {
                "self": [],
                "filters": []
            }
        },
        "BusABC._matches_filters": {
            "name": "_matches_filters",
            "location": 370,
            "return": [],
            "arguments": {
                "self": [],
                "msg": []
            }
        },
        "BusABC.flush_tx_buffer": {
            "name": "flush_tx_buffer",
            "location": 406,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BusABC.shutdown": {
            "name": "shutdown",
            "location": 409,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BusABC.__enter__": {
            "name": "__enter__",
            "location": 416,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BusABC.__exit__": {
            "name": "__exit__",
            "location": 419,
            "return": [],
            "arguments": {
                "self": [],
                "exc_type": [],
                "exc_val": [],
                "exc_tb": []
            }
        },
        "BusABC.state": {
            "name": "state",
            "location": 430,
            "return": [],
            "arguments": {
                "self": [],
                "new_state": []
            }
        },
        "BusABC._detect_available_configs": {
            "name": "_detect_available_configs",
            "location": 437,
            "return": [],
            "arguments": {}
        },
        "BusABC.fileno": {
            "name": "fileno",
            "location": 450,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_SelfRemovingCyclicTask.stop": {
            "name": "stop",
            "location": 460,
            "return": [],
            "arguments": {
                "self": [],
                "remove_task": []
            }
        },
        "BusABC.send_periodic.wrapped_stop_method": {
            "name": "wrapped_stop_method",
            "location": 242,
            "return": [],
            "arguments": {
                "remove_task": []
            }
        }
    },
    "python-can-develop/can/ctypesutil.py": {
        "CLibrary.__init__": {
            "name": "__init__",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "library_or_path": [
                    "str",
                    "None",
                    "int"
                ]
            }
        },
        "CLibrary.map_symbol": {
            "name": "map_symbol",
            "location": 33,
            "return": [
                "float",
                "int"
            ],
            "arguments": {
                "self": [],
                "func_name": [
                    "str",
                    "bool",
                    "list[\"Source\"]"
                ],
                "restype": [
                    "None",
                    "str"
                ],
                "argtypes": [
                    "tuple[]"
                ],
                "errcheck": [
                    "None",
                    "str",
                    "typing.Type"
                ]
            }
        }
    },
    "python-can-develop/can/exceptions.py": {
        "error_check": {
            "name": "error_check",
            "location": 111,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "error_message": [
                    "None",
                    "str",
                    "bool",
                    "list[int]",
                    "tuple[typing.Union[float,float]]",
                    "typing.Type"
                ],
                "exception_type": [
                    "CanOperationError"
                ]
            }
        },
        "CanError.__init__": {
            "name": "__init__",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "typing.Text"
                ],
                "error_code": [
                    "None",
                    "int",
                    "set[int]",
                    "list[str]",
                    "dict[, ]"
                ]
            }
        }
    },
    "python-can-develop/can/interface.py": {
        "_get_class_for_interface": {
            "name": "_get_class_for_interface",
            "location": 21,
            "return": [],
            "arguments": {
                "interface": [
                    "str",
                    "None"
                ]
            }
        },
        "detect_available_configs": {
            "name": "detect_available_configs",
            "location": 125,
            "return": [
                "list[]"
            ],
            "arguments": {
                "interfaces": [
                    "None",
                    "int",
                    "str"
                ]
            }
        },
        "Bus.__new__": {
            "name": "__new__",
            "location": 66,
            "return": [],
            "arguments": {
                "cls": [
                    "str",
                    "dict[str, typing.Any]",
                    "list[tuple[typing.Union[str,str]]]",
                    "typing.Callable[, ]",
                    "dict[, ]"
                ],
                "channel": [
                    "None",
                    "str",
                    "typing.Type",
                    "bool",
                    "typing.Any"
                ]
            }
        }
    },
    "python-can-develop/can/listener.py": {
        "Listener.__init__": {
            "name": "__init__",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Listener.on_message_received": {
            "name": "on_message_received",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "msg": [
                    "str",
                    "bytes",
                    "None",
                    "dict[, ]"
                ]
            }
        },
        "Listener.__call__": {
            "name": "__call__",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "msg": [
                    "typing.Callable[, ]",
                    "int",
                    "float"
                ]
            }
        },
        "Listener.on_error": {
            "name": "on_error",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "exc": [
                    "list[str]",
                    "bool",
                    "Exception"
                ]
            }
        },
        "Listener.stop": {
            "name": "stop",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RedirectReader.__init__": {
            "name": "__init__",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "bus": [
                    "int",
                    "float"
                ]
            }
        },
        "RedirectReader.on_message_received": {
            "name": "on_message_received",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "msg": [
                    "str"
                ]
            }
        },
        "BufferedReader.__init__": {
            "name": "__init__",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BufferedReader.on_message_received": {
            "name": "on_message_received",
            "location": 95,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "msg": [
                    "str"
                ]
            }
        },
        "BufferedReader.get_message": {
            "name": "get_message",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "timeout": [
                    "float"
                ]
            }
        },
        "BufferedReader.stop": {
            "name": "stop",
            "location": 124,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AsyncBufferedReader.__init__": {
            "name": "__init__",
            "location": 140,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AsyncBufferedReader.on_message_received": {
            "name": "on_message_received",
            "location": 157,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "msg": [
                    "str",
                    "list[str]",
                    "bytes"
                ]
            }
        },
        "AsyncBufferedReader.__aiter__": {
            "name": "__aiter__",
            "location": 174,
            "return": [
                "AsyncBufferedReader"
            ],
            "arguments": {
                "self": []
            }
        },
        "AsyncBufferedReader.__anext__": {
            "name": "__anext__",
            "location": 177,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "python-can-develop/can/logconvert.py": {
        "main": {
            "name": "main",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "ArgumentParser.error": {
            "name": "error",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "str",
                    "int",
                    "set[]"
                ]
            }
        }
    },
    "python-can-develop/can/logger.py": {
        "_create_base_argument_parser": {
            "name": "_create_base_argument_parser",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "parser": []
            }
        },
        "_append_filter_argument": {
            "name": "_append_filter_argument",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "parser": []
            }
        },
        "_create_bus": {
            "name": "_create_bus",
            "location": 99,
            "return": [
                "Bus"
            ],
            "arguments": {
                "parsed_args": [
                    "str",
                    "dict[, ]",
                    "dict[str, typing.Any]",
                    "bool"
                ]
            }
        },
        "_parse_filters": {
            "name": "_parse_filters",
            "location": 116,
            "return": [
                "list[dict[typing.Text, int]]"
            ],
            "arguments": {
                "parsed_args": [
                    "list[str]",
                    "str",
                    "dict[str, str]"
                ]
            }
        },
        "_parse_additonal_config": {
            "name": "_parse_additonal_config",
            "location": 137,
            "return": [],
            "arguments": {
                "unknown_args": [
                    "str",
                    "list[]"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 144,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "python-can-develop/can/message.py": {
        "Message.__init__": {
            "name": "__init__",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "timestamp": [
                    "float"
                ],
                "arbitration_id": [
                    "int"
                ],
                "is_extended_id": [
                    "bool"
                ],
                "is_remote_frame": [
                    "bool"
                ],
                "is_error_frame": [
                    "bool"
                ],
                "channel": [
                    "None",
                    "bool",
                    "Exception",
                    "typing.Callable[, ]"
                ],
                "dlc": [
                    "None",
                    "bool",
                    "bytes",
                    "dict[str, typing.Any]",
                    "str"
                ],
                "data": [
                    "None",
                    "bytes",
                    "typing.Callable[, ]",
                    "typing.Hashable"
                ],
                "is_fd": [
                    "bool"
                ],
                "is_rx": [
                    "bool"
                ],
                "bitrate_switch": [
                    "bool"
                ],
                "error_state_indicator": [
                    "bool"
                ],
                "check": [
                    "bool"
                ]
            }
        },
        "Message.__str__": {
            "name": "__str__",
            "location": 111,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Message.__len__": {
            "name": "__len__",
            "location": 154,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Message.__bool__": {
            "name": "__bool__",
            "location": 158,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Message.__repr__": {
            "name": "__repr__",
            "location": 161,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "Message.__format__": {
            "name": "__format__",
            "location": 190,
            "return": [],
            "arguments": {
                "self": [],
                "format_spec": [
                    "str",
                    "None",
                    "bool",
                    "list[]"
                ]
            }
        },
        "Message.__bytes__": {
            "name": "__bytes__",
            "location": 196,
            "return": [
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "Message.__copy__": {
            "name": "__copy__",
            "location": 199,
            "return": [
                "Message"
            ],
            "arguments": {
                "self": []
            }
        },
        "Message.__deepcopy__": {
            "name": "__deepcopy__",
            "location": 215,
            "return": [
                "Message"
            ],
            "arguments": {
                "self": [],
                "memo": [
                    "dict[, ]"
                ]
            }
        },
        "Message._check": {
            "name": "_check",
            "location": 231,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Message.equals": {
            "name": "equals",
            "location": 293,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "dict[str, set[str]]",
                    "int",
                    "None",
                    "str"
                ],
                "timestamp_delta": [
                    "float"
                ],
                "check_direction": [
                    "bool"
                ]
            }
        }
    },
    "python-can-develop/can/notifier.py": {
        "Notifier.__init__": {
            "name": "__init__",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "bus": [
                    "int",
                    "dict[str, typing.Any]",
                    "typing.Callable[, ]",
                    "str"
                ],
                "listeners": [
                    "list[]",
                    "list[str]"
                ],
                "timeout": [
                    "float"
                ],
                "loop": [
                    "None",
                    "int",
                    "dict[str, typing.Any]",
                    "list[int]"
                ]
            }
        },
        "Notifier.add_bus": {
            "name": "add_bus",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "bus": []
            }
        },
        "Notifier.stop": {
            "name": "stop",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "timeout": [
                    "int"
                ]
            }
        },
        "Notifier._rx_thread": {
            "name": "_rx_thread",
            "location": 110,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "bus": [
                    "str",
                    "int",
                    "None"
                ]
            }
        },
        "Notifier._on_message_available": {
            "name": "_on_message_available",
            "location": 136,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "bus": []
            }
        },
        "Notifier._on_message_received": {
            "name": "_on_message_received",
            "location": 141,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "msg": [
                    "str",
                    "dict[, ]",
                    "None"
                ]
            }
        },
        "Notifier._on_error": {
            "name": "_on_error",
            "location": 148,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "exc": [
                    "str",
                    "typing.Sequence[]"
                ]
            }
        },
        "Notifier.add_listener": {
            "name": "add_listener",
            "location": 169,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "listener": [
                    "float",
                    "int"
                ]
            }
        },
        "Notifier.remove_listener": {
            "name": "remove_listener",
            "location": 178,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "listener": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ]
            }
        }
    },
    "python-can-develop/can/player.py": {
        "main": {
            "name": "main",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "python-can-develop/can/thread_safe_bus.py": {
        "ThreadSafeBus.__init__": {
            "name": "__init__",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ThreadSafeBus.recv": {
            "name": "recv",
            "location": 69,
            "return": [],
            "arguments": {
                "self": [],
                "timeout": [
                    "None",
                    "int",
                    "typing.Callable[, ]",
                    "str",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "ThreadSafeBus.send": {
            "name": "send",
            "location": 75,
            "return": [],
            "arguments": {
                "self": [],
                "msg": [
                    "typing.Callable[, ]"
                ],
                "timeout": [
                    "None",
                    "typing.Callable[, ]"
                ]
            }
        },
        "ThreadSafeBus.filters": {
            "name": "filters",
            "location": 90,
            "return": [],
            "arguments": {
                "self": [],
                "filters": []
            }
        },
        "ThreadSafeBus.set_filters": {
            "name": "set_filters",
            "location": 94,
            "return": [],
            "arguments": {
                "self": [],
                "filters": [
                    "None",
                    "list[str]",
                    "tuple[typing.Type]",
                    "list[n]"
                ]
            }
        },
        "ThreadSafeBus.flush_tx_buffer": {
            "name": "flush_tx_buffer",
            "location": 100,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ThreadSafeBus.shutdown": {
            "name": "shutdown",
            "location": 104,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ThreadSafeBus.state": {
            "name": "state",
            "location": 114,
            "return": [],
            "arguments": {
                "self": [],
                "new_state": []
            }
        },
        "nullcontext.__init__": {
            "name": "__init__",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "enter_result": [
                    "None"
                ]
            }
        },
        "nullcontext.__enter__": {
            "name": "__enter__",
            "location": 29,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "nullcontext.__exit__": {
            "name": "__exit__",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "python-can-develop/can/typechecking.py": {},
    "python-can-develop/can/util.py": {
        "load_file_config": {
            "name": "load_file_config",
            "location": 38,
            "return": [
                "dict[, ]"
            ],
            "arguments": {
                "path": [
                    "None"
                ],
                "section": [
                    "typing.Text"
                ]
            }
        },
        "load_environment_config": {
            "name": "load_environment_config",
            "location": 72,
            "return": [],
            "arguments": {
                "context": [
                    "None"
                ]
            }
        },
        "load_config": {
            "name": "load_config",
            "location": 108,
            "return": [],
            "arguments": {
                "path": [
                    "None"
                ],
                "config": [
                    "None"
                ],
                "context": [
                    "None"
                ]
            }
        },
        "_create_bus_config": {
            "name": "_create_bus_config",
            "location": 197,
            "return": [],
            "arguments": {
                "config": []
            }
        },
        "set_logging_level": {
            "name": "set_logging_level",
            "location": 244,
            "return": [
                "None"
            ],
            "arguments": {
                "level_name": []
            }
        },
        "len2dlc": {
            "name": "len2dlc",
            "location": 259,
            "return": [
                "int"
            ],
            "arguments": {
                "length": []
            }
        },
        "dlc2len": {
            "name": "dlc2len",
            "location": 274,
            "return": [
                "int"
            ],
            "arguments": {
                "dlc": []
            }
        },
        "channel2int": {
            "name": "channel2int",
            "location": 284,
            "return": [
                "int",
                "None"
            ],
            "arguments": {
                "channel": []
            }
        },
        "deprecated_args_alias": {
            "name": "deprecated_args_alias",
            "location": 301,
            "return": [],
            "arguments": {}
        },
        "_rename_kwargs": {
            "name": "_rename_kwargs",
            "location": 327,
            "return": [
                "None"
            ],
            "arguments": {
                "func_name": [],
                "kwargs": [],
                "aliases": []
            }
        },
        "time_perfcounter_correlation": {
            "name": "time_perfcounter_correlation",
            "location": 345,
            "return": [
                "tuple[]"
            ],
            "arguments": {}
        },
        "deprecated_args_alias.deco": {
            "name": "deco",
            "location": 316,
            "return": [],
            "arguments": {
                "f": []
            }
        },
        "deprecated_args_alias.deco.wrapper": {
            "name": "wrapper",
            "location": 318,
            "return": [],
            "arguments": {}
        }
    },
    "python-can-develop/can/viewer.py": {
        "parse_args": {
            "name": "parse_args",
            "location": 393,
            "return": [],
            "arguments": {
                "args": []
            }
        },
        "main": {
            "name": "main",
            "location": 547,
            "return": [],
            "arguments": {}
        },
        "CanViewer.__init__": {
            "name": "__init__",
            "location": 56,
            "return": [],
            "arguments": {
                "self": [],
                "stdscr": [],
                "bus": [],
                "data_structs": [],
                "testing": []
            }
        },
        "CanViewer.run": {
            "name": "run",
            "location": 87,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CanViewer.unpack_data": {
            "name": "unpack_data",
            "location": 164,
            "return": [],
            "arguments": {
                "cmd": [],
                "cmd_to_struct": [],
                "data": []
            }
        },
        "CanViewer.draw_can_bus_message": {
            "name": "draw_can_bus_message",
            "location": 190,
            "return": [],
            "arguments": {
                "self": [],
                "msg": [],
                "sorting": []
            }
        },
        "CanViewer.draw_line": {
            "name": "draw_line",
            "location": 314,
            "return": [],
            "arguments": {
                "self": [],
                "row": [],
                "col": [],
                "txt": []
            }
        },
        "CanViewer.draw_header": {
            "name": "draw_header",
            "location": 325,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CanViewer.redraw_screen": {
            "name": "redraw_screen",
            "location": 341,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SmartFormatter._get_default_metavar_for_optional": {
            "name": "_get_default_metavar_for_optional",
            "location": 349,
            "return": [],
            "arguments": {
                "self": [],
                "action": []
            }
        },
        "SmartFormatter._format_usage": {
            "name": "_format_usage",
            "location": 352,
            "return": [],
            "arguments": {
                "self": [],
                "usage": [],
                "actions": [],
                "groups": [],
                "prefix": []
            }
        },
        "SmartFormatter._format_args": {
            "name": "_format_args",
            "location": 356,
            "return": [],
            "arguments": {
                "self": [],
                "action": [],
                "default_metavar": []
            }
        },
        "SmartFormatter._format_action_invocation": {
            "name": "_format_action_invocation",
            "location": 364,
            "return": [],
            "arguments": {
                "self": [],
                "action": []
            }
        },
        "SmartFormatter._split_lines": {
            "name": "_split_lines",
            "location": 380,
            "return": [],
            "arguments": {
                "self": [],
                "text": [],
                "width": []
            }
        },
        "SmartFormatter._fill_text": {
            "name": "_fill_text",
            "location": 386,
            "return": [],
            "arguments": {
                "self": [],
                "text": [],
                "width": [],
                "indent": []
            }
        }
    },
    "python-can-develop/can/__init__.py": {},
    "python-can-develop/can/interfaces/canalystii.py": {
        "CANalystIIBus.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "channel": [
                    "tuple[int]"
                ],
                "device": [
                    "int"
                ],
                "bitrate": [
                    "None",
                    "int",
                    "list[str]",
                    "float",
                    "str"
                ],
                "bit_timing": [
                    "None",
                    "int"
                ],
                "can_filters": [
                    "None",
                    "str",
                    "bool"
                ],
                "rx_queue_size": [
                    "None",
                    "str",
                    "bool"
                ]
            }
        },
        "CANalystIIBus.send": {
            "name": "send",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "msg": [
                    "bool",
                    "float"
                ],
                "timeout": [
                    "None",
                    "int",
                    "str"
                ]
            }
        },
        "CANalystIIBus._recv_from_queue": {
            "name": "_recv_from_queue",
            "location": 125,
            "return": [
                "tuple[typing.Union[Message,bool]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "CANalystIIBus.poll_received_messages": {
            "name": "poll_received_messages",
            "location": 146,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CANalystIIBus._recv_internal": {
            "name": "_recv_internal",
            "location": 160,
            "return": [
                "tuple[typing.Optional[bool]]"
            ],
            "arguments": {
                "self": [],
                "timeout": [
                    "None",
                    "bool",
                    "str",
                    "float"
                ]
            }
        },
        "CANalystIIBus.flush_tx_buffer": {
            "name": "flush_tx_buffer",
            "location": 189,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "channel": [
                    "None",
                    "str",
                    "int"
                ]
            }
        },
        "CANalystIIBus.shutdown": {
            "name": "shutdown",
            "location": 206,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "python-can-develop/can/interfaces/cantact.py": {
        "mock_recv": {
            "name": "mock_recv",
            "location": 139,
            "return": [
                "dict[typing.Text, typing.Union[int,list[int]]]",
                "None"
            ],
            "arguments": {
                "timeout": [
                    "int"
                ]
            }
        },
        "CantactBus._detect_available_configs": {
            "name": "_detect_available_configs",
            "location": 31,
            "return": [
                "list[]",
                "list[dict[typing.Text, typing.Text]]"
            ],
            "arguments": {}
        },
        "CantactBus.__init__": {
            "name": "__init__",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "channel": [],
                "bitrate": [],
                "poll_interval": [
                    "float"
                ],
                "monitor": [
                    "bool"
                ],
                "bit_timing": [
                    "None",
                    "int",
                    "float"
                ],
                "_testing": [
                    "bool"
                ]
            }
        },
        "CantactBus._recv_internal": {
            "name": "_recv_internal",
            "location": 103,
            "return": [
                "tuple[typing.Optional[bool]]",
                "tuple[typing.Union[Message,bool]]"
            ],
            "arguments": {
                "self": [],
                "timeout": []
            }
        },
        "CantactBus.send": {
            "name": "send",
            "location": 122,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "msg": [
                    "bool",
                    "dict[, ]"
                ],
                "timeout": [
                    "None",
                    "float",
                    "int"
                ]
            }
        },
        "CantactBus.shutdown": {
            "name": "shutdown",
            "location": 133,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "python-can-develop/can/interfaces/gs_usb.py": {
        "GsUsbBus.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "channel": [
                    "str",
                    "list[dict[, ]]",
                    "int",
                    "None"
                ],
                "bitrate": [
                    "str",
                    "int",
                    "float"
                ],
                "index": [
                    "int",
                    "None"
                ],
                "bus": [
                    "None",
                    "str",
                    "int",
                    "typing.Callable[, ]"
                ],
                "address": [
                    "None",
                    "str",
                    "int",
                    "typing.Callable[, ]"
                ],
                "can_filters": [
                    "None",
                    "str"
                ]
            }
        },
        "GsUsbBus.send": {
            "name": "send",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "msg": [
                    "int",
                    "str",
                    "typing.Callable[int, None]",
                    "None",
                    "float"
                ],
                "timeout": [
                    "None",
                    "float",
                    "int"
                ]
            }
        },
        "GsUsbBus._recv_internal": {
            "name": "_recv_internal",
            "location": 96,
            "return": [
                "tuple[typing.Optional[bool]]",
                "tuple[typing.Union[Message,bool]]"
            ],
            "arguments": {
                "self": [],
                "timeout": [
                    "bool",
                    "float"
                ]
            }
        },
        "GsUsbBus.shutdown": {
            "name": "shutdown",
            "location": 139,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "python-can-develop/can/interfaces/iscan.py": {
        "check_status_initialization": {
            "name": "check_status_initialization",
            "location": 33,
            "return": [
                "int"
            ],
            "arguments": {
                "result": [
                    "int"
                ],
                "function": [
                    "str",
                    "typing.Iterable[typing.Any]",
                    "int"
                ],
                "arguments": [
                    "str",
                    "typing.Iterable[typing.Any]",
                    "int"
                ]
            }
        },
        "check_status": {
            "name": "check_status",
            "location": 39,
            "return": [
                "int"
            ],
            "arguments": {
                "result": [
                    "int"
                ],
                "function": [
                    "str",
                    "typing.Iterable[typing.Any]",
                    "int"
                ],
                "arguments": [
                    "str",
                    "typing.Iterable[typing.Any]",
                    "int"
                ]
            }
        },
        "IscanBus.__init__": {
            "name": "__init__",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "channel": [],
                "bitrate": [
                    "int"
                ],
                "poll_interval": [
                    "float"
                ]
            }
        },
        "IscanBus._recv_internal": {
            "name": "_recv_internal",
            "location": 112,
            "return": [
                "tuple[typing.Optional[bool]]",
                "tuple[typing.Union[Message,bool]]"
            ],
            "arguments": {
                "self": [],
                "timeout": [
                    "float",
                    "None",
                    "int",
                    "typing.Any"
                ]
            }
        },
        "IscanBus.send": {
            "name": "send",
            "location": 144,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "msg": [
                    "int",
                    "float"
                ],
                "timeout": [
                    "None",
                    "float",
                    "int"
                ]
            }
        },
        "IscanBus.shutdown": {
            "name": "shutdown",
            "location": 154,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IscanError.__init__": {
            "name": "__init__",
            "location": 188,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "function": [
                    "int",
                    "None",
                    "str",
                    "tuple[typing.Union[int,int]]"
                ],
                "error_code": [
                    "str",
                    "list[dict[str, typing.Any]]",
                    "bytes"
                ],
                "arguments": [
                    "str",
                    "dict[str, typing.Any]",
                    "typing.Type",
                    "typing.IO",
                    "list[typing.Any]",
                    "None"
                ]
            }
        }
    },
    "python-can-develop/can/interfaces/nican.py": {
        "check_status": {
            "name": "check_status",
            "location": 110,
            "return": [],
            "arguments": {
                "result": [],
                "function": [
                    "str",
                    "dict[, ]"
                ],
                "arguments": [
                    "str",
                    "dict[, ]"
                ],
                "error_class": [
                    "NicanOperationError"
                ]
            }
        },
        "check_status_init": {
            "name": "check_status_init",
            "location": 123,
            "return": [],
            "arguments": {}
        },
        "get_error_message": {
            "name": "get_error_message",
            "location": 127,
            "return": [],
            "arguments": {
                "status_code": [
                    "bytes",
                    "str",
                    "int",
                    "dict[bytes, bytes]",
                    "dict[str, str]"
                ]
            }
        },
        "NicanError.__init__": {
            "name": "__init__",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "function": [
                    "str",
                    "dict[, ]"
                ],
                "error_code": [
                    "str",
                    "dict[, ]"
                ],
                "arguments": [
                    "str",
                    "dict[str, typing.Any]",
                    "typing.Type",
                    "typing.IO",
                    "list[typing.Any]",
                    "None"
                ]
            }
        },
        "NicanBus.__init__": {
            "name": "__init__",
            "location": 188,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "channel": [
                    "str"
                ],
                "can_filters": [],
                "bitrate": [
                    "None",
                    "bool",
                    "str",
                    "typing.Sequence[str]"
                ],
                "log_errors": [
                    "bool"
                ]
            }
        },
        "NicanBus._recv_internal": {
            "name": "_recv_internal",
            "location": 282,
            "return": [
                "tuple[typing.Optional[bool]]",
                "tuple[typing.Union[Message,bool]]"
            ],
            "arguments": {
                "self": [],
                "timeout": [
                    "float",
                    "None",
                    "int"
                ]
            }
        },
        "NicanBus.send": {
            "name": "send",
            "location": 333,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "msg": [
                    "str",
                    "typing.Sequence[T]",
                    "typing.Callable[T, bool]"
                ],
                "timeout": [
                    "None",
                    "float",
                    "int"
                ]
            }
        },
        "NicanBus.reset": {
            "name": "reset",
            "location": 365,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "NicanBus.shutdown": {
            "name": "shutdown",
            "location": 376,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "python-can-develop/can/interfaces/nixnet.py": {
        "NiXNETcanBus.__init__": {
            "name": "__init__",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "channel": [],
                "can_filters": [
                    "None"
                ],
                "bitrate": [
                    "None"
                ],
                "fd": [
                    "bool"
                ],
                "fd_bitrate": [
                    "None"
                ],
                "brs": [
                    "bool"
                ],
                "can_termination": [
                    "bool"
                ],
                "log_errors": [
                    "bool"
                ]
            }
        },
        "NiXNETcanBus._recv_internal": {
            "name": "_recv_internal",
            "location": 135,
            "return": [
                "tuple[typing.Union[Message,bool]]",
                "tuple[typing.Optional[bool]]"
            ],
            "arguments": {
                "self": [],
                "timeout": []
            }
        },
        "NiXNETcanBus.send": {
            "name": "send",
            "location": 166,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "msg": [],
                "timeout": [
                    "None"
                ]
            }
        },
        "NiXNETcanBus.reset": {
            "name": "reset",
            "location": 208,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "NiXNETcanBus.shutdown": {
            "name": "shutdown",
            "location": 223,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "NiXNETcanBus._detect_available_configs": {
            "name": "_detect_available_configs",
            "location": 236,
            "return": [
                "list[dict[typing.Text, typing.Union[typing.Text,bool]]]"
            ],
            "arguments": {}
        }
    },
    "python-can-develop/can/interfaces/robotell.py": {
        "robotellBus.__init__": {
            "name": "__init__",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "channel": [
                    "str"
                ],
                "ttyBaudrate": [
                    "int"
                ],
                "bitrate": [
                    "None",
                    "str",
                    "float",
                    "int",
                    "typing.Callable[, ]"
                ],
                "rtscts": [
                    "bool"
                ]
            }
        },
        "robotellBus.set_bitrate": {
            "name": "set_bitrate",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "bitrate": [
                    "int",
                    "dict[str, int]",
                    "float"
                ]
            }
        },
        "robotellBus.set_auto_retransmit": {
            "name": "set_auto_retransmit",
            "location": 111,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "retrans_flag": [
                    "int",
                    "str",
                    "typing.Match"
                ]
            }
        },
        "robotellBus.set_auto_bus_management": {
            "name": "set_auto_bus_management",
            "location": 118,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "auto_man": [
                    "typing.Iterable[str]",
                    "int",
                    "str",
                    "None"
                ]
            }
        },
        "robotellBus.set_serial_rate": {
            "name": "set_serial_rate",
            "location": 127,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "serial_bps": [
                    "typing.Iterable[str]",
                    "int",
                    "str",
                    "None"
                ]
            }
        },
        "robotellBus.set_hw_filter": {
            "name": "set_hw_filter",
            "location": 134,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "filterid": [
                    "int"
                ],
                "enabled": [
                    "int",
                    "str",
                    "typing.Callable[, ]"
                ],
                "msgid_value": [
                    "int",
                    "float"
                ],
                "msgid_mask": [
                    "int",
                    "None",
                    "str"
                ],
                "extended_msg": [
                    "int",
                    "str",
                    "typing.Callable[, ]"
                ]
            }
        },
        "robotellBus._getconfigsize": {
            "name": "_getconfigsize",
            "location": 156,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "configid": [
                    "list[]",
                    "list[int]",
                    "int"
                ]
            }
        },
        "robotellBus._readconfig": {
            "name": "_readconfig",
            "location": 169,
            "return": [
                "None",
                "str"
            ],
            "arguments": {
                "self": [],
                "configid": [
                    "typing.Iterable[str]",
                    "str",
                    "float"
                ],
                "timeout": [
                    "str",
                    "float",
                    "bool"
                ]
            }
        },
        "robotellBus._writeconfig": {
            "name": "_writeconfig",
            "location": 187,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "configid": [
                    "float",
                    "int"
                ],
                "value": [],
                "value2": [
                    "int"
                ]
            }
        },
        "robotellBus._readmessage": {
            "name": "_readmessage",
            "location": 216,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "flushold": [
                    "int",
                    "float"
                ],
                "cfgchannel": [
                    "int",
                    "float",
                    "str",
                    "list[]"
                ],
                "timeout": [
                    "int",
                    "float",
                    "str",
                    "dict[str, int]",
                    "tuple[]",
                    "None"
                ]
            }
        },
        "robotellBus._writemessage": {
            "name": "_writemessage",
            "location": 291,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "msgid": [
                    "int"
                ],
                "msgdata": [
                    "list[int]",
                    "str",
                    "int"
                ],
                "datalen": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ],
                "msgchan": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ],
                "msgformat": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ],
                "msgtype": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ]
            }
        },
        "robotellBus.flush": {
            "name": "flush",
            "location": 330,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "robotellBus._recv_internal": {
            "name": "_recv_internal",
            "location": 337,
            "return": [
                "tuple[typing.Union[Message,bool]]",
                "tuple[typing.Optional[bool]]"
            ],
            "arguments": {
                "self": [],
                "timeout": [
                    "bool",
                    "str"
                ]
            }
        },
        "robotellBus.send": {
            "name": "send",
            "location": 354,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "msg": [
                    "int"
                ],
                "timeout": [
                    "None",
                    "int",
                    "str",
                    "float",
                    "list[typing.Deque]"
                ]
            }
        },
        "robotellBus.shutdown": {
            "name": "shutdown",
            "location": 366,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "robotellBus.fileno": {
            "name": "fileno",
            "location": 370,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "robotellBus.get_serial_number": {
            "name": "get_serial_number",
            "location": 380,
            "return": [
                "None",
                "typing.Text"
            ],
            "arguments": {
                "self": [],
                "timeout": [
                    "str",
                    "float",
                    "None",
                    "tuple[typing.Union[int,int,int]]",
                    "int"
                ]
            }
        }
    },
    "python-can-develop/can/interfaces/slcan.py": {
        "slcanBus.__init__": {
            "name": "__init__",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "channel": [
                    "str"
                ],
                "ttyBaudrate": [
                    "int"
                ],
                "bitrate": [
                    "None",
                    "str",
                    "int"
                ],
                "btr": [
                    "None",
                    "str",
                    "int"
                ],
                "sleep_after_open": [],
                "rtscts": [
                    "bool"
                ]
            }
        },
        "slcanBus.set_bitrate": {
            "name": "set_bitrate",
            "location": 121,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "bitrate": [
                    "int",
                    "str"
                ]
            }
        },
        "slcanBus.set_bitrate_reg": {
            "name": "set_bitrate_reg",
            "location": 138,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "btr": []
            }
        },
        "slcanBus._write": {
            "name": "_write",
            "location": 147,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "string": [
                    "str"
                ]
            }
        },
        "slcanBus._read": {
            "name": "_read",
            "location": 152,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "timeout": [
                    "float",
                    "None",
                    "Exception",
                    "int",
                    "typing.Mapping"
                ]
            }
        },
        "slcanBus.flush": {
            "name": "flush",
            "location": 188,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "slcanBus.open": {
            "name": "open",
            "location": 194,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "slcanBus.close": {
            "name": "close",
            "location": 197,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "slcanBus._recv_internal": {
            "name": "_recv_internal",
            "location": 200,
            "return": [
                "tuple[typing.Union[Message,bool]]",
                "tuple[typing.Optional[bool]]"
            ],
            "arguments": {
                "self": [],
                "timeout": [
                    "list[list[]]",
                    "int",
                    "list[]",
                    "str",
                    "None",
                    "list[list[str]]",
                    "typing.Iterator"
                ]
            }
        },
        "slcanBus.send": {
            "name": "send",
            "location": 250,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "msg": [
                    "str",
                    "int"
                ],
                "timeout": [
                    "None",
                    "int",
                    "str",
                    "float",
                    "list[typing.Deque]"
                ]
            }
        },
        "slcanBus.shutdown": {
            "name": "shutdown",
            "location": 266,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "slcanBus.fileno": {
            "name": "fileno",
            "location": 272,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "slcanBus.get_version": {
            "name": "get_version",
            "location": 282,
            "return": [
                "tuple[int]",
                "tuple[None]"
            ],
            "arguments": {
                "self": [],
                "timeout": [
                    "float",
                    "None",
                    "bool",
                    "str"
                ]
            }
        },
        "slcanBus.get_serial_number": {
            "name": "get_serial_number",
            "location": 322,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "timeout": [
                    "float",
                    "None",
                    "str",
                    "bool"
                ]
            }
        }
    },
    "python-can-develop/can/interfaces/virtual.py": {
        "VirtualBus.__init__": {
            "name": "__init__",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "channel": [
                    "None",
                    "int",
                    "tuple[typing.Union[int,int]]",
                    "str"
                ],
                "receive_own_messages": [
                    "bool"
                ],
                "rx_queue_size": [
                    "int"
                ],
                "preserve_timestamps": [
                    "bool"
                ]
            }
        },
        "VirtualBus._check_if_open": {
            "name": "_check_if_open",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "VirtualBus._recv_internal": {
            "name": "_recv_internal",
            "location": 94,
            "return": [
                "tuple[typing.Optional[bool]]",
                "tuple[typing.Union[list[],dict[, ],dict[str, list[typing.Any]],dict[typing.Any, typing.Type],dict[typing.Type, str],bool]]"
            ],
            "arguments": {
                "self": [],
                "timeout": [
                    "bool",
                    "float",
                    "None"
                ]
            }
        },
        "VirtualBus.send": {
            "name": "send",
            "location": 105,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "msg": [
                    "int",
                    "float",
                    "str"
                ],
                "timeout": [
                    "None",
                    "float",
                    "dict[str, typing.Any]",
                    "int"
                ]
            }
        },
        "VirtualBus.shutdown": {
            "name": "shutdown",
            "location": 126,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "VirtualBus._detect_available_configs": {
            "name": "_detect_available_configs",
            "location": 139,
            "return": [
                "list[dict[typing.Text, typing.Union[typing.Text,list[],dict[str, dict[str, typing.Any]],dict[str, dict[str, str]]]]]"
            ],
            "arguments": {}
        },
        "VirtualBus._detect_available_configs.get_extra": {
            "name": "get_extra",
            "location": 154,
            "return": [
                "typing.Text"
            ],
            "arguments": {}
        }
    },
    "python-can-develop/can/interfaces/__init__.py": {},
    "python-can-develop/can/interfaces/etas/boa.py": {
        "errcheck_init": {
            "name": "errcheck_init",
            "location": 24,
            "return": [
                "str",
                "bytes"
            ],
            "arguments": {
                "result": [
                    "str",
                    "bytes"
                ],
                "func": [
                    "str",
                    "bytes"
                ],
                "_arguments": [
                    "int",
                    "list[_]",
                    "list[str]",
                    "None"
                ]
            }
        },
        "errcheck_oper": {
            "name": "errcheck_oper",
            "location": 34,
            "return": [
                "str",
                "typing.Callable[, ]",
                "None"
            ],
            "arguments": {
                "result": [
                    "str",
                    "typing.Callable[, ]",
                    "None"
                ],
                "func": [
                    "str",
                    "typing.Callable[, ]",
                    "None"
                ],
                "_arguments": []
            }
        }
    },
    "python-can-develop/can/interfaces/etas/__init__.py": {
        "EtasBus.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "channel": [
                    "str"
                ],
                "can_filters": [
                    "None",
                    "int",
                    "str",
                    "dict[str, typing.Any]"
                ],
                "receive_own_messages": [
                    "bool"
                ],
                "bitrate": [
                    "int"
                ],
                "fd": [
                    "bool"
                ],
                "data_bitrate": [
                    "int"
                ]
            }
        },
        "EtasBus._recv_internal": {
            "name": "_recv_internal",
            "location": 119,
            "return": [
                "tuple[typing.Union[None,Message,bool]]"
            ],
            "arguments": {
                "self": [],
                "timeout": [
                    "int",
                    "None"
                ]
            }
        },
        "EtasBus.send": {
            "name": "send",
            "location": 188,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "msg": [
                    "int",
                    "float"
                ],
                "timeout": [
                    "None",
                    "float",
                    "int"
                ]
            }
        },
        "EtasBus._apply_filters": {
            "name": "_apply_filters",
            "location": 218,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "filters": [
                    "bool",
                    "tuple[typing.Union[int,...]]",
                    "None",
                    "float"
                ]
            }
        },
        "EtasBus.flush_tx_buffer": {
            "name": "flush_tx_buffer",
            "location": 247,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EtasBus.shutdown": {
            "name": "shutdown",
            "location": 250,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EtasBus.state": {
            "name": "state",
            "location": 281,
            "return": [],
            "arguments": {
                "self": [],
                "new_state": []
            }
        },
        "EtasBus._detect_available_configs": {
            "name": "_detect_available_configs",
            "location": 292,
            "return": [
                "list[]"
            ],
            "arguments": {}
        },
        "EtasBus._detect_available_configs._findNodes": {
            "name": "_findNodes",
            "location": 299,
            "return": [
                "None"
            ],
            "arguments": {
                "tree": [],
                "prefix": []
            }
        }
    },
    "python-can-develop/can/interfaces/ics_neovi/neovi_bus.py": {
        "ICSApiError.__init__": {
            "name": "__init__",
            "location": 84,
            "return": [],
            "arguments": {
                "self": [],
                "error_code": [],
                "description_short": [],
                "description_long": [],
                "severity": [],
                "restart_needed": []
            }
        },
        "ICSApiError.__reduce__": {
            "name": "__reduce__",
            "location": 98,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ICSApiError.error_number": {
            "name": "error_number",
            "location": 108,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ICSApiError.is_critical": {
            "name": "is_critical",
            "location": 117,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NeoViBus.__init__": {
            "name": "__init__",
            "location": 135,
            "return": [],
            "arguments": {
                "self": [],
                "channel": [],
                "can_filters": []
            }
        },
        "NeoViBus.channel_to_netid": {
            "name": "channel_to_netid",
            "location": 229,
            "return": [],
            "arguments": {
                "channel_name_or_id": []
            }
        },
        "NeoViBus.get_serial_number": {
            "name": "get_serial_number",
            "location": 243,
            "return": [],
            "arguments": {
                "device": []
            }
        },
        "NeoViBus.shutdown": {
            "name": "shutdown",
            "location": 255,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NeoViBus._detect_available_configs": {
            "name": "_detect_available_configs",
            "location": 260,
            "return": [],
            "arguments": {}
        },
        "NeoViBus._find_device": {
            "name": "_find_device",
            "location": 283,
            "return": [],
            "arguments": {
                "self": [],
                "type_filter": [],
                "serial": []
            }
        },
        "NeoViBus._process_msg_queue": {
            "name": "_process_msg_queue",
            "location": 307,
            "return": [],
            "arguments": {
                "self": [],
                "timeout": []
            }
        },
        "NeoViBus._get_timestamp_for_msg": {
            "name": "_get_timestamp_for_msg",
            "location": 338,
            "return": [],
            "arguments": {
                "self": [],
                "ics_msg": []
            }
        },
        "NeoViBus._ics_msg_to_message": {
            "name": "_ics_msg_to_message",
            "location": 356,
            "return": [],
            "arguments": {
                "self": [],
                "ics_msg": []
            }
        },
        "NeoViBus._recv_internal": {
            "name": "_recv_internal",
            "location": 405,
            "return": [],
            "arguments": {
                "self": [],
                "timeout": []
            }
        },
        "NeoViBus.send": {
            "name": "send",
            "location": 415,
            "return": [],
            "arguments": {
                "self": [],
                "msg": [],
                "timeout": []
            }
        },
        "FileLock.__init__": {
            "name": "__init__",
            "location": 53,
            "return": [],
            "arguments": {
                "self": [],
                "lock_file": [],
                "timeout": []
            }
        },
        "FileLock.__enter__": {
            "name": "__enter__",
            "location": 57,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FileLock.__exit__": {
            "name": "__exit__",
            "location": 60,
            "return": [],
            "arguments": {
                "self": [],
                "exc_type": [],
                "exc_val": [],
                "exc_tb": []
            }
        }
    },
    "python-can-develop/can/interfaces/ics_neovi/__init__.py": {},
    "python-can-develop/can/interfaces/ixxat/canlib.py": {
        "IXXATBus.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "channel": [
                    "str",
                    "int"
                ],
                "can_filters": [
                    "None",
                    "str",
                    "int"
                ],
                "receive_own_messages": [
                    "bool"
                ],
                "unique_hardware_id": [
                    "None",
                    "str",
                    "int"
                ],
                "extended": [
                    "bool"
                ],
                "fd": [
                    "bool"
                ],
                "rx_fifo_size": [
                    "None",
                    "int",
                    "str",
                    "list[str]",
                    "bytes"
                ],
                "tx_fifo_size": [
                    "None",
                    "int",
                    "str",
                    "list[str]",
                    "bytes"
                ],
                "bitrate": [
                    "int"
                ],
                "data_bitrate": [
                    "int"
                ],
                "sjw_abr": [
                    "None",
                    "str",
                    "int"
                ],
                "tseg1_abr": [
                    "None",
                    "str",
                    "int"
                ],
                "tseg2_abr": [
                    "None",
                    "str",
                    "int"
                ],
                "sjw_dbr": [
                    "None",
                    "str",
                    "int"
                ],
                "tseg1_dbr": [
                    "None",
                    "str",
                    "int"
                ],
                "tseg2_dbr": [
                    "None",
                    "str",
                    "int"
                ],
                "ssp_dbr": [
                    "None",
                    "str",
                    "int"
                ]
            }
        },
        "IXXATBus.flush_tx_buffer": {
            "name": "flush_tx_buffer",
            "location": 132,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "IXXATBus._recv_internal": {
            "name": "_recv_internal",
            "location": 136,
            "return": [],
            "arguments": {
                "self": [],
                "timeout": [
                    "float",
                    "None",
                    "int"
                ]
            }
        },
        "IXXATBus.send": {
            "name": "send",
            "location": 140,
            "return": [],
            "arguments": {
                "self": [],
                "msg": [
                    "str",
                    "dict[str, typing.Any]",
                    "dict[str, float]",
                    "typing.Mapping",
                    "set[str]"
                ],
                "timeout": [
                    "None",
                    "str",
                    "dict[str, typing.Any]",
                    "dict[str, float]",
                    "typing.Mapping",
                    "set[str]"
                ]
            }
        },
        "IXXATBus._send_periodic_internal": {
            "name": "_send_periodic_internal",
            "location": 143,
            "return": [],
            "arguments": {
                "self": [],
                "msg": [
                    "int",
                    "float"
                ],
                "period": [
                    "int",
                    "float"
                ],
                "duration": [
                    "None",
                    "int",
                    "float"
                ]
            }
        },
        "IXXATBus.shutdown": {
            "name": "shutdown",
            "location": 146,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "python-can-develop/can/interfaces/ixxat/canlib_vcinpl.py": {
        "__vciFormatErrorExtended": {
            "name": "__vciFormatErrorExtended",
            "location": 60,
            "return": [],
            "arguments": {
                "library_instance": [],
                "function": [],
                "vret": [],
                "args": []
            }
        },
        "__vciFormatError": {
            "name": "__vciFormatError",
            "location": 81,
            "return": [],
            "arguments": {
                "library_instance": [],
                "function": [],
                "vret": []
            }
        },
        "__check_status": {
            "name": "__check_status",
            "location": 100,
            "return": [],
            "arguments": {
                "result": [],
                "function": [],
                "args": []
            }
        },
        "_format_can_status": {
            "name": "_format_can_status",
            "location": 839,
            "return": [],
            "arguments": {
                "status_flags": []
            }
        },
        "get_ixxat_hwids": {
            "name": "get_ixxat_hwids",
            "location": 861,
            "return": [],
            "arguments": {}
        },
        "IXXATBus.__init__": {
            "name": "__init__",
            "location": 419,
            "return": [],
            "arguments": {
                "self": [],
                "channel": [],
                "can_filters": [],
                "receive_own_messages": [],
                "unique_hardware_id": [],
                "extended": [],
                "rx_fifo_size": [],
                "tx_fifo_size": [],
                "bitrate": []
            }
        },
        "IXXATBus._inWaiting": {
            "name": "_inWaiting",
            "location": 627,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "IXXATBus.flush_tx_buffer": {
            "name": "flush_tx_buffer",
            "location": 635,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "IXXATBus._recv_internal": {
            "name": "_recv_internal",
            "location": 640,
            "return": [],
            "arguments": {
                "self": [],
                "timeout": []
            }
        },
        "IXXATBus.send": {
            "name": "send",
            "location": 741,
            "return": [],
            "arguments": {
                "self": [],
                "msg": [],
                "timeout": []
            }
        },
        "IXXATBus._send_periodic_internal": {
            "name": "_send_periodic_internal",
            "location": 773,
            "return": [],
            "arguments": {
                "self": [],
                "msg": [],
                "period": [],
                "duration": []
            }
        },
        "IXXATBus.shutdown": {
            "name": "shutdown",
            "location": 786,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CyclicSendTask.__init__": {
            "name": "__init__",
            "location": 798,
            "return": [],
            "arguments": {
                "self": [],
                "scheduler": [],
                "msgs": [],
                "period": [],
                "duration": [],
                "resolution": []
            }
        },
        "CyclicSendTask.start": {
            "name": "start",
            "location": 820,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CyclicSendTask.pause": {
            "name": "pause",
            "location": 827,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CyclicSendTask.stop": {
            "name": "stop",
            "location": 831,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "python-can-develop/can/interfaces/ixxat/canlib_vcinpl2.py": {
        "__vciFormatErrorExtended": {
            "name": "__vciFormatErrorExtended",
            "location": 62,
            "return": [],
            "arguments": {
                "library_instance": [],
                "function": [],
                "vret": [],
                "args": []
            }
        },
        "__vciFormatError": {
            "name": "__vciFormatError",
            "location": 83,
            "return": [],
            "arguments": {
                "library_instance": [],
                "function": [],
                "vret": []
            }
        },
        "__check_status": {
            "name": "__check_status",
            "location": 102,
            "return": [],
            "arguments": {
                "result": [],
                "function": [],
                "args": []
            }
        },
        "_format_can_status": {
            "name": "_format_can_status",
            "location": 1005,
            "return": [],
            "arguments": {
                "status_flags": []
            }
        },
        "get_ixxat_hwids": {
            "name": "get_ixxat_hwids",
            "location": 1027,
            "return": [],
            "arguments": {}
        },
        "IXXATBus.__init__": {
            "name": "__init__",
            "location": 425,
            "return": [],
            "arguments": {
                "self": [],
                "channel": [],
                "can_filters": [],
                "receive_own_messages": [],
                "unique_hardware_id": [],
                "extended": [],
                "rx_fifo_size": [],
                "tx_fifo_size": [],
                "bitrate": [],
                "data_bitrate": [],
                "sjw_abr": [],
                "tseg1_abr": [],
                "tseg2_abr": [],
                "sjw_dbr": [],
                "tseg1_dbr": [],
                "tseg2_dbr": [],
                "ssp_dbr": []
            }
        },
        "IXXATBus._canptb_build": {
            "name": "_canptb_build",
            "location": 747,
            "return": [],
            "arguments": {
                "defaults": [],
                "bitrate": [],
                "tseg1": [],
                "tseg2": [],
                "sjw": [],
                "ssp": []
            }
        },
        "IXXATBus._inWaiting": {
            "name": "_inWaiting",
            "location": 771,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "IXXATBus.flush_tx_buffer": {
            "name": "flush_tx_buffer",
            "location": 779,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "IXXATBus._recv_internal": {
            "name": "_recv_internal",
            "location": 784,
            "return": [],
            "arguments": {
                "self": [],
                "timeout": []
            }
        },
        "IXXATBus.send": {
            "name": "send",
            "location": 894,
            "return": [],
            "arguments": {
                "self": [],
                "msg": [],
                "timeout": []
            }
        },
        "IXXATBus._send_periodic_internal": {
            "name": "_send_periodic_internal",
            "location": 937,
            "return": [],
            "arguments": {
                "self": [],
                "msg": [],
                "period": [],
                "duration": []
            }
        },
        "IXXATBus.shutdown": {
            "name": "shutdown",
            "location": 952,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CyclicSendTask.__init__": {
            "name": "__init__",
            "location": 964,
            "return": [],
            "arguments": {
                "self": [],
                "scheduler": [],
                "msgs": [],
                "period": [],
                "duration": [],
                "resolution": []
            }
        },
        "CyclicSendTask.start": {
            "name": "start",
            "location": 986,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CyclicSendTask.pause": {
            "name": "pause",
            "location": 993,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CyclicSendTask.stop": {
            "name": "stop",
            "location": 997,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "python-can-develop/can/interfaces/ixxat/constants.py": {},
    "python-can-develop/can/interfaces/ixxat/exceptions.py": {
        "VCIRxQueueEmptyError.__init__": {
            "name": "__init__",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "VCIBusOffError.__init__": {
            "name": "__init__",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "python-can-develop/can/interfaces/ixxat/structures.py": {
        "VCIDEVICEINFO.__str__": {
            "name": "__str__",
            "location": 53,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "CANBTP.__str__": {
            "name": "__str__",
            "location": 192,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "python-can-develop/can/interfaces/ixxat/__init__.py": {},
    "python-can-develop/can/interfaces/kvaser/canlib.py": {
        "_unimplemented_function": {
            "name": "_unimplemented_function",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "__get_canlib_function": {
            "name": "__get_canlib_function",
            "location": 44,
            "return": [
                "str",
                "int",
                "bytes"
            ],
            "arguments": {
                "func_name": [
                    "str"
                ],
                "argtypes": [
                    "None",
                    "str",
                    "bool",
                    "typing.IO",
                    "dict[, ]"
                ],
                "restype": [
                    "None",
                    "str",
                    "dict[, ]",
                    "typing.Type"
                ],
                "errcheck": [
                    "None",
                    "str",
                    "dict[, ]",
                    "typing.Type"
                ]
            }
        },
        "__convert_can_status_to_int": {
            "name": "__convert_can_status_to_int",
            "location": 91,
            "return": [
                "int"
            ],
            "arguments": {
                "result": [
                    "int",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "__check_status_operation": {
            "name": "__check_status_operation",
            "location": 98,
            "return": [
                "bool",
                "typing.Generator[typing.Union[dict[str, typing.Any],None,None]]",
                "list[]"
            ],
            "arguments": {
                "result": [
                    "bytes",
                    "typing.Callable[, ]"
                ],
                "function": [
                    "str",
                    "typing.Iterable[typing.Any]",
                    "int"
                ],
                "arguments": [
                    "str",
                    "typing.Iterable[typing.Any]",
                    "int"
                ]
            }
        },
        "__check_status_initialization": {
            "name": "__check_status_initialization",
            "location": 105,
            "return": [
                "bool",
                "typing.Generator[typing.Union[dict[str, typing.Any],None,None]]",
                "list[]"
            ],
            "arguments": {
                "result": [
                    "bytes",
                    "typing.Callable[, ]"
                ],
                "function": [
                    "str",
                    "typing.Iterable[typing.Any]",
                    "int"
                ],
                "arguments": [
                    "str",
                    "typing.Iterable[typing.Any]",
                    "int"
                ]
            }
        },
        "__check_status_read": {
            "name": "__check_status_read",
            "location": 112,
            "return": [],
            "arguments": {
                "result": [
                    "bytes",
                    "dict[, ]"
                ],
                "function": [
                    "str",
                    "typing.Iterable[typing.Any]",
                    "int"
                ],
                "arguments": [
                    "str",
                    "typing.Iterable[typing.Any]",
                    "int"
                ]
            }
        },
        "__check_bus_handle_validity": {
            "name": "__check_bus_handle_validity",
            "location": 126,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "handle": [
                    "str",
                    "int"
                ],
                "function": [
                    "typing.Iterable[typing.Any]",
                    "str"
                ],
                "arguments": [
                    "typing.Iterable[typing.Any]",
                    "str"
                ]
            }
        },
        "init_kvaser_library": {
            "name": "init_kvaser_library",
            "location": 323,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "get_channel_info": {
            "name": "get_channel_info",
            "location": 693,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "channel": [
                    "typing.Callable[, ]",
                    "int"
                ]
            }
        },
        "CANLIBError.__init__": {
            "name": "__init__",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "function": [
                    "str",
                    "None",
                    "int"
                ],
                "error_code": [
                    "str",
                    "dict[str, str]",
                    "list[str]",
                    "typing.Callable[, ]",
                    "typing.Any"
                ],
                "arguments": [
                    "str",
                    "dict[str, typing.Any]",
                    "typing.Type",
                    "typing.IO",
                    "list[typing.Any]",
                    "None"
                ]
            }
        },
        "CANLIBError._get_error_message": {
            "name": "_get_error_message",
            "location": 77,
            "return": [],
            "arguments": {
                "error_code": [
                    "str",
                    "typing.Iterable[str]",
                    "typing.Match"
                ]
            }
        },
        "KvaserBus.__init__": {
            "name": "__init__",
            "location": 363,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "channel": [],
                "can_filters": [
                    "None",
                    "str"
                ]
            }
        },
        "KvaserBus._apply_filters": {
            "name": "_apply_filters",
            "location": 525,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "filters": []
            }
        },
        "KvaserBus.flush_tx_buffer": {
            "name": "flush_tx_buffer",
            "location": 550,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "KvaserBus._recv_internal": {
            "name": "_recv_internal",
            "location": 554,
            "return": [
                "tuple[Message]",
                "tuple[None]"
            ],
            "arguments": {
                "self": [],
                "timeout": [
                    "None",
                    "int",
                    "float",
                    "list[]"
                ]
            }
        },
        "KvaserBus.send": {
            "name": "send",
            "location": 611,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "msg": [
                    "str",
                    "list[str]",
                    "float"
                ],
                "timeout": []
            }
        },
        "KvaserBus.flash": {
            "name": "flash",
            "location": 630,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "flash": [
                    "bool"
                ]
            }
        },
        "KvaserBus.shutdown": {
            "name": "shutdown",
            "location": 645,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "KvaserBus.get_stats": {
            "name": "get_stats",
            "location": 660,
            "return": [
                "BusStatistics"
            ],
            "arguments": {
                "self": []
            }
        },
        "KvaserBus._detect_available_configs": {
            "name": "_detect_available_configs",
            "location": 680,
            "return": [
                "list[dict[typing.Text, typing.Text]]"
            ],
            "arguments": {}
        }
    },
    "python-can-develop/can/interfaces/kvaser/constants.py": {
        "CANSTATUS_SUCCESS": {
            "name": "CANSTATUS_SUCCESS",
            "location": 53,
            "return": [
                "bool"
            ],
            "arguments": {
                "status": [
                    "int"
                ]
            }
        }
    },
    "python-can-develop/can/interfaces/kvaser/structures.py": {
        "BusStatistics.__str__": {
            "name": "__str__",
            "location": 27,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BusStatistics.std_data": {
            "name": "std_data",
            "location": 42,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BusStatistics.std_remote": {
            "name": "std_remote",
            "location": 47,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BusStatistics.ext_data": {
            "name": "ext_data",
            "location": 52,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BusStatistics.ext_remote": {
            "name": "ext_remote",
            "location": 57,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BusStatistics.err_frame": {
            "name": "err_frame",
            "location": 62,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BusStatistics.bus_load": {
            "name": "bus_load",
            "location": 67,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BusStatistics.overruns": {
            "name": "overruns",
            "location": 72,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "python-can-develop/can/interfaces/kvaser/__init__.py": {},
    "python-can-develop/can/interfaces/neousys/neousys.py": {
        "NeousysBus.__init__": {
            "name": "__init__",
            "location": 140,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "channel": [
                    "bool",
                    "float",
                    "None"
                ],
                "device": [
                    "int"
                ],
                "bitrate": [
                    "int"
                ]
            }
        },
        "NeousysBus.send": {
            "name": "send",
            "location": 180,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "msg": [
                    "str",
                    "int",
                    "list[str]",
                    "float"
                ],
                "timeout": [
                    "None",
                    "float",
                    "int"
                ]
            }
        },
        "NeousysBus._recv_internal": {
            "name": "_recv_internal",
            "location": 193,
            "return": [
                "tuple[bool]",
                "tuple[typing.Optional[bool]]"
            ],
            "arguments": {
                "self": [],
                "timeout": [
                    "str",
                    "int",
                    "dict[, ]"
                ]
            }
        },
        "NeousysBus._neousys_recv_cb": {
            "name": "_neousys_recv_cb",
            "location": 199,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "msg": [
                    "dict[, ]",
                    "dict[str, list[]]"
                ],
                "sizeof_msg": [
                    "str"
                ]
            }
        },
        "NeousysBus._neousys_status_cb": {
            "name": "_neousys_status_cb",
            "location": 229,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "status": [
                    "int",
                    "str",
                    "list[int]",
                    "None"
                ]
            }
        },
        "NeousysBus.shutdown": {
            "name": "shutdown",
            "location": 235,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "NeousysBus._detect_available_configs": {
            "name": "_detect_available_configs",
            "location": 240,
            "return": [
                "list[dict[typing.Text, typing.Union[typing.Text,int]]]"
            ],
            "arguments": {}
        }
    },
    "python-can-develop/can/interfaces/neousys/__init__.py": {},
    "python-can-develop/can/interfaces/pcan/basic.py": {
        "PCANBasic.__init__": {
            "name": "__init__",
            "location": 656,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PCANBasic.Initialize": {
            "name": "Initialize",
            "location": 686,
            "return": [],
            "arguments": {
                "self": [],
                "Channel": [
                    "list[str]",
                    "None",
                    "str",
                    "float",
                    "int"
                ],
                "Btr0Btr1": [
                    "list[str]",
                    "None",
                    "str",
                    "float",
                    "int"
                ],
                "HwType": [
                    "list[str]",
                    "None",
                    "str",
                    "float",
                    "int"
                ],
                "IOPort": [
                    "list[str]",
                    "None",
                    "str",
                    "float",
                    "int"
                ],
                "Interrupt": [
                    "list[str]",
                    "None",
                    "str",
                    "float",
                    "int"
                ]
            }
        },
        "PCANBasic.InitializeFD": {
            "name": "InitializeFD",
            "location": 718,
            "return": [],
            "arguments": {
                "self": [],
                "Channel": [
                    "str",
                    "typing.Any",
                    "None",
                    "list[\"ChannelResourceIdentifier\"]"
                ],
                "BitrateFD": [
                    "str",
                    "typing.Any",
                    "None",
                    "list[F]"
                ]
            }
        },
        "PCANBasic.Uninitialize": {
            "name": "Uninitialize",
            "location": 749,
            "return": [],
            "arguments": {
                "self": [],
                "Channel": [
                    "str",
                    "typing.Any",
                    "None",
                    "list[\"ChannelResourceIdentifier\"]"
                ]
            }
        },
        "PCANBasic.Reset": {
            "name": "Reset",
            "location": 771,
            "return": [],
            "arguments": {
                "self": [],
                "Channel": [
                    "str",
                    "typing.Any",
                    "None",
                    "list[\"ChannelResourceIdentifier\"]"
                ]
            }
        },
        "PCANBasic.GetStatus": {
            "name": "GetStatus",
            "location": 793,
            "return": [],
            "arguments": {
                "self": [],
                "Channel": []
            }
        },
        "PCANBasic.Read": {
            "name": "Read",
            "location": 812,
            "return": [
                "tuple[typing.Union[TPCANMsg,TPCANTimestamp]]"
            ],
            "arguments": {
                "self": [],
                "Channel": [
                    "str",
                    "typing.Callable[, ]",
                    "int",
                    "None"
                ]
            }
        },
        "PCANBasic.ReadFD": {
            "name": "ReadFD",
            "location": 841,
            "return": [
                "tuple[typing.Union[TPCANMsgFD,str,None,dict[str, typing.Any]]]"
            ],
            "arguments": {
                "self": [],
                "Channel": [
                    "str",
                    "int",
                    "list[]"
                ]
            }
        },
        "PCANBasic.Write": {
            "name": "Write",
            "location": 870,
            "return": [],
            "arguments": {
                "self": [],
                "Channel": [
                    "str"
                ],
                "MessageBuffer": [
                    "str"
                ]
            }
        },
        "PCANBasic.WriteFD": {
            "name": "WriteFD",
            "location": 890,
            "return": [],
            "arguments": {
                "self": [],
                "Channel": [
                    "str",
                    "typing.Any",
                    "None",
                    "list[\"ChannelResourceIdentifier\"]"
                ],
                "MessageBuffer": [
                    "str",
                    "typing.Any",
                    "None",
                    "list[M]"
                ]
            }
        },
        "PCANBasic.FilterMessages": {
            "name": "FilterMessages",
            "location": 910,
            "return": [],
            "arguments": {
                "self": [],
                "Channel": [
                    "str",
                    "None",
                    "bool"
                ],
                "FromID": [
                    "str",
                    "None",
                    "bool"
                ],
                "ToID": [
                    "str",
                    "None",
                    "bool"
                ],
                "Mode": [
                    "str",
                    "None",
                    "bool"
                ]
            }
        },
        "PCANBasic.GetValue": {
            "name": "GetValue",
            "location": 937,
            "return": [
                "tuple[]",
                "tuple[int]"
            ],
            "arguments": {
                "self": [],
                "Channel": [
                    "typing.Callable[[], str]",
                    "str",
                    "None"
                ],
                "Parameter": [
                    "dict[str, typing.Any]",
                    "typing.Type"
                ]
            }
        },
        "PCANBasic.SetValue": {
            "name": "SetValue",
            "location": 993,
            "return": [],
            "arguments": {
                "self": [],
                "Channel": [
                    "int",
                    "str",
                    "None",
                    "dict[str, typing.Any]"
                ],
                "Parameter": [
                    "typing.Type"
                ],
                "Buffer": [
                    "str",
                    "typing.Callable[, ]",
                    "None"
                ]
            }
        },
        "PCANBasic.GetErrorText": {
            "name": "GetErrorText",
            "location": 1031,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "self": [],
                "Error": [
                    "str"
                ],
                "Language": [
                    "int"
                ]
            }
        },
        "PCANBasic.LookUpChannel": {
            "name": "LookUpChannel",
            "location": 1060,
            "return": [
                "tuple[typing.Union[list[dict[str, typing.Any]],dict[int, dict[int, typing.Any]]]]"
            ],
            "arguments": {
                "self": [],
                "Parameters": [
                    "int",
                    "typing.Sequence[float]",
                    "list[tuple[typing.Union[str,typing.Any]]]",
                    "str",
                    "float"
                ]
            }
        }
    },
    "python-can-develop/can/interfaces/pcan/pcan.py": {
        "PcanBus.__init__": {
            "name": "__init__",
            "location": 103,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "channel": [
                    "typing.Text"
                ],
                "state": [],
                "bitrate": [
                    "int"
                ]
            }
        },
        "PcanBus._get_formatted_error": {
            "name": "_get_formatted_error",
            "location": 272,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "error": [
                    "str",
                    "int"
                ]
            }
        },
        "PcanBus.get_api_version": {
            "name": "get_api_version",
            "location": 315,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PcanBus.check_api_version": {
            "name": "check_api_version",
            "location": 322,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PcanBus.status": {
            "name": "status",
            "location": 330,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PcanBus.status_is_ok": {
            "name": "status_is_ok",
            "location": 339,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "PcanBus.reset": {
            "name": "reset",
            "location": 346,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "PcanBus.get_device_number": {
            "name": "get_device_number",
            "location": 353,
            "return": [
                "None",
                "list[]",
                "int",
                "dict[str, str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "PcanBus.set_device_number": {
            "name": "set_device_number",
            "location": 367,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "device_number": []
            }
        },
        "PcanBus._recv_internal": {
            "name": "_recv_internal",
            "location": 388,
            "return": [
                "tuple[typing.Optional[bool]]",
                "tuple[typing.Union[Message,bool]]"
            ],
            "arguments": {
                "self": [],
                "timeout": [
                    "None"
                ]
            }
        },
        "PcanBus.send": {
            "name": "send",
            "location": 473,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "msg": [
                    "int",
                    "float"
                ],
                "timeout": [
                    "None",
                    "float",
                    "int"
                ]
            }
        },
        "PcanBus.flash": {
            "name": "flash",
            "location": 533,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "flash": [
                    "int",
                    "str"
                ]
            }
        },
        "PcanBus.shutdown": {
            "name": "shutdown",
            "location": 542,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PcanBus.state": {
            "name": "state",
            "location": 551,
            "return": [
                "bytes",
                "bool",
                "tuple[str]",
                "dict[str, typing.Any]",
                "dict[, ]"
            ],
            "arguments": {
                "self": [],
                "new_state": []
            }
        },
        "PcanBus._detect_available_configs": {
            "name": "_detect_available_configs",
            "location": 569,
            "return": [
                "list[]",
                "list[dict[typing.Text, typing.Union[typing.Text,bool]]]"
            ],
            "arguments": {}
        },
        "PcanBus.status_string": {
            "name": "status_string",
            "location": 620,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PcanBus._get_formatted_error.bits": {
            "name": "bits",
            "location": 281,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "n": []
            }
        }
    },
    "python-can-develop/can/interfaces/pcan/__init__.py": {},
    "python-can-develop/can/interfaces/seeedstudio/seeedstudio.py": {
        "SeeedBus.__init__": {
            "name": "__init__",
            "location": 58,
            "return": [],
            "arguments": {
                "self": [],
                "channel": [],
                "baudrate": [],
                "timeout": [],
                "frame_type": [],
                "operation_mode": [],
                "bitrate": []
            }
        },
        "SeeedBus.shutdown": {
            "name": "shutdown",
            "location": 119,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SeeedBus.init_frame": {
            "name": "init_frame",
            "location": 126,
            "return": [],
            "arguments": {
                "self": [],
                "timeout": []
            }
        },
        "SeeedBus.flush_buffer": {
            "name": "flush_buffer",
            "location": 157,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SeeedBus.status_frame": {
            "name": "status_frame",
            "location": 160,
            "return": [],
            "arguments": {
                "self": [],
                "timeout": []
            }
        },
        "SeeedBus.send": {
            "name": "send",
            "location": 184,
            "return": [],
            "arguments": {
                "self": [],
                "msg": [],
                "timeout": []
            }
        },
        "SeeedBus._write": {
            "name": "_write",
            "location": 221,
            "return": [],
            "arguments": {
                "self": [],
                "byte_msg": []
            }
        },
        "SeeedBus._recv_internal": {
            "name": "_recv_internal",
            "location": 229,
            "return": [],
            "arguments": {
                "self": [],
                "timeout": []
            }
        },
        "SeeedBus.fileno": {
            "name": "fileno",
            "location": 303,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "python-can-develop/can/interfaces/seeedstudio/__init__.py": {},
    "python-can-develop/can/interfaces/serial/serial_can.py": {
        "SerialBus.__init__": {
            "name": "__init__",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "channel": [
                    "dict[, ]",
                    "int"
                ],
                "baudrate": [
                    "int"
                ],
                "timeout": [
                    "float"
                ],
                "rtscts": [
                    "bool"
                ]
            }
        },
        "SerialBus.shutdown": {
            "name": "shutdown",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SerialBus.send": {
            "name": "send",
            "location": 107,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "msg": [
                    "float",
                    "int",
                    "list[str]"
                ],
                "timeout": [
                    "None",
                    "float",
                    "int"
                ]
            }
        },
        "SerialBus._recv_internal": {
            "name": "_recv_internal",
            "location": 154,
            "return": [
                "tuple[typing.Union[Message,bool]]",
                "tuple[typing.Optional[bool]]"
            ],
            "arguments": {
                "self": [],
                "timeout": [
                    "float",
                    "None",
                    "int"
                ]
            }
        },
        "SerialBus.fileno": {
            "name": "fileno",
            "location": 215,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SerialBus._detect_available_configs": {
            "name": "_detect_available_configs",
            "location": 226,
            "return": [
                "list[dict[typing.Text, typing.Text]]"
            ],
            "arguments": {}
        },
        "list_comports": {
            "name": "list_comports",
            "location": 39,
            "return": [
                "list[]"
            ],
            "arguments": {}
        }
    },
    "python-can-develop/can/interfaces/serial/__init__.py": {},
    "python-can-develop/can/interfaces/socketcan/constants.py": {},
    "python-can-develop/can/interfaces/socketcan/socketcan.py": {
        "bcm_header_factory": {
            "name": "bcm_header_factory",
            "location": 52,
            "return": [
                "typing.Type"
            ],
            "arguments": {
                "fields": [
                    "list[tuple[typing.Union[str,typing.Any]]]",
                    "list[dict[, ]]"
                ],
                "alignment": [
                    "int"
                ]
            }
        },
        "build_can_frame": {
            "name": "build_can_frame",
            "location": 145,
            "return": [],
            "arguments": {
                "msg": [
                    "dict[str, typing.Any]",
                    "bytes",
                    "str",
                    "int"
                ]
            }
        },
        "build_bcm_header": {
            "name": "build_bcm_header",
            "location": 188,
            "return": [],
            "arguments": {
                "opcode": [
                    "dict[str, typing.Any]",
                    "list[]"
                ],
                "flags": [
                    "dict[str, typing.Any]",
                    "list[]"
                ],
                "count": [
                    "dict[str, typing.Any]",
                    "list[]"
                ],
                "ival1_seconds": [
                    "dict[str, typing.Any]",
                    "list[]"
                ],
                "ival1_usec": [
                    "dict[str, typing.Any]",
                    "list[]"
                ],
                "ival2_seconds": [
                    "dict[str, typing.Any]",
                    "list[]"
                ],
                "ival2_usec": [
                    "dict[str, typing.Any]",
                    "list[]"
                ],
                "can_id": [
                    "dict[str, typing.Any]",
                    "list[]"
                ],
                "nframes": [
                    "dict[str, typing.Any]",
                    "list[]"
                ]
            }
        },
        "build_bcm_tx_delete_header": {
            "name": "build_bcm_tx_delete_header",
            "location": 213,
            "return": [],
            "arguments": {
                "can_id": [
                    "int",
                    "list[int]"
                ],
                "flags": [
                    "int",
                    "list[int]"
                ]
            }
        },
        "build_bcm_transmit_header": {
            "name": "build_bcm_transmit_header",
            "location": 218,
            "return": [],
            "arguments": {
                "can_id": [
                    "int",
                    "str",
                    "list[int]"
                ],
                "count": [
                    "int",
                    "str",
                    "list[int]"
                ],
                "initial_period": [
                    "float",
                    "bool"
                ],
                "subsequent_period": [
                    "float",
                    "str",
                    "bool",
                    "None"
                ],
                "msg_flags": [
                    "int",
                    "str",
                    "None",
                    "typing.Iterable[int]"
                ],
                "nframes": [
                    "int"
                ]
            }
        },
        "build_bcm_update_header": {
            "name": "build_bcm_update_header",
            "location": 256,
            "return": [],
            "arguments": {
                "can_id": [
                    "int",
                    "str"
                ],
                "msg_flags": [
                    "int",
                    "str"
                ],
                "nframes": [
                    "int"
                ]
            }
        },
        "dissect_can_frame": {
            "name": "dissect_can_frame",
            "location": 260,
            "return": [
                "tuple[int]"
            ],
            "arguments": {
                "frame": []
            }
        },
        "create_bcm_socket": {
            "name": "create_bcm_socket",
            "location": 268,
            "return": [],
            "arguments": {
                "channel": [
                    "str",
                    "bool",
                    "None",
                    "dict[str, float]"
                ]
            }
        },
        "send_bcm": {
            "name": "send_bcm",
            "location": 275,
            "return": [],
            "arguments": {
                "bcm_socket": [],
                "data": [
                    "bytes",
                    "str"
                ]
            }
        },
        "_compose_arbitration_id": {
            "name": "_compose_arbitration_id",
            "location": 296,
            "return": [],
            "arguments": {
                "message": [
                    "bool"
                ]
            }
        },
        "create_socket": {
            "name": "create_socket",
            "location": 484,
            "return": [],
            "arguments": {}
        },
        "bind_socket": {
            "name": "bind_socket",
            "location": 495,
            "return": [
                "None"
            ],
            "arguments": {
                "sock": [],
                "channel": [
                    "typing.Text"
                ]
            }
        },
        "capture_message": {
            "name": "capture_message",
            "location": 511,
            "return": [
                "Message"
            ],
            "arguments": {
                "sock": [
                    "float",
                    "int",
                    "tuple[typing.Union[int,int]]"
                ],
                "get_channel": [
                    "bool"
                ]
            }
        },
        "build_bcm_transmit_header.split_time": {
            "name": "split_time",
            "location": 234,
            "return": [
                "tuple[int]"
            ],
            "arguments": {
                "value": []
            }
        },
        "CyclicSendTask.__init__": {
            "name": "__init__",
            "location": 321,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "bcm_socket": [
                    "bool",
                    "dict[, ]",
                    "bytes",
                    "str"
                ],
                "task_id": [
                    "str",
                    "int",
                    "bytes",
                    "list[int]"
                ],
                "messages": [
                    "float",
                    "None",
                    "str",
                    "int"
                ],
                "period": [
                    "float",
                    "None",
                    "str",
                    "int"
                ],
                "duration": [
                    "None",
                    "float",
                    "str",
                    "int"
                ]
            }
        },
        "CyclicSendTask._tx_setup": {
            "name": "_tx_setup",
            "location": 352,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "messages": []
            }
        },
        "CyclicSendTask._check_bcm_task": {
            "name": "_check_bcm_task",
            "location": 376,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CyclicSendTask.stop": {
            "name": "stop",
            "location": 401,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CyclicSendTask.modify_data": {
            "name": "modify_data",
            "location": 413,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "messages": [
                    "typing.Sequence[can.Message]",
                    "bool",
                    "str",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "CyclicSendTask.start": {
            "name": "start",
            "location": 440,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MultiRateCyclicSendTask.__init__": {
            "name": "__init__",
            "location": 455,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "channel": [
                    "int",
                    "typing.Sequence[can.Message]",
                    "float"
                ],
                "task_id": [
                    "int",
                    "typing.Sequence[can.Message]",
                    "float"
                ],
                "messages": [],
                "count": [
                    "list[int]",
                    "int",
                    "float",
                    "tuple[typing.Union[list[typing.Any],list[typing.Any]]]",
                    "list[str]",
                    "set[]"
                ],
                "initial_period": [
                    "list[int]",
                    "int",
                    "float",
                    "tuple[typing.Union[list[typing.Any],list[typing.Any]]]",
                    "list[str]",
                    "set[]"
                ],
                "subsequent_period": [
                    "int",
                    "typing.Sequence[can.Message]",
                    "float"
                ]
            }
        },
        "SocketcanBus.__init__": {
            "name": "__init__",
            "location": 606,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "channel": [
                    "typing.Text"
                ],
                "receive_own_messages": [
                    "bool"
                ],
                "local_loopback": [
                    "bool"
                ],
                "fd": [
                    "bool"
                ],
                "can_filters": [
                    "None",
                    "str"
                ],
                "ignore_rx_error_frames": [
                    "bool"
                ]
            }
        },
        "SocketcanBus.shutdown": {
            "name": "shutdown",
            "location": 701,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SocketcanBus._recv_internal": {
            "name": "_recv_internal",
            "location": 710,
            "return": [
                "tuple[]",
                "tuple[None]"
            ],
            "arguments": {
                "self": [],
                "timeout": [
                    "int",
                    "float",
                    "None",
                    "str",
                    "list[tuple[typing.Union[int,int]]]"
                ]
            }
        },
        "SocketcanBus.send": {
            "name": "send",
            "location": 734,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "msg": [
                    "bytes",
                    "str",
                    "bool",
                    "typing.AbstractSet"
                ],
                "timeout": [
                    "None",
                    "float",
                    "dict[, ]"
                ]
            }
        },
        "SocketcanBus._send_once": {
            "name": "_send_once",
            "location": 772,
            "return": [
                "bytes",
                "dict[str, dict[str, str]]",
                "str",
                "tuple[typing.Union[typing.Literal,typing.Literal]]"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "bytes",
                    "typing.DefaultDict",
                    "typing.Mapping",
                    "dict[, ]"
                ],
                "channel": [
                    "None",
                    "str",
                    "bytes",
                    "bool"
                ]
            }
        },
        "SocketcanBus._send_periodic_internal": {
            "name": "_send_periodic_internal",
            "location": 785,
            "return": [
                "CyclicSendTask"
            ],
            "arguments": {
                "self": [],
                "msgs": [
                    "typing.Sequence[can.Message]",
                    "bytes",
                    "list[dict[str, typing.Any]]",
                    "typing.Sequence[int]"
                ],
                "period": [
                    "float",
                    "None",
                    "str",
                    "int"
                ],
                "duration": [
                    "None",
                    "float",
                    "str",
                    "int"
                ]
            }
        },
        "SocketcanBus._get_next_task_id": {
            "name": "_get_next_task_id",
            "location": 830,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "SocketcanBus._get_bcm_socket": {
            "name": "_get_bcm_socket",
            "location": 835,
            "return": [],
            "arguments": {
                "self": [],
                "channel": [
                    "bool",
                    "str"
                ]
            }
        },
        "SocketcanBus._apply_filters": {
            "name": "_apply_filters",
            "location": 840,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "filters": [
                    "str",
                    "bool",
                    "dict[, ]"
                ]
            }
        },
        "SocketcanBus.fileno": {
            "name": "fileno",
            "location": 853,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SocketcanBus._detect_available_configs": {
            "name": "_detect_available_configs",
            "location": 857,
            "return": [
                "list[dict[typing.Text, typing.Text]]"
            ],
            "arguments": {}
        },
        "receiver": {
            "name": "receiver",
            "location": 876,
            "return": [
                "None"
            ],
            "arguments": {
                "event": [
                    "str",
                    "int",
                    "list[]"
                ]
            }
        },
        "sender": {
            "name": "sender",
            "location": 883,
            "return": [
                "None"
            ],
            "arguments": {
                "event": []
            }
        }
    },
    "python-can-develop/can/interfaces/socketcan/utils.py": {
        "pack_filters": {
            "name": "pack_filters",
            "location": 19,
            "return": [],
            "arguments": {
                "can_filters": [
                    "None",
                    "str",
                    "list[typing.Any]",
                    "typing.IO",
                    "dict[str, typing.Any]",
                    "list[str]"
                ]
            }
        },
        "find_available_interfaces": {
            "name": "find_available_interfaces",
            "location": 44,
            "return": [
                "list[]"
            ],
            "arguments": {}
        },
        "error_code_to_str": {
            "name": "error_code_to_str",
            "location": 71,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "code": [
                    "str",
                    "dict[, ]"
                ]
            }
        }
    },
    "python-can-develop/can/interfaces/socketcan/__init__.py": {},
    "python-can-develop/can/interfaces/socketcand/socketcand.py": {
        "convert_ascii_message_to_can_message": {
            "name": "convert_ascii_message_to_can_message",
            "location": 21,
            "return": [
                "None",
                "Message"
            ],
            "arguments": {
                "ascii_msg": [
                    "str"
                ]
            }
        },
        "convert_can_message_to_ascii_message": {
            "name": "convert_can_message_to_ascii_message",
            "location": 39,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "can_message": []
            }
        },
        "connect_to_server": {
            "name": "connect_to_server",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "s": [],
                "host": [
                    "str",
                    "int"
                ],
                "port": [
                    "str",
                    "int"
                ]
            }
        },
        "SocketCanDaemonBus.__init__": {
            "name": "__init__",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "channel": [
                    "bool",
                    "str",
                    "dict[str, typing.Any]"
                ],
                "host": [
                    "int",
                    "float"
                ],
                "port": [
                    "int",
                    "float"
                ],
                "can_filters": [
                    "None",
                    "int"
                ]
            }
        },
        "SocketCanDaemonBus._recv_internal": {
            "name": "_recv_internal",
            "location": 85,
            "return": [
                "tuple[typing.Union[int,str,dict[, ]]]",
                "tuple[typing.Optional[bool]]"
            ],
            "arguments": {
                "self": [],
                "timeout": [
                    "int",
                    "float",
                    "None",
                    "str",
                    "list[tuple[typing.Union[int,int]]]"
                ]
            }
        },
        "SocketCanDaemonBus._tcp_send": {
            "name": "_tcp_send",
            "location": 159,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "msg": [
                    "str"
                ]
            }
        },
        "SocketCanDaemonBus._expect_msg": {
            "name": "_expect_msg",
            "location": 163,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "msg": [
                    "int",
                    "float",
                    "typing.Iterable[int]"
                ]
            }
        },
        "SocketCanDaemonBus.send": {
            "name": "send",
            "location": 168,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "msg": [
                    "int",
                    "str",
                    "float"
                ],
                "timeout": [
                    "None",
                    "float",
                    "int"
                ]
            }
        },
        "SocketCanDaemonBus.shutdown": {
            "name": "shutdown",
            "location": 172,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "python-can-develop/can/interfaces/socketcand/__init__.py": {},
    "python-can-develop/can/interfaces/systec/constants.py": {},
    "python-can-develop/can/interfaces/systec/exceptions.py": {
        "UcanException.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "result": [
                    "bool",
                    "dict[str, typing.Any]",
                    "list[str]",
                    "bytes",
                    "dict[, ]"
                ],
                "func": [
                    "str",
                    "None",
                    "bool",
                    "typing.Iterable[str]"
                ],
                "arguments": [
                    "bool",
                    "dict[str, typing.Any]",
                    "dict[, ]",
                    "typing.Sequence[str]",
                    "str"
                ]
            }
        },
        "UcanException._error_message_mapping": {
            "name": "_error_message_mapping",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UcanError._error_message_mapping": {
            "name": "_error_message_mapping",
            "location": 55,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UcanCmdError._error_message_mapping": {
            "name": "_error_message_mapping",
            "location": 81,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UcanWarning._error_message_mapping": {
            "name": "_error_message_mapping",
            "location": 106,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "python-can-develop/can/interfaces/systec/structures.py": {
        "CanMsg.__init__": {
            "name": "__init__",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "id": [
                    "int"
                ],
                "frame_format": [],
                "data": [
                    "None",
                    "bytes",
                    "str",
                    "bool"
                ]
            }
        },
        "CanMsg.__eq__": {
            "name": "__eq__",
            "location": 51,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "int",
                    "list[]",
                    "None"
                ]
            }
        },
        "CanMsg.id": {
            "name": "id",
            "location": 66,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "id": []
            }
        },
        "CanMsg.frame_format": {
            "name": "frame_format",
            "location": 74,
            "return": [
                "int",
                "float",
                "list[dict[str, typing.Any]]",
                "dict[str, list[str]]"
            ],
            "arguments": {
                "self": [],
                "frame_format": []
            }
        },
        "CanMsg.data": {
            "name": "data",
            "location": 82,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "CanMsg.time": {
            "name": "time",
            "location": 87,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Status.__eq__": {
            "name": "__eq__",
            "location": 109,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "bool"
                ]
            }
        },
        "Status.can_status": {
            "name": "can_status",
            "location": 118,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Status.usb_status": {
            "name": "usb_status",
            "location": 122,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "InitCanParam.__init__": {
            "name": "__init__",
            "location": 164,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mode": [
                    "bool",
                    "str",
                    "float"
                ],
                "BTR": [
                    "bool"
                ],
                "OCR": [
                    "bool",
                    "str",
                    "float"
                ],
                "AMR": [
                    "bool",
                    "str",
                    "float"
                ],
                "ACR": [
                    "bool",
                    "str",
                    "float"
                ],
                "baudrate": [
                    "bool",
                    "str",
                    "float"
                ],
                "rx_buffer_entries": [
                    "bool",
                    "str",
                    "float"
                ],
                "tx_buffer_entries": [
                    "bool",
                    "str",
                    "float"
                ]
            }
        },
        "InitCanParam.__eq__": {
            "name": "__eq__",
            "location": 180,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "InitCanParam.mode": {
            "name": "mode",
            "location": 198,
            "return": [
                "list[str]",
                "str",
                "dict[str, list[str]]",
                "tuple[typing.Union[str,str,str,str]]",
                "int"
            ],
            "arguments": {
                "self": [],
                "mode": []
            }
        },
        "InitCanParam.BTR": {
            "name": "BTR",
            "location": 206,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "BTR": []
            }
        },
        "InitCanParam.OCR": {
            "name": "OCR",
            "location": 214,
            "return": [
                "int",
                "str",
                "float",
                "typing.Type"
            ],
            "arguments": {
                "self": [],
                "OCR": []
            }
        },
        "InitCanParam.baudrate": {
            "name": "baudrate",
            "location": 222,
            "return": [
                "str",
                "dict[str, typing.Any]",
                "dict[, ]",
                "int"
            ],
            "arguments": {
                "self": [],
                "baudrate": []
            }
        },
        "InitCanParam.rx_buffer_entries": {
            "name": "rx_buffer_entries",
            "location": 230,
            "return": [
                "str",
                "list[str]",
                "float",
                "set[int]",
                "int"
            ],
            "arguments": {
                "self": [],
                "rx_buffer_entries": []
            }
        },
        "InitCanParam.tx_buffer_entries": {
            "name": "tx_buffer_entries",
            "location": 238,
            "return": [
                "str",
                "list[str]",
                "float",
                "set[int]",
                "int"
            ],
            "arguments": {
                "self": [],
                "tx_buffer_entries": []
            }
        },
        "HardwareInfoEx.__init__": {
            "name": "__init__",
            "location": 270,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HardwareInfoEx.__eq__": {
            "name": "__eq__",
            "location": 273,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "int",
                    "str",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "HardwareInfoEx.device_number": {
            "name": "device_number",
            "location": 287,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HardwareInfoEx.serial": {
            "name": "serial",
            "location": 291,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HardwareInfoEx.fw_version": {
            "name": "fw_version",
            "location": 295,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HardwareInfoEx.product_code": {
            "name": "product_code",
            "location": 299,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HardwareInfoEx.unique_id": {
            "name": "unique_id",
            "location": 303,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "HardwareInfoEx.flags": {
            "name": "flags",
            "location": 312,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ChannelInfo.__init__": {
            "name": "__init__",
            "location": 382,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ChannelInfo.__eq__": {
            "name": "__eq__",
            "location": 385,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "float",
                    "str"
                ]
            }
        },
        "ChannelInfo.mode": {
            "name": "mode",
            "location": 401,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ChannelInfo.BTR": {
            "name": "BTR",
            "location": 405,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ChannelInfo.OCR": {
            "name": "OCR",
            "location": 409,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ChannelInfo.AMR": {
            "name": "AMR",
            "location": 413,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ChannelInfo.ACR": {
            "name": "ACR",
            "location": 417,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ChannelInfo.baudrate": {
            "name": "baudrate",
            "location": 421,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ChannelInfo.can_is_init": {
            "name": "can_is_init",
            "location": 425,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ChannelInfo.can_status": {
            "name": "can_status",
            "location": 429,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MsgCountInfo.sent_msg_count": {
            "name": "sent_msg_count",
            "location": 449,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MsgCountInfo.recv_msg_count": {
            "name": "recv_msg_count",
            "location": 453,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "python-can-develop/can/interfaces/systec/ucan.py": {
        "check_valid_rx_can_msg": {
            "name": "check_valid_rx_can_msg",
            "location": 16,
            "return": [
                "bool"
            ],
            "arguments": {
                "result": []
            }
        },
        "check_tx_ok": {
            "name": "check_tx_ok",
            "location": 29,
            "return": [
                "bool"
            ],
            "arguments": {
                "result": []
            }
        },
        "check_tx_success": {
            "name": "check_tx_success",
            "location": 47,
            "return": [
                "bool"
            ],
            "arguments": {
                "result": []
            }
        },
        "check_tx_not_all": {
            "name": "check_tx_not_all",
            "location": 58,
            "return": [
                "bool"
            ],
            "arguments": {
                "result": []
            }
        },
        "check_warning": {
            "name": "check_warning",
            "location": 69,
            "return": [
                "bool"
            ],
            "arguments": {
                "result": []
            }
        },
        "check_error": {
            "name": "check_error",
            "location": 80,
            "return": [
                "bool"
            ],
            "arguments": {
                "result": []
            }
        },
        "check_error_cmd": {
            "name": "check_error_cmd",
            "location": 93,
            "return": [
                "bool"
            ],
            "arguments": {
                "result": []
            }
        },
        "check_result": {
            "name": "check_result",
            "location": 104,
            "return": [],
            "arguments": {
                "result": [],
                "func": [],
                "arguments": []
            }
        },
        "UcanServer.__init__": {
            "name": "__init__",
            "location": 330,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UcanServer.is_initialized": {
            "name": "is_initialized",
            "location": 349,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UcanServer.is_can0_initialized": {
            "name": "is_can0_initialized",
            "location": 359,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UcanServer.is_can1_initialized": {
            "name": "is_can1_initialized",
            "location": 369,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UcanServer._enum_callback": {
            "name": "_enum_callback",
            "location": 379,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [],
                "index": [],
                "is_used": [],
                "hw_info_ex": [],
                "init_info": [],
                "arg": []
            }
        },
        "UcanServer.enumerate_hardware": {
            "name": "enumerate_hardware",
            "location": 385,
            "return": [
                "list[]"
            ],
            "arguments": {
                "cls": [],
                "device_number_low": [
                    "int"
                ],
                "device_number_high": [
                    "int"
                ],
                "serial_low": [
                    "int"
                ],
                "serial_high": [
                    "int"
                ],
                "product_code_low": [
                    "int"
                ],
                "product_code_high": [
                    "int"
                ],
                "enum_used_devices": [
                    "bool"
                ]
            }
        },
        "UcanServer.init_hardware": {
            "name": "init_hardware",
            "location": 409,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "serial": [
                    "None"
                ],
                "device_number": []
            }
        },
        "UcanServer.init_can": {
            "name": "init_can",
            "location": 428,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "channel": [],
                "BTR": [],
                "baudrate": [],
                "AMR": [],
                "ACR": [],
                "mode": [],
                "OCR": [],
                "rx_buffer_entries": [],
                "tx_buffer_entries": []
            }
        },
        "UcanServer.read_can_msg": {
            "name": "read_can_msg",
            "location": 461,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "self": [],
                "channel": [],
                "count": []
            }
        },
        "UcanServer.write_can_msg": {
            "name": "write_can_msg",
            "location": 478,
            "return": [],
            "arguments": {
                "self": [],
                "channel": [],
                "can_msg": []
            }
        },
        "UcanServer.set_baudrate": {
            "name": "set_baudrate",
            "location": 493,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "channel": [],
                "BTR": [],
                "baudarate": []
            }
        },
        "UcanServer.set_acceptance": {
            "name": "set_acceptance",
            "location": 505,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "channel": [],
                "AMR": [],
                "ACR": []
            }
        },
        "UcanServer.get_status": {
            "name": "get_status",
            "location": 516,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "self": [],
                "channel": []
            }
        },
        "UcanServer.get_msg_count_info": {
            "name": "get_msg_count_info",
            "location": 528,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "self": [],
                "channel": []
            }
        },
        "UcanServer.reset_can": {
            "name": "reset_can",
            "location": 541,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "channel": [],
                "flags": []
            }
        },
        "UcanServer.get_hardware_info": {
            "name": "get_hardware_info",
            "location": 550,
            "return": [
                "tuple[typing.Union[HardwareInfoEx,ChannelInfo]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "UcanServer.get_fw_version": {
            "name": "get_fw_version",
            "location": 567,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UcanServer.define_cyclic_can_msg": {
            "name": "define_cyclic_can_msg",
            "location": 576,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "channel": [],
                "can_msg": [
                    "None"
                ]
            }
        },
        "UcanServer.read_cyclic_can_msg": {
            "name": "read_cyclic_can_msg",
            "location": 592,
            "return": [],
            "arguments": {
                "self": [],
                "channel": [],
                "count": []
            }
        },
        "UcanServer.enable_cyclic_can_msg": {
            "name": "enable_cyclic_can_msg",
            "location": 607,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "channel": [],
                "flags": []
            }
        },
        "UcanServer.get_msg_pending": {
            "name": "get_msg_pending",
            "location": 616,
            "return": [],
            "arguments": {
                "self": [],
                "channel": [],
                "flags": []
            }
        },
        "UcanServer.get_can_error_counter": {
            "name": "get_can_error_counter",
            "location": 629,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "self": [],
                "channel": []
            }
        },
        "UcanServer.set_tx_timeout": {
            "name": "set_tx_timeout",
            "location": 646,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "channel": [],
                "timeout": []
            }
        },
        "UcanServer.shutdown": {
            "name": "shutdown",
            "location": 655,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "channel": [],
                "shutdown_hardware": [
                    "bool"
                ]
            }
        },
        "UcanServer.get_user_dll_version": {
            "name": "get_user_dll_version",
            "location": 681,
            "return": [],
            "arguments": {}
        },
        "UcanServer.set_debug_mode": {
            "name": "set_debug_mode",
            "location": 691,
            "return": [],
            "arguments": {
                "level": [],
                "filename": [],
                "flags": [
                    "int"
                ]
            }
        },
        "UcanServer.get_can_status_message": {
            "name": "get_can_status_message",
            "location": 707,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "can_status": []
            }
        },
        "UcanServer.get_baudrate_message": {
            "name": "get_baudrate_message",
            "location": 737,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "baudrate": []
            }
        },
        "UcanServer.get_baudrate_ex_message": {
            "name": "get_baudrate_ex_message",
            "location": 763,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "baudrate_ex": []
            }
        },
        "UcanServer.get_product_code_message": {
            "name": "get_product_code_message",
            "location": 796,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "product_code": []
            }
        },
        "UcanServer.convert_to_major_ver": {
            "name": "convert_to_major_ver",
            "location": 816,
            "return": [],
            "arguments": {
                "cls": [],
                "version": []
            }
        },
        "UcanServer.convert_to_minor_ver": {
            "name": "convert_to_minor_ver",
            "location": 827,
            "return": [],
            "arguments": {
                "cls": [],
                "version": []
            }
        },
        "UcanServer.convert_to_release_ver": {
            "name": "convert_to_release_ver",
            "location": 838,
            "return": [],
            "arguments": {
                "cls": [],
                "version": []
            }
        },
        "UcanServer.check_version_is_equal_or_higher": {
            "name": "check_version_is_equal_or_higher",
            "location": 849,
            "return": [
                "bool"
            ],
            "arguments": {
                "cls": [],
                "version": [],
                "cmp_major": [],
                "cmp_minor": []
            }
        },
        "UcanServer.check_is_systec": {
            "name": "check_is_systec",
            "location": 865,
            "return": [
                "bool"
            ],
            "arguments": {
                "cls": [],
                "hw_info_ex": []
            }
        },
        "UcanServer.check_is_G4": {
            "name": "check_is_G4",
            "location": 879,
            "return": [],
            "arguments": {
                "cls": [],
                "hw_info_ex": []
            }
        },
        "UcanServer.check_is_G3": {
            "name": "check_is_G3",
            "location": 891,
            "return": [
                "bool"
            ],
            "arguments": {
                "cls": [],
                "hw_info_ex": []
            }
        },
        "UcanServer.check_support_cyclic_msg": {
            "name": "check_support_cyclic_msg",
            "location": 903,
            "return": [],
            "arguments": {
                "cls": [],
                "hw_info_ex": []
            }
        },
        "UcanServer.check_support_two_channel": {
            "name": "check_support_two_channel",
            "location": 917,
            "return": [],
            "arguments": {
                "cls": [],
                "hw_info_ex": []
            }
        },
        "UcanServer.check_support_term_resistor": {
            "name": "check_support_term_resistor",
            "location": 931,
            "return": [],
            "arguments": {
                "cls": [],
                "hw_info_ex": []
            }
        },
        "UcanServer.check_support_user_port": {
            "name": "check_support_user_port",
            "location": 943,
            "return": [
                "bool"
            ],
            "arguments": {
                "cls": [],
                "hw_info_ex": []
            }
        },
        "UcanServer.check_support_rb_user_port": {
            "name": "check_support_rb_user_port",
            "location": 965,
            "return": [],
            "arguments": {
                "cls": [],
                "hw_info_ex": []
            }
        },
        "UcanServer.check_support_rb_can_port": {
            "name": "check_support_rb_can_port",
            "location": 977,
            "return": [],
            "arguments": {
                "cls": [],
                "hw_info_ex": []
            }
        },
        "UcanServer.check_support_ucannet": {
            "name": "check_support_ucannet",
            "location": 989,
            "return": [],
            "arguments": {
                "cls": [],
                "hw_info_ex": []
            }
        },
        "UcanServer.calculate_amr": {
            "name": "calculate_amr",
            "location": 1003,
            "return": [],
            "arguments": {
                "cls": [],
                "is_extended": [],
                "from_id": [],
                "to_id": [],
                "rtr_only": [
                    "bool"
                ],
                "rtr_too": [
                    "bool"
                ]
            }
        },
        "UcanServer.calculate_acr": {
            "name": "calculate_acr",
            "location": 1025,
            "return": [],
            "arguments": {
                "cls": [],
                "is_extended": [],
                "from_id": [],
                "to_id": [],
                "rtr_only": [
                    "bool"
                ],
                "rtr_too": [
                    "bool"
                ]
            }
        },
        "UcanServer._connect_control": {
            "name": "_connect_control",
            "location": 1043,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "event": [],
                "param": [],
                "arg": []
            }
        },
        "UcanServer._callback": {
            "name": "_callback",
            "location": 1065,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "handle": [],
                "event": [],
                "channel": [],
                "arg": []
            }
        },
        "UcanServer.init_hw_event": {
            "name": "init_hw_event",
            "location": 1090,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UcanServer.init_can_event": {
            "name": "init_can_event",
            "location": 1097,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "channel": []
            }
        },
        "UcanServer.can_msg_received_event": {
            "name": "can_msg_received_event",
            "location": 1106,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "channel": []
            }
        },
        "UcanServer.status_event": {
            "name": "status_event",
            "location": 1117,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "channel": []
            }
        },
        "UcanServer.deinit_can_event": {
            "name": "deinit_can_event",
            "location": 1128,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "channel": []
            }
        },
        "UcanServer.deinit_hw_event": {
            "name": "deinit_hw_event",
            "location": 1137,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UcanServer.connect_event": {
            "name": "connect_event",
            "location": 1144,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UcanServer.disconnect_event": {
            "name": "disconnect_event",
            "location": 1151,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UcanServer.fatal_disconnect_event": {
            "name": "fatal_disconnect_event",
            "location": 1158,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "device_number": []
            }
        }
    },
    "python-can-develop/can/interfaces/systec/ucanbus.py": {
        "Ucan.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Ucan.can_msg_received_event": {
            "name": "can_msg_received_event",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "channel": [
                    "str",
                    "list[int]"
                ]
            }
        },
        "Ucan.read_can_msg": {
            "name": "read_can_msg",
            "location": 27,
            "return": [
                "tuple[typing.Optional[bool]]"
            ],
            "arguments": {
                "self": [],
                "channel": [
                    "int"
                ],
                "count": [
                    "bool",
                    "float",
                    "str"
                ],
                "timeout": [
                    "int",
                    "dict[str, typing.Any]",
                    "None"
                ]
            }
        },
        "UcanBus.__init__": {
            "name": "__init__",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "channel": [],
                "can_filters": [
                    "None",
                    "str"
                ]
            }
        },
        "UcanBus._recv_internal": {
            "name": "_recv_internal",
            "location": 150,
            "return": [
                "tuple[typing.Optional[bool]]",
                "tuple[Message]"
            ],
            "arguments": {
                "self": [],
                "timeout": [
                    "bool",
                    "float",
                    "None"
                ]
            }
        },
        "UcanBus.send": {
            "name": "send",
            "location": 169,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "msg": [
                    "int",
                    "float"
                ],
                "timeout": []
            }
        },
        "UcanBus._detect_available_configs": {
            "name": "_detect_available_configs",
            "location": 203,
            "return": [
                "list[dict[typing.Text, typing.Text]]"
            ],
            "arguments": {}
        },
        "UcanBus._apply_filters": {
            "name": "_apply_filters",
            "location": 227,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "filters": []
            }
        },
        "UcanBus.flush_tx_buffer": {
            "name": "flush_tx_buffer",
            "location": 242,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UcanBus.create_filter": {
            "name": "create_filter",
            "location": 256,
            "return": [
                "list[dict[typing.Text, typing.Union[int,str]]]"
            ],
            "arguments": {
                "extended": [
                    "int",
                    "str"
                ],
                "from_id": [
                    "int",
                    "str"
                ],
                "to_id": [
                    "int",
                    "str"
                ],
                "rtr_only": [
                    "int",
                    "str"
                ],
                "rtr_too": [
                    "int",
                    "str"
                ]
            }
        },
        "UcanBus.state": {
            "name": "state",
            "location": 294,
            "return": [],
            "arguments": {
                "self": [],
                "new_state": []
            }
        },
        "UcanBus.shutdown": {
            "name": "shutdown",
            "location": 311,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "python-can-develop/can/interfaces/systec/__init__.py": {},
    "python-can-develop/can/interfaces/udp_multicast/bus.py": {
        "UdpMulticastBus.__init__": {
            "name": "__init__",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "channel": [],
                "port": [
                    "int"
                ],
                "hop_limit": [
                    "int"
                ],
                "receive_own_messages": [
                    "bool"
                ],
                "fd": [
                    "bool"
                ]
            }
        },
        "UdpMulticastBus._recv_internal": {
            "name": "_recv_internal",
            "location": 111,
            "return": [
                "tuple[typing.Optional[bool]]",
                "tuple[typing.Union[dict[, ],int,str]]"
            ],
            "arguments": {
                "self": [],
                "timeout": [
                    "int",
                    "float",
                    "typing.Callable[, ]"
                ]
            }
        },
        "UdpMulticastBus.send": {
            "name": "send",
            "location": 131,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "msg": [
                    "float",
                    "bool"
                ],
                "timeout": [
                    "None",
                    "int",
                    "dict[, ]"
                ]
            }
        },
        "UdpMulticastBus.fileno": {
            "name": "fileno",
            "location": 140,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UdpMulticastBus.shutdown": {
            "name": "shutdown",
            "location": 144,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UdpMulticastBus._detect_available_configs": {
            "name": "_detect_available_configs",
            "location": 153,
            "return": [
                "list[dict[typing.Text, typing.Text]]",
                "list[]"
            ],
            "arguments": {}
        },
        "GeneralPurposeUdpMulticastBus.__init__": {
            "name": "__init__",
            "location": 176,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "group": [
                    "bool",
                    "str",
                    "None",
                    "bytes"
                ],
                "port": [
                    "str",
                    "int"
                ],
                "hop_limit": [
                    "int",
                    "float"
                ],
                "max_buffer": [
                    "int"
                ]
            }
        },
        "GeneralPurposeUdpMulticastBus._create_socket": {
            "name": "_create_socket",
            "location": 227,
            "return": [],
            "arguments": {
                "self": [],
                "address_family": [
                    "int",
                    "str"
                ]
            }
        },
        "GeneralPurposeUdpMulticastBus.send": {
            "name": "send",
            "location": 295,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [],
                "timeout": [
                    "None",
                    "bytes",
                    "int",
                    "bytearray",
                    "list[int]"
                ]
            }
        },
        "GeneralPurposeUdpMulticastBus.recv": {
            "name": "recv",
            "location": 317,
            "return": [
                "tuple[typing.Union[int,float,str]]",
                "None"
            ],
            "arguments": {
                "self": [],
                "timeout": [
                    "None",
                    "int",
                    "float",
                    "str",
                    "list[tuple[typing.Union[int,int]]]"
                ]
            }
        },
        "GeneralPurposeUdpMulticastBus.fileno": {
            "name": "fileno",
            "location": 393,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GeneralPurposeUdpMulticastBus.shutdown": {
            "name": "shutdown",
            "location": 397,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "python-can-develop/can/interfaces/udp_multicast/utils.py": {
        "check_msgpack_installed": {
            "name": "check_msgpack_installed",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "pack_message": {
            "name": "pack_message",
            "location": 25,
            "return": [],
            "arguments": {
                "message": [
                    "typing.MutableMapping",
                    "bytes"
                ]
            }
        },
        "unpack_message": {
            "name": "unpack_message",
            "location": 48,
            "return": [
                "Message"
            ],
            "arguments": {
                "data": [
                    "str",
                    "bytes",
                    "dict[str, typing.Any]"
                ],
                "replace": [
                    "None",
                    "bytes",
                    "typing.Any",
                    "dict[, ]",
                    "typing.Mapping",
                    "dict[str, typing.Any]"
                ],
                "check": [
                    "bool"
                ]
            }
        }
    },
    "python-can-develop/can/interfaces/udp_multicast/__init__.py": {},
    "python-can-develop/can/interfaces/usb2can/serial_selector.py": {
        "WMIDateStringToDate": {
            "name": "WMIDateStringToDate",
            "location": 14,
            "return": [
                "str"
            ],
            "arguments": {
                "dtmDate": [
                    "str"
                ]
            }
        },
        "find_serial_devices": {
            "name": "find_serial_devices",
            "location": 43,
            "return": [
                "list[]"
            ],
            "arguments": {
                "serial_matcher": [
                    "typing.Text"
                ]
            }
        }
    },
    "python-can-develop/can/interfaces/usb2can/usb2canabstractionlayer.py": {
        "Usb2CanAbstractionLayer.__init__": {
            "name": "__init__",
            "location": 111,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dll": [
                    "typing.Text"
                ]
            }
        },
        "Usb2CanAbstractionLayer.open": {
            "name": "open",
            "location": 127,
            "return": [],
            "arguments": {
                "self": [],
                "configuration": [
                    "str"
                ],
                "flags": [
                    "bool",
                    "dict[int, dict[, ]]"
                ]
            }
        },
        "Usb2CanAbstractionLayer.close": {
            "name": "close",
            "location": 159,
            "return": [
                "CanalError"
            ],
            "arguments": {
                "self": [],
                "handle": [
                    "str",
                    "int",
                    "float"
                ]
            }
        },
        "Usb2CanAbstractionLayer.send": {
            "name": "send",
            "location": 163,
            "return": [
                "CanalError"
            ],
            "arguments": {
                "self": [],
                "handle": [
                    "str",
                    "int",
                    "float"
                ],
                "msg": [
                    "str",
                    "int",
                    "float"
                ]
            }
        },
        "Usb2CanAbstractionLayer.receive": {
            "name": "receive",
            "location": 167,
            "return": [
                "CanalError"
            ],
            "arguments": {
                "self": [],
                "handle": [
                    "str",
                    "int",
                    "float"
                ],
                "msg": [
                    "str",
                    "int",
                    "float"
                ]
            }
        },
        "Usb2CanAbstractionLayer.blocking_send": {
            "name": "blocking_send",
            "location": 171,
            "return": [
                "CanalError"
            ],
            "arguments": {
                "self": [],
                "handle": [
                    "str",
                    "list[str]",
                    "int"
                ],
                "msg": [
                    "str",
                    "list[str]",
                    "int"
                ],
                "timeout": [
                    "str",
                    "list[str]",
                    "int"
                ]
            }
        },
        "Usb2CanAbstractionLayer.blocking_receive": {
            "name": "blocking_receive",
            "location": 175,
            "return": [
                "CanalError"
            ],
            "arguments": {
                "self": [],
                "handle": [
                    "str",
                    "bytes",
                    "float"
                ],
                "msg": [
                    "str",
                    "bytes",
                    "float"
                ],
                "timeout": [
                    "str",
                    "bytes",
                    "float"
                ]
            }
        },
        "Usb2CanAbstractionLayer.get_status": {
            "name": "get_status",
            "location": 181,
            "return": [
                "CanalError"
            ],
            "arguments": {
                "self": [],
                "handle": [
                    "str",
                    "None"
                ],
                "status": [
                    "str",
                    "None"
                ]
            }
        },
        "Usb2CanAbstractionLayer.get_statistics": {
            "name": "get_statistics",
            "location": 185,
            "return": [
                "CanalError"
            ],
            "arguments": {
                "self": [],
                "handle": [
                    "str",
                    "int"
                ],
                "statistics": [
                    "str",
                    "int"
                ]
            }
        },
        "Usb2CanAbstractionLayer.get_version": {
            "name": "get_version",
            "location": 189,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Usb2CanAbstractionLayer.get_library_version": {
            "name": "get_library_version",
            "location": 193,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Usb2CanAbstractionLayer.get_vendor_string": {
            "name": "get_vendor_string",
            "location": 197,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "python-can-develop/can/interfaces/usb2can/usb2canInterface.py": {
        "message_convert_tx": {
            "name": "message_convert_tx",
            "location": 22,
            "return": [
                "CanalMsg"
            ],
            "arguments": {
                "msg": [
                    "float",
                    "int"
                ]
            }
        },
        "message_convert_rx": {
            "name": "message_convert_rx",
            "location": 47,
            "return": [
                "Message"
            ],
            "arguments": {
                "message_rx": [
                    "typing.Type",
                    "typing.Callable[..., None]"
                ]
            }
        },
        "Usb2canBus.__init__": {
            "name": "__init__",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "channel": [
                    "None",
                    "dict[str, bool]",
                    "tuple[str]",
                    "list[]",
                    "typing.Callable[, ]",
                    "dict[, ]",
                    "bool"
                ],
                "dll": [
                    "typing.Text"
                ],
                "flags": [
                    "int"
                ]
            }
        },
        "Usb2canBus.send": {
            "name": "send",
            "location": 124,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "msg": [
                    "bool",
                    "None",
                    "str"
                ],
                "timeout": []
            }
        },
        "Usb2canBus._recv_internal": {
            "name": "_recv_internal",
            "location": 135,
            "return": [
                "tuple[typing.Union[None,int,str,float,list[str]]]"
            ],
            "arguments": {
                "self": [],
                "timeout": [
                    "int",
                    "None",
                    "float"
                ]
            }
        },
        "Usb2canBus.shutdown": {
            "name": "shutdown",
            "location": 159,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Usb2canBus._detect_available_configs": {
            "name": "_detect_available_configs",
            "location": 172,
            "return": [],
            "arguments": {}
        },
        "Usb2canBus.detect_available_configs": {
            "name": "detect_available_configs",
            "location": 176,
            "return": [
                "list[dict[typing.Text, typing.Text]]"
            ],
            "arguments": {
                "serial_matcher": [
                    "None",
                    "str",
                    "list[]"
                ]
            }
        }
    },
    "python-can-develop/can/interfaces/usb2can/__init__.py": {},
    "python-can-develop/can/interfaces/vector/canlib.py": {
        "get_channel_configs": {
            "name": "get_channel_configs",
            "location": 800,
            "return": [],
            "arguments": {}
        },
        "VectorBus.__init__": {
            "name": "__init__",
            "location": 78,
            "return": [],
            "arguments": {
                "self": [],
                "channel": [],
                "can_filters": [],
                "poll_interval": [],
                "receive_own_messages": [],
                "bitrate": [],
                "rx_queue_size": [],
                "app_name": [],
                "serial": [],
                "fd": [],
                "data_bitrate": [],
                "sjw_abr": [],
                "tseg1_abr": [],
                "tseg2_abr": [],
                "sjw_dbr": [],
                "tseg1_dbr": [],
                "tseg2_dbr": []
            }
        },
        "VectorBus._apply_filters": {
            "name": "_apply_filters",
            "location": 351,
            "return": [],
            "arguments": {
                "self": [],
                "filters": []
            }
        },
        "VectorBus._recv_internal": {
            "name": "_recv_internal",
            "location": 399,
            "return": [],
            "arguments": {
                "self": [],
                "timeout": []
            }
        },
        "VectorBus._recv_canfd": {
            "name": "_recv_canfd",
            "location": 434,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "VectorBus._recv_can": {
            "name": "_recv_can",
            "location": 479,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "VectorBus.handle_can_event": {
            "name": "handle_can_event",
            "location": 515,
            "return": [],
            "arguments": {
                "self": [],
                "event": []
            }
        },
        "VectorBus.handle_canfd_event": {
            "name": "handle_canfd_event",
            "location": 524,
            "return": [],
            "arguments": {
                "self": [],
                "event": []
            }
        },
        "VectorBus.send": {
            "name": "send",
            "location": 535,
            "return": [],
            "arguments": {
                "self": [],
                "msg": [],
                "timeout": []
            }
        },
        "VectorBus._send_sequence": {
            "name": "_send_sequence",
            "location": 538,
            "return": [],
            "arguments": {
                "self": [],
                "msgs": []
            }
        },
        "VectorBus._get_tx_channel_mask": {
            "name": "_get_tx_channel_mask",
            "location": 545,
            "return": [],
            "arguments": {
                "self": [],
                "msgs": []
            }
        },
        "VectorBus._send_can_msg_sequence": {
            "name": "_send_can_msg_sequence",
            "location": 551,
            "return": [],
            "arguments": {
                "self": [],
                "msgs": []
            }
        },
        "VectorBus._build_xl_event": {
            "name": "_build_xl_event",
            "location": 566,
            "return": [],
            "arguments": {
                "msg": []
            }
        },
        "VectorBus._send_can_fd_msg_sequence": {
            "name": "_send_can_fd_msg_sequence",
            "location": 584,
            "return": [],
            "arguments": {
                "self": [],
                "msgs": []
            }
        },
        "VectorBus._build_xl_can_tx_event": {
            "name": "_build_xl_can_tx_event",
            "location": 600,
            "return": [],
            "arguments": {
                "msg": []
            }
        },
        "VectorBus.flush_tx_buffer": {
            "name": "flush_tx_buffer",
            "location": 624,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "VectorBus.shutdown": {
            "name": "shutdown",
            "location": 627,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "VectorBus.reset": {
            "name": "reset",
            "location": 633,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "VectorBus._detect_available_configs": {
            "name": "_detect_available_configs",
            "location": 640,
            "return": [],
            "arguments": {}
        },
        "VectorBus.popup_vector_hw_configuration": {
            "name": "popup_vector_hw_configuration",
            "location": 674,
            "return": [],
            "arguments": {
                "wait_for_finish": []
            }
        },
        "VectorBus.get_application_config": {
            "name": "get_application_config",
            "location": 686,
            "return": [],
            "arguments": {
                "app_name": [],
                "app_channel": []
            }
        },
        "VectorBus.set_application_config": {
            "name": "set_application_config",
            "location": 721,
            "return": [],
            "arguments": {
                "app_name": [],
                "app_channel": [],
                "hw_type": [],
                "hw_index": [],
                "hw_channel": []
            }
        },
        "VectorBus.set_timer_rate": {
            "name": "set_timer_rate",
            "location": 769,
            "return": [],
            "arguments": {
                "self": [],
                "timer_rate_ms": []
            }
        }
    },
    "python-can-develop/can/interfaces/vector/exceptions.py": {
        "VectorError.__init__": {
            "name": "__init__",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "error_code": [
                    "str",
                    "None",
                    "tuple[typing.Type]",
                    "bytes",
                    "typing.Callable[, ]"
                ],
                "error_string": [
                    "str",
                    "None",
                    "tuple[typing.Type]",
                    "bytes",
                    "typing.Callable[, ]"
                ],
                "function": [
                    "str",
                    "None",
                    "tuple[typing.Type]",
                    "bytes",
                    "typing.Callable[, ]"
                ]
            }
        },
        "VectorError.__reduce__": {
            "name": "__reduce__",
            "location": 15,
            "return": [
                "tuple[typing.Union[typing.Type,dict[, ]]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "VectorInitializationError.from_generic": {
            "name": "from_generic",
            "location": 21,
            "return": [
                "VectorInitializationError"
            ],
            "arguments": {
                "error": [
                    "str",
                    "int",
                    "ImportError"
                ]
            }
        },
        "VectorOperationError.from_generic": {
            "name": "from_generic",
            "location": 27,
            "return": [
                "VectorOperationError"
            ],
            "arguments": {
                "error": [
                    "str",
                    "int",
                    "ImportError"
                ]
            }
        }
    },
    "python-can-develop/can/interfaces/vector/xlclass.py": {},
    "python-can-develop/can/interfaces/vector/xldefine.py": {},
    "python-can-develop/can/interfaces/vector/xldriver.py": {
        "check_status_operation": {
            "name": "check_status_operation",
            "location": 34,
            "return": [],
            "arguments": {
                "result": [],
                "function": [
                    "str",
                    "typing.Any"
                ],
                "arguments": [
                    "typing.Callable[, ]",
                    "typing.Type",
                    "str",
                    "UnicodeError"
                ]
            }
        },
        "check_status_initialization": {
            "name": "check_status_initialization",
            "location": 43,
            "return": [],
            "arguments": {
                "result": [],
                "function": [
                    "str",
                    "typing.Any"
                ],
                "arguments": [
                    "typing.Callable[, ]",
                    "typing.Type",
                    "str",
                    "UnicodeError"
                ]
            }
        }
    },
    "python-can-develop/can/interfaces/vector/__init__.py": {},
    "python-can-develop/can/io/asc.py": {
        "ASCReader.__init__": {
            "name": "__init__",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "file": [],
                "base": [
                    "typing.Text"
                ],
                "relative_timestamp": [
                    "bool"
                ]
            }
        },
        "ASCReader._extract_header": {
            "name": "_extract_header",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ASCReader._datetime_to_timestamp": {
            "name": "_datetime_to_timestamp",
            "location": 113,
            "return": [],
            "arguments": {
                "datetime_string": []
            }
        },
        "ASCReader._extract_can_id": {
            "name": "_extract_can_id",
            "location": 150,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "str_can_id": [],
                "msg_kwargs": []
            }
        },
        "ASCReader._check_base": {
            "name": "_check_base",
            "location": 160,
            "return": [
                "int"
            ],
            "arguments": {
                "base": []
            }
        },
        "ASCReader._process_data_string": {
            "name": "_process_data_string",
            "location": 165,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data_str": [],
                "data_length": [],
                "msg_kwargs": []
            }
        },
        "ASCReader._process_classic_can_frame": {
            "name": "_process_classic_can_frame",
            "location": 174,
            "return": [
                "Message"
            ],
            "arguments": {
                "self": [],
                "line": [],
                "msg_kwargs": []
            }
        },
        "ASCReader._process_fd_can_frame": {
            "name": "_process_fd_can_frame",
            "location": 211,
            "return": [
                "Message"
            ],
            "arguments": {
                "self": [],
                "line": [],
                "msg_kwargs": []
            }
        },
        "ASCReader.__iter__": {
            "name": "__iter__",
            "location": 258,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ASCWriter.__init__": {
            "name": "__init__",
            "location": 351,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "file": [],
                "channel": [
                    "int"
                ]
            }
        },
        "ASCWriter.stop": {
            "name": "stop",
            "location": 378,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ASCWriter.log_event": {
            "name": "log_event",
            "location": 384,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [],
                "timestamp": [
                    "None"
                ]
            }
        },
        "ASCWriter.on_message_received": {
            "name": "on_message_received",
            "location": 415,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "msg": []
            }
        }
    },
    "python-can-develop/can/io/blf.py": {
        "timestamp_to_systemtime": {
            "name": "timestamp_to_systemtime",
            "location": 103,
            "return": [
                "tuple[int]"
            ],
            "arguments": {
                "timestamp": [
                    "int"
                ]
            }
        },
        "systemtime_to_timestamp": {
            "name": "systemtime_to_timestamp",
            "location": 120,
            "return": [
                "int"
            ],
            "arguments": {
                "systemtime": [
                    "str"
                ]
            }
        },
        "BLFReader.__init__": {
            "name": "__init__",
            "location": 146,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "file": [
                    "typing.TextIO",
                    "int",
                    "str",
                    "typing.IO",
                    "typing.BinaryIO"
                ]
            }
        },
        "BLFReader.__iter__": {
            "name": "__iter__",
            "location": 167,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BLFReader._parse_container": {
            "name": "_parse_container",
            "location": 195,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict[, ]",
                    "bytes",
                    "str",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "BLFReader._parse_data": {
            "name": "_parse_data",
            "location": 206,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "BLFWriter.__init__": {
            "name": "__init__",
            "location": 367,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "file": [
                    "int",
                    "None",
                    "str"
                ],
                "append": [
                    "bool"
                ],
                "channel": [
                    "int"
                ],
                "compression_level": [
                    "int"
                ]
            }
        },
        "BLFWriter._write_header": {
            "name": "_write_header",
            "location": 427,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "filesize": [
                    "int",
                    "dict[str, typing.Any]",
                    "tuple[int]",
                    "typing.IO"
                ]
            }
        },
        "BLFWriter.on_message_received": {
            "name": "on_message_received",
            "location": 437,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "msg": [
                    "str",
                    "typing.Callable[, ]"
                ]
            }
        },
        "BLFWriter.log_event": {
            "name": "log_event",
            "location": 489,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str"
                ],
                "timestamp": [
                    "None",
                    "int",
                    "str"
                ]
            }
        },
        "BLFWriter._add_object": {
            "name": "_add_object",
            "location": 510,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "obj_type": [
                    "int"
                ],
                "data": [],
                "timestamp": [
                    "None",
                    "int",
                    "float",
                    "str"
                ]
            }
        },
        "BLFWriter._flush": {
            "name": "_flush",
            "location": 536,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BLFWriter.stop": {
            "name": "stop",
            "location": 569,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "python-can-develop/can/io/canutils.py": {
        "CanutilsLogReader.__init__": {
            "name": "__init__",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "file": [
                    "bool",
                    "str",
                    "list[str]",
                    "None"
                ]
            }
        },
        "CanutilsLogReader.__iter__": {
            "name": "__iter__",
            "location": 45,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CanutilsLogWriter.__init__": {
            "name": "__init__",
            "location": 130,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "file": [
                    "bool",
                    "None",
                    "typing.Iterable[list[typing.Any]]",
                    "str"
                ],
                "channel": [
                    "typing.Text"
                ],
                "append": [
                    "bool"
                ]
            }
        },
        "CanutilsLogWriter.on_message_received": {
            "name": "on_message_received",
            "location": 151,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "msg": [
                    "None"
                ]
            }
        }
    },
    "python-can-develop/can/io/csv.py": {
        "CSVReader.__init__": {
            "name": "__init__",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "file": [
                    "bool",
                    "str",
                    "list[str]",
                    "None"
                ]
            }
        },
        "CSVReader.__iter__": {
            "name": "__iter__",
            "location": 39,
            "return": [
                "None",
                "typing.Generator[Message]"
            ],
            "arguments": {
                "self": []
            }
        },
        "CSVWriter.__init__": {
            "name": "__init__",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "file": [
                    "str",
                    "typing.Callable[, ]",
                    "None",
                    "typing.IO"
                ],
                "append": [
                    "bool"
                ]
            }
        },
        "CSVWriter.on_message_received": {
            "name": "on_message_received",
            "location": 108,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "msg": [
                    "int",
                    "str",
                    "dict[str, typing.Any]",
                    "typing.IO"
                ]
            }
        }
    },
    "python-can-develop/can/io/generic.py": {
        "BaseIOHandler.__init__": {
            "name": "__init__",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "file": [
                    "str",
                    "None",
                    "typing.IO"
                ],
                "mode": [
                    "typing.Text"
                ]
            }
        },
        "BaseIOHandler.__enter__": {
            "name": "__enter__",
            "location": 53,
            "return": [
                "BaseIOHandler"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseIOHandler.__exit__": {
            "name": "__exit__",
            "location": 56,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "exc_type": [
                    "None",
                    "typing.Type",
                    "str",
                    "BaseException",
                    "Exception"
                ],
                "exc_val": [
                    "None",
                    "typing.Type",
                    "str",
                    "BaseException",
                    "Exception"
                ],
                "exc_tb": [
                    "None",
                    "typing.Type",
                    "str",
                    "BaseException",
                    "Exception"
                ]
            }
        },
        "BaseIOHandler.stop": {
            "name": "stop",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FileIOMessageWriter.__init__": {
            "name": "__init__",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "file": [
                    "bool",
                    "None",
                    "str",
                    "list[]",
                    "typing.Any",
                    "tuple[]",
                    "list[typing.Union[str,S]]"
                ],
                "mode": [
                    "typing.Text"
                ]
            }
        }
    },
    "python-can-develop/can/io/logger.py": {
        "Logger.__new__": {
            "name": "__new__",
            "location": 65,
            "return": [
                "Printer"
            ],
            "arguments": {
                "cls": [
                    "list[str]",
                    "bool",
                    "str"
                ],
                "filename": [
                    "str",
                    "None"
                ]
            }
        },
        "Logger.compress": {
            "name": "compress",
            "location": 100,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "filename": [
                    "str",
                    "int"
                ]
            }
        },
        "Logger.on_message_received": {
            "name": "on_message_received",
            "location": 110,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "msg": [
                    "str",
                    "bytes",
                    "None",
                    "dict[, ]"
                ]
            }
        },
        "BaseRotatingLogger.__init__": {
            "name": "__init__",
            "location": 145,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseRotatingLogger.writer": {
            "name": "writer",
            "location": 156,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BaseRotatingLogger.rotation_filename": {
            "name": "rotation_filename",
            "location": 160,
            "return": [
                "str",
                "None",
                "dict[str, typing.Any]"
            ],
            "arguments": {
                "self": [],
                "default_name": [
                    "str",
                    "None",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "BaseRotatingLogger.rotate": {
            "name": "rotate",
            "location": 177,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "source": [
                    "str",
                    "None"
                ],
                "dest": [
                    "str",
                    "bool",
                    "None"
                ]
            }
        },
        "BaseRotatingLogger.on_message_received": {
            "name": "on_message_received",
            "location": 198,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "msg": [
                    "str",
                    "list[str]",
                    "bytes"
                ]
            }
        },
        "BaseRotatingLogger._get_new_writer": {
            "name": "_get_new_writer",
            "location": 210,
            "return": [
                "FileIOMessageWriter"
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "str",
                    "None"
                ]
            }
        },
        "BaseRotatingLogger.stop": {
            "name": "stop",
            "location": 234,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseRotatingLogger.__enter__": {
            "name": "__enter__",
            "location": 242,
            "return": [
                "BaseRotatingLogger"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseRotatingLogger.__exit__": {
            "name": "__exit__",
            "location": 245,
            "return": [],
            "arguments": {
                "self": [],
                "exc_type": [
                    "BaseException",
                    "Exception",
                    "typing.Type",
                    "str"
                ],
                "exc_val": [
                    "BaseException",
                    "Exception",
                    "typing.Type",
                    "str"
                ],
                "exc_tb": [
                    "BaseException",
                    "Exception",
                    "typing.Type",
                    "str"
                ]
            }
        },
        "BaseRotatingLogger.should_rollover": {
            "name": "should_rollover",
            "location": 254,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "msg": [
                    "str",
                    "bytes",
                    "None",
                    "dict[, ]"
                ]
            }
        },
        "BaseRotatingLogger.do_rollover": {
            "name": "do_rollover",
            "location": 258,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SizedRotatingLogger.__init__": {
            "name": "__init__",
            "location": 302,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "base_filename": [
                    "str",
                    "int"
                ]
            }
        },
        "SizedRotatingLogger.should_rollover": {
            "name": "should_rollover",
            "location": 324,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "msg": [
                    "str",
                    "bytes",
                    "None",
                    "dict[, ]"
                ]
            }
        },
        "SizedRotatingLogger.do_rollover": {
            "name": "do_rollover",
            "location": 333,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SizedRotatingLogger._default_name": {
            "name": "_default_name",
            "location": 343,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "python-can-develop/can/io/player.py": {
        "LogReader.__new__": {
            "name": "__new__",
            "location": 62,
            "return": [],
            "arguments": {
                "cls": [
                    "list[str]",
                    "bool",
                    "str"
                ],
                "filename": [
                    "str",
                    "typing.IO"
                ]
            }
        },
        "LogReader.decompress": {
            "name": "decompress",
            "location": 94,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "filename": [
                    "str",
                    "int"
                ]
            }
        },
        "LogReader.__iter__": {
            "name": "__iter__",
            "location": 105,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MessageSync.__init__": {
            "name": "__init__",
            "location": 114,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "messages": [
                    "int",
                    "float"
                ],
                "timestamps": [
                    "bool"
                ],
                "gap": [
                    "float"
                ],
                "skip": [
                    "float"
                ]
            }
        },
        "MessageSync.__iter__": {
            "name": "__iter__",
            "location": 134,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "python-can-develop/can/io/printer.py": {
        "Printer.__init__": {
            "name": "__init__",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "file": [
                    "None",
                    "bool",
                    "str",
                    "list[str]"
                ],
                "append": [
                    "bool"
                ]
            }
        },
        "Printer.on_message_received": {
            "name": "on_message_received",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "msg": [
                    "str"
                ]
            }
        }
    },
    "python-can-develop/can/io/sqlite.py": {
        "SqliteReader.__init__": {
            "name": "__init__",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "file": [
                    "str",
                    "None",
                    "typing.Sequence[str]"
                ],
                "table_name": [
                    "typing.Text"
                ]
            }
        },
        "SqliteReader.__iter__": {
            "name": "__iter__",
            "location": 50,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SqliteReader._assemble_message": {
            "name": "_assemble_message",
            "location": 55,
            "return": [
                "Message"
            ],
            "arguments": {
                "frame_data": [
                    "dict[, ]",
                    "str",
                    "dict[str, typing.Any]",
                    "bytes"
                ]
            }
        },
        "SqliteReader.__len__": {
            "name": "__len__",
            "location": 67,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "SqliteReader.read_all": {
            "name": "read_all",
            "location": 72,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SqliteReader.stop": {
            "name": "stop",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SqliteWriter.__init__": {
            "name": "__init__",
            "location": 131,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "file": [
                    "str",
                    "None",
                    "typing.IO",
                    "int",
                    "typing.TextIO"
                ],
                "table_name": [
                    "typing.Text"
                ]
            }
        },
        "SqliteWriter._create_db": {
            "name": "_create_db",
            "location": 153,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SqliteWriter._db_writer_thread": {
            "name": "_db_writer_thread",
            "location": 178,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SqliteWriter.stop": {
            "name": "stop",
            "location": 227,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "python-can-develop/can/io/__init__.py": {},
    "python-can-develop/doc/conf.py": {},
    "python-can-develop/examples/asyncio_demo.py": {
        "print_message": {
            "name": "print_message",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "msg": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "python-can-develop/examples/crc.py": {
        "crc_send": {
            "name": "crc_send",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "bus": [
                    "str",
                    "float"
                ]
            }
        },
        "build_crc_msgs": {
            "name": "build_crc_msgs",
            "location": 46,
            "return": [
                "list[Message]"
            ],
            "arguments": {
                "msg": [
                    "str",
                    "dict[str, typing.Any]",
                    "dict[, ]",
                    "int"
                ]
            }
        },
        "compute_xbr_checksum": {
            "name": "compute_xbr_checksum",
            "location": 63,
            "return": [],
            "arguments": {
                "message": [
                    "bytes",
                    "typing.MutableMapping"
                ],
                "counter": []
            }
        }
    },
    "python-can-develop/examples/cyclic.py": {
        "simple_periodic_send": {
            "name": "simple_periodic_send",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "bus": []
            }
        },
        "limited_periodic_send": {
            "name": "limited_periodic_send",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "bus": []
            }
        },
        "test_periodic_send_with_modifying_data": {
            "name": "test_periodic_send_with_modifying_data",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "bus": []
            }
        },
        "main": {
            "name": "main",
            "location": 111,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "python-can-develop/examples/cyclic_multiple.py": {
        "cyclic_multiple_send": {
            "name": "cyclic_multiple_send",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "bus": []
            }
        },
        "cyclic_multiple_send_modify": {
            "name": "cyclic_multiple_send_modify",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "bus": []
            }
        }
    },
    "python-can-develop/examples/receive_all.py": {
        "receive_all": {
            "name": "receive_all",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "python-can-develop/examples/send_one.py": {
        "send_one": {
            "name": "send_one",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "python-can-develop/examples/serial_com.py": {
        "send_cyclic": {
            "name": "send_cyclic",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "bus": [],
                "msg": [
                    "int",
                    "float",
                    "str"
                ],
                "stop_event": []
            }
        },
        "receive": {
            "name": "receive",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "bus": [],
                "stop_event": []
            }
        },
        "main": {
            "name": "main",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "python-can-develop/examples/simple_log_converter.py": {
        "main": {
            "name": "main",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "python-can-develop/examples/vcan_filtered.py": {
        "main": {
            "name": "main",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "python-can-develop/examples/virtual_can_demo.py": {
        "producer": {
            "name": "producer",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "thread_id": [
                    "int"
                ],
                "message_count": [
                    "int"
                ]
            }
        }
    },
    "python-can-develop/scripts/can_logconvert.py": {},
    "python-can-develop/scripts/can_logger.py": {},
    "python-can-develop/scripts/can_player.py": {},
    "python-can-develop/scripts/can_viewer.py": {},
    "python-can-develop/test/back2back_test.py": {
        "Back2BackTestCase.setUp": {
            "name": "setUp",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Back2BackTestCase.tearDown": {
            "name": "tearDown",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Back2BackTestCase._check_received_message": {
            "name": "_check_received_message",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "recv_msg": [
                    "float"
                ],
                "sent_msg": [
                    "int"
                ]
            }
        },
        "Back2BackTestCase._send_and_receive": {
            "name": "_send_and_receive",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "msg": []
            }
        },
        "Back2BackTestCase.test_no_message": {
            "name": "test_no_message",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Back2BackTestCase.test_multiple_shutdown": {
            "name": "test_multiple_shutdown",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Back2BackTestCase.test_timestamp": {
            "name": "test_timestamp",
            "location": 108,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Back2BackTestCase.test_standard_message": {
            "name": "test_standard_message",
            "location": 121,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Back2BackTestCase.test_extended_message": {
            "name": "test_extended_message",
            "location": 127,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Back2BackTestCase.test_remote_message": {
            "name": "test_remote_message",
            "location": 135,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Back2BackTestCase.test_dlc_less_than_eight": {
            "name": "test_dlc_less_than_eight",
            "location": 141,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Back2BackTestCase.test_message_is_rx": {
            "name": "test_message_is_rx",
            "location": 148,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Back2BackTestCase.test_message_is_rx_receive_own_messages": {
            "name": "test_message_is_rx_receive_own_messages",
            "location": 165,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Back2BackTestCase.test_unique_message_instances": {
            "name": "test_unique_message_instances",
            "location": 185,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Back2BackTestCase.test_fd_message": {
            "name": "test_fd_message",
            "location": 215,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Back2BackTestCase.test_fd_message_with_brs": {
            "name": "test_fd_message_with_brs",
            "location": 221,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Back2BackTestCase.test_fileno": {
            "name": "test_fileno",
            "location": 231,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Back2BackTestCase.test_timestamp_is_absolute": {
            "name": "test_timestamp_is_absolute",
            "location": 241,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Back2BackTestCase.test_sub_second_timestamp_resolution": {
            "name": "test_sub_second_timestamp_resolution",
            "location": 250,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BasicTestUdpMulticastBusIPv4.test_unique_message_instances": {
            "name": "test_unique_message_instances",
            "location": 298,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BasicTestUdpMulticastBusIPv6.test_unique_message_instances": {
            "name": "test_unique_message_instances",
            "location": 316,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BasicTestEtas.test_unique_message_instances": {
            "name": "test_unique_message_instances",
            "location": 340,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SocketCanBroadcastChannel.setUp": {
            "name": "setUp",
            "location": 348,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SocketCanBroadcastChannel.tearDown": {
            "name": "tearDown",
            "location": 352,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SocketCanBroadcastChannel.test_broadcast_channel": {
            "name": "test_broadcast_channel",
            "location": 356,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestThreadSafeBus.setUp": {
            "name": "setUp",
            "location": 369,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestThreadSafeBus.test_concurrent_writes": {
            "name": "test_concurrent_writes",
            "location": 386,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestThreadSafeBus.test_filtered_bus": {
            "name": "test_filtered_bus",
            "location": 417,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestThreadSafeBus.test_concurrent_writes.sender": {
            "name": "sender",
            "location": 399,
            "return": [
                "None"
            ],
            "arguments": {
                "msg": []
            }
        },
        "TestThreadSafeBus.test_concurrent_writes.receiver": {
            "name": "receiver",
            "location": 402,
            "return": [],
            "arguments": {
                "_": []
            }
        },
        "TestThreadSafeBus.test_filtered_bus.sender": {
            "name": "sender",
            "location": 440,
            "return": [
                "None"
            ],
            "arguments": {
                "msg": []
            }
        },
        "TestThreadSafeBus.test_filtered_bus.receiver": {
            "name": "receiver",
            "location": 443,
            "return": [],
            "arguments": {
                "_": []
            }
        }
    },
    "python-can-develop/test/config.py": {
        "env": {
            "name": "env",
            "location": 14,
            "return": [
                "bool"
            ],
            "arguments": {
                "name": [
                    "str"
                ]
            }
        }
    },
    "python-can-develop/test/contextmanager_test.py": {
        "ContextManagerTest.setUp": {
            "name": "setUp",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ContextManagerTest.test_open_buses": {
            "name": "test_open_buses",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ContextManagerTest.test_use_closed_bus": {
            "name": "test_use_closed_bus",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "python-can-develop/test/listener_test.py": {
        "test_deprecated_loop_arg": {
            "name": "test_deprecated_loop_arg",
            "location": 160,
            "return": [
                "None"
            ],
            "arguments": {
                "recwarn": []
            }
        },
        "ListenerImportTest.testClassesImportable": {
            "name": "testClassesImportable",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BusTest.setUp": {
            "name": "setUp",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BusTest.tearDown": {
            "name": "tearDown",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ListenerTest.testBasicListenerCanBeAddedToNotifier": {
            "name": "testBasicListenerCanBeAddedToNotifier",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ListenerTest.testAddListenerToNotifier": {
            "name": "testAddListenerToNotifier",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ListenerTest.testRemoveListenerFromNotifier": {
            "name": "testRemoveListenerFromNotifier",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ListenerTest.testPlayerTypeResolution": {
            "name": "testPlayerTypeResolution",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ListenerTest.testPlayerTypeResolutionUnsupportedFileTypes": {
            "name": "testPlayerTypeResolutionUnsupportedFileTypes",
            "location": 116,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ListenerTest.testLoggerTypeResolution": {
            "name": "testLoggerTypeResolution",
            "location": 122,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ListenerTest.testLoggerTypeResolutionUnsupportedFileTypes": {
            "name": "testLoggerTypeResolutionUnsupportedFileTypes",
            "location": 145,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ListenerTest.testBufferedListenerReceives": {
            "name": "testBufferedListenerReceives",
            "location": 151,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ListenerTest.testPlayerTypeResolution.test_filetype_to_instance": {
            "name": "test_filetype_to_instance",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "extension": [],
                "klass": []
            }
        },
        "ListenerTest.testLoggerTypeResolution.test_filetype_to_instance": {
            "name": "test_filetype_to_instance",
            "location": 123,
            "return": [
                "None"
            ],
            "arguments": {
                "extension": [],
                "klass": []
            }
        }
    },
    "python-can-develop/test/logformats_test.py": {
        "ReaderWriterExtensionTest.test_extension_matching": {
            "name": "test_extension_matching",
            "location": 46,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ReaderWriterTest.__init__": {
            "name": "__init__",
            "location": 80,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ReaderWriterTest._setup_instance": {
            "name": "_setup_instance",
            "location": 85,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ReaderWriterTest._setup_instance_helper": {
            "name": "_setup_instance_helper",
            "location": 89,
            "return": [],
            "arguments": {
                "self": [],
                "writer_constructor": [],
                "reader_constructor": [],
                "binary_file": [],
                "check_remote_frames": [],
                "check_error_frames": [],
                "check_fd": [],
                "check_comments": [],
                "test_append": [],
                "allowed_timestamp_delta": [],
                "preserves_channel": [],
                "adds_default_channel": []
            }
        },
        "ReaderWriterTest.setUp": {
            "name": "setUp",
            "location": 160,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ReaderWriterTest.tearDown": {
            "name": "tearDown",
            "location": 164,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ReaderWriterTest.test_path_like_explicit_stop": {
            "name": "test_path_like_explicit_stop",
            "location": 168,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ReaderWriterTest.test_path_like_context_manager": {
            "name": "test_path_like_context_manager",
            "location": 199,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ReaderWriterTest.test_file_like_explicit_stop": {
            "name": "test_file_like_explicit_stop",
            "location": 229,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ReaderWriterTest.test_file_like_context_manager": {
            "name": "test_file_like_context_manager",
            "location": 262,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ReaderWriterTest.test_append_mode": {
            "name": "test_append_mode",
            "location": 294,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ReaderWriterTest._write_all": {
            "name": "_write_all",
            "location": 330,
            "return": [],
            "arguments": {
                "self": [],
                "writer": []
            }
        },
        "ReaderWriterTest._ensure_fsync": {
            "name": "_ensure_fsync",
            "location": 344,
            "return": [],
            "arguments": {
                "self": [],
                "io_handler": []
            }
        },
        "ReaderWriterTest.assertIncludesComments": {
            "name": "assertIncludesComments",
            "location": 349,
            "return": [],
            "arguments": {
                "self": [],
                "filename": []
            }
        },
        "TestAscFileFormat._setup_instance": {
            "name": "_setup_instance",
            "location": 369,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestAscFileFormat._read_log_file": {
            "name": "_read_log_file",
            "location": 379,
            "return": [],
            "arguments": {
                "self": [],
                "filename": []
            }
        },
        "TestAscFileFormat.test_absolute_time": {
            "name": "test_absolute_time",
            "location": 384,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestAscFileFormat.test_can_message": {
            "name": "test_can_message",
            "location": 412,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestAscFileFormat.test_can_remote_message": {
            "name": "test_can_remote_message",
            "location": 435,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestAscFileFormat.test_can_fd_remote_message": {
            "name": "test_can_fd_remote_message",
            "location": 464,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestAscFileFormat.test_can_fd_message": {
            "name": "test_can_fd_message",
            "location": 480,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestAscFileFormat.test_can_fd_message_64": {
            "name": "test_can_fd_message_64",
            "location": 517,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestAscFileFormat.test_can_and_canfd_error_frames": {
            "name": "test_can_and_canfd_error_frames",
            "location": 542,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestAscFileFormat.test_ignore_comments": {
            "name": "test_ignore_comments",
            "location": 558,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestAscFileFormat.test_no_triggerblock": {
            "name": "test_no_triggerblock",
            "location": 561,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestAscFileFormat.test_can_dlc_greater_than_8": {
            "name": "test_can_dlc_greater_than_8",
            "location": 564,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestBlfFileFormat._setup_instance": {
            "name": "_setup_instance",
            "location": 575,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestBlfFileFormat._read_log_file": {
            "name": "_read_log_file",
            "location": 588,
            "return": [],
            "arguments": {
                "self": [],
                "filename": []
            }
        },
        "TestBlfFileFormat.test_can_message": {
            "name": "test_can_message",
            "location": 593,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestBlfFileFormat.test_can_message_2": {
            "name": "test_can_message_2",
            "location": 606,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestBlfFileFormat.test_can_fd_message": {
            "name": "test_can_fd_message",
            "location": 619,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestBlfFileFormat.test_can_fd_message_64": {
            "name": "test_can_fd_message_64",
            "location": 635,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestBlfFileFormat.test_can_error_frame_ext": {
            "name": "test_can_error_frame_ext",
            "location": 652,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestBlfFileFormat.test_timestamp_to_systemtime": {
            "name": "test_timestamp_to_systemtime",
            "location": 666,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCanutilsFileFormat._setup_instance": {
            "name": "_setup_instance",
            "location": 682,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCsvFileFormat._setup_instance": {
            "name": "_setup_instance",
            "location": 697,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSqliteDatabaseFormat._setup_instance": {
            "name": "_setup_instance",
            "location": 712,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSqliteDatabaseFormat.test_file_like_explicit_stop": {
            "name": "test_file_like_explicit_stop",
            "location": 724,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSqliteDatabaseFormat.test_file_like_context_manager": {
            "name": "test_file_like_context_manager",
            "location": 728,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSqliteDatabaseFormat.test_read_all": {
            "name": "test_read_all",
            "location": 731,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPrinter.test_not_crashes_with_stdout": {
            "name": "test_not_crashes_with_stdout",
            "location": 768,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPrinter.test_not_crashes_with_file": {
            "name": "test_not_crashes_with_file",
            "location": 773,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "python-can-develop/test/message_helper.py": {
        "ComparingMessagesTestCase.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "allowed_timestamp_delta": [
                    "float"
                ],
                "preserves_channel": [
                    "bool"
                ]
            }
        },
        "ComparingMessagesTestCase.assertMessageEqual": {
            "name": "assertMessageEqual",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message_1": [
                    "int",
                    "list[typing.Callable[, ]]",
                    "list[str]",
                    "str"
                ],
                "message_2": [
                    "list[str]",
                    "str",
                    "Exception",
                    "int"
                ]
            }
        },
        "ComparingMessagesTestCase.assertMessagesEqual": {
            "name": "assertMessagesEqual",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "messages_1": [],
                "messages_2": []
            }
        }
    },
    "python-can-develop/test/network_test.py": {
        "ControllerAreaNetworkTestCase.producer": {
            "name": "producer",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ready_event": [],
                "msg_read": [
                    "None"
                ]
            }
        },
        "ControllerAreaNetworkTestCase.testProducer": {
            "name": "testProducer",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ControllerAreaNetworkTestCase.testProducerConsumer": {
            "name": "testProducerConsumer",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "python-can-develop/test/notifier_test.py": {
        "NotifierTest.test_single_bus": {
            "name": "test_single_bus",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "NotifierTest.test_multiple_bus": {
            "name": "test_multiple_bus",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AsyncNotifierTest.test_asyncio_notifier": {
            "name": "test_asyncio_notifier",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "python-can-develop/test/serial_test.py": {
        "SerialDummy.__init__": {
            "name": "__init__",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SerialDummy.read": {
            "name": "read",
            "location": 33,
            "return": [
                "bytes"
            ],
            "arguments": {
                "self": [],
                "size": [
                    "int"
                ]
            }
        },
        "SerialDummy.write": {
            "name": "write",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "msg": []
            }
        },
        "SerialDummy.reset": {
            "name": "reset",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SimpleSerialTestBase.__init__": {
            "name": "__init__",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SimpleSerialTestBase.test_rx_tx_min_max_data": {
            "name": "test_rx_tx_min_max_data",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SimpleSerialTestBase.test_rx_tx_min_max_dlc": {
            "name": "test_rx_tx_min_max_dlc",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SimpleSerialTestBase.test_rx_tx_data_none": {
            "name": "test_rx_tx_data_none",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SimpleSerialTestBase.test_rx_tx_min_id": {
            "name": "test_rx_tx_min_id",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SimpleSerialTestBase.test_rx_tx_max_id": {
            "name": "test_rx_tx_max_id",
            "location": 95,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SimpleSerialTestBase.test_rx_tx_max_timestamp": {
            "name": "test_rx_tx_max_timestamp",
            "location": 104,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SimpleSerialTestBase.test_rx_tx_max_timestamp_error": {
            "name": "test_rx_tx_max_timestamp_error",
            "location": 115,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SimpleSerialTestBase.test_rx_tx_min_timestamp": {
            "name": "test_rx_tx_min_timestamp",
            "location": 122,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SimpleSerialTestBase.test_rx_tx_min_timestamp_error": {
            "name": "test_rx_tx_min_timestamp_error",
            "location": 132,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SimpleSerialTestBase.test_when_no_fileno": {
            "name": "test_when_no_fileno",
            "location": 139,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SimpleSerialTest.__init__": {
            "name": "__init__",
            "location": 159,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SimpleSerialTest.setUp": {
            "name": "setUp",
            "location": 163,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SimpleSerialTest.tearDown": {
            "name": "tearDown",
            "location": 172,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SimpleSerialLoopTest.__init__": {
            "name": "__init__",
            "location": 177,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SimpleSerialLoopTest.setUp": {
            "name": "setUp",
            "location": 181,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SimpleSerialLoopTest.tearDown": {
            "name": "tearDown",
            "location": 184,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "python-can-develop/test/simplecyclic_test.py": {
        "SimpleCyclicSendTaskTest.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SimpleCyclicSendTaskTest.test_cycle_time": {
            "name": "test_cycle_time",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SimpleCyclicSendTaskTest.test_removing_bus_tasks": {
            "name": "test_removing_bus_tasks",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SimpleCyclicSendTaskTest.test_managed_tasks": {
            "name": "test_managed_tasks",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SimpleCyclicSendTaskTest.test_stopping_perodic_tasks": {
            "name": "test_stopping_perodic_tasks",
            "location": 122,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SimpleCyclicSendTaskTest.test_thread_based_cyclic_send_task": {
            "name": "test_thread_based_cyclic_send_task",
            "location": 155,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "python-can-develop/test/test_bit_timing.py": {
        "test_sja1000": {
            "name": "test_sja1000",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_can_fd": {
            "name": "test_can_fd",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_from_btr": {
            "name": "test_from_btr",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_string_representation": {
            "name": "test_string_representation",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "python-can-develop/test/test_cantact.py": {
        "CantactTest.test_bus_creation": {
            "name": "test_bus_creation",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CantactTest.test_bus_creation_bittiming": {
            "name": "test_bus_creation_bittiming",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CantactTest.test_transmit": {
            "name": "test_transmit",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CantactTest.test_recv": {
            "name": "test_recv",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CantactTest.test_recv_timeout": {
            "name": "test_recv_timeout",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CantactTest.test_shutdown": {
            "name": "test_shutdown",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "python-can-develop/test/test_cyclic_socketcan.py": {
        "CyclicSocketCan._find_start_index": {
            "name": "_find_start_index",
            "location": 28,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "tx_messages": [
                    "str"
                ],
                "message": [
                    "str",
                    "bytes"
                ]
            }
        },
        "CyclicSocketCan.setUp": {
            "name": "setUp",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CyclicSocketCan.tearDown": {
            "name": "tearDown",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CyclicSocketCan.test_cyclic_initializer_list": {
            "name": "test_cyclic_initializer_list",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CyclicSocketCan.test_cyclic_initializer_tuple": {
            "name": "test_cyclic_initializer_tuple",
            "location": 124,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CyclicSocketCan.test_cyclic_initializer_message": {
            "name": "test_cyclic_initializer_message",
            "location": 195,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CyclicSocketCan.test_cyclic_initializer_invalid_none": {
            "name": "test_cyclic_initializer_invalid_none",
            "location": 222,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CyclicSocketCan.test_cyclic_initializer_invalid_empty_list": {
            "name": "test_cyclic_initializer_invalid_empty_list",
            "location": 226,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CyclicSocketCan.test_cyclic_initializer_different_arbitration_ids": {
            "name": "test_cyclic_initializer_different_arbitration_ids",
            "location": 230,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CyclicSocketCan.test_start_already_started_task": {
            "name": "test_start_already_started_task",
            "location": 249,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CyclicSocketCan.test_create_same_id": {
            "name": "test_create_same_id",
            "location": 269,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CyclicSocketCan.test_modify_data_list": {
            "name": "test_modify_data_list",
            "location": 318,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CyclicSocketCan.test_modify_data_message": {
            "name": "test_modify_data_message",
            "location": 440,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CyclicSocketCan.test_modify_data_invalid": {
            "name": "test_modify_data_invalid",
            "location": 512,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CyclicSocketCan.test_modify_data_unequal_lengths": {
            "name": "test_modify_data_unequal_lengths",
            "location": 526,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CyclicSocketCan.test_modify_data_different_arbitration_id_than_original": {
            "name": "test_modify_data_different_arbitration_id_than_original",
            "location": 556,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CyclicSocketCan.test_stop_all_periodic_tasks_and_remove_task": {
            "name": "test_stop_all_periodic_tasks_and_remove_task",
            "location": 576,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "python-can-develop/test/test_detect_available_configs.py": {
        "TestDetectAvailableConfigs.test_count_returned": {
            "name": "test_count_returned",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDetectAvailableConfigs.test_general_values": {
            "name": "test_general_values",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDetectAvailableConfigs.test_content_virtual": {
            "name": "test_content_virtual",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDetectAvailableConfigs.test_content_udp_multicast": {
            "name": "test_content_udp_multicast",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDetectAvailableConfigs.test_content_socketcan": {
            "name": "test_content_socketcan",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDetectAvailableConfigs.test_count_udp_multicast": {
            "name": "test_count_udp_multicast",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDetectAvailableConfigs.test_socketcan_on_ci_server": {
            "name": "test_socketcan_on_ci_server",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "python-can-develop/test/test_interface_canalystii.py": {
        "create_mock_device": {
            "name": "create_mock_device",
            "location": 16,
            "return": [],
            "arguments": {}
        },
        "CanalystIITest.test_initialize_from_constructor": {
            "name": "test_initialize_from_constructor",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CanalystIITest.test_initialize_single_channel_only": {
            "name": "test_initialize_single_channel_only",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CanalystIITest.test_initialize_with_timing_registers": {
            "name": "test_initialize_with_timing_registers",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CanalystIITest.test_missing_bitrate": {
            "name": "test_missing_bitrate",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CanalystIITest.test_invalid_bit_timing": {
            "name": "test_invalid_bit_timing",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CanalystIITest.test_receive_message": {
            "name": "test_receive_message",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CanalystIITest.test_send_message": {
            "name": "test_send_message",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "python-can-develop/test/test_interface_ixxat.py": {
        "SoftwareTestCase.setUp": {
            "name": "setUp",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SoftwareTestCase.test_bus_creation": {
            "name": "test_bus_creation",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HardwareTestCase.setUp": {
            "name": "setUp",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HardwareTestCase.test_bus_creation": {
            "name": "test_bus_creation",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HardwareTestCase.test_send_after_shutdown": {
            "name": "test_send_after_shutdown",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "python-can-develop/test/test_interface_ixxat_fd.py": {
        "SoftwareTestCase.setUp": {
            "name": "setUp",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SoftwareTestCase.test_bus_creation": {
            "name": "test_bus_creation",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HardwareTestCase.setUp": {
            "name": "setUp",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HardwareTestCase.test_bus_creation": {
            "name": "test_bus_creation",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HardwareTestCase.test_send_after_shutdown": {
            "name": "test_send_after_shutdown",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "python-can-develop/test/test_interface_virtual.py": {
        "TestMessageFiltering.setUp": {
            "name": "setUp",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMessageFiltering.tearDown": {
            "name": "tearDown",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMessageFiltering.test_sendmsg": {
            "name": "test_sendmsg",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMessageFiltering.test_sendmsg_preserve_timestamp": {
            "name": "test_sendmsg_preserve_timestamp",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "python-can-develop/test/test_kvaser.py": {
        "KvaserTest.setUp": {
            "name": "setUp",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "KvaserTest.tearDown": {
            "name": "tearDown",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "KvaserTest.test_bus_creation": {
            "name": "test_bus_creation",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "KvaserTest.test_bus_shutdown": {
            "name": "test_bus_shutdown",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "KvaserTest.test_filter_setup": {
            "name": "test_filter_setup",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "KvaserTest.test_send_extended": {
            "name": "test_send_extended",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "KvaserTest.test_send_standard": {
            "name": "test_send_standard",
            "location": 103,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "KvaserTest.test_recv_no_message": {
            "name": "test_recv_no_message",
            "location": 114,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "KvaserTest.test_recv_extended": {
            "name": "test_recv_extended",
            "location": 117,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "KvaserTest.test_recv_standard": {
            "name": "test_recv_standard",
            "location": 130,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "KvaserTest.test_available_configs": {
            "name": "test_available_configs",
            "location": 141,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "KvaserTest.test_canfd_default_data_bitrate": {
            "name": "test_canfd_default_data_bitrate",
            "location": 149,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "KvaserTest.test_canfd_nondefault_data_bitrate": {
            "name": "test_canfd_nondefault_data_bitrate",
            "location": 160,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "KvaserTest.test_canfd_custom_data_bitrate": {
            "name": "test_canfd_custom_data_bitrate",
            "location": 171,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "KvaserTest.test_bus_get_stats": {
            "name": "test_bus_get_stats",
            "location": 181,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "KvaserTest.canGetNumberOfChannels": {
            "name": "canGetNumberOfChannels",
            "location": 188,
            "return": [
                "None"
            ],
            "arguments": {
                "count": [
                    "dict[, ]"
                ]
            }
        },
        "KvaserTest.canWrite": {
            "name": "canWrite",
            "location": 191,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "handle": [
                    "int",
                    "str"
                ],
                "arb_id": [
                    "str",
                    "float",
                    "typing.Callable[, ]",
                    "int"
                ],
                "buf": [
                    "int",
                    "list[str]",
                    "float"
                ],
                "dlc": [
                    "str",
                    "int"
                ],
                "flags": [
                    "str",
                    "int"
                ]
            }
        },
        "KvaserTest.canReadWait": {
            "name": "canReadWait",
            "location": 197,
            "return": [],
            "arguments": {
                "self": [],
                "handle": [
                    "bool",
                    "str",
                    "typing.Mapping",
                    "float"
                ],
                "arb_id": [
                    "int",
                    "str",
                    "list[dict[, ]]",
                    "list[str]"
                ],
                "data": [
                    "str",
                    "int",
                    "dict[str, str]",
                    "dict[, ]"
                ],
                "dlc": [
                    "str",
                    "typing.Type",
                    "bool",
                    "typing.Callable[typing.Any, None]",
                    "None"
                ],
                "flags": [
                    "str",
                    "int",
                    "list[str]"
                ],
                "timestamp": [
                    "bool",
                    "typing.Type",
                    "str",
                    "None"
                ],
                "timeout": [
                    "bool",
                    "str",
                    "typing.Mapping",
                    "float"
                ]
            }
        }
    },
    "python-can-develop/test/test_load_file_config.py": {
        "LoadFileConfigTest.setUp": {
            "name": "setUp",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LoadFileConfigTest.tearDown": {
            "name": "tearDown",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LoadFileConfigTest._gen_configration_file": {
            "name": "_gen_configration_file",
            "location": 27,
            "return": [],
            "arguments": {
                "self": [],
                "sections": []
            }
        },
        "LoadFileConfigTest.test_config_file_with_default": {
            "name": "test_config_file_with_default",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LoadFileConfigTest.test_config_file_with_default_and_section": {
            "name": "test_config_file_with_default_and_section",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LoadFileConfigTest.test_config_file_with_section_only": {
            "name": "test_config_file_with_section_only",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LoadFileConfigTest.test_config_file_with_section_and_key_in_default": {
            "name": "test_config_file_with_section_and_key_in_default",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LoadFileConfigTest.test_config_file_with_section_missing_interface": {
            "name": "test_config_file_with_section_missing_interface",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LoadFileConfigTest.test_config_file_extra": {
            "name": "test_config_file_extra",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LoadFileConfigTest.test_config_file_with_non_existing_section": {
            "name": "test_config_file_with_non_existing_section",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "python-can-develop/test/test_logger.py": {
        "TestLoggerScriptModule.setUp": {
            "name": "setUp",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLoggerScriptModule.assertSuccessfullCleanup": {
            "name": "assertSuccessfullCleanup",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLoggerScriptModule.test_log_virtual": {
            "name": "test_log_virtual",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLoggerScriptModule.test_log_virtual_active": {
            "name": "test_log_virtual_active",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLoggerScriptModule.test_log_virtual_passive": {
            "name": "test_log_virtual_passive",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLoggerScriptModule.test_log_virtual_with_config": {
            "name": "test_log_virtual_with_config",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLoggerScriptModule.test_log_virtual_sizedlogger": {
            "name": "test_log_virtual_sizedlogger",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLoggerCompressedFile.setUp": {
            "name": "setUp",
            "location": 110,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLoggerCompressedFile.test_compressed_logfile": {
            "name": "test_compressed_logfile",
            "location": 125,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLoggerCompressedFile.tearDown": {
            "name": "tearDown",
            "location": 137,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "python-can-develop/test/test_message_class.py": {
        "TestMessageClass.test_methods": {
            "name": "test_methods",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MessageSerialization.__init__": {
            "name": "__init__",
            "location": 110,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MessageSerialization.test_serialization": {
            "name": "test_serialization",
            "location": 116,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "python-can-develop/test/test_message_filtering.py": {
        "TestMessageFiltering.setUp": {
            "name": "setUp",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMessageFiltering.tearDown": {
            "name": "tearDown",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMessageFiltering.test_match_all": {
            "name": "test_match_all",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMessageFiltering.test_match_filters_is_empty": {
            "name": "test_match_filters_is_empty",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMessageFiltering.test_match_example_message": {
            "name": "test_match_example_message",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "python-can-develop/test/test_message_sync.py": {
        "inc": {
            "name": "inc",
            "location": 24,
            "return": [
                "float",
                "int"
            ],
            "arguments": {
                "value": [
                    "int"
                ]
            }
        },
        "test_gap": {
            "name": "test_gap",
            "location": 103,
            "return": [
                "None"
            ],
            "arguments": {
                "timestamp_1": [
                    "int"
                ],
                "timestamp_2": [
                    "int"
                ]
            }
        },
        "TestMessageSync.__init__": {
            "name": "__init__",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMessageSync.setup_method": {
            "name": "setup_method",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_": [
                    "int",
                    "typing.Callable[, ]"
                ]
            }
        },
        "TestMessageSync.teardown_method": {
            "name": "teardown_method",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_": [
                    "int",
                    "typing.Callable[, ]"
                ]
            }
        },
        "TestMessageSync.test_general": {
            "name": "test_general",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMessageSync.test_skip": {
            "name": "test_skip",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "python-can-develop/test/test_neousys.py": {
        "TestNeousysBus.setUp": {
            "name": "setUp",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestNeousysBus.tearDown": {
            "name": "tearDown",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestNeousysBus.test_bus_creation": {
            "name": "test_bus_creation",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestNeousysBus.test_bus_creation_bitrate": {
            "name": "test_bus_creation_bitrate",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestNeousysBus.test_receive": {
            "name": "test_receive",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestNeousysBus.test_send": {
            "name": "test_send",
            "location": 99,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestNeousysBus.test_shutdown": {
            "name": "test_shutdown",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "python-can-develop/test/test_neovi.py": {
        "ICSApiErrorTest.test_error_pickling": {
            "name": "test_error_pickling",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "python-can-develop/test/test_pcan.py": {
        "TestPCANBus.setUp": {
            "name": "setUp",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPCANBus.tearDown": {
            "name": "tearDown",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPCANBus._mockGetValue": {
            "name": "_mockGetValue",
            "location": 40,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "self": [],
                "channel": [
                    "typing.Literal",
                    "dict[, ]"
                ],
                "parameter": [
                    "str",
                    "int"
                ]
            }
        },
        "TestPCANBus.test_bus_creation": {
            "name": "test_bus_creation",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPCANBus.test_bus_creation_state_error": {
            "name": "test_bus_creation_state_error",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPCANBus.test_bus_creation_fd": {
            "name": "test_bus_creation_fd",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPCANBus.test_api_version_low": {
            "name": "test_api_version_low",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPCANBus.test_api_version_read_fail": {
            "name": "test_api_version_read_fail",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPCANBus.test_get_formatted_error": {
            "name": "test_get_formatted_error",
            "location": 99,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "int",
                    "dict[, ]",
                    "None"
                ],
                "status1": [
                    "str",
                    "dict[str, typing.Any]",
                    "int",
                    "dict[, ]"
                ],
                "status2": [
                    "str",
                    "dict[str, typing.Any]",
                    "int",
                    "dict[, ]"
                ],
                "expected_result": [
                    "str"
                ]
            }
        },
        "TestPCANBus.test_status": {
            "name": "test_status",
            "location": 113,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPCANBus.test_status_is_ok": {
            "name": "test_status_is_ok",
            "location": 121,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "int",
                    "list[]",
                    "dict[, ]",
                    "dict[str, str]",
                    "None"
                ],
                "status": [
                    "str",
                    "list[tuple[typing.Union[bytes,bytes]]]",
                    "int",
                    "dict[, ]"
                ],
                "expected_result": [
                    "str",
                    "int",
                    "None",
                    "list[int]"
                ]
            }
        },
        "TestPCANBus.test_reset": {
            "name": "test_reset",
            "location": 131,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "None",
                    "int",
                    "dict[str, str]",
                    "list[]"
                ],
                "status": [
                    "str",
                    "int",
                    "list[]",
                    "None"
                ],
                "expected_result": [
                    "int",
                    "str"
                ]
            }
        },
        "TestPCANBus.test_get_device_number": {
            "name": "test_get_device_number",
            "location": 141,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "int",
                    "list[]",
                    "None",
                    "dict[str, str]"
                ],
                "status": [
                    "int",
                    "str"
                ],
                "expected_result": [
                    "int",
                    "None",
                    "float",
                    "dict[, ]",
                    "str",
                    "typing.Any"
                ]
            }
        },
        "TestPCANBus.test_set_device_number": {
            "name": "test_set_device_number",
            "location": 156,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "int",
                    "None",
                    "dict[str, str]"
                ],
                "status": [
                    "str",
                    "int",
                    "list[]"
                ],
                "expected_result": [
                    "str",
                    "int"
                ]
            }
        },
        "TestPCANBus.test_recv": {
            "name": "test_recv",
            "location": 167,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPCANBus.test_recv_fd": {
            "name": "test_recv_fd",
            "location": 183,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPCANBus.test_recv_no_message": {
            "name": "test_recv_no_message",
            "location": 207,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPCANBus.test_send": {
            "name": "test_send",
            "location": 212,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPCANBus.test_send_fd": {
            "name": "test_send_fd",
            "location": 222,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPCANBus.test_send_type": {
            "name": "test_send_type",
            "location": 259,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "msg_type": [
                    "str",
                    "list[int]",
                    "bool",
                    "None"
                ],
                "expected_value": [
                    "str",
                    "None"
                ]
            }
        },
        "TestPCANBus.test_send_error": {
            "name": "test_send_error",
            "location": 288,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPCANBus.test_flash": {
            "name": "test_flash",
            "location": 299,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "None",
                    "typing.Iterable[typing.Any]"
                ],
                "flash": [
                    "str"
                ]
            }
        },
        "TestPCANBus.test_shutdown": {
            "name": "test_shutdown",
            "location": 309,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPCANBus.test_state": {
            "name": "test_state",
            "location": 320,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "None",
                    "typing.Callable[..., T]"
                ],
                "bus_state": [
                    "str",
                    "None",
                    "int",
                    "typing.Sequence[int]"
                ],
                "expected_parameter": [
                    "typing.Callable[, ]",
                    "bool",
                    "list[typing.Callable[, ]]",
                    "dict[str, typing.Any]",
                    "list[str]",
                    "str"
                ]
            }
        },
        "TestPCANBus.test_detect_available_configs": {
            "name": "test_detect_available_configs",
            "location": 332,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPCANBus.test_status_string": {
            "name": "test_status_string",
            "location": 340,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "int",
                    "None"
                ],
                "status": [
                    "str",
                    "list[tuple[typing.Union[bytes,bytes]]]",
                    "int",
                    "dict[, ]"
                ],
                "expected_result": [
                    "str",
                    "list[dict[str, typing.Any]]",
                    "int",
                    "dict[, ]"
                ]
            }
        }
    },
    "python-can-develop/test/test_player.py": {
        "TestPlayerScriptModule.setUp": {
            "name": "setUp",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPlayerScriptModule.assertSuccessfulCleanup": {
            "name": "assertSuccessfulCleanup",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPlayerScriptModule.test_play_virtual": {
            "name": "test_play_virtual",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPlayerScriptModule.test_play_virtual_verbose": {
            "name": "test_play_virtual_verbose",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPlayerScriptModule.test_play_virtual_exit": {
            "name": "test_play_virtual_exit",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPlayerScriptModule.test_play_skip_error_frame": {
            "name": "test_play_skip_error_frame",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPlayerScriptModule.test_play_error_frame": {
            "name": "test_play_error_frame",
            "location": 103,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "python-can-develop/test/test_robotell.py": {
        "robotellTestCase.setUp": {
            "name": "setUp",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "robotellTestCase.tearDown": {
            "name": "tearDown",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "robotellTestCase.test_recv_extended": {
            "name": "test_recv_extended",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "robotellTestCase.test_send_extended": {
            "name": "test_send_extended",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "robotellTestCase.test_recv_standard": {
            "name": "test_recv_standard",
            "location": 103,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "robotellTestCase.test_send_standard": {
            "name": "test_send_standard",
            "location": 142,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "robotellTestCase.test_recv_extended_remote": {
            "name": "test_recv_extended_remote",
            "location": 179,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "robotellTestCase.test_send_extended_remote": {
            "name": "test_send_extended_remote",
            "location": 216,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "robotellTestCase.test_partial_recv": {
            "name": "test_partial_recv",
            "location": 252,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "robotellTestCase.test_serial_number": {
            "name": "test_serial_number",
            "location": 338,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "robotellTestCase.test_set_bitrate": {
            "name": "test_set_bitrate",
            "location": 451,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "robotellTestCase.test_set_auto_retransmit": {
            "name": "test_set_auto_retransmit",
            "location": 510,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "robotellTestCase.test_set_auto_bus_management": {
            "name": "test_set_auto_bus_management",
            "location": 618,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "robotellTestCase.test_set_serial_rate": {
            "name": "test_set_serial_rate",
            "location": 726,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "robotellTestCase.test_set_hw_filter": {
            "name": "test_set_hw_filter",
            "location": 786,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "robotellTestCase.test_when_no_fileno": {
            "name": "test_when_no_fileno",
            "location": 943,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "python-can-develop/test/test_rotating_loggers.py": {
        "TestBaseRotatingLogger._get_instance": {
            "name": "_get_instance",
            "location": 17,
            "return": [
                "SubClass"
            ],
            "arguments": {
                "path": [
                    "str",
                    "list[pathlib.Path]",
                    "bool"
                ]
            }
        },
        "TestBaseRotatingLogger.test_import": {
            "name": "test_import",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBaseRotatingLogger.test_attributes": {
            "name": "test_attributes",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBaseRotatingLogger.test_get_new_writer": {
            "name": "test_get_new_writer",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tmp_path": []
            }
        },
        "TestBaseRotatingLogger.test_rotation_filename": {
            "name": "test_rotation_filename",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tmp_path": [
                    "str"
                ]
            }
        },
        "TestBaseRotatingLogger.test_rotate_without_rotator": {
            "name": "test_rotate_without_rotator",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tmp_path": []
            }
        },
        "TestBaseRotatingLogger.test_rotate_with_rotator": {
            "name": "test_rotate_with_rotator",
            "location": 101,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tmp_path": []
            }
        },
        "TestBaseRotatingLogger.test_stop": {
            "name": "test_stop",
            "location": 127,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tmp_path": []
            }
        },
        "TestBaseRotatingLogger.test_on_message_received": {
            "name": "test_on_message_received",
            "location": 145,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tmp_path": []
            }
        },
        "TestSizedRotatingLogger.test_import": {
            "name": "test_import",
            "location": 187,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSizedRotatingLogger.test_attributes": {
            "name": "test_attributes",
            "location": 191,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSizedRotatingLogger.test_create_instance": {
            "name": "test_create_instance",
            "location": 198,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tmp_path": [
                    "int"
                ]
            }
        },
        "TestSizedRotatingLogger.test_should_rollover": {
            "name": "test_should_rollover",
            "location": 212,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tmp_path": [
                    "int"
                ]
            }
        },
        "TestSizedRotatingLogger.test_logfile_size": {
            "name": "test_logfile_size",
            "location": 235,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tmp_path": [
                    "int"
                ]
            }
        },
        "TestSizedRotatingLogger.test_logfile_size_context_manager": {
            "name": "test_logfile_size_context_manager",
            "location": 251,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tmp_path": []
            }
        },
        "TestBaseRotatingLogger._get_instance.SubClass.__init__": {
            "name": "__init__",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBaseRotatingLogger._get_instance.SubClass.should_rollover": {
            "name": "should_rollover",
            "location": 25,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "msg": []
            }
        },
        "TestBaseRotatingLogger._get_instance.SubClass.do_rollover": {
            "name": "do_rollover",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "python-can-develop/test/test_scripts.py": {
        "CanScriptTest.setUpClass": {
            "name": "setUpClass",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "typing.Type",
                    "list[str]",
                    "dict[str, typing.Any]",
                    "None",
                    "str",
                    "bool"
                ]
            }
        },
        "CanScriptTest.test_do_commands_exist": {
            "name": "test_do_commands_exist",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CanScriptTest.test_does_not_crash": {
            "name": "test_does_not_crash",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CanScriptTest._commands": {
            "name": "_commands",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CanScriptTest._import": {
            "name": "_import",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLoggerScript._commands": {
            "name": "_commands",
            "location": 74,
            "return": [
                "list[typing.Text]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLoggerScript._import": {
            "name": "_import",
            "location": 83,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPlayerScript._commands": {
            "name": "_commands",
            "location": 90,
            "return": [
                "list[typing.Text]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPlayerScript._import": {
            "name": "_import",
            "location": 99,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestLogconvertScript._commands": {
            "name": "_commands",
            "location": 106,
            "return": [
                "list[typing.Text]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLogconvertScript._import": {
            "name": "_import",
            "location": 115,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "python-can-develop/test/test_slcan.py": {
        "slcanTestCase.setUp": {
            "name": "setUp",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "slcanTestCase.tearDown": {
            "name": "tearDown",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "slcanTestCase.test_recv_extended": {
            "name": "test_recv_extended",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "slcanTestCase.test_send_extended": {
            "name": "test_send_extended",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "slcanTestCase.test_recv_standard": {
            "name": "test_recv_standard",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "slcanTestCase.test_send_standard": {
            "name": "test_send_standard",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "slcanTestCase.test_recv_standard_remote": {
            "name": "test_recv_standard_remote",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "slcanTestCase.test_send_standard_remote": {
            "name": "test_send_standard_remote",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "slcanTestCase.test_recv_extended_remote": {
            "name": "test_recv_extended_remote",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "slcanTestCase.test_send_extended_remote": {
            "name": "test_send_extended_remote",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "slcanTestCase.test_partial_recv": {
            "name": "test_partial_recv",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "slcanTestCase.test_version": {
            "name": "test_version",
            "location": 107,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "slcanTestCase.test_serial_number": {
            "name": "test_serial_number",
            "location": 117,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "python-can-develop/test/test_socketcan.py": {
        "SocketCANTest.setUp": {
            "name": "setUp",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SocketCANTest.test_bcm_header_factory_32_bit_sizeof_long_4_alignof_long_4": {
            "name": "test_bcm_header_factory_32_bit_sizeof_long_4_alignof_long_4",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ctypes_sizeof": [
                    "dict[, ]"
                ],
                "ctypes_alignment": [
                    "dict[, ]"
                ]
            }
        },
        "SocketCANTest.test_bcm_header_factory_32_bit_sizeof_long_4_alignof_long_long_8": {
            "name": "test_bcm_header_factory_32_bit_sizeof_long_4_alignof_long_long_8",
            "location": 107,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ctypes_sizeof": [
                    "dict[, ]"
                ],
                "ctypes_alignment": [
                    "dict[, ]"
                ]
            }
        },
        "SocketCANTest.test_bcm_header_factory_64_bit_sizeof_long_8_alignof_long_8": {
            "name": "test_bcm_header_factory_64_bit_sizeof_long_8_alignof_long_8",
            "location": 176,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ctypes_sizeof": [
                    "dict[, ]"
                ],
                "ctypes_alignment": [
                    "dict[, ]"
                ]
            }
        },
        "SocketCANTest.test_build_bcm_header_sizeof_long_4_alignof_long_4": {
            "name": "test_build_bcm_header_sizeof_long_4_alignof_long_4",
            "location": 249,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SocketCANTest.test_build_bcm_header_sizeof_long_8_alignof_long_8": {
            "name": "test_build_bcm_header_sizeof_long_8_alignof_long_8",
            "location": 279,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SocketCANTest.test_build_bcm_tx_delete_header": {
            "name": "test_build_bcm_tx_delete_header",
            "location": 305,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SocketCANTest.test_build_bcm_transmit_header_initial_period_0": {
            "name": "test_build_bcm_transmit_header_initial_period_0",
            "location": 321,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SocketCANTest.test_build_bcm_transmit_header_initial_period_1_24": {
            "name": "test_build_bcm_transmit_header_initial_period_1_24",
            "location": 345,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SocketCANTest.test_build_bcm_update_header": {
            "name": "test_build_bcm_update_header",
            "location": 369,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SocketCANTest.test_bcm_header_factory_32_bit_sizeof_long_4_alignof_long_4.side_effect_ctypes_sizeof": {
            "name": "side_effect_ctypes_sizeof",
            "location": 49,
            "return": [],
            "arguments": {
                "value": []
            }
        },
        "SocketCANTest.test_bcm_header_factory_32_bit_sizeof_long_4_alignof_long_4.side_effect_ctypes_alignment": {
            "name": "side_effect_ctypes_alignment",
            "location": 60,
            "return": [],
            "arguments": {
                "value": []
            }
        },
        "SocketCANTest.test_bcm_header_factory_32_bit_sizeof_long_4_alignof_long_long_8.side_effect_ctypes_sizeof": {
            "name": "side_effect_ctypes_sizeof",
            "location": 118,
            "return": [],
            "arguments": {
                "value": []
            }
        },
        "SocketCANTest.test_bcm_header_factory_32_bit_sizeof_long_4_alignof_long_long_8.side_effect_ctypes_alignment": {
            "name": "side_effect_ctypes_alignment",
            "location": 129,
            "return": [],
            "arguments": {
                "value": []
            }
        },
        "SocketCANTest.test_bcm_header_factory_64_bit_sizeof_long_8_alignof_long_8.side_effect_ctypes_sizeof": {
            "name": "side_effect_ctypes_sizeof",
            "location": 187,
            "return": [],
            "arguments": {
                "value": []
            }
        },
        "SocketCANTest.test_bcm_header_factory_64_bit_sizeof_long_8_alignof_long_8.side_effect_ctypes_alignment": {
            "name": "side_effect_ctypes_alignment",
            "location": 198,
            "return": [],
            "arguments": {
                "value": []
            }
        }
    },
    "python-can-develop/test/test_socketcan_helpers.py": {
        "TestSocketCanHelpers.test_error_code_to_str": {
            "name": "test_error_code_to_str",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSocketCanHelpers.test_find_available_interfaces": {
            "name": "test_find_available_interfaces",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "python-can-develop/test/test_socketcan_loopback.py": {
        "LocalLoopbackSocketCan.setUp": {
            "name": "setUp",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LocalLoopbackSocketCan.tearDown": {
            "name": "tearDown",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LocalLoopbackSocketCan.test_sending_message_with_loopback_enabled": {
            "name": "test_sending_message_with_loopback_enabled",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LocalLoopbackSocketCan.test_sending_message_without_loopback_enabled": {
            "name": "test_sending_message_without_loopback_enabled",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "python-can-develop/test/test_systec.py": {
        "SystecTest.compare_message": {
            "name": "compare_message",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "first": [
                    "bool",
                    "typing.Mapping",
                    "dict[, ]"
                ],
                "second": [
                    "bool",
                    "typing.Mapping",
                    "dict[, ]"
                ],
                "msg": [
                    "str",
                    "int"
                ]
            }
        },
        "SystecTest.setUp": {
            "name": "setUp",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SystecTest.test_bus_creation": {
            "name": "test_bus_creation",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SystecTest.test_bus_shutdown": {
            "name": "test_bus_shutdown",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SystecTest.test_filter_setup": {
            "name": "test_filter_setup",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SystecTest.test_send_extended": {
            "name": "test_send_extended",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_write_can_msg": []
            }
        },
        "SystecTest.test_send_standard": {
            "name": "test_send_standard",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_write_can_msg": []
            }
        },
        "SystecTest.test_recv_no_message": {
            "name": "test_recv_no_message",
            "location": 104,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_get_msg_pending": []
            }
        },
        "SystecTest.test_recv_extended": {
            "name": "test_recv_extended",
            "location": 110,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_read_can_msg": [],
                "mock_get_msg_pending": []
            }
        },
        "SystecTest.test_recv_standard": {
            "name": "test_recv_standard",
            "location": 125,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_read_can_msg": [],
                "mock_get_msg_pending": []
            }
        },
        "SystecTest.test_bus_defaults": {
            "name": "test_bus_defaults",
            "location": 137,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "SystecTest.test_bus_channel": {
            "name": "test_bus_channel",
            "location": 156,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "SystecTest.test_bus_bitrate": {
            "name": "test_bus_bitrate",
            "location": 175,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "SystecTest.test_bus_custom_bitrate": {
            "name": "test_bus_custom_bitrate",
            "location": 193,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SystecTest.test_receive_own_messages": {
            "name": "test_receive_own_messages",
            "location": 198,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "SystecTest.test_bus_passive_state": {
            "name": "test_bus_passive_state",
            "location": 217,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "SystecTest.test_rx_buffer_entries": {
            "name": "test_rx_buffer_entries",
            "location": 236,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "SystecTest.test_tx_buffer_entries": {
            "name": "test_tx_buffer_entries",
            "location": 255,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "SystecTest.test_flush_tx_buffer": {
            "name": "test_flush_tx_buffer",
            "location": 273,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "python-can-develop/test/test_util.py": {
        "RenameKwargsTest._test": {
            "name": "_test",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "kwargs": [],
                "aliases": [
                    "bool",
                    "tuple[int]"
                ]
            }
        },
        "RenameKwargsTest.test_rename": {
            "name": "test_rename",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RenameKwargsTest.test_obsolete": {
            "name": "test_obsolete",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RenameKwargsTest.test_rename_and_obsolete": {
            "name": "test_rename_and_obsolete",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RenameKwargsTest.test_with_new_and_alias_present": {
            "name": "test_with_new_and_alias_present",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBusConfig.test_timing_can_use_int": {
            "name": "test_timing_can_use_int",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestChannel2Int.test_channel2int": {
            "name": "test_channel2int",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "python-can-develop/test/test_vector.py": {
        "xlGetApplConfig": {
            "name": "xlGetApplConfig",
            "location": 355,
            "return": [
                "int"
            ],
            "arguments": {
                "app_name_p": [
                    "int",
                    "None",
                    "typing.Iterable[str]",
                    "str"
                ],
                "app_channel": [
                    "int",
                    "None",
                    "typing.Iterable[str]",
                    "str"
                ],
                "hw_type": [
                    "str",
                    "list[str]",
                    "None"
                ],
                "hw_index": [
                    "int",
                    "None",
                    "typing.Iterable[str]",
                    "str"
                ],
                "hw_channel": [
                    "str",
                    "bool",
                    "typing.Callable[, ]"
                ],
                "bus_type": [
                    "int",
                    "None",
                    "typing.Iterable[str]",
                    "str"
                ]
            }
        },
        "xlGetChannelIndex": {
            "name": "xlGetChannelIndex",
            "location": 368,
            "return": [
                "int"
            ],
            "arguments": {
                "hw_type": [
                    "int"
                ],
                "hw_index": [
                    "int"
                ],
                "hw_channel": [
                    "int"
                ]
            }
        },
        "xlOpenPort": {
            "name": "xlOpenPort",
            "location": 374,
            "return": [
                "int"
            ],
            "arguments": {
                "port_handle_p": [
                    "int",
                    "str"
                ],
                "app_name_p": [
                    "bool"
                ],
                "access_mask": [
                    "bool"
                ],
                "permission_mask_p": [
                    "bool"
                ],
                "rx_queue_size": [
                    "bool"
                ],
                "xl_interface_version": [
                    "bool"
                ],
                "bus_type": [
                    "bool"
                ]
            }
        },
        "xlGetSyncTime": {
            "name": "xlGetSyncTime",
            "location": 387,
            "return": [
                "int"
            ],
            "arguments": {
                "port_handle": [
                    "int",
                    "float",
                    "list[str]",
                    "None"
                ],
                "time_p": [
                    "int",
                    "str",
                    "tuple[typing.Union[int,int]]",
                    "None"
                ]
            }
        },
        "xlSetNotification": {
            "name": "xlSetNotification",
            "location": 394,
            "return": [
                "int"
            ],
            "arguments": {
                "port_handle": [
                    "str",
                    "dict[, ]",
                    "bool"
                ],
                "event_handle": [
                    "str",
                    "dict[, ]",
                    "dict[int, dict[int, typing.Any]]",
                    "bool"
                ],
                "queue_level": [
                    "str",
                    "dict[, ]",
                    "bool"
                ]
            }
        },
        "xlReceive": {
            "name": "xlReceive",
            "location": 403,
            "return": [
                "int"
            ],
            "arguments": {
                "port_handle": [
                    "int"
                ],
                "event_count_p": [
                    "int"
                ],
                "event": [
                    "dict[, ]",
                    "str",
                    "list[int]",
                    "dict[str, str]",
                    "list[str]"
                ]
            }
        },
        "xlCanReceive": {
            "name": "xlCanReceive",
            "location": 419,
            "return": [
                "int"
            ],
            "arguments": {
                "port_handle": [
                    "str",
                    "dict[, ]"
                ],
                "event": [
                    "str",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "xlReceive_chipstate": {
            "name": "xlReceive_chipstate",
            "location": 433,
            "return": [
                "int"
            ],
            "arguments": {
                "port_handle": [
                    "int"
                ],
                "event_count_p": [
                    "int"
                ],
                "event": [
                    "bool",
                    "dict[str, typing.Any]",
                    "str",
                    "None"
                ]
            }
        },
        "xlCanReceive_chipstate": {
            "name": "xlCanReceive_chipstate",
            "location": 447,
            "return": [
                "int"
            ],
            "arguments": {
                "port_handle": [
                    "str",
                    "dict[, ]"
                ],
                "event": [
                    "str"
                ]
            }
        },
        "TestVectorBus.setUp": {
            "name": "setUp",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestVectorBus.tearDown": {
            "name": "tearDown",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestVectorBus.test_bus_creation": {
            "name": "test_bus_creation",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestVectorBus.test_bus_creation_bitrate": {
            "name": "test_bus_creation_bitrate",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestVectorBus.test_bus_creation_fd": {
            "name": "test_bus_creation_fd",
            "location": 116,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestVectorBus.test_bus_creation_fd_bitrate_timings": {
            "name": "test_bus_creation_fd_bitrate_timings",
            "location": 133,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestVectorBus.test_receive": {
            "name": "test_receive",
            "location": 176,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestVectorBus.test_receive_fd": {
            "name": "test_receive_fd",
            "location": 183,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestVectorBus.test_receive_non_msg_event": {
            "name": "test_receive_non_msg_event",
            "location": 192,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestVectorBus.test_receive_fd_non_msg_event": {
            "name": "test_receive_fd_non_msg_event",
            "location": 203,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestVectorBus.test_send": {
            "name": "test_send",
            "location": 214,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestVectorBus.test_send_fd": {
            "name": "test_send_fd",
            "location": 223,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestVectorBus.test_flush_tx_buffer": {
            "name": "test_flush_tx_buffer",
            "location": 232,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestVectorBus.test_shutdown": {
            "name": "test_shutdown",
            "location": 237,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestVectorBus.test_reset": {
            "name": "test_reset",
            "location": 244,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestVectorBus.test_popup_hw_cfg": {
            "name": "test_popup_hw_cfg",
            "location": 250,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestVectorBus.test_get_application_config": {
            "name": "test_get_application_config",
            "location": 258,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestVectorBus.test_set_application_config": {
            "name": "test_set_application_config",
            "location": 263,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestVectorBus.test_set_timer_rate": {
            "name": "test_set_timer_rate",
            "location": 274,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestVectorBus.test_called_without_testing_argument": {
            "name": "test_called_without_testing_argument",
            "location": 282,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestVectorBus.test_vector_error_pickle": {
            "name": "test_vector_error_pickle",
            "location": 289,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestVectorBus.test_vector_subtype_error_from_generic": {
            "name": "test_vector_subtype_error_from_generic",
            "location": 313,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestVectorBus.test_winapi_availability": {
            "name": "test_winapi_availability",
            "location": 333,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestVectorChannelConfig.test_attributes": {
            "name": "test_attributes",
            "location": 339,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "python-can-develop/test/test_viewer.py": {
        "StdscrDummy.__init__": {
            "name": "__init__",
            "location": 54,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "StdscrDummy.clear": {
            "name": "clear",
            "location": 59,
            "return": [],
            "arguments": {}
        },
        "StdscrDummy.erase": {
            "name": "erase",
            "location": 63,
            "return": [],
            "arguments": {}
        },
        "StdscrDummy.getmaxyx": {
            "name": "getmaxyx",
            "location": 67,
            "return": [],
            "arguments": {}
        },
        "StdscrDummy.addstr": {
            "name": "addstr",
            "location": 72,
            "return": [],
            "arguments": {
                "self": [],
                "row": [],
                "col": [],
                "txt": []
            }
        },
        "StdscrDummy.nodelay": {
            "name": "nodelay",
            "location": 86,
            "return": [],
            "arguments": {
                "_bool": []
            }
        },
        "StdscrDummy.getch": {
            "name": "getch",
            "location": 89,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CanViewerTest.setUpClass": {
            "name": "setUpClass",
            "location": 123,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "CanViewerTest.setUp": {
            "name": "setUp",
            "location": 127,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CanViewerTest.tearDown": {
            "name": "tearDown",
            "location": 161,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CanViewerTest.test_send": {
            "name": "test_send",
            "location": 166,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CanViewerTest.test_receive": {
            "name": "test_receive",
            "location": 215,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CanViewerTest.pack_data": {
            "name": "pack_data",
            "location": 268,
            "return": [],
            "arguments": {
                "cmd": [],
                "cmd_to_struct": []
            }
        },
        "CanViewerTest.test_pack_unpack": {
            "name": "test_pack_unpack",
            "location": 307,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CanViewerTest.test_parse_args": {
            "name": "test_parse_args",
            "location": 400,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "python-can-develop/test/zero_dlc_test.py": {
        "ZeroDLCTest.test_recv_non_zero_dlc": {
            "name": "test_recv_non_zero_dlc",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ZeroDLCTest.test_recv_none": {
            "name": "test_recv_none",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ZeroDLCTest.test_recv_zero_dlc": {
            "name": "test_recv_zero_dlc",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "python-can-develop/test/__init__.py": {},
    "python-can-develop/test/data/example_data.py": {
        "sort_messages": {
            "name": "sort_messages",
            "location": 17,
            "return": [
                "list[]"
            ],
            "arguments": {
                "messages": []
            }
        },
        "generate_message": {
            "name": "generate_message",
            "location": 177,
            "return": [
                "Message"
            ],
            "arguments": {
                "arbitration_id": []
            }
        }
    },
    "python-can-develop/test/data/__init__.py": {}
}
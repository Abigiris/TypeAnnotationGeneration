{
    "python-dblogger-master/setup.py": {},
    "python-dblogger-master/bin/dblogger_create_schema.py": {},
    "python-dblogger-master/dblogger/async_handler.py": {
        "DBLogHandler.__init__": {
            "name": "__init__",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "None",
                    "bool",
                    "list[str]"
                ],
                "db_name": [
                    "None",
                    "str",
                    "int",
                    "float"
                ],
                "db": [
                    "None",
                    "int",
                    "str",
                    "float"
                ],
                "db_user": [
                    "None",
                    "str",
                    "list[T]"
                ],
                "db_password": [
                    "None",
                    "str",
                    "list[typing.Any]",
                    "float",
                    "list[T]",
                    "list[str]"
                ],
                "db_host": [
                    "typing.Text"
                ],
                "db_port": [
                    "int"
                ],
                "level": []
            }
        },
        "DBLogHandler.addAsyncFilter": {
            "name": "addAsyncFilter",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "filter": [
                    "int",
                    "tuple[typing.Type]",
                    "typing.Sequence[str]",
                    "str"
                ]
            }
        },
        "DBLogHandler.removeAsyncFilter": {
            "name": "removeAsyncFilter",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "filter": [
                    "dict[str, dict[str, typing.Any]]",
                    "str",
                    "None"
                ]
            }
        },
        "DBLogHandler.emit": {
            "name": "emit",
            "location": 105,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "record": [
                    "int",
                    "str"
                ]
            }
        }
    },
    "python-dblogger-master/dblogger/sync_handler.py": {
        "DBLogHandler.__init__": {
            "name": "__init__",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "None",
                    "bool",
                    "list[str]"
                ],
                "db_name": [
                    "None",
                    "str",
                    "int",
                    "float"
                ],
                "db": [
                    "None",
                    "int",
                    "str",
                    "typing.Callable[, ]"
                ],
                "db_user": [
                    "None",
                    "str",
                    "list[T]"
                ],
                "db_password": [
                    "None",
                    "str",
                    "list[typing.Any]",
                    "float",
                    "list[T]",
                    "list[str]"
                ],
                "db_host": [
                    "typing.Text"
                ],
                "db_port": [
                    "int"
                ],
                "level": []
            }
        },
        "DBLogHandler.emit": {
            "name": "emit",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "record": []
            }
        }
    },
    "python-dblogger-master/dblogger/taggedlogger.py": {
        "TaggedLogger.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "logger": [
                    "str",
                    "typing.Mapping",
                    "None",
                    "int"
                ]
            }
        },
        "TaggedLogger.process": {
            "name": "process",
            "location": 14,
            "return": [
                "tuple[typing.Union[str,int,None]]"
            ],
            "arguments": {
                "self": [],
                "msg": [
                    "str",
                    "int",
                    "None"
                ],
                "kwargs": []
            }
        }
    },
    "python-dblogger-master/dblogger/__init__.py": {},
    "python-dblogger-master/dblogger/async_models/entry.py": {
        "deserialize_joined": {
            "name": "deserialize_joined",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "entry": [
                    "int",
                    "None",
                    "list[]"
                ],
                "result": []
            }
        }
    },
    "python-dblogger-master/dblogger/async_models/function.py": {},
    "python-dblogger-master/dblogger/async_models/host.py": {},
    "python-dblogger-master/dblogger/async_models/logger.py": {},
    "python-dblogger-master/dblogger/async_models/model.py": {
        "AsyncModel.make_where_statement": {
            "name": "make_where_statement",
            "location": 12,
            "return": [
                "tuple[typing.Union[str,list[]]]"
            ],
            "arguments": {
                "cls": [
                    "int"
                ],
                "data": [
                    "dict[, ]",
                    "dict[str, typing.Any]"
                ],
                "prefix": [
                    "None",
                    "str",
                    "int"
                ]
            }
        }
    },
    "python-dblogger-master/dblogger/async_models/source.py": {},
    "python-dblogger-master/dblogger/async_models/tag.py": {},
    "python-dblogger-master/dblogger/async_models/__init__.py": {},
    "python-dblogger-master/dblogger/models/entry.py": {
        "get_sql_for_entry_with_date": {
            "name": "get_sql_for_entry_with_date",
            "location": 52,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "where_clause": [],
                "limit": [
                    "None",
                    "list[str]",
                    "int",
                    "dict[, ]",
                    "str"
                ]
            }
        },
        "get_sql_for_entry_after_id": {
            "name": "get_sql_for_entry_after_id",
            "location": 80,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "parameter": [
                    "str",
                    "list[str]",
                    "typing.Mapping",
                    "bool",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "BaseLogEntry.deserialize": {
            "name": "deserialize",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "rowdata": [
                    "dict[, ]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "BaseLogEntry.serialize_data": {
            "name": "serialize_data",
            "location": 32,
            "return": [
                "dict[typing.Text, ]"
            ],
            "arguments": {
                "cls": [
                    "dict[, ]",
                    "typing.Type",
                    "str",
                    "dict[str, typing.Any]",
                    "bytes",
                    "None",
                    "list[dict[, ]]",
                    "list[str]"
                ],
                "data": []
            }
        }
    },
    "python-dblogger-master/dblogger/models/function.py": {
        "BaseLogFunction.deserialize": {
            "name": "deserialize",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "rowdata": [
                    "dict[, ]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "BaseLogFunction.serialize_data": {
            "name": "serialize_data",
            "location": 21,
            "return": [
                "dict[typing.Text, ]"
            ],
            "arguments": {
                "cls": [
                    "dict[, ]",
                    "typing.Type",
                    "str",
                    "dict[str, typing.Any]",
                    "bytes",
                    "None",
                    "list[dict[, ]]",
                    "list[str]"
                ],
                "data": []
            }
        },
        "BaseLogFunction.source": {
            "name": "source",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "python-dblogger-master/dblogger/models/host.py": {
        "BaseLogHost.deserialize": {
            "name": "deserialize",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "rowdata": [
                    "dict[, ]"
                ]
            }
        },
        "BaseLogHost.serialize_data": {
            "name": "serialize_data",
            "location": 17,
            "return": [
                "dict[typing.Text, ]"
            ],
            "arguments": {
                "cls": [
                    "dict[, ]",
                    "typing.Type",
                    "str",
                    "dict[str, typing.Any]",
                    "bytes",
                    "None",
                    "list[dict[, ]]",
                    "list[str]"
                ],
                "data": []
            }
        }
    },
    "python-dblogger-master/dblogger/models/logger.py": {
        "BaseLogLogger.deserialize": {
            "name": "deserialize",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "rowdata": [
                    "dict[, ]"
                ]
            }
        },
        "BaseLogLogger.serialize_data": {
            "name": "serialize_data",
            "location": 17,
            "return": [
                "dict[typing.Text, ]"
            ],
            "arguments": {
                "cls": [
                    "dict[, ]",
                    "typing.Type",
                    "str",
                    "dict[str, typing.Any]",
                    "bytes",
                    "None",
                    "list[dict[, ]]",
                    "list[str]"
                ],
                "data": []
            }
        }
    },
    "python-dblogger-master/dblogger/models/model.py": {
        "BaseModel.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "rowdata": [
                    "dict[str, typing.Any]",
                    "dict[, ]",
                    "None"
                ]
            }
        },
        "BaseModel.deserialize": {
            "name": "deserialize",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "rowdata": [
                    "int",
                    "str",
                    "typing.Iterable[C]"
                ]
            }
        },
        "BaseModel.serialize": {
            "name": "serialize",
            "location": 27,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BaseModel.serialize_data": {
            "name": "serialize_data",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "dict[, ]",
                    "typing.Type",
                    "str",
                    "dict[str, typing.Any]",
                    "bytes",
                    "None",
                    "list[dict[, ]]",
                    "list[str]"
                ],
                "data": [
                    "dict[, ]",
                    "typing.Type",
                    "str",
                    "dict[str, typing.Any]",
                    "bytes",
                    "None",
                    "list[dict[, ]]",
                    "list[str]"
                ]
            }
        }
    },
    "python-dblogger-master/dblogger/models/source.py": {
        "BaseLogSource.deserialize": {
            "name": "deserialize",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "rowdata": []
            }
        },
        "BaseLogSource.serialize_data": {
            "name": "serialize_data",
            "location": 17,
            "return": [
                "dict[typing.Text, ]"
            ],
            "arguments": {
                "cls": [
                    "dict[, ]",
                    "typing.Type",
                    "str",
                    "dict[str, typing.Any]",
                    "bytes",
                    "None",
                    "list[dict[, ]]",
                    "list[str]"
                ],
                "data": []
            }
        }
    },
    "python-dblogger-master/dblogger/models/tag.py": {
        "BaseLogTag.deserialize": {
            "name": "deserialize",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "rowdata": [
                    "dict[, ]"
                ]
            }
        },
        "BaseLogTag.serialize_data": {
            "name": "serialize_data",
            "location": 17,
            "return": [
                "dict[typing.Text, ]"
            ],
            "arguments": {
                "cls": [
                    "dict[, ]",
                    "typing.Type",
                    "str",
                    "dict[str, typing.Any]",
                    "bytes",
                    "None",
                    "list[dict[, ]]",
                    "list[str]"
                ],
                "data": []
            }
        }
    },
    "python-dblogger-master/dblogger/models/__init__.py": {},
    "python-dblogger-master/dblogger/sync_models/entry.py": {
        "deserialize_joined": {
            "name": "deserialize_joined",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "entry": [
                    "int",
                    "None",
                    "list[]"
                ],
                "result": []
            }
        },
        "LogEntry.load_all_with_date": {
            "name": "load_all_with_date",
            "location": 48,
            "return": [
                "list[]"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "None",
                    "dict[str, typing.Any]",
                    "dict[str, str]"
                ],
                "db": [],
                "from_date": [
                    "None"
                ],
                "to_date": [
                    "None"
                ],
                "limit": [
                    "None",
                    "int",
                    "str"
                ]
            }
        },
        "LogEntry.load_all_after_id": {
            "name": "load_all_after_id",
            "location": 78,
            "return": [
                "list[]"
            ],
            "arguments": {
                "cls": [
                    "dict[, ]",
                    "int"
                ],
                "db": [],
                "lowest_id": [
                    "int",
                    "None",
                    "set[int]",
                    "bytes"
                ]
            }
        },
        "LogEntry.add_tag": {
            "name": "add_tag",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "db": [],
                "tag": [
                    "list[str]",
                    "None"
                ]
            }
        },
        "LogEntry.add_tags": {
            "name": "add_tags",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "db": [],
                "tags": []
            }
        },
        "LogEntry.remove_tag": {
            "name": "remove_tag",
            "location": 116,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "db": [],
                "tag": [
                    "list[typing.Any]",
                    "None",
                    "list[str]",
                    "dict[str, typing.Any]",
                    "list[dict[str, typing.Any]]"
                ]
            }
        },
        "LogEntry.tags": {
            "name": "tags",
            "location": 125,
            "return": [
                "list[L]",
                "None",
                "list[]",
                "list[LogTag]"
            ],
            "arguments": {
                "self": [],
                "db": []
            }
        },
        "LogEntry.function": {
            "name": "function",
            "location": 144,
            "return": [],
            "arguments": {
                "self": [],
                "db": [
                    "list[str]",
                    "int"
                ]
            }
        },
        "LogEntry.logger": {
            "name": "logger",
            "location": 149,
            "return": [],
            "arguments": {
                "self": [],
                "db": [
                    "dict[str, typing.Any]",
                    "dict[, ]"
                ]
            }
        },
        "LogEntry.hostname": {
            "name": "hostname",
            "location": 154,
            "return": [],
            "arguments": {
                "self": [],
                "db": [
                    "dict[, ]",
                    "int",
                    "str"
                ]
            }
        }
    },
    "python-dblogger-master/dblogger/sync_models/function.py": {
        "LogFunction.source": {
            "name": "source",
            "location": 10,
            "return": [],
            "arguments": {
                "self": [],
                "db": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "python-dblogger-master/dblogger/sync_models/host.py": {},
    "python-dblogger-master/dblogger/sync_models/logger.py": {},
    "python-dblogger-master/dblogger/sync_models/model.py": {
        "SyncModel.make_where_statement": {
            "name": "make_where_statement",
            "location": 13,
            "return": [
                "tuple[typing.Union[str,list[tuple[typing.Union[str,typing.Any]]]]]"
            ],
            "arguments": {
                "cls": [
                    "int"
                ],
                "data": [
                    "dict[str, typing.Any]"
                ],
                "prefix": [
                    "None",
                    "str",
                    "typing.Callable[..., T]",
                    "list[typing.Any]"
                ]
            }
        },
        "SyncModel.load": {
            "name": "load",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "dict[str, typing.Any]",
                    "None"
                ],
                "db": []
            }
        },
        "SyncModel.load_all": {
            "name": "load_all",
            "location": 43,
            "return": [
                "list[]"
            ],
            "arguments": {
                "cls": [
                    "dict[str, str]",
                    "typing.Callable[, ]"
                ],
                "db": []
            }
        },
        "SyncModel.create": {
            "name": "create",
            "location": 51,
            "return": [],
            "arguments": {
                "cls": [
                    "str",
                    "typing.Type",
                    "dict[int, str]"
                ],
                "db": [],
                "ignore_conflicts": [
                    "bool"
                ]
            }
        },
        "SyncModel.get_or_create": {
            "name": "get_or_create",
            "location": 72,
            "return": [
                "list[str]",
                "dict[str, typing.Any]",
                "int",
                "typing.Final",
                "typing.MutableMapping",
                "list[list[int]]"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "typing.Type",
                    "bool",
                    "dict[str, str]"
                ],
                "db": [
                    "str",
                    "typing.Type",
                    "bool",
                    "dict[str, str]"
                ]
            }
        }
    },
    "python-dblogger-master/dblogger/sync_models/source.py": {},
    "python-dblogger-master/dblogger/sync_models/tag.py": {},
    "python-dblogger-master/dblogger/sync_models/__init__.py": {}
}
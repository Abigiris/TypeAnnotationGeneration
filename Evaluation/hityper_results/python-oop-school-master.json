{
    "python-oop-school-master/__init__.py": {},
    "python-oop-school-master/app/courses.py": {
        "CourseRunning.__init__": {
            "name": "__init__",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "course": [
                    "int",
                    "dict[str, int]",
                    "str"
                ],
                "year": [
                    "int",
                    "str"
                ],
                "teacher": [
                    "None",
                    "int",
                    "float"
                ]
            }
        },
        "CourseRunning.add_student": {
            "name": "add_student",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "student": [
                    "float",
                    "int"
                ]
            }
        },
        "CourseRunning.assign_teacher": {
            "name": "assign_teacher",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "teacher": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ]
            }
        },
        "CourseRunning.get_students": {
            "name": "get_students",
            "location": 42,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CourseRunning.get_code": {
            "name": "get_code",
            "location": 46,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Course.__init__": {
            "name": "__init__",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "description": [
                    "int",
                    "str",
                    "dict[, ]",
                    "float",
                    "None"
                ],
                "course_code": [
                    "int",
                    "str"
                ],
                "department": [
                    "int",
                    "str",
                    "dict[, ]",
                    "float",
                    "None"
                ]
            }
        },
        "Course.add_running": {
            "name": "add_running",
            "location": 59,
            "return": [],
            "arguments": {
                "self": [],
                "year": [
                    "str",
                    "int"
                ]
            }
        },
        "Course.get_runnings": {
            "name": "get_runnings",
            "location": 76,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Department.__init__": {
            "name": "__init__",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "dict[str, typing.Any]",
                    "list[str]"
                ],
                "department_code": [
                    "int",
                    "float",
                    "list[int]",
                    "str"
                ]
            }
        },
        "Department.add_course": {
            "name": "add_course",
            "location": 87,
            "return": [],
            "arguments": {
                "self": [],
                "description": [
                    "str",
                    "int"
                ],
                "course_code": [
                    "str",
                    "int"
                ]
            }
        },
        "Department.get_courses": {
            "name": "get_courses",
            "location": 96,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Department.add_student_to_course": {
            "name": "add_student_to_course",
            "location": 101,
            "return": [
                "None"
            ],
            "arguments": {
                "student": [
                    "bool",
                    "str"
                ],
                "running_course": []
            }
        },
        "Department.assign_teacher_to_course": {
            "name": "assign_teacher_to_course",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {
                "teacher": [
                    "int"
                ],
                "running_course": []
            }
        },
        "Department.mark_course_as_running": {
            "name": "mark_course_as_running",
            "location": 111,
            "return": [],
            "arguments": {
                "course": [],
                "year": [
                    "int"
                ]
            }
        }
    },
    "python-oop-school-master/app/entities.py": {
        "Person.__init__": {
            "name": "__init__",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "first_name": [
                    "str",
                    "None"
                ],
                "last_name": [
                    "str",
                    "None"
                ]
            }
        },
        "Person.get_names": {
            "name": "get_names",
            "location": 41,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Student.__init__": {
            "name": "__init__",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "first_name": [
                    "str",
                    "None"
                ],
                "last_name": [
                    "str",
                    "None"
                ],
                "student_id": [
                    "int",
                    "str"
                ]
            }
        },
        "Student.get_enroled_courses": {
            "name": "get_enroled_courses",
            "location": 83,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Student.enrol": {
            "name": "enrol",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "course_running": []
            }
        },
        "Student.subscribe_to_quiz": {
            "name": "subscribe_to_quiz",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "quiz": [
                    "str",
                    "int",
                    "typing.Sequence[str]"
                ]
            }
        },
        "Student._get_semester_quizzes": {
            "name": "_get_semester_quizzes",
            "location": 100,
            "return": [
                "dict[, ]",
                "dict[bytes, float]",
                "dict[str, typing.Any]",
                "typing.Pattern",
                "dict[str, str]",
                "dict[int, typing.Any]"
            ],
            "arguments": {
                "self": [],
                "semester_id": [
                    "str"
                ]
            }
        },
        "Student.answer_quiz": {
            "name": "answer_quiz",
            "location": 118,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": [],
                "quiz_id": [
                    "str",
                    "int",
                    "None"
                ],
                "answer": [
                    "int",
                    "str",
                    "set[str]"
                ]
            }
        },
        "Student.get_score_for_semester": {
            "name": "get_score_for_semester",
            "location": 133,
            "return": [
                "typing.Text",
                "float"
            ],
            "arguments": {
                "self": [],
                "semester_id": [
                    "None",
                    "int",
                    "str"
                ]
            }
        },
        "Teacher.__init__": {
            "name": "__init__",
            "location": 174,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "first_name": [
                    "str",
                    "None"
                ],
                "last_name": [
                    "str",
                    "None"
                ],
                "teacher_id": [
                    "int",
                    "str"
                ]
            }
        },
        "Teacher.add_course_to_teach": {
            "name": "add_course_to_teach",
            "location": 189,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "course_code": [
                    "str",
                    "dict[, ]",
                    "dict[str, typing.Any]",
                    "int",
                    "None"
                ]
            }
        },
        "Teacher.get_teaching_courses": {
            "name": "get_teaching_courses",
            "location": 193,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Teacher.create_quiz": {
            "name": "create_quiz",
            "location": 197,
            "return": [
                "Quiz"
            ],
            "arguments": {
                "self": [],
                "qid": [
                    "str",
                    "typing.Iterable[typing.Any]"
                ],
                "name": [
                    "str",
                    "typing.Iterable[typing.Any]"
                ]
            }
        },
        "Teacher.assign_quiz_to_student": {
            "name": "assign_quiz_to_student",
            "location": 201,
            "return": [
                "None"
            ],
            "arguments": {
                "student": [],
                "quiz": [
                    "float",
                    "int",
                    "None",
                    "str"
                ]
            }
        },
        "Teacher.calc_student_grade_for_semester": {
            "name": "calc_student_grade_for_semester",
            "location": 205,
            "return": [],
            "arguments": {
                "student": [],
                "semester_id": [
                    "None",
                    "int",
                    "str"
                ]
            }
        }
    },
    "python-oop-school-master/app/exceptions.py": {},
    "python-oop-school-master/app/quizzes.py": {
        "Question.__init__": {
            "name": "__init__",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "bool",
                    "str",
                    "typing.Sequence[dict[str, str]]",
                    "float"
                ]
            }
        },
        "Question.correct_answer": {
            "name": "correct_answer",
            "location": 51,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Question.add_possible_answer": {
            "name": "add_possible_answer",
            "location": 61,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "answer": [
                    "str",
                    "bool",
                    "set[str]",
                    "dict[str, typing.Any]"
                ],
                "position": [
                    "bool"
                ],
                "is_correct": [
                    "bool",
                    "str"
                ]
            }
        },
        "Question.is_answer_correct": {
            "name": "is_answer_correct",
            "location": 75,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "answer": [
                    "str",
                    "list[T]",
                    "list[int]"
                ]
            }
        },
        "Quiz.__init__": {
            "name": "__init__",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "quiz_id": [
                    "str",
                    "int",
                    "None"
                ],
                "teacher": [
                    "str",
                    "int",
                    "None"
                ],
                "name": [
                    "str",
                    "None"
                ]
            }
        },
        "Quiz.is_finished": {
            "name": "is_finished",
            "location": 118,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Quiz.add_question": {
            "name": "add_question",
            "location": 122,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "q": [
                    "float",
                    "int"
                ]
            }
        },
        "Quiz._is_quiz_finished": {
            "name": "_is_quiz_finished",
            "location": 127,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Quiz.answer_next_question": {
            "name": "answer_next_question",
            "location": 133,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "answer": [
                    "int",
                    "str",
                    "dict[, ]",
                    "None",
                    "typing.MutableMapping"
                ]
            }
        },
        "Quiz.get_score": {
            "name": "get_score",
            "location": 148,
            "return": [
                "int",
                "float"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "python-oop-school-master/app/utils.py": {
        "get_semester_id": {
            "name": "get_semester_id",
            "location": 3,
            "return": [
                "str"
            ],
            "arguments": {}
        }
    },
    "python-oop-school-master/app/utils_test.py": {
        "UtilsTest.test_get_semester_id": {
            "name": "test_get_semester_id",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "python-oop-school-master/app/__init__.py": {},
    "python-oop-school-master/tests/courses_test.py": {
        "DepartmentTests.setUp": {
            "name": "setUp",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DepartmentTests.test_department_has_attrs": {
            "name": "test_department_has_attrs",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DepartmentTests.test_department_params_on_creation": {
            "name": "test_department_params_on_creation",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DepartmentTests.test_department_get_courses": {
            "name": "test_department_get_courses",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DepartmentTests.test_department_create_course": {
            "name": "test_department_create_course",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DepartmentTests.test_department_can_mark_course_as_running": {
            "name": "test_department_can_mark_course_as_running",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DepartmentTests.test_department_can_add_teacher_to_running_course": {
            "name": "test_department_can_add_teacher_to_running_course",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DepartmentTests.test_department_can_add_student_to_running_course": {
            "name": "test_department_can_add_student_to_running_course",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CourseRunningTests.setUp": {
            "name": "setUp",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CourseRunningTests.test_running_course_has_attrs": {
            "name": "test_running_course_has_attrs",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CourseRunningTests.test_running_course_params_on_creation": {
            "name": "test_running_course_params_on_creation",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CourseRunningTests.test_running_course_year_is_number_in_string": {
            "name": "test_running_course_year_is_number_in_string",
            "location": 102,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CourseRunningTests.test_running_course_can_add_teacher": {
            "name": "test_running_course_can_add_teacher",
            "location": 112,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CourseTests.setUp": {
            "name": "setUp",
            "location": 120,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CourseTests.test_course_has_attrs": {
            "name": "test_course_has_attrs",
            "location": 123,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CourseTests.test_course_params_on_creation": {
            "name": "test_course_params_on_creation",
            "location": 130,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CourseTests.test_course_can_add_course_running": {
            "name": "test_course_can_add_course_running",
            "location": 140,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "python-oop-school-master/tests/entities_test.py": {
        "StudentTests.setUpClass": {
            "name": "setUpClass",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": []
            }
        },
        "StudentTests.test_student_has_attrs": {
            "name": "test_student_has_attrs",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "StudentTests.test_student_basic_info": {
            "name": "test_student_basic_info",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "StudentTests.test_student_has_courses": {
            "name": "test_student_has_courses",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "StudentTests.test_student_can_enrol_to_course_running": {
            "name": "test_student_can_enrol_to_course_running",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "StudentTests.test_student_can_subscribe_to_quiz": {
            "name": "test_student_can_subscribe_to_quiz",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "StudentTests.test_student_can_answer_quiz": {
            "name": "test_student_can_answer_quiz",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "StudentTests.test_student_can_get_score_for_semester": {
            "name": "test_student_can_get_score_for_semester",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TeacherTests.setUpClass": {
            "name": "setUpClass",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "bytes",
                    "typing.Type",
                    "float",
                    "int",
                    "typing.Callable[, ]"
                ]
            }
        },
        "TeacherTests.test_department_has_attrs": {
            "name": "test_department_has_attrs",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TeacherTests.test_teacher_basic_info": {
            "name": "test_teacher_basic_info",
            "location": 101,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TeacherTests.test_teacher_has_courses": {
            "name": "test_teacher_has_courses",
            "location": 109,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TeacherTests.test_teacher_teaches_running_course": {
            "name": "test_teacher_teaches_running_course",
            "location": 115,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TeacherTests.test_teacher_can_create_quiz": {
            "name": "test_teacher_can_create_quiz",
            "location": 122,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TeacherTests.test_teacher_can_assign_quiz": {
            "name": "test_teacher_can_assign_quiz",
            "location": 126,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TeacherTests.test_teacher_can_calculate_students_grade_for_semester": {
            "name": "test_teacher_can_calculate_students_grade_for_semester",
            "location": 131,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "python-oop-school-master/tests/factories.py": {},
    "python-oop-school-master/tests/quizzes_test.py": {
        "QuizTests.setUp": {
            "name": "setUp",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "QuizTests.test_quiz_has_attrs": {
            "name": "test_quiz_has_attrs",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "QuizTests.test_quiz_params_on_creation": {
            "name": "test_quiz_params_on_creation",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "QuizTests.test_quiz_can_add_question": {
            "name": "test_quiz_can_add_question",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "QuizTests.test_quiz_can_answer_next_question": {
            "name": "test_quiz_can_answer_next_question",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "QuizTests.test_quiz_is_marked_as_finished_when_last_question_i1s_answered": {
            "name": "test_quiz_is_marked_as_finished_when_last_question_i1s_answered",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "QuizTests.test_quiz_cannot_be_answered_if_finished_or_empty": {
            "name": "test_quiz_cannot_be_answered_if_finished_or_empty",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "QuizTests.test_quiz_get_score": {
            "name": "test_quiz_get_score",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "QuestionTests.setUp": {
            "name": "setUp",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "QuestionTests.test_question_has_attrs": {
            "name": "test_question_has_attrs",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "QuestionTests.test_question_params_on_creation": {
            "name": "test_question_params_on_creation",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "QuestionTests.test_question_can_add_a_possible_answer": {
            "name": "test_question_can_add_a_possible_answer",
            "location": 102,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "python-oop-school-master/tests/utils.py": {
        "BaseTestCase.assertHasAttr": {
            "name": "assertHasAttr",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "str",
                    "typing.Callable[, ]",
                    "typing.Type",
                    "bytes",
                    "typing.Match"
                ],
                "attrname": [
                    "str"
                ],
                "message": [
                    "None",
                    "float",
                    "bool",
                    "typing.Sequence[typing.Any]"
                ]
            }
        }
    },
    "python-oop-school-master/tests/__init__.py": {}
}
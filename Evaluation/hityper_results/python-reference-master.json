{
    "python-reference-master/reference_implementations/setup.py": {
        "OptionlessCommand.initialize_options": {
            "name": "initialize_options",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "OptionlessCommand.finalize_options": {
            "name": "finalize_options",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCommand.run": {
            "name": "run",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CoverageCommand.run": {
            "name": "run",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CoverageCommand._call_or_exit": {
            "name": "_call_or_exit",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "args": []
            }
        },
        "TypecheckCommand.run": {
            "name": "run",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LintCommand.run": {
            "name": "run",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "python-reference-master/reference_implementations/benchmark/make_graphs.py": {
        "main": {
            "name": "main",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "count_columns": {
            "name": "count_columns",
            "location": 40,
            "return": [
                "int"
            ],
            "arguments": {
                "data": []
            }
        },
        "flatten": {
            "name": "flatten",
            "location": 50,
            "return": [
                "bool"
            ],
            "arguments": {
                "lst": [
                    "str"
                ]
            }
        },
        "get_keys": {
            "name": "get_keys",
            "location": 54,
            "return": [
                "tuple[tuple[list[str]]]"
            ],
            "arguments": {
                "data": [
                    "dict[, ]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "first_value": {
            "name": "first_value",
            "location": 67,
            "return": [],
            "arguments": {
                "d": []
            }
        },
        "extract_columns": {
            "name": "extract_columns",
            "location": 71,
            "return": [
                "OrderedDict"
            ],
            "arguments": {
                "args": [],
                "data": []
            }
        },
        "merge_column": {
            "name": "merge_column",
            "location": 89,
            "return": [],
            "arguments": {
                "args": [],
                "iters": [
                    "tuple[]",
                    "list[str]"
                ]
            }
        },
        "median": {
            "name": "median",
            "location": 93,
            "return": [],
            "arguments": {
                "numbers": [
                    "list[]",
                    "list[int]",
                    "list[str]"
                ]
            }
        },
        "mean": {
            "name": "mean",
            "location": 98,
            "return": [
                "float"
            ],
            "arguments": {
                "numbers": []
            }
        },
        "extract_column": {
            "name": "extract_column",
            "location": 102,
            "return": [],
            "arguments": {
                "args": [],
                "iteration": [
                    "str",
                    "list[]",
                    "bool",
                    "list[str]"
                ]
            }
        },
        "get_data": {
            "name": "get_data",
            "location": 115,
            "return": [
                "OrderedDict"
            ],
            "arguments": {
                "args": []
            }
        },
        "get_run_results": {
            "name": "get_run_results",
            "location": 130,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "args": []
            }
        },
        "is_dense": {
            "name": "is_dense",
            "location": 135,
            "return": [
                "bool"
            ],
            "arguments": {
                "data": [
                    "bytes",
                    "dict[str, typing.Any]",
                    "dict[str, str]",
                    "dict[, ]",
                    "typing.Callable[, ]",
                    "typing.Type"
                ]
            }
        },
        "get_dicts_at_level": {
            "name": "get_dicts_at_level",
            "location": 153,
            "return": [
                "typing.Generator[dict[, ]]",
                "typing.Generator[]"
            ],
            "arguments": {
                "parent": [],
                "level": [
                    "bool"
                ]
            }
        },
        "get_args": {
            "name": "get_args",
            "location": 164,
            "return": [],
            "arguments": {}
        }
    },
    "python-reference-master/reference_implementations/benchmark/parse_cprofile.py": {
        "parse": {
            "name": "parse",
            "location": 12,
            "return": [
                "RunResult"
            ],
            "arguments": {
                "path": [
                    "str"
                ]
            }
        },
        "_read_until_functions": {
            "name": "_read_until_functions",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "lines": [
                    "str"
                ]
            }
        },
        "_read_functions": {
            "name": "_read_functions",
            "location": 33,
            "return": [
                "None",
                "typing.Generator[FunctionStat]"
            ],
            "arguments": {
                "lines": [
                    "str"
                ]
            }
        },
        "_read_postamble": {
            "name": "_read_postamble",
            "location": 48,
            "return": [
                "tuple[list[]]"
            ],
            "arguments": {
                "lines": [
                    "list[typing.AnyStr]",
                    "str",
                    "list[str]"
                ]
            }
        }
    },
    "python-reference-master/reference_implementations/benchmark/runner.py": {
        "countsketch": {
            "name": "countsketch",
            "location": 25,
            "return": [],
            "arguments": {
                "rows": [],
                "cols": []
            }
        },
        "bptree": {
            "name": "bptree",
            "location": 29,
            "return": [],
            "arguments": {
                "rows": [],
                "cols": []
            }
        },
        "main": {
            "name": "main",
            "location": 41,
            "return": [],
            "arguments": {}
        },
        "pool_run": {
            "name": "pool_run",
            "location": 54,
            "return": [],
            "arguments": {
                "args": []
            }
        },
        "run": {
            "name": "run",
            "location": 61,
            "return": [],
            "arguments": {
                "dest_dir": [],
                "algorithm": [],
                "distribution": [],
                "size": [],
                "rows": [],
                "cols": [],
                "iteration": []
            }
        },
        "compute_correct": {
            "name": "compute_correct",
            "location": 89,
            "return": [],
            "arguments": {
                "ground_truth": [],
                "reported": []
            }
        },
        "compute_error": {
            "name": "compute_error",
            "location": 94,
            "return": [],
            "arguments": {
                "ground_truth": [],
                "reported": []
            }
        },
        "get_args": {
            "name": "get_args",
            "location": 104,
            "return": [],
            "arguments": {}
        },
        "Runner.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [],
            "arguments": {
                "self": [],
                "algorithm": [],
                "distribution": []
            }
        },
        "Runner.run": {
            "name": "run",
            "location": 20,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "python-reference-master/reference_implementations/benchmark/__init__.py": {},
    "python-reference-master/reference_implementations/benchmark/distributions/zipf.py": {
        "zipf": {
            "name": "zipf",
            "location": 4,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "seed": [
                    "list[]",
                    "int",
                    "str",
                    "None",
                    "dict[, ]"
                ],
                "size": [
                    "int",
                    "typing.Iterable[]",
                    "str"
                ]
            }
        }
    },
    "python-reference-master/reference_implementations/benchmark/distributions/__init__.py": {},
    "python-reference-master/reference_implementations/bptree/bptree.py": {
        "_generate_index_hash": {
            "name": "_generate_index_hash",
            "location": 70,
            "return": [],
            "arguments": {
                "x": [
                    "int",
                    "float",
                    "str"
                ]
            }
        },
        "BpTree.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "num_rows": [
                    "int"
                ],
                "num_buckets": [
                    "int"
                ],
                "num_bits": [
                    "int"
                ]
            }
        },
        "BpTree.add_items": {
            "name": "add_items",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "items": [
                    "str"
                ]
            }
        },
        "BpTree.add_item": {
            "name": "add_item",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "typing.Callable[, ]",
                    "str",
                    "tuple[]"
                ]
            }
        },
        "BpTree.most_common": {
            "name": "most_common",
            "location": 36,
            "return": [],
            "arguments": {
                "self": [],
                "n": [
                    "int"
                ]
            }
        },
        "BpTree._get_heavy_hitters": {
            "name": "_get_heavy_hitters",
            "location": 49,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Row.__init__": {
            "name": "__init__",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "num_buckets": [
                    "int",
                    "list[]"
                ],
                "num_bits": [
                    "int",
                    "str"
                ]
            }
        },
        "Row.add_item": {
            "name": "add_item",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "str",
                    "bool"
                ]
            }
        },
        "Row.get_heavy_hitters": {
            "name": "get_heavy_hitters",
            "location": 63,
            "return": [
                "typing.Generator[typing.Union[str,float]]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "python-reference-master/reference_implementations/bptree/hh1.py": {
        "int_to_bitarray": {
            "name": "int_to_bitarray",
            "location": 55,
            "return": [
                "list[]",
                "int",
                "list[int]",
                "float"
            ],
            "arguments": {
                "x": [
                    "typing.Iterable[typing.Iterable[float]]"
                ]
            }
        },
        "_generate_sign_hash": {
            "name": "_generate_sign_hash",
            "location": 61,
            "return": [],
            "arguments": {}
        },
        "HH1.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "stddev_estimate": [],
                "n": [
                    "int",
                    "tuple[typing.Union[int,int]]",
                    "str",
                    "list[]"
                ]
            }
        },
        "HH1.add_item": {
            "name": "add_item",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "str",
                    "int",
                    "bytes"
                ]
            }
        },
        "HH1.get_heavy_hitter": {
            "name": "get_heavy_hitter",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HH1.is_done": {
            "name": "is_done",
            "location": 51,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "python-reference-master/reference_implementations/bptree/hh2.py": {
        "HH2.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "n": [
                    "int"
                ]
            }
        },
        "HH2.add_item": {
            "name": "add_item",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "str",
                    "typing.Iterator",
                    "typing.Callable[, ]"
                ]
            }
        },
        "HH2.get_heavy_hitter": {
            "name": "get_heavy_hitter",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "python-reference-master/reference_implementations/bptree/second_moment_estimator.py": {
        "_generate_index_hash": {
            "name": "_generate_index_hash",
            "location": 38,
            "return": [],
            "arguments": {
                "x": [
                    "int",
                    "float",
                    "str"
                ]
            }
        },
        "_generate_sign_hash": {
            "name": "_generate_sign_hash",
            "location": 42,
            "return": [],
            "arguments": {}
        },
        "SecondMomentEstimator.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "num_estimators": [
                    "int",
                    "list[]"
                ],
                "num_buckets": [
                    "int",
                    "list[]"
                ]
            }
        },
        "SecondMomentEstimator.add_item": {
            "name": "add_item",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "int",
                    "str"
                ]
            }
        },
        "SecondMomentEstimator.estimate": {
            "name": "estimate",
            "location": 21,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SingleEstimator.__init__": {
            "name": "__init__",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "num_buckets": [
                    "int"
                ]
            }
        },
        "SingleEstimator.add_item": {
            "name": "add_item",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "int",
                    "typing.Type",
                    "str"
                ]
            }
        },
        "SingleEstimator.estimate": {
            "name": "estimate",
            "location": 34,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "python-reference-master/reference_implementations/bptree/__init__.py": {},
    "python-reference-master/reference_implementations/countsketch/counter.py": {
        "_generate_index_hash": {
            "name": "_generate_index_hash",
            "location": 22,
            "return": [],
            "arguments": {
                "x": [
                    "int",
                    "float",
                    "str"
                ]
            }
        },
        "_generate_sign_hash": {
            "name": "_generate_sign_hash",
            "location": 26,
            "return": [],
            "arguments": {}
        },
        "Counter.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "num_buckets": [
                    "int"
                ]
            }
        },
        "Counter.add_item": {
            "name": "add_item",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "int",
                    "typing.Type",
                    "str"
                ]
            }
        },
        "Counter.estimate_frequency": {
            "name": "estimate_frequency",
            "location": 18,
            "return": [],
            "arguments": {
                "self": [],
                "item": [
                    "int",
                    "str"
                ]
            }
        }
    },
    "python-reference-master/reference_implementations/countsketch/count_sketch.py": {
        "CountSketch.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "num_rows": [
                    "int"
                ],
                "num_buckets": [
                    "int"
                ],
                "num_heavy_hitters": [
                    "int",
                    "list[]"
                ]
            }
        },
        "CountSketch.add_items": {
            "name": "add_items",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "items": [
                    "str"
                ]
            }
        },
        "CountSketch.add_item": {
            "name": "add_item",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "typing.TextIO",
                    "None",
                    "int",
                    "str",
                    "list[int]"
                ]
            }
        },
        "CountSketch.most_common": {
            "name": "most_common",
            "location": 28,
            "return": [],
            "arguments": {
                "self": [],
                "n": [
                    "None",
                    "int"
                ]
            }
        }
    },
    "python-reference-master/reference_implementations/countsketch/sized_counter.py": {
        "SizedCounter.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "max_size": [
                    "int"
                ]
            }
        },
        "SizedCounter.__setitem__": {
            "name": "__setitem__",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "int",
                    "str"
                ],
                "frequency": [
                    "int",
                    "str"
                ]
            }
        }
    },
    "python-reference-master/reference_implementations/countsketch/__init__.py": {},
    "python-reference-master/reference_implementations/randomized/frequency_estimator.py": {
        "_generate_index_hash": {
            "name": "_generate_index_hash",
            "location": 37,
            "return": [],
            "arguments": {
                "x": [
                    "int",
                    "float",
                    "str"
                ]
            }
        },
        "_generate_sign_hash": {
            "name": "_generate_sign_hash",
            "location": 41,
            "return": [],
            "arguments": {}
        },
        "FrequencyEstimator.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "num_estimators": [
                    "int",
                    "list[]"
                ],
                "num_buckets": [
                    "int",
                    "list[]"
                ]
            }
        },
        "FrequencyEstimator.add_item": {
            "name": "add_item",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "int",
                    "str"
                ]
            }
        },
        "FrequencyEstimator.estimate": {
            "name": "estimate",
            "location": 19,
            "return": [],
            "arguments": {
                "self": [],
                "item": [
                    "str",
                    "int",
                    "float",
                    "dict[, ]",
                    "tuple[]"
                ]
            }
        },
        "SingleEstimator.__init__": {
            "name": "__init__",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "num_buckets": [
                    "int"
                ]
            }
        },
        "SingleEstimator.add_item": {
            "name": "add_item",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "int",
                    "typing.Type",
                    "str"
                ]
            }
        },
        "SingleEstimator.estimate": {
            "name": "estimate",
            "location": 33,
            "return": [],
            "arguments": {
                "self": [],
                "item": [
                    "int",
                    "str"
                ]
            }
        }
    },
    "python-reference-master/reference_implementations/randomized/hash_family.py": {
        "generate_hash": {
            "name": "generate_hash",
            "location": 33,
            "return": [
                "Hash"
            ],
            "arguments": {
                "k_independence": [
                    "int",
                    "float"
                ],
                "image": [
                    "int",
                    "tuple[typing.Union[int,int]]",
                    "float"
                ],
                "prime": [
                    "int"
                ]
            }
        },
        "_random_coefficient": {
            "name": "_random_coefficient",
            "location": 42,
            "return": [],
            "arguments": {
                "allow_zero": [
                    "bool"
                ]
            }
        },
        "Hash.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "coefficients": [
                    "list[str]",
                    "dict[, ]"
                ],
                "image": [],
                "prime": [
                    "int"
                ]
            }
        },
        "Hash.__call__": {
            "name": "__call__",
            "location": 21,
            "return": [],
            "arguments": {
                "self": [],
                "item": []
            }
        },
        "Hash.__eq__": {
            "name": "__eq__",
            "location": 28,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "int"
                ]
            }
        }
    },
    "python-reference-master/reference_implementations/randomized/utils.py": {
        "mean": {
            "name": "mean",
            "location": 6,
            "return": [
                "float"
            ],
            "arguments": {
                "numbers": []
            }
        },
        "median": {
            "name": "median",
            "location": 16,
            "return": [
                "int"
            ],
            "arguments": {
                "numbers": []
            }
        },
        "isorted": {
            "name": "isorted",
            "location": 34,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "sequence": [
                    "str"
                ]
            }
        },
        "assert_percentage": {
            "name": "assert_percentage",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "n": [
                    "float",
                    "bool"
                ],
                "name": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "python-reference-master/reference_implementations/randomized/__init__.py": {},
    "python-reference-master/reference_implementations/tests/__init__.py": {},
    "python-reference-master/reference_implementations/tests/benchmark/test_make_graphs.py": {
        "TestMakeGraphs.test_count_columns": {
            "name": "test_count_columns",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "python-reference-master/reference_implementations/tests/benchmark/test_runner.py": {
        "TestRunner.test_compute_correct": {
            "name": "test_compute_correct",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRunner.test_compute_error": {
            "name": "test_compute_error",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "python-reference-master/reference_implementations/tests/benchmark/__init__.py": {},
    "python-reference-master/reference_implementations/tests/bptree/test_bptree.py": {
        "TestBpTree.setUp": {
            "name": "setUp",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBpTree.test_most_common_repeated_item": {
            "name": "test_most_common_repeated_item",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBpTree.run_bptree": {
            "name": "run_bptree",
            "location": 17,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "items": [],
                "k": [
                    "int",
                    "str",
                    "list[int]"
                ],
                "error_margin": [
                    "bool",
                    "float"
                ],
                "correctness": [
                    "int",
                    "tuple[str]",
                    "str"
                ]
            }
        },
        "TestBpTree.test_random_sequence": {
            "name": "test_random_sequence",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "python-reference-master/reference_implementations/tests/bptree/test_hh1.py": {
        "stddev": {
            "name": "stddev",
            "location": 121,
            "return": [],
            "arguments": {
                "numbers": []
            }
        },
        "second_moment": {
            "name": "second_moment",
            "location": 126,
            "return": [
                "int"
            ],
            "arguments": {
                "numbers": [
                    "int",
                    "float"
                ]
            }
        },
        "TestHH1.test_single_round": {
            "name": "test_single_round",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestHH1.run_get_heavy_hitter_on_sequence": {
            "name": "run_get_heavy_hitter_on_sequence",
            "location": 98,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestHH1.test_get_heavy_hitter_on_sequence": {
            "name": "test_get_heavy_hitter_on_sequence",
            "location": 114,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "python-reference-master/reference_implementations/tests/bptree/test_hh2.py": {
        "TestHH2.test_init": {
            "name": "test_init",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestHH2.test_add_item": {
            "name": "test_add_item",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestHH2.test_get_value": {
            "name": "test_get_value",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestHH2.test_large_set": {
            "name": "test_large_set",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "python-reference-master/reference_implementations/tests/bptree/test_second_moment_estimator.py": {
        "compute_second_moment": {
            "name": "compute_second_moment",
            "location": 38,
            "return": [
                "int"
            ],
            "arguments": {
                "items": [
                    "int",
                    "str"
                ]
            }
        },
        "TestSecondMomentEstimator.run_estimator": {
            "name": "run_estimator",
            "location": 9,
            "return": [],
            "arguments": {
                "self": [],
                "items": [
                    "list[str]",
                    "dict[str, typing.Any]"
                ],
                "error_margin": [
                    "int"
                ],
                "correctness": [
                    "int"
                ]
            }
        },
        "TestSecondMomentEstimator.test_estimate": {
            "name": "test_estimate",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "python-reference-master/reference_implementations/tests/bptree/__init__.py": {},
    "python-reference-master/reference_implementations/tests/countsketch/test_count_sketch.py": {
        "TestCountSketch.setUp": {
            "name": "setUp",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCountSketch.test_most_common_with_repeated_item": {
            "name": "test_most_common_with_repeated_item",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCountSketch.test_most_common_sequence": {
            "name": "test_most_common_sequence",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCountSketch.run_cs": {
            "name": "run_cs",
            "location": 21,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "items": [],
                "k": [
                    "None",
                    "dict[, ]"
                ],
                "error_margin": [
                    "str",
                    "list[int]"
                ],
                "correctness": [
                    "int"
                ]
            }
        },
        "TestCountSketch.test_random_sequence": {
            "name": "test_random_sequence",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "python-reference-master/reference_implementations/tests/countsketch/test_sized_counter.py": {
        "TestSizedCounter.setUp": {
            "name": "setUp",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSizedCounter.test_most_common": {
            "name": "test_most_common",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSizedCounter.test_update_count": {
            "name": "test_update_count",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSizedCounter.test_max_size_invariant": {
            "name": "test_max_size_invariant",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "python-reference-master/reference_implementations/tests/countsketch/__init__.py": {},
    "python-reference-master/reference_implementations/tests/randomized/test_frequency_estimator.py": {
        "TestFrequencyEstimator.setUp": {
            "name": "setUp",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFrequencyEstimator.test_repeated_item_estimate": {
            "name": "test_repeated_item_estimate",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFrequencyEstimator.test_fixed_sequence_estimate": {
            "name": "test_fixed_sequence_estimate",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFrequencyEstimator.run_estimator": {
            "name": "run_estimator",
            "location": 27,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "items": [],
                "k": [
                    "dict[, ]",
                    "typing.Callable[, ]"
                ],
                "error_margin": [
                    "str",
                    "list[int]",
                    "int"
                ],
                "correctness": []
            }
        },
        "TestFrequencyEstimator.test_estimate": {
            "name": "test_estimate",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSingleEstimator.setUp": {
            "name": "setUp",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSingleEstimator.test_adding_item_multiple_times": {
            "name": "test_adding_item_multiple_times",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "python-reference-master/reference_implementations/tests/randomized/test_hash_family.py": {
        "TestHashFamily.setUp": {
            "name": "setUp",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestHashFamily.test_hash": {
            "name": "test_hash",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "python-reference-master/reference_implementations/tests/randomized/test_utils.py": {
        "TestUtil.test_mean": {
            "name": "test_mean",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUtil.test_exact_median": {
            "name": "test_exact_median",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUtil.test_averaged_median": {
            "name": "test_averaged_median",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUtil.test_median_empty_sequence": {
            "name": "test_median_empty_sequence",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "python-reference-master/reference_implementations/tests/randomized/__init__.py": {}
}
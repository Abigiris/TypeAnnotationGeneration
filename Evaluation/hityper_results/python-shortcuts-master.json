{
    "python-shortcuts-master/docs.py": {
        "_build_docs": {
            "name": "_build_docs",
            "location": 31,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "_build_action_doc": {
            "name": "_build_action_doc",
            "location": 49,
            "return": [],
            "arguments": {
                "action": [
                    "str",
                    "typing.Type"
                ]
            }
        },
        "_build_params_doc": {
            "name": "_build_params_doc",
            "location": 70,
            "return": [],
            "arguments": {
                "field": [
                    "str",
                    "int",
                    "typing.Type",
                    "Exception"
                ]
            }
        },
        "_get_field_properties": {
            "name": "_get_field_properties",
            "location": 85,
            "return": [
                "list[typing.Text]"
            ],
            "arguments": {
                "field": [
                    "str",
                    "typing.Container",
                    "int",
                    "None"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "python-shortcuts-master/setup.py": {
        "get_version": {
            "name": "get_version",
            "location": 7,
            "return": [],
            "arguments": {
                "package": [
                    "str"
                ]
            }
        }
    },
    "python-shortcuts-master/shortcuts.py": {},
    "python-shortcuts-master/shortcuts/cli.py": {
        "convert_shortcut": {
            "name": "convert_shortcut",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "input_filepath": [
                    "str",
                    "bytes"
                ],
                "out_filepath": [
                    "str"
                ]
            }
        },
        "_get_format": {
            "name": "_get_format",
            "location": 43,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "filepath": [
                    "str"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "python-shortcuts-master/shortcuts/dump.py": {
        "BaseDumper.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "shortcut": [
                    "int",
                    "float"
                ]
            }
        },
        "BaseDumper.dump": {
            "name": "dump",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "file_obj": []
            }
        },
        "BaseDumper.dumps": {
            "name": "dumps",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PListDumper.dump": {
            "name": "dump",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "file_obj": []
            }
        },
        "PListDumper.dumps": {
            "name": "dumps",
            "location": 44,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TomlDumper.dumps": {
            "name": "dumps",
            "location": 61,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TomlDumper._process_action": {
            "name": "_process_action",
            "location": 68,
            "return": [
                "dict[typing.Text, ]"
            ],
            "arguments": {
                "self": [],
                "action": [
                    "str"
                ]
            }
        }
    },
    "python-shortcuts-master/shortcuts/exceptions.py": {
        "UnknownActionError.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "itype": [
                    "bool",
                    "str",
                    "bytes"
                ],
                "action_dict": [
                    "None",
                    "bool",
                    "str",
                    "bytes"
                ]
            }
        }
    },
    "python-shortcuts-master/shortcuts/loader.py": {
        "BaseLoader.load": {
            "name": "load",
            "location": 22,
            "return": [],
            "arguments": {
                "cls": [],
                "file_obj": []
            }
        },
        "BaseLoader.loads": {
            "name": "loads",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [],
                "string": []
            }
        },
        "TomlLoader.loads": {
            "name": "loads",
            "location": 34,
            "return": [],
            "arguments": {
                "cls": [],
                "string": []
            }
        },
        "PListLoader.loads": {
            "name": "loads",
            "location": 59,
            "return": [],
            "arguments": {
                "cls": [],
                "string": []
            }
        },
        "PListLoader._action_from_dict": {
            "name": "_action_from_dict",
            "location": 78,
            "return": [],
            "arguments": {
                "cls": [],
                "action_dict": []
            }
        },
        "WFDeserializer.__init__": {
            "name": "__init__",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "WFDeserializer.deserialized_data": {
            "name": "deserialized_data",
            "location": 104,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "WFTokenAttachmentParameterStateField.__init__": {
            "name": "__init__",
            "location": 130,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "WFTextTokenAttachmentField.deserialized_data": {
            "name": "deserialized_data",
            "location": 136,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "WFDictionaryField.deserialized_data": {
            "name": "deserialized_data",
            "location": 153,
            "return": [
                "list[dict[typing.Text, ]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "WFVariableStringField.deserialized_data": {
            "name": "deserialized_data",
            "location": 192,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "WFVariableStringField._get_position": {
            "name": "_get_position",
            "location": 240,
            "return": [],
            "arguments": {
                "self": [],
                "range_str": []
            }
        }
    },
    "python-shortcuts-master/shortcuts/shortcut.py": {
        "Shortcut.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "typing.Text"
                ],
                "client_release": [
                    "typing.Text"
                ],
                "client_version": [
                    "typing.Text"
                ],
                "minimal_client_version": [
                    "int"
                ],
                "actions": [
                    "None",
                    "int",
                    "list[str]",
                    "str"
                ]
            }
        },
        "Shortcut.load": {
            "name": "load",
            "location": 35,
            "return": [],
            "arguments": {
                "cls": [
                    "str",
                    "typing.BinaryIO",
                    "dict[, ]"
                ],
                "file_object": [
                    "str",
                    "typing.BinaryIO",
                    "dict[, ]"
                ],
                "file_format": [
                    "typing.Text"
                ]
            }
        },
        "Shortcut.loads": {
            "name": "loads",
            "location": 46,
            "return": [],
            "arguments": {
                "cls": [
                    "str",
                    "int",
                    "None"
                ],
                "string": [
                    "str",
                    "int",
                    "None"
                ],
                "file_format": [
                    "typing.Text"
                ]
            }
        },
        "Shortcut._get_loader_class": {
            "name": "_get_loader_class",
            "location": 57,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "file_format": []
            }
        },
        "Shortcut.dump": {
            "name": "dump",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "file_object": [
                    "str",
                    "typing.BinaryIO"
                ],
                "file_format": [
                    "typing.Text"
                ]
            }
        },
        "Shortcut.dumps": {
            "name": "dumps",
            "location": 79,
            "return": [],
            "arguments": {
                "self": [],
                "file_format": [
                    "typing.Text"
                ]
            }
        },
        "Shortcut._get_dumper_class": {
            "name": "_get_dumper_class",
            "location": 88,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "file_format": []
            }
        },
        "Shortcut._get_actions": {
            "name": "_get_actions",
            "location": 100,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Shortcut._set_group_ids": {
            "name": "_set_group_ids",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Shortcut._set_menu_items": {
            "name": "_set_menu_items",
            "location": 140,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Shortcut._get_import_questions": {
            "name": "_get_import_questions",
            "location": 166,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Shortcut._get_icon": {
            "name": "_get_icon",
            "location": 170,
            "return": [
                "dict[typing.Text, int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Shortcut._get_input_content_item_classes": {
            "name": "_get_input_content_item_classes",
            "location": 178,
            "return": [
                "list[typing.Text]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "python-shortcuts-master/shortcuts/utils.py": {
        "download_shortcut": {
            "name": "download_shortcut",
            "location": 11,
            "return": [],
            "arguments": {
                "url": [
                    "str"
                ]
            }
        },
        "_get_shortcut_uuid": {
            "name": "_get_shortcut_uuid",
            "location": 21,
            "return": [
                "str"
            ],
            "arguments": {
                "url": [
                    "str"
                ]
            }
        },
        "is_shortcut_url": {
            "name": "is_shortcut_url",
            "location": 50,
            "return": [
                "bool"
            ],
            "arguments": {
                "url": [
                    "str"
                ]
            }
        },
        "_get_shortcut_info": {
            "name": "_get_shortcut_info",
            "location": 63,
            "return": [],
            "arguments": {
                "shortcut_id": [
                    "str",
                    "int"
                ]
            }
        },
        "_make_request": {
            "name": "_make_request",
            "location": 76,
            "return": [
                "dict[str, str]"
            ],
            "arguments": {
                "url": [
                    "str",
                    "bool",
                    "list[str]",
                    "list[int]",
                    "float"
                ]
            }
        }
    },
    "python-shortcuts-master/shortcuts/__init__.py": {},
    "python-shortcuts-master/shortcuts/actions/b64.py": {},
    "python-shortcuts-master/shortcuts/actions/base.py": {
        "BaseAction.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "None"
                ]
            }
        },
        "BaseAction.dump": {
            "name": "dump",
            "location": 19,
            "return": [
                "dict[typing.Text, dict[, ]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseAction._get_parameters": {
            "name": "_get_parameters",
            "location": 31,
            "return": [
                "dict[, ]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseAction.fields": {
            "name": "fields",
            "location": 62,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Field.__init__": {
            "name": "__init__",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [],
                "default": [
                    "None"
                ],
                "required": [
                    "bool"
                ],
                "capitalize": [
                    "bool"
                ],
                "help": [
                    "typing.Text"
                ]
            }
        },
        "Field.process_value": {
            "name": "process_value",
            "location": 85,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "GroupIDField.__init__": {
            "name": "__init__",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ChoiceField.__init__": {
            "name": "__init__",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [],
                "choices": [],
                "default": [
                    "None"
                ],
                "required": [
                    "bool"
                ],
                "capitalize": [
                    "bool"
                ],
                "help": [
                    "typing.Text"
                ]
            }
        },
        "ChoiceField.process_value": {
            "name": "process_value",
            "location": 112,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "ArrayField.process_value": {
            "name": "process_value",
            "location": 120,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "FloatField.process_value": {
            "name": "process_value",
            "location": 128,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "IntegerField.process_value": {
            "name": "process_value",
            "location": 133,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "BooleanField.process_value": {
            "name": "process_value",
            "location": 138,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "WFVariableField.process_value": {
            "name": "process_value",
            "location": 152,
            "return": [
                "dict[typing.Text, typing.Union[dict[typing.Text, typing.Text],typing.Text]]"
            ],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "VariablesField.process_value": {
            "name": "process_value",
            "location": 178,
            "return": [
                "dict[typing.Text, typing.Text]"
            ],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "VariablesField._check_token_match": {
            "name": "_check_token_match",
            "location": 188,
            "return": [
                "dict[typing.Text, typing.Union[typing.Text,dict[typing.Text, typing.Text]]]",
                "None"
            ],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "VariablesField._get_variables_dict": {
            "name": "_get_variables_dict",
            "location": 199,
            "return": [
                "dict[typing.Text, ]"
            ],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "VariablesField._get_variables_from_text": {
            "name": "_get_variables_from_text",
            "location": 206,
            "return": [
                "tuple[dict[typing.Text, dict[typing.Text, typing.Text]]]"
            ],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "DictionaryField.process_value": {
            "name": "process_value",
            "location": 249,
            "return": [
                "dict[typing.Text, typing.Union[dict[typing.Text, list[]],typing.Text]]"
            ],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "DictionaryField._process_single_value": {
            "name": "_process_single_value",
            "location": 259,
            "return": [
                "dict[typing.Text, int]"
            ],
            "arguments": {
                "self": [],
                "value": []
            }
        }
    },
    "python-shortcuts-master/shortcuts/actions/calculation.py": {},
    "python-shortcuts-master/shortcuts/actions/conditions.py": {},
    "python-shortcuts-master/shortcuts/actions/date.py": {},
    "python-shortcuts-master/shortcuts/actions/device.py": {},
    "python-shortcuts-master/shortcuts/actions/dictionary.py": {},
    "python-shortcuts-master/shortcuts/actions/files.py": {},
    "python-shortcuts-master/shortcuts/actions/input.py": {},
    "python-shortcuts-master/shortcuts/actions/menu.py": {},
    "python-shortcuts-master/shortcuts/actions/messages.py": {},
    "python-shortcuts-master/shortcuts/actions/numbers.py": {},
    "python-shortcuts-master/shortcuts/actions/out.py": {},
    "python-shortcuts-master/shortcuts/actions/photo.py": {},
    "python-shortcuts-master/shortcuts/actions/registry.py": {
        "ActionsRegistry.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ActionsRegistry.register_action": {
            "name": "register_action",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "action_class": [
                    "dict[str, typing.Any]",
                    "typing.Callable[, ]"
                ]
            }
        },
        "ActionsRegistry._create_class_field_if_needed": {
            "name": "_create_class_field_if_needed",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "action_class": [
                    "typing.Type"
                ]
            }
        },
        "ActionsRegistry.get_by_itype": {
            "name": "get_by_itype",
            "location": 77,
            "return": [],
            "arguments": {
                "self": [],
                "itype": [
                    "dict[str, typing.Any]",
                    "bytes",
                    "dict[, ]"
                ],
                "action_params": [
                    "dict[, ]",
                    "dict[str, list[str]]"
                ]
            }
        },
        "ActionsRegistry.get_by_keyword": {
            "name": "get_by_keyword",
            "location": 95,
            "return": [],
            "arguments": {
                "self": [],
                "keyword": [
                    "str",
                    "dict[str, str]"
                ]
            }
        },
        "ActionsRegistry.actions": {
            "name": "actions",
            "location": 102,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "python-shortcuts-master/shortcuts/actions/scripting.py": {},
    "python-shortcuts-master/shortcuts/actions/text.py": {},
    "python-shortcuts-master/shortcuts/actions/variables.py": {},
    "python-shortcuts-master/shortcuts/actions/web.py": {
        "HTTPMethodField.process_value": {
            "name": "process_value",
            "location": 24,
            "return": [
                "str",
                "list[]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "int"
                ]
            }
        },
        "GetURLAction.__init__": {
            "name": "__init__",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict[, ]"
                ]
            }
        }
    },
    "python-shortcuts-master/shortcuts/actions/__init__.py": {
        "_register_actions": {
            "name": "_register_actions",
            "location": 110,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "python-shortcuts-master/tests/conftest.py": {
        "ActionTomlLoadsMixin._assert_toml_loads": {
            "name": "_assert_toml_loads",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "toml": [
                    "dict[, ]",
                    "dict[str, str]",
                    "bytes",
                    "dict[str, dict[str, typing.Any]]"
                ],
                "exp_cls": [
                    "dict[, ]",
                    "Exception",
                    "str",
                    "int",
                    "None"
                ],
                "exp_data": [
                    "list[dict[str, typing.Any]]",
                    "bytes",
                    "None",
                    "typing.Hashable"
                ]
            }
        },
        "SimpleBaseDumpsLoadsTest.test_dumps": {
            "name": "test_dumps",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SimpleBaseDumpsLoadsTest.test_loads_toml": {
            "name": "test_loads_toml",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SimpleBaseDumpsLoadsTest.test_loads_plist": {
            "name": "test_loads_plist",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "python-shortcuts-master/tests/templates.py": {},
    "python-shortcuts-master/tests/__init__.py": {},
    "python-shortcuts-master/tests/actions/tests.py": {
        "TestActions.test_all_actions_must_be_imported_in_the_init": {
            "name": "test_all_actions_must_be_imported_in_the_init",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestActions._get_actions_from_module": {
            "name": "_get_actions_from_module",
            "location": 29,
            "return": [
                "set[]"
            ],
            "arguments": {
                "self": [],
                "module": [
                    "str",
                    "typing.Type",
                    "list[str]"
                ]
            }
        }
    },
    "python-shortcuts-master/tests/actions/__init__.py": {},
    "python-shortcuts-master/tests/actions/b64/tests.py": {
        "TestBase64EncodeAction.test_dumps": {
            "name": "test_dumps",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBase64EncodeAction.test_loads_toml": {
            "name": "test_loads_toml",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBase64DecodeAction.test_dumps": {
            "name": "test_dumps",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBase64DecodeAction.test_loads_toml": {
            "name": "test_loads_toml",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBase64Actions.test_loads_plist": {
            "name": "test_loads_plist",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "python-shortcuts-master/tests/actions/b64/__init__.py": {},
    "python-shortcuts-master/tests/actions/base/tests.py": {
        "TestBaseAction.test_get_parameters": {
            "name": "test_get_parameters",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBooleanField.test_boolean_field": {
            "name": "test_boolean_field",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestChoiceField.test_choice_field": {
            "name": "test_choice_field",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestChoiceField.test_choice_field_with_capitalization": {
            "name": "test_choice_field_with_capitalization",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFloatField.test_field": {
            "name": "test_field",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestIntegerField.test_field": {
            "name": "test_field",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestArrayField.test_field": {
            "name": "test_field",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestActionWithAskWhenRunField.test_action": {
            "name": "test_action",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestVariablesField.test_field_with_variables": {
            "name": "test_field_with_variables",
            "location": 136,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "variable": [],
                "exp_data": []
            }
        },
        "TestVariablesField.test_field_with_variables_with_token_only": {
            "name": "test_field_with_variables_with_token_only",
            "location": 152,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "variable": [],
                "exp_data": []
            }
        }
    },
    "python-shortcuts-master/tests/actions/base/__init__.py": {},
    "python-shortcuts-master/tests/actions/conditions/tests.py": {
        "TestConditionalAction.test_loads_from_toml": {
            "name": "test_loads_from_toml",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConditionalAction.test_dumps_to_plist": {
            "name": "test_dumps_to_plist",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConditionalAction.test_complex_condition_with_auto_group_id": {
            "name": "test_complex_condition_with_auto_group_id",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConditionalAction.test_ifelse_loads_from_plist": {
            "name": "test_ifelse_loads_from_plist",
            "location": 111,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConditionalAction.test_repeat_loads_from_plist": {
            "name": "test_repeat_loads_from_plist",
            "location": 120,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConditionalAction.test_complex_condition_with_auto_group_id._return_id": {
            "name": "_return_id",
            "location": 81,
            "return": [],
            "arguments": {}
        }
    },
    "python-shortcuts-master/tests/actions/conditions/__init__.py": {},
    "python-shortcuts-master/tests/actions/date/tests.py": {},
    "python-shortcuts-master/tests/actions/date/__init__.py": {},
    "python-shortcuts-master/tests/actions/device/tests.py": {
        "TestGetBatteryLevelAction.test_dumps": {
            "name": "test_dumps",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGetBatteryLevelAction.test_loads_toml": {
            "name": "test_loads_toml",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGetIPAddressAction.test_dumps": {
            "name": "test_dumps",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGetIPAddressAction.test_loads_toml": {
            "name": "test_loads_toml",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGetDeviceDetailsAction.test_dumps": {
            "name": "test_dumps",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGetDeviceDetailsAction.test_loads_toml": {
            "name": "test_loads_toml",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBooleanSwitchAction._assert_dump": {
            "name": "_assert_dump",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cls": [
                    "str",
                    "int"
                ],
                "expected_id": [
                    "str",
                    "None",
                    "dict[str, typing.Any]",
                    "int"
                ]
            }
        },
        "TestBooleanSwitchAction._assert_loads_toml": {
            "name": "_assert_loads_toml",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cls": [
                    "bool",
                    "str",
                    "None"
                ],
                "keyword": [
                    "int",
                    "Exception",
                    "list[int]",
                    "str"
                ]
            }
        },
        "TestSetAirplaneModeAction.test_dumps": {
            "name": "test_dumps",
            "location": 103,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSetAirplaneModeAction.test_loads_toml": {
            "name": "test_loads_toml",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSetBluetoothAction.test_dumps": {
            "name": "test_dumps",
            "location": 111,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSetBluetoothAction.test_loads_toml": {
            "name": "test_loads_toml",
            "location": 114,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSetMobileDataAction.test_dumps": {
            "name": "test_dumps",
            "location": 119,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSetMobileDataAction.test_loads_toml": {
            "name": "test_loads_toml",
            "location": 122,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSetLowPowerModeAction.test_dumps": {
            "name": "test_dumps",
            "location": 127,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSetLowPowerModeAction.test_loads_toml": {
            "name": "test_loads_toml",
            "location": 130,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSetWiFiAction.test_dumps": {
            "name": "test_dumps",
            "location": 135,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSetWiFiAction.test_loads_toml": {
            "name": "test_loads_toml",
            "location": 138,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSetTorchAction.test_dumps": {
            "name": "test_dumps",
            "location": 143,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSetTorchAction.test_loads_toml": {
            "name": "test_loads_toml",
            "location": 152,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSetDoNotDisturbAction.test_dumps": {
            "name": "test_dumps",
            "location": 164,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSetDoNotDisturbAction.test_loads_toml": {
            "name": "test_loads_toml",
            "location": 173,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSetVolumeAction.test_dumps": {
            "name": "test_dumps",
            "location": 184,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSetVolumeAction.test_loads_toml": {
            "name": "test_loads_toml",
            "location": 193,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSetBrightnessAction.test_dumps": {
            "name": "test_dumps",
            "location": 203,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSetBrightnessAction.test_loads_toml": {
            "name": "test_loads_toml",
            "location": 212,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "python-shortcuts-master/tests/actions/device/__init__.py": {},
    "python-shortcuts-master/tests/actions/dictionary/tests.py": {
        "TestDictionaryAction.test_dump": {
            "name": "test_dump",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestShortcutWithDictionary.test_loads_from_toml": {
            "name": "test_loads_from_toml",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestShortcutWithDictionary.test_dumps_to_plist": {
            "name": "test_dumps_to_plist",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSetDictionaryValueAction.test_dumps": {
            "name": "test_dumps",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSetDictionaryValueAction.test_loads_toml": {
            "name": "test_loads_toml",
            "location": 117,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "python-shortcuts-master/tests/actions/dictionary/__init__.py": {},
    "python-shortcuts-master/tests/actions/files/tests.py": {},
    "python-shortcuts-master/tests/actions/files/__init__.py": {},
    "python-shortcuts-master/tests/actions/input/tests.py": {
        "TestGetClipboardAction.test_dumps": {
            "name": "test_dumps",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGetClipboardAction.test_loads_toml": {
            "name": "test_loads_toml",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "python-shortcuts-master/tests/actions/input/__init__.py": {},
    "python-shortcuts-master/tests/actions/menu/tests.py": {
        "TestMenuLoads.test_loads_from_plist": {
            "name": "test_loads_from_plist",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "python-shortcuts-master/tests/actions/menu/__init__.py": {},
    "python-shortcuts-master/tests/actions/numbers/tests.py": {
        "TestNumberAction.test_dumps": {
            "name": "test_dumps",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestNumberAction.test_loads_toml": {
            "name": "test_loads_toml",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "python-shortcuts-master/tests/actions/numbers/__init__.py": {},
    "python-shortcuts-master/tests/actions/out/tests.py": {
        "TestShowResultAction.test_get_parameters": {
            "name": "test_get_parameters",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestShowAlertAction.test_get_parameters": {
            "name": "test_get_parameters",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSetClipboardAction.test_dumps": {
            "name": "test_dumps",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSetClipboardAction.test_dumps_with_parameters": {
            "name": "test_dumps_with_parameters",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSetClipboardAction.test_loads_toml": {
            "name": "test_loads_toml",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSetClipboardAction.test_loads_toml_with_parameters": {
            "name": "test_loads_toml_with_parameters",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestNotificationAction.test_dumps": {
            "name": "test_dumps",
            "location": 97,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestNotificationAction.test_loads_toml": {
            "name": "test_loads_toml",
            "location": 123,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "python-shortcuts-master/tests/actions/out/__init__.py": {},
    "python-shortcuts-master/tests/actions/photo/tests.py": {
        "BasePhotoTest.test_get_parameters": {
            "name": "test_get_parameters",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "python-shortcuts-master/tests/actions/photo/__init__.py": {},
    "python-shortcuts-master/tests/actions/registry/tests.py": {
        "TestActionsRegistry.test_init": {
            "name": "test_init",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestActionsRegistry.test_register_simple_action": {
            "name": "test_register_simple_action",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestActionsRegistry.test_register_complex_action": {
            "name": "test_register_complex_action",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestActionsRegistry.test_actions": {
            "name": "test_actions",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestActionsRegistry.test_create_class_field_if_needed": {
            "name": "test_create_class_field_if_needed",
            "location": 110,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "python-shortcuts-master/tests/actions/registry/__init__.py": {},
    "python-shortcuts-master/tests/actions/scripting/tests.py": {
        "TestNothingAction.test_dumps": {
            "name": "test_dumps",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestNothingAction.test_loads_toml": {
            "name": "test_loads_toml",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSetItemNameAction.test_dumps": {
            "name": "test_dumps",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSetItemNameAction.test_loads_toml": {
            "name": "test_loads_toml",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestViewContentGraphAction.test_dumps": {
            "name": "test_dumps",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestViewContentGraphAction.test_loads_toml": {
            "name": "test_loads_toml",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestContinueInShortcutAppAction.test_dumps": {
            "name": "test_dumps",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestContinueInShortcutAppAction.test_loads_toml": {
            "name": "test_loads_toml",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDelayAction.test_dumps": {
            "name": "test_dumps",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDelayAction.test_loads_toml": {
            "name": "test_loads_toml",
            "location": 102,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestWaitToReturnAction.test_dumps": {
            "name": "test_dumps",
            "location": 112,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestWaitToReturnAction.test_loads_toml": {
            "name": "test_loads_toml",
            "location": 120,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRepeatWithEachActions.test_loads_from_toml": {
            "name": "test_loads_from_toml",
            "location": 137,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRepeatWithEachActions.test_dumps_to_plist": {
            "name": "test_dumps_to_plist",
            "location": 145,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestHashAction.test_dumps_with_choices": {
            "name": "test_dumps_with_choices",
            "location": 162,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "hash_type": [
                    "str",
                    "int"
                ]
            }
        },
        "TestHashAction.test_loads_toml": {
            "name": "test_loads_toml",
            "location": 175,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "hash_type": [
                    "str",
                    "tuple[str]",
                    "list[str]"
                ]
            }
        },
        "TestHashAction.test_choices": {
            "name": "test_choices",
            "location": 183,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "python-shortcuts-master/tests/actions/scripting/__init__.py": {},
    "python-shortcuts-master/tests/actions/text/tests.py": {
        "TestSplitTextAction.test_dumps": {
            "name": "test_dumps",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSplitTextAction.test_dumps_with_custom_separator": {
            "name": "test_dumps_with_custom_separator",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSplitTextAction.test_dumps_with_choices": {
            "name": "test_dumps_with_choices",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "separator": []
            }
        },
        "TestSplitTextAction.test_loads_toml": {
            "name": "test_loads_toml",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSplitTextAction.test_choices": {
            "name": "test_choices",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestChangeCaseAction.test_dumps_with_choices": {
            "name": "test_dumps_with_choices",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "case_type": [
                    "str"
                ]
            }
        },
        "TestChangeCaseAction.test_loads_toml": {
            "name": "test_loads_toml",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "case_type": [
                    "typing.Type"
                ]
            }
        },
        "TestChangeCaseAction.test_choices": {
            "name": "test_choices",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "python-shortcuts-master/tests/actions/text/__init__.py": {},
    "python-shortcuts-master/tests/actions/variables/tests.py": {
        "TestSetVariable.test_get_parameters": {
            "name": "test_get_parameters",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGetVariableAction.test_loads_from_toml": {
            "name": "test_loads_from_toml",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGetVariableAction.test_dumps_to_plist": {
            "name": "test_dumps_to_plist",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGetVariableAction.test_loads_from_plist": {
            "name": "test_loads_from_plist",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAppendVariableAction.test_dumps": {
            "name": "test_dumps",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAppendVariableAction.test_loads_toml": {
            "name": "test_loads_toml",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "python-shortcuts-master/tests/actions/variables/__init__.py": {},
    "python-shortcuts-master/tests/actions/web/tests.py": {
        "TestURLAction.test_get_parameters": {
            "name": "test_get_parameters",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGetURLAction.test_loads_from_toml": {
            "name": "test_loads_from_toml",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGetURLAction.test_dumps_to_plist": {
            "name": "test_dumps_to_plist",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestURLEncodeAction.test_dumps": {
            "name": "test_dumps",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestURLEncodeAction.test_loads_toml": {
            "name": "test_loads_toml",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestURLDecodeAction.test_dumps": {
            "name": "test_dumps",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestURLDecodeAction.test_loads_toml": {
            "name": "test_loads_toml",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestURLEncodeAndDecodeActions.test_loads_plist": {
            "name": "test_loads_plist",
            "location": 109,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "python-shortcuts-master/tests/actions/web/__init__.py": {},
    "python-shortcuts-master/tests/cli/tests.py": {
        "Test_get_format.test_for_url": {
            "name": "test_for_url",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "filepath": [
                    "str"
                ],
                "exp_format": [
                    "str"
                ]
            }
        },
        "Test_get_format.test_raises": {
            "name": "test_raises",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "python-shortcuts-master/tests/cli/__init__.py": {},
    "python-shortcuts-master/tests/examples/tests.py": {
        "BaseShortcutTest.test_loads": {
            "name": "test_loads",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseShortcutTest.test_dumps_to_plist": {
            "name": "test_dumps_to_plist",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "python-shortcuts-master/tests/examples/__init__.py": {},
    "python-shortcuts-master/tests/loader/tests.py": {
        "TestWFTextTokenAttachmentField.test_field": {
            "name": "test_field",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "str",
                    "dict[str, typing.Any]"
                ],
                "exp_value": [
                    "str",
                    "bytes",
                    "Exception",
                    "None",
                    "dict[str, str]",
                    "dict[, ]",
                    "list[list[int]]"
                ]
            }
        },
        "TestWFTextTokenAttachmentField.test_raises_exception": {
            "name": "test_raises_exception",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict[, ]",
                    "dict[str, typing.Any]",
                    "bytes"
                ]
            }
        }
    },
    "python-shortcuts-master/tests/loader/__init__.py": {},
    "python-shortcuts-master/tests/shortcuts/tests.py": {
        "TestShortcutDumps.test_dumps_simple_shortcut": {
            "name": "test_dumps_simple_shortcut",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestShortcutLoads.test_loads": {
            "name": "test_loads",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestShortcutLoadsAndDumps.test_loads_and_dumps_with_not_all_params": {
            "name": "test_loads_and_dumps_with_not_all_params",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestShortcutLoadsAndDumps.test_loads_plist": {
            "name": "test_loads_plist",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestShortcut.test_set_group_ids_for_empty_shortcut": {
            "name": "test_set_group_ids_for_empty_shortcut",
            "location": 112,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestShortcut.test_set_group_ids": {
            "name": "test_set_group_ids",
            "location": 119,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "python-shortcuts-master/tests/shortcuts/__init__.py": {},
    "python-shortcuts-master/tests/utils/tests.py": {
        "Test__make_request.test_make_request_should_call_urllib": {
            "name": "test_make_request_should_call_urllib",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Test__make_request.test_make_request_should_raise_exception_for_non_200_status": {
            "name": "test_make_request_should_raise_exception_for_non_200_status",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Test__is_shortcut_url.test_is_shortcut_url": {
            "name": "test_is_shortcut_url",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str",
                    "bool"
                ],
                "exp_result": [
                    "str",
                    "bool"
                ]
            }
        },
        "Test__get_shortcut_uuid.test_uuid": {
            "name": "test_uuid",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str",
                    "None",
                    "dict[, ]",
                    "dict[str, str]"
                ],
                "exp_uuid": [
                    "str",
                    "None",
                    "dict[, ]",
                    "dict[str, str]"
                ]
            }
        },
        "Test__get_shortcut_uuid.test_exception_with_invalid_url": {
            "name": "test_exception_with_invalid_url",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "int",
                    "str"
                ]
            }
        },
        "Test__download_shortcut.test_should_return_shortcut_content": {
            "name": "test_should_return_shortcut_content",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Test__download_shortcut.test_should_return_shortcut_content._urlopen": {
            "name": "_urlopen",
            "location": 86,
            "return": [],
            "arguments": {
                "url": []
            }
        }
    },
    "python-shortcuts-master/tests/utils/__init__.py": {}
}
{
    "pythonZeta-master/setup.py": {},
    "pythonZeta-master/pyzeta/infix.py": {
        "Infix.__init__": {
            "name": "__init__",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "function": [
                    "str",
                    "typing.Callable[, ]",
                    "set[str]"
                ]
            }
        },
        "Infix.__ror__": {
            "name": "__ror__",
            "location": 10,
            "return": [
                "Infix"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "float"
                ]
            }
        },
        "Infix.__or__": {
            "name": "__or__",
            "location": 13,
            "return": [],
            "arguments": {
                "self": [],
                "other": [
                    "dict[, ]",
                    "typing.AbstractSet"
                ]
            }
        },
        "Infix.__call__": {
            "name": "__call__",
            "location": 16,
            "return": [],
            "arguments": {
                "self": [],
                "value1": [
                    "typing.Type",
                    "typing.Iterable[int]"
                ],
                "value2": [
                    "typing.Type",
                    "typing.Iterable[int]"
                ]
            }
        }
    },
    "pythonZeta-master/pyzeta/registry.py": {
        "register": {
            "name": "register",
            "location": 20,
            "return": [],
            "arguments": {
                "typeclass_name": [],
                "tp": [],
                "instance": []
            }
        },
        "get_instance_cls": {
            "name": "get_instance_cls",
            "location": 23,
            "return": [],
            "arguments": {
                "typeclass_name": [],
                "type_searched": []
            }
        }
    },
    "pythonZeta-master/pyzeta/__init__.py": {},
    "pythonZeta-master/pyzeta/datatypes/either.py": {},
    "pythonZeta-master/pyzeta/datatypes/maybe.py": {
        "fold": {
            "name": "fold",
            "location": 10,
            "return": [
                "int",
                "str",
                "typing.Iterable['Context']"
            ],
            "arguments": {
                "maybe": [
                    "float",
                    "int",
                    "None",
                    "str"
                ],
                "if_nothing": [
                    "int",
                    "str",
                    "typing.Iterable['Context']"
                ],
                "if_just": [
                    "bool",
                    "str",
                    "float",
                    "typing.Sequence[int]"
                ]
            }
        }
    },
    "pythonZeta-master/pyzeta/datatypes/__init__.py": {},
    "pythonZeta-master/pyzeta/instances/eitherapplicative.py": {
        "EitherApplicative.app": {
            "name": "app",
            "location": 8,
            "return": [
                "str",
                "None",
                "dict[str, typing.Any]",
                "int"
            ],
            "arguments": {
                "cls": [
                    "str"
                ],
                "fab": [
                    "str",
                    "None",
                    "dict[str, typing.Any]",
                    "int"
                ],
                "fa": [
                    "str"
                ]
            }
        },
        "EitherApplicative.pure": {
            "name": "pure",
            "location": 15,
            "return": [],
            "arguments": {
                "a": [
                    "int",
                    "float",
                    "str",
                    "list[]"
                ]
            }
        }
    },
    "pythonZeta-master/pyzeta/instances/eitherfunctor.py": {
        "EitherFunctor.fmap": {
            "name": "fmap",
            "location": 8,
            "return": [
                "typing.Callable[, ]"
            ],
            "arguments": {
                "f": [
                    "typing.Callable[, ]"
                ],
                "fa": [
                    "typing.Callable[, ]"
                ]
            }
        }
    },
    "pythonZeta-master/pyzeta/instances/eithermonad.py": {
        "EitherMonad.bind": {
            "name": "bind",
            "location": 8,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "ma": [
                    "bool",
                    "str"
                ],
                "f": [
                    "bool",
                    "list[int]"
                ]
            }
        }
    },
    "pythonZeta-master/pyzeta/instances/eithersemigroup.py": {
        "EitherSemigroup.mappend": {
            "name": "mappend",
            "location": 8,
            "return": [
                "int",
                "typing.Mapping",
                "list[str]",
                "typing.Sequence[]",
                "float"
            ],
            "arguments": {
                "a": [
                    "list[str]",
                    "typing.Sequence[]",
                    "float",
                    "int"
                ],
                "b": [
                    "int",
                    "typing.Mapping",
                    "list[str]"
                ]
            }
        }
    },
    "pythonZeta-master/pyzeta/instances/listapplicative.py": {
        "ListApplicative.app": {
            "name": "app",
            "location": 8,
            "return": [
                "list[]"
            ],
            "arguments": {
                "fab": [
                    "str",
                    "dict[, ]",
                    "list[]"
                ],
                "fa": [
                    "str",
                    "dict[, ]",
                    "list[]"
                ]
            }
        },
        "ListApplicative.pure": {
            "name": "pure",
            "location": 12,
            "return": [
                "list[typing.Union[list[T],int,list[int]]]"
            ],
            "arguments": {
                "a": [
                    "list[T]",
                    "int",
                    "list[int]"
                ]
            }
        }
    },
    "pythonZeta-master/pyzeta/instances/listfunctor.py": {
        "ListFunctor.fmap": {
            "name": "fmap",
            "location": 7,
            "return": [
                "list[]"
            ],
            "arguments": {
                "f": [
                    "typing.Callable[typing.Any, T]"
                ],
                "fa": []
            }
        }
    },
    "pythonZeta-master/pyzeta/instances/listmonad.py": {
        "ListMonad.bind": {
            "name": "bind",
            "location": 7,
            "return": [
                "list[]"
            ],
            "arguments": {
                "ma": [],
                "f": [
                    "int"
                ]
            }
        },
        "ListMonad.pure": {
            "name": "pure",
            "location": 15,
            "return": [
                "list[typing.Union[list[T],int,list[int]]]"
            ],
            "arguments": {
                "a": [
                    "list[T]",
                    "int",
                    "list[int]"
                ]
            }
        }
    },
    "pythonZeta-master/pyzeta/instances/listmonoid.py": {
        "ListMonoid.mempty": {
            "name": "mempty",
            "location": 7,
            "return": [
                "list[]"
            ],
            "arguments": {}
        }
    },
    "pythonZeta-master/pyzeta/instances/listsemigroup.py": {
        "ListSemigroup.mappend": {
            "name": "mappend",
            "location": 7,
            "return": [
                "int",
                "float",
                "str"
            ],
            "arguments": {
                "x": [
                    "int",
                    "float",
                    "str"
                ],
                "y": [
                    "int",
                    "float",
                    "str"
                ]
            }
        }
    },
    "pythonZeta-master/pyzeta/instances/maxintsemigroup.py": {
        "MaxSemigroup.mappend": {
            "name": "mappend",
            "location": 9,
            "return": [
                "int",
                "float"
            ],
            "arguments": {
                "x": [
                    "int",
                    "float"
                ],
                "y": [
                    "int",
                    "float"
                ]
            }
        }
    },
    "pythonZeta-master/pyzeta/instances/maybeapplicative.py": {
        "MaybeApplicative.app": {
            "name": "app",
            "location": 10,
            "return": [],
            "arguments": {
                "fab": [
                    "int",
                    "str"
                ],
                "ma": [
                    "int",
                    "tuple[int]"
                ]
            }
        },
        "MaybeApplicative.pure": {
            "name": "pure",
            "location": 16,
            "return": [
                "Maybe"
            ],
            "arguments": {
                "a": [
                    "int",
                    "float",
                    "str",
                    "list[]"
                ]
            }
        }
    },
    "pythonZeta-master/pyzeta/instances/maybefunctor.py": {
        "MaybeFunctor.fmap": {
            "name": "fmap",
            "location": 11,
            "return": [],
            "arguments": {
                "f": [
                    "typing.Callable[, ]",
                    "bytes",
                    "dict[, ]"
                ],
                "fa": [
                    "typing.Callable[, ]",
                    "bytes",
                    "dict[, ]"
                ]
            }
        }
    },
    "pythonZeta-master/pyzeta/instances/maybemonad.py": {
        "MaybeMonad.bind": {
            "name": "bind",
            "location": 8,
            "return": [],
            "arguments": {
                "ma": [
                    "bytes",
                    "str",
                    "typing.Callable[bytes, bytes]"
                ],
                "f": [
                    "bytes",
                    "str",
                    "typing.Callable[bytes, bytes]"
                ]
            }
        }
    },
    "pythonZeta-master/pyzeta/instances/maybemonoid.py": {
        "MaybeMonoid.mempty": {
            "name": "mempty",
            "location": 8,
            "return": [],
            "arguments": {}
        }
    },
    "pythonZeta-master/pyzeta/instances/maybesemigroup.py": {
        "MaybeSemigroup.mappend": {
            "name": "mappend",
            "location": 9,
            "return": [
                "int",
                "Nothing"
            ],
            "arguments": {
                "x": [
                    "int"
                ],
                "y": []
            }
        }
    },
    "pythonZeta-master/pyzeta/instances/stringmonoid.py": {
        "StringMonoid.mempty": {
            "name": "mempty",
            "location": 7,
            "return": [
                "typing.Text"
            ],
            "arguments": {}
        }
    },
    "pythonZeta-master/pyzeta/instances/stringsemigroup.py": {
        "StringSemigroup.mappend": {
            "name": "mappend",
            "location": 7,
            "return": [
                "int",
                "float",
                "str"
            ],
            "arguments": {
                "x": [
                    "int",
                    "float",
                    "str"
                ],
                "y": [
                    "int",
                    "float",
                    "str"
                ]
            }
        }
    },
    "pythonZeta-master/pyzeta/instances/__init__.py": {},
    "pythonZeta-master/pyzeta/typeclasses/applicative.py": {
        "pure": {
            "name": "pure",
            "location": 17,
            "return": [],
            "arguments": {
                "t": [
                    "list[]",
                    "int"
                ],
                "a": [
                    "list[]",
                    "int"
                ]
            }
        },
        "_app": {
            "name": "_app",
            "location": 20,
            "return": [],
            "arguments": {
                "fab": [],
                "fa": [
                    "typing.Type"
                ]
            }
        },
        "Applicative.app": {
            "name": "app",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "fab": [],
                "fa": []
            }
        },
        "Applicative.pure": {
            "name": "pure",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "a": [
                    "list[T]",
                    "int",
                    "list[int]"
                ]
            }
        }
    },
    "pythonZeta-master/pyzeta/typeclasses/functor.py": {
        "_fmap": {
            "name": "_fmap",
            "location": 12,
            "return": [],
            "arguments": {
                "f": [
                    "int"
                ],
                "fa": [
                    "str"
                ]
            }
        },
        "Functor.fmap": {
            "name": "fmap",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "f": [
                    "typing.Iterable[str]",
                    "typing.Callable[, ]"
                ],
                "fa": [
                    "typing.Iterable[str]",
                    "typing.Callable[, ]"
                ]
            }
        }
    },
    "pythonZeta-master/pyzeta/typeclasses/monad.py": {
        "_bind": {
            "name": "_bind",
            "location": 13,
            "return": [],
            "arguments": {
                "ma": [
                    "int"
                ],
                "f": [
                    "bytes",
                    "int",
                    "float",
                    "typing.Callable[str, int]",
                    "str"
                ]
            }
        },
        "_kleisli": {
            "name": "_kleisli",
            "location": 18,
            "return": [
                "typing.Callable[, ]"
            ],
            "arguments": {
                "f": [
                    "typing.Sequence[typing.Any]",
                    "int"
                ],
                "g": [
                    "typing.Sequence[typing.Any]",
                    "int"
                ]
            }
        },
        "Monad.bind": {
            "name": "bind",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "ma": [
                    "bool",
                    "dict[str, typing.Any]"
                ],
                "f": [
                    "bool",
                    "dict[str, typing.Any]"
                ]
            }
        }
    },
    "pythonZeta-master/pyzeta/typeclasses/monoid.py": {
        "mempty": {
            "name": "mempty",
            "location": 18,
            "return": [],
            "arguments": {
                "t": [
                    "float",
                    "bool",
                    "str"
                ]
            }
        },
        "Monoid.mempty": {
            "name": "mempty",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "Monoid.mconcat": {
            "name": "mconcat",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "lst": [
                    "int",
                    "str",
                    "typing.Iterable['Context']"
                ]
            }
        }
    },
    "pythonZeta-master/pyzeta/typeclasses/semigroup.py": {
        "_mappend": {
            "name": "_mappend",
            "location": 12,
            "return": [],
            "arguments": {
                "x": [],
                "y": [
                    "float"
                ]
            }
        },
        "Semigroup.mappend": {
            "name": "mappend",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "x": [
                    "bool",
                    "float",
                    "typing.Iterable[typing.Iterable[float]]",
                    "str",
                    "bytes"
                ],
                "y": [
                    "bool",
                    "float",
                    "typing.Iterable[typing.Iterable[float]]",
                    "str",
                    "bytes"
                ]
            }
        }
    },
    "pythonZeta-master/pyzeta/typeclasses/typeclassmeta.py": {},
    "pythonZeta-master/pyzeta/typeclasses/__init__.py": {},
    "pythonZeta-master/test/examples/test_parser.py": {
        "valid_char": {
            "name": "valid_char",
            "location": 16,
            "return": [],
            "arguments": {
                "c": [
                    "str",
                    "list[str]"
                ]
            }
        },
        "test_example": {
            "name": "test_example",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "valid_char.validator": {
            "name": "validator",
            "location": 18,
            "return": [],
            "arguments": {
                "s": []
            }
        }
    },
    "pythonZeta-master/test/instances/test_either.py": {
        "test_mappend_either": {
            "name": "test_mappend_either",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_fmap_either": {
            "name": "test_fmap_either",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_app_either": {
            "name": "test_app_either",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_bind_either": {
            "name": "test_bind_either",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "pythonZeta-master/test/instances/test_list.py": {
        "test_mempty_list": {
            "name": "test_mempty_list",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_fmap_list": {
            "name": "test_fmap_list",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_app_list": {
            "name": "test_app_list",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_bind_list": {
            "name": "test_bind_list",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "pythonZeta-master/test/instances/test_maybe.py": {
        "test_maybe_semigroup_just_nothing": {
            "name": "test_maybe_semigroup_just_nothing",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "s": [
                    "str",
                    "int",
                    "list[list[str]]",
                    "dict[str, str]"
                ]
            }
        },
        "test_maybe_semigroup_nothing_just": {
            "name": "test_maybe_semigroup_nothing_just",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "s": [
                    "int",
                    "str",
                    "list[]",
                    "dict[, ]",
                    "typing.TextIO",
                    "list[str]"
                ]
            }
        },
        "test_maybe_semigroup_just_just": {
            "name": "test_maybe_semigroup_just_just",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "s1": [
                    "str",
                    "typing.Iterable[str]"
                ],
                "s2": [
                    "str",
                    "typing.Iterable[str]"
                ]
            }
        },
        "test_maybe_str_functor_just": {
            "name": "test_maybe_str_functor_just",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_maybe_str_functor_nothing": {
            "name": "test_maybe_str_functor_nothing",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_maybe_num_functor_just": {
            "name": "test_maybe_num_functor_just",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_maybe_num_functor_nothing": {
            "name": "test_maybe_num_functor_nothing",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_app_maybe_just_just": {
            "name": "test_app_maybe_just_just",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_app_maybe_nothing_just": {
            "name": "test_app_maybe_nothing_just",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_app_maybe_just_nothing": {
            "name": "test_app_maybe_just_nothing",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_pure": {
            "name": "test_pure",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_maybe_monad_bind": {
            "name": "test_maybe_monad_bind",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_maybe_monad_kleisli": {
            "name": "test_maybe_monad_kleisli",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "pythonZeta-master/test/typeclasses/test_applicative.py": {
        "test_applicative_identity": {
            "name": "test_applicative_identity",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_applicative_homomorphism": {
            "name": "test_applicative_homomorphism",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_applicative_derived_map": {
            "name": "test_applicative_derived_map",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_applicative_composition": {
            "name": "test_applicative_composition",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_applicative_interchange": {
            "name": "test_applicative_interchange",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "assert_applicative_identity": {
            "name": "assert_applicative_identity",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "fi": [
                    "bool"
                ],
                "fa": [
                    "bool"
                ]
            }
        },
        "assert_applicative_homomorphism": {
            "name": "assert_applicative_homomorphism",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "t": [
                    "int",
                    "list[]",
                    "dict[str, float]"
                ],
                "ab": [
                    "int",
                    "list[]",
                    "dict[str, float]"
                ],
                "a": [
                    "int",
                    "list[]",
                    "dict[str, float]"
                ]
            }
        },
        "assert_applicative_derived_map": {
            "name": "assert_applicative_derived_map",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "t": [
                    "str",
                    "bool",
                    "list[tuple[typing.Union[typing.Any,typing.Any]]]",
                    "list[str]"
                ],
                "fa": [
                    "str",
                    "bool",
                    "list[tuple[typing.Union[typing.Any,typing.Any]]]",
                    "list[str]"
                ],
                "f": [
                    "str",
                    "bool",
                    "list[tuple[typing.Union[typing.Any,typing.Any]]]",
                    "list[str]"
                ]
            }
        },
        "assert_applicative_composition": {
            "name": "assert_applicative_composition",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "fab": [
                    "dict[str, typing.Any]",
                    "bool"
                ],
                "fbc": [
                    "dict[str, typing.Any]",
                    "bool"
                ],
                "fa": [
                    "dict[str, typing.Any]",
                    "bool"
                ]
            }
        },
        "assert_applicative_interchange": {
            "name": "assert_applicative_interchange",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "fab": [
                    "dict[str, typing.Any]",
                    "bool",
                    "typing.MutableMapping",
                    "typing.Callable[, ]"
                ],
                "a": [
                    "dict[str, typing.Any]",
                    "bool",
                    "typing.MutableMapping",
                    "typing.Callable[, ]"
                ]
            }
        }
    },
    "pythonZeta-master/test/typeclasses/test_functor.py": {
        "test_functor_identity": {
            "name": "test_functor_identity",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_functor_composition": {
            "name": "test_functor_composition",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_functor_curried": {
            "name": "test_functor_curried",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_functor_as_func": {
            "name": "test_functor_as_func",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "assert_functor_identity": {
            "name": "assert_functor_identity",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "fa": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ]
            }
        },
        "assert_functor_composition": {
            "name": "assert_functor_composition",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "f": [
                    "int"
                ],
                "g": [
                    "int"
                ],
                "fa": [
                    "int"
                ]
            }
        }
    },
    "pythonZeta-master/test/typeclasses/test_monoid.py": {
        "test_mempty": {
            "name": "test_mempty",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "assert_left_identity": {
            "name": "assert_left_identity",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "y": [
                    "str"
                ]
            }
        },
        "assert_right_identity": {
            "name": "assert_right_identity",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "x": [
                    "int",
                    "str",
                    "tuple[typing.Any]"
                ]
            }
        }
    },
    "pythonZeta-master/test/typeclasses/test_semigroup.py": {
        "test_associativity": {
            "name": "test_associativity",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "x": [
                    "float",
                    "list[float]"
                ],
                "y": [
                    "float",
                    "list[float]"
                ],
                "z": [
                    "float",
                    "list[float]"
                ]
            }
        },
        "assert_associativity": {
            "name": "assert_associativity",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "x": [
                    "int",
                    "float"
                ],
                "y": [
                    "int",
                    "float"
                ],
                "z": [
                    "int",
                    "float"
                ]
            }
        }
    }
}
{
    "qflow-master/.ycm_extra_conf.py": {
        "DirectoryOfThisScript": {
            "name": "DirectoryOfThisScript",
            "location": 5,
            "return": [],
            "arguments": {}
        },
        "MakeRelativePathsInFlagsAbsolute": {
            "name": "MakeRelativePathsInFlagsAbsolute",
            "location": 38,
            "return": [
                "list[typing.Text]",
                "list[typing.Union[typing.Text,list[],dict[, ]]]"
            ],
            "arguments": {
                "flags": [
                    "str",
                    "int",
                    "dict[, ]",
                    "None",
                    "list[]"
                ],
                "working_directory": [
                    "str",
                    "bool",
                    "None",
                    "list[str]",
                    "dict[, ]"
                ]
            }
        },
        "IsHeaderFile": {
            "name": "IsHeaderFile",
            "location": 67,
            "return": [
                "bool"
            ],
            "arguments": {
                "filename": [
                    "str",
                    "None"
                ]
            }
        },
        "GetCompilationInfoForFile": {
            "name": "GetCompilationInfoForFile",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "filename": [
                    "str"
                ]
            }
        },
        "FlagsForFile": {
            "name": "FlagsForFile",
            "location": 89,
            "return": [
                "None",
                "dict[typing.Text, typing.Union[dict[, ],dict[str, str],int,str]]"
            ],
            "arguments": {
                "filename": [
                    "str",
                    "None"
                ]
            }
        }
    },
    "qflow-master/build.py": {
        "build": {
            "name": "build",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "setup_kwargs": [
                    "dict[str, typing.Any]"
                ]
            }
        },
        "CMakeExtension.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "float"
                ],
                "sourcedir": [
                    "typing.Text"
                ]
            }
        },
        "CMakeBuild.run": {
            "name": "run",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CMakeBuild.build_extension": {
            "name": "build_extension",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ext": [
                    "str",
                    "dict[, ]"
                ]
            }
        }
    },
    "qflow-master/runme.py": {},
    "qflow-master/docs/conf.py": {},
    "qflow-master/qflow/mpi.py": {
        "master_rank": {
            "name": "master_rank",
            "location": 4,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "mpiprint": {
            "name": "mpiprint",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "qflow-master/qflow/statistics.py": {
        "compute_statistics_for_series": {
            "name": "compute_statistics_for_series",
            "location": 6,
            "return": [
                "dict[typing.Text, ]"
            ],
            "arguments": {
                "x": [
                    "list[]",
                    "list[list[]]",
                    "list[int]",
                    "dict[str, set[str]]",
                    "int"
                ],
                "method": []
            }
        },
        "statistics_to_tex": {
            "name": "statistics_to_tex",
            "location": 31,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "all_stats": [
                    "str"
                ],
                "labels": [
                    "str",
                    "bool",
                    "float",
                    "typing.Callable[, ]"
                ],
                "filename": [
                    "str",
                    "None"
                ],
                "quantity_name": [
                    "typing.Text"
                ]
            }
        },
        "blocking": {
            "name": "blocking",
            "location": 80,
            "return": [
                "float"
            ],
            "arguments": {
                "x": []
            }
        }
    },
    "qflow-master/qflow/training.py": {
        "train": {
            "name": "train",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "psi": [
                    "float",
                    "None",
                    "int"
                ],
                "H": [],
                "sampler": [
                    "float",
                    "None",
                    "int"
                ],
                "iters": [
                    "int",
                    "float"
                ],
                "samples": [
                    "bool",
                    "float",
                    "tuple[typing.Union[float,float]]",
                    "typing.Sequence[typing.Sequence[float]]"
                ],
                "gamma": [
                    "bool",
                    "float",
                    "tuple[typing.Union[float,float]]",
                    "typing.Sequence[typing.Sequence[float]]"
                ],
                "optimizer": [
                    "float",
                    "None",
                    "int"
                ],
                "verbose": [
                    "bool"
                ],
                "call_backs": [
                    "tuple[]"
                ],
                "call_back_resolution": [
                    "int"
                ]
            }
        },
        "Callback.__call__": {
            "name": "__call__",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "iter_count": [
                    "typing.Iterable[str]",
                    "typing.Mapping"
                ],
                "psi": [
                    "typing.Iterable[str]",
                    "typing.Mapping"
                ],
                "H": [
                    "typing.Iterable[str]",
                    "typing.Mapping"
                ],
                "sampler": [
                    "typing.Iterable[str]",
                    "typing.Mapping"
                ],
                "optimizer": [
                    "typing.Iterable[str]",
                    "typing.Mapping"
                ]
            }
        },
        "EnergyCallback.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "samples": [
                    "bool",
                    "None",
                    "str"
                ],
                "verbose": [
                    "bool"
                ]
            }
        },
        "EnergyCallback.__call__": {
            "name": "__call__",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "iter_count": [
                    "int",
                    "list[str]",
                    "list[]",
                    "list[int]",
                    "typing.Sequence[int]",
                    "typing.Sequence[dict[, ]]",
                    "str"
                ],
                "psi": [
                    "tuple[typing.Union[list[int],list[int]]]",
                    "str",
                    "int"
                ],
                "H": [
                    "tuple[typing.Union[list[int],list[int]]]",
                    "str",
                    "int"
                ],
                "sampler": [
                    "tuple[typing.Union[list[int],list[int]]]",
                    "str",
                    "int"
                ],
                "optimizer": [
                    "typing.Iterable[str]",
                    "typing.Mapping"
                ]
            }
        },
        "SymmetryCallback.__init__": {
            "name": "__init__",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "samples": [
                    "int",
                    "None"
                ],
                "permutations": [
                    "int"
                ],
                "verbose": [
                    "bool"
                ]
            }
        },
        "SymmetryCallback.__call__": {
            "name": "__call__",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "iter_count": [
                    "int",
                    "list[str]",
                    "list[]",
                    "list[int]",
                    "typing.Sequence[int]",
                    "typing.Sequence[dict[, ]]",
                    "str"
                ],
                "psi": [
                    "tuple[typing.Union[list[int],list[int]]]",
                    "str",
                    "int"
                ],
                "H": [
                    "typing.Iterable[str]",
                    "typing.Mapping"
                ],
                "sampler": [
                    "tuple[typing.Union[list[int],list[int]]]",
                    "str",
                    "int"
                ],
                "optimizer": [
                    "typing.Iterable[str]",
                    "typing.Mapping"
                ]
            }
        },
        "ParameterCallback.__call__": {
            "name": "__call__",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "iter_count": [
                    "typing.Iterable[str]",
                    "typing.Mapping"
                ],
                "psi": [
                    "tuple[typing.Union[list[int],list[int]]]",
                    "str",
                    "int"
                ]
            }
        }
    },
    "qflow-master/qflow/__init__.py": {
        "SimulationBox.__init__": {
            "name": "__init__",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "L": [
                    "int",
                    "float"
                ]
            }
        },
        "SimulationBox.__enter__": {
            "name": "__enter__",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SimulationBox.__exit__": {
            "name": "__exit__",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "exc_type": [
                    "typing.Type",
                    "None",
                    "BaseException"
                ],
                "exc_value": [
                    "typing.Type",
                    "None",
                    "BaseException"
                ],
                "traceback": [
                    "typing.Type",
                    "None",
                    "BaseException"
                ]
            }
        },
        "DistanceCache.__init__": {
            "name": "__init__",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "system": [
                    "int",
                    "str",
                    "list[int]",
                    "float"
                ],
                "pbc_size": [
                    "None",
                    "int"
                ]
            }
        },
        "DistanceCache.__enter__": {
            "name": "__enter__",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DistanceCache.__exit__": {
            "name": "__exit__",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "exc_type": [
                    "typing.Type",
                    "None",
                    "BaseException"
                ],
                "exc_value": [
                    "typing.Type",
                    "None",
                    "BaseException"
                ],
                "traceback": [
                    "typing.Type",
                    "None",
                    "BaseException"
                ]
            }
        }
    },
    "qflow-master/qflow/hamiltonians/__init__.py": {},
    "qflow-master/qflow/optimizers/__init__.py": {},
    "qflow-master/qflow/samplers/__init__.py": {},
    "qflow-master/qflow/wavefunctions/__init__.py": {},
    "qflow-master/qflow/wavefunctions/nn/__init__.py": {},
    "qflow-master/qflow/wavefunctions/nn/activations/__init__.py": {},
    "qflow-master/qflow/wavefunctions/nn/layers/__init__.py": {},
    "qflow-master/scripts/benchmark.py": {},
    "qflow-master/tests/testutils.py": {
        "position_array_shapes": {
            "name": "position_array_shapes",
            "location": 7,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "draw": [
                    "int",
                    "float"
                ],
                "min_dims": [
                    "int"
                ],
                "max_dims": [
                    "int"
                ],
                "max_size": [
                    "int"
                ]
            }
        },
        "float_strat": {
            "name": "float_strat",
            "location": 14,
            "return": [],
            "arguments": {}
        },
        "array_strat": {
            "name": "array_strat",
            "location": 18,
            "return": [],
            "arguments": {
                "min_dims": [
                    "int"
                ],
                "max_dims": [
                    "int"
                ],
                "max_size": [
                    "int"
                ]
            }
        },
        "assert_close": {
            "name": "assert_close",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "expected": [
                    "dict[str, typing.Any]",
                    "str"
                ],
                "actuals": [
                    "dict[str, typing.Any]",
                    "str"
                ],
                "rtol": [
                    "float"
                ],
                "atol": [
                    "float"
                ]
            }
        }
    },
    "qflow-master/tests/test_activation.py": {
        "test_identity": {
            "name": "test_identity",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "x": [
                    "int",
                    "typing.BinaryIO",
                    "list[]",
                    "list[int]"
                ]
            }
        },
        "test_relu": {
            "name": "test_relu",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "x": [
                    "int",
                    "float"
                ]
            }
        },
        "test_sigmoid": {
            "name": "test_sigmoid",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "x": [
                    "float",
                    "int"
                ]
            }
        },
        "test_tanh": {
            "name": "test_tanh",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "x": [
                    "list[float]",
                    "float",
                    "dict[, ]",
                    "tuple[typing.Union[float,float,float]]"
                ]
            }
        },
        "test_exponential": {
            "name": "test_exponential",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "x": [
                    "int",
                    "list[tuple[typing.Union[str,int,int]]]"
                ]
            }
        }
    },
    "qflow-master/tests/test_dnn.py": {
        "sigmoid_np": {
            "name": "sigmoid_np",
            "location": 13,
            "return": [
                "int"
            ],
            "arguments": {
                "x": [
                    "int",
                    "float"
                ]
            }
        },
        "sigmoid_deriv": {
            "name": "sigmoid_deriv",
            "location": 17,
            "return": [
                "int"
            ],
            "arguments": {
                "u": [
                    "int"
                ]
            }
        },
        "relu_np": {
            "name": "relu_np",
            "location": 21,
            "return": [],
            "arguments": {
                "x": [
                    "int",
                    "float",
                    "str"
                ]
            }
        },
        "relu_deriv": {
            "name": "relu_deriv",
            "location": 25,
            "return": [],
            "arguments": {
                "y": [
                    "int"
                ]
            }
        },
        "TestDnn.setUp": {
            "name": "setUp",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDnn.test_evaluate": {
            "name": "test_evaluate",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDnn.test_parameter_gradients": {
            "name": "test_parameter_gradients",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDnn.test_drift_force": {
            "name": "test_drift_force",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDnn.test_laplace": {
            "name": "test_laplace",
            "location": 99,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDnn.setUp.f": {
            "name": "f",
            "location": 49,
            "return": [],
            "arguments": {
                "x": [],
                "w1": [],
                "b1": [],
                "w2": [],
                "b2": [],
                "w3": [],
                "b3": []
            }
        }
    },
    "qflow-master/tests/test_dnn_benchmark.py": {
        "local_energy_gradient": {
            "name": "local_energy_gradient",
            "location": 33,
            "return": [],
            "arguments": {
                "H": [],
                "psi": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ],
                "sampler": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ],
                "samples": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ]
            }
        },
        "test_dnn_eval": {
            "name": "test_dnn_eval",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "benchmark": [
                    "str",
                    "float"
                ]
            }
        },
        "test_dnn_gradient": {
            "name": "test_dnn_gradient",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "benchmark": [
                    "str",
                    "float"
                ]
            }
        },
        "test_dnn_laplacian": {
            "name": "test_dnn_laplacian",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "benchmark": [
                    "str",
                    "float"
                ]
            }
        }
    },
    "qflow-master/tests/test_fixedwavefunction.py": {
        "test_consistent_with_original": {
            "name": "test_consistent_with_original",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_set_parameters_is_noop": {
            "name": "test_set_parameters_is_noop",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_set_parameters_is_noop_in_wavefunction_product": {
            "name": "test_set_parameters_is_noop_in_wavefunction_product",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "qflow-master/tests/test_hamiltonian_benchmarks.py": {
        "local_energy_gradient": {
            "name": "local_energy_gradient",
            "location": 17,
            "return": [],
            "arguments": {
                "H": [],
                "psi": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ],
                "sampler": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ],
                "samples": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ]
            }
        },
        "test_E_L_small": {
            "name": "test_E_L_small",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "benchmark": [
                    "typing.Callable[, ]"
                ]
            }
        },
        "test_E_L_grad_small": {
            "name": "test_E_L_grad_small",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "benchmark": [
                    "typing.Callable[, ]"
                ]
            }
        },
        "test_mean_dist_small": {
            "name": "test_mean_dist_small",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "benchmark": [
                    "typing.Callable[, ]"
                ]
            }
        },
        "test_E_L_large": {
            "name": "test_E_L_large",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "benchmark": [
                    "typing.Callable[, ]"
                ]
            }
        },
        "test_E_L_grad_large": {
            "name": "test_E_L_grad_large",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "benchmark": [
                    "typing.Callable[, ]"
                ]
            }
        },
        "test_mean_dist_large": {
            "name": "test_mean_dist_large",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "benchmark": [
                    "typing.Callable[, ]"
                ]
            }
        },
        "test_mean_dist_large_cached": {
            "name": "test_mean_dist_large_cached",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "benchmark": [
                    "typing.Callable[, ]"
                ]
            }
        }
    },
    "qflow-master/tests/test_input_sorter.py": {
        "test_symmetry": {
            "name": "test_symmetry",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "P": [
                    "int",
                    "list[str]",
                    "float",
                    "tuple[typing.Union[float,float,float,float]]"
                ],
                "D": [
                    "int",
                    "list[str]",
                    "float",
                    "tuple[typing.Union[float,float,float,float]]"
                ]
            }
        }
    },
    "qflow-master/tests/test_jastrow_mcmillian.py": {
        "jastrow_np": {
            "name": "jastrow_np",
            "location": 19,
            "return": [],
            "arguments": {
                "X": [
                    "int",
                    "list[]"
                ],
                "n": [
                    "int",
                    "float"
                ],
                "beta": [
                    "int",
                    "float"
                ]
            }
        },
        "is_jastrow_np_adjusted": {
            "name": "is_jastrow_np_adjusted",
            "location": 35,
            "return": [
                "bool"
            ],
            "arguments": {
                "X": [
                    "int",
                    "float"
                ],
                "n": [
                    "int",
                    "list[str]"
                ],
                "beta": [
                    "int",
                    "list[str]"
                ]
            }
        },
        "test_eval": {
            "name": "test_eval",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "X": [
                    "bool"
                ],
                "beta": [
                    "float",
                    "list['cirq.Qid']",
                    "bool"
                ]
            }
        },
        "test_gradient": {
            "name": "test_gradient",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "X": [
                    "float",
                    "list[float]",
                    "int",
                    "dict[, ]"
                ],
                "beta": [
                    "float",
                    "list[float]",
                    "int",
                    "dict[, ]"
                ]
            }
        },
        "test_drift_force": {
            "name": "test_drift_force",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "X": [
                    "float",
                    "typing.Sequence['cirq.Qid']"
                ],
                "beta": [
                    "float"
                ]
            }
        },
        "test_laplace": {
            "name": "test_laplace",
            "location": 97,
            "return": [
                "None"
            ],
            "arguments": {
                "X": [
                    "float",
                    "list[float]"
                ],
                "beta": [
                    "float",
                    "int"
                ]
            }
        }
    },
    "qflow-master/tests/test_jastrow_orion.py": {
        "jastrow_np": {
            "name": "jastrow_np",
            "location": 15,
            "return": [],
            "arguments": {
                "X": [
                    "int"
                ],
                "beta": [],
                "gamma": [
                    "int",
                    "float",
                    "str"
                ]
            }
        },
        "test_eval": {
            "name": "test_eval",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "X": [
                    "float"
                ],
                "beta": [
                    "float",
                    "int"
                ],
                "gamma": [
                    "float",
                    "int"
                ]
            }
        },
        "test_gradient": {
            "name": "test_gradient",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "X": [
                    "float",
                    "list[float]",
                    "int",
                    "dict[, ]"
                ],
                "beta": [
                    "float",
                    "list[float]",
                    "int",
                    "dict[, ]"
                ],
                "gamma": [
                    "float",
                    "list[float]",
                    "int",
                    "dict[, ]"
                ]
            }
        },
        "test_drift_force": {
            "name": "test_drift_force",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "X": [
                    "float",
                    "list[float]",
                    "int",
                    "dict[, ]"
                ],
                "beta": [
                    "float",
                    "list[float]",
                    "int",
                    "dict[, ]"
                ],
                "gamma": [
                    "float",
                    "list[float]",
                    "int",
                    "dict[, ]"
                ]
            }
        },
        "test_laplace": {
            "name": "test_laplace",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "X": [
                    "int",
                    "typing.Sequence['cirq.Qid']",
                    "float"
                ],
                "beta": [
                    "int",
                    "typing.Sequence['cirq.Qid']",
                    "float"
                ],
                "gamma": [
                    "int",
                    "typing.Sequence['cirq.Qid']",
                    "float"
                ]
            }
        }
    },
    "qflow-master/tests/test_jastrow_pade.py": {
        "jastrow_np": {
            "name": "jastrow_np",
            "location": 15,
            "return": [],
            "arguments": {
                "X": [
                    "int"
                ],
                "alpha": [
                    "int",
                    "float"
                ],
                "beta": [
                    "int",
                    "float"
                ]
            }
        },
        "test_eval": {
            "name": "test_eval",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "X": [
                    "float"
                ],
                "beta": [
                    "float",
                    "list[float]"
                ]
            }
        },
        "test_gradient": {
            "name": "test_gradient",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "X": [
                    "float",
                    "list[float]",
                    "int",
                    "dict[, ]"
                ],
                "alpha": [
                    "float",
                    "list[float]",
                    "int",
                    "dict[, ]"
                ],
                "beta": [
                    "float",
                    "list[float]",
                    "int",
                    "dict[, ]"
                ]
            }
        },
        "test_drift_force": {
            "name": "test_drift_force",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "X": [
                    "float",
                    "list[float]",
                    "int"
                ],
                "beta": [
                    "float",
                    "list[float]",
                    "int"
                ]
            }
        },
        "test_laplace": {
            "name": "test_laplace",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "X": [
                    "float",
                    "typing.Sequence['cirq.Qid']",
                    "str"
                ],
                "beta": [
                    "float",
                    "typing.Sequence['cirq.Qid']",
                    "str"
                ]
            }
        }
    },
    "qflow-master/tests/test_metrics.py": {
        "test_ideal_harmonic_oscillator": {
            "name": "test_ideal_harmonic_oscillator",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "qflow-master/tests/test_simplegaussian.py": {
        "psi_np": {
            "name": "psi_np",
            "location": 12,
            "return": [],
            "arguments": {
                "X": [
                    "float"
                ],
                "alpha": [
                    "int"
                ],
                "beta": [
                    "float",
                    "int",
                    "bytes"
                ]
            }
        },
        "test_eval": {
            "name": "test_eval",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "X": [
                    "float"
                ],
                "alpha": [
                    "float",
                    "int",
                    "dict[str, numpy.ndarray]"
                ],
                "beta": [
                    "float",
                    "int",
                    "dict[str, numpy.ndarray]"
                ]
            }
        },
        "test_gradient": {
            "name": "test_gradient",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "X": [
                    "float"
                ],
                "alpha": [
                    "dict[str, numpy.ndarray]"
                ],
                "beta": [
                    "dict[str, numpy.ndarray]"
                ]
            }
        },
        "test_drift_force": {
            "name": "test_drift_force",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "X": [
                    "list[]",
                    "list[str]",
                    "int"
                ],
                "alpha": [
                    "dict[str, numpy.ndarray]"
                ],
                "beta": [
                    "dict[str, numpy.ndarray]"
                ]
            }
        },
        "test_laplacian": {
            "name": "test_laplacian",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "X": [
                    "float",
                    "typing.Sequence['cirq.Qid']"
                ],
                "alpha": [
                    "float",
                    "typing.Sequence['cirq.Qid']",
                    "int"
                ],
                "beta": [
                    "float",
                    "typing.Sequence['cirq.Qid']",
                    "int"
                ]
            }
        }
    },
    "qflow-master/tests/test_sum_pooling.py": {
        "sum_pool_np": {
            "name": "sum_pool_np",
            "location": 15,
            "return": [],
            "arguments": {
                "X": [],
                "alpha": [
                    "bool",
                    "float",
                    "typing.Iterable[typing.Iterable[float]]",
                    "str",
                    "bytes"
                ]
            }
        },
        "test_eval": {
            "name": "test_eval",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "X": [
                    "float",
                    "list[float]",
                    "int"
                ],
                "alpha": [
                    "float",
                    "typing.Sequence['cirq.Qid']",
                    "int"
                ]
            }
        },
        "test_gradient": {
            "name": "test_gradient",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "X": [
                    "float"
                ],
                "alpha": [
                    "list[numpy.ndarray]",
                    "float",
                    "typing.Sequence['cirq.Qid']"
                ]
            }
        },
        "test_drift_force": {
            "name": "test_drift_force",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "X": [
                    "None",
                    "int"
                ],
                "alpha": [
                    "float",
                    "typing.Sequence['cirq.Qid']",
                    "int"
                ]
            }
        },
        "test_laplacian": {
            "name": "test_laplacian",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "X": [
                    "bool",
                    "float"
                ],
                "alpha": [
                    "float",
                    "bytes",
                    "str"
                ]
            }
        },
        "sum_pool_np.psi": {
            "name": "psi",
            "location": 16,
            "return": [],
            "arguments": {
                "X": []
            }
        }
    },
    "qflow-master/tests/test_symmetric_rbm.py": {
        "sym_to_full": {
            "name": "sym_to_full",
            "location": 13,
            "return": [
                "tuple[typing.Union[list[int],list[float],int,float,str]]"
            ],
            "arguments": {
                "X": [],
                "a": [
                    "float",
                    "int"
                ],
                "b": [
                    "int",
                    "float",
                    "str"
                ],
                "w": [
                    "int",
                    "float"
                ]
            }
        },
        "rbm_np": {
            "name": "rbm_np",
            "location": 24,
            "return": [],
            "arguments": {
                "X": [
                    "int"
                ],
                "a": [
                    "int"
                ],
                "b": [
                    "float",
                    "int"
                ],
                "w": [],
                "sigma2": [
                    "int"
                ]
            }
        },
        "srbm_np": {
            "name": "srbm_np",
            "location": 31,
            "return": [],
            "arguments": {
                "X": [
                    "int"
                ],
                "a": [
                    "int",
                    "float"
                ],
                "b": [
                    "int"
                ],
                "w": [],
                "sigma2": [
                    "int"
                ]
            }
        },
        "randomized": {
            "name": "randomized",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "test_func": [
                    "int",
                    "tuple[]",
                    "list[]",
                    "float",
                    "tuple[typing.Union[int,int]]"
                ],
                "size": [
                    "int"
                ],
                "max_dim": [
                    "int"
                ]
            }
        },
        "test_evaluation_consistency": {
            "name": "test_evaluation_consistency",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_evaluation": {
            "name": "test_evaluation",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_gradient": {
            "name": "test_gradient",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_drift_force": {
            "name": "test_drift_force",
            "location": 113,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_laplacian": {
            "name": "test_laplacian",
            "location": 130,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_evaluation_consistency.test": {
            "name": "test",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "srbm": [],
                "X": [],
                "a": [],
                "b": [],
                "w": [],
                "sigma2": []
            }
        },
        "test_evaluation.test": {
            "name": "test",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "srbm": [],
                "X": [],
                "a": [],
                "b": [],
                "w": [],
                "sigma2": []
            }
        },
        "test_gradient.test": {
            "name": "test",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {
                "srbm": [],
                "X": [],
                "a": [],
                "b": [],
                "w": [],
                "sigma2": []
            }
        },
        "test_drift_force.test": {
            "name": "test",
            "location": 114,
            "return": [
                "None"
            ],
            "arguments": {
                "srbm": [],
                "X": [],
                "a": [],
                "b": [],
                "w": [],
                "sigma2": []
            }
        },
        "test_laplacian.test": {
            "name": "test",
            "location": 131,
            "return": [
                "None"
            ],
            "arguments": {
                "srbm": [],
                "X": [],
                "a": [],
                "b": [],
                "w": [],
                "sigma2": []
            }
        }
    },
    "qflow-master/tests/test_symmetry_metric.py": {
        "test_gaussian_is_symmetric": {
            "name": "test_gaussian_is_symmetric",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "P": [
                    "str",
                    "int"
                ],
                "D": [
                    "str",
                    "int"
                ],
                "alpha": [
                    "str"
                ]
            }
        },
        "test_symmetric_rbm_is_symmetric": {
            "name": "test_symmetric_rbm_is_symmetric",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "P": [],
                "D": [],
                "N": [
                    "list[int]",
                    "tuple[]",
                    "bool"
                ],
                "sigma2": [
                    "list[int]",
                    "tuple[]",
                    "bool"
                ]
            }
        }
    },
    "qflow-master/tests/test_wavefunctionproduct.py": {
        "test_works_on_simple_gaussians": {
            "name": "test_works_on_simple_gaussians",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "qflow-master/tests/__init__.py": {},
    "qflow-master/writing/scripts/blocking-example-diagram.py": {},
    "qflow-master/writing/scripts/He-benchmark.py": {
        "plot_training": {
            "name": "plot_training",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "energies": [],
                "parameters": []
            }
        }
    },
    "qflow-master/writing/scripts/He-mcmillan-dnn.py": {
        "plot_training": {
            "name": "plot_training",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "energies": [],
                "parameters": []
            }
        }
    },
    "qflow-master/writing/scripts/linear_regression_example.py": {},
    "qflow-master/writing/scripts/monte_carlo_int_example.py": {
        "gauss": {
            "name": "gauss",
            "location": 10,
            "return": [],
            "arguments": {
                "x": [
                    "int"
                ],
                "mu": [
                    "int"
                ],
                "sigma": [
                    "int"
                ]
            }
        },
        "f": {
            "name": "f",
            "location": 16,
            "return": [
                "float"
            ],
            "arguments": {
                "x": [
                    "float"
                ]
            }
        }
    },
    "qflow-master/writing/scripts/mpi-speed-test.py": {},
    "qflow-master/writing/scripts/openmp_test.py": {},
    "qflow-master/writing/scripts/QD-benchmark-density.py": {},
    "qflow-master/writing/scripts/QD-benchmark-onebody.py": {},
    "qflow-master/writing/scripts/QD-benchmark.py": {
        "plot_training": {
            "name": "plot_training",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "energies": [
                    "dict[str, typing.Any]",
                    "set[str]",
                    "typing.Callable[, ]",
                    "int"
                ],
                "parameters": [
                    "dict[str, typing.Any]",
                    "set[str]",
                    "typing.Callable[, ]",
                    "int"
                ]
            }
        }
    },
    "qflow-master/writing/scripts/QD-other-metrics.py": {},
    "qflow-master/writing/scripts/QD-pade-dnn.py": {
        "plot_training": {
            "name": "plot_training",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "energies": [],
                "parameters": [],
                "symmetries": [
                    "dict[str, typing.Any]",
                    "set[str]",
                    "typing.Callable[, ]",
                    "int"
                ]
            }
        }
    },
    "qflow-master/writing/scripts/QD-plot-parameters.py": {},
    "qflow-master/writing/scripts/QD-rbm.py": {
        "plot_training": {
            "name": "plot_training",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "energies": [
                    "dict[str, typing.Any]",
                    "set[str]",
                    "typing.Callable[, ]",
                    "str",
                    "int"
                ],
                "symmetries": [
                    "dict[str, typing.Any]",
                    "set[str]",
                    "typing.Callable[, ]",
                    "str",
                    "int"
                ],
                "parameters": [
                    "str"
                ]
            }
        }
    },
    "qflow-master/writing/scripts/quickstart.py": {},
    "qflow-master/writing/scripts/verify-energy-stats.py": {},
    "qflow-master/writing/scripts/verify-learning-rate-gaussian.py": {},
    "qflow-master/writing/scripts/verify-learning-rate-rbm.py": {},
    "qflow-master/writing/scripts/verify-onebody-density.py": {},
    "qflow-master/writing/scripts/verify-sampling-step.py": {},
    "qflow-master/writing/scripts/verify-simple-gaussian.py": {},
    "qflow-master/writing/scripts/verify-twobody-density.py": {}
}
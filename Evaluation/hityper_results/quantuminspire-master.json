{
    "quantuminspire-master/setup.py": {
        "get_version_number": {
            "name": "get_version_number",
            "location": 21,
            "return": [
                "str"
            ],
            "arguments": {
                "module": [
                    "str",
                    "bool",
                    "float"
                ]
            }
        },
        "get_long_description": {
            "name": "get_long_description",
            "location": 33,
            "return": [],
            "arguments": {}
        }
    },
    "quantuminspire-master/version.py": {},
    "quantuminspire-master/docs/conf.py": {},
    "quantuminspire-master/docs/examples/example_projectq_entangle.py": {},
    "quantuminspire-master/docs/examples/example_projectq_grover.py": {
        "run_grover": {
            "name": "run_grover",
            "location": 21,
            "return": [
                "list[int]"
            ],
            "arguments": {
                "eng": [],
                "n": [
                    "int"
                ],
                "oracle": [
                    "int"
                ]
            }
        },
        "alternating_bits_oracle": {
            "name": "alternating_bits_oracle",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "eng": [
                    "str",
                    "typing.Iterable[float]",
                    "int"
                ],
                "qubits": [
                    "list[str]"
                ],
                "output": [
                    "str",
                    "typing.Iterable[float]",
                    "int"
                ]
            }
        }
    },
    "quantuminspire-master/docs/examples/example_qiskit_conditional.py": {},
    "quantuminspire-master/docs/examples/example_qiskit_entangle.py": {},
    "quantuminspire-master/src/quantuminspire/api.py": {
        "VersionedAPITransport.__init__": {
            "name": "__init__",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "api_version": [
                    "typing.Text"
                ],
                "auth": [
                    "None",
                    "str"
                ]
            }
        },
        "VersionedAPITransport.headers": {
            "name": "headers",
            "location": 55,
            "return": [
                "dict[typing.Text, typing.Text]"
            ],
            "arguments": {
                "self": []
            }
        },
        "QuantumInspireAPI.__init__": {
            "name": "__init__",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "base_uri": [
                    "typing.Text"
                ],
                "authentication": [
                    "None",
                    "str",
                    "bool"
                ],
                "project_name": [
                    "None",
                    "str"
                ],
                "coreapi_client_class": []
            }
        },
        "QuantumInspireAPI._get": {
            "name": "_get",
            "location": 136,
            "return": [],
            "arguments": {
                "self": [],
                "uri_path": [
                    "str"
                ]
            }
        },
        "QuantumInspireAPI.show_fsp_warning": {
            "name": "show_fsp_warning",
            "location": 159,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "enable": [
                    "bool"
                ]
            }
        },
        "QuantumInspireAPI._action": {
            "name": "_action",
            "location": 167,
            "return": [],
            "arguments": {
                "self": [],
                "action": [
                    "str",
                    "bool"
                ],
                "params": [
                    "None",
                    "str",
                    "bool"
                ]
            }
        },
        "QuantumInspireAPI._load_schema": {
            "name": "_load_schema",
            "location": 186,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "QuantumInspireAPI.list_backend_types": {
            "name": "list_backend_types",
            "location": 190,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "QuantumInspireAPI.get_default_backend_type": {
            "name": "get_default_backend_type",
            "location": 196,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "QuantumInspireAPI.get_backend_types": {
            "name": "get_backend_types",
            "location": 234,
            "return": [
                "list[dict[str, typing.Any]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "QuantumInspireAPI.get_backend_type_by_id": {
            "name": "get_backend_type_by_id",
            "location": 245,
            "return": [],
            "arguments": {
                "self": [],
                "backend_type_id": [
                    "str",
                    "int"
                ]
            }
        },
        "QuantumInspireAPI.get_backend_type_by_name": {
            "name": "get_backend_type_by_name",
            "location": 263,
            "return": [],
            "arguments": {
                "self": [],
                "backend_name": [
                    "str"
                ]
            }
        },
        "QuantumInspireAPI.get_backend_type": {
            "name": "get_backend_type",
            "location": 281,
            "return": [],
            "arguments": {
                "self": [],
                "identifier": [
                    "None",
                    "int",
                    "str",
                    "typing.Type"
                ]
            }
        },
        "QuantumInspireAPI.list_projects": {
            "name": "list_projects",
            "location": 310,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "QuantumInspireAPI.get_project": {
            "name": "get_project",
            "location": 320,
            "return": [],
            "arguments": {
                "self": [],
                "project_id": [
                    "str",
                    "None"
                ]
            }
        },
        "QuantumInspireAPI.get_projects": {
            "name": "get_projects",
            "location": 351,
            "return": [
                "list[dict[str, typing.Any]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "QuantumInspireAPI.create_project": {
            "name": "create_project",
            "location": 361,
            "return": [],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "None",
                    "bool",
                    "set[str]",
                    "dict[str, list[typing.Any]]"
                ],
                "default_number_of_shots": [
                    "str",
                    "None",
                    "bool",
                    "set[str]",
                    "dict[str, list[typing.Any]]"
                ],
                "backend_type": [
                    "str"
                ]
            }
        },
        "QuantumInspireAPI.delete_project": {
            "name": "delete_project",
            "location": 380,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "project_id": [
                    "int",
                    "str"
                ]
            }
        },
        "QuantumInspireAPI.list_jobs": {
            "name": "list_jobs",
            "location": 400,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "QuantumInspireAPI.get_job": {
            "name": "get_job",
            "location": 410,
            "return": [],
            "arguments": {
                "self": [],
                "job_id": [
                    "str",
                    "None",
                    "int"
                ]
            }
        },
        "QuantumInspireAPI.get_jobs": {
            "name": "get_jobs",
            "location": 449,
            "return": [
                "list[dict[str, typing.Any]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "QuantumInspireAPI.get_jobs_from_asset": {
            "name": "get_jobs_from_asset",
            "location": 459,
            "return": [
                "list[dict[str, typing.Any]]",
                "list[dict[str, str]]",
                "int",
                "float"
            ],
            "arguments": {
                "self": [],
                "asset_id": [
                    "str",
                    "int"
                ]
            }
        },
        "QuantumInspireAPI.get_jobs_from_project": {
            "name": "get_jobs_from_project",
            "location": 477,
            "return": [
                "list[dict[str, typing.Any]]",
                "int"
            ],
            "arguments": {
                "self": [],
                "project_id": [
                    "str",
                    "None"
                ]
            }
        },
        "QuantumInspireAPI.delete_job": {
            "name": "delete_job",
            "location": 495,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "job_id": [
                    "str",
                    "int"
                ]
            }
        },
        "QuantumInspireAPI._create_job": {
            "name": "_create_job",
            "location": 509,
            "return": [],
            "arguments": {
                "self": [],
                "name": [
                    "dict[, ]",
                    "int",
                    "str",
                    "None",
                    "list[str]"
                ],
                "asset": [
                    "str",
                    "list[str]"
                ],
                "number_of_shots": [
                    "str",
                    "list[str]",
                    "int",
                    "dict[, ]",
                    "dict[str, str]",
                    "None"
                ],
                "backend_type": [],
                "full_state_projection": [
                    "bool"
                ],
                "user_data": [
                    "typing.Text"
                ]
            }
        },
        "QuantumInspireAPI.list_results": {
            "name": "list_results",
            "location": 548,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "QuantumInspireAPI.get_result": {
            "name": "get_result",
            "location": 558,
            "return": [],
            "arguments": {
                "self": [],
                "result_id": [
                    "str",
                    "int"
                ]
            }
        },
        "QuantumInspireAPI.get_results": {
            "name": "get_results",
            "location": 609,
            "return": [
                "list[dict[str, typing.Any]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "QuantumInspireAPI.get_result_from_job": {
            "name": "get_result_from_job",
            "location": 619,
            "return": [],
            "arguments": {
                "self": [],
                "job_id": [
                    "str",
                    "None"
                ]
            }
        },
        "QuantumInspireAPI.get_raw_data_from_result": {
            "name": "get_raw_data_from_result",
            "location": 636,
            "return": [
                "list[list[typing.Any]]"
            ],
            "arguments": {
                "self": [],
                "result_id": [
                    "str",
                    "list[int]",
                    "list[]",
                    "typing.Any",
                    "None",
                    "int"
                ]
            }
        },
        "QuantumInspireAPI.get_quantum_states_from_result": {
            "name": "get_quantum_states_from_result",
            "location": 682,
            "return": [
                "list[list[typing.Any]]",
                "list[list[dict[, ]]]"
            ],
            "arguments": {
                "self": [],
                "result_id": [
                    "str",
                    "list[int]",
                    "typing.Any",
                    "None",
                    "list[]",
                    "dict[str, str]",
                    "int"
                ]
            }
        },
        "QuantumInspireAPI.get_measurement_register_from_result": {
            "name": "get_measurement_register_from_result",
            "location": 708,
            "return": [
                "list[list[typing.Any]]"
            ],
            "arguments": {
                "self": [],
                "result_id": [
                    "str",
                    "list[int]",
                    "list[]",
                    "typing.Any",
                    "None",
                    "typing.Type"
                ]
            }
        },
        "QuantumInspireAPI.get_calibration_from_result": {
            "name": "get_calibration_from_result",
            "location": 734,
            "return": [
                "None",
                "set[str]",
                "dict[str, typing.Union[typing.Any,bool]]",
                "dict[, ]",
                "int"
            ],
            "arguments": {
                "self": [],
                "result_id": [
                    "str",
                    "int"
                ]
            }
        },
        "QuantumInspireAPI.list_assets": {
            "name": "list_assets",
            "location": 762,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "QuantumInspireAPI.get_asset": {
            "name": "get_asset",
            "location": 770,
            "return": [],
            "arguments": {
                "self": [],
                "asset_id": [
                    "str",
                    "int"
                ]
            }
        },
        "QuantumInspireAPI.get_assets": {
            "name": "get_assets",
            "location": 803,
            "return": [
                "list[dict[str, typing.Any]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "QuantumInspireAPI.get_assets_from_project": {
            "name": "get_assets_from_project",
            "location": 813,
            "return": [
                "list[dict[str, typing.Any]]"
            ],
            "arguments": {
                "self": [],
                "project_id": [
                    "str",
                    "int",
                    "list[str]"
                ]
            }
        },
        "QuantumInspireAPI.get_asset_from_job": {
            "name": "get_asset_from_job",
            "location": 830,
            "return": [],
            "arguments": {
                "self": [],
                "job_id": [
                    "str",
                    "int"
                ]
            }
        },
        "QuantumInspireAPI._create_asset": {
            "name": "_create_asset",
            "location": 853,
            "return": [],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "set[str]"
                ],
                "project": [
                    "str"
                ],
                "content": [
                    "str",
                    "set[str]"
                ]
            }
        },
        "QuantumInspireAPI._wait_for_completed_job": {
            "name": "_wait_for_completed_job",
            "location": 879,
            "return": [
                "tuple[typing.Union[bool,typing.Text]]"
            ],
            "arguments": {
                "quantum_inspire_job": [],
                "collect_max_tries": [
                    "None",
                    "int",
                    "list[int]",
                    "str"
                ],
                "sec_retry_delay": [
                    "float"
                ]
            }
        },
        "QuantumInspireAPI._generate_error_result": {
            "name": "_generate_error_result",
            "location": 906,
            "return": [
                "dict[typing.Text, typing.Union[list[],int,str,None]]"
            ],
            "arguments": {
                "message": [
                    "int",
                    "str",
                    "None"
                ]
            }
        },
        "QuantumInspireAPI.execute_qasm": {
            "name": "execute_qasm",
            "location": 920,
            "return": [],
            "arguments": {
                "self": [],
                "qasm": [
                    "int",
                    "None",
                    "str"
                ],
                "backend_type": [
                    "None",
                    "int",
                    "str"
                ],
                "number_of_shots": [
                    "None",
                    "int",
                    "str"
                ],
                "collect_tries": [
                    "None",
                    "str",
                    "int",
                    "list[str]"
                ],
                "default_number_of_shots": [
                    "None",
                    "int",
                    "str"
                ],
                "identifier": [
                    "None",
                    "int",
                    "str"
                ],
                "full_state_projection": [
                    "bool"
                ],
                "user_data": [
                    "typing.Text"
                ]
            }
        },
        "QuantumInspireAPI.execute_qasm_async": {
            "name": "execute_qasm_async",
            "location": 974,
            "return": [
                "QuantumInspireJob"
            ],
            "arguments": {
                "self": [],
                "qasm": [
                    "str"
                ],
                "backend_type": [
                    "str"
                ],
                "number_of_shots": [
                    "None",
                    "int",
                    "str",
                    "float",
                    "typing.Callable[typing.Any, bool]"
                ],
                "default_number_of_shots": [
                    "None",
                    "str",
                    "typing.Callable[, ]",
                    "list[str]"
                ],
                "identifier": [
                    "None",
                    "str",
                    "dict[str, typing.Any]"
                ],
                "full_state_projection": [
                    "bool"
                ],
                "project": [
                    "None",
                    "int"
                ],
                "job_name": [
                    "None",
                    "dict[, ]",
                    "bool",
                    "str"
                ],
                "user_data": [
                    "typing.Text"
                ]
            }
        }
    },
    "quantuminspire-master/src/quantuminspire/credentials.py": {
        "load_account": {
            "name": "load_account",
            "location": 49,
            "return": [
                "str",
                "set[str]",
                "list[str]",
                "int"
            ],
            "arguments": {
                "filename": []
            }
        },
        "read_account": {
            "name": "read_account",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "filename": []
            }
        },
        "store_account": {
            "name": "store_account",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "token": [
                    "str",
                    "tuple[typing.Union[str,str]]",
                    "None"
                ],
                "filename": [],
                "overwrite": [
                    "bool"
                ]
            }
        },
        "delete_account": {
            "name": "delete_account",
            "location": 105,
            "return": [
                "None"
            ],
            "arguments": {
                "token": [
                    "str",
                    "bytes"
                ],
                "filename": []
            }
        },
        "save_account": {
            "name": "save_account",
            "location": 117,
            "return": [
                "None"
            ],
            "arguments": {
                "token": [
                    "str",
                    "dict[str, str]"
                ],
                "filename": []
            }
        },
        "enable_account": {
            "name": "enable_account",
            "location": 133,
            "return": [
                "None"
            ],
            "arguments": {
                "token": [
                    "str"
                ]
            }
        },
        "get_token_authentication": {
            "name": "get_token_authentication",
            "location": 144,
            "return": [
                "TokenAuthentication"
            ],
            "arguments": {
                "token": [
                    "None",
                    "str",
                    "bytes"
                ]
            }
        },
        "get_basic_authentication": {
            "name": "get_basic_authentication",
            "location": 158,
            "return": [
                "BasicAuthentication"
            ],
            "arguments": {
                "email": [
                    "str"
                ],
                "password": [
                    "str"
                ]
            }
        },
        "get_authentication": {
            "name": "get_authentication",
            "location": 170,
            "return": [],
            "arguments": {}
        }
    },
    "quantuminspire-master/src/quantuminspire/exceptions.py": {},
    "quantuminspire-master/src/quantuminspire/job.py": {
        "QuantumInspireJob.__init__": {
            "name": "__init__",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "api": [
                    "str",
                    "int",
                    "list[str]"
                ],
                "job_identifier": [
                    "int",
                    "typing.Mapping",
                    "str"
                ]
            }
        },
        "QuantumInspireJob.__check_arguments": {
            "name": "__check_arguments",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "api": [],
                "job_identifier": [
                    "list[str]",
                    "bool",
                    "dict[str, typing.Any]",
                    "None",
                    "list[int]"
                ]
            }
        },
        "QuantumInspireJob.check_status": {
            "name": "check_status",
            "location": 66,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "QuantumInspireJob.retrieve_results": {
            "name": "retrieve_results",
            "location": 75,
            "return": [
                "dict[str, typing.Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "QuantumInspireJob.get_job_identifier": {
            "name": "get_job_identifier",
            "location": 86,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "QuantumInspireJob.get_project_identifier": {
            "name": "get_project_identifier",
            "location": 94,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "quantuminspire-master/src/quantuminspire/version.py": {},
    "quantuminspire-master/src/quantuminspire/__init__.py": {},
    "quantuminspire-master/src/quantuminspire/projectq/backend_qx.py": {
        "QIBackend.__init__": {
            "name": "__init__",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "num_runs": [],
                "verbose": [
                    "int"
                ],
                "quantum_inspire_api": [
                    "None",
                    "typing.Type",
                    "float"
                ],
                "backend_type": [
                    "None",
                    "float",
                    "list[float]",
                    "dict[str, typing.Any]",
                    "bool"
                ]
            }
        },
        "QIBackend._get_one_qubit_gates": {
            "name": "_get_one_qubit_gates",
            "location": 93,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "QIBackend._get_two_qubit_gates": {
            "name": "_get_two_qubit_gates",
            "location": 109,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "QIBackend._get_three_qubit_gates": {
            "name": "_get_three_qubit_gates",
            "location": 124,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "QIBackend.one_qubit_gates": {
            "name": "one_qubit_gates",
            "location": 138,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "QIBackend.two_qubit_gates": {
            "name": "two_qubit_gates",
            "location": 143,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "QIBackend.three_qubit_gates": {
            "name": "three_qubit_gates",
            "location": 148,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "QIBackend.cqasm": {
            "name": "cqasm",
            "location": 152,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "QIBackend.qasm": {
            "name": "qasm",
            "location": 157,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "QIBackend.is_available": {
            "name": "is_available",
            "location": 161,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "cmd": [
                    "int",
                    "list[str]",
                    "str"
                ]
            }
        },
        "QIBackend._reset": {
            "name": "_reset",
            "location": 202,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "QIBackend._allocate_qubit": {
            "name": "_allocate_qubit",
            "location": 210,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "index_to_add": [
                    "int",
                    "None"
                ]
            }
        },
        "QIBackend._deallocate_qubit": {
            "name": "_deallocate_qubit",
            "location": 311,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "index_to_remove": [
                    "typing.Sequence[typing.Mapping]",
                    "int"
                ]
            }
        },
        "QIBackend._logical_to_physical": {
            "name": "_logical_to_physical",
            "location": 331,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "self": [],
                "logical_qubit_id": [
                    "int",
                    "str"
                ]
            }
        },
        "QIBackend._physical_to_simulated": {
            "name": "_physical_to_simulated",
            "location": 350,
            "return": [
                "tuple[typing.Union[int,int]]",
                "dict[str, int]",
                "str"
            ],
            "arguments": {
                "self": [],
                "physical_qubit_id": [
                    "tuple[typing.Union[int,int]]",
                    "dict[str, int]",
                    "str"
                ]
            }
        },
        "QIBackend._simulated_to_physical": {
            "name": "_simulated_to_physical",
            "location": 368,
            "return": [
                "str",
                "tuple[typing.Union[int,int]]",
                "int",
                "list[str]"
            ],
            "arguments": {
                "self": [],
                "simulated_qubit_id": [
                    "str",
                    "tuple[typing.Union[int,int]]",
                    "int",
                    "list[str]"
                ]
            }
        },
        "QIBackend._physical_to_logical": {
            "name": "_physical_to_logical",
            "location": 388,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "self": [],
                "physical_qubit_id": [
                    "str",
                    "int"
                ]
            }
        },
        "QIBackend._add_delayed_measurements": {
            "name": "_add_delayed_measurements",
            "location": 411,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "QIBackend._switch_fsp_to_nonfsp": {
            "name": "_switch_fsp_to_nonfsp",
            "location": 423,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "QIBackend._store": {
            "name": "_store",
            "location": 432,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cmd": [
                    "float"
                ]
            }
        },
        "QIBackend.get_probabilities": {
            "name": "get_probabilities",
            "location": 536,
            "return": [
                "dict[, ]"
            ],
            "arguments": {
                "self": [],
                "qureg": []
            }
        },
        "QIBackend.get_probabilities_multiple_measurement": {
            "name": "get_probabilities_multiple_measurement",
            "location": 566,
            "return": [
                "list[dict[, ]]"
            ],
            "arguments": {
                "self": [],
                "qureg": []
            }
        },
        "QIBackend._map_state_to_bit_string": {
            "name": "_map_state_to_bit_string",
            "location": 600,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": [],
                "state": [],
                "qureg": [
                    "str"
                ]
            }
        },
        "QIBackend._run": {
            "name": "_run",
            "location": 632,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "QIBackend._finalize_qasm": {
            "name": "_finalize_qasm",
            "location": 651,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "QIBackend._execute_cqasm": {
            "name": "_execute_cqasm",
            "location": 661,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "QIBackend._filter_result_by_measured_qubits": {
            "name": "_filter_result_by_measured_qubits",
            "location": 680,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "QIBackend._filter_histogram": {
            "name": "_filter_histogram",
            "location": 695,
            "return": [],
            "arguments": {
                "histogram": [
                    "dict[str, int]",
                    "dict[str, float]",
                    "dict[str, dict[str, typing.Any]]"
                ],
                "mask_bits": [
                    "dict[str, tuple[typing.Union[int,int]]]",
                    "list[int]",
                    "list[float]",
                    "tuple[]"
                ]
            }
        },
        "QIBackend._register_random_measurement_outcome": {
            "name": "_register_random_measurement_outcome",
            "location": 724,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "QIBackend._get_measured_qubit_iterator": {
            "name": "_get_measured_qubit_iterator",
            "location": 742,
            "return": [
                "dict[str, typing.Any]"
            ],
            "arguments": {
                "self": [],
                "measurement_block_index": [
                    "int",
                    "str"
                ]
            }
        },
        "QIBackend._sample_measured_states_once": {
            "name": "_sample_measured_states_once",
            "location": 760,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "QIBackend._number_of_qubits": {
            "name": "_number_of_qubits",
            "location": 770,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "QIBackend.receive": {
            "name": "receive",
            "location": 777,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "command_list": [
                    "list[tuple[typing.Union[str,str]]]",
                    "list[]",
                    "list[str]"
                ]
            }
        },
        "QIBackend.__add_measure_all_qubits": {
            "name": "__add_measure_all_qubits",
            "location": 791,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "QIBackend._register_random_measurement_outcome.QB.__init__": {
            "name": "__init__",
            "location": 730,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "qubit_id": []
            }
        }
    },
    "quantuminspire-master/src/quantuminspire/projectq/__init__.py": {},
    "quantuminspire-master/src/quantuminspire/qiskit/backend_qx.py": {
        "QuantumInspireBackend.__init__": {
            "name": "__init__",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "api": [
                    "str",
                    "int"
                ],
                "provider": [
                    "bool",
                    "dict[str, typing.Any]",
                    "typing.Callable[A, bool]"
                ],
                "configuration": [
                    "None",
                    "bool",
                    "dict[str, typing.Any]",
                    "typing.Callable[A, bool]"
                ]
            }
        },
        "QuantumInspireBackend._default_options": {
            "name": "_default_options",
            "location": 108,
            "return": [
                "Options"
            ],
            "arguments": {
                "cls": [
                    "dict[str, typing.Any]",
                    "dict[int, str]",
                    "list[str]",
                    "bytes",
                    "str"
                ]
            }
        },
        "QuantumInspireBackend._get_run_config": {
            "name": "_get_run_config",
            "location": 113,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "QuantumInspireBackend.backend_name": {
            "name": "backend_name",
            "location": 129,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "QuantumInspireBackend.run": {
            "name": "run",
            "location": 132,
            "return": [
                "QIJob"
            ],
            "arguments": {
                "self": [],
                "run_input": [
                    "typing.Callable[, ]",
                    "str",
                    "dict[, ]"
                ],
                "shots": [
                    "None",
                    "dict[, ]"
                ],
                "memory": [
                    "None"
                ]
            }
        },
        "QuantumInspireBackend.status": {
            "name": "status",
            "location": 206,
            "return": [
                "BackendStatus"
            ],
            "arguments": {
                "self": []
            }
        },
        "QuantumInspireBackend.retrieve_job": {
            "name": "retrieve_job",
            "location": 221,
            "return": [
                "QIJob"
            ],
            "arguments": {
                "self": [],
                "job_id": []
            }
        },
        "QuantumInspireBackend._generate_cqasm": {
            "name": "_generate_cqasm",
            "location": 237,
            "return": [],
            "arguments": {
                "self": [],
                "experiment": [
                    "dict[str, typing.Any]",
                    "dict[, ]",
                    "float",
                    "int"
                ],
                "measurements": [
                    "bool",
                    "str",
                    "list[]"
                ],
                "full_state_projection": [
                    "bool"
                ]
            }
        },
        "QuantumInspireBackend._submit_experiment": {
            "name": "_submit_experiment",
            "location": 263,
            "return": [
                "str",
                "dict[, ]"
            ],
            "arguments": {
                "self": [],
                "experiment": [
                    "list[tuple[typing.Union[int,int]]]",
                    "list[dict[str, typing.Any]]",
                    "list[]"
                ],
                "number_of_shots": [
                    "list[str]",
                    "dict[str, str]",
                    "list[typing.Callable[, ]]"
                ],
                "measurements": [],
                "project": [
                    "None",
                    "list[str]",
                    "dict[str, str]",
                    "list[typing.Callable[, ]]"
                ],
                "full_state_projection": [
                    "bool"
                ]
            }
        },
        "QuantumInspireBackend._get_experiment_results": {
            "name": "_get_experiment_results",
            "location": 277,
            "return": [
                "list[ExperimentResult]"
            ],
            "arguments": {
                "self": [],
                "jobs": [
                    "list[]",
                    "list[dict[, ]]",
                    "list[str]"
                ]
            }
        },
        "QuantumInspireBackend.get_experiment_results_from_latest_run": {
            "name": "get_experiment_results_from_latest_run",
            "location": 319,
            "return": [],
            "arguments": {
                "self": [],
                "qi_job": []
            }
        },
        "QuantumInspireBackend.get_experiment_results_from_all_jobs": {
            "name": "get_experiment_results_from_all_jobs",
            "location": 330,
            "return": [],
            "arguments": {
                "self": [],
                "qi_job": []
            }
        },
        "QuantumInspireBackend.__validate_number_of_shots": {
            "name": "__validate_number_of_shots",
            "location": 341,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "number_of_shots": []
            }
        },
        "QuantumInspireBackend.__validate_nr_of_clbits_conditional_gates": {
            "name": "__validate_nr_of_clbits_conditional_gates",
            "location": 351,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "experiment": [
                    "dict[, ]",
                    "typing.Callable[typing.Any, bool]",
                    "list[dict[, ]]",
                    "dict[str, typing.Any]",
                    "str"
                ]
            }
        },
        "QuantumInspireBackend.__validate_full_state_projection": {
            "name": "__validate_full_state_projection",
            "location": 384,
            "return": [
                "bool"
            ],
            "arguments": {
                "experiment": [
                    "float",
                    "str"
                ]
            }
        },
        "QuantumInspireBackend.__convert_histogram": {
            "name": "__convert_histogram",
            "location": 407,
            "return": [
                "list[]"
            ],
            "arguments": {
                "result": [
                    "str"
                ],
                "measurements": [
                    "str",
                    "typing.Iterable[]",
                    "int"
                ]
            }
        },
        "QuantumInspireBackend.__raw_qubit_register_to_raw_data_value": {
            "name": "__raw_qubit_register_to_raw_data_value",
            "location": 434,
            "return": [
                "int"
            ],
            "arguments": {
                "raw_qubit_register": [
                    "str",
                    "float",
                    "int"
                ],
                "number_of_qubits": [
                    "str",
                    "float",
                    "int"
                ]
            }
        },
        "QuantumInspireBackend.__convert_result_single_shot": {
            "name": "__convert_result_single_shot",
            "location": 447,
            "return": [
                "tuple[list[list[]]]"
            ],
            "arguments": {
                "result": [
                    "str",
                    "list[typing.Optional[C]]"
                ],
                "measurements": [
                    "bool",
                    "str"
                ]
            }
        },
        "QuantumInspireBackend.__convert_result_multiple_shots": {
            "name": "__convert_result_multiple_shots",
            "location": 504,
            "return": [
                "tuple[list[list[]]]"
            ],
            "arguments": {
                "self": [],
                "result": [
                    "tuple[typing.Union[int,int]]"
                ],
                "measurements": [],
                "raw_data_list": [
                    "list[list[fonduer.candidates.models.Candidate]]",
                    "bytes"
                ]
            }
        },
        "QuantumInspireBackend.__convert_result_data": {
            "name": "__convert_result_data",
            "location": 543,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "self": [],
                "result": [],
                "measurements": []
            }
        }
    },
    "quantuminspire-master/src/quantuminspire/qiskit/circuit_parser.py": {
        "CircuitToString.__init__": {
            "name": "__init__",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "basis_gates": [],
                "measurements": [
                    "str",
                    "tuple[typing.Union[int,int]]",
                    "int",
                    "None",
                    "float",
                    "list[]"
                ],
                "full_state_projection": [
                    "bool"
                ]
            }
        },
        "CircuitToString._gate_not_supported": {
            "name": "_gate_not_supported",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "_stream": [
                    "int",
                    "str",
                    "typing.Iterable[C]"
                ],
                "instruction": [],
                "_binary_control": [
                    "None",
                    "int",
                    "str",
                    "typing.Iterable[C]"
                ]
            }
        },
        "CircuitToString._cz": {
            "name": "_cz",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "stream": [],
                "instruction": [
                    "float"
                ]
            }
        },
        "CircuitToString._c_cz": {
            "name": "_c_cz",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "stream": [],
                "instruction": [
                    "str"
                ],
                "binary_control": [
                    "str"
                ]
            }
        },
        "CircuitToString._cx": {
            "name": "_cx",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "stream": [],
                "instruction": [
                    "float"
                ]
            }
        },
        "CircuitToString._c_cx": {
            "name": "_c_cx",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {
                "stream": [],
                "instruction": [
                    "str"
                ],
                "binary_control": [
                    "str"
                ]
            }
        },
        "CircuitToString._ccx": {
            "name": "_ccx",
            "location": 105,
            "return": [
                "None"
            ],
            "arguments": {
                "stream": [],
                "instruction": [
                    "float"
                ]
            }
        },
        "CircuitToString._c_ccx": {
            "name": "_c_ccx",
            "location": 115,
            "return": [
                "None"
            ],
            "arguments": {
                "stream": [],
                "instruction": [
                    "str"
                ],
                "binary_control": [
                    "str"
                ]
            }
        },
        "CircuitToString._h": {
            "name": "_h",
            "location": 127,
            "return": [
                "None"
            ],
            "arguments": {
                "stream": [],
                "instruction": [
                    "float"
                ]
            }
        },
        "CircuitToString._c_h": {
            "name": "_c_h",
            "location": 137,
            "return": [
                "None"
            ],
            "arguments": {
                "stream": [],
                "instruction": [
                    "str"
                ],
                "binary_control": [
                    "str"
                ]
            }
        },
        "CircuitToString._id": {
            "name": "_id",
            "location": 149,
            "return": [
                "None"
            ],
            "arguments": {
                "stream": [],
                "instruction": [
                    "str"
                ]
            }
        },
        "CircuitToString._c_id": {
            "name": "_c_id",
            "location": 159,
            "return": [
                "None"
            ],
            "arguments": {
                "stream": [],
                "instruction": [
                    "str"
                ],
                "binary_control": [
                    "str"
                ]
            }
        },
        "CircuitToString._s": {
            "name": "_s",
            "location": 171,
            "return": [
                "None"
            ],
            "arguments": {
                "stream": [],
                "instruction": [
                    "str"
                ]
            }
        },
        "CircuitToString._c_s": {
            "name": "_c_s",
            "location": 181,
            "return": [
                "None"
            ],
            "arguments": {
                "stream": [],
                "instruction": [
                    "str"
                ],
                "binary_control": [
                    "str"
                ]
            }
        },
        "CircuitToString._sdg": {
            "name": "_sdg",
            "location": 191,
            "return": [
                "None"
            ],
            "arguments": {
                "stream": [],
                "instruction": [
                    "float"
                ]
            }
        },
        "CircuitToString._c_sdg": {
            "name": "_c_sdg",
            "location": 201,
            "return": [
                "None"
            ],
            "arguments": {
                "stream": [],
                "instruction": [
                    "str"
                ],
                "binary_control": [
                    "str"
                ]
            }
        },
        "CircuitToString._swap": {
            "name": "_swap",
            "location": 211,
            "return": [
                "None"
            ],
            "arguments": {
                "stream": [],
                "instruction": [
                    "float"
                ]
            }
        },
        "CircuitToString._c_swap": {
            "name": "_c_swap",
            "location": 221,
            "return": [
                "None"
            ],
            "arguments": {
                "stream": [],
                "instruction": [
                    "str"
                ],
                "binary_control": [
                    "str"
                ]
            }
        },
        "CircuitToString._t": {
            "name": "_t",
            "location": 231,
            "return": [
                "None"
            ],
            "arguments": {
                "stream": [],
                "instruction": [
                    "str"
                ]
            }
        },
        "CircuitToString._c_t": {
            "name": "_c_t",
            "location": 241,
            "return": [
                "None"
            ],
            "arguments": {
                "stream": [],
                "instruction": [
                    "str"
                ],
                "binary_control": [
                    "str"
                ]
            }
        },
        "CircuitToString._tdg": {
            "name": "_tdg",
            "location": 251,
            "return": [
                "None"
            ],
            "arguments": {
                "stream": [],
                "instruction": [
                    "float"
                ]
            }
        },
        "CircuitToString._c_tdg": {
            "name": "_c_tdg",
            "location": 261,
            "return": [
                "None"
            ],
            "arguments": {
                "stream": [],
                "instruction": [
                    "str"
                ],
                "binary_control": [
                    "str"
                ]
            }
        },
        "CircuitToString._x": {
            "name": "_x",
            "location": 271,
            "return": [
                "None"
            ],
            "arguments": {
                "stream": [],
                "instruction": [
                    "str"
                ]
            }
        },
        "CircuitToString._c_x": {
            "name": "_c_x",
            "location": 281,
            "return": [
                "None"
            ],
            "arguments": {
                "stream": [],
                "instruction": [
                    "str"
                ],
                "binary_control": [
                    "str"
                ]
            }
        },
        "CircuitToString._y": {
            "name": "_y",
            "location": 291,
            "return": [
                "None"
            ],
            "arguments": {
                "stream": [],
                "instruction": [
                    "float"
                ]
            }
        },
        "CircuitToString._c_y": {
            "name": "_c_y",
            "location": 301,
            "return": [
                "None"
            ],
            "arguments": {
                "stream": [],
                "instruction": [
                    "str"
                ],
                "binary_control": [
                    "str"
                ]
            }
        },
        "CircuitToString._z": {
            "name": "_z",
            "location": 313,
            "return": [
                "None"
            ],
            "arguments": {
                "stream": [],
                "instruction": [
                    "float"
                ]
            }
        },
        "CircuitToString._c_z": {
            "name": "_c_z",
            "location": 323,
            "return": [
                "None"
            ],
            "arguments": {
                "stream": [],
                "instruction": [
                    "str"
                ],
                "binary_control": [
                    "str"
                ]
            }
        },
        "CircuitToString._r": {
            "name": "_r",
            "location": 335,
            "return": [
                "None"
            ],
            "arguments": {
                "stream": [],
                "instruction": [],
                "axis": [
                    "str"
                ]
            }
        },
        "CircuitToString._c_r": {
            "name": "_c_r",
            "location": 347,
            "return": [
                "None"
            ],
            "arguments": {
                "stream": [],
                "instruction": [
                    "bytes"
                ],
                "axis": [
                    "str"
                ],
                "binary_control": [
                    "str"
                ]
            }
        },
        "CircuitToString._rx": {
            "name": "_rx",
            "location": 361,
            "return": [
                "None"
            ],
            "arguments": {
                "stream": [],
                "instruction": []
            }
        },
        "CircuitToString._c_rx": {
            "name": "_c_rx",
            "location": 371,
            "return": [
                "None"
            ],
            "arguments": {
                "stream": [
                    "str"
                ],
                "instruction": [
                    "str"
                ],
                "binary_control": [
                    "str"
                ]
            }
        },
        "CircuitToString._ry": {
            "name": "_ry",
            "location": 383,
            "return": [
                "None"
            ],
            "arguments": {
                "stream": [],
                "instruction": []
            }
        },
        "CircuitToString._c_ry": {
            "name": "_c_ry",
            "location": 393,
            "return": [
                "None"
            ],
            "arguments": {
                "stream": [
                    "str"
                ],
                "instruction": [
                    "str"
                ],
                "binary_control": [
                    "str"
                ]
            }
        },
        "CircuitToString._rz": {
            "name": "_rz",
            "location": 405,
            "return": [
                "None"
            ],
            "arguments": {
                "stream": [],
                "instruction": []
            }
        },
        "CircuitToString._c_rz": {
            "name": "_c_rz",
            "location": 415,
            "return": [
                "None"
            ],
            "arguments": {
                "stream": [
                    "str"
                ],
                "instruction": [
                    "str"
                ],
                "binary_control": [
                    "str"
                ]
            }
        },
        "CircuitToString._u": {
            "name": "_u",
            "location": 427,
            "return": [
                "None"
            ],
            "arguments": {
                "stream": [],
                "instruction": []
            }
        },
        "CircuitToString._c_u": {
            "name": "_c_u",
            "location": 440,
            "return": [
                "None"
            ],
            "arguments": {
                "stream": [
                    "str"
                ],
                "instruction": [
                    "str"
                ],
                "binary_control": [
                    "str"
                ]
            }
        },
        "CircuitToString._u1": {
            "name": "_u1",
            "location": 452,
            "return": [
                "None"
            ],
            "arguments": {
                "stream": [],
                "instruction": [
                    "dict[str, typing.Any]",
                    "BaseException",
                    "str"
                ]
            }
        },
        "CircuitToString._c_u1": {
            "name": "_c_u1",
            "location": 467,
            "return": [
                "None"
            ],
            "arguments": {
                "stream": [
                    "str"
                ],
                "instruction": [
                    "dict[, ]"
                ],
                "binary_control": [
                    "str"
                ]
            }
        },
        "CircuitToString._p": {
            "name": "_p",
            "location": 484,
            "return": [
                "None"
            ],
            "arguments": {
                "stream": [],
                "instruction": []
            }
        },
        "CircuitToString._c_p": {
            "name": "_c_p",
            "location": 494,
            "return": [
                "None"
            ],
            "arguments": {
                "stream": [
                    "str"
                ],
                "instruction": [
                    "str"
                ],
                "binary_control": [
                    "str"
                ]
            }
        },
        "CircuitToString._u2": {
            "name": "_u2",
            "location": 506,
            "return": [
                "None"
            ],
            "arguments": {
                "stream": [],
                "instruction": [
                    "dict[str, typing.Any]",
                    "BaseException",
                    "str"
                ]
            }
        },
        "CircuitToString._c_u2": {
            "name": "_c_u2",
            "location": 521,
            "return": [
                "None"
            ],
            "arguments": {
                "stream": [
                    "str"
                ],
                "instruction": [
                    "dict[, ]"
                ],
                "binary_control": [
                    "str"
                ]
            }
        },
        "CircuitToString._u3": {
            "name": "_u3",
            "location": 538,
            "return": [
                "None"
            ],
            "arguments": {
                "stream": [],
                "instruction": [
                    "str",
                    "list[str]",
                    "tuple[typing.Union[str,...]]",
                    "bool",
                    "tuple[typing.Union[str,str]]"
                ]
            }
        },
        "CircuitToString._c_u3": {
            "name": "_c_u3",
            "location": 561,
            "return": [
                "None"
            ],
            "arguments": {
                "stream": [],
                "instruction": [
                    "str",
                    "list[str]",
                    "tuple[typing.Union[str,...]]",
                    "bool",
                    "tuple[typing.Union[str,str]]",
                    "list[int]"
                ],
                "binary_control": [
                    "str",
                    "int",
                    "float"
                ]
            }
        },
        "CircuitToString._barrier": {
            "name": "_barrier",
            "location": 581,
            "return": [
                "None"
            ],
            "arguments": {
                "stream": [],
                "instruction": [
                    "str",
                    "bytes",
                    "list[int]"
                ]
            }
        },
        "CircuitToString._c_barrier": {
            "name": "_c_barrier",
            "location": 591,
            "return": [
                "None"
            ],
            "arguments": {
                "stream": [
                    "str"
                ],
                "instruction": [
                    "str"
                ],
                "binary_control": [
                    "str"
                ]
            }
        },
        "CircuitToString._delay": {
            "name": "_delay",
            "location": 602,
            "return": [
                "None"
            ],
            "arguments": {
                "stream": [],
                "instruction": [
                    "int",
                    "str",
                    "list[str]",
                    "float"
                ]
            }
        },
        "CircuitToString._measure": {
            "name": "_measure",
            "location": 619,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "stream": [],
                "instruction": [
                    "float"
                ]
            }
        },
        "CircuitToString.get_mask_data": {
            "name": "get_mask_data",
            "location": 630,
            "return": [
                "tuple[int]"
            ],
            "arguments": {
                "mask": [
                    "int"
                ]
            }
        },
        "CircuitToString._parse_bin_ctrl_gate": {
            "name": "_parse_bin_ctrl_gate",
            "location": 666,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "stream": [],
                "instruction": [
                    "dict[str, typing.Any]",
                    "str"
                ]
            }
        },
        "CircuitToString.parse": {
            "name": "parse",
            "location": 731,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "stream": [
                    "bytes",
                    "str",
                    "typing.BinaryIO",
                    "list[str]"
                ],
                "instruction": [
                    "int"
                ]
            }
        }
    },
    "quantuminspire-master/src/quantuminspire/qiskit/measurements.py": {
        "Measurements.__init__": {
            "name": "__init__",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Measurements.nr_of_qubits": {
            "name": "nr_of_qubits",
            "location": 49,
            "return": [
                "str",
                "int",
                "set[int]",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "nr_of_qubits": []
            }
        },
        "Measurements.nr_of_clbits": {
            "name": "nr_of_clbits",
            "location": 63,
            "return": [
                "str",
                "int",
                "set[int]",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "nr_of_clbits": []
            }
        },
        "Measurements.measurements_reg": {
            "name": "measurements_reg",
            "location": 77,
            "return": [
                "str",
                "dict[str, typing.Any]",
                "dict[, ]",
                "int"
            ],
            "arguments": {
                "self": [],
                "measurements_reg": []
            }
        },
        "Measurements.measurements_state": {
            "name": "measurements_state",
            "location": 91,
            "return": [
                "str",
                "int",
                "dict[str, int]"
            ],
            "arguments": {
                "self": [],
                "measurements_state": []
            }
        },
        "Measurements.from_experiment": {
            "name": "from_experiment",
            "location": 98,
            "return": [],
            "arguments": {
                "cls": [
                    "str",
                    "typing.Callable[, ]"
                ],
                "experiment": [
                    "str",
                    "typing.Mapping",
                    "bytes",
                    "dict[, ]",
                    "dict[str, list[str]]"
                ]
            }
        },
        "Measurements.max_measurement_index": {
            "name": "max_measurement_index",
            "location": 141,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Measurements.get_qreg_for_conditional_creg": {
            "name": "get_qreg_for_conditional_creg",
            "location": 147,
            "return": [
                "str",
                "dict[str, typing.Any]",
                "int",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "creg": [
                    "str",
                    "dict[str, typing.Any]",
                    "int",
                    "bytes"
                ]
            }
        },
        "Measurements.to_dict": {
            "name": "to_dict",
            "location": 172,
            "return": [
                "dict[typing.Text, ]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Measurements.from_dict": {
            "name": "from_dict",
            "location": 186,
            "return": [
                "dict[, ]",
                "float",
                "None",
                "int",
                "dict[str, list[]]"
            ],
            "arguments": {
                "cls": [
                    "typing.Type",
                    "list[str]",
                    "float",
                    "None",
                    "int",
                    "dict[, ]"
                ],
                "measurement_input": []
            }
        },
        "Measurements.validate_number_of_clbits": {
            "name": "validate_number_of_clbits",
            "location": 202,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Measurements.validate_unsupported_measurements": {
            "name": "validate_unsupported_measurements",
            "location": 218,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Measurements.qubit_to_classical_hex": {
            "name": "qubit_to_classical_hex",
            "location": 238,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "qubit_register": []
            }
        }
    },
    "quantuminspire-master/src/quantuminspire/qiskit/qi_job.py": {
        "QIJob.__init__": {
            "name": "__init__",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "backend": [
                    "str"
                ],
                "job_id": [
                    "str"
                ],
                "api": [
                    "str",
                    "bool",
                    "None"
                ],
                "qobj": [
                    "None",
                    "str"
                ]
            }
        },
        "QIJob.set_job_id": {
            "name": "set_job_id",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "job_id": [
                    "str",
                    "int"
                ]
            }
        },
        "QIJob.submit": {
            "name": "submit",
            "location": 105,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "QIJob._result": {
            "name": "_result",
            "location": 115,
            "return": [
                "QIResult"
            ],
            "arguments": {
                "self": [],
                "result_function": [
                    "list[str]",
                    "int",
                    "typing.Type",
                    "str",
                    "dict[, ]"
                ],
                "timeout": [
                    "None",
                    "int",
                    "float",
                    "str",
                    "typing.Iterable[str]"
                ],
                "wait": [
                    "float"
                ]
            }
        },
        "QIJob.result": {
            "name": "result",
            "location": 144,
            "return": [],
            "arguments": {
                "self": [],
                "timeout": [
                    "None",
                    "bool",
                    "list[dict[str, typing.Any]]",
                    "str"
                ],
                "wait": [
                    "float"
                ]
            }
        },
        "QIJob.result_all_jobs": {
            "name": "result_all_jobs",
            "location": 158,
            "return": [],
            "arguments": {
                "self": [],
                "timeout": [
                    "None",
                    "int",
                    "str",
                    "dict[str, str]"
                ],
                "wait": [
                    "float"
                ]
            }
        },
        "QIJob.cancel": {
            "name": "cancel",
            "location": 172,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "QIJob.get_jobs": {
            "name": "get_jobs",
            "location": 176,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "QIJob.add_job": {
            "name": "add_job",
            "location": 189,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "job": [
                    "float",
                    "int"
                ]
            }
        },
        "QIJob.queue_position": {
            "name": "queue_position",
            "location": 198,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "refresh": [
                    "bool"
                ]
            }
        },
        "QIJob.status": {
            "name": "status",
            "location": 211,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "quantuminspire-master/src/quantuminspire/qiskit/qi_result.py": {
        "QIResult.__init__": {
            "name": "__init__",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "backend_name": [
                    "str",
                    "bool"
                ],
                "backend_version": [
                    "str",
                    "bool"
                ],
                "qobj_id": [
                    "str",
                    "bool"
                ],
                "job_id": [
                    "str",
                    "bool"
                ],
                "success": [
                    "str",
                    "bool"
                ],
                "results": [
                    "str",
                    "bool"
                ],
                "date": [
                    "None",
                    "str",
                    "bool"
                ],
                "status": [
                    "None",
                    "str",
                    "bool"
                ],
                "header": [
                    "None",
                    "str",
                    "bool"
                ]
            }
        },
        "QIResult.get_raw_result": {
            "name": "get_raw_result",
            "location": 53,
            "return": [
                "list[typing.Union[list[],dict[, ],str]]"
            ],
            "arguments": {
                "self": [],
                "field_name": [
                    "str",
                    "list[str]",
                    "dict[str, str]"
                ],
                "experiment": [
                    "None",
                    "str",
                    "int"
                ]
            }
        },
        "QIResult.get_probabilities": {
            "name": "get_probabilities",
            "location": 88,
            "return": [],
            "arguments": {
                "self": [],
                "experiment": [
                    "None",
                    "str",
                    "int"
                ]
            }
        },
        "QIResult.get_probabilities_multiple_measurement": {
            "name": "get_probabilities_multiple_measurement",
            "location": 127,
            "return": [],
            "arguments": {
                "self": [],
                "experiment": [
                    "None",
                    "str",
                    "int"
                ]
            }
        },
        "QIResult.get_calibration": {
            "name": "get_calibration",
            "location": 171,
            "return": [],
            "arguments": {
                "self": [],
                "experiment": [
                    "None",
                    "str",
                    "int"
                ]
            }
        }
    },
    "quantuminspire-master/src/quantuminspire/qiskit/quantum_inspire_provider.py": {
        "QuantumInspireProvider.__init__": {
            "name": "__init__",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "QuantumInspireProvider.__str__": {
            "name": "__str__",
            "location": 38,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "QuantumInspireProvider.get_api": {
            "name": "get_api",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "QuantumInspireProvider.backends": {
            "name": "backends",
            "location": 52,
            "return": [
                "list[QuantumInspireBackend]"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "None",
                    "str",
                    "int",
                    "set[str]",
                    "typing.Pattern",
                    "typing.Sequence[typing.Any]"
                ]
            }
        },
        "QuantumInspireProvider._adjust_backend_configuration": {
            "name": "_adjust_backend_configuration",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "config": [
                    "dict[, ]"
                ],
                "backend": []
            }
        },
        "QuantumInspireProvider.set_authentication_details": {
            "name": "set_authentication_details",
            "location": 122,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "email": [
                    "str",
                    "bytes",
                    "None",
                    "int"
                ],
                "password": [
                    "str",
                    "bytes",
                    "None",
                    "int"
                ],
                "qi_url": []
            }
        },
        "QuantumInspireProvider.set_basic_authentication": {
            "name": "set_basic_authentication",
            "location": 135,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "email": [
                    "str",
                    "int"
                ],
                "password": [
                    "str",
                    "int"
                ],
                "qi_url": []
            }
        },
        "QuantumInspireProvider.set_token_authentication": {
            "name": "set_token_authentication",
            "location": 145,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "token": [
                    "str",
                    "typing.Sequence[str]",
                    "typing.Mapping",
                    "None",
                    "int"
                ],
                "qi_url": []
            }
        },
        "QuantumInspireProvider.set_authentication": {
            "name": "set_authentication",
            "location": 155,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "authentication": [
                    "None",
                    "str",
                    "bytes",
                    "dict[str, typing.Any]",
                    "list[]"
                ],
                "qi_url": [],
                "project_name": [
                    "None",
                    "str",
                    "bytes",
                    "dict[str, typing.Any]",
                    "list[]"
                ]
            }
        },
        "QuantumInspireProvider.set_project_name": {
            "name": "set_project_name",
            "location": 172,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "project_name": [
                    "str"
                ]
            }
        }
    },
    "quantuminspire-master/src/quantuminspire/qiskit/__init__.py": {},
    "quantuminspire-master/src/tests/__init__.py": {},
    "quantuminspire-master/src/tests/quantuminspire/test_api.py": {
        "MockApiBasicAuth.__init__": {
            "name": "__init__",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "email": [
                    "str",
                    "None",
                    "dict[str, typing.Any]"
                ],
                "password": [
                    "str",
                    "None",
                    "dict[str, typing.Any]"
                ],
                "domain": [
                    "None",
                    "str",
                    "dict[str, typing.Any]"
                ],
                "scheme": [
                    "None",
                    "str",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "MockApiTokenAuth.__init__": {
            "name": "__init__",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "token": [
                    "str",
                    "typing.Any",
                    "None"
                ],
                "scheme": [
                    "None",
                    "int",
                    "str",
                    "float"
                ],
                "domain": [
                    "None",
                    "int",
                    "str",
                    "float"
                ]
            }
        },
        "MockApiClient.__init__": {
            "name": "__init__",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "auth": [
                    "None",
                    "bool",
                    "str",
                    "typing.Mapping"
                ],
                "transports": [
                    "None",
                    "bool",
                    "str",
                    "typing.Mapping"
                ]
            }
        },
        "MockApiClient.get": {
            "name": "get",
            "location": 63,
            "return": [],
            "arguments": {
                "self": [],
                "url": [
                    "str",
                    "typing.Callable[str, str]",
                    "None",
                    "int"
                ]
            }
        },
        "MockApiClient.action": {
            "name": "action",
            "location": 68,
            "return": [],
            "arguments": {
                "self": [],
                "document": [
                    "str",
                    "bytes",
                    "typing.Callable[T, typing.Any]",
                    "int"
                ],
                "keys": [
                    "str"
                ],
                "params": [
                    "None",
                    "str",
                    "bytes",
                    "typing.Callable[T, typing.Any]",
                    "int"
                ],
                "validate": [
                    "bool"
                ],
                "overrides": [
                    "None",
                    "str",
                    "bytes",
                    "typing.Callable[T, typing.Any]",
                    "int"
                ],
                "action": [
                    "None",
                    "str",
                    "bytes",
                    "typing.Callable[T, typing.Any]",
                    "int"
                ],
                "encoding": [
                    "None",
                    "str",
                    "bytes",
                    "typing.Callable[T, typing.Any]",
                    "int"
                ],
                "transform": [
                    "None",
                    "str",
                    "bytes",
                    "typing.Callable[T, typing.Any]",
                    "int"
                ]
            }
        },
        "TestQuantumInspireAPI.setUp": {
            "name": "setUp",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQuantumInspireAPI.test_get_has_correct_output": {
            "name": "test_get_has_correct_output",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_key": [
                    "typing.Text"
                ]
            }
        },
        "TestQuantumInspireAPI.test_action_has_correct_output": {
            "name": "test_action_has_correct_output",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_key": [
                    "typing.Text"
                ],
                "mock_result": [
                    "int"
                ]
            }
        },
        "TestQuantumInspireAPI.test_no_authentication": {
            "name": "test_no_authentication",
            "location": 101,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQuantumInspireAPI.test_no_authentication_raises_authentication_error": {
            "name": "test_no_authentication_raises_authentication_error",
            "location": 114,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQuantumInspireAPI.test_load_schema_collects_correct_schema": {
            "name": "test_load_schema_collects_correct_schema",
            "location": 127,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQuantumInspireAPI.test_base_url_with_trailing_slash": {
            "name": "test_base_url_with_trailing_slash",
            "location": 136,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQuantumInspireAPI.test_base_url_without_trailing_slash": {
            "name": "test_base_url_without_trailing_slash",
            "location": 145,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQuantumInspireAPI.test_zload_schema_raises_exception": {
            "name": "test_zload_schema_raises_exception",
            "location": 154,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQuantumInspireAPI.__mock_default_backendtype_handler": {
            "name": "__mock_default_backendtype_handler",
            "location": 163,
            "return": [],
            "arguments": {
                "self": [],
                "mock_api": [
                    "str",
                    "bool",
                    "None"
                ],
                "document": [
                    "str",
                    "bool",
                    "None"
                ],
                "keys": [
                    "str"
                ],
                "params": [
                    "None",
                    "str",
                    "bool"
                ],
                "validate": [
                    "None",
                    "str",
                    "bool"
                ],
                "overrides": [
                    "None",
                    "str",
                    "bool"
                ],
                "action": [
                    "None",
                    "str",
                    "bool"
                ],
                "encoding": [
                    "None",
                    "str",
                    "bool"
                ],
                "transform": [
                    "None",
                    "str",
                    "bool"
                ]
            }
        },
        "TestQuantumInspireAPI.__mock_backendtypes_handler": {
            "name": "__mock_backendtypes_handler",
            "location": 176,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": [],
                "mock_api": [
                    "str",
                    "bool",
                    "None"
                ],
                "document": [
                    "str",
                    "bool",
                    "None"
                ],
                "keys": [
                    "str"
                ],
                "params": [
                    "None",
                    "str",
                    "bool"
                ],
                "validate": [
                    "None",
                    "str",
                    "bool"
                ],
                "overrides": [
                    "None",
                    "str",
                    "bool"
                ],
                "action": [
                    "None",
                    "str",
                    "bool"
                ],
                "encoding": [
                    "None",
                    "str",
                    "bool"
                ],
                "transform": [
                    "None",
                    "str",
                    "bool"
                ]
            }
        },
        "TestQuantumInspireAPI.__mock_backendtype_handler": {
            "name": "__mock_backendtype_handler",
            "location": 196,
            "return": [],
            "arguments": {
                "self": [],
                "mock_api": [
                    "str",
                    "bool",
                    "None"
                ],
                "document": [
                    "str",
                    "bool",
                    "None"
                ],
                "keys": [
                    "str"
                ],
                "params": [
                    "str"
                ],
                "validate": [
                    "None",
                    "str",
                    "bool"
                ],
                "overrides": [
                    "None",
                    "str",
                    "bool"
                ],
                "action": [
                    "None",
                    "str",
                    "bool"
                ],
                "encoding": [
                    "None",
                    "str",
                    "bool"
                ],
                "transform": [
                    "None",
                    "str",
                    "bool"
                ]
            }
        },
        "TestQuantumInspireAPI.test_list_backend_types_has_correct_input_and_output": {
            "name": "test_list_backend_types_has_correct_input_and_output",
            "location": 210,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQuantumInspireAPI.test_get_backend_types_has_correct_input_and_output": {
            "name": "test_get_backend_types_has_correct_input_and_output",
            "location": 218,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQuantumInspireAPI.test_get_backend_type_has_correct_input_and_output": {
            "name": "test_get_backend_type_has_correct_input_and_output",
            "location": 225,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQuantumInspireAPI.test_get_backend_type_by_id_raises_api_error": {
            "name": "test_get_backend_type_by_id_raises_api_error",
            "location": 233,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQuantumInspireAPI.test_get_backend_type_by_name_corrects_correct_backend": {
            "name": "test_get_backend_type_by_name_corrects_correct_backend",
            "location": 239,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQuantumInspireAPI.test_get_backend_type_by_name_raises_value_error": {
            "name": "test_get_backend_type_by_name_raises_value_error",
            "location": 246,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQuantumInspireAPI.test_get_default_backend_type": {
            "name": "test_get_default_backend_type",
            "location": 252,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQuantumInspireAPI.test_get_backend_type_raises_value_error": {
            "name": "test_get_backend_type_raises_value_error",
            "location": 260,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQuantumInspireAPI.__mock_list_projects_handler": {
            "name": "__mock_list_projects_handler",
            "location": 266,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": [],
                "mock_api": [
                    "str",
                    "bool",
                    "None"
                ],
                "document": [
                    "str",
                    "bool",
                    "None"
                ],
                "keys": [
                    "str"
                ],
                "params": [
                    "None",
                    "str",
                    "bool"
                ],
                "validate": [
                    "None",
                    "str",
                    "bool"
                ],
                "overrides": [
                    "None",
                    "str",
                    "bool"
                ],
                "action": [
                    "None",
                    "str",
                    "bool"
                ],
                "encoding": [
                    "None",
                    "str",
                    "bool"
                ],
                "transform": [
                    "None",
                    "str",
                    "bool"
                ]
            }
        },
        "TestQuantumInspireAPI.__mock_project_handler": {
            "name": "__mock_project_handler",
            "location": 286,
            "return": [],
            "arguments": {
                "self": [],
                "input_params": [
                    "str",
                    "bytes",
                    "list[bytes]",
                    "bool"
                ],
                "input_key": [
                    "str",
                    "dict[, ]",
                    "int",
                    "dict[str, typing.Any]",
                    "list[]"
                ],
                "mock_api": [
                    "str",
                    "bool",
                    "list[dict[str, typing.Any]]"
                ],
                "document": [
                    "str",
                    "bool",
                    "list[dict[str, typing.Any]]"
                ],
                "keys": [
                    "str"
                ],
                "params": [
                    "str",
                    "bytes",
                    "list[bytes]"
                ],
                "validate": [
                    "None",
                    "str",
                    "bool",
                    "list[dict[str, typing.Any]]"
                ],
                "overrides": [
                    "None",
                    "str",
                    "bool",
                    "list[dict[str, typing.Any]]"
                ],
                "action": [
                    "None",
                    "str",
                    "bool",
                    "list[dict[str, typing.Any]]"
                ],
                "encoding": [
                    "None",
                    "str",
                    "bool",
                    "list[dict[str, typing.Any]]"
                ],
                "transform": [
                    "None",
                    "str",
                    "bool",
                    "list[dict[str, typing.Any]]"
                ]
            }
        },
        "TestQuantumInspireAPI.test_list_projects_has_correct_input_and_output": {
            "name": "test_list_projects_has_correct_input_and_output",
            "location": 301,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQuantumInspireAPI.test_get_project_has_correct_in_and_output": {
            "name": "test_get_project_has_correct_in_and_output",
            "location": 311,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQuantumInspireAPI.test_get_project_raises_api_error": {
            "name": "test_get_project_raises_api_error",
            "location": 320,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQuantumInspireAPI.test_create_project_has_correct_input_and_output": {
            "name": "test_create_project_has_correct_input_and_output",
            "location": 327,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQuantumInspireAPI.test_delete_project_has_correct_input_and_output": {
            "name": "test_delete_project_has_correct_input_and_output",
            "location": 342,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQuantumInspireAPI.test_delete_project_raises_api_error": {
            "name": "test_delete_project_raises_api_error",
            "location": 349,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQuantumInspireAPI.__mock_list_jobs_handler": {
            "name": "__mock_list_jobs_handler",
            "location": 356,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": [],
                "mock_api": [
                    "str",
                    "bool",
                    "list[str]"
                ],
                "document": [
                    "str",
                    "bool",
                    "list[str]"
                ],
                "keys": [
                    "str"
                ],
                "params": [
                    "None",
                    "str",
                    "bool",
                    "list[str]"
                ],
                "validate": [
                    "None",
                    "str",
                    "bool",
                    "list[str]"
                ],
                "overrides": [
                    "None",
                    "str",
                    "bool",
                    "list[str]"
                ],
                "action": [
                    "None",
                    "str",
                    "bool",
                    "list[str]"
                ],
                "encoding": [
                    "None",
                    "str",
                    "bool",
                    "list[str]"
                ],
                "transform": [
                    "None",
                    "str",
                    "bool",
                    "list[str]"
                ]
            }
        },
        "TestQuantumInspireAPI.__mock_job_handler": {
            "name": "__mock_job_handler",
            "location": 381,
            "return": [],
            "arguments": {
                "self": [],
                "input_params": [
                    "str",
                    "list[bytes]"
                ],
                "input_key": [
                    "str",
                    "bytes",
                    "int"
                ],
                "mock_api": [
                    "str",
                    "bool"
                ],
                "document": [
                    "str",
                    "bool"
                ],
                "keys": [
                    "str",
                    "list[str]"
                ],
                "params": [
                    "str",
                    "list[bytes]"
                ],
                "validate": [
                    "None",
                    "str",
                    "bool"
                ],
                "overrides": [
                    "None",
                    "str",
                    "bool"
                ],
                "action": [
                    "None",
                    "str",
                    "bool"
                ],
                "encoding": [
                    "None",
                    "str",
                    "bool"
                ],
                "transform": [
                    "None",
                    "str",
                    "bool"
                ],
                "status": [
                    "typing.Text"
                ]
            }
        },
        "TestQuantumInspireAPI.__mock_assets_jobs_handler": {
            "name": "__mock_assets_jobs_handler",
            "location": 404,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": [],
                "input_params": [
                    "str",
                    "list[bytes]"
                ],
                "input_key": [
                    "str",
                    "bytes",
                    "int"
                ],
                "mock_api": [
                    "str",
                    "bool"
                ],
                "document": [
                    "str",
                    "bool"
                ],
                "keys": [
                    "str",
                    "list[str]"
                ],
                "params": [
                    "str",
                    "list[bytes]"
                ],
                "validate": [
                    "None",
                    "str",
                    "bool"
                ],
                "overrides": [
                    "None",
                    "str",
                    "bool"
                ],
                "action": [
                    "None",
                    "str",
                    "bool"
                ],
                "encoding": [
                    "None",
                    "str",
                    "bool"
                ],
                "transform": [
                    "None",
                    "str",
                    "bool"
                ]
            }
        },
        "TestQuantumInspireAPI.test_list_jobs_has_correct_input_and_output": {
            "name": "test_list_jobs_has_correct_input_and_output",
            "location": 433,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQuantumInspireAPI.test_get_job_has_correct_in_and_output": {
            "name": "test_get_job_has_correct_in_and_output",
            "location": 446,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQuantumInspireAPI.test_get_job_raises_api_error": {
            "name": "test_get_job_raises_api_error",
            "location": 455,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQuantumInspireAPI.test_get_jobs_from_project_has_correct_in_and_output": {
            "name": "test_get_jobs_from_project_has_correct_in_and_output",
            "location": 462,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQuantumInspireAPI.test_get_job_from_project_raises_api_error": {
            "name": "test_get_job_from_project_raises_api_error",
            "location": 471,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQuantumInspireAPI.test_get_jobs_from_asset_has_correct_in_and_output": {
            "name": "test_get_jobs_from_asset_has_correct_in_and_output",
            "location": 478,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQuantumInspireAPI.test_get_jobs_from_asset_raises_api_error": {
            "name": "test_get_jobs_from_asset_raises_api_error",
            "location": 488,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQuantumInspireAPI.test_delete_job_has_correct_in_and_output": {
            "name": "test_delete_job_has_correct_in_and_output",
            "location": 495,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQuantumInspireAPI.test_delete_job_raises_api_error": {
            "name": "test_delete_job_raises_api_error",
            "location": 502,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQuantumInspireAPI.test_create_job_has_correct_input_and_output_without_fsp": {
            "name": "test_create_job_has_correct_input_and_output_without_fsp",
            "location": 509,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQuantumInspireAPI.test_create_job_has_correct_input_and_output_with_fsp": {
            "name": "test_create_job_has_correct_input_and_output_with_fsp",
            "location": 559,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQuantumInspireAPI.test_create_job_has_correct_input_and_output_without_fsp_for_hardware_backend": {
            "name": "test_create_job_has_correct_input_and_output_without_fsp_for_hardware_backend",
            "location": 582,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQuantumInspireAPI.test_create_job_raises_api_error": {
            "name": "test_create_job_raises_api_error",
            "location": 605,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQuantumInspireAPI.__mock_list_results_handler": {
            "name": "__mock_list_results_handler",
            "location": 627,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": [],
                "mock_api": [
                    "str",
                    "bool",
                    "list[str]"
                ],
                "document": [
                    "str",
                    "bool",
                    "list[str]"
                ],
                "keys": [
                    "str"
                ],
                "params": [
                    "None",
                    "str",
                    "bool",
                    "list[str]"
                ],
                "validate": [
                    "None",
                    "str",
                    "bool",
                    "list[str]"
                ],
                "overrides": [
                    "None",
                    "str",
                    "bool",
                    "list[str]"
                ],
                "action": [
                    "None",
                    "str",
                    "bool",
                    "list[str]"
                ],
                "encoding": [
                    "None",
                    "str",
                    "bool",
                    "list[str]"
                ],
                "transform": [
                    "None",
                    "str",
                    "bool",
                    "list[str]"
                ]
            }
        },
        "TestQuantumInspireAPI.__mock_result_handler": {
            "name": "__mock_result_handler",
            "location": 658,
            "return": [
                "list[list[list[int]]]",
                "list[int]"
            ],
            "arguments": {
                "self": [],
                "input_params": [
                    "str"
                ],
                "input_key": [
                    "str",
                    "None",
                    "dict[str, str]",
                    "bytes",
                    "typing.Type",
                    "tuple[]"
                ],
                "mock_api": [
                    "str",
                    "dict[, ]",
                    "dict[str, typing.Any]",
                    "None"
                ],
                "document": [
                    "str",
                    "dict[, ]",
                    "dict[str, typing.Any]",
                    "None"
                ],
                "keys": [
                    "list[str]",
                    "bytes",
                    "str"
                ],
                "params": [
                    "str"
                ],
                "validate": [
                    "None",
                    "str",
                    "dict[, ]",
                    "dict[str, typing.Any]"
                ],
                "overrides": [
                    "None",
                    "str",
                    "dict[, ]",
                    "dict[str, typing.Any]"
                ],
                "action": [
                    "None",
                    "str",
                    "dict[, ]",
                    "dict[str, typing.Any]"
                ],
                "encoding": [
                    "None",
                    "str",
                    "dict[, ]",
                    "dict[str, typing.Any]"
                ],
                "transform": [
                    "None",
                    "str",
                    "dict[, ]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "TestQuantumInspireAPI.__mock_list_result_from_job_handler": {
            "name": "__mock_list_result_from_job_handler",
            "location": 695,
            "return": [],
            "arguments": {
                "self": [],
                "input_params": [
                    "str"
                ],
                "input_key": [
                    "str",
                    "dict[str, typing.Any]",
                    "list[str]",
                    "set[str]",
                    "None",
                    "bool"
                ],
                "mock_api": [
                    "str"
                ],
                "document": [
                    "str"
                ],
                "keys": [
                    "str",
                    "list[str]"
                ],
                "params": [
                    "str"
                ],
                "validate": [
                    "None",
                    "str"
                ],
                "overrides": [
                    "None",
                    "str"
                ],
                "action": [
                    "None",
                    "str"
                ],
                "encoding": [
                    "None",
                    "str"
                ],
                "transform": [
                    "None",
                    "str"
                ]
            }
        },
        "TestQuantumInspireAPI.__mock_errors_in_result_handler": {
            "name": "__mock_errors_in_result_handler",
            "location": 716,
            "return": [
                "list[list[list[int]]]",
                "list[int]"
            ],
            "arguments": {
                "self": [],
                "input_params": [
                    "str"
                ],
                "input_key": [
                    "str",
                    "dict[str, str]",
                    "bytes",
                    "None",
                    "typing.Type"
                ],
                "mock_api": [
                    "str",
                    "list[str]",
                    "int"
                ],
                "document": [
                    "str",
                    "list[str]",
                    "int"
                ],
                "keys": [
                    "list[str]",
                    "bytes",
                    "str"
                ],
                "params": [
                    "list[str]",
                    "str"
                ],
                "validate": [
                    "None",
                    "str",
                    "list[str]",
                    "int"
                ],
                "overrides": [
                    "None",
                    "str",
                    "list[str]",
                    "int"
                ],
                "action": [
                    "None",
                    "str",
                    "list[str]",
                    "int"
                ],
                "encoding": [
                    "None",
                    "str",
                    "list[str]",
                    "int"
                ],
                "transform": [
                    "None",
                    "str",
                    "list[str]",
                    "int"
                ]
            }
        },
        "TestQuantumInspireAPI.__mock_calibration_handler": {
            "name": "__mock_calibration_handler",
            "location": 767,
            "return": [],
            "arguments": {
                "self": [],
                "input_params": [
                    "str",
                    "bool"
                ],
                "input_key": [
                    "str",
                    "dict[str, typing.Any]",
                    "list[str]",
                    "None",
                    "bool",
                    "set[str]"
                ],
                "mock_api": [
                    "str",
                    "bool"
                ],
                "document": [
                    "str",
                    "bool"
                ],
                "keys": [
                    "str",
                    "list[str]"
                ],
                "params": [
                    "str"
                ],
                "validate": [
                    "None",
                    "str",
                    "bool"
                ],
                "overrides": [
                    "None",
                    "str",
                    "bool"
                ],
                "action": [
                    "None",
                    "str",
                    "bool"
                ],
                "encoding": [
                    "None",
                    "str",
                    "bool"
                ],
                "transform": [
                    "None",
                    "str",
                    "bool"
                ]
            }
        },
        "TestQuantumInspireAPI.test_list_results_has_correct_output": {
            "name": "test_list_results_has_correct_output",
            "location": 780,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQuantumInspireAPI.test_get_results_has_correct_input_and_output": {
            "name": "test_get_results_has_correct_input_and_output",
            "location": 788,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQuantumInspireAPI.test_get_result_has_correct_input_and_output": {
            "name": "test_get_result_has_correct_input_and_output",
            "location": 795,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQuantumInspireAPI.test_get_result_raises_api_error": {
            "name": "test_get_result_raises_api_error",
            "location": 804,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQuantumInspireAPI.test_get_result_from_job_has_correct_input_and_output": {
            "name": "test_get_result_from_job_has_correct_input_and_output",
            "location": 811,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQuantumInspireAPI.test_get_result_from_job_raises_api_error": {
            "name": "test_get_result_from_job_raises_api_error",
            "location": 822,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQuantumInspireAPI.test_get_raw_data_from_result_has_correct_input_and_output": {
            "name": "test_get_raw_data_from_result_has_correct_input_and_output",
            "location": 830,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQuantumInspireAPI.test_get_raw_data_unknown_from_result_raises_api_error": {
            "name": "test_get_raw_data_unknown_from_result_raises_api_error",
            "location": 840,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQuantumInspireAPI.test_get_raw_data_invalid_from_result_raises_api_error": {
            "name": "test_get_raw_data_invalid_from_result_raises_api_error",
            "location": 849,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQuantumInspireAPI.test_get_quantum_states_from_result_has_correct_input_and_output": {
            "name": "test_get_quantum_states_from_result_has_correct_input_and_output",
            "location": 858,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQuantumInspireAPI.test_get_quantum_states_unknown_from_result_raises_api_error": {
            "name": "test_get_quantum_states_unknown_from_result_raises_api_error",
            "location": 868,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQuantumInspireAPI.test_get_quantum_states_invalid_from_result_raises_api_error": {
            "name": "test_get_quantum_states_invalid_from_result_raises_api_error",
            "location": 877,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQuantumInspireAPI.test_get_measurement_register_from_result_has_correct_input_and_output": {
            "name": "test_get_measurement_register_from_result_has_correct_input_and_output",
            "location": 886,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQuantumInspireAPI.test_get_measurement_register_unknown_from_result_raises_api_error": {
            "name": "test_get_measurement_register_unknown_from_result_raises_api_error",
            "location": 897,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQuantumInspireAPI.test_get_measurement_register_invalid_from_result_raises_api_error": {
            "name": "test_get_measurement_register_invalid_from_result_raises_api_error",
            "location": 906,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQuantumInspireAPI.test_get_calibration_info_from_result_has_correct_input_and_output": {
            "name": "test_get_calibration_info_from_result_has_correct_input_and_output",
            "location": 915,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQuantumInspireAPI.test_get_calibration_info_unknown_from_result_raises_api_error": {
            "name": "test_get_calibration_info_unknown_from_result_raises_api_error",
            "location": 930,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQuantumInspireAPI.test_get_calibration_info_invalid_from_result_raises_api_error": {
            "name": "test_get_calibration_info_invalid_from_result_raises_api_error",
            "location": 946,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQuantumInspireAPI.__mock_list_assets_handler": {
            "name": "__mock_list_assets_handler",
            "location": 959,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": [],
                "mock_api": [
                    "str",
                    "bool",
                    "list[str]"
                ],
                "document": [
                    "str",
                    "bool",
                    "list[str]"
                ],
                "keys": [
                    "str",
                    "list[\"libkol.Item\"]"
                ],
                "params": [
                    "str",
                    "list[str]"
                ],
                "validate": [
                    "None",
                    "str",
                    "bool",
                    "list[str]"
                ],
                "overrides": [
                    "None",
                    "str",
                    "bool",
                    "list[str]"
                ],
                "action": [
                    "None",
                    "str",
                    "bool",
                    "list[str]"
                ],
                "encoding": [
                    "None",
                    "str",
                    "bool",
                    "list[str]"
                ],
                "transform": [
                    "None",
                    "str",
                    "bool",
                    "list[str]"
                ]
            }
        },
        "TestQuantumInspireAPI.__mock_asset_handler": {
            "name": "__mock_asset_handler",
            "location": 980,
            "return": [],
            "arguments": {
                "self": [],
                "input_params": [
                    "str",
                    "list[bytes]"
                ],
                "input_key": [
                    "str",
                    "dict[, ]",
                    "list[str]",
                    "bytes"
                ],
                "mock_api": [
                    "str",
                    "bool"
                ],
                "document": [
                    "str",
                    "bool"
                ],
                "keys": [
                    "str",
                    "list[str]"
                ],
                "params": [
                    "str",
                    "list[bytes]"
                ],
                "validate": [
                    "None",
                    "str",
                    "bool"
                ],
                "overrides": [
                    "None",
                    "str",
                    "bool"
                ],
                "action": [
                    "None",
                    "str",
                    "bool"
                ],
                "encoding": [
                    "None",
                    "str",
                    "bool"
                ],
                "transform": [
                    "None",
                    "str",
                    "bool"
                ]
            }
        },
        "TestQuantumInspireAPI.__mock_asset_from_job_handler": {
            "name": "__mock_asset_from_job_handler",
            "location": 995,
            "return": [],
            "arguments": {
                "self": [],
                "input_params": [
                    "str",
                    "list[bytes]"
                ],
                "input_key": [
                    "str",
                    "list[str]",
                    "typing.Callable[str, str]",
                    "dict[, ]"
                ],
                "mock_api": [
                    "str"
                ],
                "document": [
                    "str"
                ],
                "keys": [
                    "str",
                    "list[str]"
                ],
                "params": [
                    "str",
                    "list[bytes]"
                ],
                "validate": [
                    "None",
                    "str"
                ],
                "overrides": [
                    "None",
                    "str"
                ],
                "action": [
                    "None",
                    "str"
                ],
                "encoding": [
                    "None",
                    "str"
                ],
                "transform": [
                    "None",
                    "str"
                ],
                "status": [
                    "typing.Text"
                ]
            }
        },
        "TestQuantumInspireAPI.test_list_assets_has_correct_output": {
            "name": "test_list_assets_has_correct_output",
            "location": 1025,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQuantumInspireAPI.test_get_assets_has_correct_input_and_output": {
            "name": "test_get_assets_has_correct_input_and_output",
            "location": 1033,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQuantumInspireAPI.test_get_asset_has_correct_input_and_output": {
            "name": "test_get_asset_has_correct_input_and_output",
            "location": 1040,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQuantumInspireAPI.test_get_asset_raises_api_error": {
            "name": "test_get_asset_raises_api_error",
            "location": 1049,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQuantumInspireAPI.test_get_assets_from_project_has_correct_input_and_output": {
            "name": "test_get_assets_from_project_has_correct_input_and_output",
            "location": 1056,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQuantumInspireAPI.test_get_assets_from_project_raises_api_error": {
            "name": "test_get_assets_from_project_raises_api_error",
            "location": 1065,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQuantumInspireAPI.test_get_assets_from_job_has_correct_input_and_output": {
            "name": "test_get_assets_from_job_has_correct_input_and_output",
            "location": 1074,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQuantumInspireAPI.test_get_asset_unknown_from_job_raises_api_error": {
            "name": "test_get_asset_unknown_from_job_raises_api_error",
            "location": 1086,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQuantumInspireAPI.test_get_asset_invalid_from_job_raises_api_error": {
            "name": "test_get_asset_invalid_from_job_raises_api_error",
            "location": 1097,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQuantumInspireAPI.test_create_asset_has_correct_input_and_output": {
            "name": "test_create_asset_has_correct_input_and_output",
            "location": 1108,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQuantumInspireAPI.test_wait_for_completed_job_returns_true": {
            "name": "test_wait_for_completed_job_returns_true",
            "location": 1124,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQuantumInspireAPI.test_wait_for_completed_job_returns_false": {
            "name": "test_wait_for_completed_job_returns_false",
            "location": 1136,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQuantumInspireAPI.test_wait_for_cancelled_job_returns_false": {
            "name": "test_wait_for_cancelled_job_returns_false",
            "location": 1148,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQuantumInspireAPI.__fake_backendtype_handler": {
            "name": "__fake_backendtype_handler",
            "location": 1159,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": [],
                "mock_api": [
                    "str",
                    "list[str]",
                    "bool"
                ],
                "document": [
                    "str",
                    "list[str]",
                    "bool"
                ],
                "keys": [
                    "str"
                ],
                "params": [
                    "None",
                    "str",
                    "int",
                    "float"
                ],
                "validate": [
                    "None",
                    "str",
                    "list[str]",
                    "bool"
                ],
                "overrides": [
                    "None",
                    "str",
                    "list[str]",
                    "bool"
                ],
                "action": [
                    "None",
                    "str",
                    "list[str]",
                    "bool"
                ],
                "encoding": [
                    "None",
                    "str",
                    "list[str]",
                    "bool"
                ],
                "transform": [
                    "None",
                    "str",
                    "list[str]",
                    "bool"
                ],
                "call_mock": [
                    "None",
                    "int",
                    "str"
                ]
            }
        },
        "TestQuantumInspireAPI.__fake_project_handler": {
            "name": "__fake_project_handler",
            "location": 1198,
            "return": [],
            "arguments": {
                "self": [],
                "mock_api": [
                    "str",
                    "typing.Iterable[typing.Any]",
                    "int",
                    "typing.Iterable[str]"
                ],
                "document": [
                    "str",
                    "typing.Iterable[typing.Any]",
                    "int",
                    "typing.Iterable[str]"
                ],
                "keys": [
                    "str",
                    "bytes",
                    "tuple[typing.Union[str,float]]",
                    "list[list[str]]",
                    "tuple[typing.Union[int,int]]"
                ],
                "params": [
                    "None",
                    "str",
                    "typing.Iterable[typing.Any]",
                    "int",
                    "typing.Iterable[str]"
                ],
                "validate": [
                    "None",
                    "str",
                    "typing.Iterable[typing.Any]",
                    "int",
                    "typing.Iterable[str]"
                ],
                "overrides": [
                    "None",
                    "str",
                    "typing.Iterable[typing.Any]",
                    "int",
                    "typing.Iterable[str]"
                ],
                "action": [
                    "None",
                    "str",
                    "typing.Iterable[typing.Any]",
                    "int",
                    "typing.Iterable[str]"
                ],
                "encoding": [
                    "None",
                    "str",
                    "typing.Iterable[typing.Any]",
                    "int",
                    "typing.Iterable[str]"
                ],
                "transform": [
                    "None",
                    "str",
                    "typing.Iterable[typing.Any]",
                    "int",
                    "typing.Iterable[str]"
                ],
                "call_mock": [
                    "None",
                    "str",
                    "bytes",
                    "tuple[typing.Union[str,float]]",
                    "list[list[str]]",
                    "tuple[typing.Union[int,int]]"
                ]
            }
        },
        "TestQuantumInspireAPI.__fake_project_handler_params": {
            "name": "__fake_project_handler_params",
            "location": 1210,
            "return": [],
            "arguments": {
                "self": [],
                "mock_api": [
                    "str",
                    "typing.Iterable[typing.Any]",
                    "int",
                    "typing.Iterable[str]"
                ],
                "document": [
                    "str",
                    "typing.Iterable[typing.Any]",
                    "int",
                    "typing.Iterable[str]"
                ],
                "keys": [
                    "bytes",
                    "list[typing.Callable[, ]]",
                    "list[list[str]]"
                ],
                "params": [
                    "None",
                    "bytes",
                    "int",
                    "typing.Sequence[str]",
                    "list[typing.Callable[, ]]",
                    "list[list[str]]"
                ],
                "validate": [
                    "None",
                    "str",
                    "typing.Iterable[typing.Any]",
                    "int",
                    "typing.Iterable[str]"
                ],
                "overrides": [
                    "None",
                    "str",
                    "typing.Iterable[typing.Any]",
                    "int",
                    "typing.Iterable[str]"
                ],
                "action": [
                    "None",
                    "str",
                    "typing.Iterable[typing.Any]",
                    "int",
                    "typing.Iterable[str]"
                ],
                "encoding": [
                    "None",
                    "str",
                    "typing.Iterable[typing.Any]",
                    "int",
                    "typing.Iterable[str]"
                ],
                "transform": [
                    "None",
                    "str",
                    "typing.Iterable[typing.Any]",
                    "int",
                    "typing.Iterable[str]"
                ],
                "call_mock": [
                    "None",
                    "bytes",
                    "int",
                    "typing.Sequence[str]",
                    "list[typing.Callable[, ]]",
                    "list[list[str]]"
                ]
            }
        },
        "TestQuantumInspireAPI.__fake_asset_handler": {
            "name": "__fake_asset_handler",
            "location": 1222,
            "return": [],
            "arguments": {
                "self": [],
                "mock_api": [
                    "str",
                    "list[str]",
                    "bool"
                ],
                "document": [
                    "str",
                    "list[str]",
                    "bool"
                ],
                "keys": [
                    "list[list[str]]",
                    "str"
                ],
                "params": [
                    "None",
                    "list[list[str]]",
                    "str",
                    "dict[str, typing.Any]",
                    "int",
                    "dict[, ]"
                ],
                "validate": [
                    "None",
                    "str",
                    "list[str]",
                    "bool"
                ],
                "overrides": [
                    "None",
                    "str",
                    "list[str]",
                    "bool"
                ],
                "action": [
                    "None",
                    "str",
                    "list[str]",
                    "bool"
                ],
                "encoding": [
                    "None",
                    "str",
                    "list[str]",
                    "bool"
                ],
                "transform": [
                    "None",
                    "str",
                    "list[str]",
                    "bool"
                ],
                "call_mock": [
                    "None",
                    "list[list[str]]",
                    "str",
                    "dict[str, typing.Any]",
                    "int",
                    "dict[, ]"
                ]
            }
        },
        "TestQuantumInspireAPI.__fake_job_handler": {
            "name": "__fake_job_handler",
            "location": 1235,
            "return": [],
            "arguments": {
                "self": [],
                "mock_api": [
                    "str",
                    "list[str]",
                    "bool"
                ],
                "document": [
                    "str",
                    "list[str]",
                    "bool"
                ],
                "keys": [
                    "str",
                    "list[str]",
                    "bytes",
                    "tuple[typing.Union[typing.Any,typing.Any]]"
                ],
                "params": [
                    "None",
                    "str",
                    "list[str]",
                    "bytes",
                    "tuple[typing.Union[typing.Any,typing.Any]]"
                ],
                "validate": [
                    "None",
                    "str",
                    "list[str]",
                    "bool"
                ],
                "overrides": [
                    "None",
                    "str",
                    "list[str]",
                    "bool"
                ],
                "action": [
                    "None",
                    "str",
                    "list[str]",
                    "bool"
                ],
                "encoding": [
                    "None",
                    "str",
                    "list[str]",
                    "bool"
                ],
                "transform": [
                    "None",
                    "str",
                    "list[str]",
                    "bool"
                ],
                "call_mock": [
                    "None",
                    "str",
                    "list[str]",
                    "bytes",
                    "tuple[typing.Union[typing.Any,typing.Any]]"
                ]
            }
        },
        "TestQuantumInspireAPI.__fake_no_results_job_handler": {
            "name": "__fake_no_results_job_handler",
            "location": 1251,
            "return": [],
            "arguments": {
                "self": [],
                "mock_api": [
                    "str",
                    "list[str]",
                    "int"
                ],
                "document": [
                    "str",
                    "list[str]",
                    "int"
                ],
                "keys": [],
                "params": [
                    "None",
                    "str",
                    "list[str]",
                    "int"
                ],
                "validate": [
                    "None",
                    "str",
                    "list[str]",
                    "int"
                ],
                "overrides": [
                    "None",
                    "str",
                    "list[str]",
                    "int"
                ],
                "action": [
                    "None",
                    "str",
                    "list[str]",
                    "int"
                ],
                "encoding": [
                    "None",
                    "str",
                    "list[str]",
                    "int"
                ],
                "transform": [
                    "None",
                    "str",
                    "list[str]",
                    "int"
                ],
                "call_mock": [
                    "None",
                    "int"
                ]
            }
        },
        "TestQuantumInspireAPI.__error_job_handler": {
            "name": "__error_job_handler",
            "location": 1266,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_api": [
                    "str",
                    "bool",
                    "None"
                ],
                "document": [
                    "str",
                    "bool",
                    "None"
                ],
                "keys": [
                    "str",
                    "list[tuple[typing.Union[str,typing.Any]]]",
                    "list[]",
                    "bytes",
                    "list[str]"
                ],
                "params": [
                    "None",
                    "str",
                    "list[tuple[typing.Union[str,typing.Any]]]",
                    "list[]",
                    "bytes",
                    "list[str]"
                ],
                "validate": [
                    "None",
                    "str",
                    "bool"
                ],
                "overrides": [
                    "None",
                    "str",
                    "bool"
                ],
                "action": [
                    "None",
                    "str",
                    "bool"
                ],
                "encoding": [
                    "None",
                    "str",
                    "bool"
                ],
                "transform": [
                    "None",
                    "str",
                    "bool"
                ],
                "call_mock": [
                    "None",
                    "str",
                    "list[tuple[typing.Union[str,typing.Any]]]",
                    "list[]",
                    "bytes",
                    "list[str]"
                ]
            }
        },
        "TestQuantumInspireAPI.__mocks_for_api_execution": {
            "name": "__mocks_for_api_execution",
            "location": 1272,
            "return": [
                "tuple[typing.Union[typing.Generator[typing.Union[typing.Any,None,None]],int,set[str],dict[str, str],Mock]]"
            ],
            "arguments": {
                "self": [],
                "fake_no_results": [
                    "bool"
                ]
            }
        },
        "TestQuantumInspireAPI.test_execute_qasm_cancelled_job": {
            "name": "test_execute_qasm_cancelled_job",
            "location": 1295,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQuantumInspireAPI.test_execute_qasm_different_backend": {
            "name": "test_execute_qasm_different_backend",
            "location": 1304,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQuantumInspireAPI.__test_execute_qasm_fsp_propagates_correctly_to_job": {
            "name": "__test_execute_qasm_fsp_propagates_correctly_to_job",
            "location": 1330,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "full_state_projection": [
                    "str",
                    "bool"
                ]
            }
        },
        "TestQuantumInspireAPI.test_execute_qasm_with_fsp_creates_job_with_fsp": {
            "name": "test_execute_qasm_with_fsp_creates_job_with_fsp",
            "location": 1344,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQuantumInspireAPI.test_execute_qasm_without_fsp_creates_job_without_fsp": {
            "name": "test_execute_qasm_without_fsp_creates_job_without_fsp",
            "location": 1347,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQuantumInspireAPI.test_execute_qasm_project_is_deleted": {
            "name": "test_execute_qasm_project_is_deleted",
            "location": 1350,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQuantumInspireAPI.test_execute_qasm_project_not_deleted_with_number_of_shots": {
            "name": "test_execute_qasm_project_not_deleted_with_number_of_shots",
            "location": 1372,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "get_projects_mock": []
            }
        },
        "TestQuantumInspireAPI.test_execute_qasm_project_with_default_number_of_shots": {
            "name": "test_execute_qasm_project_with_default_number_of_shots",
            "location": 1399,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "get_projects_mock": []
            }
        },
        "TestQuantumInspireAPI.test_execute_qasm_qasm_stripped": {
            "name": "test_execute_qasm_qasm_stripped",
            "location": 1417,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQuantumInspireAPI.test_execute_qasm_api_error": {
            "name": "test_execute_qasm_api_error",
            "location": 1430,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQuantumInspireAPI.test_action_has_correct_output.mock_result_callable": {
            "name": "mock_result_callable",
            "location": 91,
            "return": [],
            "arguments": {
                "mock_api": [],
                "document": [],
                "keys": [],
                "params": [
                    "None"
                ],
                "validate": [
                    "None"
                ],
                "overrides": [
                    "None"
                ],
                "action": [
                    "None"
                ],
                "encoding": [
                    "None"
                ],
                "transform": [
                    "None"
                ]
            }
        },
        "TestQuantumInspireAPI.test_zload_schema_raises_exception.raises_error": {
            "name": "raises_error",
            "location": 155,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "url": []
            }
        }
    },
    "quantuminspire-master/src/tests/quantuminspire/test_credentials.py": {
        "TestCredentials.test_get_token_authentication": {
            "name": "test_get_token_authentication",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCredentials.test_get_basic_authentication": {
            "name": "test_get_basic_authentication",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCredentials.test_save_and_load_token_default_rc": {
            "name": "test_save_and_load_token_default_rc",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCredentials.test_save_and_load_token_filename": {
            "name": "test_save_and_load_token_filename",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCredentials.test_store_token_filename": {
            "name": "test_store_token_filename",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCredentials.test_remove_token_filename": {
            "name": "test_remove_token_filename",
            "location": 108,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCredentials.test_load_token_env": {
            "name": "test_load_token_env",
            "location": 129,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCredentials.test_enable_token_env": {
            "name": "test_enable_token_env",
            "location": 138,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCredentials.test_get_authentication_token": {
            "name": "test_get_authentication_token",
            "location": 153,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCredentials.test_get_authentication_basic": {
            "name": "test_get_authentication_basic",
            "location": 160,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCredentials.test_get_authentication_basic_stdin": {
            "name": "test_get_authentication_basic_stdin",
            "location": 172,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "quantuminspire-master/src/tests/quantuminspire/test_job.py": {
        "TestQuantumInspireJob.test_qi_job_invalid_api": {
            "name": "test_qi_job_invalid_api",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQuantumInspireJob.test_qi_job_invalid_job_identifier": {
            "name": "test_qi_job_invalid_job_identifier",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQuantumInspireJob.test_check_status": {
            "name": "test_check_status",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQuantumInspireJob.test_retrieve_result": {
            "name": "test_retrieve_result",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQuantumInspireJob.test_get_job_identifier": {
            "name": "test_get_job_identifier",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQuantumInspireJob.test_get_project_identifier": {
            "name": "test_get_project_identifier",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "quantuminspire-master/src/tests/quantuminspire/test_version.py": {
        "TestVersion.test_version_HasCorrectFormat": {
            "name": "test_version_HasCorrectFormat",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "quantuminspire-master/src/tests/quantuminspire/__init__.py": {},
    "quantuminspire-master/src/tests/quantuminspire/projectq/test_backend_qx.py": {
        "MockApiClient.__init__": {
            "name": "__init__",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "QIBackendNonProtected.quantum_inspire_api": {
            "name": "quantum_inspire_api",
            "location": 68,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "QIBackendNonProtected.backend": {
            "name": "backend",
            "location": 72,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "QIBackendNonProtected.is_simulation_backend": {
            "name": "is_simulation_backend",
            "location": 80,
            "return": [
                "bool",
                "str",
                "list[str]"
            ],
            "arguments": {
                "self": [],
                "x": []
            }
        },
        "QIBackendNonProtected.full_state_projection": {
            "name": "full_state_projection",
            "location": 88,
            "return": [
                "dict[str, str]",
                "dict[int, typing.Any]",
                "int",
                "dict[int, str]",
                "dict[, ]",
                "str"
            ],
            "arguments": {
                "self": [],
                "x": []
            }
        },
        "QIBackendNonProtected.quantum_inspire_result": {
            "name": "quantum_inspire_result",
            "location": 96,
            "return": [
                "dict[, ]",
                "dict[typing.Any, int]",
                "list[list[int]]",
                "float",
                "bool",
                "tuple[typing.Union[float,float]]",
                "str"
            ],
            "arguments": {
                "self": [],
                "x": []
            }
        },
        "QIBackendNonProtected.clear": {
            "name": "clear",
            "location": 104,
            "return": [
                "str",
                "dict[str, typing.Any]",
                "dict[, ]",
                "int"
            ],
            "arguments": {
                "self": [],
                "x": []
            }
        },
        "QIBackendNonProtected.the_cqasm": {
            "name": "the_cqasm",
            "location": 112,
            "return": [],
            "arguments": {
                "self": [],
                "x": []
            }
        },
        "QIBackendNonProtected.measured_states": {
            "name": "measured_states",
            "location": 120,
            "return": [
                "str",
                "int",
                "dict[str, int]"
            ],
            "arguments": {
                "self": [],
                "x": []
            }
        },
        "QIBackendNonProtected.allocation_map": {
            "name": "allocation_map",
            "location": 128,
            "return": [
                "str",
                "dict[str, typing.Any]",
                "dict[, ]",
                "int"
            ],
            "arguments": {
                "self": [],
                "x": []
            }
        },
        "QIBackendNonProtected.measured_ids": {
            "name": "measured_ids",
            "location": 136,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "x": []
            }
        },
        "QIBackendNonProtected.qasm": {
            "name": "qasm",
            "location": 144,
            "return": [
                "str",
                "dict[str, typing.Any]",
                "dict[, ]",
                "int"
            ],
            "arguments": {
                "self": [],
                "x": []
            }
        },
        "QIBackendNonProtected.number_of_qubits": {
            "name": "number_of_qubits",
            "location": 148,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "QIBackendNonProtected.max_number_of_qubits": {
            "name": "max_number_of_qubits",
            "location": 156,
            "return": [
                "int",
                "float"
            ],
            "arguments": {
                "self": [],
                "x": []
            }
        },
        "QIBackendNonProtected.reset": {
            "name": "reset",
            "location": 159,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "QIBackendNonProtected.run": {
            "name": "run",
            "location": 162,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "QIBackendNonProtected.logical_to_physical": {
            "name": "logical_to_physical",
            "location": 165,
            "return": [],
            "arguments": {
                "self": [],
                "qb_id": [
                    "int",
                    "tuple[typing.Union[str,None,str]]",
                    "str"
                ]
            }
        },
        "QIBackendNonProtected.simulated_to_logical": {
            "name": "simulated_to_logical",
            "location": 168,
            "return": [],
            "arguments": {
                "self": [],
                "qb_id": [
                    "str",
                    "int"
                ]
            }
        },
        "QIBackendNonProtected.filter_result_by_measured_qubits": {
            "name": "filter_result_by_measured_qubits",
            "location": 171,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "QIBackendNonProtected.register_random_measurement_outcome": {
            "name": "register_random_measurement_outcome",
            "location": 174,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestProjectQBackend.setUp": {
            "name": "setUp",
            "location": 180,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestProjectQBackend.test_init_has_correct_values": {
            "name": "test_init_has_correct_values",
            "location": 211,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestProjectQBackend.test_init_without_api_has_correct_values": {
            "name": "test_init_without_api_has_correct_values",
            "location": 216,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestProjectQBackend.test_init_raises_error_no_runs": {
            "name": "test_init_raises_error_no_runs",
            "location": 227,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestProjectQBackend.test_init_raises_no_account_authentication_error": {
            "name": "test_init_raises_no_account_authentication_error",
            "location": 232,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestProjectQBackend.test_cqasm_returns_correct_cqasm_data": {
            "name": "test_cqasm_returns_correct_cqasm_data",
            "location": 241,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestProjectQBackend.test_is_available_verbose_prints_data": {
            "name": "test_is_available_verbose_prints_data",
            "location": 247,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestProjectQBackend.__is_available_assert_equal": {
            "name": "__is_available_assert_equal",
            "location": 259,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "gate": [
                    "str"
                ],
                "expected": [
                    "str"
                ],
                "function_mock": [
                    "bool"
                ],
                "count": [
                    "int"
                ]
            }
        },
        "TestProjectQBackend.test_is_available_correct_result": {
            "name": "test_is_available_correct_result",
            "location": 268,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestProjectQBackend.test_reset_is_cleared": {
            "name": "test_reset_is_cleared",
            "location": 281,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestProjectQBackend.__store_function_assert_equal": {
            "name": "__store_function_assert_equal",
            "location": 287,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "identity": [
                    "tuple[str]"
                ],
                "gate": [],
                "qasm": [
                    "bool",
                    "typing.Callable[, ]"
                ],
                "function_mock": [
                    "str"
                ],
                "count": [
                    "int"
                ],
                "nr_of_qubits": [
                    "int"
                ],
                "verbose": [
                    "int"
                ]
            }
        },
        "TestProjectQBackend.__store_function_raises_error": {
            "name": "__store_function_raises_error",
            "location": 305,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "gate": [],
                "function_mock": [],
                "count": [
                    "int"
                ]
            }
        },
        "TestProjectQBackend.test_store_returns_correct_qasm": {
            "name": "test_store_returns_correct_qasm",
            "location": 314,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestProjectQBackend.__store_function": {
            "name": "__store_function",
            "location": 339,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "backend": [],
                "identity": [],
                "gate": [
                    "str"
                ],
                "function_mock": [],
                "count": [
                    "int"
                ]
            }
        },
        "TestProjectQBackend.test_store_returns_correct_qasm_fsp_program_1": {
            "name": "test_store_returns_correct_qasm_fsp_program_1",
            "location": 345,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestProjectQBackend.test_store_returns_correct_qasm_fsp_program_2": {
            "name": "test_store_returns_correct_qasm_fsp_program_2",
            "location": 355,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestProjectQBackend.test_store_returns_correct_qasm_non_fsp_program_1": {
            "name": "test_store_returns_correct_qasm_non_fsp_program_1",
            "location": 367,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestProjectQBackend.test_store_returns_correct_qasm_non_fsp_program_2": {
            "name": "test_store_returns_correct_qasm_non_fsp_program_2",
            "location": 379,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestProjectQBackend.test_store_raises_error": {
            "name": "test_store_raises_error",
            "location": 391,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestProjectQBackend.test_store_allocate_verbose_output": {
            "name": "test_store_allocate_verbose_output",
            "location": 397,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestProjectQBackend.test_store_verbose_output": {
            "name": "test_store_verbose_output",
            "location": 409,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestProjectQBackend.test_store_deallocate_verbose_output": {
            "name": "test_store_deallocate_verbose_output",
            "location": 421,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestProjectQBackend.test_store_measure_gate_with_mapper": {
            "name": "test_store_measure_gate_with_mapper",
            "location": 429,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "function_mock": []
            }
        },
        "TestProjectQBackend.test_store_measure_gate_without_mapper": {
            "name": "test_store_measure_gate_without_mapper",
            "location": 443,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "function_mock": []
            }
        },
        "TestProjectQBackend.test_logical_to_physical_with_mapper_returns_correct_result": {
            "name": "test_logical_to_physical_with_mapper_returns_correct_result",
            "location": 456,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestProjectQBackend.test_logical_to_physical_without_mapper_returns_correct_result": {
            "name": "test_logical_to_physical_without_mapper_returns_correct_result",
            "location": 464,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestProjectQBackend.test_logical_to_physical_raises_runtime_error": {
            "name": "test_logical_to_physical_raises_runtime_error",
            "location": 471,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestProjectQBackend.test_simulated_to_logical_returns_correct_result": {
            "name": "test_simulated_to_logical_returns_correct_result",
            "location": 478,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestProjectQBackend.test_simulated_to_logical_no_mapper_returns_correct_result": {
            "name": "test_simulated_to_logical_no_mapper_returns_correct_result",
            "location": 487,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestProjectQBackend.test_simulated_to_logical_for_hardware_backend_returns_correct_result": {
            "name": "test_simulated_to_logical_for_hardware_backend_returns_correct_result",
            "location": 495,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestProjectQBackend.test_simulated_to_logical_no_mapper_raises_runtime_error": {
            "name": "test_simulated_to_logical_no_mapper_raises_runtime_error",
            "location": 504,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestProjectQBackend.test_simulated_to_logical_for_hardware_backend_raises_runtime_error": {
            "name": "test_simulated_to_logical_for_hardware_backend_raises_runtime_error",
            "location": 510,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestProjectQBackend.test_get_probabilities_raises_runtime_error": {
            "name": "test_get_probabilities_raises_runtime_error",
            "location": 517,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestProjectQBackend.test_get_probabilities_returns_correct_result": {
            "name": "test_get_probabilities_returns_correct_result",
            "location": 523,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestProjectQBackend.test_get_probabilities_reversed_measurement_order_returns_correct_result": {
            "name": "test_get_probabilities_reversed_measurement_order_returns_correct_result",
            "location": 535,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestProjectQBackend.test_get_probabilities_multiple_measurement_raises_runtime_error": {
            "name": "test_get_probabilities_multiple_measurement_raises_runtime_error",
            "location": 547,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestProjectQBackend.test_get_probabilities_multiple_measurement_result": {
            "name": "test_get_probabilities_multiple_measurement_result",
            "location": 552,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestProjectQBackend.test_receive": {
            "name": "test_receive",
            "location": 591,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "function_mock": []
            }
        },
        "TestProjectQBackend.test_reuse_after_flush_raises_runtime_error": {
            "name": "test_reuse_after_flush_raises_runtime_error",
            "location": 604,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "function_mock": []
            }
        },
        "TestProjectQBackend.test_receive_multiple_flush": {
            "name": "test_receive_multiple_flush",
            "location": 618,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "function_mock": []
            }
        },
        "TestProjectQBackend.test_flush_with_no_measurements_but_nfsp": {
            "name": "test_flush_with_no_measurements_but_nfsp",
            "location": 632,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "function_mock": []
            }
        },
        "TestProjectQBackend.test_maximum_qubit": {
            "name": "test_maximum_qubit",
            "location": 648,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestProjectQBackend.test_allocate_8_simulator_has_4": {
            "name": "test_allocate_8_simulator_has_4",
            "location": 662,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestProjectQBackend.test_allocate_8_simulator_has_5": {
            "name": "test_allocate_8_simulator_has_5",
            "location": 688,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestProjectQBackend.test_allocate_8_simulator_has_8": {
            "name": "test_allocate_8_simulator_has_8",
            "location": 713,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestProjectQBackend.test_more_qubits_than_available": {
            "name": "test_more_qubits_than_available",
            "location": 739,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestProjectQBackend.test_alloc_map_and_mapping": {
            "name": "test_alloc_map_and_mapping",
            "location": 765,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestProjectQBackend.test_alloc_map_and_mapping_with_2_bits_flipped_position_in_alloc_map": {
            "name": "test_alloc_map_and_mapping_with_2_bits_flipped_position_in_alloc_map",
            "location": 782,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestProjectQBackend.test_alloc_map_with_alternative_mapping": {
            "name": "test_alloc_map_with_alternative_mapping",
            "location": 799,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestProjectQBackend.test_reallocation_of_same_bits": {
            "name": "test_reallocation_of_same_bits",
            "location": 816,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestProjectQBackend.test_reallocation_of_used_bits": {
            "name": "test_reallocation_of_used_bits",
            "location": 831,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestProjectQBackend.test_deallocation_of_unused_bits": {
            "name": "test_deallocation_of_unused_bits",
            "location": 844,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestProjectQBackend.test_usage_of_non_allocate_qubit": {
            "name": "test_usage_of_non_allocate_qubit",
            "location": 857,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestProjectQBackend.test_allocation_of_hardware_backend": {
            "name": "test_allocation_of_hardware_backend",
            "location": 872,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestProjectQBackend.test_store_allocation_of_bit_larger_than_capacity_backend": {
            "name": "test_store_allocation_of_bit_larger_than_capacity_backend",
            "location": 887,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "function_mock": []
            }
        },
        "TestProjectQBackend.test_run_no_qasm": {
            "name": "test_run_no_qasm",
            "location": 900,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestProjectQBackend.test_run_has_correct_output": {
            "name": "test_run_has_correct_output",
            "location": 904,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestProjectQBackend.test_run_raises_error_no_result": {
            "name": "test_run_raises_error_no_result",
            "location": 920,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestProjectQBackend.test_run_no_measurements": {
            "name": "test_run_no_measurements",
            "location": 934,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "measure_mock": [
                    "typing.Generator[typing.Union[None,typing.Any,None]]",
                    "list[T]"
                ]
            }
        },
        "TestProjectQBackend.test_get_probabilities_multiple_measurement_result.QB.__init__": {
            "name": "__init__",
            "location": 554,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "qubit_id": []
            }
        }
    },
    "quantuminspire-master/src/tests/quantuminspire/projectq/__init__.py": {},
    "quantuminspire-master/src/tests/quantuminspire/qiskit/test_backend_qx.py": {
        "first_item": {
            "name": "first_item",
            "location": 40,
            "return": [],
            "arguments": {
                "iterable": [
                    "bool",
                    "str",
                    "float",
                    "list[str]"
                ]
            }
        },
        "TestQiSimulatorPy.setUp": {
            "name": "setUp",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQiSimulatorPy._circuit_to_qobj": {
            "name": "_circuit_to_qobj",
            "location": 64,
            "return": [
                "str",
                "list[str]",
                "None",
                "dict[, ]",
                "dict[str, typing.Any]",
                "bool"
            ],
            "arguments": {
                "circuit": [
                    "bool",
                    "str"
                ]
            }
        },
        "TestQiSimulatorPy._circuit_to_experiment": {
            "name": "_circuit_to_experiment",
            "location": 71,
            "return": [],
            "arguments": {
                "circuit": [
                    "str",
                    "dict[str, typing.Any]",
                    "int"
                ]
            }
        },
        "TestQiSimulatorPy.test_backend_name": {
            "name": "test_backend_name",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQiSimulatorPy.test_backend_default_configuration": {
            "name": "test_backend_default_configuration",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQiSimulatorPy.test_backend_status": {
            "name": "test_backend_status",
            "location": 103,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQiSimulatorPy.test_run_a_circuit_returns_correct_result": {
            "name": "test_run_a_circuit_returns_correct_result",
            "location": 118,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQiSimulatorPy.test_get_experiment_results_raises_simulation_error_when_no_histogram": {
            "name": "test_get_experiment_results_raises_simulation_error_when_no_histogram",
            "location": 134,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQiSimulatorPy.test_get_experiment_results_raises_simulation_error_when_no_user_data": {
            "name": "test_get_experiment_results_raises_simulation_error_when_no_user_data",
            "location": 145,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQiSimulatorPy.test_get_experiment_results_returns_correct_value_from_project": {
            "name": "test_get_experiment_results_returns_correct_value_from_project",
            "location": 157,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQiSimulatorPy.test_get_experiment_results_returns_correct_value_from_latest_run": {
            "name": "test_get_experiment_results_returns_correct_value_from_latest_run",
            "location": 196,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQiSimulatorPy.test_get_experiment_results_returns_single_shot": {
            "name": "test_get_experiment_results_returns_single_shot",
            "location": 241,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQiSimulatorPy.test_get_experiment_results_multiple_single_shots": {
            "name": "test_get_experiment_results_multiple_single_shots",
            "location": 282,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQiSimulatorPy.test_run_returns_correct_result_for_my_project_number": {
            "name": "test_run_returns_correct_result_for_my_project_number",
            "location": 322,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQiSimulatorPy.test_run_deletes_empty_project_when_error_occurs": {
            "name": "test_run_deletes_empty_project_when_error_occurs",
            "location": 350,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQiSimulatorPy.test_validate_shot_count": {
            "name": "test_validate_shot_count",
            "location": 370,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQiSimulatorPy.test_validate_no_classical_qubits": {
            "name": "test_validate_no_classical_qubits",
            "location": 390,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQiSimulatorPy.test_validate_nr_classical_qubits_less_than_nr_qubits_conditional_gate": {
            "name": "test_validate_nr_classical_qubits_less_than_nr_qubits_conditional_gate",
            "location": 404,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQiSimulatorPy.test_for_non_fsp_gate_after_measurement": {
            "name": "test_for_non_fsp_gate_after_measurement",
            "location": 420,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQiSimulatorPy.test_for_non_fsp_measurements_at_begin_and_end": {
            "name": "test_for_non_fsp_measurements_at_begin_and_end",
            "location": 440,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQiSimulatorPy.test_for_fsp_measurements_at_end_only": {
            "name": "test_for_fsp_measurements_at_end_only",
            "location": 460,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQiSimulatorPy.test_for_fsp_no_measurements": {
            "name": "test_for_fsp_no_measurements",
            "location": 479,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQiSimulatorPy.test_for_non_fsp_hardware_backend": {
            "name": "test_for_non_fsp_hardware_backend",
            "location": 497,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQiSimulatorPy.test_valid_non_fsp_measurement_qubit_to_classical": {
            "name": "test_valid_non_fsp_measurement_qubit_to_classical",
            "location": 518,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQiSimulatorPy.test_retrieve_job": {
            "name": "test_retrieve_job",
            "location": 545,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQiSimulatorPy.test_retrieve_job_with_error": {
            "name": "test_retrieve_job_with_error",
            "location": 552,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ApiMock.__init__": {
            "name": "__init__",
            "location": 562,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "spec": [
                    "typing.Callable[, ]",
                    "str",
                    "dict[str, typing.Any]",
                    "bool",
                    "float"
                ]
            }
        },
        "ApiMock._get_child_mock": {
            "name": "_get_child_mock",
            "location": 568,
            "return": [
                "Mock"
            ],
            "arguments": {}
        },
        "ApiMock.set": {
            "name": "set",
            "location": 571,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "res1": [
                    "int",
                    "typing.Callable[..., None]",
                    "str"
                ],
                "res2": [
                    "int",
                    "float",
                    "str",
                    "bytes"
                ]
            }
        },
        "ApiMock.get_raw_data_from_result": {
            "name": "get_raw_data_from_result",
            "location": 575,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "result_id": [
                    "str",
                    "int"
                ]
            }
        },
        "ApiMock.get_result_from_job": {
            "name": "get_result_from_job",
            "location": 580,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "job_id": [
                    "int",
                    "str",
                    "list[tuple[typing.Union[int,str]]]"
                ]
            }
        },
        "TestQiSimulatorPyHistogram.setUp": {
            "name": "setUp",
            "location": 587,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQiSimulatorPyHistogram.run_histogram_test": {
            "name": "run_histogram_test",
            "location": 606,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "single_experiment": [
                    "int",
                    "bytes"
                ],
                "mock_result1": [
                    "str",
                    "int",
                    "dict[str, typing.Union[float,str]]",
                    "list[str]",
                    "dict[, ]"
                ],
                "mock_result2": [
                    "str",
                    "int",
                    "dict[str, typing.Union[float,str]]",
                    "list[str]",
                    "dict[, ]"
                ],
                "expected_histogram": [
                    "str",
                    "tuple[typing.Union[int,int,int]]",
                    "dict[str, int]"
                ],
                "expected_histogram_prob": [
                    "dict[, ]",
                    "list[str]",
                    "dict[str, set[int]]",
                    "list[]",
                    "dict[str, int]"
                ],
                "expected_memory": [
                    "str",
                    "float",
                    "bool"
                ]
            }
        },
        "TestQiSimulatorPyHistogram._instructions_to_experiment": {
            "name": "_instructions_to_experiment",
            "location": 635,
            "return": [
                "dict[typing.Text, typing.Union[bytes,int,typing.IO,list[str],str,dict[typing.Text, typing.Union[int,typing.Text,list[list[typing.Union[typing.Text,int]]]]]]]"
            ],
            "arguments": {
                "instructions": [
                    "bytes",
                    "int",
                    "typing.IO",
                    "list[str]",
                    "str"
                ],
                "memory_slots": [
                    "int"
                ]
            }
        },
        "TestQiSimulatorPyHistogram.test_convert_histogram_normal_measurement": {
            "name": "test_convert_histogram_normal_measurement",
            "location": 643,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQiSimulatorPyHistogram.test_classical_bits_are_displayed_correctly": {
            "name": "test_classical_bits_are_displayed_correctly",
            "location": 659,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQiSimulatorPyHistogram.test_convert_histogram_swapped_classical_qubits": {
            "name": "test_convert_histogram_swapped_classical_qubits",
            "location": 678,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQiSimulatorPyHistogram.test_convert_histogram_less_measurements_qubit_one": {
            "name": "test_convert_histogram_less_measurements_qubit_one",
            "location": 694,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQiSimulatorPyHistogram.test_convert_histogram_less_measurements_qubit_two": {
            "name": "test_convert_histogram_less_measurements_qubit_two",
            "location": 709,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQiSimulatorPyHistogram.test_convert_histogram_classical_bits_measure_same_qubits": {
            "name": "test_convert_histogram_classical_bits_measure_same_qubits",
            "location": 724,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQiSimulatorPyHistogram.test_empty_histogram": {
            "name": "test_empty_histogram",
            "location": 743,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQiSimulatorPyHistogram.test_convert_histogram_mutiple_measurement": {
            "name": "test_convert_histogram_mutiple_measurement",
            "location": 760,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQiSimulatorPyHistogram.test_convert_histogram_mutiple_measurement_not_all_bits_measured": {
            "name": "test_convert_histogram_mutiple_measurement_not_all_bits_measured",
            "location": 786,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "quantuminspire-master/src/tests/quantuminspire/qiskit/test_circuit_parser.py": {
        "TestQiCircuitToString._generate_cqasm_from_circuit": {
            "name": "_generate_cqasm_from_circuit",
            "location": 34,
            "return": [],
            "arguments": {
                "circuit": [
                    "typing.Callable[, ]"
                ],
                "full_state_projection": [
                    "bool"
                ],
                "transpile_first": [
                    "bool"
                ]
            }
        },
        "TestQiCircuitToString._generate_cqasm_from_instructions": {
            "name": "_generate_cqasm_from_instructions",
            "location": 47,
            "return": [],
            "arguments": {
                "instructions": [
                    "None",
                    "list[dict[str, typing.Any]]",
                    "tuple[typing.Union[str,str]]"
                ],
                "number_of_qubits": [
                    "int"
                ],
                "full_state_projection": [
                    "bool"
                ]
            }
        },
        "TestQiCircuitToString.test_generate_cqasm_with_entangle_algorithm": {
            "name": "test_generate_cqasm_with_entangle_algorithm",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQiCircuitToString.test_generate_cqasm_correct_output_controlled_z": {
            "name": "test_generate_cqasm_correct_output_controlled_z",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQiCircuitToString.test_generate_cqasm_correct_output_conditional_controlled_z": {
            "name": "test_generate_cqasm_correct_output_conditional_controlled_z",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQiCircuitToString.test_generate_cqasm_correct_output_controlled_not": {
            "name": "test_generate_cqasm_correct_output_controlled_not",
            "location": 101,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQiCircuitToString.test_generate_cqasm_correct_output_conditional_controlled_not": {
            "name": "test_generate_cqasm_correct_output_conditional_controlled_not",
            "location": 107,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQiCircuitToString.test_generate_cqasm_correct_output_toffoli": {
            "name": "test_generate_cqasm_correct_output_toffoli",
            "location": 115,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQiCircuitToString.test_generate_cqasm_correct_output_conditional_toffoli": {
            "name": "test_generate_cqasm_correct_output_conditional_toffoli",
            "location": 121,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQiCircuitToString.test_generate_cqasm_correct_output_measure": {
            "name": "test_generate_cqasm_correct_output_measure",
            "location": 129,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQiCircuitToString.test_generate_cqasm_correct_output_measure_q0_non_fsp": {
            "name": "test_generate_cqasm_correct_output_measure_q0_non_fsp",
            "location": 136,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQiCircuitToString.test_generate_cqasm_correct_output_measure_q1_non_fsp": {
            "name": "test_generate_cqasm_correct_output_measure_q1_non_fsp",
            "location": 143,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQiCircuitToString.test_generate_cqasm_correct_output_hadamard": {
            "name": "test_generate_cqasm_correct_output_hadamard",
            "location": 150,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQiCircuitToString.test_generate_cqasm_correct_output_conditional_hadamard": {
            "name": "test_generate_cqasm_correct_output_conditional_hadamard",
            "location": 156,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQiCircuitToString.test_generate_cqasm_correct_output_barrier": {
            "name": "test_generate_cqasm_correct_output_barrier",
            "location": 164,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQiCircuitToString.test_generate_cqasm_correct_output_barrier_multiple_qubits": {
            "name": "test_generate_cqasm_correct_output_barrier_multiple_qubits",
            "location": 170,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQiCircuitToString.test_generate_cqasm_correct_output_barrier_all_qubits": {
            "name": "test_generate_cqasm_correct_output_barrier_all_qubits",
            "location": 185,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQiCircuitToString.test_generate_cqasm_correct_output_delay_all_qubits": {
            "name": "test_generate_cqasm_correct_output_delay_all_qubits",
            "location": 196,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQiCircuitToString.test_generate_cqasm_correct_output_delay_qarg": {
            "name": "test_generate_cqasm_correct_output_delay_qarg",
            "location": 209,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQiCircuitToString.test_generate_cqasm_correct_output_delay_units_in_dt": {
            "name": "test_generate_cqasm_correct_output_delay_units_in_dt",
            "location": 226,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQiCircuitToString.test_generate_cqasm_correct_output_delay_units_in_s": {
            "name": "test_generate_cqasm_correct_output_delay_units_in_s",
            "location": 243,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQiCircuitToString.test_generate_cqasm_correct_output_identity": {
            "name": "test_generate_cqasm_correct_output_identity",
            "location": 268,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQiCircuitToString.test_generate_cqasm_correct_output_conditional_identity": {
            "name": "test_generate_cqasm_correct_output_conditional_identity",
            "location": 279,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQiCircuitToString.test_generate_cqasm_correct_output_gate_s": {
            "name": "test_generate_cqasm_correct_output_gate_s",
            "location": 294,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQiCircuitToString.test_generate_cqasm_correct_output_conditional_gate_s": {
            "name": "test_generate_cqasm_correct_output_conditional_gate_s",
            "location": 300,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQiCircuitToString.test_generate_cqasm_correct_output_gate_sdag": {
            "name": "test_generate_cqasm_correct_output_gate_sdag",
            "location": 308,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQiCircuitToString.test_generate_cqasm_correct_output_conditional_gate_sdag": {
            "name": "test_generate_cqasm_correct_output_conditional_gate_sdag",
            "location": 314,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQiCircuitToString.test_generate_cqasm_correct_output_gate_swap": {
            "name": "test_generate_cqasm_correct_output_gate_swap",
            "location": 322,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQiCircuitToString.test_generate_cqasm_correct_output_conditional_gate_swap": {
            "name": "test_generate_cqasm_correct_output_conditional_gate_swap",
            "location": 328,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQiCircuitToString.test_generate_cqasm_correct_output_gate_t": {
            "name": "test_generate_cqasm_correct_output_gate_t",
            "location": 336,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQiCircuitToString.test_generate_cqasm_correct_output_conditional_gate_t": {
            "name": "test_generate_cqasm_correct_output_conditional_gate_t",
            "location": 342,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQiCircuitToString.test_generate_cqasm_correct_output_gate_tdag": {
            "name": "test_generate_cqasm_correct_output_gate_tdag",
            "location": 350,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQiCircuitToString.test_generate_cqasm_correct_output_conditional_gate_tdag": {
            "name": "test_generate_cqasm_correct_output_conditional_gate_tdag",
            "location": 356,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQiCircuitToString.test_generate_cqasm_correct_output_gate_x": {
            "name": "test_generate_cqasm_correct_output_gate_x",
            "location": 364,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQiCircuitToString.test_generate_cqasm_correct_output_conditional_gate_x": {
            "name": "test_generate_cqasm_correct_output_conditional_gate_x",
            "location": 370,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQiCircuitToString.test_generate_cqasm_correct_output_gate_y": {
            "name": "test_generate_cqasm_correct_output_gate_y",
            "location": 378,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQiCircuitToString.test_generate_cqasm_correct_output_conditional_gate_y": {
            "name": "test_generate_cqasm_correct_output_conditional_gate_y",
            "location": 384,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQiCircuitToString.test_generate_cqasm_correct_output_gate_z": {
            "name": "test_generate_cqasm_correct_output_gate_z",
            "location": 392,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQiCircuitToString.test_generate_cqasm_correct_output_conditional_gate_z": {
            "name": "test_generate_cqasm_correct_output_conditional_gate_z",
            "location": 398,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQiCircuitToString.test_generate_cqasm_correct_output_gate_u": {
            "name": "test_generate_cqasm_correct_output_gate_u",
            "location": 406,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQiCircuitToString.test_generate_cqasm_correct_output_conditional_gate_u": {
            "name": "test_generate_cqasm_correct_output_conditional_gate_u",
            "location": 427,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQiCircuitToString.test_generate_cqasm_correct_output_gate_u1_deprecated": {
            "name": "test_generate_cqasm_correct_output_gate_u1_deprecated",
            "location": 458,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQiCircuitToString.test_generate_cqasm_correct_output_conditional_gate_u1_deprecated": {
            "name": "test_generate_cqasm_correct_output_conditional_gate_u1_deprecated",
            "location": 486,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQiCircuitToString.test_generate_cqasm_correct_output_gate_p": {
            "name": "test_generate_cqasm_correct_output_gate_p",
            "location": 524,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQiCircuitToString.test_generate_cqasm_correct_output_conditional_gate_p": {
            "name": "test_generate_cqasm_correct_output_conditional_gate_p",
            "location": 550,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQiCircuitToString.test_generate_cqasm_correct_output_gate_u2": {
            "name": "test_generate_cqasm_correct_output_gate_u2",
            "location": 586,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQiCircuitToString.test_generate_cqasm_correct_output_conditional_gate_u2": {
            "name": "test_generate_cqasm_correct_output_conditional_gate_u2",
            "location": 608,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQiCircuitToString.test_generate_cqasm_correct_output_gate_u2_deprecated": {
            "name": "test_generate_cqasm_correct_output_gate_u2_deprecated",
            "location": 640,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQiCircuitToString.test_generate_cqasm_correct_output_conditional_gate_u2_deprecated": {
            "name": "test_generate_cqasm_correct_output_conditional_gate_u2_deprecated",
            "location": 663,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQiCircuitToString.test_generate_cqasm_correct_output_gate_u3": {
            "name": "test_generate_cqasm_correct_output_gate_u3",
            "location": 696,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQiCircuitToString.test_generate_cqasm_correct_output_conditional_gate_u3": {
            "name": "test_generate_cqasm_correct_output_conditional_gate_u3",
            "location": 723,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQiCircuitToString.test_generate_cqasm_correct_output_gate_u3_deprecated": {
            "name": "test_generate_cqasm_correct_output_gate_u3_deprecated",
            "location": 762,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQiCircuitToString.test_generate_cqasm_correct_output_conditional_gate_u3_deprecated": {
            "name": "test_generate_cqasm_correct_output_conditional_gate_u3_deprecated",
            "location": 790,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQiCircuitToString.test_generate_cqasm_correct_output_sympy_special_cases": {
            "name": "test_generate_cqasm_correct_output_sympy_special_cases",
            "location": 830,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQiCircuitToString.test_generate_cqasm_correct_output_rotation_x": {
            "name": "test_generate_cqasm_correct_output_rotation_x",
            "location": 861,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQiCircuitToString.test_generate_cqasm_correct_output_conditional_rotation_x": {
            "name": "test_generate_cqasm_correct_output_conditional_rotation_x",
            "location": 872,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQiCircuitToString.test_generate_cqasm_correct_output_rotation_y": {
            "name": "test_generate_cqasm_correct_output_rotation_y",
            "location": 887,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQiCircuitToString.test_generate_cqasm_correct_output_conditional_rotation_y": {
            "name": "test_generate_cqasm_correct_output_conditional_rotation_y",
            "location": 898,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQiCircuitToString.test_generate_cqasm_correct_output_rotation_z": {
            "name": "test_generate_cqasm_correct_output_rotation_z",
            "location": 913,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQiCircuitToString.test_generate_cqasm_correct_output_conditional_rotation_z": {
            "name": "test_generate_cqasm_correct_output_conditional_rotation_z",
            "location": 924,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQiCircuitToString.test_generate_cqasm_correct_output_unknown_gate": {
            "name": "test_generate_cqasm_correct_output_unknown_gate",
            "location": 939,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQiCircuitToString.test_generate_cqasm_correct_output_unknown_controlled_gate": {
            "name": "test_generate_cqasm_correct_output_unknown_controlled_gate",
            "location": 944,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQiCircuitToString.test_generate_cqasm_correct_output_no_bit_negation": {
            "name": "test_generate_cqasm_correct_output_no_bit_negation",
            "location": 950,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQiCircuitToString.test_generate_cqasm_correct_output_one_bit_condition": {
            "name": "test_generate_cqasm_correct_output_one_bit_condition",
            "location": 959,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQiCircuitToString.test_generate_cqasm_correct_output_more_bit_condition": {
            "name": "test_generate_cqasm_correct_output_more_bit_condition",
            "location": 999,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQiCircuitToString.test_generate_cqasm_correct_output_unknown_type": {
            "name": "test_generate_cqasm_correct_output_unknown_type",
            "location": 1036,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQiCircuitToString.test_generate_cqasm_correct_output_no_mask": {
            "name": "test_generate_cqasm_correct_output_no_mask",
            "location": 1042,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQiCircuitToString.test_generate_cqasm_register_no_match": {
            "name": "test_generate_cqasm_register_no_match",
            "location": 1048,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQiCircuitToString.test_get_mask_data": {
            "name": "test_get_mask_data",
            "location": 1054,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "quantuminspire-master/src/tests/quantuminspire/qiskit/test_measurements.py": {
        "TestMeasurements._circuit_to_qobj": {
            "name": "_circuit_to_qobj",
            "location": 31,
            "return": [
                "str",
                "list[str]",
                "None",
                "dict[, ]",
                "dict[str, typing.Any]",
                "bool"
            ],
            "arguments": {
                "circuit": [
                    "bool",
                    "str"
                ]
            }
        },
        "TestMeasurements._circuit_to_experiment": {
            "name": "_circuit_to_experiment",
            "location": 38,
            "return": [],
            "arguments": {
                "circuit": [
                    "str",
                    "dict[str, typing.Any]",
                    "int"
                ]
            }
        },
        "TestMeasurements.test_from_experiment": {
            "name": "test_from_experiment",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMeasurements.test_collect_measurements_without_measurements": {
            "name": "test_collect_measurements_without_measurements",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMeasurements.test_validate_nr_classical_qubits_less_than_needed_for_storing_measured_qubits": {
            "name": "test_validate_nr_classical_qubits_less_than_needed_for_storing_measured_qubits",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMeasurements.test_invalid_number_of_classical_bits": {
            "name": "test_invalid_number_of_classical_bits",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMeasurements.test_max_measurement_index": {
            "name": "test_max_measurement_index",
            "location": 97,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMeasurements.test_max_measurement_index_less_than_nr_of_clbits": {
            "name": "test_max_measurement_index_less_than_nr_of_clbits",
            "location": 114,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMeasurements.test_get_qreg_for_conditional_creg": {
            "name": "test_get_qreg_for_conditional_creg",
            "location": 129,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMeasurements.test_from_dict": {
            "name": "test_from_dict",
            "location": 150,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMeasurements.test_measurement_2_qubits_to_1_classical_bit": {
            "name": "test_measurement_2_qubits_to_1_classical_bit",
            "location": 162,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMeasurements.test_measurement_1_qubit_to_2_classical_bits": {
            "name": "test_measurement_1_qubit_to_2_classical_bits",
            "location": 176,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMeasurements.test_qubit_to_classical_hex": {
            "name": "test_qubit_to_classical_hex",
            "location": 191,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMeasurements.test_qubit_to_classical_hex_reversed": {
            "name": "test_qubit_to_classical_hex_reversed",
            "location": 205,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "quantuminspire-master/src/tests/quantuminspire/qiskit/test_qi_job.py": {
        "TestQIJob.setUp": {
            "name": "setUp",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQIJob.test_constructor": {
            "name": "test_constructor",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQIJob.test_constructor_with_qobj": {
            "name": "test_constructor_with_qobj",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQIJob.test_submit_raises_error": {
            "name": "test_submit_raises_error",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQIJob.test_submit": {
            "name": "test_submit",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQIJob.test_result": {
            "name": "test_result",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQIJob.test_result_all_jobs_run": {
            "name": "test_result_all_jobs_run",
            "location": 128,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQIJob.test_result_timeout": {
            "name": "test_result_timeout",
            "location": 146,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQIJob.test_result_cancelled": {
            "name": "test_result_cancelled",
            "location": 158,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQIJob.test_cancel": {
            "name": "test_cancel",
            "location": 169,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQIJob.test_queue_position": {
            "name": "test_queue_position",
            "location": 177,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQIJob.test_status": {
            "name": "test_status",
            "location": 195,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "quantuminspire-master/src/tests/quantuminspire/qiskit/test_qi_result.py": {
        "TestQIResult.setUp": {
            "name": "setUp",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQIResult.test_constructor": {
            "name": "test_constructor",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQIResult.__get_result_for_multiple_experiments": {
            "name": "__get_result_for_multiple_experiments",
            "location": 88,
            "return": [
                "QIResult"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQIResult.test_get_probabilities_for_multiple_experiments_by_name": {
            "name": "test_get_probabilities_for_multiple_experiments_by_name",
            "location": 99,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQIResult.test_get_probabilities_for_multiple_experiments_by_index": {
            "name": "test_get_probabilities_for_multiple_experiments_by_index",
            "location": 107,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQIResult.test_get_probabilities_mm_for_multiple_experiments_by_name": {
            "name": "test_get_probabilities_mm_for_multiple_experiments_by_name",
            "location": 116,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQIResult.test_get_probabilities_mm_for_multiple_experiments_by_index": {
            "name": "test_get_probabilities_mm_for_multiple_experiments_by_index",
            "location": 124,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQIResult.test_get_calibration_for_multiple_experiments_by_name": {
            "name": "test_get_calibration_for_multiple_experiments_by_name",
            "location": 133,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQIResult.test_get_calibration_for_multiple_experiments_by_index": {
            "name": "test_get_calibration_for_multiple_experiments_by_index",
            "location": 141,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQIResult.test_no_probabilities": {
            "name": "test_no_probabilities",
            "location": 150,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQIResult.test_empty_calibration": {
            "name": "test_empty_calibration",
            "location": 161,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQIResult.test_no_calibration_data": {
            "name": "test_no_calibration_data",
            "location": 172,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQIResult.test_no_probabilities_multiple_measurement_data": {
            "name": "test_no_probabilities_multiple_measurement_data",
            "location": 183,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQIResult.test_raw_results": {
            "name": "test_raw_results",
            "location": 194,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "quantuminspire-master/src/tests/quantuminspire/qiskit/test_quantum_inspire_provider.py": {
        "TestQuantumInspireProvider.test_backends": {
            "name": "test_backends",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQuantumInspireProvider.test_simulator_backend": {
            "name": "test_simulator_backend",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQuantumInspireProvider.test_hardware_backend": {
            "name": "test_hardware_backend",
            "location": 115,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQuantumInspireProvider.test_hardware_backend2": {
            "name": "test_hardware_backend2",
            "location": 140,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQuantumInspireProvider.test_set_authentication_details": {
            "name": "test_set_authentication_details",
            "location": 166,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQuantumInspireProvider.test_set_basic_authentication": {
            "name": "test_set_basic_authentication",
            "location": 180,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQuantumInspireProvider.test_set_basic_authentication_with_url": {
            "name": "test_set_basic_authentication_with_url",
            "location": 194,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQuantumInspireProvider.test_set_token_authentication": {
            "name": "test_set_token_authentication",
            "location": 207,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQuantumInspireProvider.test_set_authentication": {
            "name": "test_set_authentication",
            "location": 216,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQuantumInspireProvider.test_set_projectname": {
            "name": "test_set_projectname",
            "location": 229,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQuantumInspireProvider.test_string_method": {
            "name": "test_string_method",
            "location": 241,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQuantumInspireProvider.test_get_api_not_set": {
            "name": "test_get_api_not_set",
            "location": 247,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQuantumInspireProvider.test_get_api": {
            "name": "test_get_api",
            "location": 252,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "quantuminspire-master/src/tests/quantuminspire/qiskit/__init__.py": {}
}
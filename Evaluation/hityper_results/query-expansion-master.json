{
    "query-expansion-master/setup.py": {},
    "query-expansion-master/src/data.py": {
        "dict_k_add_item": {
            "name": "dict_k_add_item",
            "location": 24,
            "return": [],
            "arguments": {
                "d": [],
                "k": [
                    "int"
                ],
                "key": [
                    "bool"
                ],
                "val": [
                    "str",
                    "float",
                    "bool",
                    "list[A]",
                    "list[]",
                    "None",
                    "Exception",
                    "typing.Any"
                ]
            }
        },
        "dict_mat_x_dict": {
            "name": "dict_mat_x_dict",
            "location": 32,
            "return": [
                "dict[, float]"
            ],
            "arguments": {
                "d1": [],
                "d2": [
                    "int",
                    "list[str]",
                    "str",
                    "typing.Sequence[int]",
                    "bytes"
                ],
                "result": [
                    "dict[, ]"
                ]
            }
        },
        "joined_dict_transpose": {
            "name": "joined_dict_transpose",
            "location": 43,
            "return": [
                "dict[str, int]",
                "dict[str, dict[str, int]]",
                "dict[int, typing.Any]",
                "dict[int, dict[str, str]]",
                "dict[, ]"
            ],
            "arguments": {
                "d": []
            }
        },
        "update_dict": {
            "name": "update_dict",
            "location": 51,
            "return": [],
            "arguments": {
                "d": [
                    "dict[, ]"
                ],
                "t": [
                    "str"
                ]
            }
        },
        "query_from_dict_to_str": {
            "name": "query_from_dict_to_str",
            "location": 59,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "d": []
            }
        },
        "update_model": {
            "name": "update_model",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "rows": [],
                "d": [
                    "dict[str, float]"
                ]
            }
        },
        "from_socialpagerank_to_db": {
            "name": "from_socialpagerank_to_db",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "spr": []
            }
        },
        "from_db_to_socialpagerank_matPU": {
            "name": "from_db_to_socialpagerank_matPU",
            "location": 88,
            "return": [
                "dict[str, dict[str, int]]",
                "dict[int, dict[int, int]]",
                "dict[str, dict[int, int]]",
                "dict[, ]"
            ],
            "arguments": {}
        },
        "from_db_to_socialpagerank_matAP": {
            "name": "from_db_to_socialpagerank_matAP",
            "location": 101,
            "return": [
                "dict[, ]"
            ],
            "arguments": {}
        },
        "from_db_to_socialpagerank_matUA": {
            "name": "from_db_to_socialpagerank_matUA",
            "location": 113,
            "return": [
                "dict[str, dict[str, int]]",
                "dict[int, dict[int, int]]",
                "dict[str, dict[int, int]]",
                "dict[, ]"
            ],
            "arguments": {}
        },
        "get_min_key_by_val": {
            "name": "get_min_key_by_val",
            "location": 125,
            "return": [
                "tuple[]",
                "list[str]",
                "int",
                "list[tuple[typing.Union[typing.Any,typing.Any]]]",
                "dict[, ]",
                "str"
            ],
            "arguments": {
                "d": []
            }
        },
        "get_min_max_mat_dict": {
            "name": "get_min_max_mat_dict",
            "location": 133,
            "return": [
                "tuple[int]"
            ],
            "arguments": {
                "m": [],
                "_min": [],
                "_max": [
                    "int"
                ]
            }
        },
        "randomize_matP": {
            "name": "randomize_matP",
            "location": 145,
            "return": [
                "dict[, ]"
            ],
            "arguments": {
                "matPU": [
                    "dict[str, dict[str, int]]",
                    "typing.Mapping",
                    "dict[, ]",
                    "bool"
                ],
                "matAP": [
                    "dict[str, dict[str, int]]",
                    "typing.Mapping",
                    "dict[, ]",
                    "bool"
                ],
                "matUA": [
                    "dict[str, dict[str, int]]",
                    "typing.Mapping",
                    "dict[, ]",
                    "bool"
                ]
            }
        },
        "print_info": {
            "name": "print_info",
            "location": 157,
            "return": [
                "None"
            ],
            "arguments": {
                "tweet": [
                    "str",
                    "typing.Type",
                    "None",
                    "list[str]",
                    "bool"
                ]
            }
        },
        "update_many": {
            "name": "update_many",
            "location": 168,
            "return": [
                "None"
            ],
            "arguments": {
                "entity": [
                    "dict[str, float]",
                    "dict[, ]"
                ],
                "data": [
                    "dict[str, float]",
                    "dict[, ]"
                ]
            }
        },
        "tf_iuf": {
            "name": "tf_iuf",
            "location": 174,
            "return": [
                "float"
            ],
            "arguments": {
                "na": [
                    "int",
                    "float"
                ],
                "nu": [
                    "float",
                    "int"
                ],
                "term": [
                    "int",
                    "float",
                    "None",
                    "str",
                    "list[str]"
                ]
            }
        },
        "get_annotation_neighbours": {
            "name": "get_annotation_neighbours",
            "location": 188,
            "return": [
                "set[str]"
            ],
            "arguments": {
                "a1": [
                    "typing.Sequence[int]",
                    "typing.Callable[None, bool]",
                    "int"
                ]
            }
        },
        "get_users_from_term": {
            "name": "get_users_from_term",
            "location": 200,
            "return": [],
            "arguments": {
                "term": [
                    "str",
                    "typing.Callable[, ]"
                ]
            }
        },
        "get_user_count": {
            "name": "get_user_count",
            "location": 210,
            "return": [
                "int"
            ],
            "arguments": {}
        },
        "get_term_count": {
            "name": "get_term_count",
            "location": 214,
            "return": [
                "int"
            ],
            "arguments": {}
        },
        "get_terms": {
            "name": "get_terms",
            "location": 218,
            "return": [],
            "arguments": {}
        },
        "get_annotation_rank": {
            "name": "get_annotation_rank",
            "location": 222,
            "return": [
                "float"
            ],
            "arguments": {
                "annotation_id": [
                    "str",
                    "list[int]",
                    "int"
                ]
            }
        },
        "get_term_user_times": {
            "name": "get_term_user_times",
            "location": 227,
            "return": [
                "int"
            ],
            "arguments": {
                "term": [
                    "str",
                    "int"
                ],
                "user": [
                    "str",
                    "dict[, ]",
                    "None"
                ]
            }
        },
        "wait_for_db": {
            "name": "wait_for_db",
            "location": 237,
            "return": [],
            "arguments": {}
        },
        "close_connection": {
            "name": "close_connection",
            "location": 247,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "create_db": {
            "name": "create_db",
            "location": 251,
            "return": [
                "None"
            ],
            "arguments": {
                "db": []
            }
        },
        "normalize_data": {
            "name": "normalize_data",
            "location": 256,
            "return": [
                "set[typing.Union[tuple[str],set[],dict[, ],str]]"
            ],
            "arguments": {
                "text": [
                    "str",
                    "int",
                    "bytes"
                ]
            }
        },
        "key_contains": {
            "name": "key_contains",
            "location": 285,
            "return": [
                "set[]",
                "set[typing.Text]"
            ],
            "arguments": {
                "keys": [
                    "str",
                    "bytes"
                ],
                "key": [
                    "str",
                    "bytes",
                    "None",
                    "dict[, ]"
                ],
                "ret": [
                    "set[]"
                ]
            }
        },
        "save_tweet": {
            "name": "save_tweet",
            "location": 294,
            "return": [
                "None"
            ],
            "arguments": {
                "tag": [
                    "str",
                    "None",
                    "float"
                ],
                "doc_id": [
                    "str",
                    "int",
                    "dict[, ]",
                    "None",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "remove_urls": {
            "name": "remove_urls",
            "location": 299,
            "return": [],
            "arguments": {
                "text": [
                    "str"
                ]
            }
        },
        "save_data": {
            "name": "save_data",
            "location": 303,
            "return": [
                "None"
            ],
            "arguments": {
                "tweet": [
                    "int",
                    "str"
                ],
                "u_r": [
                    "int",
                    "dict[, ]"
                ],
                "u_w": [
                    "typing.Callable[D, typing.Any]",
                    "None"
                ]
            }
        },
        "save_replies": {
            "name": "save_replies",
            "location": 318,
            "return": [
                "None"
            ],
            "arguments": {
                "replies": [
                    "str",
                    "dict[str, typing.Any]"
                ],
                "u_r": [
                    "str",
                    "float"
                ]
            }
        },
        "get_data": {
            "name": "get_data",
            "location": 323,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "query-expansion-master/src/main.py": {},
    "query-expansion-master/src/models.py": {},
    "query-expansion-master/src/socialpagerank.py": {
        "query_expansion": {
            "name": "query_expansion",
            "location": 12,
            "return": [
                "dict[typing.Union[str,tuple[typing.Union[typing.Any,typing.Any]]], set[list[str]]]"
            ],
            "arguments": {
                "query": [
                    "str",
                    "dict[, ]",
                    "bool"
                ],
                "k": [
                    "int"
                ]
            }
        },
        "simstep": {
            "name": "simstep",
            "location": 33,
            "return": [
                "int",
                "float"
            ],
            "arguments": {
                "term1": [
                    "int",
                    "float"
                ],
                "term2": [
                    "int",
                    "float"
                ],
                "accUser": [
                    "tuple[]",
                    "str",
                    "list[str]"
                ],
                "unaccUser": [
                    "str",
                    "None",
                    "dict[str, typing.Any]"
                ],
                "mat": [],
                "stepValue": [
                    "int",
                    "float"
                ]
            }
        },
        "rank": {
            "name": "rank",
            "location": 45,
            "return": [
                "float"
            ],
            "arguments": {
                "na": [
                    "int",
                    "float"
                ],
                "nu": [
                    "int",
                    "float"
                ],
                "query_term": [
                    "list[]",
                    "int"
                ],
                "term": [
                    "int",
                    "typing.Callable[, ]",
                    "None"
                ],
                "y": [
                    "float"
                ]
            }
        },
        "sim": {
            "name": "sim",
            "location": 55,
            "return": [
                "int",
                "dict[, ]",
                "list[int]",
                "list[list[int]]",
                "str"
            ],
            "arguments": {
                "term1": [
                    "int",
                    "bytes",
                    "str",
                    "None"
                ],
                "term2": [
                    "int",
                    "bytes",
                    "str",
                    "None"
                ]
            }
        },
        "step_spr_trasposed": {
            "name": "step_spr_trasposed",
            "location": 80,
            "return": [],
            "arguments": {
                "mat": [
                    "dict[str, float]",
                    "dict[str, dict[str, int]]",
                    "typing.MutableMapping",
                    "dict[int, dict[int, typing.Any]]",
                    "dict[str, str]"
                ],
                "v": [
                    "dict[str, float]",
                    "dict[str, dict[str, int]]",
                    "typing.MutableMapping",
                    "dict[int, dict[int, typing.Any]]",
                    "dict[str, str]"
                ],
                "matxv": [
                    "dict[str, float]",
                    "dict[str, dict[str, int]]",
                    "typing.MutableMapping",
                    "dict[int, dict[int, typing.Any]]",
                    "dict[str, str]"
                ]
            }
        },
        "step_spr_regular": {
            "name": "step_spr_regular",
            "location": 86,
            "return": [],
            "arguments": {
                "mat": [
                    "dict[str, float]",
                    "dict[str, dict[str, int]]",
                    "str",
                    "dict[str, int]",
                    "range",
                    "typing.Callable[, ]"
                ],
                "v": [
                    "dict[str, float]",
                    "dict[str, dict[str, int]]",
                    "str",
                    "dict[str, int]",
                    "range",
                    "typing.Callable[, ]"
                ]
            }
        },
        "socialpagerank": {
            "name": "socialpagerank",
            "location": 91,
            "return": [
                "tuple[typing.Union[int,dict[, ],list[int],list[list[int]],str,typing.Callable[, ],dict[str, float]]]"
            ],
            "arguments": {
                "matpageuser": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ],
                "matannotationpage": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ],
                "matuserannotation": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ],
                "matp": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ],
                "maxIt": [
                    "int"
                ]
            }
        }
    },
    "query-expansion-master/src/urlmarker.py": {}
}
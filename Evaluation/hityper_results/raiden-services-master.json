{
    "raiden-services-master/setup.py": {
        "read_requirements": {
            "name": "read_requirements",
            "location": 15,
            "return": [
                "list[]"
            ],
            "arguments": {
                "path": [
                    "str"
                ]
            }
        }
    },
    "raiden-services-master/deployment/builder/app/main.py": {
        "print_to_stderr": {
            "name": "print_to_stderr",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "s": [
                    "str",
                    "tuple[str]",
                    "bytes"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 17,
            "return": [
                "typing.Text"
            ],
            "arguments": {}
        },
        "dockerhub": {
            "name": "dockerhub",
            "location": 27,
            "return": [
                "typing.Text"
            ],
            "arguments": {}
        }
    },
    "raiden-services-master/docs/conf.py": {},
    "raiden-services-master/src/__init__.py": {},
    "raiden-services-master/src/monitoring_service/api.py": {
        "MSResource.__init__": {
            "name": "__init__",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "monitoring_service": [
                    "str",
                    "int"
                ],
                "api": [
                    "int",
                    "float"
                ]
            }
        },
        "InfoResource.get": {
            "name": "get",
            "location": 35,
            "return": [
                "tuple[typing.Union[dict[typing.Text, dict[typing.Text, dict[typing.Text, ]]],int]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "InfoResource2.get": {
            "name": "get",
            "location": 64,
            "return": [
                "tuple[typing.Union[dict[typing.Text, typing.Union[str,dict[typing.Text, dict[typing.Text, str]]]],int]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MSApi.__init__": {
            "name": "__init__",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "monitoring_service": [
                    "typing.Callable[, ]",
                    "dict[, ]"
                ],
                "operator": [
                    "int",
                    "dict[str, typing.Any]",
                    "None"
                ],
                "info_message": []
            }
        },
        "MSApi.run": {
            "name": "run",
            "location": 129,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "host": [
                    "int",
                    "str"
                ],
                "port": [
                    "int",
                    "str"
                ]
            }
        },
        "MSApi.stop": {
            "name": "stop",
            "location": 135,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "raiden-services-master/src/monitoring_service/cli.py": {
        "main": {
            "name": "main",
            "location": 91,
            "return": [
                "int"
            ],
            "arguments": {
                "private_key": [
                    "str",
                    "None",
                    "int"
                ],
                "state_db": [
                    "str",
                    "None",
                    "int"
                ],
                "web3": [
                    "str",
                    "list[int]",
                    "int",
                    "bytes",
                    "None"
                ],
                "contracts": [
                    "dict[str, str]"
                ],
                "start_block": [
                    "bool",
                    "str",
                    "None",
                    "dict[str, str]"
                ],
                "host": [
                    "int",
                    "str",
                    "list[int]",
                    "None"
                ],
                "port": [
                    "int",
                    "str",
                    "list[int]",
                    "None"
                ],
                "min_reward": [
                    "str",
                    "None",
                    "int"
                ],
                "confirmations": [
                    "int",
                    "str"
                ],
                "operator": [
                    "str",
                    "bool",
                    "dict[str, typing.Any]"
                ],
                "info_message": [
                    "str",
                    "bool",
                    "dict[str, typing.Any]"
                ],
                "debug_shell": [
                    "bool",
                    "float",
                    "None"
                ],
                "accept_disclaimer": [
                    "bool",
                    "float",
                    "None"
                ]
            }
        }
    },
    "raiden-services-master/src/monitoring_service/constants.py": {},
    "raiden-services-master/src/monitoring_service/database.py": {
        "SharedDatabase.upsert_monitor_request": {
            "name": "upsert_monitor_request",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "dict[, ]"
                ]
            }
        },
        "SharedDatabase.get_monitor_request": {
            "name": "get_monitor_request",
            "location": 60,
            "return": [
                "None",
                "MonitorRequest"
            ],
            "arguments": {
                "self": [],
                "token_network_address": [
                    "int",
                    "str"
                ],
                "channel_id": [
                    "int",
                    "str"
                ],
                "non_closing_signer": [
                    "int",
                    "str"
                ]
            }
        },
        "SharedDatabase.monitor_request_count": {
            "name": "monitor_request_count",
            "location": 99,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SharedDatabase.upsert_channel": {
            "name": "upsert_channel",
            "location": 102,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "channel": [
                    "str",
                    "None",
                    "int",
                    "typing.Callable[dict[, ], bool]",
                    "dict[, ]",
                    "float"
                ]
            }
        },
        "SharedDatabase.get_channel": {
            "name": "get_channel",
            "location": 127,
            "return": [
                "None",
                "Channel"
            ],
            "arguments": {
                "self": [],
                "token_network_address": [
                    "int",
                    "list[int]"
                ],
                "channel_id": [
                    "int",
                    "list[int]"
                ]
            }
        },
        "SharedDatabase.channel_count": {
            "name": "channel_count",
            "location": 161,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SharedDatabase.upsert_scheduled_event": {
            "name": "upsert_scheduled_event",
            "location": 164,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "dict[, ]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "SharedDatabase.get_scheduled_events": {
            "name": "get_scheduled_events",
            "location": 178,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": [],
                "max_trigger_timestamp": [
                    "list[str]",
                    "str",
                    "bool"
                ]
            }
        },
        "SharedDatabase.remove_scheduled_event": {
            "name": "remove_scheduled_event",
            "location": 203,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "dict[str, typing.Any]",
                    "typing.Mapping",
                    "dict[, ]"
                ]
            }
        },
        "SharedDatabase.scheduled_event_count": {
            "name": "scheduled_event_count",
            "location": 222,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SharedDatabase.get_waiting_transactions": {
            "name": "get_waiting_transactions",
            "location": 225,
            "return": [
                "list[TransactionHash]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SharedDatabase.add_waiting_transaction": {
            "name": "add_waiting_transaction",
            "location": 231,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "waiting_tx_hash": [
                    "str",
                    "float"
                ]
            }
        },
        "SharedDatabase.remove_waiting_transaction": {
            "name": "remove_waiting_transaction",
            "location": 236,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tx_hash": [
                    "str",
                    "Exception"
                ]
            }
        },
        "SharedDatabase.load_state": {
            "name": "load_state",
            "location": 241,
            "return": [
                "MonitoringServiceState"
            ],
            "arguments": {
                "self": []
            }
        },
        "SharedDatabase.channel_close_age": {
            "name": "channel_close_age",
            "location": 250,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "token_network_address": [
                    "int"
                ],
                "channel_id": [
                    "int"
                ]
            }
        },
        "Database.__init__": {
            "name": "__init__",
            "location": 270,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "str",
                    "typing.Callable[, ]",
                    "bool",
                    "dict[, ]",
                    "None"
                ],
                "chain_id": [
                    "int",
                    "list[int]",
                    "typing.Sequence[str]"
                ],
                "msc_address": [
                    "int",
                    "list[int]",
                    "typing.Sequence[str]"
                ],
                "registry_address": [
                    "int",
                    "list[int]",
                    "typing.Sequence[str]"
                ],
                "receiver": [
                    "int",
                    "list[int]",
                    "typing.Sequence[str]"
                ],
                "sync_start_block": [
                    "BlockNumber"
                ]
            }
        },
        "SharedDatabase.get_scheduled_events.create_scheduled_event": {
            "name": "create_scheduled_event",
            "location": 191,
            "return": [
                "ScheduledEvent"
            ],
            "arguments": {
                "row": []
            }
        }
    },
    "raiden-services-master/src/monitoring_service/events.py": {},
    "raiden-services-master/src/monitoring_service/exceptions.py": {},
    "raiden-services-master/src/monitoring_service/handlers.py": {
        "token_network_created_handler": {
            "name": "token_network_created_handler",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "event": [
                    "dict[, ]"
                ],
                "context": []
            }
        },
        "channel_opened_event_handler": {
            "name": "channel_opened_event_handler",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "event": [
                    "dict[, ]"
                ],
                "context": [
                    "int",
                    "dict[str, float]"
                ]
            }
        },
        "_first_allowed_timestamp_to_monitor": {
            "name": "_first_allowed_timestamp_to_monitor",
            "location": 95,
            "return": [
                "Timestamp"
            ],
            "arguments": {
                "token_network_address": [
                    "str",
                    "dict[str, typing.Any]",
                    "int"
                ],
                "channel": [
                    "str",
                    "dict[str, typing.Any]",
                    "int"
                ],
                "context": [
                    "str",
                    "dict[str, typing.Any]",
                    "int"
                ]
            }
        },
        "channel_closed_event_handler": {
            "name": "channel_closed_event_handler",
            "location": 110,
            "return": [
                "None"
            ],
            "arguments": {
                "event": [
                    "list[dict[, ]]"
                ],
                "context": [
                    "dict[, ]"
                ]
            }
        },
        "non_closing_balance_proof_updated_event_handler": {
            "name": "non_closing_balance_proof_updated_event_handler",
            "location": 188,
            "return": [
                "None"
            ],
            "arguments": {
                "event": [
                    "dict[, ]"
                ],
                "context": [
                    "dict[, ]",
                    "str"
                ]
            }
        },
        "channel_settled_event_handler": {
            "name": "channel_settled_event_handler",
            "location": 261,
            "return": [
                "None"
            ],
            "arguments": {
                "event": [
                    "list[dict[, ]]"
                ],
                "context": [
                    "dict[, ]"
                ]
            }
        },
        "monitor_new_balance_proof_event_handler": {
            "name": "monitor_new_balance_proof_event_handler",
            "location": 286,
            "return": [
                "None"
            ],
            "arguments": {
                "event": [
                    "dict[, ]"
                ],
                "context": [
                    "dict[, ]",
                    "str"
                ]
            }
        },
        "monitor_reward_claim_event_handler": {
            "name": "monitor_reward_claim_event_handler",
            "location": 389,
            "return": [
                "None"
            ],
            "arguments": {
                "event": [
                    "dict[str, typing.Any]",
                    "dict[, ]"
                ],
                "context": [
                    "str",
                    "dict[str, typing.Any]",
                    "dict[, ]",
                    "None"
                ]
            }
        },
        "updated_head_block_event_handler": {
            "name": "updated_head_block_event_handler",
            "location": 408,
            "return": [
                "None"
            ],
            "arguments": {
                "event": [],
                "context": []
            }
        },
        "_is_mr_valid": {
            "name": "_is_mr_valid",
            "location": 415,
            "return": [
                "bool"
            ],
            "arguments": {
                "monitor_request": [],
                "channel": [
                    "dict[, ]",
                    "None"
                ]
            }
        },
        "action_monitoring_triggered_event_handler": {
            "name": "action_monitoring_triggered_event_handler",
            "location": 430,
            "return": [
                "None"
            ],
            "arguments": {
                "event": [
                    "list[E]"
                ],
                "context": []
            }
        },
        "action_claim_reward_triggered_event_handler": {
            "name": "action_claim_reward_triggered_event_handler",
            "location": 565,
            "return": [
                "None"
            ],
            "arguments": {
                "event": [],
                "context": []
            }
        },
        "Context.latest_committed_block": {
            "name": "latest_committed_block",
            "location": 53,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Context.latest_confirmed_block": {
            "name": "latest_confirmed_block",
            "location": 59,
            "return": [
                "BlockNumber"
            ],
            "arguments": {
                "self": []
            }
        },
        "Context.get_latest_unconfirmed_block": {
            "name": "get_latest_unconfirmed_block",
            "location": 62,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "raiden-services-master/src/monitoring_service/metrics.py": {
        "report_increased_reward_claims": {
            "name": "report_increased_reward_claims",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "amount": [
                    "str",
                    "int"
                ],
                "who": [
                    "str",
                    "bool"
                ]
            }
        }
    },
    "raiden-services-master/src/monitoring_service/service.py": {
        "check_gas_reserve": {
            "name": "check_gas_reserve",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "web3": [
                    "int",
                    "str"
                ],
                "private_key": [
                    "bytes",
                    "int",
                    "str"
                ]
            }
        },
        "handle_event": {
            "name": "handle_event",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "event": [
                    "dict[, ]"
                ],
                "context": []
            }
        },
        "MonitoringService.__init__": {
            "name": "__init__",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "web3": [
                    "str",
                    "list[str]",
                    "bytes",
                    "None",
                    "list[]"
                ],
                "private_key": [
                    "bytes",
                    "bool",
                    "str",
                    "None"
                ],
                "db_filename": [
                    "bool",
                    "None",
                    "str"
                ],
                "contracts": [
                    "bool",
                    "str",
                    "typing.Iterator"
                ],
                "sync_start_block": [
                    "bool",
                    "None",
                    "str"
                ],
                "required_confirmations": [
                    "int",
                    "typing.Callable[, ]",
                    "float",
                    "None",
                    "dict[str, typing.Any]"
                ],
                "poll_interval": [
                    "bool"
                ],
                "min_reward": [
                    "int"
                ],
                "get_timestamp_now": []
            }
        },
        "MonitoringService.start": {
            "name": "start",
            "location": 141,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MonitoringService._process_new_blocks": {
            "name": "_process_new_blocks",
            "location": 165,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "latest_confirmed_block": [
                    "int",
                    "None"
                ]
            }
        },
        "MonitoringService._trigger_scheduled_events": {
            "name": "_trigger_scheduled_events",
            "location": 181,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MonitoringService._check_pending_transactions": {
            "name": "_check_pending_transactions",
            "location": 211,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MonitoringService._purge_old_monitor_requests": {
            "name": "_purge_old_monitor_requests",
            "location": 248,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "raiden-services-master/src/monitoring_service/states.py": {
        "Channel.participants": {
            "name": "participants",
            "location": 58,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "HashedBalanceProof.__init__": {
            "name": "__init__",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "channel_identifier": [
                    "int",
                    "dict[int, dict[, ]]",
                    "str",
                    "None"
                ],
                "token_network_address": [
                    "str",
                    "list[dict[, ]]",
                    "dict[str, typing.Any]",
                    "None"
                ],
                "chain_id": [
                    "str"
                ],
                "nonce": [
                    "str",
                    "typing.Sequence[str]",
                    "list[list[typing.Any]]",
                    "int"
                ],
                "additional_hash": [
                    "str",
                    "typing.Sequence[str]",
                    "list[list[typing.Any]]",
                    "int"
                ],
                "balance_hash": [
                    "None",
                    "bytes",
                    "dict[str, typing.Any]",
                    "str",
                    "bool"
                ],
                "signature": [
                    "None",
                    "str",
                    "int",
                    "Exception",
                    "bytes"
                ],
                "transferred_amount": [
                    "None",
                    "int",
                    "list[dict[str, typing.Any]]",
                    "dict[str, typing.Any]",
                    "bytes"
                ],
                "locked_amount": [
                    "None",
                    "int",
                    "list[dict[str, typing.Any]]",
                    "dict[str, typing.Any]",
                    "bytes"
                ],
                "locksroot": [
                    "None",
                    "int",
                    "list[dict[str, typing.Any]]",
                    "dict[str, typing.Any]",
                    "bytes"
                ],
                "priv_key": [
                    "None",
                    "int",
                    "bytes",
                    "str"
                ]
            }
        },
        "HashedBalanceProof.serialize_bin": {
            "name": "serialize_bin",
            "location": 114,
            "return": [],
            "arguments": {
                "self": [],
                "msg_type": []
            }
        },
        "HashedBalanceProof.get_request_monitoring": {
            "name": "get_request_monitoring",
            "location": 125,
            "return": [
                "RequestMonitoring"
            ],
            "arguments": {
                "self": [],
                "privkey": [
                    "str",
                    "int"
                ],
                "reward_amount": [
                    "typing.Callable[, ]",
                    "int",
                    "dict[, ]"
                ],
                "monitoring_service_contract_address": [
                    "typing.Callable[, ]",
                    "int",
                    "dict[, ]"
                ]
            }
        },
        "HashedBalanceProof.get_monitor_request": {
            "name": "get_monitor_request",
            "location": 152,
            "return": [],
            "arguments": {
                "self": [],
                "privkey": [
                    "dict[str, str]",
                    "None",
                    "int"
                ],
                "reward_amount": [
                    "dict[str, str]",
                    "None",
                    "int"
                ],
                "msc_address": [
                    "dict[str, str]",
                    "None",
                    "int"
                ]
            }
        },
        "HashedBalanceProof.get_counter_signature": {
            "name": "get_counter_signature",
            "location": 172,
            "return": [],
            "arguments": {
                "self": [],
                "privkey": [
                    "typing.Callable[, ]",
                    "list[str]",
                    "str",
                    "int"
                ]
            }
        },
        "UnsignedMonitorRequest.__post_init__": {
            "name": "__post_init__",
            "location": 209,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UnsignedMonitorRequest.sign": {
            "name": "sign",
            "location": 214,
            "return": [
                "MonitorRequest"
            ],
            "arguments": {
                "self": [],
                "priv_key": [
                    "bytes",
                    "typing.Hashable",
                    "str"
                ]
            }
        },
        "UnsignedMonitorRequest.packed_balance_proof_data": {
            "name": "packed_balance_proof_data",
            "location": 234,
            "return": [],
            "arguments": {
                "self": [],
                "message_type": []
            }
        },
        "UnsignedMonitorRequest.packed_reward_proof_data": {
            "name": "packed_reward_proof_data",
            "location": 247,
            "return": [],
            "arguments": {
                "self": [],
                "non_closing_signature": [
                    "str"
                ]
            }
        },
        "UnsignedMonitorRequest.packed_non_closing_data": {
            "name": "packed_non_closing_data",
            "location": 258,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MonitorRequest.__post_init__": {
            "name": "__post_init__",
            "location": 276,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "raiden-services-master/src/monitoring_service/__init__.py": {},
    "raiden-services-master/src/pathfinding_service/api.py": {
        "create_and_store_feedback_tokens": {
            "name": "create_and_store_feedback_tokens",
            "location": 208,
            "return": [
                "FeedbackToken"
            ],
            "arguments": {
                "pathfinding_service": [
                    "str",
                    "float",
                    "dict[str, typing.Any]",
                    "None"
                ],
                "token_network_address": [
                    "tuple[typing.Union[str,dict[, ]]]",
                    "bool"
                ],
                "routes": [
                    "str",
                    "list[tuple[typing.Union[int,int]]]"
                ]
            }
        },
        "process_payment": {
            "name": "process_payment",
            "location": 225,
            "return": [
                "None"
            ],
            "arguments": {
                "iou": [
                    "str",
                    "bool"
                ],
                "pathfinding_service": [],
                "service_fee": [
                    "int"
                ],
                "one_to_n_address": [
                    "str",
                    "bool",
                    "dict[str, str]",
                    "list[str]",
                    "dict[str, dict[, ]]"
                ]
            }
        },
        "PathfinderResource.__init__": {
            "name": "__init__",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pathfinding_service": [
                    "int",
                    "float"
                ],
                "api": [
                    "int",
                    "float"
                ]
            }
        },
        "PathfinderResource._validate_token_network_argument": {
            "name": "_validate_token_network_argument",
            "location": 67,
            "return": [
                "str",
                "int",
                "dict[, ]",
                "None"
            ],
            "arguments": {
                "self": [],
                "token_network_address": [
                    "str",
                    "list[typing.Any]",
                    "None"
                ]
            }
        },
        "PathfinderResource._parse_post": {
            "name": "_parse_post",
            "location": 82,
            "return": [],
            "arguments": {
                "req_class": [
                    "bool",
                    "None"
                ]
            }
        },
        "PathsResource.__init__": {
            "name": "__init__",
            "location": 114,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "debug_mode": [
                    "bool",
                    "str",
                    "float"
                ]
            }
        },
        "PathsResource.post": {
            "name": "post",
            "location": 118,
            "return": [
                "tuple[typing.Union[dict[typing.Text, list[]],int]]"
            ],
            "arguments": {
                "self": [],
                "token_network_address": []
            }
        },
        "IOURequest.is_signature_valid": {
            "name": "is_signature_valid",
            "location": 329,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "IOUResource.get": {
            "name": "get",
            "location": 339,
            "return": [
                "tuple[typing.Union[dict[typing.Text, typing.Union[dict[str, list[float]],list[],int]],int]]",
                "tuple[typing.Union[dict[typing.Text, None],int]]"
            ],
            "arguments": {
                "self": [],
                "token_network_address": [
                    "int",
                    "list[int]",
                    "str"
                ]
            }
        },
        "FeedbackResource.post": {
            "name": "post",
            "location": 376,
            "return": [
                "tuple[typing.Union[dict[, ],int]]"
            ],
            "arguments": {
                "self": [],
                "token_network_address": [
                    "int"
                ]
            }
        },
        "InfoResource.get": {
            "name": "get",
            "location": 412,
            "return": [
                "tuple[typing.Union[dict[typing.Text, dict[typing.Text, dict[typing.Text, ]]],int]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "InfoResource2.get": {
            "name": "get",
            "location": 445,
            "return": [
                "tuple[typing.Union[dict[typing.Text, typing.Union[str,dict[typing.Text, dict[typing.Text, str]]]],int]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "AddressMetadataResource.get": {
            "name": "get",
            "location": 478,
            "return": [
                "tuple[typing.Union[dict[typing.Text, typing.Union[str,list[dict[, ]],int]],int]]"
            ],
            "arguments": {
                "self": [],
                "checksummed_address": [
                    "str",
                    "None",
                    "bool"
                ]
            }
        },
        "AddressMetadataResource._validate_address_argument": {
            "name": "_validate_address_argument",
            "location": 505,
            "return": [],
            "arguments": {
                "address": [
                    "int",
                    "str",
                    "bytes"
                ]
            }
        },
        "SuggestPartnerResource.get": {
            "name": "get",
            "location": 520,
            "return": [
                "tuple[typing.Union[dict[, ],str,dict[str, typing.Union[typing.Any,typing.Any,typing.Any,typing.Any,typing.Any,typing.Any,typing.Any,typing.Any]],list[tuple[]],int]]",
                "tuple[int]"
            ],
            "arguments": {
                "self": [],
                "token_network_address": [
                    "str",
                    "bytes",
                    "int"
                ]
            }
        },
        "OnlineAddressesResource.get": {
            "name": "get",
            "location": 539,
            "return": [
                "tuple[typing.Union[list[],int]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "DebugPathResource.get": {
            "name": "get",
            "location": 551,
            "return": [
                "tuple[int]"
            ],
            "arguments": {
                "self": [],
                "token_network_address": [
                    "str",
                    "int"
                ],
                "source_address": [
                    "str",
                    "int"
                ],
                "target_address": [
                    "None",
                    "float",
                    "str",
                    "typing.Any",
                    "bool"
                ]
            }
        },
        "DebugIOUResource.get": {
            "name": "get",
            "location": 608,
            "return": [
                "tuple[int]",
                "tuple[typing.Union[dict[, ],int]]"
            ],
            "arguments": {
                "self": [],
                "source_address": [
                    "str",
                    "int"
                ]
            }
        },
        "DebugStatsResource.get": {
            "name": "get",
            "location": 623,
            "return": [
                "tuple[typing.Union[dict[typing.Text, typing.Union[float,int,tuple[typing.Union[typing.Any,typing.Any]]]],int]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "PFSApi.__init__": {
            "name": "__init__",
            "location": 656,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pathfinding_service": [
                    "bytes",
                    "int",
                    "str"
                ],
                "one_to_n_address": [
                    "str",
                    "bool"
                ],
                "operator": [
                    "str",
                    "bool"
                ],
                "info_message": [],
                "service_fee": [
                    "TokenAmount"
                ],
                "debug_mode": [
                    "bool"
                ],
                "enable_tracing": [
                    "bool"
                ]
            }
        },
        "PFSApi.run": {
            "name": "run",
            "location": 748,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "host": [
                    "int",
                    "str"
                ],
                "port": [
                    "int",
                    "str"
                ]
            }
        },
        "PFSApi.stop": {
            "name": "stop",
            "location": 754,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PFSApi.__init__.after_request": {
            "name": "after_request",
            "location": 689,
            "return": [],
            "arguments": {
                "response": []
            }
        }
    },
    "raiden-services-master/src/pathfinding_service/claim_fees.py": {
        "main": {
            "name": "main",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "private_key": [
                    "int",
                    "str",
                    "list[dict[str, typing.Any]]",
                    "bytes",
                    "None",
                    "tuple[]"
                ],
                "state_db": [
                    "str"
                ],
                "web3": [
                    "list[]",
                    "str",
                    "bytes",
                    "None",
                    "float"
                ],
                "contracts": [
                    "dict[str, web3.contracContract]",
                    "bool",
                    "float"
                ],
                "start_block": [
                    "str"
                ],
                "rdn_per_eth": [
                    "float",
                    "bool"
                ],
                "expire_within": [
                    "int",
                    "float"
                ]
            }
        },
        "calc_claim_cost_rdn": {
            "name": "calc_claim_cost_rdn",
            "location": 71,
            "return": [
                "TokenAmount"
            ],
            "arguments": {
                "web3": [
                    "typing.Callable[, ]",
                    "str",
                    "dict[, ]",
                    "bool"
                ],
                "rdn_per_eth": [
                    "float",
                    "bool"
                ]
            }
        },
        "get_claimable_ious": {
            "name": "get_claimable_ious",
            "location": 82,
            "return": [],
            "arguments": {
                "database": [],
                "claimable_until_after": [
                    "list[dict[str, typing.Any]]",
                    "int",
                    "str",
                    "None"
                ],
                "claimable_until_before": [
                    "list[dict[str, typing.Any]]",
                    "int",
                    "str",
                    "None"
                ],
                "claim_cost_rdn": [
                    "list[dict[str, typing.Any]]",
                    "int",
                    "str",
                    "None"
                ]
            }
        },
        "claim_ious": {
            "name": "claim_ious",
            "location": 96,
            "return": [
                "tuple[int]"
            ],
            "arguments": {
                "ious": [],
                "claim_cost_rdn": [
                    "float",
                    "bool",
                    "None",
                    "str"
                ],
                "one_to_n_contract": [
                    "int",
                    "list[dict[str, int]]"
                ],
                "web3": [
                    "list[]",
                    "float"
                ],
                "database": [
                    "float",
                    "bool",
                    "None",
                    "str"
                ]
            }
        }
    },
    "raiden-services-master/src/pathfinding_service/cli.py": {
        "main": {
            "name": "main",
            "location": 94,
            "return": [
                "int"
            ],
            "arguments": {
                "private_key": [
                    "str",
                    "list[str]",
                    "typing.Mapping",
                    "None"
                ],
                "state_db": [
                    "str",
                    "list[str]",
                    "typing.Mapping",
                    "None"
                ],
                "web3": [
                    "str",
                    "bytes",
                    "bool",
                    "list[int]",
                    "None"
                ],
                "contracts": [
                    "dict[str, list[str]]"
                ],
                "start_block": [
                    "str",
                    "None",
                    "int",
                    "dict[str, typing.Any]"
                ],
                "confirmations": [
                    "int",
                    "str"
                ],
                "host": [
                    "int",
                    "str",
                    "list[int]",
                    "None"
                ],
                "port": [
                    "int",
                    "str",
                    "list[int]",
                    "None"
                ],
                "service_fee": [
                    "str",
                    "bool"
                ],
                "operator": [
                    "str",
                    "bool"
                ],
                "info_message": [
                    "str",
                    "bool"
                ],
                "enable_debug": [
                    "str",
                    "bool"
                ],
                "matrix_server": [
                    "str",
                    "list[str]",
                    "typing.Mapping",
                    "None"
                ],
                "accept_disclaimer": [
                    "bool",
                    "float",
                    "None"
                ],
                "enable_tracing": [
                    "str",
                    "list[str]",
                    "typing.Mapping",
                    "None"
                ],
                "tracing_sampler": [
                    "bool",
                    "typing.Any",
                    "str",
                    "None"
                ],
                "tracing_param": [
                    "bool",
                    "typing.Any",
                    "str",
                    "None"
                ]
            }
        }
    },
    "raiden-services-master/src/pathfinding_service/constants.py": {},
    "raiden-services-master/src/pathfinding_service/database.py": {
        "PFSDatabase.__init__": {
            "name": "__init__",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "bool",
                    "str",
                    "typing.Callable[[], str]"
                ],
                "chain_id": [
                    "str",
                    "bool"
                ],
                "pfs_address": [
                    "int",
                    "str"
                ],
                "sync_start_block": [
                    "BlockNumber"
                ],
                "allow_create": [
                    "bool"
                ],
                "enable_tracing": [
                    "bool"
                ]
            }
        },
        "PFSDatabase.upsert_capacity_update": {
            "name": "upsert_capacity_update",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "dict[, ]"
                ]
            }
        },
        "PFSDatabase.get_capacity_updates": {
            "name": "get_capacity_updates",
            "location": 69,
            "return": [
                "tuple[TokenAmount]"
            ],
            "arguments": {
                "self": [],
                "updating_participant": [
                    "int",
                    "str"
                ],
                "token_network_address": [
                    "int",
                    "str"
                ],
                "channel_id": [
                    "int",
                    "str"
                ]
            }
        },
        "PFSDatabase.get_latest_committed_block": {
            "name": "get_latest_committed_block",
            "location": 94,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PFSDatabase.update_lastest_committed_block": {
            "name": "update_lastest_committed_block",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "latest_committed_block": [
                    "str",
                    "int"
                ]
            }
        },
        "PFSDatabase.upsert_iou": {
            "name": "upsert_iou",
            "location": 105,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "iou": [
                    "str",
                    "dict[, ]",
                    "typing.Callable[str, T]"
                ]
            }
        },
        "PFSDatabase.get_ious": {
            "name": "get_ious",
            "location": 112,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "self": [],
                "sender": [
                    "None",
                    "str",
                    "bool"
                ],
                "claimable_until": [
                    "None",
                    "str",
                    "bool",
                    "list[str]"
                ],
                "claimed": [
                    "None",
                    "str",
                    "bool",
                    "list[str]"
                ],
                "claimable_until_after": [
                    "None",
                    "str",
                    "bool",
                    "list[str]"
                ],
                "claimable_until_before": [
                    "None",
                    "str",
                    "bool",
                    "list[str]"
                ],
                "amount_at_least": [
                    "None",
                    "bool",
                    "str"
                ]
            }
        },
        "PFSDatabase.get_nof_claimed_ious": {
            "name": "get_nof_claimed_ious",
            "location": 152,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PFSDatabase.get_iou": {
            "name": "get_iou",
            "location": 164,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sender": [
                    "str",
                    "float"
                ],
                "claimable_until": [
                    "None",
                    "str",
                    "float"
                ],
                "claimed": [
                    "None",
                    "str",
                    "float"
                ]
            }
        },
        "PFSDatabase.upsert_channel": {
            "name": "upsert_channel",
            "location": 175,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "channel": [
                    "dict[str, int]",
                    "dict[str, tuple[typing.Union[typing.Any,typing.Any]]]",
                    "dict[, ]",
                    "dict[str, str]",
                    "str",
                    "bool"
                ]
            }
        },
        "PFSDatabase.get_channels": {
            "name": "get_channels",
            "location": 191,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "PFSDatabase.delete_channel": {
            "name": "delete_channel",
            "location": 199,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "token_network_address": [
                    "str",
                    "int"
                ],
                "channel_id": [
                    "str",
                    "int"
                ]
            }
        },
        "PFSDatabase.get_token_networks": {
            "name": "get_token_networks",
            "location": 219,
            "return": [
                "typing.Generator[TokenNetwork]"
            ],
            "arguments": {
                "self": []
            }
        },
        "PFSDatabase.prepare_feedback": {
            "name": "prepare_feedback",
            "location": 227,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "token": [
                    "list[]",
                    "float",
                    "bool"
                ],
                "route": [
                    "str"
                ],
                "estimated_fee": [
                    "list[]",
                    "float",
                    "bool"
                ]
            }
        },
        "PFSDatabase.update_feedback": {
            "name": "update_feedback",
            "location": 242,
            "return": [],
            "arguments": {
                "self": [],
                "token": [
                    "dict[str, typing.Any]",
                    "dict[, ]"
                ],
                "route": [
                    "str"
                ],
                "successful": [
                    "dict[str, typing.Any]",
                    "dict[, ]"
                ]
            }
        },
        "PFSDatabase.get_feedback_routes": {
            "name": "get_feedback_routes",
            "location": 269,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "self": [],
                "token_network_address": [
                    "int"
                ],
                "source_address": [
                    "int"
                ],
                "target_address": [
                    "None",
                    "str",
                    "bool"
                ]
            }
        },
        "PFSDatabase.get_feedback_token": {
            "name": "get_feedback_token",
            "location": 302,
            "return": [
                "FeedbackToken",
                "None"
            ],
            "arguments": {
                "self": [],
                "token_id": [
                    "str",
                    "dict[str, typing.Any]",
                    "int",
                    "None"
                ],
                "token_network_address": [
                    "str",
                    "dict[str, typing.Any]",
                    "None",
                    "bool"
                ],
                "route": [
                    "str"
                ]
            }
        },
        "PFSDatabase.get_num_routes_feedback": {
            "name": "get_num_routes_feedback",
            "location": 331,
            "return": [],
            "arguments": {
                "self": [],
                "only_with_feedback": [
                    "bool"
                ],
                "only_successful": [
                    "bool"
                ]
            }
        },
        "PFSDatabase.insert_waiting_message": {
            "name": "insert_waiting_message",
            "location": 343,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "dict[, ]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "PFSDatabase.pop_waiting_messages": {
            "name": "pop_waiting_messages",
            "location": 355,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "self": [],
                "token_network_address": [
                    "int"
                ],
                "channel_id": [
                    "int"
                ]
            }
        }
    },
    "raiden-services-master/src/pathfinding_service/exceptions.py": {},
    "raiden-services-master/src/pathfinding_service/metrics.py": {},
    "raiden-services-master/src/pathfinding_service/middleware.py": {
        "http_retry_with_backoff_middleware": {
            "name": "http_retry_with_backoff_middleware",
            "location": 10,
            "return": [],
            "arguments": {
                "make_request": [
                    "float",
                    "int",
                    "tuple[]",
                    "typing.Callable[, ]"
                ],
                "web3": [
                    "float",
                    "int",
                    "tuple[]",
                    "typing.Callable[, ]"
                ],
                "errors": [
                    "tuple[]"
                ],
                "retries": [
                    "int"
                ],
                "first_backoff": [
                    "float"
                ],
                "backoff_factor": [
                    "int"
                ]
            }
        },
        "http_retry_with_backoff_middleware.middleware": {
            "name": "middleware",
            "location": 30,
            "return": [],
            "arguments": {
                "method": [],
                "params": []
            }
        }
    },
    "raiden-services-master/src/pathfinding_service/service.py": {
        "DeferMessage.__init__": {
            "name": "__init__",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "deferred_message": [
                    "int",
                    "float"
                ]
            }
        },
        "PathfindingService.__init__": {
            "name": "__init__",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "web3": [
                    "bool",
                    "str",
                    "list[]",
                    "list[int]",
                    "dict[str, str]"
                ],
                "contracts": [],
                "private_key": [
                    "int",
                    "bytes"
                ],
                "db_filename": [
                    "int",
                    "list[str]",
                    "str",
                    "None",
                    "list[tuple[typing.Union[int,int]]]",
                    "float"
                ],
                "sync_start_block": [
                    "int",
                    "list[str]",
                    "str",
                    "None",
                    "list[tuple[typing.Union[int,int]]]",
                    "float"
                ],
                "required_confirmations": [
                    "bool",
                    "float"
                ],
                "poll_interval": [
                    "bool",
                    "float"
                ],
                "matrix_servers": [
                    "None",
                    "str",
                    "int",
                    "dict[str, int]"
                ],
                "enable_tracing": [
                    "bool"
                ]
            }
        },
        "PathfindingService._init_metrics": {
            "name": "_init_metrics",
            "location": 119,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PathfindingService._iter_claimed_ious": {
            "name": "_iter_claimed_ious",
            "location": 133,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PathfindingService._load_token_networks": {
            "name": "_load_token_networks",
            "location": 136,
            "return": [
                "dict[, ]"
            ],
            "arguments": {
                "self": []
            }
        },
        "PathfindingService._run": {
            "name": "_run",
            "location": 144,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PathfindingService._process_new_blocks": {
            "name": "_process_new_blocks",
            "location": 176,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "latest_confirmed_block": [
                    "int",
                    "typing.Callable[, ]"
                ]
            }
        },
        "PathfindingService.stop": {
            "name": "stop",
            "location": 210,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PathfindingService.follows_token_network": {
            "name": "follows_token_network",
            "location": 215,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "token_network_address": [
                    "int",
                    "list[dict[str, typing.Any]]",
                    "tuple[typing.Union[int,int]]"
                ]
            }
        },
        "PathfindingService.get_token_network": {
            "name": "get_token_network",
            "location": 219,
            "return": [],
            "arguments": {
                "self": [],
                "token_network_address": [
                    "str",
                    "None",
                    "int"
                ]
            }
        },
        "PathfindingService.handle_event": {
            "name": "handle_event",
            "location": 225,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "dict[, ]"
                ]
            }
        },
        "PathfindingService.handle_token_network_created": {
            "name": "handle_token_network_created",
            "location": 242,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "dict[, ]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "PathfindingService.handle_channel_opened": {
            "name": "handle_channel_opened",
            "location": 251,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "dict[, ]"
                ]
            }
        },
        "PathfindingService.handle_channel_removed": {
            "name": "handle_channel_removed",
            "location": 273,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "dict[str, typing.Any]",
                    "dict[, ]",
                    "list[dict[, ]]",
                    "typing.Mapping"
                ]
            }
        },
        "PathfindingService.handle_message": {
            "name": "handle_message",
            "location": 301,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": []
            }
        },
        "PathfindingService.defer_message_until_channel_is_open": {
            "name": "defer_message_until_channel_is_open",
            "location": 322,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "str",
                    "bool",
                    "Exception",
                    "typing.Type"
                ]
            }
        },
        "PathfindingService._validate_pfs_fee_update": {
            "name": "_validate_pfs_fee_update",
            "location": 330,
            "return": [
                "str",
                "int",
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "list[int]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "PathfindingService.on_fee_update": {
            "name": "on_fee_update",
            "location": 360,
            "return": [],
            "arguments": {
                "self": [],
                "message": [
                    "float",
                    "str",
                    "int"
                ]
            }
        },
        "PathfindingService._validate_pfs_capacity_update": {
            "name": "_validate_pfs_capacity_update",
            "location": 366,
            "return": [
                "str",
                "int",
                "None"
            ],
            "arguments": {
                "self": [],
                "message": []
            }
        },
        "PathfindingService.on_capacity_update": {
            "name": "on_capacity_update",
            "location": 406,
            "return": [],
            "arguments": {
                "self": [],
                "message": [
                    "float",
                    "int",
                    "str"
                ]
            }
        },
        "PathfindingService._init_metrics._get_number_of_claimed_ious": {
            "name": "_get_number_of_claimed_ious",
            "location": 120,
            "return": [
                "float"
            ],
            "arguments": {}
        },
        "PathfindingService._init_metrics._get_total_amount_of_claimed_ious": {
            "name": "_get_total_amount_of_claimed_ious",
            "location": 123,
            "return": [
                "float"
            ],
            "arguments": {}
        }
    },
    "raiden-services-master/src/pathfinding_service/typing.py": {
        "AddressReachabilityProtocol.get_address_reachability": {
            "name": "get_address_reachability",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "address": [
                    "bool",
                    "str",
                    "dict[, ]"
                ]
            }
        },
        "AddressReachabilityProtocol.get_userid_presence": {
            "name": "get_userid_presence",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "user_id": [
                    "str",
                    "int",
                    "list[int]"
                ]
            }
        },
        "AddressReachabilityProtocol.get_userids_for_address": {
            "name": "get_userids_for_address",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "address": [
                    "str",
                    "list[str]",
                    "None",
                    "list[dict[str, typing.Any]]",
                    "int",
                    "tuple[]"
                ]
            }
        },
        "AddressReachabilityProtocol.get_address_capabilities": {
            "name": "get_address_capabilities",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "address": [
                    "bool",
                    "str",
                    "dict[, ]"
                ]
            }
        }
    },
    "raiden-services-master/src/pathfinding_service/__init__.py": {},
    "raiden-services-master/src/pathfinding_service/model/channel.py": {
        "FeeSchedule.from_raiden": {
            "name": "from_raiden",
            "location": 25,
            "return": [
                "FeeSchedule"
            ],
            "arguments": {
                "cls": [
                    "int",
                    "dict[str, typing.Any]"
                ],
                "fee_schedule": [
                    "str",
                    "typing.Callable[, ]"
                ],
                "timestamp": [
                    "str",
                    "typing.Callable[, ]"
                ]
            }
        },
        "Channel.views": {
            "name": "views",
            "location": 55,
            "return": [
                "tuple[ChannelView]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ChannelView.channel_id": {
            "name": "channel_id",
            "location": 71,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ChannelView.participant1": {
            "name": "participant1",
            "location": 75,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ChannelView.participant2": {
            "name": "participant2",
            "location": 79,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ChannelView.token_network_address": {
            "name": "token_network_address",
            "location": 83,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ChannelView.capacity": {
            "name": "capacity",
            "location": 91,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "ChannelView.capacity_partner": {
            "name": "capacity_partner",
            "location": 98,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ChannelView.reveal_timeout": {
            "name": "reveal_timeout",
            "location": 106,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "ChannelView.update_nonce": {
            "name": "update_nonce",
            "location": 117,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "ChannelView.fee_schedule_sender": {
            "name": "fee_schedule_sender",
            "location": 124,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ChannelView.fee_schedule_receiver": {
            "name": "fee_schedule_receiver",
            "location": 128,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ChannelView.update_capacity": {
            "name": "update_capacity",
            "location": 131,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "capacity": [
                    "str",
                    "int"
                ],
                "nonce": [
                    "Nonce"
                ],
                "reveal_timeout": [
                    "None",
                    "int",
                    "float",
                    "str"
                ]
            }
        },
        "ChannelView.set_fee_schedule": {
            "name": "set_fee_schedule",
            "location": 142,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fee_schedule": [
                    "bool",
                    "float"
                ]
            }
        },
        "ChannelView.__repr__": {
            "name": "__repr__",
            "location": 150,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "raiden-services-master/src/pathfinding_service/model/feedback.py": {
        "FeedbackToken.is_valid": {
            "name": "is_valid",
            "location": 15,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "raiden-services-master/src/pathfinding_service/model/iou.py": {
        "IOU.packed_data": {
            "name": "packed_data",
            "location": 31,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "IOU.is_signature_valid": {
            "name": "is_signature_valid",
            "location": 42,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "IOU.session_id": {
            "name": "session_id",
            "location": 50,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "raiden-services-master/src/pathfinding_service/model/token_network.py": {
        "window": {
            "name": "window",
            "location": 37,
            "return": [
                "typing.Generator[]",
                "typing.Generator[typing.Union[list[],tuple[],list[int],list[str],typing.Iterator,float]]"
            ],
            "arguments": {
                "seq": [
                    "int",
                    "None"
                ],
                "n": [
                    "int"
                ]
            }
        },
        "prune_graph": {
            "name": "prune_graph",
            "location": 51,
            "return": [
                "DiGraph"
            ],
            "arguments": {
                "graph": [
                    "typing.Callable[, ]",
                    "str"
                ],
                "reachability_state": [
                    "dict[, ]",
                    "None"
                ]
            }
        },
        "Path.__init__": {
            "name": "__init__",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "G": [
                    "str",
                    "int",
                    "list[str]"
                ],
                "nodes": [
                    "float",
                    "str",
                    "None",
                    "bytes",
                    "int",
                    "list[str]"
                ],
                "value": [
                    "str",
                    "list[str]",
                    "bytes",
                    "int",
                    "list[dict[str, typing.Any]]"
                ],
                "reachability_state": [
                    "int"
                ]
            }
        },
        "Path._calculate_fees": {
            "name": "_calculate_fees",
            "location": 85,
            "return": [
                "None",
                "list[FeeAmount]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Path._get_address_metadata": {
            "name": "_get_address_metadata",
            "location": 144,
            "return": [
                "None",
                "dict[, dict[typing.Text, typing.Union[list[],list[int],list[datetime.datetime],int]]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Path._check_validity_and_calculate_fees": {
            "name": "_check_validity_and_calculate_fees",
            "location": 182,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Path.edge_attrs": {
            "name": "edge_attrs",
            "location": 214,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Path.estimated_fee": {
            "name": "estimated_fee",
            "location": 218,
            "return": [
                "FeeAmount"
            ],
            "arguments": {
                "self": []
            }
        },
        "Path.to_dict": {
            "name": "to_dict",
            "location": 224,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TokenNetwork.__init__": {
            "name": "__init__",
            "location": 239,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "token_network_address": [
                    "int"
                ],
                "settle_timeout": [
                    "bool",
                    "typing.Callable[, ]"
                ]
            }
        },
        "TokenNetwork.__repr__": {
            "name": "__repr__",
            "location": 247,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "TokenNetwork.handle_channel_opened_event": {
            "name": "handle_channel_opened_event",
            "location": 253,
            "return": [
                "Channel"
            ],
            "arguments": {
                "self": [],
                "channel_identifier": [],
                "participant1": [],
                "participant2": []
            }
        },
        "TokenNetwork.add_channel_view": {
            "name": "add_channel_view",
            "location": 280,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "channel_view": []
            }
        },
        "TokenNetwork.handle_channel_removed_event": {
            "name": "handle_channel_removed_event",
            "location": 289,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "channel_identifier": [
                    "set[]",
                    "bool"
                ]
            }
        },
        "TokenNetwork.get_channel_views_for_partner": {
            "name": "get_channel_views_for_partner",
            "location": 298,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "self": [],
                "updating_participant": [
                    "str",
                    "bool"
                ],
                "other_participant": [
                    "str",
                    "bool"
                ]
            }
        },
        "TokenNetwork.handle_channel_balance_update_message": {
            "name": "handle_channel_balance_update_message",
            "location": 307,
            "return": [],
            "arguments": {
                "self": [],
                "message": [
                    "str"
                ],
                "updating_capacity_partner": [
                    "bool",
                    "str"
                ],
                "other_capacity_partner": [
                    "list[tuple[typing.Union[typing.Any,dict[, ]]]]",
                    "dict[str, typing.Any]",
                    "bool"
                ]
            }
        },
        "TokenNetwork.handle_channel_fee_update": {
            "name": "handle_channel_fee_update",
            "location": 337,
            "return": [],
            "arguments": {
                "self": [],
                "message": [
                    "float",
                    "str",
                    "None",
                    "int"
                ]
            }
        },
        "TokenNetwork.edge_weight": {
            "name": "edge_weight",
            "location": 354,
            "return": [
                "float"
            ],
            "arguments": {
                "visited": [
                    "int"
                ],
                "view": [
                    "typing.Sequence[]"
                ],
                "view_from_partner": [
                    "int",
                    "str"
                ],
                "amount": [
                    "float",
                    "int"
                ],
                "fee_penalty": [
                    "int"
                ]
            }
        },
        "TokenNetwork._get_single_path": {
            "name": "_get_single_path",
            "location": 392,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "graph": [],
                "source": [
                    "str",
                    "typing.Type",
                    "None",
                    "list[str]",
                    "bool"
                ],
                "target": [
                    "str",
                    "typing.Type",
                    "None",
                    "list[str]",
                    "bool"
                ],
                "value": [
                    "bool",
                    "str"
                ],
                "reachability_state": [
                    "str"
                ],
                "visited": [
                    "int",
                    "str",
                    "None"
                ],
                "disallowed_paths": [
                    "str"
                ],
                "fee_penalty": [
                    "int",
                    "str",
                    "None"
                ]
            }
        },
        "TokenNetwork.check_path_request_errors": {
            "name": "check_path_request_errors",
            "location": 435,
            "return": [
                "typing.Text",
                "None"
            ],
            "arguments": {
                "self": [],
                "source": [],
                "target": [
                    "bool",
                    "str",
                    "dict[str, typing.Any]",
                    "None"
                ],
                "value": [
                    "str",
                    "tuple[typing.Union[int,int]]",
                    "int",
                    "list[bytes]"
                ],
                "reachability_state": []
            }
        },
        "TokenNetwork.get_paths": {
            "name": "get_paths",
            "location": 493,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": [],
                "source": [
                    "float",
                    "int"
                ],
                "target": [
                    "float",
                    "int"
                ],
                "value": [
                    "float",
                    "int"
                ],
                "max_paths": [
                    "int",
                    "float"
                ],
                "reachability_state": [
                    "bool",
                    "str",
                    "dict[str, typing.Any]"
                ],
                "diversity_penalty": [],
                "fee_penalty": []
            }
        },
        "TokenNetwork.suggest_partner": {
            "name": "suggest_partner",
            "location": 573,
            "return": [],
            "arguments": {
                "self": [],
                "reachability_state": [],
                "limit": [
                    "int"
                ]
            }
        }
    },
    "raiden-services-master/src/pathfinding_service/model/__init__.py": {},
    "raiden-services-master/src/raiden_libs/api.py": {
        "ApiWithErrorHandler.handle_error": {
            "name": "handle_error",
            "location": 11,
            "return": [],
            "arguments": {
                "self": [],
                "e": [
                    "Exception",
                    "BaseException",
                    "list[A]"
                ]
            }
        }
    },
    "raiden-services-master/src/raiden_libs/blockchain.py": {
        "create_event_topic_to_abi_dict": {
            "name": "create_event_topic_to_abi_dict",
            "location": 48,
            "return": [
                "dict[, ]"
            ],
            "arguments": {}
        },
        "get_web3_provider_info": {
            "name": "get_web3_provider_info",
            "location": 69,
            "return": [
                "str",
                "typing.Text"
            ],
            "arguments": {
                "web3": [
                    "int",
                    "str"
                ]
            }
        },
        "decode_event": {
            "name": "decode_event",
            "location": 86,
            "return": [],
            "arguments": {
                "abi_codec": [
                    "str",
                    "float",
                    "None",
                    "tuple[typing.Union[int,int]]",
                    "bool"
                ],
                "log_entry": [
                    "bytes",
                    "str"
                ]
            }
        },
        "query_blockchain_events": {
            "name": "query_blockchain_events",
            "location": 93,
            "return": [
                "list[]"
            ],
            "arguments": {
                "web3": [],
                "contract_addresses": [],
                "from_block": [],
                "to_block": []
            }
        },
        "parse_token_network_event": {
            "name": "parse_token_network_event",
            "location": 120,
            "return": [
                "None",
                "ReceiveChannelOpenedEvent",
                "ReceiveChannelClosedEvent",
                "ReceiveNonClosingBalanceProofUpdatedEvent",
                "ReceiveChannelSettledEvent"
            ],
            "arguments": {
                "event": []
            }
        },
        "get_blockchain_events": {
            "name": "get_blockchain_events",
            "location": 157,
            "return": [
                "list[]",
                "list[typing.Union[ReceiveTokenNetworkCreatedEvent,UpdatedHeadBlockEvent]]"
            ],
            "arguments": {
                "web3": [
                    "typing.Callable[, ]",
                    "int",
                    "None"
                ],
                "token_network_addresses": [],
                "chain_state": [
                    "typing.Callable[, ]",
                    "int",
                    "None"
                ],
                "from_block": [
                    "int"
                ],
                "to_block": [
                    "int"
                ]
            }
        },
        "get_monitoring_blockchain_events": {
            "name": "get_monitoring_blockchain_events",
            "location": 230,
            "return": [
                "list[]",
                "list[ReceiveMonitoringRewardClaimedEvent]",
                "list[ReceiveMonitoringNewBalanceProofEvent]"
            ],
            "arguments": {
                "web3": [
                    "int"
                ],
                "monitor_contract_address": [
                    "list[int]",
                    "int"
                ],
                "from_block": [
                    "int"
                ],
                "to_block": [
                    "int"
                ]
            }
        },
        "get_pessimistic_udc_balance": {
            "name": "get_pessimistic_udc_balance",
            "location": 278,
            "return": [],
            "arguments": {
                "udc": [
                    "float",
                    "None",
                    "int"
                ],
                "address": [
                    "float",
                    "None",
                    "int"
                ],
                "from_block": [
                    "float",
                    "None",
                    "int"
                ],
                "to_block": [
                    "float",
                    "None",
                    "int"
                ]
            }
        },
        "get_blockchain_events_adaptive": {
            "name": "get_blockchain_events_adaptive",
            "location": 294,
            "return": [
                "list[]",
                "dict[, ]",
                "str",
                "list[tuple[typing.Union[int,typing.Any]]]",
                "None"
            ],
            "arguments": {
                "web3": [
                    "list[raiden.utils.TokenNetworkAddress]",
                    "int"
                ],
                "blockchain_state": [
                    "dict[, ]",
                    "None",
                    "typing.Callable[, ]",
                    "list[]",
                    "dict[str, str]"
                ],
                "token_network_addresses": [
                    "list[raiden.utils.TokenNetworkAddress]",
                    "int"
                ],
                "latest_confirmed_block": [
                    "str",
                    "None",
                    "bool"
                ]
            }
        }
    },
    "raiden-services-master/src/raiden_libs/cli.py": {
        "_open_keystore": {
            "name": "_open_keystore",
            "location": 47,
            "return": [
                "PrivateKey"
            ],
            "arguments": {
                "keystore_file": [
                    "str"
                ],
                "password": [
                    "str",
                    "dict[, ]"
                ]
            }
        },
        "validate_address": {
            "name": "validate_address",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "_ctx": [
                    "str",
                    "tuple[str]"
                ],
                "_param": [
                    "str",
                    "tuple[str]"
                ],
                "value": [
                    "str",
                    "None",
                    "bool"
                ]
            }
        },
        "common_options": {
            "name": "common_options",
            "location": 73,
            "return": [],
            "arguments": {
                "app_name": [
                    "str",
                    "typing.Iterable[str]"
                ]
            }
        },
        "blockchain_options": {
            "name": "blockchain_options",
            "location": 151,
            "return": [],
            "arguments": {
                "contracts": [
                    "list[str]"
                ]
            }
        },
        "connect_to_blockchain": {
            "name": "connect_to_blockchain",
            "location": 233,
            "return": [
                "tuple[typing.Union[int,list[],dict[str, typing.Any],str,dict[, ],None]]"
            ],
            "arguments": {
                "eth_rpc": [
                    "bool",
                    "list[int]"
                ],
                "gas_price_strategy": [
                    "int",
                    "str"
                ],
                "used_contracts": [
                    "list[str]",
                    "str",
                    "int",
                    "tuple[str]"
                ],
                "address_overwrites": [
                    "list[str]",
                    "str",
                    "int",
                    "tuple[str]"
                ],
                "development_environment": [
                    "list[str]",
                    "str",
                    "int",
                    "tuple[str]"
                ]
            }
        },
        "setup_sentry": {
            "name": "setup_sentry",
            "location": 290,
            "return": [
                "None"
            ],
            "arguments": {
                "enable_flask_integration": [
                    "bool"
                ]
            }
        },
        "common_options.decorator": {
            "name": "decorator",
            "location": 85,
            "return": [],
            "arguments": {
                "func": []
            }
        },
        "blockchain_options.decorator": {
            "name": "decorator",
            "location": 204,
            "return": [],
            "arguments": {
                "command": []
            }
        },
        "common_options.decorator.call_with_common_options_initialized": {
            "name": "call_with_common_options_initialized",
            "location": 120,
            "return": [],
            "arguments": {}
        },
        "blockchain_options.decorator.call_with_blockchain_info": {
            "name": "call_with_blockchain_info",
            "location": 210,
            "return": [],
            "arguments": {}
        }
    },
    "raiden-services-master/src/raiden_libs/constants.py": {},
    "raiden-services-master/src/raiden_libs/contract_info.py": {
        "get_contract_addresses_and_start_block": {
            "name": "get_contract_addresses_and_start_block",
            "location": 20,
            "return": [
                "tuple[typing.Union[dict[typing.Text, typing.Any],BlockNumber]]"
            ],
            "arguments": {
                "chain_id": [
                    "str",
                    "int",
                    "None",
                    "set[int]"
                ],
                "contracts": [
                    "str",
                    "bytes"
                ],
                "address_overwrites": [
                    "dict[str, typing.Any]"
                ],
                "development_environment": [],
                "contracts_version": [
                    "None",
                    "str",
                    "set[int]",
                    "int"
                ]
            }
        }
    },
    "raiden-services-master/src/raiden_libs/database.py": {
        "convert_hex": {
            "name": "convert_hex",
            "location": 20,
            "return": [
                "int"
            ],
            "arguments": {
                "raw": []
            }
        },
        "convert_bool": {
            "name": "convert_bool",
            "location": 27,
            "return": [
                "bool"
            ],
            "arguments": {
                "raw": []
            }
        },
        "hex256": {
            "name": "hex256",
            "location": 39,
            "return": [
                "str"
            ],
            "arguments": {
                "x": []
            }
        },
        "BaseDatabase.__init__": {
            "name": "__init__",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "filename": [],
                "allow_create": [
                    "bool"
                ],
                "enable_tracing": [
                    "bool"
                ]
            }
        },
        "BaseDatabase._cursor": {
            "name": "_cursor",
            "location": 83,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseDatabase._setup": {
            "name": "_setup",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "chain_id": [],
                "receiver": [],
                "sync_start_block": []
            }
        },
        "BaseDatabase._check_settings": {
            "name": "_check_settings",
            "location": 125,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "new_settings": [],
                "contract_addresses": []
            }
        },
        "BaseDatabase.insert": {
            "name": "insert",
            "location": 148,
            "return": [],
            "arguments": {
                "self": [],
                "table_name": [],
                "fields_by_colname": [],
                "keyword": [
                    "typing.Text"
                ]
            }
        },
        "BaseDatabase.upsert": {
            "name": "upsert",
            "location": 158,
            "return": [
                "list[typing.Text]"
            ],
            "arguments": {
                "self": [],
                "table_name": [],
                "fields_by_colname": []
            }
        },
        "BaseDatabase.get_blockchain_state": {
            "name": "get_blockchain_state",
            "location": 161,
            "return": [
                "BlockchainState"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseDatabase.update_latest_committed_block": {
            "name": "update_latest_committed_block",
            "location": 173,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "latest_committed_block": []
            }
        },
        "BaseDatabase.upsert_token_network": {
            "name": "upsert_token_network",
            "location": 179,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "token_network_address": [],
                "settle_timeout": []
            }
        },
        "BaseDatabase.get_token_network_addresses": {
            "name": "get_token_network_addresses",
            "location": 188,
            "return": [
                "list[TokenNetworkAddress]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseDatabase.get_token_network_settle_timeout": {
            "name": "get_token_network_settle_timeout",
            "location": 195,
            "return": [],
            "arguments": {
                "self": [],
                "token_network_address": []
            }
        }
    },
    "raiden-services-master/src/raiden_libs/events.py": {},
    "raiden-services-master/src/raiden_libs/exceptions.py": {
        "ApiException.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "msg": [
                    "None",
                    "str",
                    "bool"
                ]
            }
        },
        "ApiException.__str__": {
            "name": "__str__",
            "location": 18,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "raiden-services-master/src/raiden_libs/logging.py": {
        "setup_logging": {
            "name": "setup_logging",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "log_level": [
                    "str",
                    "list[]",
                    "dict[, ]",
                    "int"
                ],
                "log_json": [
                    "bool",
                    "typing.Iterable[int]"
                ]
            }
        },
        "make_bytes_readable": {
            "name": "make_bytes_readable",
            "location": 47,
            "return": [
                "None",
                "str",
                "int",
                "memoryview",
                "bytes"
            ],
            "arguments": {
                "value": [
                    "None",
                    "str",
                    "int",
                    "memoryview"
                ]
            }
        },
        "apply_recursive": {
            "name": "apply_recursive",
            "location": 56,
            "return": [
                "list[]",
                "dict[, ]"
            ],
            "arguments": {
                "value": [
                    "list[list[typing.Any]]",
                    "list[str]"
                ]
            }
        },
        "format_to_hex": {
            "name": "format_to_hex",
            "location": 65,
            "return": [
                "dict[, ]",
                "dict[str, typing.Any]",
                "dict[str, int]"
            ],
            "arguments": {
                "_logger": [
                    "int",
                    "list[int]",
                    "str",
                    "dict[str, str]"
                ],
                "_log_method": [
                    "int",
                    "list[int]",
                    "str",
                    "dict[str, str]"
                ],
                "event_dict": [
                    "dict[, ]",
                    "dict[str, typing.Any]",
                    "dict[str, int]"
                ]
            }
        }
    },
    "raiden-services-master/src/raiden_libs/marshmallow.py": {
        "HexedBytes._serialize": {
            "name": "_serialize",
            "location": 11,
            "return": [],
            "arguments": {
                "self": [],
                "value": [
                    "bytes"
                ],
                "attr": [
                    "str"
                ],
                "obj": [
                    "str"
                ]
            }
        },
        "HexedBytes._deserialize": {
            "name": "_deserialize",
            "location": 14,
            "return": [],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "dict[, ]",
                    "bool",
                    "dict[str, typing.Any]",
                    "bytes"
                ],
                "attr": [
                    "dict[, ]",
                    "str"
                ],
                "data": [
                    "dict[, ]",
                    "str"
                ]
            }
        },
        "ChecksumAddress._serialize": {
            "name": "_serialize",
            "location": 21,
            "return": [],
            "arguments": {
                "self": [],
                "value": [
                    "bytes",
                    "str",
                    "int"
                ],
                "attr": [
                    "str"
                ],
                "obj": [
                    "str"
                ]
            }
        },
        "ChecksumAddress._deserialize": {
            "name": "_deserialize",
            "location": 24,
            "return": [],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ],
                "attr": [
                    "dict[, ]",
                    "str"
                ],
                "data": [
                    "dict[, ]",
                    "str"
                ]
            }
        }
    },
    "raiden-services-master/src/raiden_libs/matrix.py": {
        "deserialize_messages": {
            "name": "deserialize_messages",
            "location": 77,
            "return": [
                "list[]"
            ],
            "arguments": {
                "data": [
                    "str",
                    "bytes"
                ],
                "peer_address": [
                    "int",
                    "bytes"
                ],
                "rate_limiter": []
            }
        },
        "matrix_http_retry_delay": {
            "name": "matrix_http_retry_delay",
            "location": 117,
            "return": [],
            "arguments": {}
        },
        "RateLimiter.__init__": {
            "name": "__init__",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "allowed_bytes": [
                    "int",
                    "bytes",
                    "typing.Any",
                    "None",
                    "list[str]"
                ],
                "reset_interval": [
                    "int",
                    "None",
                    "str",
                    "tuple[typing.Union[int,int]]"
                ]
            }
        },
        "RateLimiter.reset_if_it_is_time": {
            "name": "reset_if_it_is_time",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RateLimiter.check_and_count": {
            "name": "check_and_count",
            "location": 68,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "sender": [
                    "dict[str, typing.Any]",
                    "int",
                    "bytes"
                ],
                "added_bytes": [
                    "dict[str, typing.Any]",
                    "int",
                    "typing.Callable[, ]",
                    "bytes"
                ]
            }
        },
        "MatrixListener.__init__": {
            "name": "__init__",
            "location": 127,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "private_key": [
                    "str",
                    "None",
                    "bytes",
                    "list[dict[str, typing.Any]]",
                    "typing.IO"
                ],
                "chain_id": [
                    "str",
                    "bytes",
                    "list[]",
                    "int"
                ],
                "device_id": [
                    "str",
                    "bytes",
                    "list[]",
                    "int"
                ],
                "message_received_callback": [
                    "str",
                    "int",
                    "list[str]"
                ],
                "servers": [
                    "None",
                    "str",
                    "bytes",
                    "list[dict[str, typing.Any]]",
                    "typing.IO"
                ],
                "enable_tracing": [
                    "bool"
                ]
            }
        },
        "MatrixListener._client": {
            "name": "_client",
            "location": 164,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MatrixListener.server_url_to_other_clients": {
            "name": "server_url_to_other_clients",
            "location": 168,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MatrixListener._run": {
            "name": "_run",
            "location": 171,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MatrixListener._handle_matrix_sync": {
            "name": "_handle_matrix_sync",
            "location": 188,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "messages": [
                    "str",
                    "dict[, ]"
                ]
            }
        },
        "MatrixListener._handle_message": {
            "name": "_handle_message",
            "location": 200,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": [],
                "message": []
            }
        },
        "ClientManager.__init__": {
            "name": "__init__",
            "location": 252,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "available_servers": [
                    "int",
                    "str",
                    "bytes",
                    "typing.Callable[[], typing.Iterable[float]]"
                ],
                "device_id": [
                    "str",
                    "int",
                    "list[]"
                ],
                "chain_id": [
                    "str",
                    "bool"
                ],
                "private_key": [
                    "str",
                    "bytes",
                    "None"
                ],
                "handle_matrix_sync": [
                    "str",
                    "bool"
                ],
                "enable_tracing": [
                    "bool"
                ]
            }
        },
        "ClientManager.server_url_to_all_clients": {
            "name": "server_url_to_all_clients",
            "location": 313,
            "return": [
                "dict[, ]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ClientManager.start": {
            "name": "start",
            "location": 319,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "user_manager": [
                    "str"
                ]
            }
        },
        "ClientManager.stop": {
            "name": "stop",
            "location": 339,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ClientManager.connect_client_forever": {
            "name": "connect_client_forever",
            "location": 350,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "server_url": [
                    "str",
                    "dict[, ]"
                ]
            }
        },
        "ClientManager._start_client": {
            "name": "_start_client",
            "location": 375,
            "return": [],
            "arguments": {
                "self": [],
                "server_url": [
                    "str",
                    "dict[str, str]"
                ]
            }
        },
        "MatrixListener._run.set_startup_finished": {
            "name": "set_startup_finished",
            "location": 176,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "raiden-services-master/src/raiden_libs/metrics.py": {
        "collect_event_metrics": {
            "name": "collect_event_metrics",
            "location": 78,
            "return": [
                "typing.Generator[tuple[]]"
            ],
            "arguments": {
                "event": [
                    "str"
                ]
            }
        },
        "collect_message_metrics": {
            "name": "collect_message_metrics",
            "location": 89,
            "return": [
                "typing.Generator[tuple[]]"
            ],
            "arguments": {
                "message": [
                    "str"
                ]
            }
        },
        "get_metrics_for_label": {
            "name": "get_metrics_for_label",
            "location": 99,
            "return": [],
            "arguments": {
                "metric": [
                    "str",
                    "dict[, ]"
                ],
                "enum": []
            }
        },
        "MetricsEnum.__str__": {
            "name": "__str__",
            "location": 20,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MetricsEnum.label_name": {
            "name": "label_name",
            "location": 24,
            "return": [],
            "arguments": {
                "cls": [
                    "bool",
                    "str",
                    "None",
                    "typing.Type"
                ]
            }
        },
        "MetricsEnum.to_label_dict": {
            "name": "to_label_dict",
            "location": 27,
            "return": [
                "dict[, str]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "raiden-services-master/src/raiden_libs/service_registry.py": {
        "validate_url": {
            "name": "validate_url",
            "location": 76,
            "return": [],
            "arguments": {
                "_ctx": [],
                "_param": [],
                "value": []
            }
        },
        "etherscan_url_for_address": {
            "name": "etherscan_url_for_address",
            "location": 84,
            "return": [],
            "arguments": {
                "chain_id": [],
                "address": []
            }
        },
        "etherscan_url_for_txhash": {
            "name": "etherscan_url_for_txhash",
            "location": 95,
            "return": [],
            "arguments": {
                "chain_id": [],
                "tx_hash": []
            }
        },
        "checked_transact": {
            "name": "checked_transact",
            "location": 102,
            "return": [],
            "arguments": {
                "web3": [],
                "sender_address": [],
                "function_call": [],
                "task_name": [],
                "wait_confirmation_interval": []
            }
        },
        "cli": {
            "name": "cli",
            "location": 154,
            "return": [],
            "arguments": {}
        },
        "register": {
            "name": "register",
            "location": 179,
            "return": [],
            "arguments": {
                "private_key": [],
                "state_db": [],
                "web3": [],
                "contracts": [],
                "start_block": [],
                "service_url": [],
                "accept_disclaimer": [],
                "accept_all": []
            }
        },
        "get_token_formatter": {
            "name": "get_token_formatter",
            "location": 206,
            "return": [],
            "arguments": {
                "token_contract": [],
                "min_sig_figures": []
            }
        },
        "get_approximate_registration_cost": {
            "name": "get_approximate_registration_cost",
            "location": 234,
            "return": [],
            "arguments": {
                "web3": []
            }
        },
        "send_registration_transaction": {
            "name": "send_registration_transaction",
            "location": 248,
            "return": [],
            "arguments": {
                "web3": [],
                "service_registry_contract": [],
                "deposit_token_contract": [],
                "maybe_prompt": [],
                "account_balance": [],
                "service_address": [],
                "fmt_amount": []
            }
        },
        "register_account": {
            "name": "register_account",
            "location": 363,
            "return": [],
            "arguments": {
                "private_key": [],
                "web3": [],
                "contracts": [],
                "start_block": [],
                "service_url": [],
                "accept_disclaimer": [],
                "accept_all": [],
                "extend": []
            }
        },
        "find_deposits": {
            "name": "find_deposits",
            "location": 497,
            "return": [],
            "arguments": {
                "web3": [],
                "service_address": [],
                "service_registry_contract": [],
                "start_block": []
            }
        },
        "find_withdrawable_deposit": {
            "name": "find_withdrawable_deposit",
            "location": 536,
            "return": [],
            "arguments": {
                "web3": [],
                "service_address": [],
                "service_registry_contract": [],
                "start_block": []
            }
        },
        "withdraw": {
            "name": "withdraw",
            "location": 569,
            "return": [],
            "arguments": {
                "private_key": [],
                "web3": [],
                "contracts": [],
                "start_block": [],
                "to": []
            }
        },
        "withdraw_cmd": {
            "name": "withdraw_cmd",
            "location": 631,
            "return": [],
            "arguments": {
                "private_key": [],
                "state_db": [],
                "web3": [],
                "contracts": [],
                "start_block": [],
                "to": []
            }
        },
        "info": {
            "name": "info",
            "location": 648,
            "return": [],
            "arguments": {
                "private_key": [],
                "web3": [],
                "contracts": [],
                "start_block": []
            }
        },
        "info_cmd": {
            "name": "info_cmd",
            "location": 687,
            "return": [],
            "arguments": {
                "private_key": [],
                "state_db": [],
                "web3": [],
                "contracts": [],
                "start_block": []
            }
        },
        "extend_cmd": {
            "name": "extend_cmd",
            "location": 718,
            "return": [],
            "arguments": {
                "private_key": [],
                "state_db": [],
                "web3": [],
                "contracts": [],
                "start_block": [],
                "accept_disclaimer": [],
                "accept_all": []
            }
        },
        "main": {
            "name": "main",
            "location": 742,
            "return": [],
            "arguments": {}
        },
        "get_token_formatter.format_token_amount": {
            "name": "format_token_amount",
            "location": 224,
            "return": [],
            "arguments": {
                "amount": []
            }
        },
        "register_account.maybe_prompt": {
            "name": "maybe_prompt",
            "location": 377,
            "return": [],
            "arguments": {
                "query": []
            }
        }
    },
    "raiden-services-master/src/raiden_libs/states.py": {},
    "raiden-services-master/src/raiden_libs/tracing.py": {
        "matrix_client_enable_requests_tracing": {
            "name": "matrix_client_enable_requests_tracing",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {
                "client": []
            }
        }
    },
    "raiden-services-master/src/raiden_libs/user_address.py": {
        "noop_reachability": {
            "name": "noop_reachability",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "address": [
                    "int",
                    "str",
                    "typing.Iterable[C]"
                ],
                "reachability": [
                    "int",
                    "str",
                    "typing.Iterable[C]"
                ]
            }
        },
        "UserAddressManager.__init__": {
            "name": "__init__",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "client": [
                    "bool",
                    "str"
                ],
                "displayname_cache": [
                    "bool",
                    "str"
                ],
                "address_reachability_changed_callback": [
                    "bool",
                    "str"
                ],
                "user_presence_changed_callback": [
                    "None",
                    "int",
                    "list[dict[str, typing.Any]]"
                ],
                "_log_context": [
                    "None",
                    "bool",
                    "str"
                ]
            }
        },
        "UserAddressManager.start": {
            "name": "start",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserAddressManager.stop": {
            "name": "stop",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserAddressManager.known_addresses": {
            "name": "known_addresses",
            "location": 101,
            "return": [
                "set[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserAddressManager.seen_offline_at": {
            "name": "seen_offline_at",
            "location": 107,
            "return": [],
            "arguments": {
                "self": [],
                "address": [
                    "bytes",
                    "str"
                ]
            }
        },
        "UserAddressManager.is_address_known": {
            "name": "is_address_known",
            "location": 110,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "address": [
                    "str",
                    "int"
                ]
            }
        },
        "UserAddressManager.add_address": {
            "name": "add_address",
            "location": 114,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "address": [
                    "str",
                    "int",
                    "list[]"
                ]
            }
        },
        "UserAddressManager.add_userid_for_address": {
            "name": "add_userid_for_address",
            "location": 119,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "address": [
                    "dict[str, set[str]]",
                    "str",
                    "int"
                ],
                "user_id": [
                    "dict[str, set[str]]",
                    "str",
                    "int"
                ]
            }
        },
        "UserAddressManager.add_userids_for_address": {
            "name": "add_userids_for_address",
            "location": 126,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "address": [
                    "str",
                    "None",
                    "bytes"
                ],
                "user_ids": [
                    "str",
                    "None",
                    "bytes"
                ]
            }
        },
        "UserAddressManager.get_userids_for_address": {
            "name": "get_userids_for_address",
            "location": 133,
            "return": [],
            "arguments": {
                "self": [],
                "address": [
                    "bool",
                    "bytes"
                ]
            }
        },
        "UserAddressManager.get_userid_presence": {
            "name": "get_userid_presence",
            "location": 137,
            "return": [],
            "arguments": {
                "self": [],
                "user_id": [
                    "int",
                    "str",
                    "None"
                ]
            }
        },
        "UserAddressManager.get_address_reachability": {
            "name": "get_address_reachability",
            "location": 141,
            "return": [],
            "arguments": {
                "self": [],
                "address": [
                    "int",
                    "dict[int, dict[, ]]",
                    "float"
                ]
            }
        },
        "UserAddressManager.get_address_reachability_state": {
            "name": "get_address_reachability_state",
            "location": 147,
            "return": [],
            "arguments": {
                "self": [],
                "address": [
                    "dict[str, typing.Any]"
                ]
            }
        },
        "UserAddressManager.get_address_capabilities": {
            "name": "get_address_capabilities",
            "location": 151,
            "return": [],
            "arguments": {
                "self": [],
                "address": [
                    "int",
                    "dict[str, bool]",
                    "str"
                ]
            }
        },
        "UserAddressManager.force_user_presence": {
            "name": "force_user_presence",
            "location": 155,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "user": [
                    "None",
                    "bool"
                ],
                "presence": [
                    "None",
                    "bool"
                ]
            }
        },
        "UserAddressManager.populate_userids_for_address": {
            "name": "populate_userids_for_address",
            "location": 163,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "address": [
                    "str"
                ],
                "force": [
                    "bool"
                ]
            }
        },
        "UserAddressManager.track_address_presence": {
            "name": "track_address_presence",
            "location": 179,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "address": [
                    "str",
                    "int",
                    "list[int]"
                ],
                "user_ids": [
                    "None",
                    "str",
                    "int"
                ]
            }
        },
        "UserAddressManager.query_capabilities_for_user_id": {
            "name": "query_capabilities_for_user_id",
            "location": 217,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "user_id": [
                    "str"
                ]
            }
        },
        "UserAddressManager.get_reachability_from_matrix": {
            "name": "get_reachability_from_matrix",
            "location": 227,
            "return": [],
            "arguments": {
                "self": [],
                "user_ids": [
                    "str",
                    "list[int]"
                ]
            }
        },
        "UserAddressManager._maybe_address_reachability_changed": {
            "name": "_maybe_address_reachability_changed",
            "location": 240,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "address": [
                    "str",
                    "list[str]",
                    "set[str]",
                    "bool"
                ]
            }
        },
        "UserAddressManager._presence_listener": {
            "name": "_presence_listener",
            "location": 285,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "event": [],
                "presence_update_id": [
                    "int",
                    "tuple[typing.Union[typing.Any,str]]",
                    "dict[int, int]",
                    "typing.Callable[Type,str, bool]",
                    "str"
                ]
            }
        },
        "UserAddressManager._reset_state": {
            "name": "_reset_state",
            "location": 337,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserAddressManager._user_id": {
            "name": "_user_id",
            "location": 345,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UserAddressManager._user_from_id": {
            "name": "_user_from_id",
            "location": 350,
            "return": [
                "User",
                "None"
            ],
            "arguments": {
                "self": [],
                "user_id": [
                    "str"
                ],
                "display_name": [
                    "None",
                    "str"
                ]
            }
        },
        "UserAddressManager._fetch_user_presence": {
            "name": "_fetch_user_presence",
            "location": 357,
            "return": [
                "UserPresence"
            ],
            "arguments": {
                "self": [],
                "user_id": [
                    "str",
                    "int"
                ]
            }
        },
        "UserAddressManager._set_user_presence": {
            "name": "_set_user_presence",
            "location": 371,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "user_id": [
                    "int",
                    "str"
                ],
                "presence": [
                    "int",
                    "str",
                    "list[tuple[typing.Union[int,int]]]",
                    "float",
                    "set[int]"
                ],
                "presence_update_id": [
                    "int"
                ]
            }
        },
        "UserAddressManager._validate_userid_signature": {
            "name": "_validate_userid_signature",
            "location": 402,
            "return": [],
            "arguments": {
                "user": [
                    "str",
                    "None",
                    "bool"
                ]
            }
        },
        "UserAddressManager.log": {
            "name": "log",
            "location": 406,
            "return": [
                "dict[, ]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MultiClientUserAddressManager.__init__": {
            "name": "__init__",
            "location": 426,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "client": [
                    "str",
                    "None",
                    "list[str]",
                    "bool"
                ],
                "displayname_cache": [
                    "str",
                    "None",
                    "list[str]",
                    "bool"
                ],
                "_log_context": [
                    "None",
                    "str",
                    "list[str]",
                    "bool"
                ]
            }
        },
        "MultiClientUserAddressManager.start": {
            "name": "start",
            "location": 435,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MultiClientUserAddressManager.add_client": {
            "name": "add_client",
            "location": 443,
            "return": [],
            "arguments": {
                "self": [],
                "client": [
                    "str",
                    "list[str]"
                ]
            }
        },
        "MultiClientUserAddressManager.remove_client": {
            "name": "remove_client",
            "location": 450,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "client": []
            }
        },
        "MultiClientUserAddressManager.stop": {
            "name": "stop",
            "location": 455,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MultiClientUserAddressManager._create_presence_listener": {
            "name": "_create_presence_listener",
            "location": 459,
            "return": [],
            "arguments": {
                "self": [],
                "client_server_url": [
                    "typing.Iterable[tuple[typing.Union[str,int]]]",
                    "str",
                    "bool",
                    "bytes"
                ]
            }
        },
        "MultiClientUserAddressManager._presence_listener": {
            "name": "_presence_listener",
            "location": 490,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "event": [],
                "presence_update_id": [
                    "int",
                    "tuple[typing.Union[typing.Any,str]]",
                    "dict[int, int]",
                    "typing.Callable[Type,str, bool]",
                    "str"
                ]
            }
        },
        "MultiClientUserAddressManager._create_presence_listener._filter_presence": {
            "name": "_filter_presence",
            "location": 462,
            "return": [
                "None"
            ],
            "arguments": {
                "event": [],
                "presence_update_id": []
            }
        }
    },
    "raiden-services-master/src/raiden_libs/utils.py": {
        "camel_to_snake": {
            "name": "camel_to_snake",
            "location": 14,
            "return": [],
            "arguments": {
                "input_str": [
                    "str",
                    "tuple[typing.Union[int,int]]"
                ]
            }
        },
        "public_key_to_address": {
            "name": "public_key_to_address",
            "location": 18,
            "return": [
                "Address"
            ],
            "arguments": {
                "public_key": [
                    "str"
                ]
            }
        },
        "private_key_to_address": {
            "name": "private_key_to_address",
            "location": 24,
            "return": [],
            "arguments": {
                "private_key": [
                    "typing.Callable[, ]",
                    "None",
                    "bytes",
                    "int"
                ]
            }
        },
        "to_checksum_address": {
            "name": "to_checksum_address",
            "location": 31,
            "return": [],
            "arguments": {
                "value": [
                    "typing.Type",
                    "None",
                    "str",
                    "bool"
                ]
            }
        },
        "get_posix_utc_time_now": {
            "name": "get_posix_utc_time_now",
            "location": 35,
            "return": [
                "Timestamp"
            ],
            "arguments": {}
        }
    },
    "raiden-services-master/src/raiden_libs/__init__.py": {},
    "raiden-services-master/src/request_collector/cli.py": {
        "main": {
            "name": "main",
            "location": 54,
            "return": [
                "int"
            ],
            "arguments": {
                "private_key": [
                    "bytes",
                    "None",
                    "str"
                ],
                "state_db": [
                    "str",
                    "bool"
                ],
                "matrix_server": [
                    "bytes",
                    "None",
                    "str"
                ],
                "accept_disclaimer": [
                    "bool",
                    "str",
                    "list[]",
                    "list[str]"
                ]
            }
        }
    },
    "raiden-services-master/src/request_collector/server.py": {
        "RequestCollector.__init__": {
            "name": "__init__",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "private_key": [
                    "int",
                    "list[str]",
                    "str",
                    "None"
                ],
                "state_db": [
                    "str",
                    "float",
                    "int",
                    "list[str]"
                ],
                "matrix_servers": [
                    "None",
                    "bytes"
                ]
            }
        },
        "RequestCollector.listen_forever": {
            "name": "listen_forever",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RequestCollector._run": {
            "name": "_run",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RequestCollector.stop": {
            "name": "stop",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RequestCollector.handle_message": {
            "name": "handle_message",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "bool",
                    "list[str]"
                ]
            }
        },
        "RequestCollector.on_monitor_request": {
            "name": "on_monitor_request",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "request_monitoring": []
            }
        }
    },
    "raiden-services-master/src/request_collector/__init__.py": {},
    "raiden-services-master/tests/conftest.py": {
        "_get_running_greenlets": {
            "name": "_get_running_greenlets",
            "location": 47,
            "return": [
                "list[]"
            ],
            "arguments": {}
        },
        "no_greenlets_left": {
            "name": "no_greenlets_left",
            "location": 56,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {}
        }
    },
    "raiden-services-master/tests/constants.py": {},
    "raiden-services-master/tests/utils.py": {
        "save_metrics_state": {
            "name": "save_metrics_state",
            "location": 48,
            "return": [
                "MetricsRelativeState"
            ],
            "arguments": {
                "registry": [
                    "str",
                    "int",
                    "None"
                ]
            }
        },
        "MetricsRelativeState.__init__": {
            "name": "__init__",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "registry": [
                    "int",
                    "float"
                ]
            }
        },
        "MetricsRelativeState.has_saved_state": {
            "name": "has_saved_state",
            "location": 12,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "MetricsRelativeState.save_state": {
            "name": "save_state",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MetricsRelativeState.get_delta": {
            "name": "get_delta",
            "location": 20,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "dict[str, typing.Any]",
                    "None"
                ],
                "labels": [
                    "None",
                    "str",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "MetricsRelativeState.get_saved_sample_value": {
            "name": "get_saved_sample_value",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "list[str]"
                ],
                "labels": [
                    "None",
                    "str"
                ]
            }
        }
    },
    "raiden-services-master/tests/__init__.py": {},
    "raiden-services-master/tests/libs/test_blockchain.py": {
        "create_tnr_contract_events_query": {
            "name": "create_tnr_contract_events_query",
            "location": 22,
            "return": [],
            "arguments": {
                "web3": [
                    "typing.Iterable[typing.Any]",
                    "str",
                    "int"
                ],
                "contract_address": [
                    "typing.Iterable[typing.Any]",
                    "str",
                    "int"
                ]
            }
        },
        "test_limit_inclusivity_in_query_blockchain_events": {
            "name": "test_limit_inclusivity_in_query_blockchain_events",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "web3": [
                    "bool"
                ],
                "wait_for_blocks": [
                    "bool",
                    "typing.Iterable[str]",
                    "Exception",
                    "typing.Type"
                ],
                "token_network_registry_contract": [
                    "bool"
                ]
            }
        },
        "test_get_pessimistic_udc_balance": {
            "name": "test_get_pessimistic_udc_balance",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {
                "user_deposit_contract": [
                    "typing.Callable[, ]",
                    "str"
                ],
                "web3": [
                    "typing.Callable[, ]",
                    "str"
                ],
                "deposit_to_udc": [
                    "typing.Callable[, ]",
                    "str"
                ],
                "get_accounts": [
                    "typing.Callable[, ]",
                    "str"
                ]
            }
        },
        "test_get_blockchain_events_returns_early_for_invalid_interval": {
            "name": "test_get_blockchain_events_returns_early_for_invalid_interval",
            "location": 128,
            "return": [
                "None"
            ],
            "arguments": {
                "web3": [
                    "list[raiden.utils.Address]",
                    "set[str]"
                ],
                "token_network_registry_contract": [
                    "list[raiden.utils.Address]",
                    "set[str]"
                ]
            }
        },
        "test_get_blockchain_events_adaptive_reduces_block_interval_after_timeout": {
            "name": "test_get_blockchain_events_adaptive_reduces_block_interval_after_timeout",
            "location": 148,
            "return": [
                "None"
            ],
            "arguments": {
                "web3": [
                    "list[raiden.utils.Address]"
                ],
                "token_network_registry_contract": []
            }
        },
        "create_tnr_contract_events_query.query_callback": {
            "name": "query_callback",
            "location": 23,
            "return": [],
            "arguments": {}
        },
        "test_get_pessimistic_udc_balance.deposit": {
            "name": "deposit",
            "location": 102,
            "return": [],
            "arguments": {
                "from_offset": [],
                "to_offset": []
            }
        }
    },
    "raiden-services-master/tests/libs/test_contract_info.py": {
        "test_contract_info_defaults": {
            "name": "test_contract_info_defaults",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_contract_info_overwrite_defaults": {
            "name": "test_contract_info_overwrite_defaults",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_invalid_chain_id": {
            "name": "test_invalid_chain_id",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "raiden-services-master/tests/libs/test_database.py": {
        "test_hex256": {
            "name": "test_hex256",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "raiden-services-master/tests/libs/test_matrix.py": {
        "request_monitoring_message": {
            "name": "request_monitoring_message",
            "location": 51,
            "return": [],
            "arguments": {
                "token_network": [
                    "typing.Callable[, ]"
                ],
                "get_accounts": [
                    "list[int]",
                    "tuple[int]",
                    "int"
                ],
                "get_private_key": [
                    "typing.Callable[, ]"
                ]
            }
        },
        "presence_event": {
            "name": "presence_event",
            "location": 74,
            "return": [
                "dict[typing.Text, typing.Union[dict[typing.Text, typing.Union[int,typing.Text]],typing.Text]]"
            ],
            "arguments": {
                "server_index": [
                    "bool",
                    "float"
                ]
            }
        },
        "test_deserialize_messages": {
            "name": "test_deserialize_messages",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "message_data": [
                    "int"
                ]
            }
        },
        "test_deserialize_messages_invalid_sender": {
            "name": "test_deserialize_messages_invalid_sender",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {
                "request_monitoring_message": [
                    "str"
                ]
            }
        },
        "test_deserialize_checks_datetimes_in_messages": {
            "name": "test_deserialize_checks_datetimes_in_messages",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_deserialize_messages_valid_message": {
            "name": "test_deserialize_messages_valid_message",
            "location": 122,
            "return": [
                "None"
            ],
            "arguments": {
                "request_monitoring_message": []
            }
        },
        "test_deserialize_messages_valid_messages": {
            "name": "test_deserialize_messages_valid_messages",
            "location": 129,
            "return": [
                "None"
            ],
            "arguments": {
                "request_monitoring_message": []
            }
        },
        "test_matrix_http_retry_delay": {
            "name": "test_matrix_http_retry_delay",
            "location": 139,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_deserialize_messages_with_missing_fields": {
            "name": "test_deserialize_messages_with_missing_fields",
            "location": 145,
            "return": [
                "None"
            ],
            "arguments": {
                "request_monitoring_message": []
            }
        },
        "test_deserialize_messages_that_is_too_big": {
            "name": "test_deserialize_messages_that_is_too_big",
            "location": 161,
            "return": [
                "None"
            ],
            "arguments": {
                "request_monitoring_message": [
                    "str"
                ],
                "capsys": []
            }
        },
        "test_rate_limiter": {
            "name": "test_rate_limiter",
            "location": 176,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_matrix_listener_smoke_test": {
            "name": "test_matrix_listener_smoke_test",
            "location": 190,
            "return": [
                "None"
            ],
            "arguments": {
                "get_accounts": [
                    "typing.Callable[, ]",
                    "str"
                ],
                "get_private_key": [
                    "int",
                    "str"
                ]
            }
        },
        "test_filter_presences_by_client": {
            "name": "test_filter_presences_by_client",
            "location": 212,
            "return": [
                "None"
            ],
            "arguments": {
                "presence_event": [],
                "server_index": [
                    "list[]",
                    "list[int]",
                    "str"
                ]
            }
        },
        "test_client_manager_start": {
            "name": "test_client_manager_start",
            "location": 279,
            "return": [
                "None"
            ],
            "arguments": {
                "get_accounts": [
                    "int",
                    "list[str]"
                ],
                "get_private_key": [
                    "int",
                    "list[str]"
                ]
            }
        },
        "test_filter_presences_by_client._mock_add_presence_listener": {
            "name": "_mock_add_presence_listener",
            "location": 220,
            "return": [],
            "arguments": {
                "listener": []
            }
        },
        "test_filter_presences_by_client._mock_remove_presence_listener": {
            "name": "_mock_remove_presence_listener",
            "location": 225,
            "return": [
                "None"
            ],
            "arguments": {
                "listener_id": []
            }
        },
        "test_filter_presences_by_client._mock_presence_listener": {
            "name": "_mock_presence_listener",
            "location": 228,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "event": [],
                "presence_update_id": []
            }
        },
        "test_client_manager_start.mock_start_client": {
            "name": "mock_start_client",
            "location": 290,
            "return": [],
            "arguments": {
                "server_url": []
            }
        }
    },
    "raiden-services-master/tests/libs/test_metrics.py": {
        "test_metrics_enum": {
            "name": "test_metrics_enum",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "raiden-services-master/tests/libs/test_service_registry.py": {
        "test_registration": {
            "name": "test_registration",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "web3": [
                    "None",
                    "typing.Callable[, ]",
                    "int"
                ],
                "service_registry": [
                    "None",
                    "typing.Callable[, ]",
                    "int"
                ],
                "get_accounts": [
                    "typing.Callable[, ]",
                    "bool",
                    "dict[, ]",
                    "None"
                ],
                "get_private_key": [
                    "typing.Callable[, ]",
                    "bool",
                    "dict[, ]",
                    "None"
                ],
                "wait_for_blocks": [
                    "typing.Callable[, ]",
                    "bool",
                    "dict[, ]",
                    "None"
                ]
            }
        },
        "test_registration.create_blocks": {
            "name": "create_blocks",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "raiden-services-master/tests/libs/__init__.py": {},
    "raiden-services-master/tests/libs/fixtures/cli.py": {
        "default_cli_args": {
            "name": "default_cli_args",
            "location": 8,
            "return": [
                "list[typing.Union[typing.Text,typing.TextIO,typing.IO,list[str],bool]]"
            ],
            "arguments": {
                "keystore_file": [
                    "str",
                    "typing.TextIO",
                    "typing.IO",
                    "list[str]",
                    "bool"
                ]
            }
        }
    },
    "raiden-services-master/tests/libs/fixtures/network.py": {
        "free_port": {
            "name": "free_port",
            "location": 7,
            "return": [],
            "arguments": {}
        }
    },
    "raiden-services-master/tests/libs/fixtures/web3.py": {
        "wait_for_blocks": {
            "name": "wait_for_blocks",
            "location": 20,
            "return": [],
            "arguments": {
                "web3": [
                    "bool",
                    "typing.Callable[, ]",
                    "list[str]"
                ]
            }
        },
        "contracts_manager": {
            "name": "contracts_manager",
            "location": 31,
            "return": [
                "ContractManager"
            ],
            "arguments": {}
        },
        "keystore_file": {
            "name": "keystore_file",
            "location": 37,
            "return": [],
            "arguments": {
                "tmp_path": [
                    "str"
                ]
            }
        },
        "mockchain": {
            "name": "mockchain",
            "location": 49,
            "return": [],
            "arguments": {
                "monkeypatch": [
                    "str",
                    "bool"
                ]
            }
        },
        "wait_for_blocks.f": {
            "name": "f",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "n": []
            }
        },
        "mockchain.get_blockchain_events": {
            "name": "get_blockchain_events",
            "location": 52,
            "return": [
                "list[]"
            ],
            "arguments": {
                "web3": [],
                "blockchain_state": [],
                "token_network_addresses": [],
                "latest_confirmed_block": []
            }
        },
        "mockchain.set_events": {
            "name": "set_events",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "events": []
            }
        }
    },
    "raiden-services-master/tests/libs/fixtures/__init__.py": {},
    "raiden-services-master/tests/libs/mocks/web3.py": {
        "ContractMock.__init__": {
            "name": "__init__",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Web3Mock.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Web3Mock._get_child_mock": {
            "name": "_get_child_mock",
            "location": 19,
            "return": [
                "Mock"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "raiden-services-master/tests/libs/mocks/__init__.py": {},
    "raiden-services-master/tests/monitoring/conftest.py": {},
    "raiden-services-master/tests/monitoring/__init__.py": {},
    "raiden-services-master/tests/monitoring/fixtures/api.py": {
        "base_url": {
            "name": "base_url",
            "location": 26,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "free_port": [
                    "str",
                    "bool",
                    "dict[str, object]",
                    "None",
                    "list[str]"
                ]
            }
        },
        "api_url": {
            "name": "api_url",
            "location": 31,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "base_url": [
                    "str",
                    "int",
                    "dict[str, typing.Any]",
                    "None",
                    "list[str]"
                ]
            }
        },
        "monitoring_service_mock": {
            "name": "monitoring_service_mock",
            "location": 36,
            "return": [
                "typing.Generator[MonitoringService]"
            ],
            "arguments": {}
        },
        "ms_api_sut": {
            "name": "ms_api_sut",
            "location": 63,
            "return": [
                "typing.Generator[MSApi]"
            ],
            "arguments": {
                "monitoring_service_mock": [],
                "free_port": [
                    "int",
                    "dict[str, typing.Any]",
                    "str",
                    "typing.Callable[, ]"
                ]
            }
        }
    },
    "raiden-services-master/tests/monitoring/fixtures/contracts.py": {
        "monitoring_service_contract": {
            "name": "monitoring_service_contract",
            "location": 5,
            "return": [
                "int",
                "str",
                "typing.Iterable['Context']"
            ],
            "arguments": {
                "monitoring_service_external": [
                    "int",
                    "str",
                    "typing.Iterable['Context']"
                ]
            }
        }
    },
    "raiden-services-master/tests/monitoring/fixtures/factories.py": {
        "build_request_monitoring": {
            "name": "build_request_monitoring",
            "location": 14,
            "return": [],
            "arguments": {}
        },
        "build_request_monitoring.f": {
            "name": "f",
            "location": 18,
            "return": [],
            "arguments": {
                "chain_id": [],
                "amount": [
                    "TokenAmount"
                ],
                "nonce": [
                    "Nonce"
                ],
                "channel_id": [
                    "ChannelID"
                ]
            }
        }
    },
    "raiden-services-master/tests/monitoring/fixtures/server.py": {
        "ms_address": {
            "name": "ms_address",
            "location": 28,
            "return": [],
            "arguments": {
                "create_service_account": [
                    "str",
                    "None",
                    "typing.Callable[[], None]",
                    "int"
                ]
            }
        },
        "default_cli_args_ms": {
            "name": "default_cli_args_ms",
            "location": 33,
            "return": [],
            "arguments": {
                "default_cli_args": [
                    "list[]",
                    "list[recidiviz.persistence.database.schema.state.schema.StatePerson]",
                    "list[tuple[typing.Union[str,scraping.utils.OptionType,scraping.utils.ArgumentType]]]"
                ]
            }
        },
        "ms_database": {
            "name": "ms_database",
            "location": 46,
            "return": [
                "Database"
            ],
            "arguments": {}
        },
        "monitoring_service": {
            "name": "monitoring_service",
            "location": 57,
            "return": [
                "MonitoringService"
            ],
            "arguments": {
                "ms_address": [
                    "str",
                    "None",
                    "int"
                ],
                "web3": [
                    "str",
                    "None",
                    "int"
                ],
                "monitoring_service_contract": [
                    "str",
                    "None",
                    "int"
                ],
                "user_deposit_contract": [
                    "str",
                    "None",
                    "int"
                ],
                "token_network_registry_contract": [
                    "str",
                    "None",
                    "int"
                ],
                "ms_database": [
                    "bool",
                    "float",
                    "list[int]",
                    "list[list[int]]"
                ],
                "get_private_key": [
                    "str",
                    "None",
                    "int"
                ],
                "service_registry": [
                    "str",
                    "None",
                    "int"
                ]
            }
        },
        "request_collector": {
            "name": "request_collector",
            "location": 89,
            "return": [
                "typing.Generator[RequestCollector]"
            ],
            "arguments": {
                "ms_address": [
                    "str",
                    "bytes"
                ],
                "ms_database": [
                    "str",
                    "bytes"
                ],
                "get_private_key": [
                    "str",
                    "bytes"
                ]
            }
        }
    },
    "raiden-services-master/tests/monitoring/fixtures/__init__.py": {},
    "raiden-services-master/tests/monitoring/monitoring_service/factories.py": {
        "create_signed_monitor_request": {
            "name": "create_signed_monitor_request",
            "location": 41,
            "return": [],
            "arguments": {
                "chain_id": [],
                "nonce": [
                    "Nonce"
                ],
                "reward_amount": [
                    "TokenAmount"
                ],
                "closing_privkey": [
                    "PrivateKey"
                ],
                "nonclosing_privkey": [
                    "PrivateKey"
                ]
            }
        },
        "create_channel": {
            "name": "create_channel",
            "location": 69,
            "return": [
                "Channel"
            ],
            "arguments": {
                "update_status": [
                    "None",
                    "int",
                    "str"
                ]
            }
        }
    },
    "raiden-services-master/tests/monitoring/monitoring_service/test_api.py": {
        "test_get_info": {
            "name": "test_get_info",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "api_url": [
                    "str"
                ],
                "ms_api_sut": [
                    "str"
                ],
                "monitoring_service_mock": []
            }
        },
        "test_get_info2": {
            "name": "test_get_info2",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "api_url": [
                    "str"
                ],
                "ms_api_sut": [
                    "str"
                ],
                "monitoring_service_mock": []
            }
        },
        "test_prometheus_exposure": {
            "name": "test_prometheus_exposure",
            "location": 99,
            "return": [
                "None"
            ],
            "arguments": {
                "base_url": [
                    "bool",
                    "str",
                    "list[str]",
                    "typing.Callable[, ]"
                ],
                "ms_api_sut": [
                    "bool",
                    "list[int]",
                    "str",
                    "None"
                ],
                "monitoring_service_mock": [
                    "bool"
                ]
            }
        }
    },
    "raiden-services-master/tests/monitoring/monitoring_service/test_cli.py": {
        "service_mock": {
            "name": "service_mock",
            "location": 15,
            "return": [
                "Mock"
            ],
            "arguments": {
                "monkeypatch": []
            }
        },
        "test_account_check": {
            "name": "test_account_check",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "web3": [
                    "bool"
                ],
                "capsys": [
                    "str",
                    "bool",
                    "typing.Sequence[int]"
                ]
            }
        },
        "test_success": {
            "name": "test_success",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "default_cli_args_ms": [
                    "str",
                    "typing.Type"
                ]
            }
        },
        "test_wrong_password": {
            "name": "test_wrong_password",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "default_cli_args_ms": []
            }
        },
        "test_shutdown": {
            "name": "test_shutdown",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "default_cli_args_ms": [
                    "str",
                    "dict[, ]"
                ],
                "service_mock": []
            }
        },
        "test_log_level": {
            "name": "test_log_level",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "default_cli_args_ms": [
                    "list[]"
                ]
            }
        }
    },
    "raiden-services-master/tests/monitoring/monitoring_service/test_crash.py": {
        "test_crash": {
            "name": "test_crash",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "tmpdir": [
                    "typing.Callable[, ]",
                    "bool",
                    "dict[str, raiden.utils.Any]"
                ],
                "get_accounts": [
                    "typing.Callable[, ]",
                    "bool",
                    "dict[str, raiden.utils.Any]"
                ],
                "get_private_key": [
                    "typing.Callable[, ]",
                    "bool",
                    "dict[str, raiden.utils.Any]"
                ],
                "mockchain": [
                    "typing.Callable[, ]",
                    "bool",
                    "dict[str, raiden.utils.Any]"
                ]
            }
        },
        "test_crash.new_ms": {
            "name": "new_ms",
            "location": 93,
            "return": [
                "MonitoringService"
            ],
            "arguments": {
                "filename": []
            }
        }
    },
    "raiden-services-master/tests/monitoring/monitoring_service/test_database.py": {
        "test_scheduled_events": {
            "name": "test_scheduled_events",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "ms_database": []
            }
        },
        "test_waiting_transactions": {
            "name": "test_waiting_transactions",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "ms_database": []
            }
        },
        "test_save_and_load_monitor_request": {
            "name": "test_save_and_load_monitor_request",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {
                "ms_database": []
            }
        },
        "test_save_and_load_channel": {
            "name": "test_save_and_load_channel",
            "location": 97,
            "return": [
                "None"
            ],
            "arguments": {
                "ms_database": []
            }
        },
        "test_saveing_multiple_channel": {
            "name": "test_saveing_multiple_channel",
            "location": 116,
            "return": [
                "None"
            ],
            "arguments": {
                "ms_database": []
            }
        },
        "test_purge_old_monitor_requests": {
            "name": "test_purge_old_monitor_requests",
            "location": 146,
            "return": [
                "None"
            ],
            "arguments": {
                "ms_database": [],
                "build_request_monitoring": [
                    "typing.Callable[, ]"
                ],
                "request_collector": [
                    "str",
                    "float",
                    "None"
                ],
                "monitoring_service": []
            }
        }
    },
    "raiden-services-master/tests/monitoring/monitoring_service/test_end_to_end.py": {
        "create_ms_contract_events_query": {
            "name": "create_ms_contract_events_query",
            "location": 27,
            "return": [],
            "arguments": {
                "web3": [
                    "typing.Iterable[typing.Any]",
                    "str",
                    "int"
                ],
                "contract_address": [
                    "typing.Iterable[typing.Any]",
                    "str",
                    "int"
                ]
            }
        },
        "test_first_allowed_monitoring": {
            "name": "test_first_allowed_monitoring",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "web3": [
                    "typing.Iterable[typing.Any]"
                ],
                "monitoring_service_contract": [],
                "service_registry": [
                    "list[typing.Callable[, ]]",
                    "bool",
                    "typing.Type"
                ],
                "monitoring_service": [
                    "bool",
                    "None",
                    "str"
                ],
                "request_collector": [],
                "deposit_to_udc": [
                    "int",
                    "float",
                    "list[float]"
                ],
                "create_channel": [
                    "list[dict[str, typing.Any]]"
                ],
                "token_network": [
                    "typing.Callable[, ]"
                ],
                "get_accounts": [
                    "bool",
                    "float"
                ],
                "get_private_key": [
                    "int",
                    "float",
                    "str",
                    "None"
                ]
            }
        },
        "test_reschedule_too_early_events": {
            "name": "test_reschedule_too_early_events",
            "location": 151,
            "return": [
                "None"
            ],
            "arguments": {
                "web3": [
                    "int",
                    "None",
                    "typing.Callable[, ]"
                ],
                "monitoring_service_contract": [
                    "int",
                    "str"
                ],
                "monitoring_service": [],
                "request_collector": [],
                "deposit_to_udc": [
                    "typing.Callable[, ]",
                    "float"
                ],
                "create_channel": [
                    "typing.Sequence[str]",
                    "str",
                    "list[dict[str, typing.Any]]"
                ],
                "token_network": [
                    "typing.Callable[, ]",
                    "int"
                ],
                "get_accounts": [
                    "typing.Callable[, ]",
                    "int",
                    "None"
                ],
                "get_private_key": [
                    "int",
                    "float",
                    "str"
                ]
            }
        },
        "test_e2e": {
            "name": "test_e2e",
            "location": 268,
            "return": [
                "None"
            ],
            "arguments": {
                "web3": [],
                "monitoring_service_contract": [],
                "user_deposit_contract": [
                    "int"
                ],
                "service_registry": [
                    "str",
                    "bool",
                    "typing.Callable[str, bool]",
                    "None"
                ],
                "monitoring_service": [
                    "int",
                    "float",
                    "collections.abc.Awaitable[None]"
                ],
                "request_collector": [],
                "deposit_to_udc": [
                    "typing.Sequence[str]",
                    "int"
                ],
                "create_channel": [
                    "str"
                ],
                "token_network": [
                    "typing.Callable[, ]"
                ],
                "get_accounts": [],
                "get_private_key": []
            }
        },
        "create_ms_contract_events_query.f": {
            "name": "f",
            "location": 28,
            "return": [],
            "arguments": {}
        }
    },
    "raiden-services-master/tests/monitoring/monitoring_service/test_handlers.py": {
        "mock_first_allowed_block": {
            "name": "mock_first_allowed_block",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": []
            }
        },
        "assert_channel_state": {
            "name": "assert_channel_state",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "context": [],
                "state": [
                    "int"
                ]
            }
        },
        "create_default_token_network": {
            "name": "create_default_token_network",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "context": []
            }
        },
        "setup_state_with_open_channel": {
            "name": "setup_state_with_open_channel",
            "location": 81,
            "return": [],
            "arguments": {
                "context": []
            }
        },
        "setup_state_with_closed_channel": {
            "name": "setup_state_with_closed_channel",
            "location": 100,
            "return": [],
            "arguments": {
                "context": []
            }
        },
        "get_scheduled_claim_event": {
            "name": "get_scheduled_claim_event",
            "location": 120,
            "return": [
                "None"
            ],
            "arguments": {
                "database": []
            }
        },
        "context": {
            "name": "context",
            "location": 135,
            "return": [
                "Context"
            ],
            "arguments": {
                "ms_database": []
            }
        },
        "test_event_handler_ignore_other_events": {
            "name": "test_event_handler_ignore_other_events",
            "location": 147,
            "return": [
                "None"
            ],
            "arguments": {
                "context": []
            }
        },
        "test_token_network_created_handlers_add_network": {
            "name": "test_token_network_created_handlers_add_network",
            "location": 166,
            "return": [
                "None"
            ],
            "arguments": {
                "context": [
                    "int"
                ]
            }
        },
        "test_channel_opened_event_handler_adds_channel": {
            "name": "test_channel_opened_event_handler_adds_channel",
            "location": 184,
            "return": [
                "None"
            ],
            "arguments": {
                "context": []
            }
        },
        "test_channel_closed_event_handler_closes_existing_channel": {
            "name": "test_channel_closed_event_handler_closes_existing_channel",
            "location": 201,
            "return": [
                "None"
            ],
            "arguments": {
                "context": []
            }
        },
        "test_channel_closed_event_handler_idempotency": {
            "name": "test_channel_closed_event_handler_idempotency",
            "location": 231,
            "return": [
                "None"
            ],
            "arguments": {
                "context": [
                    "int"
                ]
            }
        },
        "test_channel_closed_event_handler_ignores_existing_channel_after_timeout": {
            "name": "test_channel_closed_event_handler_ignores_existing_channel_after_timeout",
            "location": 253,
            "return": [
                "None"
            ],
            "arguments": {
                "context": []
            }
        },
        "test_channel_closed_event_handler_leaves_existing_channel": {
            "name": "test_channel_closed_event_handler_leaves_existing_channel",
            "location": 272,
            "return": [
                "None"
            ],
            "arguments": {
                "context": []
            }
        },
        "test_channel_closed_event_handler_channel_not_in_database": {
            "name": "test_channel_closed_event_handler_channel_not_in_database",
            "location": 287,
            "return": [
                "None"
            ],
            "arguments": {
                "context": []
            }
        },
        "test_channel_closed_event_handler_trigger_action_monitor_event_with_monitor_request": {
            "name": "test_channel_closed_event_handler_trigger_action_monitor_event_with_monitor_request",
            "location": 310,
            "return": [
                "None"
            ],
            "arguments": {
                "context": []
            }
        },
        "test_channel_closed_event_handler_trigger_action_monitor_event_without_monitor_request": {
            "name": "test_channel_closed_event_handler_trigger_action_monitor_event_without_monitor_request",
            "location": 329,
            "return": [
                "None"
            ],
            "arguments": {
                "context": []
            }
        },
        "test_channel_settled_event_handler_settles_existing_channel": {
            "name": "test_channel_settled_event_handler_settles_existing_channel",
            "location": 346,
            "return": [
                "None"
            ],
            "arguments": {
                "context": [
                    "int"
                ]
            }
        },
        "test_channel_settled_event_handler_leaves_existing_channel": {
            "name": "test_channel_settled_event_handler_leaves_existing_channel",
            "location": 360,
            "return": [
                "None"
            ],
            "arguments": {
                "context": [
                    "int"
                ]
            }
        },
        "test_channel_bp_updated_event_handler_sets_update_status_if_not_set": {
            "name": "test_channel_bp_updated_event_handler_sets_update_status_if_not_set",
            "location": 374,
            "return": [
                "None"
            ],
            "arguments": {
                "context": []
            }
        },
        "test_channel_bp_updated_event_handler_channel_not_in_database": {
            "name": "test_channel_bp_updated_event_handler_channel_not_in_database",
            "location": 422,
            "return": [
                "None"
            ],
            "arguments": {
                "context": []
            }
        },
        "test_channel_bp_updated_event_handler_invalid_closing_participant": {
            "name": "test_channel_bp_updated_event_handler_invalid_closing_participant",
            "location": 451,
            "return": [
                "None"
            ],
            "arguments": {
                "context": []
            }
        },
        "test_channel_bp_updated_event_handler_lower_nonce_than_expected": {
            "name": "test_channel_bp_updated_event_handler_lower_nonce_than_expected",
            "location": 480,
            "return": [
                "None"
            ],
            "arguments": {
                "context": []
            }
        },
        "test_monitor_new_balance_proof_event_handler_sets_update_status": {
            "name": "test_monitor_new_balance_proof_event_handler_sets_update_status",
            "location": 511,
            "return": [
                "None"
            ],
            "arguments": {
                "context": []
            }
        },
        "test_monitor_new_balance_proof_event_handler_idempotency": {
            "name": "test_monitor_new_balance_proof_event_handler_idempotency",
            "location": 577,
            "return": [
                "None"
            ],
            "arguments": {
                "context": [
                    "int"
                ]
            }
        },
        "test_monitor_reward_claimed_event_handler": {
            "name": "test_monitor_reward_claimed_event_handler",
            "location": 621,
            "return": [
                "None"
            ],
            "arguments": {
                "context": [
                    "str",
                    "typing.Callable[, ]"
                ],
                "log": [
                    "str",
                    "None"
                ]
            }
        },
        "test_action_monitoring_triggered_event_handler_does_not_trigger_monitor_call_when_nonce_to_small": {
            "name": "test_action_monitoring_triggered_event_handler_does_not_trigger_monitor_call_when_nonce_to_small",
            "location": 669,
            "return": [
                "None"
            ],
            "arguments": {
                "context": []
            }
        },
        "test_action_monitoring_rescheduling_when_user_lacks_funds": {
            "name": "test_action_monitoring_rescheduling_when_user_lacks_funds",
            "location": 711,
            "return": [
                "None"
            ],
            "arguments": {
                "context": []
            }
        },
        "test_action_monitoring_triggered_event_handler_with_sufficient_balance_does_trigger_monitor_call": {
            "name": "test_action_monitoring_triggered_event_handler_with_sufficient_balance_does_trigger_monitor_call",
            "location": 750,
            "return": [
                "None"
            ],
            "arguments": {
                "context": []
            }
        },
        "test_action_monitoring_triggered_event_handler_with_insufficient_reward_amount_does_not_trigger_monitor_call": {
            "name": "test_action_monitoring_triggered_event_handler_with_insufficient_reward_amount_does_not_trigger_monitor_call",
            "location": 786,
            "return": [
                "None"
            ],
            "arguments": {
                "context": []
            }
        },
        "test_action_monitoring_triggered_event_handler_without_sufficient_balance_doesnt_trigger_monitor_call": {
            "name": "test_action_monitoring_triggered_event_handler_without_sufficient_balance_doesnt_trigger_monitor_call",
            "location": 819,
            "return": [
                "None"
            ],
            "arguments": {
                "context": []
            }
        },
        "test_mr_available_before_channel_triggers_monitor_call": {
            "name": "test_mr_available_before_channel_triggers_monitor_call",
            "location": 854,
            "return": [
                "None"
            ],
            "arguments": {
                "context": []
            }
        },
        "test_mr_with_unknown_signatures": {
            "name": "test_mr_with_unknown_signatures",
            "location": 880,
            "return": [
                "None"
            ],
            "arguments": {
                "context": []
            }
        },
        "test_action_claim_reward_triggered_event_handler_does_trigger_claim_call": {
            "name": "test_action_claim_reward_triggered_event_handler_does_trigger_claim_call",
            "location": 904,
            "return": [
                "None"
            ],
            "arguments": {
                "context": []
            }
        },
        "test_action_claim_reward_triggered_event_handler_without_reward_doesnt_trigger_claim_call": {
            "name": "test_action_claim_reward_triggered_event_handler_without_reward_doesnt_trigger_claim_call",
            "location": 940,
            "return": [
                "None"
            ],
            "arguments": {
                "context": []
            }
        },
        "test_action_claim_reward_triggered_event_handler_without_update_state_doesnt_trigger_claim_call": {
            "name": "test_action_claim_reward_triggered_event_handler_without_update_state_doesnt_trigger_claim_call",
            "location": 976,
            "return": [
                "None"
            ],
            "arguments": {
                "context": []
            }
        },
        "test_mr_with_unknown_signatures.assert_mr_is_ignored": {
            "name": "assert_mr_is_ignored",
            "location": 884,
            "return": [
                "None"
            ],
            "arguments": {
                "mr": []
            }
        }
    },
    "raiden-services-master/tests/monitoring/monitoring_service/test_service.py": {
        "test_check_pending_transactions": {
            "name": "test_check_pending_transactions",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "web3": [],
                "wait_for_blocks": [
                    "bool",
                    "list[str]",
                    "list[tuple[typing.Union[str,typing.Any]]]",
                    "typing.Callable[[], None]"
                ],
                "monitoring_service": []
            }
        },
        "test_trigger_scheduled_events": {
            "name": "test_trigger_scheduled_events",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "monitoring_service": []
            }
        }
    },
    "raiden-services-master/tests/monitoring/monitoring_service/__init__.py": {},
    "raiden-services-master/tests/monitoring/request_collector/test_cli.py": {
        "test_success": {
            "name": "test_success",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "default_cli_args": []
            }
        },
        "test_wrong_password": {
            "name": "test_wrong_password",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "default_cli_args": []
            }
        },
        "test_shutdown": {
            "name": "test_shutdown",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "default_cli_args": []
            }
        },
        "test_log_level": {
            "name": "test_log_level",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "default_cli_args": [
                    "list[]"
                ]
            }
        }
    },
    "raiden-services-master/tests/monitoring/request_collector/test_server.py": {
        "test_invalid_request": {
            "name": "test_invalid_request",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "ms_database": [],
                "build_request_monitoring": [],
                "request_collector": []
            }
        },
        "test_ignore_old_nonce": {
            "name": "test_ignore_old_nonce",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "ms_database": [],
                "build_request_monitoring": [],
                "request_collector": []
            }
        },
        "test_request_collector_doesnt_crash_with_invalid_messages": {
            "name": "test_request_collector_doesnt_crash_with_invalid_messages",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "request_collector": []
            }
        },
        "test_ignore_mr_for_closed_channel": {
            "name": "test_ignore_mr_for_closed_channel",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "request_collector": [],
                "build_request_monitoring": [
                    "bool",
                    "list[str]"
                ],
                "ms_database": [],
                "closing_block": []
            }
        },
        "test_invalid_request.store_successful": {
            "name": "store_successful",
            "location": 15,
            "return": [
                "bool"
            ],
            "arguments": {
                "reward_proof_signature": [
                    "None"
                ],
                "non_closing_participant": [
                    "None"
                ]
            }
        },
        "test_ignore_old_nonce.stored_mr_after_proccessing": {
            "name": "stored_mr_after_proccessing",
            "location": 40,
            "return": [],
            "arguments": {
                "amount": [],
                "nonce": []
            }
        }
    },
    "raiden-services-master/tests/monitoring/request_collector/__init__.py": {},
    "raiden-services-master/tests/pathfinding/config.py": {},
    "raiden-services-master/tests/pathfinding/conftest.py": {
        "pytest_addoption": {
            "name": "pytest_addoption",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {
                "parser": []
            }
        }
    },
    "raiden-services-master/tests/pathfinding/test_api.py": {
        "test_get_paths_via_debug_endpoint_with_debug_disabled": {
            "name": "test_get_paths_via_debug_endpoint_with_debug_disabled",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "api_url": [
                    "str"
                ],
                "addresses": [
                    "str"
                ],
                "token_network_model": [
                    "str",
                    "bool"
                ]
            }
        },
        "test_get_paths_via_debug_endpoint_a": {
            "name": "test_get_paths_via_debug_endpoint_a",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "api_url": [
                    "str"
                ],
                "addresses": [
                    "str"
                ],
                "token_network_model": [
                    "str",
                    "None"
                ]
            }
        },
        "test_get_paths_via_debug_endpoint_empty_routes": {
            "name": "test_get_paths_via_debug_endpoint_empty_routes",
            "location": 144,
            "return": [
                "None"
            ],
            "arguments": {
                "api_url": [
                    "str"
                ],
                "addresses": [
                    "str"
                ],
                "token_network_model": [
                    "str",
                    "None"
                ]
            }
        },
        "test_get_ious_via_debug_endpoint": {
            "name": "test_get_ious_via_debug_endpoint",
            "location": 195,
            "return": [
                "None"
            ],
            "arguments": {
                "api_sut_with_debug": [
                    "bool",
                    "str",
                    "typing.Callable[, ]"
                ],
                "api_url": [
                    "str"
                ],
                "addresses": []
            }
        },
        "test_get_paths_validation": {
            "name": "test_get_paths_validation",
            "location": 231,
            "return": [
                "None"
            ],
            "arguments": {
                "api_sut": [
                    "tuple[typing.Union[str,dict[, ]]]"
                ],
                "api_url": [
                    "str"
                ],
                "addresses": [
                    "str"
                ],
                "token_network_model": [
                    "str",
                    "typing.Sequence[typing.Hashable]"
                ],
                "make_iou": [
                    "str",
                    "set[str]",
                    "dict[str, A]",
                    "None",
                    "dict[, ]"
                ]
            }
        },
        "test_get_paths_path_validation": {
            "name": "test_get_paths_path_validation",
            "location": 322,
            "return": [
                "None"
            ],
            "arguments": {
                "api_url": [
                    "str"
                ]
            }
        },
        "test_get_paths": {
            "name": "test_get_paths",
            "location": 339,
            "return": [
                "None"
            ],
            "arguments": {
                "api_url": [
                    "str"
                ],
                "addresses": [
                    "str"
                ],
                "token_network_model": [
                    "str"
                ]
            }
        },
        "test_payment_with_new_iou_rejected": {
            "name": "test_payment_with_new_iou_rejected",
            "location": 391,
            "return": [
                "None"
            ],
            "arguments": {
                "api_sut": [
                    "str",
                    "bool"
                ],
                "api_url": [
                    "str"
                ],
                "addresses": [
                    "str"
                ],
                "token_network_model": [
                    "str"
                ],
                "make_iou": [
                    "typing.Callable[, ]",
                    "bool",
                    "str"
                ]
            }
        },
        "test_get_info": {
            "name": "test_get_info",
            "location": 442,
            "return": [
                "None"
            ],
            "arguments": {
                "api_url": [
                    "str"
                ],
                "api_sut": [
                    "str",
                    "int"
                ],
                "pathfinding_service_mock": [
                    "str",
                    "list[str]",
                    "None",
                    "int"
                ]
            }
        },
        "test_get_info2": {
            "name": "test_get_info2",
            "location": 484,
            "return": [
                "None"
            ],
            "arguments": {
                "api_url": [
                    "str"
                ],
                "api_sut": [
                    "str",
                    "int"
                ],
                "pathfinding_service_mock": [
                    "str",
                    "list[str]",
                    "None",
                    "int"
                ]
            }
        },
        "test_get_offline_address_metadata": {
            "name": "test_get_offline_address_metadata",
            "location": 527,
            "return": [
                "None"
            ],
            "arguments": {
                "api_url": [
                    "str",
                    "list[str]"
                ]
            }
        },
        "test_get_address_metadata": {
            "name": "test_get_address_metadata",
            "location": 539,
            "return": [
                "None"
            ],
            "arguments": {
                "api_url": [
                    "str",
                    "list[str]"
                ],
                "api_sut": [
                    "str",
                    "None",
                    "bool"
                ]
            }
        },
        "test_get_iou": {
            "name": "test_get_iou",
            "location": 558,
            "return": [
                "None"
            ],
            "arguments": {
                "api_sut": [
                    "str",
                    "bool",
                    "typing.Callable[, ]"
                ],
                "api_url": [
                    "str"
                ],
                "token_network_model": [
                    "str"
                ],
                "make_iou": [
                    "str",
                    "bool"
                ]
            }
        },
        "test_feedback": {
            "name": "test_feedback",
            "location": 622,
            "return": [
                "None"
            ],
            "arguments": {
                "api_sut": [
                    "str"
                ],
                "api_url": [
                    "str"
                ],
                "token_network_model": [
                    "typing.Callable[, ]"
                ]
            }
        },
        "test_stats_endpoint": {
            "name": "test_stats_endpoint",
            "location": 675,
            "return": [
                "None"
            ],
            "arguments": {
                "api_sut_with_debug": [
                    "str",
                    "list[str]",
                    "Exception"
                ],
                "api_url": [
                    "str",
                    "list[str]",
                    "Exception"
                ],
                "token_network_model": [
                    "list[int]"
                ]
            }
        },
        "test_cors": {
            "name": "test_cors",
            "location": 711,
            "return": [
                "None"
            ],
            "arguments": {
                "api_url": [
                    "str",
                    "dict[str, str]"
                ]
            }
        },
        "test_suggest_partner_api": {
            "name": "test_suggest_partner_api",
            "location": 724,
            "return": [
                "None"
            ],
            "arguments": {
                "api_url": [
                    "str",
                    "list[str]"
                ],
                "token_network_model": [
                    "int",
                    "str",
                    "typing.Iterable[tuple[typing.Union[str,dict[, ]]]]"
                ]
            }
        },
        "test_online_addresses": {
            "name": "test_online_addresses",
            "location": 736,
            "return": [
                "None"
            ],
            "arguments": {
                "api_url": [
                    "str"
                ],
                "reachability_state": [
                    "str"
                ]
            }
        },
        "test_get_paths_validation.request_path_with": {
            "name": "request_path_with",
            "location": 243,
            "return": [],
            "arguments": {
                "status_code": [
                    "int"
                ]
            }
        },
        "test_payment_with_new_iou_rejected.request_path_with": {
            "name": "request_path_with",
            "location": 405,
            "return": [],
            "arguments": {
                "status_code": [
                    "int"
                ]
            }
        },
        "test_get_iou.make_params": {
            "name": "make_params",
            "location": 563,
            "return": [
                "dict[typing.Text, ]"
            ],
            "arguments": {
                "timestamp": []
            }
        },
        "test_feedback.make_request": {
            "name": "make_request",
            "location": 628,
            "return": [],
            "arguments": {
                "token_id": [
                    "None"
                ],
                "success": [
                    "bool"
                ],
                "path": [
                    "None"
                ]
            }
        },
        "test_stats_endpoint.check_response": {
            "name": "check_response",
            "location": 683,
            "return": [
                "None"
            ],
            "arguments": {
                "num_all": [],
                "num_only_feedback": [],
                "num_only_success": []
            }
        }
    },
    "raiden-services-master/tests/pathfinding/test_blockchain_integration.py": {
        "test_pfs_with_mocked_client": {
            "name": "test_pfs_with_mocked_client",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "web3": [
                    "typing.Callable[, ]",
                    "dict[str, typing.Any]",
                    "float",
                    "dict[typing.Hashable, typing.Iterable[typing.Hashable]]",
                    "int"
                ],
                "token_network_registry_contract": [
                    "typing.Callable[, ]",
                    "dict[str, typing.Any]",
                    "float",
                    "dict[typing.Hashable, typing.Iterable[typing.Hashable]]",
                    "int"
                ],
                "channel_descriptions_case_1": [],
                "get_accounts": [
                    "typing.Callable[, ]",
                    "list[str]",
                    "bool",
                    "str"
                ],
                "user_deposit_contract": [
                    "typing.Callable[, ]",
                    "dict[str, typing.Any]",
                    "float",
                    "dict[typing.Hashable, typing.Iterable[typing.Hashable]]",
                    "int"
                ],
                "token_network": [],
                "custom_token": [
                    "str",
                    "int"
                ],
                "create_channel": [
                    "typing.Callable[, ]"
                ],
                "get_private_key": [
                    "int",
                    "str",
                    "typing.Callable[, ]",
                    "float"
                ]
            }
        }
    },
    "raiden-services-master/tests/pathfinding/test_capacity_updates.py": {
        "setup_channel": {
            "name": "setup_channel",
            "location": 38,
            "return": [
                "TokenNetwork"
            ],
            "arguments": {
                "service": [
                    "str",
                    "list[int]"
                ]
            }
        },
        "get_capacity_update_message": {
            "name": "get_capacity_update_message",
            "location": 60,
            "return": [
                "PFSCapacityUpdate"
            ],
            "arguments": {
                "updating_participant": [
                    "int"
                ],
                "other_participant": [
                    "int"
                ],
                "chain_id": [
                    "ChainID"
                ],
                "channel_identifier": [],
                "token_network_address": [],
                "updating_nonce": [
                    "Nonce"
                ],
                "other_nonce": [
                    "Nonce"
                ],
                "updating_capacity": [
                    "int"
                ],
                "other_capacity": [
                    "int"
                ],
                "reveal_timeout": [
                    "BlockTimeout"
                ],
                "privkey_signer": []
            }
        },
        "test_pfs_rejects_capacity_update_with_wrong_chain_id": {
            "name": "test_pfs_rejects_capacity_update_with_wrong_chain_id",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {
                "pathfinding_service_web3_mock": []
            }
        },
        "test_pfs_rejects_capacity_update_with_wrong_token_network_address": {
            "name": "test_pfs_rejects_capacity_update_with_wrong_token_network_address",
            "location": 111,
            "return": [
                "None"
            ],
            "arguments": {
                "pathfinding_service_web3_mock": []
            }
        },
        "test_pfs_rejects_capacity_update_with_wrong_channel_identifier": {
            "name": "test_pfs_rejects_capacity_update_with_wrong_channel_identifier",
            "location": 128,
            "return": [
                "None"
            ],
            "arguments": {
                "pathfinding_service_web3_mock": []
            }
        },
        "test_pfs_rejects_capacity_update_with_impossible_updating_capacity": {
            "name": "test_pfs_rejects_capacity_update_with_impossible_updating_capacity",
            "location": 144,
            "return": [
                "None"
            ],
            "arguments": {
                "pathfinding_service_web3_mock": []
            }
        },
        "test_pfs_rejects_capacity_update_with_impossible_other_capacity": {
            "name": "test_pfs_rejects_capacity_update_with_impossible_other_capacity",
            "location": 162,
            "return": [
                "None"
            ],
            "arguments": {
                "pathfinding_service_web3_mock": []
            }
        },
        "test_pfs_rejects_capacity_update_with_wrong_updating_participant": {
            "name": "test_pfs_rejects_capacity_update_with_wrong_updating_participant",
            "location": 180,
            "return": [
                "None"
            ],
            "arguments": {
                "pathfinding_service_web3_mock": []
            }
        },
        "test_pfs_rejects_capacity_update_with_wrong_other_participant": {
            "name": "test_pfs_rejects_capacity_update_with_wrong_other_participant",
            "location": 196,
            "return": [
                "None"
            ],
            "arguments": {
                "pathfinding_service_web3_mock": []
            }
        },
        "test_pfs_rejects_capacity_update_with_incorrect_signature": {
            "name": "test_pfs_rejects_capacity_update_with_incorrect_signature",
            "location": 212,
            "return": [
                "None"
            ],
            "arguments": {
                "pathfinding_service_web3_mock": []
            }
        },
        "test_pfs_min_calculation_with_capacity_updates": {
            "name": "test_pfs_min_calculation_with_capacity_updates",
            "location": 228,
            "return": [
                "None"
            ],
            "arguments": {
                "pathfinding_service_web3_mock": []
            }
        }
    },
    "raiden-services-master/tests/pathfinding/test_claim_fees.py": {
        "test_metrics_iou": {
            "name": "test_metrics_iou",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "pathfinding_service_web3_mock": [],
                "one_to_n_contract": [
                    "float",
                    "bool",
                    "str"
                ],
                "web3": [
                    "float",
                    "bool",
                    "str"
                ],
                "deposit_to_udc": [],
                "get_accounts": [
                    "bool"
                ],
                "get_private_key": [
                    "list[str]",
                    "str",
                    "typing.IO"
                ]
            }
        },
        "test_claim_fees": {
            "name": "test_claim_fees",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "pathfinding_service_web3_mock": [],
                "one_to_n_contract": [],
                "web3": [
                    "str",
                    "None",
                    "typing.Callable[..., collections.abc.Coroutine]"
                ],
                "deposit_to_udc": [],
                "get_accounts": [
                    "bool"
                ],
                "get_private_key": [
                    "list[str]",
                    "str",
                    "typing.IO"
                ]
            }
        },
        "mock_connect_to_blockchain": {
            "name": "mock_connect_to_blockchain",
            "location": 164,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": []
            }
        },
        "test_cli": {
            "name": "test_cli",
            "location": 172,
            "return": [
                "None"
            ],
            "arguments": {
                "default_cli_args": []
            }
        }
    },
    "raiden-services-master/tests/pathfinding/test_cli.py": {
        "provider_mock": {
            "name": "provider_mock",
            "location": 41,
            "return": [
                "Mock"
            ],
            "arguments": {
                "monkeypatch": []
            }
        },
        "test_bad_eth_client": {
            "name": "test_bad_eth_client",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "log": [
                    "str",
                    "int",
                    "dict[int, tuple[typing.Union[int,int]]]"
                ],
                "default_cli_args": []
            }
        },
        "test_success": {
            "name": "test_success",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "default_cli_args": [
                    "str",
                    "typing.Type"
                ]
            }
        },
        "test_eth_rpc": {
            "name": "test_eth_rpc",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "default_cli_args": [],
                "provider_mock": []
            }
        },
        "test_registry_address": {
            "name": "test_registry_address",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "default_cli_args": [
                    "list[list[typing.Any]]",
                    "list[bool]",
                    "typing.Callable[, ]",
                    "list[]",
                    "str"
                ]
            }
        },
        "test_confirmations": {
            "name": "test_confirmations",
            "location": 105,
            "return": [
                "None"
            ],
            "arguments": {
                "default_cli_args": []
            }
        },
        "test_shutdown": {
            "name": "test_shutdown",
            "location": 120,
            "return": [
                "None"
            ],
            "arguments": {
                "default_cli_args": [
                    "str",
                    "typing.Type"
                ]
            }
        },
        "test_log_level": {
            "name": "test_log_level",
            "location": 133,
            "return": [
                "None"
            ],
            "arguments": {
                "default_cli_args": []
            }
        },
        "test_registry_address.fails_on_registry_check": {
            "name": "fails_on_registry_check",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "address": []
            }
        }
    },
    "raiden-services-master/tests/pathfinding/test_database.py": {
        "db_has_feedback_for": {
            "name": "db_has_feedback_for",
            "location": 33,
            "return": [
                "bool"
            ],
            "arguments": {
                "database": [
                    "str",
                    "dict[, ]",
                    "bool"
                ],
                "token": [
                    "str",
                    "dict[, ]",
                    "bool"
                ],
                "route": [
                    "str",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "test_insert_feedback_token": {
            "name": "test_insert_feedback_token",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "pathfinding_service_mock": []
            }
        },
        "test_feedback": {
            "name": "test_feedback",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {
                "pathfinding_service_mock": []
            }
        },
        "test_feedback_stats": {
            "name": "test_feedback_stats",
            "location": 125,
            "return": [
                "None"
            ],
            "arguments": {
                "pathfinding_service_mock": []
            }
        },
        "test_waiting_messages": {
            "name": "test_waiting_messages",
            "location": 156,
            "return": [
                "None"
            ],
            "arguments": {
                "pathfinding_service_mock": []
            }
        },
        "test_channels": {
            "name": "test_channels",
            "location": 217,
            "return": [
                "None"
            ],
            "arguments": {
                "pathfinding_service_mock": []
            }
        },
        "test_channel_constraints": {
            "name": "test_channel_constraints",
            "location": 258,
            "return": [
                "None"
            ],
            "arguments": {
                "pathfinding_service_mock": []
            }
        }
    },
    "raiden-services-master/tests/pathfinding/test_fee_schedule.py": {
        "a": {
            "name": "a",
            "location": 34,
            "return": [
                "Address"
            ],
            "arguments": {
                "int_addr": [
                    "int",
                    "float"
                ]
            }
        },
        "test_fees_in_balanced_routing": {
            "name": "test_fees_in_balanced_routing",
            "location": 99,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_fees_in_unbalanced_routing": {
            "name": "test_fees_in_unbalanced_routing",
            "location": 209,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_regression_issue_554": {
            "name": "test_regression_issue_554",
            "location": 313,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_compounding_fees": {
            "name": "test_compounding_fees",
            "location": 352,
            "return": [
                "None"
            ],
            "arguments": {
                "flat_fee_cli": [
                    "float"
                ],
                "prop_fee_cli": [
                    "str",
                    "float"
                ],
                "estimated_fee": [
                    "bool",
                    "typing.Mapping"
                ]
            }
        },
        "test_fee_estimate": {
            "name": "test_fee_estimate",
            "location": 399,
            "return": [
                "None"
            ],
            "arguments": {
                "flat_fee": [
                    "float",
                    "str"
                ],
                "prop_fee_cli": [
                    "str",
                    "float"
                ],
                "max_lin_imbalance_fee": [
                    "int"
                ],
                "target_amount": [
                    "bool"
                ],
                "expected_fee": [
                    "bool"
                ]
            }
        },
        "PrettyBytes.__repr__": {
            "name": "__repr__",
            "location": 30,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "TokenNetworkForTests.__init__": {
            "name": "__init__",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "channels": [
                    "list[dict[, ]]"
                ],
                "default_capacity": [
                    "str",
                    "bytes"
                ]
            }
        },
        "TokenNetworkForTests.set_fee": {
            "name": "set_fee",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node1": [
                    "int",
                    "str",
                    "dict[str, typing.Any]"
                ],
                "node2": [
                    "int",
                    "str"
                ]
            }
        },
        "TokenNetworkForTests.estimate_fee": {
            "name": "estimate_fee",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "initator": [
                    "str",
                    "int",
                    "dict[int, set[str]]"
                ],
                "target": [
                    "str",
                    "int",
                    "dict[int, set[str]]"
                ],
                "value": [
                    "str",
                    "int",
                    "dict[int, set[str]]"
                ],
                "max_paths": [
                    "int"
                ]
            }
        }
    },
    "raiden-services-master/tests/pathfinding/test_fee_updates.py": {
        "setup_channel": {
            "name": "setup_channel",
            "location": 38,
            "return": [
                "TokenNetwork"
            ],
            "arguments": {
                "service": [
                    "str",
                    "list[int]"
                ]
            }
        },
        "get_fee_update_message": {
            "name": "get_fee_update_message",
            "location": 60,
            "return": [
                "PFSFeeUpdate"
            ],
            "arguments": {
                "updating_participant": [
                    "int"
                ],
                "chain_id": [
                    "ChainID"
                ],
                "channel_identifier": [],
                "token_network_address": [],
                "fee_schedule": [
                    "FeeScheduleState"
                ],
                "timestamp": [],
                "privkey_signer": []
            }
        },
        "test_pfs_rejects_fee_update_with_wrong_chain_id": {
            "name": "test_pfs_rejects_fee_update_with_wrong_chain_id",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "pathfinding_service_web3_mock": []
            }
        },
        "test_pfs_rejects_capacity_update_with_wrong_token_network_address": {
            "name": "test_pfs_rejects_capacity_update_with_wrong_token_network_address",
            "location": 104,
            "return": [
                "None"
            ],
            "arguments": {
                "pathfinding_service_web3_mock": []
            }
        },
        "test_pfs_rejects_capacity_update_with_wrong_channel_identifier": {
            "name": "test_pfs_rejects_capacity_update_with_wrong_channel_identifier",
            "location": 120,
            "return": [
                "None"
            ],
            "arguments": {
                "pathfinding_service_web3_mock": []
            }
        },
        "test_pfs_rejects_fee_update_with_incorrect_signature": {
            "name": "test_pfs_rejects_fee_update_with_incorrect_signature",
            "location": 135,
            "return": [
                "None"
            ],
            "arguments": {
                "pathfinding_service_web3_mock": []
            }
        },
        "test_pfs_rejects_fee_update_with_incorrect_timestamp": {
            "name": "test_pfs_rejects_fee_update_with_incorrect_timestamp",
            "location": 149,
            "return": [
                "None"
            ],
            "arguments": {
                "pathfinding_service_web3_mock": []
            }
        }
    },
    "raiden-services-master/tests/pathfinding/test_graphs.py": {
        "test_edge_weight": {
            "name": "test_edge_weight",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "addresses": []
            }
        },
        "test_routing_simple": {
            "name": "test_routing_simple",
            "location": 107,
            "return": [
                "None"
            ],
            "arguments": {
                "token_network_model": [
                    "str"
                ],
                "reachability_state": [
                    "list[raiden.utils.Address]",
                    "int",
                    "str",
                    "None",
                    "bytes"
                ],
                "addresses": []
            }
        },
        "test_capacity_check": {
            "name": "test_capacity_check",
            "location": 147,
            "return": [
                "None"
            ],
            "arguments": {
                "token_network_model": [],
                "reachability_state": [
                    "list[raiden.utils.Address]",
                    "int",
                    "str",
                    "None",
                    "bytes"
                ],
                "addresses": [
                    "list[raiden.utils.Address]",
                    "str"
                ]
            }
        },
        "test_routing_result_order": {
            "name": "test_routing_result_order",
            "location": 184,
            "return": [
                "None"
            ],
            "arguments": {
                "token_network_model": [
                    "int",
                    "None"
                ],
                "reachability_state": [
                    "int",
                    "None"
                ],
                "addresses": []
            }
        },
        "addresses_to_indexes": {
            "name": "addresses_to_indexes",
            "location": 211,
            "return": [
                "list[typing.Union[tuple[typing.Union[str,int]],bool]]"
            ],
            "arguments": {
                "path": [],
                "addresses": [
                    "str",
                    "tuple[]"
                ]
            }
        },
        "get_paths": {
            "name": "get_paths",
            "location": 216,
            "return": [
                "list[]"
            ],
            "arguments": {
                "token_network_model": [
                    "int",
                    "list[str]",
                    "str",
                    "None",
                    "dict[str, int]",
                    "list[int]"
                ],
                "reachability_state": [
                    "int",
                    "list[str]",
                    "str",
                    "None",
                    "dict[str, int]",
                    "list[int]"
                ],
                "addresses": [
                    "list[str]",
                    "str",
                    "list[int]"
                ],
                "source_index": [
                    "int"
                ],
                "target_index": [
                    "int"
                ],
                "value": [
                    "PaymentAmount"
                ],
                "max_paths": [
                    "int"
                ],
                "diversity_penalty": []
            }
        },
        "test_diversity_penalty": {
            "name": "test_diversity_penalty",
            "location": 239,
            "return": [
                "None"
            ],
            "arguments": {
                "token_network_model": [
                    "list[raiden.utils.Address]"
                ],
                "reachability_state": [
                    "list[raiden.utils.Address]"
                ],
                "addresses": [
                    "list[raiden.utils.Address]"
                ]
            }
        },
        "test_reachability_initiator": {
            "name": "test_reachability_initiator",
            "location": 287,
            "return": [
                "None"
            ],
            "arguments": {
                "token_network_model": [
                    "list[raiden.utils.Address]"
                ],
                "reachability_state": [
                    "list[raiden.utils.Address]"
                ],
                "addresses": [
                    "list[raiden.utils.Address]"
                ]
            }
        },
        "test_reachability_mediator": {
            "name": "test_reachability_mediator",
            "location": 327,
            "return": [
                "None"
            ],
            "arguments": {
                "token_network_model": [
                    "list[raiden.utils.Address]"
                ],
                "reachability_state": [
                    "list[raiden.utils.Address]"
                ],
                "addresses": [
                    "list[raiden.utils.Address]"
                ]
            }
        },
        "test_reachability_target": {
            "name": "test_reachability_target",
            "location": 366,
            "return": [
                "None"
            ],
            "arguments": {
                "token_network_model": [
                    "list[raiden.utils.Address]"
                ],
                "reachability_state": [
                    "list[raiden.utils.Address]"
                ],
                "addresses": [
                    "list[raiden.utils.Address]"
                ]
            }
        },
        "test_routing_benchmark": {
            "name": "test_routing_benchmark",
            "location": 407,
            "return": [
                "None"
            ],
            "arguments": {
                "token_network_model": [
                    "bytes"
                ]
            }
        },
        "test_suggest_partner": {
            "name": "test_suggest_partner",
            "location": 455,
            "return": [
                "None"
            ],
            "arguments": {
                "token_network_model": [],
                "addresses": [
                    "list[raiden.utils.Address]",
                    "str"
                ]
            }
        }
    },
    "raiden-services-master/tests/pathfinding/test_matrix_presence.py": {
        "user_directory_content": {
            "name": "user_directory_content",
            "location": 107,
            "return": [
                "list[]"
            ],
            "arguments": {}
        },
        "dummy_matrix_client": {
            "name": "dummy_matrix_client",
            "location": 112,
            "return": [
                "DummyMatrixClient"
            ],
            "arguments": {
                "user_directory_content": [
                    "None",
                    "str"
                ]
            }
        },
        "user_presence": {
            "name": "user_presence",
            "location": 117,
            "return": [
                "dict[, ]"
            ],
            "arguments": {}
        },
        "address_capability": {
            "name": "address_capability",
            "location": 123,
            "return": [
                "dict[, ]"
            ],
            "arguments": {}
        },
        "address_reachability": {
            "name": "address_reachability",
            "location": 129,
            "return": [
                "dict[, ]"
            ],
            "arguments": {}
        },
        "user_presence_callback": {
            "name": "user_presence_callback",
            "location": 135,
            "return": [],
            "arguments": {
                "user_presence": [
                    "str",
                    "list[]"
                ]
            }
        },
        "address_reachability_callback": {
            "name": "address_reachability_callback",
            "location": 143,
            "return": [],
            "arguments": {
                "address_reachability": [
                    "int",
                    "str",
                    "typing.Iterable['Context']"
                ]
            }
        },
        "user_addr_mgr": {
            "name": "user_addr_mgr",
            "location": 151,
            "return": [
                "typing.Generator[NonValidatingUserAddressManager]"
            ],
            "arguments": {
                "dummy_matrix_client": [
                    "list[list[int]]",
                    "list[tuple[typing.Union[int,str]]]"
                ],
                "address_reachability_callback": [
                    "list[list[int]]",
                    "list[tuple[typing.Union[int,str]]]"
                ],
                "user_presence_callback": [
                    "list[list[int]]",
                    "list[tuple[typing.Union[int,str]]]"
                ]
            }
        },
        "test_user_addr_mgr_basics": {
            "name": "test_user_addr_mgr_basics",
            "location": 175,
            "return": [
                "None"
            ],
            "arguments": {
                "user_addr_mgr": [],
                "dummy_matrix_client": [],
                "address_reachability": [
                    "str",
                    "list[]",
                    "list[str]",
                    "dict[str, list['WantedGallery']]",
                    "int"
                ],
                "user_presence": [
                    "bool",
                    "dict[str, U]"
                ]
            }
        },
        "test_user_addr_mgr_compound": {
            "name": "test_user_addr_mgr_compound",
            "location": 205,
            "return": [
                "None"
            ],
            "arguments": {
                "user_addr_mgr": [],
                "dummy_matrix_client": [],
                "address_reachability": [
                    "str",
                    "None",
                    "float",
                    "bool"
                ],
                "user_presence": []
            }
        },
        "test_user_addr_mgr_force": {
            "name": "test_user_addr_mgr_force",
            "location": 244,
            "return": [
                "None"
            ],
            "arguments": {
                "user_addr_mgr": [],
                "address_reachability": [
                    "str",
                    "set[str]",
                    "bool"
                ],
                "user_presence": [
                    "list[str]",
                    "None"
                ]
            }
        },
        "test_user_addr_mgr_fetch_presence": {
            "name": "test_user_addr_mgr_fetch_presence",
            "location": 267,
            "return": [
                "None"
            ],
            "arguments": {
                "user_addr_mgr": [],
                "dummy_matrix_client": [],
                "address_reachability": [
                    "str",
                    "None",
                    "float",
                    "bool"
                ],
                "user_presence": [
                    "int"
                ]
            }
        },
        "test_user_addr_mgr_fetch_presence_error": {
            "name": "test_user_addr_mgr_fetch_presence_error",
            "location": 288,
            "return": [
                "None"
            ],
            "arguments": {
                "user_addr_mgr": [],
                "address_reachability": [],
                "user_presence": [
                    "bool"
                ]
            }
        },
        "test_user_addr_mgr_fetch_misc": {
            "name": "test_user_addr_mgr_fetch_misc",
            "location": 300,
            "return": [
                "None"
            ],
            "arguments": {
                "user_addr_mgr": [],
                "dummy_matrix_client": [],
                "address_reachability": [
                    "str",
                    "None",
                    "float",
                    "bool"
                ],
                "user_presence": [
                    "int"
                ]
            }
        },
        "test_user_addr_mgr_populate": {
            "name": "test_user_addr_mgr_populate",
            "location": 319,
            "return": [
                "None"
            ],
            "arguments": {
                "user_addr_mgr": [],
                "address_reachability": [
                    "str",
                    "float"
                ],
                "user_presence": [
                    "bool",
                    "str"
                ]
            }
        },
        "test_user_addr_mgr_populate_force": {
            "name": "test_user_addr_mgr_populate_force",
            "location": 345,
            "return": [
                "None"
            ],
            "arguments": {
                "user_addr_mgr": [],
                "force": [
                    "str"
                ],
                "result": [
                    "str"
                ]
            }
        },
        "DummyApi.get_display_name": {
            "name": "get_display_name",
            "location": 17,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": [],
                "user_id": [
                    "int",
                    "str",
                    "list[int]",
                    "None"
                ]
            }
        },
        "DummyApi.get_avatar_url": {
            "name": "get_avatar_url",
            "location": 20,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": [],
                "user_id": [
                    "str",
                    "int",
                    "list[int]"
                ]
            }
        },
        "DummyApi.get_download_url": {
            "name": "get_download_url",
            "location": 23,
            "return": [
                "str",
                "typing.Any",
                "None",
                "int",
                "list[int]",
                "list[]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "typing.Any",
                    "None",
                    "int",
                    "list[int]",
                    "list[]"
                ]
            }
        },
        "DummyMatrixClient.__init__": {
            "name": "__init__",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "user_id": [
                    "int",
                    "str"
                ],
                "user_directory_content": [
                    "None",
                    "str",
                    "int"
                ]
            }
        },
        "DummyMatrixClient.add_presence_listener": {
            "name": "add_presence_listener",
            "location": 40,
            "return": [],
            "arguments": {
                "self": [],
                "callback": [
                    "int",
                    "str",
                    "None"
                ]
            }
        },
        "DummyMatrixClient.remove_presence_listener": {
            "name": "remove_presence_listener",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "uid": [
                    "bool",
                    "collections.abc.AsyncIterator",
                    "float",
                    "None"
                ]
            }
        },
        "DummyMatrixClient.search_user_directory": {
            "name": "search_user_directory",
            "location": 49,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "self": [],
                "term": [
                    "dict[, ]",
                    "list[dict[str, typing.Any]]",
                    "int",
                    "str"
                ]
            }
        },
        "DummyMatrixClient.get_user": {
            "name": "get_user",
            "location": 56,
            "return": [],
            "arguments": {
                "self": [],
                "user_id": [
                    "str",
                    "int"
                ]
            }
        },
        "DummyMatrixClient.get_user_presence": {
            "name": "get_user_presence",
            "location": 62,
            "return": [
                "int",
                "str",
                "dict[str, typing.Union[typing.Any,typing.Any,str]]",
                "dict[str, typing.Union[None,typing.Any,str]]",
                "None"
            ],
            "arguments": {
                "self": [],
                "user_id": [
                    "int",
                    "str"
                ]
            }
        },
        "DummyMatrixClient.trigger_presence_callback": {
            "name": "trigger_presence_callback",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "user_states": []
            }
        },
        "NonValidatingUserAddressManager._validate_userid_signature": {
            "name": "_validate_userid_signature",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "user": [
                    "str",
                    "None"
                ]
            }
        },
        "user_presence_callback._callback": {
            "name": "_callback",
            "location": 136,
            "return": [
                "None"
            ],
            "arguments": {
                "user": [],
                "presence": []
            }
        },
        "address_reachability_callback._callback": {
            "name": "_callback",
            "location": 144,
            "return": [
                "None"
            ],
            "arguments": {
                "address": [],
                "reachability": []
            }
        },
        "user_addr_mgr.fetch_user_presence": {
            "name": "fetch_user_presence",
            "location": 160,
            "return": [],
            "arguments": {
                "user_id": []
            }
        }
    },
    "raiden-services-master/tests/pathfinding/test_middleware.py": {
        "test_retries": {
            "name": "test_retries",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "make_post_request_mock": []
            }
        },
        "test_retries.quick_retry_middleware": {
            "name": "quick_retry_middleware",
            "location": 16,
            "return": [],
            "arguments": {
                "make_request": [],
                "web3": []
            }
        },
        "test_retries.side_effect": {
            "name": "side_effect",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "raiden-services-master/tests/pathfinding/test_model.py": {
        "test_feedback_token_validity": {
            "name": "test_feedback_token_validity",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "raiden-services-master/tests/pathfinding/test_payment.py": {
        "test_save_and_load_iou": {
            "name": "test_save_and_load_iou",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "pathfinding_service_mock": [],
                "make_iou": [
                    "str"
                ]
            }
        },
        "test_process_payment_errors": {
            "name": "test_process_payment_errors",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "pathfinding_service_web3_mock": [],
                "web3": [
                    "bool",
                    "float"
                ],
                "deposit_to_udc": [
                    "dict[str, typing.Any]",
                    "str"
                ],
                "create_account": [
                    "bool",
                    "typing.Type",
                    "str",
                    "typing.Iterable[str]",
                    "typing.Mapping"
                ],
                "get_private_key": [
                    "bool",
                    "typing.Type",
                    "str",
                    "typing.Iterable[str]",
                    "typing.Mapping"
                ],
                "make_iou": [
                    "bool",
                    "typing.Callable[, ]"
                ],
                "one_to_n_contract": [
                    "bool",
                    "typing.Type",
                    "str",
                    "typing.Iterable[str]",
                    "typing.Mapping"
                ]
            }
        },
        "test_process_payment": {
            "name": "test_process_payment",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {
                "pathfinding_service_web3_mock": [],
                "deposit_to_udc": [
                    "int",
                    "list[str]",
                    "str"
                ],
                "create_account": [
                    "typing.Callable[, ]",
                    "bool"
                ],
                "get_private_key": [
                    "typing.Callable[, ]",
                    "bool"
                ],
                "make_iou": [
                    "typing.Callable[, ]"
                ],
                "one_to_n_contract": [
                    "typing.Callable[, ]",
                    "bool"
                ],
                "web3": [
                    "typing.Callable[, ]"
                ]
            }
        },
        "test_process_payment_errors.test_payment": {
            "name": "test_payment",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "iou": [],
                "service_fee": [
                    "TokenAmount"
                ]
            }
        },
        "test_process_payment.process_payment": {
            "name": "process_payment",
            "location": 101,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "raiden-services-master/tests/pathfinding/test_service.py": {
        "test_prometheus_event_handling_no_exceptions": {
            "name": "test_prometheus_event_handling_no_exceptions",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "pathfinding_service_mock_empty": []
            }
        },
        "test_prometheus_event_handling_raise_exception": {
            "name": "test_prometheus_event_handling_raise_exception",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {
                "pathfinding_service_mock_empty": []
            }
        },
        "test_save_and_load_token_networks": {
            "name": "test_save_and_load_token_networks",
            "location": 126,
            "return": [
                "None"
            ],
            "arguments": {
                "pathfinding_service_mock_empty": []
            }
        },
        "test_crash": {
            "name": "test_crash",
            "location": 164,
            "return": [
                "None"
            ],
            "arguments": {
                "tmpdir": [
                    "str",
                    "typing.Mapping"
                ],
                "mockchain": [
                    "str",
                    "typing.Mapping"
                ]
            }
        },
        "test_token_network_created": {
            "name": "test_token_network_created",
            "location": 246,
            "return": [
                "None"
            ],
            "arguments": {
                "pathfinding_service_mock": []
            }
        },
        "setup_channel": {
            "name": "setup_channel",
            "location": 269,
            "return": [
                "None"
            ],
            "arguments": {
                "pathfinding_service_mock": [],
                "token_network_model": [
                    "int",
                    "str"
                ]
            }
        },
        "test_token_channel_opened": {
            "name": "test_token_channel_opened",
            "location": 282,
            "return": [
                "None"
            ],
            "arguments": {
                "pathfinding_service_mock": [],
                "token_network_model": [
                    "typing.Callable[, ]",
                    "bool"
                ]
            }
        },
        "test_token_channel_closed": {
            "name": "test_token_channel_closed",
            "location": 301,
            "return": [
                "None"
            ],
            "arguments": {
                "pathfinding_service_mock": [],
                "token_network_model": [
                    "dict[str, typing.Sequence[typing.Any]]"
                ]
            }
        },
        "test_token_channel_coop_settled": {
            "name": "test_token_channel_coop_settled",
            "location": 335,
            "return": [
                "None"
            ],
            "arguments": {
                "pathfinding_service_mock": [],
                "token_network_model": [
                    "dict[str, typing.Sequence[typing.Any]]"
                ]
            }
        },
        "test_update_fee": {
            "name": "test_update_fee",
            "location": 369,
            "return": [
                "None"
            ],
            "arguments": {
                "order": [
                    "bool"
                ],
                "pathfinding_service_mock": [],
                "token_network_model": []
            }
        },
        "test_unhandled_message": {
            "name": "test_unhandled_message",
            "location": 420,
            "return": [
                "None"
            ],
            "arguments": {
                "pathfinding_service_mock": [],
                "log": [
                    "typing.Callable[, ]"
                ]
            }
        },
        "test_logging_processor": {
            "name": "test_logging_processor",
            "location": 445,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_crash.new_service": {
            "name": "new_service",
            "location": 204,
            "return": [
                "PathfindingService"
            ],
            "arguments": {
                "filename": []
            }
        }
    },
    "raiden-services-master/tests/pathfinding/test_token_network.py": {
        "test_tn_idempotency_of_channel_openings": {
            "name": "test_tn_idempotency_of_channel_openings",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "token_network_model": [],
                "addresses": [
                    "list[raiden.utils.Address]"
                ]
            }
        },
        "test_tn_multiple_channels_for_two_participants_opened": {
            "name": "test_tn_multiple_channels_for_two_participants_opened",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "token_network_model": [],
                "addresses": [
                    "list[raiden.utils.Address]"
                ]
            }
        },
        "test_graph_pruning": {
            "name": "test_graph_pruning",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_path_without_capacity": {
            "name": "test_path_without_capacity",
            "location": 97,
            "return": [
                "None"
            ],
            "arguments": {
                "token_network_model": [],
                "addresses": [
                    "list[raiden.utils.Address]",
                    "bytes"
                ]
            }
        },
        "test_check_path_request_errors": {
            "name": "test_check_path_request_errors",
            "location": 123,
            "return": [
                "None"
            ],
            "arguments": {
                "token_network_model": [],
                "addresses": [
                    "list[raiden.utils.Address]",
                    "str"
                ]
            }
        }
    },
    "raiden-services-master/tests/pathfinding/utils.py": {
        "get_user_id_from_address": {
            "name": "get_user_id_from_address",
            "location": 21,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "address": [
                    "str",
                    "dict[str, str]",
                    "dict[int, set[str]]",
                    "bool"
                ]
            }
        },
        "get_address_metadata": {
            "name": "get_address_metadata",
            "location": 25,
            "return": [
                "dict[typing.Text, None]"
            ],
            "arguments": {
                "address": [
                    "bool"
                ]
            }
        },
        "SimpleReachabilityContainer.__init__": {
            "name": "__init__",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "reachabilities": []
            }
        },
        "SimpleReachabilityContainer.known_addresses": {
            "name": "known_addresses",
            "location": 45,
            "return": [
                "set[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SimpleReachabilityContainer.get_address_reachability": {
            "name": "get_address_reachability",
            "location": 48,
            "return": [],
            "arguments": {
                "self": [],
                "address": [
                    "list[dict[str, typing.Any]]",
                    "str",
                    "dict[int, dict[, ]]",
                    "list[str]",
                    "int"
                ]
            }
        },
        "SimpleReachabilityContainer.get_address_reachability_state": {
            "name": "get_address_reachability_state",
            "location": 51,
            "return": [
                "ReachabilityState"
            ],
            "arguments": {
                "self": [],
                "address": [
                    "int"
                ]
            }
        },
        "SimpleReachabilityContainer.seen_offline_at": {
            "name": "seen_offline_at",
            "location": 57,
            "return": [],
            "arguments": {
                "self": [],
                "address": [
                    "str",
                    "int"
                ]
            }
        },
        "SimpleReachabilityContainer.get_userid_presence": {
            "name": "get_userid_presence",
            "location": 62,
            "return": [],
            "arguments": {
                "self": [],
                "user_id": [
                    "str",
                    "int"
                ]
            }
        },
        "SimpleReachabilityContainer.get_userids_for_address": {
            "name": "get_userids_for_address",
            "location": 72,
            "return": [],
            "arguments": {
                "self": [],
                "address": [
                    "str",
                    "bytes"
                ]
            }
        },
        "SimpleReachabilityContainer.get_address_capabilities": {
            "name": "get_address_capabilities",
            "location": 76,
            "return": [],
            "arguments": {
                "self": [],
                "address": [
                    "str",
                    "bool"
                ]
            }
        }
    },
    "raiden-services-master/tests/pathfinding/__init__.py": {},
    "raiden-services-master/tests/pathfinding/fixtures/accounts.py": {
        "private_keys": {
            "name": "private_keys",
            "location": 14,
            "return": [
                "list[PrivateKey]"
            ],
            "arguments": {}
        },
        "addresses": {
            "name": "addresses",
            "location": 20,
            "return": [
                "list[]"
            ],
            "arguments": {
                "private_keys": [
                    "bytes"
                ]
            }
        }
    },
    "raiden-services-master/tests/pathfinding/fixtures/api.py": {
        "api_url": {
            "name": "api_url",
            "location": 17,
            "return": [
                "str"
            ],
            "arguments": {
                "free_port": [
                    "int",
                    "str"
                ]
            }
        },
        "api_sut": {
            "name": "api_sut",
            "location": 22,
            "return": [
                "typing.Generator[PFSApi]"
            ],
            "arguments": {
                "pathfinding_service_mock": [],
                "reachability_state": [],
                "free_port": [
                    "int",
                    "str"
                ],
                "populate_token_network_case_1": [
                    "bool",
                    "str",
                    "None",
                    "typing.Callable[str, None]"
                ]
            }
        },
        "api_sut_with_debug": {
            "name": "api_sut_with_debug",
            "location": 45,
            "return": [
                "typing.Generator[PFSApi]"
            ],
            "arguments": {
                "pathfinding_service_mock": [
                    "float",
                    "dict[str, str]"
                ],
                "reachability_state": [],
                "free_port": [
                    "int",
                    "str",
                    "dict[str, typing.Any]"
                ],
                "populate_token_network_case_1": [
                    "bool",
                    "list[dict[, ]]"
                ]
            }
        }
    },
    "raiden-services-master/tests/pathfinding/fixtures/iou.py": {
        "make_iou": {
            "name": "make_iou",
            "location": 14,
            "return": [],
            "arguments": {
                "one_to_n_contract": [
                    "int",
                    "list[int]",
                    "float"
                ]
            }
        },
        "make_iou.f": {
            "name": "f",
            "location": 17,
            "return": [],
            "arguments": {
                "sender_priv_key": [],
                "receiver": [],
                "amount": [
                    "int"
                ],
                "claimable_until": [],
                "one_to_n_address": [],
                "chain_id": [
                    "ChainID"
                ]
            }
        }
    },
    "raiden-services-master/tests/pathfinding/fixtures/network_service.py": {
        "channel_descriptions_case_1": {
            "name": "channel_descriptions_case_1",
            "location": 37,
            "return": [
                "list[tuple[int]]"
            ],
            "arguments": {}
        },
        "channel_descriptions_case_2": {
            "name": "channel_descriptions_case_2",
            "location": 77,
            "return": [
                "list[tuple[int]]"
            ],
            "arguments": {}
        },
        "channel_descriptions_case_3": {
            "name": "channel_descriptions_case_3",
            "location": 117,
            "return": [
                "list[tuple[int]]"
            ],
            "arguments": {}
        },
        "populate_token_network": {
            "name": "populate_token_network",
            "location": 166,
            "return": [],
            "arguments": {}
        },
        "populate_token_network_case_1": {
            "name": "populate_token_network_case_1",
            "location": 244,
            "return": [
                "None"
            ],
            "arguments": {
                "populate_token_network": [
                    "list[raiden.utils.Address]",
                    "typing.Callable[, ]",
                    "list[]"
                ],
                "token_network_model": [
                    "list[raiden.utils.Address]",
                    "typing.Callable[, ]",
                    "list[]"
                ],
                "reachability_state": [
                    "list[raiden.utils.Address]",
                    "typing.Callable[, ]",
                    "list[]"
                ],
                "addresses": [
                    "list[raiden.utils.Address]",
                    "typing.Callable[, ]",
                    "list[]"
                ],
                "channel_descriptions_case_1": [
                    "list[raiden.utils.Address]",
                    "typing.Callable[, ]",
                    "list[]"
                ]
            }
        },
        "populate_token_network_case_2": {
            "name": "populate_token_network_case_2",
            "location": 257,
            "return": [
                "None"
            ],
            "arguments": {
                "populate_token_network": [
                    "list[raiden.utils.Address]",
                    "typing.Callable[, ]",
                    "list[]"
                ],
                "token_network_model": [
                    "list[raiden.utils.Address]",
                    "typing.Callable[, ]",
                    "list[]"
                ],
                "reachability_state": [
                    "list[raiden.utils.Address]",
                    "typing.Callable[, ]",
                    "list[]"
                ],
                "addresses": [
                    "list[raiden.utils.Address]",
                    "typing.Callable[, ]",
                    "list[]"
                ],
                "channel_descriptions_case_2": [
                    "list[raiden.utils.Address]",
                    "typing.Callable[, ]",
                    "list[]"
                ]
            }
        },
        "populate_token_network_case_3": {
            "name": "populate_token_network_case_3",
            "location": 270,
            "return": [
                "None"
            ],
            "arguments": {
                "populate_token_network": [
                    "list[raiden.utils.Address]",
                    "typing.Callable[, ]",
                    "list[]"
                ],
                "token_network_model": [
                    "list[raiden.utils.Address]",
                    "typing.Callable[, ]",
                    "list[]"
                ],
                "reachability_state": [
                    "list[raiden.utils.Address]",
                    "typing.Callable[, ]",
                    "list[]"
                ],
                "addresses": [
                    "list[raiden.utils.Address]",
                    "typing.Callable[, ]",
                    "list[]"
                ],
                "channel_descriptions_case_3": [
                    "list[raiden.utils.Address]",
                    "typing.Callable[, ]",
                    "list[]"
                ]
            }
        },
        "pathfinding_service_mock_empty": {
            "name": "pathfinding_service_mock_empty",
            "location": 283,
            "return": [
                "typing.Generator[PathfindingService]"
            ],
            "arguments": {}
        },
        "pathfinding_service_mock": {
            "name": "pathfinding_service_mock",
            "location": 312,
            "return": [
                "typing.Generator[typing.Union[float,typing.Callable[, ]]]"
            ],
            "arguments": {
                "token_network_model": [
                    "float",
                    "typing.Callable[, ]"
                ],
                "pathfinding_service_mock_empty": [
                    "float",
                    "typing.Callable[, ]"
                ]
            }
        },
        "pathfinding_service_web3_mock": {
            "name": "pathfinding_service_web3_mock",
            "location": 328,
            "return": [
                "typing.Generator[PathfindingService]"
            ],
            "arguments": {
                "web3": [
                    "int",
                    "str"
                ],
                "user_deposit_contract": [
                    "int",
                    "str"
                ],
                "get_private_key": [
                    "int",
                    "str"
                ],
                "create_service_account": [
                    "str",
                    "dict[, ]",
                    "int",
                    "None"
                ]
            }
        },
        "populate_token_network_random": {
            "name": "populate_token_network_random",
            "location": 353,
            "return": [
                "None"
            ],
            "arguments": {
                "token_network_model": [],
                "private_keys": [
                    "list[str]",
                    "bytes",
                    "int"
                ]
            }
        },
        "populate_token_network.populate_token_network": {
            "name": "populate_token_network",
            "location": 168,
            "return": [],
            "arguments": {
                "token_network": [],
                "reachability_state": [],
                "addresses": [],
                "channel_descriptions": []
            }
        }
    },
    "raiden-services-master/tests/pathfinding/fixtures/__init__.py": {
        "token_network_model": {
            "name": "token_network_model",
            "location": 15,
            "return": [
                "TokenNetwork"
            ],
            "arguments": {}
        },
        "reachability_state": {
            "name": "reachability_state",
            "location": 20,
            "return": [
                "SimpleReachabilityContainer"
            ],
            "arguments": {}
        }
    }
}
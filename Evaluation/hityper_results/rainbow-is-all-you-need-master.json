{
    "rainbow-is-all-you-need-master/segment_tree.py": {
        "SegmentTree.__init__": {
            "name": "__init__",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "capacity": [
                    "float",
                    "int"
                ],
                "operation": [
                    "bool",
                    "list[str]"
                ],
                "init_value": [
                    "int",
                    "float",
                    "set[]",
                    "typing.Callable[list[], bool]"
                ]
            }
        },
        "SegmentTree._operate_helper": {
            "name": "_operate_helper",
            "location": 37,
            "return": [],
            "arguments": {
                "self": [],
                "start": [
                    "int"
                ],
                "end": [
                    "int",
                    "float"
                ],
                "node": [
                    "int"
                ],
                "node_start": [
                    "int"
                ],
                "node_end": [
                    "int"
                ]
            }
        },
        "SegmentTree.operate": {
            "name": "operate",
            "location": 55,
            "return": [],
            "arguments": {
                "self": [],
                "start": [
                    "int"
                ],
                "end": [
                    "int"
                ]
            }
        },
        "SegmentTree.__setitem__": {
            "name": "__setitem__",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "idx": [
                    "str",
                    "typing.Callable[, ]"
                ],
                "val": [
                    "int",
                    "str",
                    "dict[, ]",
                    "set[]",
                    "typing.IO"
                ]
            }
        },
        "SegmentTree.__getitem__": {
            "name": "__getitem__",
            "location": 73,
            "return": [],
            "arguments": {
                "self": [],
                "idx": [
                    "int",
                    "dict[str, typing.Any]",
                    "str"
                ]
            }
        },
        "SumSegmentTree.__init__": {
            "name": "__init__",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "capacity": [
                    "typing.IO",
                    "list['Node']"
                ]
            }
        },
        "SumSegmentTree.sum": {
            "name": "sum",
            "location": 99,
            "return": [],
            "arguments": {
                "self": [],
                "start": [
                    "int"
                ],
                "end": [
                    "int"
                ]
            }
        },
        "SumSegmentTree.retrieve": {
            "name": "retrieve",
            "location": 103,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "upperbound": [
                    "str",
                    "tuple['cirq.Qid']"
                ]
            }
        },
        "MinSegmentTree.__init__": {
            "name": "__init__",
            "location": 129,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "capacity": [
                    "int",
                    "float",
                    "dict[, ]"
                ]
            }
        },
        "MinSegmentTree.min": {
            "name": "min",
            "location": 140,
            "return": [],
            "arguments": {
                "self": [],
                "start": [
                    "int"
                ],
                "end": [
                    "int"
                ]
            }
        }
    }
}
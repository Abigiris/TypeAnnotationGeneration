{
    "read-it-master/backend/app.py": {},
    "read-it-master/backend/make_doc.py": {
        "make_doc": {
            "name": "make_doc",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "directory": [
                    "str",
                    "int",
                    "list[str]"
                ]
            }
        }
    },
    "read-it-master/backend/runtests.py": {
        "run_tests": {
            "name": "run_tests",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "read-it-master/backend/wsgi.py": {},
    "read-it-master/backend/readit/components.py": {
        "User.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "id_": [
                    "str",
                    "int",
                    "typing.Sequence[str]"
                ]
            }
        },
        "User.from_token": {
            "name": "from_token",
            "location": 18,
            "return": [],
            "arguments": {
                "cls": [
                    "str",
                    "typing.Type",
                    "dict[str, typing.Any]",
                    "bytes"
                ],
                "token": [
                    "dict[str, typing.Any]",
                    "typing.Callable[[], typing.Any]",
                    "dict[, ]"
                ]
            }
        },
        "User.as_token": {
            "name": "as_token",
            "location": 22,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UserComponent.can_handle_parameter": {
            "name": "can_handle_parameter",
            "location": 30,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "parameter": [
                    "typing.Iterable[bytes]",
                    "int"
                ]
            }
        },
        "UserComponent.resolve": {
            "name": "resolve",
            "location": 33,
            "return": [],
            "arguments": {
                "self": [],
                "authentication": [
                    "int",
                    "typing.Type",
                    "str",
                    "None"
                ]
            }
        }
    },
    "read-it-master/backend/readit/helpers.py": {
        "sliced": {
            "name": "sliced",
            "location": 4,
            "return": [],
            "arguments": {
                "seq": [
                    "int",
                    "None",
                    "float",
                    "typing.Iterable[typing.Any]"
                ],
                "n": [
                    "int",
                    "None",
                    "float",
                    "typing.Iterable[typing.Any]"
                ]
            }
        },
        "classproperty.__init__": {
            "name": "__init__",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "f": [
                    "typing.Callable[[], bool]",
                    "bool",
                    "list[tuple[typing.Union[str,str,str,str]]]",
                    "list[str]"
                ]
            }
        },
        "classproperty.__get__": {
            "name": "__get__",
            "location": 31,
            "return": [],
            "arguments": {
                "self": [],
                "instance": [
                    "typing.Type"
                ],
                "owner": [
                    "str",
                    "bytes"
                ]
            }
        }
    },
    "read-it-master/backend/readit/sentry.py": {
        "init_sentry": {
            "name": "init_sentry",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "read-it-master/backend/readit/settings.py": {},
    "read-it-master/backend/readit/__init__.py": {},
    "read-it-master/backend/readit/books/convertor.py": {
        "ConverterPluginType.convert": {
            "name": "convert",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "content": [
                    "bytes",
                    "str",
                    "int",
                    "typing.Container",
                    "None",
                    "list[str]",
                    "set[str]"
                ]
            }
        },
        "BleachSanitizer.sanitize": {
            "name": "sanitize",
            "location": 41,
            "return": [],
            "arguments": {
                "self": [],
                "text": [
                    "str",
                    "bytes"
                ]
            }
        },
        "Converter.__init__": {
            "name": "__init__",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "converter_type": [
                    "str",
                    "typing.Type",
                    "typing.Callable[str, str]",
                    "None",
                    "typing.IO"
                ]
            }
        },
        "Converter._sanitize": {
            "name": "_sanitize",
            "location": 65,
            "return": [],
            "arguments": {
                "cls": [
                    "str",
                    "int",
                    "tuple[typing.Union[int,int]]"
                ],
                "text": [
                    "str",
                    "int",
                    "tuple[typing.Union[int,int]]"
                ]
            }
        },
        "Converter.add_converter": {
            "name": "add_converter",
            "location": 70,
            "return": [],
            "arguments": {
                "cls": [
                    "str",
                    "list[str]",
                    "bool",
                    "dict[, ]"
                ],
                "fmt": [
                    "str",
                    "list[str]",
                    "bool",
                    "dict[, ]"
                ]
            }
        },
        "Converter.convert": {
            "name": "convert",
            "location": 78,
            "return": [
                "list[typing.Text]"
            ],
            "arguments": {
                "self": [],
                "content": [
                    "str",
                    "typing.IO",
                    "dict[str, float]",
                    "bool"
                ]
            }
        },
        "Converter.supported_formats": {
            "name": "supported_formats",
            "location": 84,
            "return": [
                "list[]"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "typing.Type",
                    "dict[, ]",
                    "Exception"
                ]
            }
        },
        "_TextConverter._get_encoding": {
            "name": "_get_encoding",
            "location": 93,
            "return": [],
            "arguments": {
                "content": [
                    "bytes",
                    "str",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "_TextConverter._add_html_tags": {
            "name": "_add_html_tags",
            "location": 104,
            "return": [],
            "arguments": {
                "text": [
                    "str",
                    "int"
                ]
            }
        },
        "_TextConverter.convert": {
            "name": "convert",
            "location": 108,
            "return": [
                "list[]"
            ],
            "arguments": {
                "cls": [],
                "content": [
                    "str",
                    "None"
                ]
            }
        },
        "_PDFConverter._extract_body": {
            "name": "_extract_body",
            "location": 121,
            "return": [
                "bytes"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "typing.Pattern",
                    "bool"
                ],
                "text": [
                    "str",
                    "typing.Pattern",
                    "bool"
                ]
            }
        },
        "_PDFConverter._extract_content": {
            "name": "_extract_content",
            "location": 128,
            "return": [],
            "arguments": {
                "cls": [
                    "str",
                    "None"
                ],
                "text": [
                    "bytes",
                    "str"
                ],
                "to": [
                    "int",
                    "str"
                ]
            }
        },
        "_PDFConverter._extract_images_content": {
            "name": "_extract_images_content",
            "location": 144,
            "return": [
                "dict[bytes, ]"
            ],
            "arguments": {
                "path": [
                    "str"
                ]
            }
        },
        "_PDFConverter._insert_images": {
            "name": "_insert_images",
            "location": 154,
            "return": [
                "str",
                "bytes"
            ],
            "arguments": {
                "html": [
                    "bytes",
                    "str"
                ],
                "images": [
                    "dict[bytes, bytes]",
                    "dict[str, set[str]]",
                    "dict[, ]",
                    "dict[str, float]"
                ]
            }
        },
        "_PDFConverter._split_html": {
            "name": "_split_html",
            "location": 162,
            "return": [
                "list[str]"
            ],
            "arguments": {
                "html": [
                    "str"
                ]
            }
        },
        "_PDFConverter.convert": {
            "name": "convert",
            "location": 166,
            "return": [],
            "arguments": {
                "cls": [
                    "str",
                    "memoryview",
                    "list[str]",
                    "bytes"
                ],
                "data": [
                    "bytes",
                    "str"
                ]
            }
        },
        "_EpubConverter._extract_zip_content": {
            "name": "_extract_zip_content",
            "location": 182,
            "return": [
                "tuple[list[]]"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "list[str]",
                    "typing.Callable[, ]",
                    "typing.IO"
                ],
                "stream": [
                    "str",
                    "None"
                ]
            }
        },
        "_EpubConverter._extract_body": {
            "name": "_extract_body",
            "location": 198,
            "return": [
                "bytes"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "typing.Pattern",
                    "bool"
                ],
                "text": [
                    "str",
                    "typing.Pattern",
                    "bool"
                ]
            }
        },
        "_EpubConverter._images_to_base64_url": {
            "name": "_images_to_base64_url",
            "location": 205,
            "return": [
                "list[tuple[]]"
            ],
            "arguments": {
                "images": [
                    "str"
                ]
            }
        },
        "_EpubConverter._replace_images": {
            "name": "_replace_images",
            "location": 212,
            "return": [
                "str"
            ],
            "arguments": {
                "content": [
                    "str"
                ],
                "images_urls": [
                    "list[tuple[typing.Union[bytes,bytes]]]",
                    "list[]",
                    "str"
                ]
            }
        },
        "_EpubConverter._extract_pages": {
            "name": "_extract_pages",
            "location": 220,
            "return": [
                "list[]"
            ],
            "arguments": {
                "cls": [],
                "data": [
                    "bytes",
                    "str",
                    "int",
                    "typing.Iterable[int]"
                ]
            }
        },
        "_EpubConverter.convert": {
            "name": "convert",
            "location": 231,
            "return": [
                "list[]"
            ],
            "arguments": {
                "cls": [],
                "data": [
                    "bytes",
                    "typing.Type",
                    "list[]",
                    "int"
                ]
            }
        },
        "BleachSanitizer.BlackList.__contains__": {
            "name": "__contains__",
            "location": 35,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "item": []
            }
        },
        "Converter.add_converter.wrapper": {
            "name": "wrapper",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "converter": []
            }
        }
    },
    "read-it-master/backend/readit/books/models.py": {
        "Book.get_user_book": {
            "name": "get_user_book",
            "location": 35,
            "return": [],
            "arguments": {
                "cls": [
                    "str",
                    "int"
                ],
                "id_": [
                    "str",
                    "int"
                ],
                "owner_id": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "read-it-master/backend/readit/books/routes.py": {},
    "read-it-master/backend/readit/books/schema.py": {},
    "read-it-master/backend/readit/books/views.py": {
        "list_books": {
            "name": "list_books",
            "location": 13,
            "return": [
                "list[BookNoContent]"
            ],
            "arguments": {
                "user": [
                    "str",
                    "typing.Iterable[str]"
                ]
            }
        },
        "get_book": {
            "name": "get_book",
            "location": 23,
            "return": [
                "BookContent"
            ],
            "arguments": {
                "book_id": [
                    "int",
                    "str",
                    "dict[, ]",
                    "float",
                    "None"
                ],
                "user": [
                    "int",
                    "str",
                    "dict[, ]",
                    "float",
                    "None"
                ]
            }
        },
        "update_book": {
            "name": "update_book",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "book_id": [
                    "str",
                    "dict[, ]",
                    "int"
                ],
                "r_data": [
                    "str",
                    "dict[, ]",
                    "None",
                    "typing.Type"
                ],
                "user": [
                    "str"
                ]
            }
        },
        "create_book": {
            "name": "create_book",
            "location": 44,
            "return": [
                "WithID"
            ],
            "arguments": {
                "book_data": [
                    "str",
                    "list[]",
                    "dict[str, typing.Any]"
                ],
                "user": [
                    "typing.Any",
                    "None",
                    "list[str]",
                    "dict[, ]"
                ]
            }
        },
        "delete_book": {
            "name": "delete_book",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "book_id": [
                    "str",
                    "int"
                ],
                "user": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "read-it-master/backend/readit/books/__init__.py": {},
    "read-it-master/backend/readit/db/setup.py": {
        "db_init": {
            "name": "db_init",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "read-it-master/backend/readit/db/__init__.py": {},
    "read-it-master/backend/readit/users/auth.py": {
        "AuthTypes.options": {
            "name": "options",
            "location": 21,
            "return": [
                "list[]"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "dict[str, str]",
                    "dict[, ]"
                ]
            }
        },
        "AuthClient.__init__": {
            "name": "__init__",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "service": [
                    "str",
                    "dict[str, typing.Any]"
                ],
                "code": [
                    "str",
                    "dict[str, typing.Any]"
                ],
                "redirect_url": [
                    "str",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "AuthClient.__getattr__": {
            "name": "__getattr__",
            "location": 31,
            "return": [],
            "arguments": {
                "self": [],
                "item": [
                    "str"
                ]
            }
        },
        "AuthClient.add_client": {
            "name": "add_client",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "str"
                ],
                "client_type": [
                    "str"
                ],
                "client": [
                    "str"
                ]
            }
        },
        "AuthClientBase.__init__": {
            "name": "__init__",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "code": [
                    "str",
                    "int"
                ],
                "redirect_url": [
                    "str",
                    "dict[, ]",
                    "None"
                ]
            }
        },
        "AuthClientBase.__init_subclass__": {
            "name": "__init_subclass__",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "dict[, ]",
                    "int"
                ]
            }
        },
        "VKClient.__init__": {
            "name": "__init__",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "code": [
                    "str",
                    "int",
                    "typing.Sequence[typing.Union[str,int]]",
                    "dict[str, str]"
                ],
                "redirect_url": [
                    "str",
                    "int",
                    "typing.Sequence[typing.Union[str,int]]",
                    "dict[str, str]"
                ]
            }
        },
        "VKClient._init_token": {
            "name": "_init_token",
            "location": 63,
            "return": [
                "tuple[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "VKClient.user": {
            "name": "user",
            "location": 78,
            "return": [
                "int",
                "str",
                "typing.Callable[, ]",
                "User"
            ],
            "arguments": {
                "self": []
            }
        },
        "GoogleClient.__init__": {
            "name": "__init__",
            "location": 102,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "code": [
                    "str",
                    "int",
                    "typing.Sequence[typing.Union[str,int]]",
                    "dict[str, str]"
                ],
                "redirect_url": [
                    "str",
                    "int",
                    "typing.Sequence[typing.Union[str,int]]",
                    "dict[str, str]"
                ]
            }
        },
        "GoogleClient._init_token": {
            "name": "_init_token",
            "location": 108,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GoogleClient._get_user": {
            "name": "_get_user",
            "location": 123,
            "return": [
                "User"
            ],
            "arguments": {
                "self": []
            }
        },
        "GithubClient.__init__": {
            "name": "__init__",
            "location": 144,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "code": [
                    "str",
                    "int",
                    "typing.Sequence[typing.Union[str,int]]",
                    "dict[str, str]"
                ],
                "redirect_url": [
                    "str",
                    "int",
                    "typing.Sequence[typing.Union[str,int]]",
                    "dict[str, str]"
                ]
            }
        },
        "GithubClient._init_token": {
            "name": "_init_token",
            "location": 150,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GithubClient._get_user": {
            "name": "_get_user",
            "location": 165,
            "return": [
                "User"
            ],
            "arguments": {
                "self": []
            }
        },
        "GuestClient.__init__": {
            "name": "__init__",
            "location": 179,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "code": [
                    "str",
                    "int",
                    "typing.Sequence[typing.Union[str,int]]",
                    "dict[str, str]"
                ],
                "redirect_url": [
                    "str",
                    "int",
                    "typing.Sequence[typing.Union[str,int]]",
                    "dict[str, str]"
                ]
            }
        },
        "GuestClient._get_user": {
            "name": "_get_user",
            "location": 186,
            "return": [
                "User"
            ],
            "arguments": {}
        }
    },
    "read-it-master/backend/readit/users/models.py": {
        "User.find_external": {
            "name": "find_external",
            "location": 20,
            "return": [],
            "arguments": {
                "cls": [
                    "str",
                    "int"
                ],
                "external_id": [
                    "str",
                    "int"
                ],
                "auth_type": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "read-it-master/backend/readit/users/routes.py": {},
    "read-it-master/backend/readit/users/schema.py": {},
    "read-it-master/backend/readit/users/views.py": {
        "auth_user": {
            "name": "auth_user",
            "location": 39,
            "return": [],
            "arguments": {
                "auth_service_name": [
                    "str",
                    "dict[, ]",
                    "dict[str, typing.Any]",
                    "typing.Type",
                    "None"
                ],
                "code": [
                    "str"
                ],
                "request": [
                    "str",
                    "None"
                ]
            }
        },
        "get_user": {
            "name": "get_user",
            "location": 76,
            "return": [
                "User"
            ],
            "arguments": {
                "user": []
            }
        }
    },
    "read-it-master/backend/readit/users/__init__.py": {},
    "read-it-master/backend/tests/conftest.py": {
        "test_db": {
            "name": "test_db",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "client": {
            "name": "client",
            "location": 19,
            "return": [],
            "arguments": {}
        },
        "user": {
            "name": "user",
            "location": 24,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {}
        },
        "book": {
            "name": "book",
            "location": 31,
            "return": [
                "typing.Generator[BookFactory]"
            ],
            "arguments": {
                "user": [
                    "dict[str, typing.Any]",
                    "str"
                ]
            }
        },
        "books_factory": {
            "name": "books_factory",
            "location": 38,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "user": [
                    "dict[, ]",
                    "dict[str, typing.Any]",
                    "str"
                ]
            }
        },
        "authorized_client": {
            "name": "authorized_client",
            "location": 55,
            "return": [
                "AuthClient"
            ],
            "arguments": {
                "user": [
                    "str",
                    "None",
                    "typing.Optional[]"
                ]
            }
        },
        "books_factory.make_books": {
            "name": "make_books",
            "location": 41,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "amount": [
                    "int"
                ]
            }
        },
        "authorized_client.add_auth_header": {
            "name": "add_auth_header",
            "location": 59,
            "return": [],
            "arguments": {
                "req": []
            }
        }
    },
    "read-it-master/backend/tests/stubs_factory.py": {},
    "read-it-master/backend/tests/test_books.py": {
        "test_create_book_validation_test": {
            "name": "test_create_book_validation_test",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {
                "authorized_client": []
            }
        },
        "test_create_book": {
            "name": "test_create_book",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "authorized_client": []
            }
        },
        "test_list_books": {
            "name": "test_list_books",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "authorized_client": [],
                "books_factory": [
                    "str"
                ]
            }
        },
        "test_create_book_invalid_format": {
            "name": "test_create_book_invalid_format",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "authorized_client": []
            }
        }
    }
}
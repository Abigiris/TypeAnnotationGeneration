{
    "registers-cli-master/setup.py": {},
    "registers-cli-master/registers/blob.py": {
        "Blob.__init__": {
            "name": "__init__",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "Blob.__hash__": {
            "name": "__hash__",
            "location": 27,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Blob.__eq__": {
            "name": "__eq__",
            "location": 30,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Blob.__repr__": {
            "name": "__repr__",
            "location": 33,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Blob.__iter__": {
            "name": "__iter__",
            "location": 36,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Blob.digest": {
            "name": "digest",
            "location": 39,
            "return": [
                "Hash"
            ],
            "arguments": {
                "self": []
            }
        },
        "Blob.to_json": {
            "name": "to_json",
            "location": 46,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Blob.to_dict": {
            "name": "to_dict",
            "location": 55,
            "return": [
                "dict[, ]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Blob.get": {
            "name": "get",
            "location": 62,
            "return": [],
            "arguments": {
                "self": [],
                "key": []
            }
        }
    },
    "registers-cli-master/registers/cli.py": {
        "cli": {
            "name": "cli",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "registers-cli-master/registers/core.py": {
        "format_timestamp": {
            "name": "format_timestamp",
            "location": 16,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "datetime": []
            }
        }
    },
    "registers-cli-master/registers/entry.py": {
        "Entry.__init__": {
            "name": "__init__",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [],
                "scope": [],
                "timestamp": [],
                "blob_hash": [],
                "position": [
                    "None"
                ]
            }
        },
        "Entry.headers": {
            "name": "headers",
            "location": 45,
            "return": [
                "list[typing.Text]"
            ],
            "arguments": {}
        },
        "Entry.__eq__": {
            "name": "__eq__",
            "location": 56,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Entry.__hash__": {
            "name": "__hash__",
            "location": 59,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Entry.__repr__": {
            "name": "__repr__",
            "location": 62,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Entry.digest": {
            "name": "digest",
            "location": 65,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Entry.to_json": {
            "name": "to_json",
            "location": 72,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Entry.to_dict": {
            "name": "to_dict",
            "location": 80,
            "return": [
                "dict[typing.Text, typing.Union[str,list[str]]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Entry.bytes": {
            "name": "bytes",
            "location": 93,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Entry.set_position": {
            "name": "set_position",
            "location": 107,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "number": []
            }
        },
        "Entry.position": {
            "name": "position",
            "location": 115,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Entry.key": {
            "name": "key",
            "location": 123,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Entry.scope": {
            "name": "scope",
            "location": 131,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Entry.timestamp": {
            "name": "timestamp",
            "location": 139,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Entry.blob_hash": {
            "name": "blob_hash",
            "location": 147,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "registers-cli-master/registers/exceptions.py": {
        "OrphanEntry.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "entry": [
                    "str",
                    "dict[str, typing.Any]",
                    "bool",
                    "dict[str, int]"
                ]
            }
        },
        "MissingEntryKey.__init__": {
            "name": "__init__",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MissingAttributeIdentifier.__init__": {
            "name": "__init__",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UnknownAttribute.__init__": {
            "name": "__init__",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "attr": [
                    "str",
                    "dict[, ]"
                ],
                "value": [
                    "str",
                    "dict[, ]"
                ]
            }
        },
        "MissingPrimaryKey.__init__": {
            "name": "__init__",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pk": [
                    "str",
                    "bytes",
                    "int",
                    "float"
                ],
                "value": [
                    "str",
                    "bytes",
                    "int",
                    "float"
                ]
            }
        },
        "CardinalityMismatch.__init__": {
            "name": "__init__",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "attr": [
                    "str",
                    "bool",
                    "dict[str, str]"
                ],
                "card": [
                    "str",
                    "bool",
                    "dict[str, str]"
                ],
                "value": [
                    "str",
                    "bool",
                    "dict[str, str]"
                ]
            }
        },
        "DuplicatedEntry.__init__": {
            "name": "__init__",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "bytes",
                    "str",
                    "int",
                    "list[dict[, ]]",
                    "typing.Hashable"
                ],
                "blob": []
            }
        },
        "InconsistentLog.__init__": {
            "name": "__init__",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "expected": [
                    "bytes",
                    "str",
                    "int"
                ],
                "actual": [
                    "bytes",
                    "str",
                    "int"
                ],
                "size": [
                    "bytes",
                    "str",
                    "int"
                ]
            }
        },
        "RepresentationError.__init__": {
            "name": "__init__",
            "location": 111,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "attr": [
                    "str",
                    "dict[str, typing.Any]",
                    "bool"
                ],
                "value": [
                    "str",
                    "dict[str, typing.Any]",
                    "bool"
                ],
                "datatype": [
                    "str",
                    "dict[str, typing.Any]",
                    "bool"
                ]
            }
        },
        "InvalidValue.__init__": {
            "name": "__init__",
            "location": 123,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "datatype": [
                    "str",
                    "int",
                    "typing.Sequence[str]",
                    "float"
                ],
                "value": [
                    "str",
                    "int"
                ]
            }
        },
        "InvalidValue.datatype": {
            "name": "datatype",
            "location": 132,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "InvalidValue.value": {
            "name": "value",
            "location": 138,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "InvalidKey.__init__": {
            "name": "__init__",
            "location": 149,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "dict[str, typing.Any]",
                    "int",
                    "list[str]",
                    "set[str]",
                    "str"
                ]
            }
        },
        "InvalidCurieValue.__init__": {
            "name": "__init__",
            "location": 160,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "float",
                    "str",
                    "int"
                ]
            }
        },
        "InvalidDatetimeValue.__init__": {
            "name": "__init__",
            "location": 169,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "float",
                    "str",
                    "int"
                ]
            }
        },
        "InvalidNameValue.__init__": {
            "name": "__init__",
            "location": 178,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "float",
                    "str",
                    "int"
                ]
            }
        },
        "InvalidHashValue.__init__": {
            "name": "__init__",
            "location": 187,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "float",
                    "str",
                    "int"
                ]
            }
        },
        "InvalidIntegerValue.__init__": {
            "name": "__init__",
            "location": 196,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "float",
                    "str",
                    "int"
                ]
            }
        },
        "InvalidPeriodValue.__init__": {
            "name": "__init__",
            "location": 205,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "float",
                    "str",
                    "int"
                ]
            }
        },
        "InvalidTimestampValue.__init__": {
            "name": "__init__",
            "location": 214,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "float",
                    "str",
                    "int"
                ]
            }
        },
        "InvalidUrlValue.__init__": {
            "name": "__init__",
            "location": 223,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "float",
                    "str",
                    "int"
                ]
            }
        }
    },
    "registers-cli-master/registers/hash.py": {
        "Hash.__init__": {
            "name": "__init__",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "algorithm": [],
                "digest": []
            }
        },
        "Hash.__hash__": {
            "name": "__hash__",
            "location": 28,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Hash.__eq__": {
            "name": "__eq__",
            "location": 31,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Hash.__repr__": {
            "name": "__repr__",
            "location": 35,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "Hash.algorithm": {
            "name": "algorithm",
            "location": 39,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Hash.digest": {
            "name": "digest",
            "location": 45,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "registers-cli-master/registers/log.py": {
        "collect": {
            "name": "collect",
            "location": 137,
            "return": [
                "dict[typing.Text, typing.Union[None,Log,list[]]]"
            ],
            "arguments": {
                "commands": [],
                "log": [
                    "None"
                ],
                "metalog": [
                    "None"
                ],
                "relaxed": [
                    "bool"
                ],
                "progress": [
                    "None"
                ]
            }
        },
        "slice": {
            "name": "slice",
            "location": 164,
            "return": [
                "list[]"
            ],
            "arguments": {
                "log": [],
                "start_position": []
            }
        },
        "_collect_command": {
            "name": "_collect_command",
            "location": 178,
            "return": [
                "None"
            ],
            "arguments": {
                "command": [],
                "data": [],
                "metadata": [],
                "blobs": [],
                "errors": [],
                "relaxed": []
            }
        },
        "_collect_entry": {
            "name": "_collect_entry",
            "location": 223,
            "return": [
                "tuple[typing.Optional[DuplicatedEntry]]",
                "tuple[None]"
            ],
            "arguments": {
                "entry": [],
                "record": []
            }
        },
        "Log.__init__": {
            "name": "__init__",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "entries": [
                    "None"
                ],
                "blobs": [
                    "None"
                ]
            }
        },
        "Log.__hash__": {
            "name": "__hash__",
            "location": 33,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Log.__eq__": {
            "name": "__eq__",
            "location": 36,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Log.digest": {
            "name": "digest",
            "location": 39,
            "return": [
                "Hash"
            ],
            "arguments": {
                "self": []
            }
        },
        "Log.byte_entries": {
            "name": "byte_entries",
            "location": 48,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Log.blobs": {
            "name": "blobs",
            "location": 60,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Log.entries": {
            "name": "entries",
            "location": 67,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Log.size": {
            "name": "size",
            "location": 74,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Log.is_empty": {
            "name": "is_empty",
            "location": 80,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Log.snapshot": {
            "name": "snapshot",
            "location": 84,
            "return": [
                "dict[, Record]"
            ],
            "arguments": {
                "self": [],
                "size": [
                    "None"
                ]
            }
        },
        "Log.trail": {
            "name": "trail",
            "location": 96,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": [],
                "key": [],
                "size": [
                    "None"
                ]
            }
        },
        "Log.stats": {
            "name": "stats",
            "location": 102,
            "return": [
                "dict[typing.Text, int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Log.insert": {
            "name": "insert",
            "location": 111,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "obj": []
            }
        },
        "Log.find": {
            "name": "find",
            "location": 129,
            "return": [],
            "arguments": {
                "self": [],
                "key": []
            }
        }
    },
    "registers-cli-master/registers/merkle.py": {
        "build_levels": {
            "name": "build_levels",
            "location": 94,
            "return": [
                "list[list[]]"
            ],
            "arguments": {
                "leaves": [],
                "fun": []
            }
        },
        "build_level": {
            "name": "build_level",
            "location": 125,
            "return": [
                "list[]"
            ],
            "arguments": {
                "level": [],
                "fun": []
            }
        },
        "hash_node": {
            "name": "hash_node",
            "location": 156,
            "return": [],
            "arguments": {
                "left": [],
                "right": [],
                "fun": []
            }
        },
        "hash_leaf": {
            "name": "hash_leaf",
            "location": 167,
            "return": [],
            "arguments": {
                "leaf": [],
                "fun": []
            }
        },
        "hash_empty": {
            "name": "hash_empty",
            "location": 178,
            "return": [],
            "arguments": {
                "fun": []
            }
        },
        "path": {
            "name": "path",
            "location": 189,
            "return": [
                "list[]"
            ],
            "arguments": {
                "tree": [],
                "node_index": [],
                "level": [
                    "int"
                ]
            }
        },
        "path_segment": {
            "name": "path_segment",
            "location": 228,
            "return": [
                "tuple[None]"
            ],
            "arguments": {
                "tree": [],
                "node_index": [],
                "last_node_index": [],
                "level": []
            }
        },
        "sibling": {
            "name": "sibling",
            "location": 251,
            "return": [
                "int"
            ],
            "arguments": {
                "node_index": []
            }
        },
        "is_right_child": {
            "name": "is_right_child",
            "location": 259,
            "return": [
                "bool"
            ],
            "arguments": {
                "node_index": []
            }
        },
        "parent": {
            "name": "parent",
            "location": 267,
            "return": [
                "int"
            ],
            "arguments": {
                "node_index": []
            }
        },
        "Tree.__init__": {
            "name": "__init__",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "leaves": []
            }
        },
        "Tree.root_hash": {
            "name": "root_hash",
            "location": 54,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Tree.leaves": {
            "name": "leaves",
            "location": 62,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Tree.levels": {
            "name": "levels",
            "location": 70,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Tree.height": {
            "name": "height",
            "location": 78,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Tree.width": {
            "name": "width",
            "location": 86,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "registers-cli-master/registers/patch.py": {
        "collect": {
            "name": "collect",
            "location": 121,
            "return": [
                "list[]"
            ],
            "arguments": {
                "primary_key": [],
                "blobs": [],
                "timestamp": []
            }
        },
        "Patch.__init__": {
            "name": "__init__",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "schema": [],
                "data": [],
                "timestamp": [
                    "None"
                ]
            }
        },
        "Patch.commands": {
            "name": "commands",
            "location": 71,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Patch.schema": {
            "name": "schema",
            "location": 79,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Patch.timestamp": {
            "name": "timestamp",
            "location": 87,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Patch.add": {
            "name": "add",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "blob": []
            }
        },
        "Patch.seal": {
            "name": "seal",
            "location": 103,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "start": [],
                "end": []
            }
        },
        "Patch.is_sealed": {
            "name": "is_sealed",
            "location": 112,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "registers-cli-master/registers/record.py": {
        "Record.__init__": {
            "name": "__init__",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "entry": [],
                "blob": []
            }
        },
        "Record.headers": {
            "name": "headers",
            "location": 31,
            "return": [
                "list[]"
            ],
            "arguments": {
                "schema": []
            }
        },
        "Record.__eq__": {
            "name": "__eq__",
            "location": 41,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Record.__repr__": {
            "name": "__repr__",
            "location": 44,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Record.to_json": {
            "name": "to_json",
            "location": 47,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Record.to_dict": {
            "name": "to_dict",
            "location": 56,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Record.entry": {
            "name": "entry",
            "location": 68,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Record.blob": {
            "name": "blob",
            "location": 76,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Record.get": {
            "name": "get",
            "location": 83,
            "return": [],
            "arguments": {
                "self": [],
                "key": []
            }
        }
    },
    "registers-cli-master/registers/register.py": {
        "Register.__init__": {
            "name": "__init__",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "commands": [
                    "None"
                ],
                "progress": [
                    "None"
                ]
            }
        },
        "Register._load_commands": {
            "name": "_load_commands",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "commands": [],
                "progress": []
            }
        },
        "Register._collect_basic_metadata": {
            "name": "_collect_basic_metadata",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Register._collect_update_date": {
            "name": "_collect_update_date",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Register.apply": {
            "name": "apply",
            "location": 63,
            "return": [],
            "arguments": {
                "self": [],
                "patch": []
            }
        },
        "Register._apply_commands": {
            "name": "_apply_commands",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cmds": []
            }
        },
        "Register.stats": {
            "name": "stats",
            "location": 86,
            "return": [
                "dict[typing.Text, ]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Register.uid": {
            "name": "uid",
            "location": 97,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Register.commands": {
            "name": "commands",
            "location": 105,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Register.log": {
            "name": "log",
            "location": 112,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Register.metalog": {
            "name": "metalog",
            "location": 120,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Register.records": {
            "name": "records",
            "location": 126,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Register.record": {
            "name": "record",
            "location": 133,
            "return": [],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "Register.trail": {
            "name": "trail",
            "location": 140,
            "return": [],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "Register.schema": {
            "name": "schema",
            "location": 147,
            "return": [
                "Schema"
            ],
            "arguments": {
                "self": []
            }
        },
        "Register.context": {
            "name": "context",
            "location": 162,
            "return": [
                "dict[typing.Text, int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Register.title": {
            "name": "title",
            "location": 189,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Register.description": {
            "name": "description",
            "location": 197,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Register.is_ready": {
            "name": "is_ready",
            "location": 206,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Register.is_empty": {
            "name": "is_empty",
            "location": 218,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "registers-cli-master/registers/schema.py": {
        "attribute": {
            "name": "attribute",
            "location": 145,
            "return": [
                "Attribute"
            ],
            "arguments": {
                "blob": []
            }
        },
        "string": {
            "name": "string",
            "location": 220,
            "return": [
                "Attribute"
            ],
            "arguments": {
                "uid": [],
                "description": [
                    "None"
                ]
            }
        },
        "string_set": {
            "name": "string_set",
            "location": 232,
            "return": [
                "Attribute"
            ],
            "arguments": {
                "uid": [],
                "description": [
                    "None"
                ]
            }
        },
        "integer": {
            "name": "integer",
            "location": 244,
            "return": [
                "Attribute"
            ],
            "arguments": {
                "uid": [],
                "description": [
                    "None"
                ]
            }
        },
        "integer_set": {
            "name": "integer_set",
            "location": 256,
            "return": [
                "Attribute"
            ],
            "arguments": {
                "uid": [],
                "description": [
                    "None"
                ]
            }
        },
        "curie": {
            "name": "curie",
            "location": 268,
            "return": [
                "Attribute"
            ],
            "arguments": {
                "uid": [],
                "description": [
                    "None"
                ]
            }
        },
        "curie_set": {
            "name": "curie_set",
            "location": 280,
            "return": [
                "Attribute"
            ],
            "arguments": {
                "uid": [],
                "description": [
                    "None"
                ]
            }
        },
        "datetime": {
            "name": "datetime",
            "location": 292,
            "return": [
                "Attribute"
            ],
            "arguments": {
                "uid": [],
                "description": [
                    "None"
                ]
            }
        },
        "datetime_set": {
            "name": "datetime_set",
            "location": 304,
            "return": [
                "Attribute"
            ],
            "arguments": {
                "uid": [],
                "description": [
                    "None"
                ]
            }
        },
        "name": {
            "name": "name",
            "location": 316,
            "return": [
                "Attribute"
            ],
            "arguments": {
                "uid": [],
                "description": [
                    "None"
                ]
            }
        },
        "name_set": {
            "name": "name_set",
            "location": 328,
            "return": [
                "Attribute"
            ],
            "arguments": {
                "uid": [],
                "description": [
                    "None"
                ]
            }
        },
        "hash": {
            "name": "hash",
            "location": 340,
            "return": [
                "Attribute"
            ],
            "arguments": {
                "uid": [],
                "description": [
                    "None"
                ]
            }
        },
        "hash_set": {
            "name": "hash_set",
            "location": 352,
            "return": [
                "Attribute"
            ],
            "arguments": {
                "uid": [],
                "description": [
                    "None"
                ]
            }
        },
        "period": {
            "name": "period",
            "location": 364,
            "return": [
                "Attribute"
            ],
            "arguments": {
                "uid": [],
                "description": [
                    "None"
                ]
            }
        },
        "period_set": {
            "name": "period_set",
            "location": 376,
            "return": [
                "Attribute"
            ],
            "arguments": {
                "uid": [],
                "description": [
                    "None"
                ]
            }
        },
        "text": {
            "name": "text",
            "location": 388,
            "return": [
                "Attribute"
            ],
            "arguments": {
                "uid": [],
                "description": [
                    "None"
                ]
            }
        },
        "text_set": {
            "name": "text_set",
            "location": 400,
            "return": [
                "Attribute"
            ],
            "arguments": {
                "uid": [],
                "description": [
                    "None"
                ]
            }
        },
        "timestamp": {
            "name": "timestamp",
            "location": 412,
            "return": [
                "Attribute"
            ],
            "arguments": {
                "uid": [],
                "description": [
                    "None"
                ]
            }
        },
        "timestamp_set": {
            "name": "timestamp_set",
            "location": 424,
            "return": [
                "Attribute"
            ],
            "arguments": {
                "uid": [],
                "description": [
                    "None"
                ]
            }
        },
        "url": {
            "name": "url",
            "location": 436,
            "return": [
                "Attribute"
            ],
            "arguments": {
                "uid": [],
                "description": [
                    "None"
                ]
            }
        },
        "url_set": {
            "name": "url_set",
            "location": 448,
            "return": [
                "Attribute"
            ],
            "arguments": {
                "uid": [],
                "description": [
                    "None"
                ]
            }
        },
        "Attribute.__init__": {
            "name": "__init__",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "uid": [],
                "datatype": [],
                "cardinality": [],
                "description": [
                    "None"
                ]
            }
        },
        "Attribute.headers": {
            "name": "headers",
            "location": 75,
            "return": [
                "list[typing.Text]"
            ],
            "arguments": {}
        },
        "Attribute.__eq__": {
            "name": "__eq__",
            "location": 85,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Attribute.__repr__": {
            "name": "__repr__",
            "location": 90,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Attribute.__iter__": {
            "name": "__iter__",
            "location": 93,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Attribute.to_dict": {
            "name": "to_dict",
            "location": 97,
            "return": [
                "dict[typing.Text, ]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Attribute.to_json": {
            "name": "to_json",
            "location": 111,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Attribute.to_blob": {
            "name": "to_blob",
            "location": 119,
            "return": [
                "Blob"
            ],
            "arguments": {
                "self": []
            }
        },
        "Attribute.uid": {
            "name": "uid",
            "location": 127,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Attribute.datatype": {
            "name": "datatype",
            "location": 133,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Attribute.cardinality": {
            "name": "cardinality",
            "location": 139,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Schema.__init__": {
            "name": "__init__",
            "location": 161,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "primary_key_id": [],
                "attrs": [
                    "None"
                ]
            }
        },
        "Schema.attributes": {
            "name": "attributes",
            "location": 166,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Schema.primary_key": {
            "name": "primary_key",
            "location": 173,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Schema.is_ready": {
            "name": "is_ready",
            "location": 179,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Schema.insert": {
            "name": "insert",
            "location": 189,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "attr": []
            }
        },
        "Schema.get": {
            "name": "get",
            "location": 199,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "uid": []
            }
        },
        "Schema.to_dict": {
            "name": "to_dict",
            "location": 209,
            "return": [
                "dict[typing.Text, list[]]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "registers-cli-master/registers/validator.py": {
        "validate": {
            "name": "validate",
            "location": 26,
            "return": [],
            "arguments": {
                "data": [],
                "schema": []
            }
        },
        "validate_value": {
            "name": "validate_value",
            "location": 61,
            "return": [],
            "arguments": {
                "value": [],
                "attr": []
            }
        },
        "validate_value_datatype": {
            "name": "validate_value_datatype",
            "location": 85,
            "return": [],
            "arguments": {
                "value": [],
                "datatype": []
            }
        },
        "validate_key": {
            "name": "validate_key",
            "location": 120,
            "return": [],
            "arguments": {
                "key": []
            }
        },
        "validate_curie": {
            "name": "validate_curie",
            "location": 128,
            "return": [],
            "arguments": {
                "value": []
            }
        },
        "validate_datetime": {
            "name": "validate_datetime",
            "location": 136,
            "return": [],
            "arguments": {
                "value": []
            }
        },
        "validate_name": {
            "name": "validate_name",
            "location": 144,
            "return": [],
            "arguments": {
                "value": []
            }
        },
        "validate_hash": {
            "name": "validate_hash",
            "location": 152,
            "return": [],
            "arguments": {
                "value": []
            }
        },
        "validate_integer": {
            "name": "validate_integer",
            "location": 160,
            "return": [],
            "arguments": {
                "value": []
            }
        },
        "validate_period": {
            "name": "validate_period",
            "location": 168,
            "return": [],
            "arguments": {
                "value": []
            }
        },
        "validate_timestamp": {
            "name": "validate_timestamp",
            "location": 181,
            "return": [],
            "arguments": {
                "value": []
            }
        },
        "validate_url": {
            "name": "validate_url",
            "location": 189,
            "return": [],
            "arguments": {
                "value": []
            }
        },
        "validate_string": {
            "name": "validate_string",
            "location": 205,
            "return": [],
            "arguments": {
                "_value": []
            }
        },
        "validate_text": {
            "name": "validate_text",
            "location": 213,
            "return": [],
            "arguments": {
                "_value": []
            }
        },
        "_is_valid_duration": {
            "name": "_is_valid_duration",
            "location": 221,
            "return": [],
            "arguments": {
                "value": []
            }
        },
        "_is_valid_period_part": {
            "name": "_is_valid_period_part",
            "location": 227,
            "return": [],
            "arguments": {
                "value": []
            }
        }
    },
    "registers-cli-master/registers/xsv.py": {
        "serialise": {
            "name": "serialise",
            "location": 28,
            "return": [],
            "arguments": {
                "stream": [],
                "obj": [],
                "headers": []
            }
        },
        "serialise_object": {
            "name": "serialise_object",
            "location": 51,
            "return": [],
            "arguments": {
                "obj": [],
                "headers": []
            }
        },
        "serialise_value": {
            "name": "serialise_value",
            "location": 100,
            "return": [],
            "arguments": {
                "value": []
            }
        },
        "quote_value": {
            "name": "quote_value",
            "location": 123,
            "return": [],
            "arguments": {
                "value": []
            }
        },
        "deserialise": {
            "name": "deserialise",
            "location": 145,
            "return": [],
            "arguments": {
                "buffer": [],
                "schema": []
            }
        },
        "deserialise_value": {
            "name": "deserialise_value",
            "location": 158,
            "return": [],
            "arguments": {
                "token": [],
                "cardinality": []
            }
        },
        "split_token": {
            "name": "split_token",
            "location": 201,
            "return": [],
            "arguments": {
                "token": []
            }
        },
        "coerce": {
            "name": "coerce",
            "location": 215,
            "return": [],
            "arguments": {
                "data": [],
                "schema": []
            }
        }
    },
    "registers-cli-master/registers/__init__.py": {},
    "registers-cli-master/registers/commands/blob.py": {
        "blob_group": {
            "name": "blob_group",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "list_command": {
            "name": "list_command",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "rsf_file": [],
                "output_format": []
            }
        },
        "validate_blob": {
            "name": "validate_blob",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "blob": [],
                "rsf_file": []
            }
        },
        "list_blobs": {
            "name": "list_blobs",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "rsf_file": [],
                "output_format": [
                    "None"
                ],
                "stream": []
            }
        }
    },
    "registers-cli-master/registers/commands/build.py": {
        "build_command": {
            "name": "build_command",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "rsf_files": [],
                "target": []
            }
        },
        "build_register": {
            "name": "build_register",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "rsf_file": [],
                "target": []
            }
        },
        "build_blobs": {
            "name": "build_blobs",
            "location": 130,
            "return": [
                "None"
            ],
            "arguments": {
                "path": [],
                "register": []
            }
        },
        "build_entries": {
            "name": "build_entries",
            "location": 154,
            "return": [
                "None"
            ],
            "arguments": {
                "path": [],
                "register": []
            }
        },
        "build_records": {
            "name": "build_records",
            "location": 175,
            "return": [
                "None"
            ],
            "arguments": {
                "path": [],
                "register": []
            }
        },
        "build_record_trail": {
            "name": "build_record_trail",
            "location": 199,
            "return": [
                "None"
            ],
            "arguments": {
                "path": [],
                "trail": []
            }
        },
        "build_commands": {
            "name": "build_commands",
            "location": 213,
            "return": [
                "None"
            ],
            "arguments": {
                "path": [],
                "register": []
            }
        },
        "build_context": {
            "name": "build_context",
            "location": 221,
            "return": [
                "None"
            ],
            "arguments": {
                "path": [],
                "register": []
            }
        },
        "build_archive": {
            "name": "build_archive",
            "location": 231,
            "return": [
                "None"
            ],
            "arguments": {
                "path": [],
                "register": []
            }
        },
        "build_openapi": {
            "name": "build_openapi",
            "location": 247,
            "return": [
                "None"
            ],
            "arguments": {
                "path": [],
                "register": []
            }
        },
        "build_cloudfoundry": {
            "name": "build_cloudfoundry",
            "location": 270,
            "return": [
                "None"
            ],
            "arguments": {
                "path": [],
                "register": []
            }
        },
        "build_docker": {
            "name": "build_docker",
            "location": 296,
            "return": [
                "None"
            ],
            "arguments": {
                "path": []
            }
        },
        "build_lua_resources": {
            "name": "build_lua_resources",
            "location": 313,
            "return": [
                "None"
            ],
            "arguments": {
                "path": []
            }
        },
        "build_target_resource": {
            "name": "build_target_resource",
            "location": 325,
            "return": [
                "None"
            ],
            "arguments": {
                "name": [],
                "target": [],
                "path": []
            }
        },
        "_attr_schema": {
            "name": "_attr_schema",
            "location": 336,
            "return": [
                "dict[typing.Text, typing.Text]",
                "dict[typing.Text, typing.Union[typing.Text,dict[typing.Text, typing.Text]]]"
            ],
            "arguments": {
                "attribute": []
            }
        },
        "write_resource": {
            "name": "write_resource",
            "location": 343,
            "return": [
                "None"
            ],
            "arguments": {
                "path": [],
                "obj": [],
                "headers": []
            }
        }
    },
    "registers-cli-master/registers/commands/context.py": {
        "context_group": {
            "name": "context_group",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "show_command": {
            "name": "show_command",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "rsf_file": [],
                "output_format": []
            }
        },
        "create_command": {
            "name": "create_command",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {
                "key": [],
                "value": [],
                "rsf_file": [],
                "timestamp": [],
                "apply_flag": []
            }
        },
        "create_patch": {
            "name": "create_patch",
            "location": 130,
            "return": [
                "Patch"
            ],
            "arguments": {
                "key": [],
                "value": [],
                "timestamp": [],
                "register": []
            }
        },
        "description_patch": {
            "name": "description_patch",
            "location": 151,
            "return": [
                "list[]"
            ],
            "arguments": {
                "value": [],
                "timestamp": [],
                "register": []
            }
        },
        "context_patch": {
            "name": "context_patch",
            "location": 167,
            "return": [
                "list[]"
            ],
            "arguments": {
                "key": [],
                "value": [],
                "timestamp": []
            }
        }
    },
    "registers-cli-master/registers/commands/init.py": {
        "init_command": {
            "name": "init_command",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "name": [],
                "rsf_file": []
            }
        },
        "init_patch": {
            "name": "init_patch",
            "location": 51,
            "return": [
                "list[]"
            ],
            "arguments": {
                "name": []
            }
        },
        "gather_attributes": {
            "name": "gather_attributes",
            "location": 76,
            "return": [
                "list[]"
            ],
            "arguments": {
                "name": [],
                "timestamp": []
            }
        }
    },
    "registers-cli-master/registers/commands/patch.py": {
        "patch_group": {
            "name": "patch_group",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "create_command": {
            "name": "create_command",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "xsv_file": [],
                "rsf_file": [],
                "timestamp": [],
                "apply_flag": []
            }
        },
        "apply_command": {
            "name": "apply_command",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "patch_file": [],
                "rsf_file": []
            }
        },
        "create": {
            "name": "create",
            "location": 85,
            "return": [
                "Patch"
            ],
            "arguments": {
                "xsv_file": [],
                "rsf_file": [],
                "timestamp": [],
                "apply_flag": [
                    "bool"
                ]
            }
        },
        "apply": {
            "name": "apply",
            "location": 117,
            "return": [],
            "arguments": {
                "patch_file": [],
                "rsf_file": []
            }
        },
        "_apply": {
            "name": "_apply",
            "location": 139,
            "return": [],
            "arguments": {
                "patch": [],
                "rsf_file": []
            }
        }
    },
    "registers-cli-master/registers/commands/record.py": {
        "record_group": {
            "name": "record_group",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "list_command": {
            "name": "list_command",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "rsf_file": [],
                "output_format": []
            }
        },
        "show_command": {
            "name": "show_command",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {
                "key": [],
                "rsf_file": [],
                "output_format": []
            }
        }
    },
    "registers-cli-master/registers/commands/schema.py": {
        "schema_group": {
            "name": "schema_group",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "show_command": {
            "name": "show_command",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "rsf_file": [],
                "output_format": []
            }
        },
        "create_command": {
            "name": "create_command",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "attr_id": [],
                "value": [],
                "rsf_file": [],
                "timestamp": [],
                "apply_flag": []
            }
        },
        "display_attr": {
            "name": "display_attr",
            "location": 127,
            "return": [
                "None"
            ],
            "arguments": {
                "attr": [],
                "is_primary_key": []
            }
        },
        "patch_attr": {
            "name": "patch_attr",
            "location": 145,
            "return": [
                "list[]"
            ],
            "arguments": {
                "uid": [],
                "value": [],
                "timestamp": [],
                "register": []
            }
        }
    },
    "registers-cli-master/registers/commands/utils.py": {
        "error": {
            "name": "error",
            "location": 19,
            "return": [],
            "arguments": {
                "message": []
            }
        },
        "note": {
            "name": "note",
            "location": 33,
            "return": [],
            "arguments": {
                "message": []
            }
        },
        "success": {
            "name": "success",
            "location": 41,
            "return": [],
            "arguments": {
                "message": []
            }
        },
        "check_readiness": {
            "name": "check_readiness",
            "location": 49,
            "return": [],
            "arguments": {
                "register": []
            }
        },
        "serialise_json": {
            "name": "serialise_json",
            "location": 60,
            "return": [],
            "arguments": {
                "obj": [],
                "stream": [],
                "compact": []
            }
        },
        "progressbar": {
            "name": "progressbar",
            "location": 96,
            "return": [],
            "arguments": {
                "iterable": []
            }
        },
        "write_csv_resource": {
            "name": "write_csv_resource",
            "location": 115,
            "return": [],
            "arguments": {
                "path": [],
                "obj": [],
                "headers": []
            }
        },
        "write_json_resource": {
            "name": "write_json_resource",
            "location": 124,
            "return": [],
            "arguments": {
                "path": [],
                "obj": []
            }
        },
        "JsonEncoder.default": {
            "name": "default",
            "location": 83,
            "return": [],
            "arguments": {
                "self": [],
                "obj": []
            }
        }
    },
    "registers-cli-master/registers/commands/value.py": {
        "value_group": {
            "name": "value_group",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "validate_command": {
            "name": "validate_command",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "token": [],
                "datatype": []
            }
        }
    },
    "registers-cli-master/registers/commands/__init__.py": {},
    "registers-cli-master/registers/rsf/core.py": {
        "assert_root_hash": {
            "name": "assert_root_hash",
            "location": 81,
            "return": [
                "Command"
            ],
            "arguments": {
                "root_hash": []
            }
        },
        "add_item": {
            "name": "add_item",
            "location": 89,
            "return": [
                "Command"
            ],
            "arguments": {
                "blob": []
            }
        },
        "append_entry": {
            "name": "append_entry",
            "location": 97,
            "return": [
                "Command"
            ],
            "arguments": {
                "entry": []
            }
        },
        "Command.__init__": {
            "name": "__init__",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "action": [],
                "value": []
            }
        },
        "Command.__eq__": {
            "name": "__eq__",
            "location": 40,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Command.__repr__": {
            "name": "__repr__",
            "location": 44,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Command.action": {
            "name": "action",
            "location": 65,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Command.value": {
            "name": "value",
            "location": 73,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "registers-cli-master/registers/rsf/exceptions.py": {},
    "registers-cli-master/registers/rsf/parser.py": {
        "load": {
            "name": "load",
            "location": 24,
            "return": [],
            "arguments": {
                "original": []
            }
        },
        "parse": {
            "name": "parse",
            "location": 32,
            "return": [
                "list[]"
            ],
            "arguments": {
                "patch_lines": []
            }
        },
        "parse_command": {
            "name": "parse_command",
            "location": 40,
            "return": [
                "Command"
            ],
            "arguments": {
                "original": []
            }
        },
        "parse_blob": {
            "name": "parse_blob",
            "location": 73,
            "return": [
                "Blob"
            ],
            "arguments": {
                "original": []
            }
        },
        "parse_entry": {
            "name": "parse_entry",
            "location": 81,
            "return": [
                "Entry"
            ],
            "arguments": {
                "original": []
            }
        },
        "parse_hash": {
            "name": "parse_hash",
            "location": 96,
            "return": [
                "Hash"
            ],
            "arguments": {
                "original": []
            }
        }
    },
    "registers-cli-master/registers/rsf/__init__.py": {
        "read": {
            "name": "read",
            "location": 23,
            "return": [],
            "arguments": {
                "filepath": []
            }
        },
        "dump": {
            "name": "dump",
            "location": 35,
            "return": [
                "str"
            ],
            "arguments": {
                "commands": []
            }
        }
    },
    "registers-cli-master/tests/test_blob.py": {
        "test_digest": {
            "name": "test_digest",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_utf8_digest": {
            "name": "test_utf8_digest",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "registers-cli-master/tests/test_entry.py": {
        "test_json_repr": {
            "name": "test_json_repr",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "registers-cli-master/tests/test_log.py": {
        "country_rsf": {
            "name": "country_rsf",
            "location": 7,
            "return": [],
            "arguments": {}
        },
        "test_collect": {
            "name": "test_collect",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_collect_country": {
            "name": "test_collect_country",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "country_rsf": [
                    "str",
                    "int"
                ]
            }
        },
        "test_collect_duplicate": {
            "name": "test_collect_duplicate",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "registers-cli-master/tests/test_merkle.py": {
        "expected_height": {
            "name": "expected_height",
            "location": 7,
            "return": [
                "int"
            ],
            "arguments": {
                "n": [
                    "int"
                ]
            }
        },
        "test_empty": {
            "name": "test_empty",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_even_tree": {
            "name": "test_even_tree",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_tree_height": {
            "name": "test_tree_height",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "test_input": [
                    "typing.Callable[, ]",
                    "int",
                    "str",
                    "list[list[float]]",
                    "typing.Collection"
                ],
                "expected": [
                    "int",
                    "None"
                ]
            }
        },
        "test_root_hash": {
            "name": "test_root_hash",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "test_input": [
                    "str",
                    "bool",
                    "list[str]"
                ],
                "height": [
                    "int",
                    "float"
                ],
                "expected": [
                    "bool",
                    "str",
                    "dict[, ]",
                    "dict[str, typing.Any]",
                    "None"
                ]
            }
        },
        "test_entry_root_hash": {
            "name": "test_entry_root_hash",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "country_register": {
            "name": "country_register",
            "location": 80,
            "return": [
                "Register"
            ],
            "arguments": {}
        },
        "test_register_consistency": {
            "name": "test_register_consistency",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {
                "country_register": [
                    "str"
                ]
            }
        },
        "test_audit_path": {
            "name": "test_audit_path",
            "location": 114,
            "return": [
                "None"
            ],
            "arguments": {
                "idx": [
                    "str",
                    "bool"
                ],
                "size": [
                    "int"
                ],
                "expected": [
                    "str",
                    "None",
                    "int"
                ]
            }
        }
    },
    "registers-cli-master/tests/test_patch.py": {
        "fec_register": {
            "name": "fec_register",
            "location": 7,
            "return": [
                "Register"
            ],
            "arguments": {}
        },
        "fec_old_patch": {
            "name": "fec_old_patch",
            "location": 16,
            "return": [],
            "arguments": {}
        },
        "test_patch": {
            "name": "test_patch",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_regression_fec_patch": {
            "name": "test_regression_fec_patch",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "fec_register": [],
                "fec_old_patch": [
                    "str",
                    "bool"
                ]
            }
        }
    },
    "registers-cli-master/tests/test_record.py": {
        "test_json_repr": {
            "name": "test_json_repr",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "registers-cli-master/tests/test_register.py": {
        "country_rsf": {
            "name": "country_rsf",
            "location": 8,
            "return": [],
            "arguments": {}
        },
        "country_register": {
            "name": "country_register",
            "location": 14,
            "return": [
                "Register"
            ],
            "arguments": {}
        },
        "test_load_commands": {
            "name": "test_load_commands",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_collect_country": {
            "name": "test_collect_country",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "country_register": [
                    "str",
                    "float"
                ]
            }
        },
        "test_empty_records": {
            "name": "test_empty_records",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_country_records": {
            "name": "test_country_records",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "country_register": []
            }
        },
        "test_country_schema": {
            "name": "test_country_schema",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "country_register": []
            }
        },
        "test_trail": {
            "name": "test_trail",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "country_register": []
            }
        },
        "test_record": {
            "name": "test_record",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {
                "country_register": []
            }
        },
        "test_patch_country": {
            "name": "test_patch_country",
            "location": 99,
            "return": [
                "None"
            ],
            "arguments": {
                "country_register": []
            }
        }
    },
    "registers-cli-master/tests/test_rsf.py": {
        "test_serde": {
            "name": "test_serde",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "registers-cli-master/tests/test_validator.py": {
        "test_valid_string": {
            "name": "test_valid_string",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_valid_n_string": {
            "name": "test_valid_n_string",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_missing_pk": {
            "name": "test_missing_pk",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_unexpected_attribute": {
            "name": "test_unexpected_attribute",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_cardinality_n_mismatch": {
            "name": "test_cardinality_n_mismatch",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_cardinality_1_mismatch": {
            "name": "test_cardinality_1_mismatch",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_representation_error_number": {
            "name": "test_representation_error_number",
            "location": 109,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_representation_error_bool": {
            "name": "test_representation_error_bool",
            "location": 125,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_representation_error_dict": {
            "name": "test_representation_error_dict",
            "location": 141,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_representation_error_n_number": {
            "name": "test_representation_error_n_number",
            "location": 157,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_nully": {
            "name": "test_nully",
            "location": 173,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_curie_value": {
            "name": "test_curie_value",
            "location": 188,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_invalid_curie_value": {
            "name": "test_invalid_curie_value",
            "location": 197,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_integer_value": {
            "name": "test_integer_value",
            "location": 205,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_invalid_integer_value": {
            "name": "test_invalid_integer_value",
            "location": 212,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_string_value": {
            "name": "test_string_value",
            "location": 217,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_datetime_value": {
            "name": "test_datetime_value",
            "location": 221,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_invalid_datetime_value": {
            "name": "test_invalid_datetime_value",
            "location": 230,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_timestamp_value": {
            "name": "test_timestamp_value",
            "location": 238,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_invalid_timestamp_value": {
            "name": "test_invalid_timestamp_value",
            "location": 242,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_period_value": {
            "name": "test_period_value",
            "location": 250,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_period_datetime_duration": {
            "name": "test_period_datetime_duration",
            "location": 266,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_invalid_period_value": {
            "name": "test_invalid_period_value",
            "location": 271,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_url_value": {
            "name": "test_url_value",
            "location": 294,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_invalid_url_value": {
            "name": "test_invalid_url_value",
            "location": 298,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_hash_value": {
            "name": "test_hash_value",
            "location": 306,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_invalid_hash_value": {
            "name": "test_invalid_hash_value",
            "location": 310,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_name_value": {
            "name": "test_name_value",
            "location": 318,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_invalid_name_value": {
            "name": "test_invalid_name_value",
            "location": 322,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_key_value": {
            "name": "test_key_value",
            "location": 327,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_invalid_key_value": {
            "name": "test_invalid_key_value",
            "location": 338,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "registers-cli-master/tests/test_xsv.py": {
        "isa_register": {
            "name": "isa_register",
            "location": 8,
            "return": [
                "Register"
            ],
            "arguments": {}
        },
        "isa_tsv_patch": {
            "name": "isa_tsv_patch",
            "location": 18,
            "return": [],
            "arguments": {
                "isa_register": []
            }
        },
        "test_serialise_value": {
            "name": "test_serialise_value",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_deserialise_tsv": {
            "name": "test_deserialise_tsv",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_deserialise_isa_tsv_patch": {
            "name": "test_deserialise_isa_tsv_patch",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "isa_tsv_patch": []
            }
        },
        "test_deserialise_isa_tsv_patch_item": {
            "name": "test_deserialise_isa_tsv_patch_item",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "isa_tsv_patch": []
            }
        },
        "test_coerce_wrong_key": {
            "name": "test_coerce_wrong_key",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "registers-cli-master/tests/__init__.py": {},
    "registers-cli-master/tests/commands/test_patch.py": {
        "test_patch_create": {
            "name": "test_patch_create",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_patch_create_apply": {
            "name": "test_patch_create_apply",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "registers-cli-master/tests/commands/test_utils.py": {
        "test_record_json": {
            "name": "test_record_json",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "registers-cli-master/tests/rsf/test_core.py": {
        "test_serialize_add_item_command": {
            "name": "test_serialize_add_item_command",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_serialize_append_entry_command": {
            "name": "test_serialize_append_entry_command",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_serialize_assert_root_hash_command": {
            "name": "test_serialize_assert_root_hash_command",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "registers-cli-master/tests/rsf/test_parser.py": {
        "test_parse": {
            "name": "test_parse",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_load": {
            "name": "test_load",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_parse_add_item_command": {
            "name": "test_parse_add_item_command",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_unexpected_add_item_command": {
            "name": "test_unexpected_add_item_command",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_parse_append_entry_command": {
            "name": "test_parse_append_entry_command",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_unexpected_append_entry_command": {
            "name": "test_unexpected_append_entry_command",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_parse_assert_root_command": {
            "name": "test_parse_assert_root_command",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_unexpected_assert_root_command": {
            "name": "test_unexpected_assert_root_command",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    }
}
{
    "resttest-master/setup.py": {},
    "resttest-master/resttest/main.py": {
        "main": {
            "name": "main",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "RestTest.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RestTest.get_port": {
            "name": "get_port",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RestTest.run": {
            "name": "run",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "port": [
                    "int"
                ],
                "name": [
                    "None",
                    "str",
                    "int"
                ]
            }
        },
        "RestTest._run_test_case": {
            "name": "_run_test_case",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "port": [
                    "str",
                    "bytes"
                ],
                "name": [
                    "str"
                ]
            }
        },
        "RestTest._run_all": {
            "name": "_run_all",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "port": [
                    "str",
                    "bytes",
                    "dict[str, typing.Any]",
                    "list[]"
                ]
            }
        }
    },
    "resttest-master/resttest/models.py": {
        "Env.fromdict": {
            "name": "fromdict",
            "location": 12,
            "return": [],
            "arguments": {
                "cls": [
                    "str",
                    "dict[, ]"
                ],
                "port": [
                    "str",
                    "dict[, ]",
                    "None"
                ],
                "raw": [
                    "str",
                    "bytes"
                ]
            }
        },
        "Request.fromdict": {
            "name": "fromdict",
            "location": 26,
            "return": [],
            "arguments": {
                "cls": [
                    "str",
                    "dict[, ]",
                    "None",
                    "typing.Any",
                    "dict[str, str]"
                ],
                "raw": []
            }
        },
        "Response.fromdict": {
            "name": "fromdict",
            "location": 41,
            "return": [],
            "arguments": {
                "cls": [
                    "str",
                    "set[str]",
                    "int",
                    "dict[str, typing.Any]"
                ],
                "raw": [
                    "str"
                ]
            }
        },
        "EnvUpdate.fromdict": {
            "name": "fromdict",
            "location": 51,
            "return": [],
            "arguments": {
                "cls": [
                    "typing.Iterable[bytes]"
                ],
                "raw": []
            }
        },
        "TestCase.fromdict": {
            "name": "fromdict",
            "location": 63,
            "return": [],
            "arguments": {
                "cls": [
                    "str",
                    "dict[, ]",
                    "dict[str, str]"
                ],
                "raw": [
                    "str"
                ]
            }
        }
    },
    "resttest-master/resttest/__init__.py": {},
    "resttest-master/resttest/service/random_port.py": {
        "get_random_port": {
            "name": "get_random_port",
            "location": 6,
            "return": [
                "typing.DefaultDict",
                "str",
                "int",
                "tuple[typing.Union[typing.Literal,typing.Literal,typing.Literal,typing.Literal]]",
                "set[]",
                "list[str]"
            ],
            "arguments": {}
        },
        "_find_unused_port": {
            "name": "_find_unused_port",
            "location": 19,
            "return": [],
            "arguments": {}
        }
    },
    "resttest-master/resttest/service/reader.py": {
        "Reader.read_env": {
            "name": "read_env",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "port": [
                    "int",
                    "typing.Iterable[dict[, ]]"
                ]
            }
        },
        "Reader.read_test_case": {
            "name": "read_test_case",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "typing.Iterable[str]"
                ]
            }
        },
        "Reader.read_test_cases": {
            "name": "read_test_cases",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FileReader.__init__": {
            "name": "__init__",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "test_dir": [
                    "str"
                ]
            }
        },
        "FileReader.read_env": {
            "name": "read_env",
            "location": 34,
            "return": [],
            "arguments": {
                "self": [],
                "port": [
                    "int",
                    "str",
                    "float"
                ]
            }
        },
        "FileReader.read_test_case": {
            "name": "read_test_case",
            "location": 38,
            "return": [],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "bool"
                ]
            }
        },
        "FileReader.read_test_cases": {
            "name": "read_test_cases",
            "location": 43,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "FileReader._read_file": {
            "name": "_read_file",
            "location": 47,
            "return": [],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "typing.BinaryIO"
                ]
            }
        },
        "FileReader._append_suffix": {
            "name": "_append_suffix",
            "location": 52,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "FileReader._get_test_case_names": {
            "name": "_get_test_case_names",
            "location": 57,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FileReader._sort_filenames": {
            "name": "_sort_filenames",
            "location": 65,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": [],
                "filenames": [
                    "str"
                ]
            }
        },
        "FileReader._number_filenames": {
            "name": "_number_filenames",
            "location": 70,
            "return": [
                "list[NumberedFilename]"
            ],
            "arguments": {
                "self": [],
                "filenames": [
                    "list[str]",
                    "str"
                ]
            }
        }
    },
    "resttest-master/resttest/service/rpc_service.py": {
        "make_request": {
            "name": "make_request",
            "location": 14,
            "return": [],
            "arguments": {
                "req": [],
                "env": [
                    "typing.Callable[, ]",
                    "list[]"
                ]
            }
        },
        "_make_path": {
            "name": "_make_path",
            "location": 20,
            "return": [],
            "arguments": {
                "req": [
                    "str",
                    "list[str]",
                    "None",
                    "typing.MutableMapping",
                    "bool"
                ],
                "env": [
                    "dict[str, list[str]]",
                    "typing.Mapping",
                    "dict[, ]",
                    "dict[str, int]",
                    "None",
                    "bool"
                ]
            }
        },
        "_make_request_without_body": {
            "name": "_make_request_without_body",
            "location": 28,
            "return": [],
            "arguments": {
                "req": [
                    "dict[, ]",
                    "str",
                    "None"
                ],
                "env": [
                    "bool",
                    "list[str]",
                    "str"
                ]
            }
        },
        "_make_request_with_body": {
            "name": "_make_request_with_body",
            "location": 35,
            "return": [],
            "arguments": {
                "req": [
                    "dict[, ]",
                    "dict[str, typing.Any]",
                    "Exception"
                ],
                "env": [
                    "bool"
                ]
            }
        },
        "_make_headers": {
            "name": "_make_headers",
            "location": 45,
            "return": [
                "dict[typing.Text, typing.Text]"
            ],
            "arguments": {
                "env": [
                    "dict[str, typing.Any]"
                ],
                "req": [
                    "dict[str, typing.Any]",
                    "dict[, ]",
                    "typing.MutableMapping"
                ]
            }
        },
        "_map_response": {
            "name": "_map_response",
            "location": 52,
            "return": [
                "Response"
            ],
            "arguments": {
                "resp": []
            }
        }
    },
    "resttest-master/resttest/service/template_util.py": {
        "resolve_dict": {
            "name": "resolve_dict",
            "location": 10,
            "return": [
                "dict[typing.Union[tuple[typing.Union[str,dict[str, str]]],tuple[typing.Union[str,int]]], typing.Union[tuple[typing.Union[str,dict[str, str]]],tuple[typing.Union[str,int]]]]"
            ],
            "arguments": {
                "env": [
                    "dict[, ]",
                    "str",
                    "dict[str, typing.Any]"
                ],
                "body": [
                    "dict[, ]",
                    "dict[str, dict[str, str]]",
                    "dict[str, int]",
                    "dict[str, str]"
                ]
            }
        },
        "resolve_value": {
            "name": "resolve_value",
            "location": 22,
            "return": [],
            "arguments": {
                "env": [
                    "str",
                    "None",
                    "dict[, ]",
                    "int"
                ],
                "val": [
                    "str"
                ]
            }
        }
    },
    "resttest-master/resttest/service/test_service.py": {
        "run_tests": {
            "name": "run_tests",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "test_cases": [
                    "list[T]",
                    "str",
                    "list[str]"
                ],
                "env": [
                    "list[str]",
                    "None",
                    "typing.AbstractSet"
                ]
            }
        },
        "_run_test": {
            "name": "_run_test",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "number": [
                    "int",
                    "dict[str, float]",
                    "str",
                    "None"
                ],
                "test_case": [
                    "str",
                    "dict[str, str]",
                    "None",
                    "int",
                    "list[typing.Any]",
                    "dict[, ]",
                    "list[tuple[typing.Union[str,str]]]"
                ],
                "env": [
                    "str"
                ]
            }
        },
        "_assert_response": {
            "name": "_assert_response",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "test_case": [
                    "bytes",
                    "dict[str, typing.Any]",
                    "int"
                ],
                "actual": [
                    "int"
                ],
                "env": [
                    "bool",
                    "str"
                ]
            }
        },
        "_assert_body": {
            "name": "_assert_body",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "test_case": [],
                "actual": [
                    "bool",
                    "dict[, ]",
                    "str"
                ],
                "env": [
                    "dict[, ]",
                    "str",
                    "None",
                    "bool"
                ]
            }
        },
        "_assert_body_content": {
            "name": "_assert_body_content",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "test_case": [
                    "dict[str, typing.Any]",
                    "dict[str, str]",
                    "None",
                    "bytes"
                ],
                "expected": [
                    "dict[str, typing.Any]",
                    "bool",
                    "str",
                    "dict[str, list[str]]"
                ],
                "actual": [
                    "dict[, ]",
                    "dict[str, typing.Any]",
                    "None",
                    "typing.Mapping",
                    "str"
                ]
            }
        },
        "_update_env": {
            "name": "_update_env",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "response_body": [
                    "dict[str, str]",
                    "str",
                    "bytes",
                    "dict[, ]"
                ],
                "updates": [
                    "dict[str, typing.Any]",
                    "list[]"
                ],
                "env": [
                    "dict[str, str]",
                    "str",
                    "bytes",
                    "dict[, ]"
                ]
            }
        },
        "_fail": {
            "name": "_fail",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "test_case": [
                    "str",
                    "dict[, ]",
                    "int",
                    "float",
                    "None"
                ],
                "msg": [
                    "str",
                    "dict[, ]",
                    "int",
                    "float",
                    "None"
                ]
            }
        },
        "_log_test_time": {
            "name": "_log_test_time",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "start_time": [
                    "int",
                    "list[float]",
                    "float"
                ]
            }
        }
    },
    "resttest-master/resttest/service/__init__.py": {}
}
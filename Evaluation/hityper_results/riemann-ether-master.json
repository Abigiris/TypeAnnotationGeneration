{
    "riemann-ether-master/setup.py": {},
    "riemann-ether-master/ether/abi.py": {
        "single_item_decoder": {
            "name": "single_item_decoder",
            "location": 12,
            "return": [],
            "arguments": {
                "f": []
            }
        },
        "_inner_type": {
            "name": "_inner_type",
            "location": 25,
            "return": [],
            "arguments": {
                "type_str": []
            }
        },
        "_array_length": {
            "name": "_array_length",
            "location": 30,
            "return": [],
            "arguments": {
                "type_str": []
            }
        },
        "_join_lists": {
            "name": "_join_lists",
            "location": 44,
            "return": [],
            "arguments": {}
        },
        "_slots_to_encode": {
            "name": "_slots_to_encode",
            "location": 49,
            "return": [],
            "arguments": {
                "type_str": [],
                "arg": []
            }
        },
        "_encode_uint": {
            "name": "_encode_uint",
            "location": 84,
            "return": [],
            "arguments": {
                "number": []
            }
        },
        "_decode_uint": {
            "name": "_decode_uint",
            "location": 92,
            "return": [],
            "arguments": {
                "b": []
            }
        },
        "_encode_int": {
            "name": "_encode_int",
            "location": 97,
            "return": [],
            "arguments": {
                "number": []
            }
        },
        "_decode_int": {
            "name": "_decode_int",
            "location": 105,
            "return": [],
            "arguments": {
                "b": []
            }
        },
        "_encode_fixed_bytes": {
            "name": "_encode_fixed_bytes",
            "location": 110,
            "return": [],
            "arguments": {
                "b": []
            }
        },
        "_decode_fixed_bytes": {
            "name": "_decode_fixed_bytes",
            "location": 126,
            "return": [],
            "arguments": {
                "b": [],
                "type_str": []
            }
        },
        "_encode_dynamic_bytes": {
            "name": "_encode_dynamic_bytes",
            "location": 131,
            "return": [],
            "arguments": {
                "b": []
            }
        },
        "_decode_dynamic_bytes": {
            "name": "_decode_dynamic_bytes",
            "location": 142,
            "return": [],
            "arguments": {
                "b": []
            }
        },
        "_encode_str": {
            "name": "_encode_str",
            "location": 148,
            "return": [],
            "arguments": {
                "arg": []
            }
        },
        "_decode_str": {
            "name": "_decode_str",
            "location": 155,
            "return": [],
            "arguments": {
                "b": []
            }
        },
        "_encode_address": {
            "name": "_encode_address",
            "location": 159,
            "return": [],
            "arguments": {
                "arg": []
            }
        },
        "_decode_address": {
            "name": "_decode_address",
            "location": 165,
            "return": [],
            "arguments": {
                "b": []
            }
        },
        "_encode_dynamic_array": {
            "name": "_encode_dynamic_array",
            "location": 169,
            "return": [],
            "arguments": {
                "type_str": [],
                "arg": []
            }
        },
        "_decode_dynamic_array": {
            "name": "_decode_dynamic_array",
            "location": 175,
            "return": [],
            "arguments": {
                "type_str": [],
                "b": []
            }
        },
        "_is_dynamic": {
            "name": "_is_dynamic",
            "location": 183,
            "return": [],
            "arguments": {
                "type_str": []
            }
        },
        "_is_complex": {
            "name": "_is_complex",
            "location": 190,
            "return": [],
            "arguments": {
                "type_str": []
            }
        },
        "_encode_fixed_array": {
            "name": "_encode_fixed_array",
            "location": 197,
            "return": [],
            "arguments": {
                "type_str": [],
                "arg": []
            }
        },
        "_decode_fixed_array": {
            "name": "_decode_fixed_array",
            "location": 203,
            "return": [],
            "arguments": {
                "type_str": [],
                "b": []
            }
        },
        "encode": {
            "name": "encode",
            "location": 218,
            "return": [],
            "arguments": {
                "type_str": [],
                "arg": []
            }
        },
        "_encode_offset": {
            "name": "_encode_offset",
            "location": 265,
            "return": [],
            "arguments": {
                "head_size": [],
                "tail_pos": []
            }
        },
        "encode_many": {
            "name": "encode_many",
            "location": 270,
            "return": [],
            "arguments": {
                "type_list": [],
                "arg_list": []
            }
        },
        "encode_tuple": {
            "name": "encode_tuple",
            "location": 297,
            "return": [],
            "arguments": {
                "type_tuple": [],
                "args": []
            }
        },
        "decode": {
            "name": "decode",
            "location": 304,
            "return": [],
            "arguments": {
                "type_str": [],
                "b": []
            }
        },
        "decode_many": {
            "name": "decode_many",
            "location": 329,
            "return": [],
            "arguments": {
                "type_list": [],
                "b": []
            }
        },
        "decode_tuple": {
            "name": "decode_tuple",
            "location": 369,
            "return": [],
            "arguments": {
                "type_tuple": [],
                "b": []
            }
        },
        "find": {
            "name": "find",
            "location": 376,
            "return": [],
            "arguments": {
                "name": [],
                "interface": []
            }
        },
        "_make_type_tuple": {
            "name": "_make_type_tuple",
            "location": 380,
            "return": [],
            "arguments": {
                "f": []
            }
        },
        "make_signature": {
            "name": "make_signature",
            "location": 391,
            "return": [],
            "arguments": {
                "f": []
            }
        },
        "single_item_decoder.wrapper": {
            "name": "wrapper",
            "location": 16,
            "return": [],
            "arguments": {
                "b": []
            }
        }
    },
    "riemann-ether-master/ether/calldata.py": {
        "make_selector": {
            "name": "make_selector",
            "location": 7,
            "return": [],
            "arguments": {
                "f": [
                    "dict[str, typing.Any]",
                    "typing.Callable[, ]",
                    "str",
                    "list[]",
                    "int"
                ]
            }
        },
        "_encode_function_args": {
            "name": "_encode_function_args",
            "location": 20,
            "return": [],
            "arguments": {
                "function": [
                    "list[]",
                    "dict[str, typing.Any]"
                ],
                "function_args": [
                    "list[]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "_find_by_name": {
            "name": "_find_by_name",
            "location": 32,
            "return": [],
            "arguments": {
                "function_name": [
                    "str",
                    "typing.Type",
                    "bool"
                ],
                "num_args": [
                    "int",
                    "typing.Callable[, ]",
                    "list[int]"
                ],
                "contract_abi": [
                    "list[]",
                    "dict[str, float]",
                    "list[str]"
                ]
            }
        },
        "encode_call": {
            "name": "encode_call",
            "location": 52,
            "return": [],
            "arguments": {
                "function": [
                    "list[]",
                    "dict[str, typing.Any]",
                    "str",
                    "typing.Type"
                ],
                "function_args": [
                    "list[]",
                    "dict[str, typing.Any]",
                    "str",
                    "typing.Type"
                ]
            }
        },
        "call": {
            "name": "call",
            "location": 61,
            "return": [],
            "arguments": {
                "function_name": [
                    "str"
                ],
                "function_args": [],
                "contract_abi": [
                    "str"
                ]
            }
        }
    },
    "riemann-ether-master/ether/crypto.py": {
        "keccak256": {
            "name": "keccak256",
            "location": 13,
            "return": [],
            "arguments": {
                "msg": [
                    "bytes",
                    "dict[, ]",
                    "dict[str, str]",
                    "None"
                ]
            }
        },
        "pow_mod": {
            "name": "pow_mod",
            "location": 27,
            "return": [
                "int"
            ],
            "arguments": {
                "x": [],
                "y": [
                    "bool"
                ],
                "z": []
            }
        },
        "uncompress_pubkey": {
            "name": "uncompress_pubkey",
            "location": 41,
            "return": [
                "bytes"
            ],
            "arguments": {
                "pubkey": [
                    "str",
                    "bytes"
                ]
            }
        },
        "compress_pubkey": {
            "name": "compress_pubkey",
            "location": 55,
            "return": [],
            "arguments": {
                "pubkey": []
            }
        },
        "priv_to_pub": {
            "name": "priv_to_pub",
            "location": 63,
            "return": [],
            "arguments": {
                "privkey": [
                    "int",
                    "str",
                    "bytes"
                ]
            }
        },
        "pub_to_addr": {
            "name": "pub_to_addr",
            "location": 70,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "pubkey": [
                    "bytes",
                    "int",
                    "typing.IO",
                    "list[str]",
                    "str"
                ]
            }
        },
        "priv_to_addr": {
            "name": "priv_to_addr",
            "location": 75,
            "return": [],
            "arguments": {
                "privkey": [
                    "bytes",
                    "int",
                    "typing.IO",
                    "list[str]",
                    "str"
                ]
            }
        },
        "recover_pubkey": {
            "name": "recover_pubkey",
            "location": 80,
            "return": [],
            "arguments": {
                "signature": [
                    "bytes",
                    "str"
                ],
                "digest": [
                    "int",
                    "bytes",
                    "None",
                    "typing.Hashable",
                    "list[list[str]]",
                    "str"
                ]
            }
        },
        "recover_address": {
            "name": "recover_address",
            "location": 95,
            "return": [],
            "arguments": {
                "signature": [
                    "bytes",
                    "int",
                    "float",
                    "str"
                ],
                "digest": [
                    "bytes",
                    "int",
                    "float",
                    "str"
                ]
            }
        },
        "_der_minimal_int": {
            "name": "_der_minimal_int",
            "location": 99,
            "return": [
                "bytes"
            ],
            "arguments": {
                "number": [
                    "int"
                ]
            }
        },
        "sig_to_der": {
            "name": "sig_to_der",
            "location": 105,
            "return": [],
            "arguments": {
                "signature": []
            }
        },
        "sign_hash": {
            "name": "sign_hash",
            "location": 122,
            "return": [],
            "arguments": {
                "digest": [
                    "bool",
                    "str",
                    "typing.IO",
                    "float",
                    "tuple[bytes]"
                ],
                "privkey": [
                    "str",
                    "bytes",
                    "int"
                ]
            }
        },
        "sign": {
            "name": "sign",
            "location": 129,
            "return": [],
            "arguments": {
                "message": [
                    "bytes",
                    "typing.Callable[bytes, bytes]",
                    "dict[, ]",
                    "str"
                ],
                "privkey": [
                    "bytes",
                    "typing.Callable[bytes, bytes]",
                    "dict[, ]",
                    "str"
                ],
                "algo": []
            }
        },
        "sign_message": {
            "name": "sign_message",
            "location": 139,
            "return": [],
            "arguments": {
                "message": [
                    "str",
                    "int",
                    "list[list[str]]",
                    "list[]",
                    "list[str]"
                ],
                "privkey": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ],
                "algo": []
            }
        }
    },
    "riemann-ether-master/ether/ether_types.py": {},
    "riemann-ether-master/ether/ethrpc.py": {
        "_id": {
            "name": "_id",
            "location": 18,
            "return": [
                "typing.Generator[int]"
            ],
            "arguments": {
                "start": [
                    "int"
                ]
            }
        },
        "get_client": {
            "name": "get_client",
            "location": 26,
            "return": [
                "InfuraWSRPC",
                "InfuraHTTPRPC",
                "WSRPC",
                "HTTPRPC"
            ],
            "arguments": {
                "network": [
                    "int",
                    "str",
                    "dict[str, dict[str, int]]"
                ]
            }
        },
        "BaseRPC.__repr__": {
            "name": "__repr__",
            "location": 65,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseRPC.__init__": {
            "name": "__init__",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "uri": [],
                "network": [
                    "int"
                ],
                "logger": [
                    "None",
                    "str",
                    "list[str]",
                    "tuple[tuple[typing.Union[str,...]]]"
                ]
            }
        },
        "BaseRPC.info": {
            "name": "info",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseRPC.debug": {
            "name": "debug",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseRPC.warn": {
            "name": "warn",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseRPC.error": {
            "name": "error",
            "location": 97,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseRPC._encode_if_int": {
            "name": "_encode_if_int",
            "location": 114,
            "return": [
                "str",
                "float",
                "int"
            ],
            "arguments": {
                "v": [
                    "int",
                    "str",
                    "float"
                ]
            }
        },
        "BaseRPC._shallow_prep_params": {
            "name": "_shallow_prep_params",
            "location": 120,
            "return": [
                "list[]"
            ],
            "arguments": {
                "params": [
                    "list[]",
                    "int"
                ]
            }
        },
        "WSRPC.__init__": {
            "name": "__init__",
            "location": 251,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "uri": [
                    "None",
                    "bool",
                    "dict[str, typing.Any]",
                    "typing.Callable[A, bool]"
                ],
                "network": [
                    "None",
                    "bool",
                    "dict[str, typing.Any]",
                    "typing.Callable[A, bool]"
                ]
            }
        },
        "WSRPC.__repr__": {
            "name": "__repr__",
            "location": 258,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "WSRPC.get_pending": {
            "name": "get_pending",
            "location": 318,
            "return": [
                "tuple[typing.Union[int,bytes,typing.DefaultDict,str,list[]]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "HTTPRPC.__init__": {
            "name": "__init__",
            "location": 466,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "uri": [
                    "None",
                    "bool",
                    "dict[str, typing.Any]",
                    "typing.Callable[A, bool]"
                ],
                "network": [
                    "None",
                    "bool",
                    "dict[str, typing.Any]",
                    "typing.Callable[A, bool]"
                ]
            }
        },
        "InfuraHTTPRPC.__init__": {
            "name": "__init__",
            "location": 504,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "network": [
                    "str",
                    "None",
                    "int",
                    "bytes"
                ],
                "infura_key": [
                    "bytes",
                    "str",
                    "None"
                ]
            }
        },
        "InfuraWSRPC.__init__": {
            "name": "__init__",
            "location": 512,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "network": [
                    "str",
                    "None",
                    "int",
                    "bytes"
                ],
                "infura_key": [
                    "bytes",
                    "str",
                    "None"
                ]
            }
        }
    },
    "riemann-ether-master/ether/events.py": {
        "_make_topic0": {
            "name": "_make_topic0",
            "location": 7,
            "return": [
                "str"
            ],
            "arguments": {
                "event": [
                    "str",
                    "typing.IO",
                    "dict[str, typing.Any]",
                    "dict[, ]"
                ]
            }
        },
        "_match_topic0_to_event": {
            "name": "_match_topic0_to_event",
            "location": 20,
            "return": [
                "dict[str, typing.Any]",
                "str"
            ],
            "arguments": {
                "event_topic": [
                    "str"
                ],
                "events": [
                    "list[dict[str, typing.Any]]",
                    "list[str]",
                    "dict[, ]"
                ]
            }
        },
        "_find_indexed": {
            "name": "_find_indexed",
            "location": 36,
            "return": [
                "list[typing.Text]"
            ],
            "arguments": {
                "event": [
                    "str"
                ]
            }
        },
        "_find_unindexed": {
            "name": "_find_unindexed",
            "location": 47,
            "return": [
                "list[typing.Text]"
            ],
            "arguments": {
                "event": [
                    "str"
                ]
            }
        },
        "decode_event": {
            "name": "decode_event",
            "location": 58,
            "return": [
                "dict[typing.Text, ]"
            ],
            "arguments": {
                "encoded_event": [],
                "contract_abi": []
            }
        },
        "parse_event_data": {
            "name": "parse_event_data",
            "location": 95,
            "return": [],
            "arguments": {
                "encoded_event": [],
                "contract_abi": [
                    "bytes",
                    "dict[, ]"
                ]
            }
        }
    },
    "riemann-ether-master/ether/rlp.py": {
        "i2be_rlp_padded": {
            "name": "i2be_rlp_padded",
            "location": 17,
            "return": [
                "bytes"
            ],
            "arguments": {
                "number": [
                    "bool"
                ],
                "length": [
                    "int"
                ],
                "signed": [
                    "bool"
                ]
            }
        },
        "be2i_rlp": {
            "name": "be2i_rlp",
            "location": 37,
            "return": [
                "int"
            ],
            "arguments": {
                "b": [
                    "bool"
                ],
                "signed": [
                    "bool"
                ]
            }
        },
        "encode": {
            "name": "encode",
            "location": 43,
            "return": [
                "bytes"
            ],
            "arguments": {
                "item": [
                    "str",
                    "typing.Iterable[bytes]",
                    "typing.Pattern"
                ]
            }
        },
        "_encode_length": {
            "name": "_encode_length",
            "location": 54,
            "return": [
                "bytes"
            ],
            "arguments": {
                "length": [
                    "int",
                    "float"
                ],
                "offset": [
                    "int"
                ]
            }
        },
        "decode_list": {
            "name": "decode_list",
            "location": 67,
            "return": [
                "list[]"
            ],
            "arguments": {
                "raw": [
                    "list[int]",
                    "list[str]"
                ]
            }
        },
        "decode": {
            "name": "decode",
            "location": 81,
            "return": [
                "bytes"
            ],
            "arguments": {
                "raw": []
            }
        },
        "_decode_length": {
            "name": "_decode_length",
            "location": 98,
            "return": [
                "tuple[int]"
            ],
            "arguments": {
                "raw": []
            }
        }
    },
    "riemann-ether-master/ether/transactions.py": {
        "Immutable._make_immutable": {
            "name": "_make_immutable",
            "location": 14,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Immutable.__setattr__": {
            "name": "__setattr__",
            "location": 20,
            "return": [],
            "arguments": {
                "self": [],
                "key": [],
                "value": []
            }
        },
        "EthTx.__ne__": {
            "name": "__ne__",
            "location": 55,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "EthTx.deserialize": {
            "name": "deserialize",
            "location": 61,
            "return": [],
            "arguments": {
                "cls": [],
                "raw": []
            }
        },
        "EthTx.deserialize_hex": {
            "name": "deserialize_hex",
            "location": 66,
            "return": [],
            "arguments": {
                "cls": [],
                "raw": []
            }
        },
        "EthTx.serialize": {
            "name": "serialize",
            "location": 74,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "EthTx.serialize_hex": {
            "name": "serialize_hex",
            "location": 78,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "EthTx.sighash": {
            "name": "sighash",
            "location": 83,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "EthTx.to_json_dict": {
            "name": "to_json_dict",
            "location": 90,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CeloTx.to_json_dict": {
            "name": "to_json_dict",
            "location": 116,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UnsignedEthTx.__init__": {
            "name": "__init__",
            "location": 156,
            "return": [],
            "arguments": {
                "self": [],
                "nonce": [],
                "gasPrice": [],
                "gas": [],
                "to": [],
                "value": [],
                "data": [],
                "chainId": []
            }
        },
        "UnsignedEthTx.__eq__": {
            "name": "__eq__",
            "location": 174,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "UnsignedEthTx.deserialize": {
            "name": "deserialize",
            "location": 190,
            "return": [],
            "arguments": {
                "cls": [],
                "raw": []
            }
        },
        "UnsignedEthTx.get_signature": {
            "name": "get_signature",
            "location": 195,
            "return": [],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "UnsignedEthTx.serialize": {
            "name": "serialize",
            "location": 204,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UnsignedEthTx.sighash": {
            "name": "sighash",
            "location": 208,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UnsignedEthTx.sign": {
            "name": "sign",
            "location": 216,
            "return": [],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "UnsignedEthTx.with_chainId": {
            "name": "with_chainId",
            "location": 228,
            "return": [],
            "arguments": {
                "self": [],
                "id": []
            }
        },
        "UnsignedEthTx._with_null_signature": {
            "name": "_with_null_signature",
            "location": 238,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UnsignedCeloTx.__init__": {
            "name": "__init__",
            "location": 277,
            "return": [],
            "arguments": {
                "self": [],
                "nonce": [],
                "gasPrice": [],
                "gas": [],
                "gasCurrency": [],
                "gasFeeRecipient": [],
                "to": [],
                "value": [],
                "data": [],
                "chainId": []
            }
        },
        "UnsignedCeloTx.__eq__": {
            "name": "__eq__",
            "location": 299,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "UnsignedCeloTx.deserialize": {
            "name": "deserialize",
            "location": 317,
            "return": [],
            "arguments": {
                "cls": [],
                "raw": []
            }
        },
        "UnsignedCeloTx.serialize": {
            "name": "serialize",
            "location": 322,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UnsignedCeloTx.sign": {
            "name": "sign",
            "location": 326,
            "return": [],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "UnsignedCeloTx._with_null_signature": {
            "name": "_with_null_signature",
            "location": 340,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SignedEthTx.__init__": {
            "name": "__init__",
            "location": 388,
            "return": [],
            "arguments": {
                "self": [],
                "nonce": [],
                "gasPrice": [],
                "gas": [],
                "to": [],
                "value": [],
                "data": [],
                "v": [],
                "r": [],
                "s": []
            }
        },
        "SignedEthTx.__eq__": {
            "name": "__eq__",
            "location": 411,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "SignedEthTx.as_unsigned": {
            "name": "as_unsigned",
            "location": 418,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SignedEthTx.deserialize": {
            "name": "deserialize",
            "location": 433,
            "return": [],
            "arguments": {
                "cls": [],
                "raw": []
            }
        },
        "SignedEthTx.recover_sender": {
            "name": "recover_sender",
            "location": 453,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SignedEthTx.serialize": {
            "name": "serialize",
            "location": 460,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SignedEthTx._set_tx_id": {
            "name": "_set_tx_id",
            "location": 475,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SignedEthTx.sighash": {
            "name": "sighash",
            "location": 479,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SignedCeloTx.__init__": {
            "name": "__init__",
            "location": 518,
            "return": [],
            "arguments": {
                "self": [],
                "nonce": [],
                "gasPrice": [],
                "gas": [],
                "gasCurrency": [],
                "gasFeeRecipient": [],
                "to": [],
                "value": [],
                "data": [],
                "v": [],
                "r": [],
                "s": []
            }
        },
        "SignedCeloTx.as_unsigned": {
            "name": "as_unsigned",
            "location": 545,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SignedCeloTx.deserialize": {
            "name": "deserialize",
            "location": 562,
            "return": [],
            "arguments": {
                "cls": [],
                "raw": []
            }
        },
        "SignedCeloTx.serialize": {
            "name": "serialize",
            "location": 586,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "riemann-ether-master/ether/__init__.py": {},
    "riemann-ether-master/ether/tests/helpers.py": {},
    "riemann-ether-master/ether/tests/test_abi.py": {
        "TestABI.setUp": {
            "name": "setUp",
            "location": 8,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestABI.print_in_32s": {
            "name": "print_in_32s",
            "location": 27,
            "return": [],
            "arguments": {
                "self": [],
                "a": [],
                "b": []
            }
        },
        "TestABI.test_roundtrip": {
            "name": "test_roundtrip",
            "location": 34,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "riemann-ether-master/ether/tests/test_events.py": {
        "TestABI.test_decode_event": {
            "name": "test_decode_event",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestABI.test_match_topic0_to_event": {
            "name": "test_match_topic0_to_event",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "riemann-ether-master/ether/tests/test_rlp.py": {
        "process_input": {
            "name": "process_input",
            "location": 8,
            "return": [
                "list[]",
                "bytes"
            ],
            "arguments": {
                "item": [
                    "list[tuple[typing.Union[str,...]]]",
                    "tuple[]",
                    "list[]"
                ]
            }
        },
        "TestRLP.prep_json": {
            "name": "prep_json",
            "location": 21,
            "return": [
                "list[tuple[tuple[typing.Union[tuple[typing.Union[int,...]],float]]]]"
            ],
            "arguments": {
                "self": [],
                "helpers_json": [
                    "dict[, ]",
                    "dict[tuple[typing.Union[int,...]], float]"
                ]
            }
        },
        "TestRLP.setUp": {
            "name": "setUp",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRLP.test_encode": {
            "name": "test_encode",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRLP.test_decode": {
            "name": "test_decode",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRLP.test_roundtrip": {
            "name": "test_roundtrip",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "riemann-ether-master/ether/tests/test_txns.py": {
        "TestTxns.prep_json": {
            "name": "prep_json",
            "location": 11,
            "return": [
                "dict[typing.Text, SignedEthTx]"
            ],
            "arguments": {
                "j": []
            }
        },
        "TestTxns.setUpClass": {
            "name": "setUpClass",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "None",
                    "int"
                ]
            }
        },
        "TestTxns.test_deser": {
            "name": "test_deser",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTxns.test_ser": {
            "name": "test_ser",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    }
}
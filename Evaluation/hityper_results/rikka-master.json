{
    "rikka-master/setup.py": {},
    "rikka-master/rikka/config.py": {
        "ConfigAttribute.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "dict[str, typing.Any]",
                    "list[str]",
                    "dict[, ]"
                ],
                "get_converter": [
                    "None",
                    "str",
                    "bool"
                ]
            }
        },
        "ConfigAttribute.__get__": {
            "name": "__get__",
            "location": 19,
            "return": [
                "ConfigAttribute"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "bool",
                    "None",
                    "str"
                ],
                "tp": [
                    "None",
                    "bool",
                    "str",
                    "dict[, ]"
                ]
            }
        },
        "ConfigAttribute.__set__": {
            "name": "__set__",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "str",
                    "dict[str, typing.Any]",
                    "list[]",
                    "bool"
                ],
                "value": [
                    "str",
                    "dict[str, typing.Any]",
                    "list[]",
                    "bool"
                ]
            }
        },
        "Config.from_object": {
            "name": "from_object",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "str",
                    "typing.Callable[, ]"
                ]
            }
        },
        "Config.load_file": {
            "name": "load_file",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "bytes"
                ]
            }
        },
        "Config.__getattr__": {
            "name": "__getattr__",
            "location": 45,
            "return": [],
            "arguments": {
                "self": [],
                "attr": [
                    "str"
                ]
            }
        },
        "Config.validate": {
            "name": "validate",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "attrs": [
                    "str"
                ]
            }
        }
    },
    "rikka-master/rikka/exceptions.py": {
        "ConfigMissing.__init__": {
            "name": "__init__",
            "location": 3,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "msg": [
                    "str",
                    "dict[str, typing.Any]",
                    "None",
                    "typing.Sequence[str]"
                ]
            }
        }
    },
    "rikka-master/rikka/local.py": {
        "parse_args": {
            "name": "parse_args",
            "location": 293,
            "return": [],
            "arguments": {}
        },
        "main": {
            "name": "main",
            "location": 309,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "Local.__init__": {
            "name": "__init__",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pkgbuilder": [
                    "dict[, ]",
                    "str",
                    "list[]"
                ],
                "config": [
                    "dict[, ]"
                ]
            }
        },
        "Local.config": {
            "name": "config",
            "location": 47,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Local.next_timeout": {
            "name": "next_timeout",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Local.reset_timeout": {
            "name": "reset_timeout",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Local._connect_tunnel": {
            "name": "_connect_tunnel",
            "location": 61,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Local._connect_dest": {
            "name": "_connect_dest",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Local._handshake": {
            "name": "_handshake",
            "location": 97,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "conn": []
            }
        },
        "Local.prepare_transfer": {
            "name": "prepare_transfer",
            "location": 113,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "conn": [],
                "mask": [
                    "int",
                    "str",
                    "typing.Iterable[C]"
                ]
            }
        },
        "Local.dispatch_tunnel": {
            "name": "dispatch_tunnel",
            "location": 135,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "conn": [
                    "str",
                    "tuple[typing.Union[typing.Any,typing.Any,typing.Any]]",
                    "list[]",
                    "bytes",
                    "None"
                ],
                "mask": [],
                "buf": [
                    "str",
                    "tuple[typing.Union[typing.Any,typing.Any,typing.Any]]",
                    "list[]",
                    "bytes",
                    "None"
                ]
            }
        },
        "Local.dispatch_dest": {
            "name": "dispatch_dest",
            "location": 143,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "conn": [
                    "str",
                    "tuple[typing.Union[typing.Any,typing.Any,typing.Any]]",
                    "list[]",
                    "bytes",
                    "None"
                ],
                "mask": [],
                "buf": [
                    "str",
                    "tuple[typing.Union[typing.Any,typing.Any,typing.Any]]",
                    "list[]",
                    "bytes",
                    "None"
                ]
            }
        },
        "Local.transfer_from_tunnel": {
            "name": "transfer_from_tunnel",
            "location": 151,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "r_conn": [],
                "mask": [
                    "int",
                    "list[str]",
                    "list[]"
                ],
                "buf": []
            }
        },
        "Local.transfer_from_dest": {
            "name": "transfer_from_dest",
            "location": 185,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "r_conn": [],
                "mask": [
                    "int",
                    "list[str]",
                    "list[]"
                ],
                "buf": []
            }
        },
        "Local.send_to_dest": {
            "name": "send_to_dest",
            "location": 220,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "w_conn": [],
                "mask": [
                    "int",
                    "float",
                    "str",
                    "list[int]",
                    "list[list[str]]"
                ],
                "buf": [
                    "list[typing.Deque]"
                ]
            }
        },
        "Local.send_to_tunnel": {
            "name": "send_to_tunnel",
            "location": 236,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "w_conn": [],
                "mask": [
                    "int",
                    "float",
                    "str",
                    "list[int]",
                    "list[list[str]]"
                ],
                "buf": [
                    "list[typing.Deque]"
                ]
            }
        },
        "Local.manage_tunnel": {
            "name": "manage_tunnel",
            "location": 252,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Local.run_forever": {
            "name": "run_forever",
            "location": 257,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Local.exit": {
            "name": "exit",
            "location": 268,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Local.init_wake_fds": {
            "name": "init_wake_fds",
            "location": 275,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Local.init_signal": {
            "name": "init_signal",
            "location": 280,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Local.handle_signal": {
            "name": "handle_signal",
            "location": 287,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "expose_sock": [
                    "int",
                    "str",
                    "typing.Iterable[C]"
                ],
                "mask": [
                    "int",
                    "str",
                    "typing.Iterable[C]"
                ]
            }
        }
    },
    "rikka-master/rikka/logger.py": {
        "name2level": {
            "name": "name2level",
            "location": 14,
            "return": [
                "dict[int, str]",
                "dict[str, typing.Any]",
                "dict[str, dict[str, typing.Any]]",
                "typing.Pattern",
                "typing.Literal",
                "None",
                "dict[str, int]"
            ],
            "arguments": {
                "level_name": [
                    "str"
                ]
            }
        }
    },
    "rikka-master/rikka/protocol.py": {
        "Protocol.set_secret_key": {
            "name": "set_secret_key",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "int",
                    "list[str]",
                    "bytes",
                    "set[]"
                ],
                "secretkey": [
                    "int",
                    "list[str]",
                    "bytes",
                    "set[]"
                ]
            }
        },
        "Protocol.recalc_crc32": {
            "name": "recalc_crc32",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "bytes",
                    "str",
                    "typing.Iterable[bytes]"
                ]
            }
        },
        "PKGBuilder.__init__": {
            "name": "__init__",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "protocol": [
                    "typing.Protocol"
                ]
            }
        },
        "PKGBuilder.__getattr__": {
            "name": "__getattr__",
            "location": 58,
            "return": [],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "PKGBuilder._build_bytes": {
            "name": "_build_bytes",
            "location": 61,
            "return": [],
            "arguments": {
                "self": [],
                "pkg_ver": [
                    "int"
                ],
                "pkg_type": [
                    "int"
                ],
                "prgm_ver": [
                    "int"
                ],
                "data": [
                    "tuple[]"
                ],
                "raw": [
                    "None",
                    "str",
                    "bytes",
                    "bool"
                ]
            }
        },
        "PKGBuilder.data_decode": {
            "name": "data_decode",
            "location": 72,
            "return": [],
            "arguments": {
                "self": [],
                "ptype": [
                    "typing.Callable[, ]",
                    "dict[, ]",
                    "list[]",
                    "typing.IO"
                ],
                "data_raw": [
                    "typing.Callable[, ]",
                    "dict[, ]",
                    "list[]",
                    "typing.IO"
                ]
            }
        },
        "PKGBuilder.data_encode": {
            "name": "data_encode",
            "location": 75,
            "return": [],
            "arguments": {
                "self": [],
                "ptype": [
                    "dict[str, typing.Any]",
                    "dict[, ]"
                ],
                "data": [
                    "dict[str, typing.Any]",
                    "dict[, ]"
                ]
            }
        },
        "PKGBuilder.pbuild_hs_m2s": {
            "name": "pbuild_hs_m2s",
            "location": 78,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PKGBuilder.pbuild_hs_s2m": {
            "name": "pbuild_hs_s2m",
            "location": 84,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PKGBuilder.pbuild_heart_beat": {
            "name": "pbuild_heart_beat",
            "location": 90,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PKGBuilder.decode_only": {
            "name": "decode_only",
            "location": 93,
            "return": [],
            "arguments": {
                "self": [],
                "raw": []
            }
        },
        "PKGBuilder.decode_verify": {
            "name": "decode_verify",
            "location": 111,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "raw": [
                    "str",
                    "int",
                    "None",
                    "list[str]",
                    "dict[str, typing.Any]",
                    "typing.Callable[..., int]"
                ],
                "pkg_type": [
                    "None",
                    "bool",
                    "str"
                ]
            }
        },
        "PKGBuilder.verify": {
            "name": "verify",
            "location": 119,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "pkg": [
                    "bytes"
                ]
            }
        }
    },
    "rikka-master/rikka/server.py": {
        "parse_args": {
            "name": "parse_args",
            "location": 303,
            "return": [],
            "arguments": {}
        },
        "main": {
            "name": "main",
            "location": 317,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "Server.__init__": {
            "name": "__init__",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pkgbuilder": [
                    "dict[, ]",
                    "str",
                    "list[]"
                ],
                "config": [
                    "dict[, ]"
                ]
            }
        },
        "Server.config": {
            "name": "config",
            "location": 52,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Server.start_listen": {
            "name": "start_listen",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Server.next_timeout": {
            "name": "next_timeout",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Server.reset_timeout": {
            "name": "reset_timeout",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Server.accept_expose": {
            "name": "accept_expose",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "expose_sock": [],
                "mask": [
                    "int",
                    "str",
                    "typing.Iterable[C]"
                ]
            }
        },
        "Server.accept_tunnel": {
            "name": "accept_tunnel",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tunnel_sock": [],
                "mask": [
                    "int",
                    "str",
                    "typing.Iterable[C]"
                ]
            }
        },
        "Server.prepare_transfer": {
            "name": "prepare_transfer",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "expose_conn": [
                    "str",
                    "typing.Sequence['cirq.Qid']",
                    "bool",
                    "None"
                ],
                "mask": [
                    "int",
                    "str",
                    "typing.Iterable[C]"
                ]
            }
        },
        "Server.dispatch_tunnel": {
            "name": "dispatch_tunnel",
            "location": 121,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "conn": [
                    "str",
                    "tuple[typing.Union[typing.Any,typing.Any,typing.Any]]",
                    "list[]",
                    "bytes",
                    "None"
                ],
                "mask": [],
                "buf": [
                    "str",
                    "tuple[typing.Union[typing.Any,typing.Any,typing.Any]]",
                    "list[]",
                    "bytes",
                    "None"
                ]
            }
        },
        "Server.dispatch_expose": {
            "name": "dispatch_expose",
            "location": 129,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "conn": [
                    "str",
                    "tuple[typing.Union[typing.Any,typing.Any,typing.Any]]",
                    "list[]",
                    "bytes",
                    "None"
                ],
                "mask": [],
                "buf": [
                    "str",
                    "tuple[typing.Union[typing.Any,typing.Any,typing.Any]]",
                    "list[]",
                    "bytes",
                    "None"
                ]
            }
        },
        "Server.transfer_from_expose": {
            "name": "transfer_from_expose",
            "location": 137,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "r_conn": [],
                "mask": [
                    "int",
                    "list[str]",
                    "list[]"
                ],
                "buf": [
                    "list[typing.Deque]"
                ]
            }
        },
        "Server.transfer_from_tunnel": {
            "name": "transfer_from_tunnel",
            "location": 168,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "r_conn": [],
                "mask": [
                    "int",
                    "list[str]",
                    "list[]"
                ],
                "buf": [
                    "list[typing.Deque]"
                ]
            }
        },
        "Server.send_to_tunnel": {
            "name": "send_to_tunnel",
            "location": 199,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "w_conn": [],
                "mask": [
                    "int",
                    "float",
                    "str",
                    "list[int]",
                    "list[list[str]]"
                ],
                "buf": [
                    "list[typing.Deque]"
                ]
            }
        },
        "Server.send_to_expose": {
            "name": "send_to_expose",
            "location": 216,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "w_conn": [],
                "mask": [
                    "int",
                    "float",
                    "str",
                    "list[int]",
                    "list[list[str]]"
                ],
                "buf": [
                    "list[typing.Deque]"
                ]
            }
        },
        "Server._handshake": {
            "name": "_handshake",
            "location": 233,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "conn_slaver": []
            }
        },
        "Server.find_available_tunnel": {
            "name": "find_available_tunnel",
            "location": 244,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Server.run_forever": {
            "name": "run_forever",
            "location": 262,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Server.exit": {
            "name": "exit",
            "location": 278,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Server.init_wake_fds": {
            "name": "init_wake_fds",
            "location": 285,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Server.init_signal": {
            "name": "init_signal",
            "location": 290,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Server.handle_signal": {
            "name": "handle_signal",
            "location": 297,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "expose_sock": [
                    "int",
                    "str",
                    "typing.Iterable[C]"
                ],
                "mask": [
                    "int",
                    "str",
                    "typing.Iterable[C]"
                ]
            }
        }
    },
    "rikka-master/rikka/utils.py": {
        "parse_netloc": {
            "name": "parse_netloc",
            "location": 10,
            "return": [
                "tuple[typing.Union[str,int]]"
            ],
            "arguments": {
                "netloc": [
                    "str"
                ]
            }
        },
        "set_non_blocking": {
            "name": "set_non_blocking",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "fd": [
                    "str",
                    "list[]"
                ]
            }
        },
        "format_addr": {
            "name": "format_addr",
            "location": 20,
            "return": [
                "str"
            ],
            "arguments": {
                "addr": [
                    "str",
                    "int",
                    "list[list[str]]",
                    "tuple[]"
                ]
            }
        },
        "create_listening_sock": {
            "name": "create_listening_sock",
            "location": 24,
            "return": [],
            "arguments": {
                "addr": [
                    "bool",
                    "float"
                ]
            }
        }
    },
    "rikka-master/rikka/__init__.py": {}
}
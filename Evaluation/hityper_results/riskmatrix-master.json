{
    "riskmatrix-master/setup.py": {},
    "riskmatrix-master/docs/conf.py": {},
    "riskmatrix-master/riskmatrix/axis.py": {
        "AxisPoint.__init__": {
            "name": "__init__",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "code": [
                    "str",
                    "int",
                    "list[int]",
                    "None"
                ],
                "name": [
                    "str",
                    "None",
                    "list[str]"
                ],
                "description": [
                    "str",
                    "int",
                    "list[int]",
                    "None"
                ],
                "value": [
                    "str",
                    "int",
                    "float"
                ],
                "axis": [
                    "str",
                    "int",
                    "list[int]",
                    "None"
                ]
            }
        },
        "AxisPoint.__repr__": {
            "name": "__repr__",
            "location": 46,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "AxisPoint.__str__": {
            "name": "__str__",
            "location": 49,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "AxisPoint.__eq__": {
            "name": "__eq__",
            "location": 52,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "str",
                    "float",
                    "None",
                    "int",
                    "tuple[]",
                    "list[]"
                ]
            }
        },
        "AxisPoint.__lt__": {
            "name": "__lt__",
            "location": 62,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "float"
                ]
            }
        },
        "AxisPoint.__hash__": {
            "name": "__hash__",
            "location": 68,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Axis.__init__": {
            "name": "__init__",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "dict[str, typing.Any]",
                    "list[str]",
                    "dict[, ]"
                ],
                "matrix": [
                    "int",
                    "str",
                    "typing.Sequence[]",
                    "None"
                ]
            }
        },
        "Axis.__repr__": {
            "name": "__repr__",
            "location": 83,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "Axis.__str__": {
            "name": "__str__",
            "location": 86,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Axis.__getitem__": {
            "name": "__getitem__",
            "location": 89,
            "return": [],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "None",
                    "tuple[]",
                    "dict[str, str]",
                    "int",
                    "typing.Callable[T, T]",
                    "typing.Type"
                ]
            }
        },
        "Axis.__len__": {
            "name": "__len__",
            "location": 92,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Axis.points": {
            "name": "points",
            "location": 96,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Axis.add_point": {
            "name": "add_point",
            "location": 104,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "point": [
                    "int",
                    "str",
                    "list[]",
                    "dict[, ]"
                ]
            }
        }
    },
    "riskmatrix-master/riskmatrix/category.py": {
        "Category.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "code": [
                    "str",
                    "bool",
                    "None",
                    "list[]"
                ],
                "name": [
                    "str",
                    "None",
                    "typing.Callable[[], int]",
                    "bool"
                ],
                "color": [
                    "str",
                    "bool",
                    "None",
                    "list[]"
                ],
                "text_color": [
                    "set[int]",
                    "str",
                    "None",
                    "int",
                    "typing.IO",
                    "typing.Callable[str, str]"
                ],
                "description": [
                    "typing.Text"
                ]
            }
        },
        "Category.__repr__": {
            "name": "__repr__",
            "location": 20,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "Category.__str__": {
            "name": "__str__",
            "location": 23,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "Category.__eq__": {
            "name": "__eq__",
            "location": 26,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Category.__lt__": {
            "name": "__lt__",
            "location": 31,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Category.__hash__": {
            "name": "__hash__",
            "location": 36,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "riskmatrix-master/riskmatrix/coordinate.py": {
        "Coordinate.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "points": [
                    "tuple[int]",
                    "bytes"
                ]
            }
        },
        "Coordinate.__repr__": {
            "name": "__repr__",
            "location": 25,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "Coordinate.__str__": {
            "name": "__str__",
            "location": 28,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "Coordinate.__getitem__": {
            "name": "__getitem__",
            "location": 32,
            "return": [],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "None",
                    "tuple[]",
                    "dict[str, str]",
                    "int",
                    "typing.Callable[T, T]",
                    "typing.Type"
                ]
            }
        },
        "Coordinate.__hash__": {
            "name": "__hash__",
            "location": 35,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Coordinate.__eq__": {
            "name": "__eq__",
            "location": 38,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "typing.Type",
                    "str"
                ]
            }
        },
        "Coordinate.__lt__": {
            "name": "__lt__",
            "location": 58,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "int",
                    "float"
                ]
            }
        },
        "Coordinate.value": {
            "name": "value",
            "location": 77,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Coordinate.category": {
            "name": "category",
            "location": 81,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Coordinate.__check_requirements": {
            "name": "__check_requirements",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "points": [
                    "list[dict[str, typing.Any]]"
                ]
            }
        }
    },
    "riskmatrix-master/riskmatrix/matrix.py": {
        "AxesDescriptor.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AxesDescriptor.__get__": {
            "name": "__get__",
            "location": 16,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "self": [],
                "instance": [
                    "typing.Type"
                ],
                "owner": [
                    "typing.Type"
                ]
            }
        },
        "AxesDescriptor.__getitem__": {
            "name": "__getitem__",
            "location": 19,
            "return": [],
            "arguments": {
                "self": [],
                "val": [
                    "str"
                ]
            }
        },
        "AxesDescriptor.__iter__": {
            "name": "__iter__",
            "location": 31,
            "return": [
                "AxesDescriptor"
            ],
            "arguments": {
                "self": []
            }
        },
        "AxesDescriptor.__next__": {
            "name": "__next__",
            "location": 35,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AxesDescriptor.__set__": {
            "name": "__set__",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "instance": [
                    "int",
                    "str"
                ],
                "val": [
                    "int",
                    "str"
                ]
            }
        },
        "AxesDescriptor.__delete__": {
            "name": "__delete__",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "instance": [
                    "str",
                    "bool",
                    "typing.Iterable[int]"
                ]
            }
        },
        "AxesDescriptor.add": {
            "name": "add",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "axis": [
                    "float",
                    "int"
                ]
            }
        },
        "RiskMatrix.__init__": {
            "name": "__init__",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "dict[str, typing.Any]",
                    "list[str]",
                    "dict[, ]"
                ]
            }
        },
        "RiskMatrix.__repr__": {
            "name": "__repr__",
            "location": 66,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "RiskMatrix.__str__": {
            "name": "__str__",
            "location": 69,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RiskMatrix.categories": {
            "name": "categories",
            "location": 73,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "RiskMatrix.coordinates": {
            "name": "coordinates",
            "location": 84,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "RiskMatrix.add_axis": {
            "name": "add_axis",
            "location": 92,
            "return": [
                "Axis"
            ],
            "arguments": {
                "self": [],
                "axis_name": [
                    "str",
                    "None"
                ]
            }
        },
        "RiskMatrix._convert_number_to_letter": {
            "name": "_convert_number_to_letter",
            "location": 139,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": [],
                "number": [
                    "int",
                    "float"
                ]
            }
        },
        "RiskMatrix.add_category": {
            "name": "add_category",
            "location": 173,
            "return": [
                "Category"
            ],
            "arguments": {
                "self": [],
                "code": [
                    "str",
                    "None"
                ],
                "name": [
                    "str",
                    "None"
                ],
                "color": [
                    "str",
                    "None"
                ],
                "text_color": [
                    "str",
                    "None"
                ],
                "description": [
                    "typing.Text"
                ]
            }
        },
        "RiskMatrix.map_coordinate": {
            "name": "map_coordinate",
            "location": 196,
            "return": [
                "Coordinate"
            ],
            "arguments": {
                "self": [],
                "category": [
                    "dict[, ]",
                    "bool",
                    "float",
                    "None"
                ],
                "points": [
                    "bytes",
                    "dict[str, typing.Any]",
                    "str"
                ]
            }
        },
        "RiskMatrix.map_coordinates": {
            "name": "map_coordinates",
            "location": 218,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "category": [
                    "float",
                    "str",
                    "bool"
                ],
                "coordinates": [
                    "str",
                    "dict[str, typing.Any]",
                    "dict[, ]"
                ]
            }
        },
        "RiskMatrix.get_category": {
            "name": "get_category",
            "location": 234,
            "return": [],
            "arguments": {
                "self": [],
                "coordinate": [
                    "str",
                    "bool",
                    "typing.Callable[, ]",
                    "list[str]"
                ]
            }
        },
        "RiskMatrix.get_coordinate": {
            "name": "get_coordinate",
            "location": 253,
            "return": [],
            "arguments": {
                "self": [],
                "coordinate": [
                    "str"
                ]
            }
        }
    },
    "riskmatrix-master/riskmatrix/__init__.py": {},
    "riskmatrix-master/tests/test_riskmatrix.py": {
        "rm": {
            "name": "rm",
            "location": 6,
            "return": [
                "RiskMatrix"
            ],
            "arguments": {}
        },
        "rm_points": {
            "name": "rm_points",
            "location": 11,
            "return": [
                "tuple[Point]"
            ],
            "arguments": {}
        },
        "rm_categories": {
            "name": "rm_categories",
            "location": 23,
            "return": [
                "tuple[tuple[typing.Text]]"
            ],
            "arguments": {}
        },
        "rm_with_axis": {
            "name": "rm_with_axis",
            "location": 32,
            "return": [],
            "arguments": {
                "rm": [],
                "rm_points": []
            }
        },
        "rm_with_categories": {
            "name": "rm_with_categories",
            "location": 42,
            "return": [
                "int",
                "typing.Callable[, ]",
                "str"
            ],
            "arguments": {
                "rm_with_axis": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ],
                "rm_categories": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ]
            }
        },
        "rm_coordinates": {
            "name": "rm_coordinates",
            "location": 54,
            "return": [
                "tuple[Coordinate]"
            ],
            "arguments": {
                "rm_with_categories": [
                    "int",
                    "tuple[typing.Union[int,int,int,int]]",
                    "dict[, ]"
                ]
            }
        },
        "rm_full": {
            "name": "rm_full",
            "location": 73,
            "return": [
                "bool",
                "list[str]",
                "None",
                "str",
                "typing.Callable[typing.Any, None]"
            ],
            "arguments": {
                "rm_with_categories": [
                    "bool",
                    "list[str]",
                    "None",
                    "str",
                    "typing.Callable[typing.Any, None]"
                ],
                "rm_coordinates": [
                    "str",
                    "typing.Callable[[], typing.Any]",
                    "bool",
                    "typing.Type"
                ]
            }
        },
        "TestRiskMatrix.test_riskmatrix_name": {
            "name": "test_riskmatrix_name",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRiskMatrix.test_sorted_coordinates": {
            "name": "test_sorted_coordinates",
            "location": 102,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "rm_full": []
            }
        },
        "TestRiskMatrix.test_coordinates_have_right_category": {
            "name": "test_coordinates_have_right_category",
            "location": 112,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "rm_full": [
                    "bool",
                    "str",
                    "typing.Type"
                ]
            }
        },
        "TestRiskMatrix.test_coordinates_order_alphabetical": {
            "name": "test_coordinates_order_alphabetical",
            "location": 133,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "rm_full": [
                    "str",
                    "dict[str, float]",
                    "int"
                ],
                "rm_coordinates": [
                    "bool",
                    "typing.Iterable[typing.Any]",
                    "typing.Sequence[typing.Any]"
                ]
            }
        },
        "TestRiskMatrix.test_coordinate_median": {
            "name": "test_coordinate_median",
            "location": 148,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "rm_full": []
            }
        },
        "TestRiskMatrix.test_convert_number_to_letter": {
            "name": "test_convert_number_to_letter",
            "location": 162,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAxis.test_add_axis_with_points": {
            "name": "test_add_axis_with_points",
            "location": 172,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "rm": [],
                "rm_points": []
            }
        },
        "TestAxis.test_add_axis_conflicting_named_arguments": {
            "name": "test_add_axis_conflicting_named_arguments",
            "location": 187,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "rm": [],
                "rm_points": [
                    "str"
                ]
            }
        },
        "TestAxis.test_add_axis_requires_named_arguments": {
            "name": "test_add_axis_requires_named_arguments",
            "location": 198,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "rm": [],
                "rm_points": [
                    "str"
                ]
            }
        },
        "TestAxis.test_add_axis_with_size": {
            "name": "test_add_axis_with_size",
            "location": 206,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "rm": []
            }
        },
        "TestAxis.test_convert_number_to_letter": {
            "name": "test_convert_number_to_letter",
            "location": 215,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "rm": []
            }
        },
        "TestCategory.test_add_category": {
            "name": "test_add_category",
            "location": 233,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "rm": [],
                "rm_categories": [
                    "bool",
                    "str",
                    "typing.Iterable[typing.Any]"
                ]
            }
        },
        "TestCategory.test_get_categories": {
            "name": "test_get_categories",
            "location": 246,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "rm_with_categories": [
                    "bool",
                    "str",
                    "dict[str, float]"
                ],
                "rm_categories": [
                    "bool",
                    "str",
                    "dict[str, float]"
                ]
            }
        },
        "TestCategory.test_category_value": {
            "name": "test_category_value",
            "location": 254,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "rm_with_categories": []
            }
        },
        "TestCategory.test_max_category": {
            "name": "test_max_category",
            "location": 261,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "rm_full": [
                    "int"
                ]
            }
        },
        "TestCoordinate.test_add_coordinate": {
            "name": "test_add_coordinate",
            "location": 266,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "rm_with_categories": [],
                "rm_coordinates": [
                    "bool",
                    "str",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "TestCoordinate.test_add_multiple_points_on_one_axis": {
            "name": "test_add_multiple_points_on_one_axis",
            "location": 280,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "rm_with_axis": [
                    "bool",
                    "str",
                    "typing.Iterable[typing.Any]"
                ]
            }
        },
        "TestCoordinate.test_get_coordinate": {
            "name": "test_get_coordinate",
            "location": 295,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "rm_with_categories": []
            }
        },
        "TestCoordinate.test_equivalent_coordinate_value": {
            "name": "test_equivalent_coordinate_value",
            "location": 311,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "rm_full": []
            }
        },
        "TestCoordinate.test_equivalent_coordinate_value_order": {
            "name": "test_equivalent_coordinate_value_order",
            "location": 327,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "rm_full": []
            }
        },
        "TestCoordinate.test_equivalent_category_value": {
            "name": "test_equivalent_category_value",
            "location": 341,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "rm_with_categories": []
            }
        },
        "TestCoordinate.test_coordinate_code": {
            "name": "test_coordinate_code",
            "location": 355,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "rm_with_categories": []
            }
        },
        "TestCoordinate.test_max_coordinate": {
            "name": "test_max_coordinate",
            "location": 369,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "rm_full": [
                    "str"
                ]
            }
        },
        "TestCoordinate.test_add_wrong_coordinate": {
            "name": "test_add_wrong_coordinate",
            "location": 377,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "rm_with_categories": [
                    "str",
                    "list[str]"
                ]
            }
        }
    },
    "riskmatrix-master/tests/__init__.py": {}
}
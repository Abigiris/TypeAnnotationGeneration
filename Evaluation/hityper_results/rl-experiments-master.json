{
    "rl-experiments-master/main.py": {},
    "rl-experiments-master/tests.py": {
        "check_types": {
            "name": "check_types",
            "location": 1,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_StationaryKArmed": {
            "name": "test_StationaryKArmed",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_EpsilonKArmedLearner": {
            "name": "test_EpsilonKArmedLearner",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "rl-experiments-master/rl/__init__.py": {},
    "rl-experiments-master/rl/algos/bandit.py": {
        "KArmedLearner.step": {
            "name": "step",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "KArmedLearner.estimates": {
            "name": "estimates",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EpsilonKArmedLearner.__init__": {
            "name": "__init__",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "bandit": [],
                "epsilon": [],
                "alpha": [],
                "initializer": [
                    "None"
                ],
                "seed": [
                    "None"
                ]
            }
        },
        "EpsilonKArmedLearner.epsilon": {
            "name": "epsilon",
            "location": 73,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "EpsilonKArmedLearner.alpha": {
            "name": "alpha",
            "location": 76,
            "return": [],
            "arguments": {
                "self": [],
                "k": []
            }
        },
        "EpsilonKArmedLearner.step": {
            "name": "step",
            "location": 81,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "EpsilonKArmedLearner.estimates": {
            "name": "estimates",
            "location": 102,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "rl-experiments-master/rl/algos/__init__.py": {},
    "rl-experiments-master/rl/experiments/kivy_mpl_test.py": {
        "callback": {
            "name": "callback",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "instance": [
                    "int",
                    "str",
                    "typing.Iterable[C]"
                ]
            }
        },
        "MatplotlibTest.build": {
            "name": "build",
            "location": 66,
            "return": [
                "BoxLayout"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "rl-experiments-master/rl/experiments/__init__.py": {},
    "rl-experiments-master/rl/experiments/bandit/controller.py": {
        "KArmedController.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "agent": [
                    "int",
                    "float"
                ],
                "views": [
                    "dict[typing.Union[int,str,str,str,str,str,str,str], int]",
                    "str",
                    "dict[, ]"
                ]
            }
        },
        "KArmedController.state": {
            "name": "state",
            "location": 26,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "KArmedController.start": {
            "name": "start",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "KArmedController.stop": {
            "name": "stop",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "rl-experiments-master/rl/experiments/bandit/controller_protocol.py": {
        "KArmedControllerViewerHandle.start": {
            "name": "start",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "KArmedControllerViewerHandle.stop": {
            "name": "stop",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "rl-experiments-master/rl/experiments/bandit/__init__.py": {},
    "rl-experiments-master/rl/experiments/bandit/viewer/graphical.py": {
        "KivyMplKArmedViewer.build": {
            "name": "build",
            "location": 30,
            "return": [
                "BoxLayout"
            ],
            "arguments": {
                "self": []
            }
        },
        "KivyMplKArmedViewer._callback": {
            "name": "_callback",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_": [
                    "int",
                    "str",
                    "typing.Iterable[C]"
                ]
            }
        },
        "KivyMplKArmedViewer.prepare_plot": {
            "name": "prepare_plot",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "KivyMplKArmedViewer.open": {
            "name": "open",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "KivyMplKArmedViewer.close": {
            "name": "close",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "KivyMplKArmedViewer.update": {
            "name": "update",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "dict[str, typing.Any]",
                    "dict[str, str]"
                ]
            }
        }
    },
    "rl-experiments-master/rl/experiments/bandit/viewer/terminal.py": {
        "TerminalKArmedViewer.open": {
            "name": "open",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TerminalKArmedViewer.close": {
            "name": "close",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TerminalKArmedViewer.set_controller": {
            "name": "set_controller",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "c": [
                    "bool",
                    "list[str]",
                    "str"
                ]
            }
        }
    },
    "rl-experiments-master/rl/experiments/bandit/viewer/__init__.py": {
        "KArmedViewer.set_controller": {
            "name": "set_controller",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "controller": [
                    "int",
                    "str"
                ]
            }
        },
        "KArmedViewer.open": {
            "name": "open",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "KArmedViewer.close": {
            "name": "close",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "rl-experiments-master/rl/world/__init__.py": {},
    "rl-experiments-master/rl/world/bandit/__init__.py": {
        "KArmed.k": {
            "name": "k",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "KArmed.means": {
            "name": "means",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "KArmed.pull_lever": {
            "name": "pull_lever",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "i": [
                    "int",
                    "float"
                ]
            }
        },
        "StationaryKArmed.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "k": [
                    "int",
                    "float",
                    "dict[str, int]",
                    "dict[int, str]",
                    "list[int]"
                ],
                "seed": [
                    "None",
                    "int",
                    "str"
                ]
            }
        },
        "StationaryKArmed.k": {
            "name": "k",
            "location": 30,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "StationaryKArmed.means": {
            "name": "means",
            "location": 35,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "StationaryKArmed.pull_lever": {
            "name": "pull_lever",
            "location": 40,
            "return": [],
            "arguments": {
                "self": [],
                "i": [
                    "float",
                    "str",
                    "list[int]",
                    "int"
                ]
            }
        }
    }
}
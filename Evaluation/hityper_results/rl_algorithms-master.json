{
    "rl_algorithms-master/run_lunarlander_continuous_v2.py": {
        "parse_args": {
            "name": "parse_args",
            "location": 19,
            "return": [],
            "arguments": {}
        },
        "main": {
            "name": "main",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "rl_algorithms-master/run_lunarlander_v2.py": {
        "parse_args": {
            "name": "parse_args",
            "location": 19,
            "return": [],
            "arguments": {}
        },
        "main": {
            "name": "main",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "rl_algorithms-master/run_pong_no_frameskip_v4.py": {
        "parse_args": {
            "name": "parse_args",
            "location": 17,
            "return": [],
            "arguments": {}
        },
        "env_generator": {
            "name": "env_generator",
            "location": 87,
            "return": [],
            "arguments": {
                "env_name": [
                    "str",
                    "typing.Iterable[str]"
                ],
                "max_episode_steps": [
                    "str",
                    "typing.Iterable[str]"
                ],
                "frame_stack": [
                    "str",
                    "typing.Iterable[str]"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "env_generator._thunk": {
            "name": "_thunk",
            "location": 88,
            "return": [],
            "arguments": {
                "rank": []
            }
        }
    },
    "rl_algorithms-master/run_reacher_v2.py": {
        "parse_args": {
            "name": "parse_args",
            "location": 19,
            "return": [],
            "arguments": {}
        },
        "main": {
            "name": "main",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "rl_algorithms-master/setup.py": {
        "get_version": {
            "name": "get_version",
            "location": 12,
            "return": [
                "str",
                "dict[str, str]"
            ],
            "arguments": {}
        }
    },
    "rl_algorithms-master/configs/lunarlander_continuous_v2/__init__.py": {},
    "rl_algorithms-master/configs/lunarlander_v2/__init__.py": {},
    "rl_algorithms-master/configs/pong_no_frameskip_v4/__init__.py": {},
    "rl_algorithms-master/configs/reacher_v2/__init__.py": {},
    "rl_algorithms-master/rl_algorithms/registry.py": {
        "build_agent": {
            "name": "build_agent",
            "location": 14,
            "return": [],
            "arguments": {
                "cfg": [
                    "str"
                ],
                "build_args": [
                    "None",
                    "str"
                ]
            }
        },
        "build_learner": {
            "name": "build_learner",
            "location": 19,
            "return": [],
            "arguments": {
                "cfg": [
                    "str"
                ],
                "build_args": [
                    "None",
                    "str"
                ]
            }
        },
        "build_backbone": {
            "name": "build_backbone",
            "location": 24,
            "return": [],
            "arguments": {
                "cfg": [
                    "str"
                ],
                "build_args": [
                    "None",
                    "str"
                ]
            }
        },
        "build_head": {
            "name": "build_head",
            "location": 29,
            "return": [],
            "arguments": {
                "cfg": [
                    "str"
                ],
                "build_args": [
                    "None",
                    "str"
                ]
            }
        },
        "build_loss": {
            "name": "build_loss",
            "location": 34,
            "return": [],
            "arguments": {
                "cfg": [
                    "str"
                ],
                "build_args": [
                    "None",
                    "str"
                ]
            }
        },
        "build_her": {
            "name": "build_her",
            "location": 39,
            "return": [],
            "arguments": {
                "cfg": [
                    "list[dict[, ]]"
                ],
                "build_args": [
                    "None",
                    "list[dict[, ]]"
                ]
            }
        },
        "build_worker": {
            "name": "build_worker",
            "location": 44,
            "return": [],
            "arguments": {
                "cfg": [
                    "str"
                ],
                "build_args": [
                    "None",
                    "str"
                ]
            }
        },
        "build_logger": {
            "name": "build_logger",
            "location": 50,
            "return": [],
            "arguments": {
                "cfg": [
                    "int"
                ],
                "build_args": [
                    "None",
                    "int"
                ]
            }
        }
    },
    "rl_algorithms-master/rl_algorithms/__init__.py": {},
    "rl_algorithms-master/rl_algorithms/a2c/agent.py": {
        "A2CAgent.__init__": {
            "name": "__init__",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "env": [
                    "bool",
                    "typing.Callable[, ]"
                ],
                "env_info": [
                    "bool",
                    "typing.Callable[, ]"
                ],
                "hyper_params": [
                    "dict[str, typing.Any]",
                    "bool",
                    "typing.Callable[, ]"
                ],
                "learner_cfg": [
                    "bool",
                    "list[]",
                    "typing.Mapping"
                ],
                "log_cfg": [
                    "bool",
                    "typing.Callable[, ]"
                ],
                "is_test": [
                    "bool",
                    "typing.Callable[, ]"
                ],
                "load_from": [
                    "bool",
                    "typing.Callable[, ]"
                ],
                "is_render": [
                    "bool",
                    "typing.Callable[, ]"
                ],
                "render_after": [
                    "bool",
                    "typing.Callable[, ]"
                ],
                "is_log": [
                    "bool",
                    "typing.Callable[, ]"
                ],
                "save_period": [
                    "bool",
                    "typing.Callable[, ]"
                ],
                "episode_num": [
                    "bool",
                    "typing.Callable[, ]"
                ],
                "max_episode_steps": [
                    "bool",
                    "typing.Callable[, ]"
                ],
                "interim_test_num": [
                    "bool",
                    "typing.Callable[, ]"
                ]
            }
        },
        "A2CAgent.select_action": {
            "name": "select_action",
            "location": 94,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "self": [],
                "state": []
            }
        },
        "A2CAgent.step": {
            "name": "step",
            "location": 110,
            "return": [
                "tuple[typing.Union[list[],tuple[typing.Union[str,str]],str,tuple[],dict[, ],int,set[],bytes,list[tuple[typing.Union[int,int]]]]]"
            ],
            "arguments": {
                "self": [],
                "action": [
                    "bool",
                    "dict[str, typing.Any]",
                    "None",
                    "list[str]"
                ]
            }
        },
        "A2CAgent.write_log": {
            "name": "write_log",
            "location": 124,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "log_value": [
                    "tuple[]",
                    "str",
                    "bool",
                    "typing.Callable[..., T]"
                ]
            }
        },
        "A2CAgent.train": {
            "name": "train",
            "location": 144,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "rl_algorithms-master/rl_algorithms/a2c/learner.py": {
        "A2CLearner.__init__": {
            "name": "__init__",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "hyper_params": [
                    "bool",
                    "str",
                    "None",
                    "float",
                    "list[str]"
                ],
                "log_cfg": [
                    "bool",
                    "str",
                    "None",
                    "float",
                    "list[str]"
                ],
                "backbone": [
                    "bool",
                    "str",
                    "float"
                ],
                "head": [
                    "bool",
                    "str",
                    "float"
                ],
                "optim_cfg": [
                    "bool",
                    "str",
                    "float"
                ],
                "env_name": [
                    "bool",
                    "str",
                    "None",
                    "float",
                    "list[str]"
                ],
                "state_size": [
                    "int",
                    "str",
                    "None"
                ],
                "output_size": [
                    "int",
                    "None",
                    "tuple[typing.Union[int,int]]"
                ],
                "is_test": [
                    "bool",
                    "str",
                    "None",
                    "float",
                    "list[str]"
                ],
                "load_from": [
                    "bool",
                    "str",
                    "float"
                ]
            }
        },
        "A2CLearner._init_network": {
            "name": "_init_network",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "A2CLearner.update_model": {
            "name": "update_model",
            "location": 80,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "self": [],
                "experience": [
                    "dict[, ]",
                    "bytes"
                ]
            }
        },
        "A2CLearner.save_params": {
            "name": "save_params",
            "location": 117,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "n_episode": [
                    "int",
                    "bytes",
                    "str"
                ]
            }
        },
        "A2CLearner.load_params": {
            "name": "load_params",
            "location": 128,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "typing.Sequence[str]"
                ]
            }
        },
        "A2CLearner.get_state_dict": {
            "name": "get_state_dict",
            "location": 139,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "A2CLearner.get_policy": {
            "name": "get_policy",
            "location": 143,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "rl_algorithms-master/rl_algorithms/a2c/__init__.py": {},
    "rl_algorithms-master/rl_algorithms/acer/agent.py": {
        "ACERAgent.__init__": {
            "name": "__init__",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "env": [
                    "bool",
                    "typing.Callable[, ]"
                ],
                "env_info": [
                    "bool",
                    "typing.Callable[, ]"
                ],
                "hyper_params": [
                    "dict[str, typing.Any]",
                    "bool",
                    "dict[, ]"
                ],
                "learner_cfg": [
                    "bool",
                    "list[]",
                    "typing.Mapping"
                ],
                "log_cfg": [
                    "bool",
                    "typing.Callable[, ]"
                ],
                "is_test": [
                    "bool",
                    "typing.Callable[, ]"
                ],
                "load_from": [
                    "bool",
                    "typing.Callable[, ]"
                ],
                "is_render": [
                    "bool",
                    "typing.Callable[, ]"
                ],
                "render_after": [
                    "bool",
                    "typing.Callable[, ]"
                ],
                "is_log": [
                    "bool",
                    "typing.Callable[, ]"
                ],
                "save_period": [
                    "bool",
                    "typing.Callable[, ]"
                ],
                "episode_num": [
                    "bool",
                    "typing.Callable[, ]"
                ],
                "max_episode_steps": [
                    "bool",
                    "typing.Callable[, ]"
                ],
                "interim_test_num": [
                    "bool",
                    "typing.Callable[, ]"
                ]
            }
        },
        "ACERAgent.select_action": {
            "name": "select_action",
            "location": 89,
            "return": [
                "tuple[typing.Union[dict[tuple[typing.Union[typing.Any,typing.Any]], typing.Any],dict[, ],typing.Type,bytes,set[tuple[typing.Union[str,str]]],dict[str, str]]]"
            ],
            "arguments": {
                "self": [],
                "state": []
            }
        },
        "ACERAgent.step": {
            "name": "step",
            "location": 98,
            "return": [
                "tuple[typing.Union[list[],str,list[dict[, ]],bytes,int,list[tuple[]],float,list[int],dict[, ],list[tuple[typing.Union[int,int]]],tuple[typing.Union[typing.Any,typing.Any,typing.Any,typing.Any,typing.Any,typing.Any]]]]"
            ],
            "arguments": {
                "self": [],
                "action": [
                    "dict[, ]",
                    "str"
                ]
            }
        },
        "ACERAgent.write_log": {
            "name": "write_log",
            "location": 104,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "log_value": [
                    "int",
                    "None",
                    "list[int]"
                ]
            }
        },
        "ACERAgent.train": {
            "name": "train",
            "location": 115,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "rl_algorithms-master/rl_algorithms/acer/buffer.py": {
        "ReplayMemory.__init__": {
            "name": "__init__",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "buffer_size": [
                    "int"
                ],
                "n_rollout": [
                    "int",
                    "list[]",
                    "str"
                ]
            }
        },
        "ReplayMemory.add": {
            "name": "add",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "seq_data": [
                    "list[]",
                    "str"
                ]
            }
        },
        "ReplayMemory._initialize_buffers": {
            "name": "_initialize_buffers",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "list[int]",
                    "int"
                ],
                "probs": [
                    "list[int]",
                    "int"
                ]
            }
        },
        "ReplayMemory.sample": {
            "name": "sample",
            "location": 73,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "self": [],
                "on_policy": [
                    "bool"
                ]
            }
        },
        "ReplayMemory.__len__": {
            "name": "__len__",
            "location": 100,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "rl_algorithms-master/rl_algorithms/acer/learner.py": {
        "ACERLearner.__init__": {
            "name": "__init__",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "backbone": [
                    "bool"
                ],
                "head": [
                    "bool"
                ],
                "optim_cfg": [
                    "bool"
                ],
                "trust_region": [
                    "bool"
                ],
                "hyper_params": [
                    "bool",
                    "str",
                    "typing.Callable[, ]"
                ],
                "log_cfg": [
                    "bool",
                    "float",
                    "str"
                ],
                "env_info": [
                    "bool",
                    "float",
                    "typing.Final",
                    "str",
                    "None",
                    "list[str]"
                ],
                "is_test": [
                    "bool",
                    "float",
                    "str"
                ],
                "load_from": [
                    "bool"
                ]
            }
        },
        "ACERLearner._init_network": {
            "name": "_init_network",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ACERLearner.update_model": {
            "name": "update_model",
            "location": 78,
            "return": [],
            "arguments": {
                "self": [],
                "experience": [
                    "int",
                    "str",
                    "bytes"
                ]
            }
        },
        "ACERLearner.q_retrace": {
            "name": "q_retrace",
            "location": 151,
            "return": [
                "list[]",
                "float",
                "list[int]",
                "typing.DefaultDict"
            ],
            "arguments": {
                "reward": [],
                "done": [
                    "int"
                ],
                "q_a": [
                    "int"
                ],
                "v": [
                    "list[int]"
                ],
                "rho_bar": [
                    "int"
                ],
                "gamma": [
                    "int"
                ]
            }
        },
        "ACERLearner.save_params": {
            "name": "save_params",
            "location": 172,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "n_episode": [
                    "int",
                    "bytes",
                    "str"
                ]
            }
        },
        "ACERLearner.load_params": {
            "name": "load_params",
            "location": 181,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "typing.Sequence[str]"
                ]
            }
        },
        "ACERLearner.get_state_dict": {
            "name": "get_state_dict",
            "location": 191,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ACERLearner.get_policy": {
            "name": "get_policy",
            "location": 195,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "rl_algorithms-master/rl_algorithms/acer/__init__.py": {},
    "rl_algorithms-master/rl_algorithms/bc/ddpg_agent.py": {
        "BCDDPGAgent._initialize": {
            "name": "_initialize",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BCDDPGAgent._preprocess_state": {
            "name": "_preprocess_state",
            "location": 88,
            "return": [],
            "arguments": {
                "self": [],
                "state": []
            }
        },
        "BCDDPGAgent._add_transition_to_memory": {
            "name": "_add_transition_to_memory",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "transition": [
                    "list[list[]]"
                ]
            }
        },
        "BCDDPGAgent.write_log": {
            "name": "write_log",
            "location": 113,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "log_value": [
                    "tuple[]",
                    "bytes",
                    "bool",
                    "str",
                    "float"
                ]
            }
        },
        "BCDDPGAgent.train": {
            "name": "train",
            "location": 146,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "rl_algorithms-master/rl_algorithms/bc/ddpg_learner.py": {
        "BCDDPGLearner.update_model": {
            "name": "update_model",
            "location": 28,
            "return": [],
            "arguments": {
                "self": [],
                "experience": [],
                "demos": []
            }
        }
    },
    "rl_algorithms-master/rl_algorithms/bc/her.py": {
        "L1DistanceRewardFn.__call__": {
            "name": "__call__",
            "location": 17,
            "return": [],
            "arguments": {
                "self": [],
                "transition": [],
                "goal_state": []
            }
        },
        "LunarLanderContinuousHER.__init__": {
            "name": "__init__",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "reward_fn": [
                    "L1DistanceRewardFn"
                ]
            }
        },
        "LunarLanderContinuousHER.fetch_desired_states_from_demo": {
            "name": "fetch_desired_states_from_demo",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "demo": [
                    "list[]",
                    "set[typing.Optional[str]]",
                    "float",
                    "int"
                ]
            }
        },
        "LunarLanderContinuousHER.get_desired_state": {
            "name": "get_desired_state",
            "location": 55,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LunarLanderContinuousHER._get_final_state": {
            "name": "_get_final_state",
            "location": 59,
            "return": [],
            "arguments": {
                "self": [],
                "transition": [
                    "tuple[]"
                ]
            }
        },
        "LunarLanderContinuousHER.generate_demo_transitions": {
            "name": "generate_demo_transitions",
            "location": 63,
            "return": [
                "list[str]"
            ],
            "arguments": {
                "self": [],
                "demo": [
                    "str"
                ]
            }
        },
        "ReacherRewardFn.__call__": {
            "name": "__call__",
            "location": 84,
            "return": [
                "list[typing.Union[int,str]]",
                "list[typing.Union[list[int],str]]",
                "str",
                "list[str]"
            ],
            "arguments": {
                "self": [],
                "transition": [
                    "tuple[]"
                ],
                "_": [
                    "dict[, ]"
                ]
            }
        },
        "ReacherHER.__init__": {
            "name": "__init__",
            "location": 101,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "reward_fn": [
                    "ReacherRewardFn"
                ]
            }
        },
        "ReacherHER.fetch_desired_states_from_demo": {
            "name": "fetch_desired_states_from_demo",
            "location": 108,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_": [
                    "list[]"
                ]
            }
        },
        "ReacherHER.get_desired_state": {
            "name": "get_desired_state",
            "location": 115,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ReacherHER._get_final_state": {
            "name": "_get_final_state",
            "location": 122,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "transition_final": [
                    "tuple[]",
                    "str",
                    "list[str]"
                ]
            }
        },
        "ReacherHER.generate_demo_transitions": {
            "name": "generate_demo_transitions",
            "location": 126,
            "return": [
                "int",
                "str",
                "typing.Iterable[C]"
            ],
            "arguments": {
                "self": [],
                "demo": [
                    "int",
                    "str",
                    "typing.Iterable[C]"
                ]
            }
        },
        "ReacherHER._append_origin_transitions": {
            "name": "_append_origin_transitions",
            "location": 133,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "origin_transitions": [
                    "list[]"
                ],
                "transition": [
                    "str",
                    "list[]",
                    "tuple[]",
                    "typing.Callable[[], None]"
                ],
                "_": [
                    "int",
                    "str",
                    "typing.Iterable[C]"
                ]
            }
        },
        "ReacherHER._get_transition": {
            "name": "_get_transition",
            "location": 139,
            "return": [
                "tuple[typing.Union[set[],typing.Generator[typing.Union[typing.Any,typing.Any,typing.Any]],list[tuple[]],list[],int,list[int],dict[, ]]]"
            ],
            "arguments": {
                "self": [],
                "transition": [
                    "bool"
                ],
                "goal_state": [
                    "int"
                ]
            }
        }
    },
    "rl_algorithms-master/rl_algorithms/bc/sac_agent.py": {
        "BCSACAgent._initialize": {
            "name": "_initialize",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BCSACAgent._preprocess_state": {
            "name": "_preprocess_state",
            "location": 85,
            "return": [],
            "arguments": {
                "self": [],
                "state": []
            }
        },
        "BCSACAgent._add_transition_to_memory": {
            "name": "_add_transition_to_memory",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "transition": [
                    "list[list[]]"
                ]
            }
        },
        "BCSACAgent.write_log": {
            "name": "write_log",
            "location": 110,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "log_value": [
                    "tuple[]",
                    "dict[str, typing.Any]",
                    "dict[, ]",
                    "str"
                ]
            }
        },
        "BCSACAgent.train": {
            "name": "train",
            "location": 149,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "rl_algorithms-master/rl_algorithms/bc/sac_learner.py": {
        "BCSACLearner.update_model": {
            "name": "update_model",
            "location": 19,
            "return": [],
            "arguments": {
                "self": [],
                "experience": [],
                "demos": []
            }
        }
    },
    "rl_algorithms-master/rl_algorithms/bc/__init__.py": {},
    "rl_algorithms-master/rl_algorithms/common/grad_cam.py": {
        "CAMBaseWrapper.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "model": []
            }
        },
        "CAMBaseWrapper._encode_one_hot": {
            "name": "_encode_one_hot",
            "location": 29,
            "return": [
                "tuple[typing.Union[str,str,str]]",
                "int"
            ],
            "arguments": {
                "self": [],
                "ids": [
                    "int",
                    "list[int]",
                    "str"
                ]
            }
        },
        "CAMBaseWrapper.forward": {
            "name": "forward",
            "location": 35,
            "return": [
                "int",
                "str",
                "tuple[typing.Union[typing.Literal,typing.Literal,typing.Literal,typing.Literal,typing.Literal,typing.Literal,typing.Literal,typing.Literal,typing.Literal,typing.Literal,typing.Literal,typing.Literal,typing.Literal]]",
                "typing.Type"
            ],
            "arguments": {
                "self": [],
                "image": [
                    "str",
                    "list[dict[str, typing.Any]]"
                ]
            }
        },
        "CAMBaseWrapper.backward": {
            "name": "backward",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ids": [
                    "str",
                    "int"
                ]
            }
        },
        "CAMBaseWrapper.generate": {
            "name": "generate",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "target_layer": [
                    "int",
                    "str",
                    "typing.Iterable[C]"
                ]
            }
        },
        "CAMBaseWrapper.remove_hook": {
            "name": "remove_hook",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GradCAM.__init__": {
            "name": "__init__",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "model": [
                    "list[str]",
                    "list[dict[str, typing.Any]]",
                    "tuple[typing.Union[str,set[str]]]",
                    "str"
                ],
                "candidate_layers": [
                    "None",
                    "bool",
                    "typing.Type"
                ]
            }
        },
        "GradCAM._find": {
            "name": "_find",
            "location": 102,
            "return": [],
            "arguments": {
                "pool": [],
                "target_layer": [
                    "str",
                    "float"
                ]
            }
        },
        "GradCAM._compute_grad_weights": {
            "name": "_compute_grad_weights",
            "location": 110,
            "return": [],
            "arguments": {
                "grads": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ]
            }
        },
        "GradCAM.forward": {
            "name": "forward",
            "location": 114,
            "return": [],
            "arguments": {
                "self": [],
                "image": [
                    "int"
                ]
            }
        },
        "GradCAM.generate": {
            "name": "generate",
            "location": 119,
            "return": [],
            "arguments": {
                "self": [],
                "target_layer": [
                    "list[int]"
                ]
            }
        },
        "GradCAM.__init__.forward_hook": {
            "name": "forward_hook",
            "location": 80,
            "return": [],
            "arguments": {
                "key": []
            }
        },
        "GradCAM.__init__.backward_hook": {
            "name": "backward_hook",
            "location": 87,
            "return": [],
            "arguments": {
                "key": []
            }
        },
        "GradCAM.__init__.forward_hook.forward_hook_": {
            "name": "forward_hook_",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "_": [],
                "__": [],
                "output": []
            }
        },
        "GradCAM.__init__.backward_hook.backward_hook_": {
            "name": "backward_hook_",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "_": [],
                "__": [],
                "grad_out": []
            }
        }
    },
    "rl_algorithms-master/rl_algorithms/common/helper_functions.py": {
        "tanh": {
            "name": "tanh",
            "location": 21,
            "return": [],
            "arguments": {
                "x": [
                    "int",
                    "float",
                    "str"
                ]
            }
        },
        "identity": {
            "name": "identity",
            "location": 26,
            "return": [
                "bool",
                "float",
                "typing.Iterable[typing.Iterable[float]]",
                "str",
                "bytes"
            ],
            "arguments": {
                "x": [
                    "bool",
                    "float",
                    "typing.Iterable[typing.Iterable[float]]",
                    "str",
                    "bytes"
                ]
            }
        },
        "relu": {
            "name": "relu",
            "location": 31,
            "return": [],
            "arguments": {
                "x": [
                    "int",
                    "float",
                    "str"
                ]
            }
        },
        "soft_update": {
            "name": "soft_update",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "local": [],
                "target": [],
                "tau": [
                    "float",
                    "int"
                ]
            }
        },
        "hard_update": {
            "name": "hard_update",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "local": [],
                "target": []
            }
        },
        "set_random_seed": {
            "name": "set_random_seed",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "seed": [
                    "int",
                    "str",
                    "dict[, ]",
                    "dict[str, typing.Any]"
                ],
                "env": []
            }
        },
        "make_one_hot": {
            "name": "make_one_hot",
            "location": 55,
            "return": [
                "str",
                "bytes"
            ],
            "arguments": {
                "labels": [
                    "str"
                ],
                "c": [
                    "typing.Sequence[T]",
                    "str",
                    "int"
                ]
            }
        },
        "get_n_step_info_from_demo": {
            "name": "get_n_step_info_from_demo",
            "location": 62,
            "return": [
                "tuple[list[tuple[]]]"
            ],
            "arguments": {
                "demo": [
                    "list[]",
                    "str"
                ],
                "n_step": [
                    "int",
                    "bytes"
                ],
                "gamma": [
                    "float",
                    "int"
                ]
            }
        },
        "get_n_step_info": {
            "name": "get_n_step_info",
            "location": 88,
            "return": [
                "tuple[typing.Union[int,float,dict[, ],list[],str,frozenset,list[dict[, ]]]]"
            ],
            "arguments": {
                "n_step_buffer": [
                    "list[int]"
                ],
                "gamma": [
                    "int",
                    "float"
                ]
            }
        },
        "numpy2floattensor": {
            "name": "numpy2floattensor",
            "location": 104,
            "return": [
                "tuple[]",
                "list[]",
                "list[list[float]]",
                "int",
                "list[int]",
                "float"
            ],
            "arguments": {
                "arrays": [
                    "bool"
                ],
                "device_": [
                    "bytes",
                    "float"
                ]
            }
        },
        "state_dict2numpy": {
            "name": "state_dict2numpy",
            "location": 124,
            "return": [
                "OrderedDict"
            ],
            "arguments": {
                "state_dict": [
                    "dict[str, typing.Any]",
                    "dict[, ]",
                    "dict[typing.Any, dict[str, typing.Any]]"
                ]
            }
        },
        "smoothen_graph": {
            "name": "smoothen_graph",
            "location": 132,
            "return": [
                "list[float]"
            ],
            "arguments": {
                "scalars": [],
                "weight": [
                    "float"
                ]
            }
        },
        "set_cfg_for_intergration_test": {
            "name": "set_cfg_for_intergration_test",
            "location": 150,
            "return": [
                "int",
                "list[list[T]]",
                "str",
                "bytes"
            ],
            "arguments": {
                "cfg": [
                    "int",
                    "list[list[T]]",
                    "str",
                    "bytes"
                ]
            }
        }
    },
    "rl_algorithms-master/rl_algorithms/common/noise.py": {
        "GaussianNoise.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "action_dim": [
                    "int",
                    "float"
                ],
                "min_sigma": [
                    "float"
                ],
                "max_sigma": [
                    "float"
                ],
                "decay_period": [
                    "int"
                ]
            }
        },
        "GaussianNoise.sample": {
            "name": "sample",
            "location": 29,
            "return": [],
            "arguments": {
                "self": [],
                "t": [
                    "int"
                ]
            }
        },
        "OUNoise.__init__": {
            "name": "__init__",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "size": [
                    "int",
                    "bytes"
                ],
                "mu": [
                    "float"
                ],
                "theta": [
                    "float"
                ],
                "sigma": [
                    "float"
                ]
            }
        },
        "OUNoise.reset": {
            "name": "reset",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "OUNoise.sample": {
            "name": "sample",
            "location": 59,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "rl_algorithms-master/rl_algorithms/common/saliency_map.py": {
        "make_saliency_dir": {
            "name": "make_saliency_dir",
            "location": 22,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "date_time": [
                    "str"
                ]
            }
        },
        "compute_saliency_maps": {
            "name": "compute_saliency_maps",
            "location": 36,
            "return": [
                "str",
                "dict[int, dict[str, typing.Any]]",
                "int"
            ],
            "arguments": {
                "X": [
                    "int",
                    "list[]",
                    "str"
                ],
                "y": [
                    "bool",
                    "list[str]",
                    "float",
                    "tuple[]"
                ],
                "model": [
                    "bool",
                    "typing.Generator[]",
                    "str"
                ],
                "device": [
                    "float",
                    "bool",
                    "list[str]"
                ]
            }
        },
        "save_saliency_maps": {
            "name": "save_saliency_maps",
            "location": 63,
            "return": [],
            "arguments": {
                "i": [
                    "str",
                    "typing.TextIO",
                    "bool"
                ],
                "X": [
                    "int",
                    "list[]",
                    "list[str]"
                ],
                "y": [],
                "model": [
                    "str",
                    "int",
                    "list[]"
                ],
                "device": [
                    "bool",
                    "None",
                    "list[]",
                    "typing.Sequence[typing.Sequence[float]]"
                ],
                "saliency_map_dir": [
                    "str"
                ]
            }
        }
    },
    "rl_algorithms-master/rl_algorithms/common/__init__.py": {},
    "rl_algorithms-master/rl_algorithms/common/abstract/agent.py": {
        "Agent.__init__": {
            "name": "__init__",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "env": [
                    "dict[, ]",
                    "str",
                    "None",
                    "bool"
                ],
                "env_info": [
                    "bool",
                    "None",
                    "typing.Callable[, ]",
                    "str",
                    "typing.Mapping"
                ],
                "log_cfg": [
                    "str",
                    "None",
                    "int"
                ],
                "is_test": [
                    "dict[, ]",
                    "str",
                    "None",
                    "bool"
                ],
                "load_from": [
                    "dict[, ]",
                    "str",
                    "None",
                    "bool"
                ],
                "is_render": [
                    "dict[, ]",
                    "str",
                    "None",
                    "bool"
                ],
                "render_after": [
                    "dict[, ]",
                    "str",
                    "None",
                    "bool"
                ],
                "is_log": [
                    "str",
                    "set[]"
                ],
                "save_period": [
                    "dict[, ]",
                    "str",
                    "None",
                    "bool"
                ],
                "episode_num": [
                    "dict[, ]",
                    "str",
                    "None",
                    "bool"
                ],
                "max_episode_steps": [
                    "int",
                    "dict[str, int]",
                    "dict[str, list[str]]",
                    "dict[str, str]",
                    "None"
                ],
                "interim_test_num": [
                    "bool",
                    "list[str]"
                ]
            }
        },
        "Agent.select_action": {
            "name": "select_action",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "str"
                ]
            }
        },
        "Agent.step": {
            "name": "step",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "action": [
                    "int",
                    "str",
                    "typing.Iterable[C]"
                ]
            }
        },
        "Agent.write_log": {
            "name": "write_log",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "log_value": [
                    "tuple[]",
                    "dict[, ]",
                    "str",
                    "bool"
                ]
            }
        },
        "Agent.train": {
            "name": "train",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Agent.set_wandb": {
            "name": "set_wandb",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Agent.interim_test": {
            "name": "interim_test",
            "location": 104,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Agent.test": {
            "name": "test",
            "location": 122,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Agent._test": {
            "name": "_test",
            "location": 133,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "interim_test": [
                    "bool"
                ]
            }
        },
        "Agent.test_with_gradcam": {
            "name": "test_with_gradcam",
            "location": 172,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Agent.test_with_saliency_map": {
            "name": "test_with_saliency_map",
            "location": 246,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "rl_algorithms-master/rl_algorithms/common/abstract/architecture.py": {
        "Architecture._spawn": {
            "name": "_spawn",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Architecture.train": {
            "name": "train",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Architecture.test": {
            "name": "test",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "rl_algorithms-master/rl_algorithms/common/abstract/buffer.py": {
        "BaseBuffer.add": {
            "name": "add",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "transition": [
                    "str",
                    "bytes",
                    "list[str]"
                ]
            }
        },
        "BaseBuffer.sample": {
            "name": "sample",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseBuffer.__len__": {
            "name": "__len__",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BufferWrapper.__init__": {
            "name": "__init__",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "base_buffer": [
                    "list[str]",
                    "int",
                    "str",
                    "None"
                ]
            }
        },
        "BufferWrapper.add": {
            "name": "add",
            "location": 45,
            "return": [],
            "arguments": {
                "self": [],
                "transition": [
                    "int"
                ]
            }
        },
        "BufferWrapper.sample": {
            "name": "sample",
            "location": 48,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BufferWrapper.__len__": {
            "name": "__len__",
            "location": 51,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "rl_algorithms-master/rl_algorithms/common/abstract/distributed_logger.py": {
        "DistributedLogger.__init__": {
            "name": "__init__",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "log_cfg": [
                    "str",
                    "list[str]",
                    "int"
                ],
                "comm_cfg": [
                    "bool",
                    "typing.Callable[, ]",
                    "str"
                ],
                "backbone": [
                    "set[int]",
                    "None",
                    "bool",
                    "str"
                ],
                "head": [
                    "int",
                    "float"
                ],
                "env_name": [
                    "bool",
                    "str",
                    "set[str]"
                ],
                "is_atari": [
                    "bool",
                    "typing.Callable[, ]",
                    "str"
                ],
                "state_size": [
                    "int",
                    "None"
                ],
                "output_size": [
                    "int"
                ],
                "max_update_step": [
                    "bool",
                    "None",
                    "typing.Type",
                    "dict[, ]"
                ],
                "episode_num": [
                    "bool",
                    "typing.Callable[, ]",
                    "str"
                ],
                "max_episode_steps": [
                    "int",
                    "None",
                    "float",
                    "str"
                ],
                "interim_test_num": [
                    "bool"
                ],
                "is_log": [
                    "float",
                    "str",
                    "int",
                    "None"
                ],
                "is_render": [
                    "bool",
                    "typing.Callable[, ]",
                    "str"
                ]
            }
        },
        "DistributedLogger._init_env": {
            "name": "_init_env",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DistributedLogger.load_params": {
            "name": "load_params",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ]
            }
        },
        "DistributedLogger.init_communication": {
            "name": "init_communication",
            "location": 101,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DistributedLogger.select_action": {
            "name": "select_action",
            "location": 108,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "str"
                ]
            }
        },
        "DistributedLogger.write_log": {
            "name": "write_log",
            "location": 112,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "log_value": [
                    "tuple[]",
                    "dict[, ]",
                    "str",
                    "bool"
                ]
            }
        },
        "DistributedLogger._preprocess_state": {
            "name": "_preprocess_state",
            "location": 117,
            "return": [
                "str",
                "dict[str, str]"
            ],
            "arguments": {
                "state": [
                    "str",
                    "float",
                    "dict[, ]"
                ],
                "device": [
                    "str",
                    "float",
                    "dict[, ]"
                ]
            }
        },
        "DistributedLogger.set_wandb": {
            "name": "set_wandb",
            "location": 121,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DistributedLogger.recv_log_info": {
            "name": "recv_log_info",
            "location": 134,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DistributedLogger.run": {
            "name": "run",
            "location": 146,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DistributedLogger.write_worker_log": {
            "name": "write_worker_log",
            "location": 165,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "worker_logs": [
                    "list[dict[, ]]"
                ],
                "worker_update_interval": [
                    "int",
                    "float"
                ]
            }
        },
        "DistributedLogger.test": {
            "name": "test",
            "location": 214,
            "return": [
                "typing.Type",
                "str",
                "int",
                "float"
            ],
            "arguments": {
                "self": [],
                "update_step": [
                    "bool",
                    "float",
                    "None"
                ],
                "interim_test": [
                    "bool"
                ]
            }
        },
        "DistributedLogger._test": {
            "name": "_test",
            "location": 222,
            "return": [],
            "arguments": {
                "self": [],
                "update_step": [
                    "int",
                    "float",
                    "None"
                ],
                "interim_test": [
                    "bool",
                    "str"
                ]
            }
        },
        "DistributedLogger.synchronize": {
            "name": "synchronize",
            "location": 263,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "state_dict": [
                    "dict[, ]",
                    "dict[str, typing.Any]"
                ]
            }
        }
    },
    "rl_algorithms-master/rl_algorithms/common/abstract/distributed_worker.py": {
        "BaseDistributedWorker.select_action": {
            "name": "select_action",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "str"
                ]
            }
        },
        "BaseDistributedWorker.step": {
            "name": "step",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "action": [
                    "int",
                    "str",
                    "typing.Iterable[C]"
                ]
            }
        },
        "BaseDistributedWorker.synchronize": {
            "name": "synchronize",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "new_state_dict": [
                    "dict[str, numpy.ndarray]",
                    "typing.Callable[, ]"
                ]
            }
        },
        "BaseDistributedWorker._synchronize": {
            "name": "_synchronize",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "network": [],
                "new_state_dict": [
                    "dict[str, typing.Any]",
                    "dict[str, tuple[typing.Union[int,int]]]"
                ]
            }
        },
        "DistributedWorker.__init__": {
            "name": "__init__",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "rank": [
                    "bool",
                    "float",
                    "tuple[typing.Union[float,float]]",
                    "list[float]"
                ],
                "device": [
                    "bool",
                    "float",
                    "tuple[typing.Union[float,float]]",
                    "list[float]"
                ],
                "hyper_params": [
                    "bool",
                    "float",
                    "tuple[typing.Union[float,float]]",
                    "list[float]"
                ],
                "env_name": [
                    "str",
                    "bool",
                    "float"
                ],
                "is_atari": [
                    "bool",
                    "float",
                    "tuple[typing.Union[float,float]]",
                    "list[float]"
                ],
                "max_episode_steps": [
                    "int",
                    "None",
                    "float",
                    "str"
                ]
            }
        },
        "DistributedWorker._init_env": {
            "name": "_init_env",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DistributedWorker.load_params": {
            "name": "load_params",
            "location": 97,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ]
            }
        },
        "DistributedWorker.select_action": {
            "name": "select_action",
            "location": 104,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "str"
                ]
            }
        },
        "DistributedWorker.step": {
            "name": "step",
            "location": 108,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "action": [
                    "int",
                    "str",
                    "typing.Iterable[C]"
                ]
            }
        },
        "DistributedWorker.compute_priorities": {
            "name": "compute_priorities",
            "location": 113,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "experience": [
                    "int",
                    "str",
                    "typing.Iterable[C]"
                ]
            }
        },
        "DistributedWorker.synchronize": {
            "name": "synchronize",
            "location": 117,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "new_state_dict": [
                    "dict[str, numpy.ndarray]",
                    "typing.Callable[, ]"
                ]
            }
        },
        "DistributedWorker._preprocess_state": {
            "name": "_preprocess_state",
            "location": 121,
            "return": [
                "str",
                "dict[str, str]"
            ],
            "arguments": {
                "state": [
                    "str",
                    "float",
                    "dict[, ]"
                ],
                "device": [
                    "str",
                    "float",
                    "dict[, ]"
                ]
            }
        },
        "DistributedWorkerWrapper.__init__": {
            "name": "__init__",
            "location": 130,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "worker": [
                    "int",
                    "float"
                ],
                "comm_cfg": [
                    "int",
                    "float"
                ]
            }
        },
        "DistributedWorkerWrapper.init_communication": {
            "name": "init_communication",
            "location": 135,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DistributedWorkerWrapper.select_action": {
            "name": "select_action",
            "location": 138,
            "return": [],
            "arguments": {
                "self": [],
                "state": [
                    "int",
                    "dict[str, typing.Any]",
                    "dict[, ]"
                ]
            }
        },
        "DistributedWorkerWrapper.step": {
            "name": "step",
            "location": 142,
            "return": [],
            "arguments": {
                "self": [],
                "action": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ]
            }
        },
        "DistributedWorkerWrapper.synchronize": {
            "name": "synchronize",
            "location": 146,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "new_state_dict": [
                    "float",
                    "dict[str, numpy.ndarray]",
                    "str",
                    "tuple[typing.Union[int,int]]"
                ]
            }
        },
        "DistributedWorkerWrapper.collect_data": {
            "name": "collect_data",
            "location": 151,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DistributedWorkerWrapper.run": {
            "name": "run",
            "location": 155,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DistributedWorkerWrapper.preprocess_nstep": {
            "name": "preprocess_nstep",
            "location": 158,
            "return": [
                "tuple[typing.Union[int,list[],list[tuple[typing.Union[int,str]]],float,list[int],dict[, ]]]"
            ],
            "arguments": {
                "self": [],
                "nstepqueue": [
                    "bytes"
                ]
            }
        }
    },
    "rl_algorithms-master/rl_algorithms/common/abstract/her.py": {
        "HER.__init__": {
            "name": "__init__",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "reward_fn": [
                    "int",
                    "float"
                ]
            }
        },
        "HER.fetch_desired_states_from_demo": {
            "name": "fetch_desired_states_from_demo",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "demo": [
                    "list[]"
                ]
            }
        },
        "HER.get_desired_state": {
            "name": "get_desired_state",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HER.generate_demo_transitions": {
            "name": "generate_demo_transitions",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "demo": [
                    "int",
                    "str",
                    "typing.Iterable[C]"
                ]
            }
        },
        "HER._get_final_state": {
            "name": "_get_final_state",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "transition": [
                    "tuple[]",
                    "int"
                ]
            }
        },
        "HER._append_origin_transitions": {
            "name": "_append_origin_transitions",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "origin_transitions": [
                    "int",
                    "str",
                    "None"
                ],
                "transition": [
                    "int",
                    "str",
                    "None"
                ],
                "desired_state": [
                    "int",
                    "str",
                    "None"
                ]
            }
        },
        "HER._append_new_transitions": {
            "name": "_append_new_transitions",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "new_transitions": [
                    "list[]",
                    "list[list[int]]",
                    "int",
                    "list[typing.Union[int,float]]",
                    "list[tuple[typing.Union[str,int]]]"
                ],
                "transition": [
                    "list[]",
                    "list[list[int]]",
                    "int",
                    "list[typing.Union[int,float]]",
                    "list[tuple[typing.Union[str,int]]]"
                ],
                "final_state": [
                    "list[]",
                    "list[list[int]]",
                    "int",
                    "list[typing.Union[int,float]]",
                    "list[tuple[typing.Union[str,int]]]"
                ]
            }
        },
        "HER._get_transition": {
            "name": "_get_transition",
            "location": 60,
            "return": [
                "tuple[typing.Union[set[],typing.Generator[typing.Union[typing.Any,typing.Any,typing.Any]],list[tuple[]],list[]]]"
            ],
            "arguments": {
                "self": [],
                "transition": [
                    "bool"
                ],
                "goal_state": []
            }
        },
        "HER.generate_transitions": {
            "name": "generate_transitions",
            "location": 73,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": [],
                "transitions": [],
                "desired_state": [
                    "str",
                    "None",
                    "list[list[str]]",
                    "list[int]",
                    "typing.Sequence[str]"
                ],
                "success_score": [
                    "str",
                    "None",
                    "list[list[str]]",
                    "list[int]",
                    "typing.Sequence[str]"
                ],
                "is_demo": [
                    "bool"
                ]
            }
        },
        "HER.__str__": {
            "name": "__str__",
            "location": 98,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "rl_algorithms-master/rl_algorithms/common/abstract/learner.py": {
        "BaseLearner.update_model": {
            "name": "update_model",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "experience": [
                    "int"
                ]
            }
        },
        "BaseLearner.save_params": {
            "name": "save_params",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "n_episode": [
                    "int"
                ]
            }
        },
        "BaseLearner.load_params": {
            "name": "load_params",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ]
            }
        },
        "BaseLearner.get_state_dict": {
            "name": "get_state_dict",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Learner.__init__": {
            "name": "__init__",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "hyper_params": [
                    "bool",
                    "str",
                    "None",
                    "dict[, ]"
                ],
                "log_cfg": [
                    "bytes",
                    "str",
                    "None",
                    "list[str]",
                    "int"
                ],
                "env_name": [
                    "str",
                    "None",
                    "list[str]"
                ],
                "is_test": [
                    "bool"
                ]
            }
        },
        "Learner._init_network": {
            "name": "_init_network",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Learner.update_model": {
            "name": "update_model",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "experience": [
                    "int"
                ]
            }
        },
        "Learner.save_params": {
            "name": "save_params",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "n_episode": [
                    "int"
                ]
            }
        },
        "Learner._save_params": {
            "name": "_save_params",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "params": [
                    "dict[, ]",
                    "str"
                ],
                "n_episode": [
                    "int",
                    "str"
                ]
            }
        },
        "Learner.load_params": {
            "name": "load_params",
            "location": 97,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ]
            }
        },
        "Learner.get_state_dict": {
            "name": "get_state_dict",
            "location": 104,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Learner.get_policy": {
            "name": "get_policy",
            "location": 108,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LearnerWrapper.__init__": {
            "name": "__init__",
            "location": 115,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "learner": [
                    "int",
                    "float"
                ]
            }
        },
        "LearnerWrapper.update_model": {
            "name": "update_model",
            "location": 119,
            "return": [],
            "arguments": {
                "self": [],
                "experience": [
                    "int",
                    "str"
                ]
            }
        },
        "LearnerWrapper.save_params": {
            "name": "save_params",
            "location": 122,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "n_episode": [
                    "int"
                ]
            }
        },
        "LearnerWrapper.load_params": {
            "name": "load_params",
            "location": 125,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "list[dict[, ]]",
                    "list[]"
                ]
            }
        },
        "LearnerWrapper.get_state_dict": {
            "name": "get_state_dict",
            "location": 128,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DistributedLearnerWrapper.__init__": {
            "name": "__init__",
            "location": 141,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "learner": [
                    "str"
                ],
                "comm_cfg": [
                    "int",
                    "float"
                ]
            }
        },
        "DistributedLearnerWrapper.init_communication": {
            "name": "init_communication",
            "location": 146,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DistributedLearnerWrapper.update_model": {
            "name": "update_model",
            "location": 149,
            "return": [],
            "arguments": {
                "self": [],
                "experience": [
                    "int",
                    "str"
                ]
            }
        },
        "DistributedLearnerWrapper.save_params": {
            "name": "save_params",
            "location": 153,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "n_update_step": [
                    "int",
                    "str"
                ]
            }
        },
        "DistributedLearnerWrapper.load_params": {
            "name": "load_params",
            "location": 157,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "list[dict[, ]]",
                    "list[]"
                ]
            }
        },
        "DistributedLearnerWrapper.get_policy": {
            "name": "get_policy",
            "location": 161,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DistributedLearnerWrapper.get_state_dict": {
            "name": "get_state_dict",
            "location": 165,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DistributedLearnerWrapper.run": {
            "name": "run",
            "location": 170,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "rl_algorithms-master/rl_algorithms/common/abstract/reward_fn.py": {
        "RewardFn.__call__": {
            "name": "__call__",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "transition": [
                    "tuple[]",
                    "BaseException"
                ],
                "goal_state": [
                    "tuple[]",
                    "BaseException"
                ]
            }
        }
    },
    "rl_algorithms-master/rl_algorithms/common/abstract/__init__.py": {},
    "rl_algorithms-master/rl_algorithms/common/apex/architecture.py": {
        "ApeX.__init__": {
            "name": "__init__",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "env": [
                    "str",
                    "typing.Mapping",
                    "typing.Callable[, ]",
                    "dict[, ]",
                    "bool"
                ],
                "env_info": [
                    "bool",
                    "typing.Callable[, ]",
                    "dict[str, typing.Any]"
                ],
                "hyper_params": [
                    "str",
                    "typing.Mapping",
                    "typing.Callable[, ]",
                    "dict[, ]",
                    "bool"
                ],
                "learner_cfg": [
                    "str",
                    "typing.Mapping",
                    "typing.Callable[, ]",
                    "dict[, ]",
                    "bool"
                ],
                "worker_cfg": [
                    "str",
                    "typing.Mapping",
                    "typing.Callable[, ]",
                    "dict[, ]",
                    "bool"
                ],
                "logger_cfg": [
                    "str",
                    "typing.Mapping",
                    "typing.Callable[, ]",
                    "dict[, ]",
                    "bool"
                ],
                "comm_cfg": [
                    "str",
                    "typing.Mapping",
                    "typing.Callable[, ]",
                    "dict[, ]",
                    "bool"
                ],
                "log_cfg": [
                    "str"
                ],
                "is_test": [
                    "str",
                    "typing.Mapping",
                    "typing.Callable[, ]",
                    "dict[, ]",
                    "bool"
                ],
                "load_from": [
                    "str",
                    "typing.Mapping",
                    "typing.Callable[, ]",
                    "dict[, ]",
                    "bool"
                ],
                "is_render": [
                    "str",
                    "typing.Mapping",
                    "typing.Callable[, ]",
                    "dict[, ]",
                    "bool"
                ],
                "render_after": [
                    "str",
                    "typing.Mapping",
                    "typing.Callable[, ]",
                    "dict[, ]",
                    "bool"
                ],
                "is_log": [
                    "str"
                ],
                "save_period": [
                    "str",
                    "typing.Mapping",
                    "typing.Callable[, ]",
                    "dict[, ]",
                    "bool"
                ],
                "episode_num": [
                    "str",
                    "typing.Mapping",
                    "typing.Callable[, ]",
                    "dict[, ]",
                    "bool"
                ],
                "max_episode_steps": [
                    "int",
                    "tuple[typing.Union[int,int]]",
                    "None"
                ],
                "interim_test_num": [
                    "bool",
                    "str"
                ]
            }
        },
        "ApeX._spawn": {
            "name": "_spawn",
            "location": 99,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ApeX.train": {
            "name": "train",
            "location": 169,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ApeX.test": {
            "name": "test",
            "location": 193,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "rl_algorithms-master/rl_algorithms/common/apex/learner.py": {
        "ApeXLearnerWrapper.__init__": {
            "name": "__init__",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "learner": [
                    "int",
                    "float",
                    "None",
                    "str"
                ],
                "comm_cfg": [
                    "str",
                    "int"
                ]
            }
        },
        "ApeXLearnerWrapper.init_communication": {
            "name": "init_communication",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ApeXLearnerWrapper.recv_replay_data": {
            "name": "recv_replay_data",
            "location": 64,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ApeXLearnerWrapper.send_new_priorities": {
            "name": "send_new_priorities",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "indices": [
                    "int",
                    "str"
                ],
                "priorities": [
                    "int",
                    "str"
                ]
            }
        },
        "ApeXLearnerWrapper.publish_params": {
            "name": "publish_params",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "update_step": [
                    "bytes",
                    "int",
                    "str",
                    "dict[str, annofabcli.common.RGB]"
                ],
                "np_state_dict": [
                    "bytes",
                    "int",
                    "str",
                    "dict[str, annofabcli.common.RGB]"
                ]
            }
        },
        "ApeXLearnerWrapper.send_info_to_logger": {
            "name": "send_info_to_logger",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "np_state_dict": [
                    "str",
                    "bytes",
                    "None",
                    "list[dict[str, typing.Any]]",
                    "int",
                    "dict[, ]",
                    "list[]"
                ],
                "step_info": [
                    "dict[str, typing.Any]",
                    "dict[, ]"
                ]
            }
        },
        "ApeXLearnerWrapper.run": {
            "name": "run",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "rl_algorithms-master/rl_algorithms/common/apex/worker.py": {
        "ApeXWorkerWrapper.__init__": {
            "name": "__init__",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "worker": [
                    "str",
                    "int"
                ],
                "comm_cfg": [
                    "str",
                    "int"
                ]
            }
        },
        "ApeXWorkerWrapper.init_communication": {
            "name": "init_communication",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ApeXWorkerWrapper.send_data_to_buffer": {
            "name": "send_data_to_buffer",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "replay_data": [
                    "dict[, ]",
                    "dict[str, typing.Any]",
                    "str",
                    "None",
                    "dict[str, str]",
                    "tuple[typing.Union[int,int]]"
                ]
            }
        },
        "ApeXWorkerWrapper.recv_params_from_learner": {
            "name": "recv_params_from_learner",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ApeXWorkerWrapper.compute_priorities": {
            "name": "compute_priorities",
            "location": 81,
            "return": [],
            "arguments": {
                "self": [],
                "experience": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ]
            }
        },
        "ApeXWorkerWrapper.collect_data": {
            "name": "collect_data",
            "location": 85,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ApeXWorkerWrapper.run": {
            "name": "run",
            "location": 133,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ApeXWorkerWrapper.compute_mean_scores": {
            "name": "compute_mean_scores",
            "location": 146,
            "return": [],
            "arguments": {
                "scores": []
            }
        }
    },
    "rl_algorithms-master/rl_algorithms/common/apex/__init__.py": {},
    "rl_algorithms-master/rl_algorithms/common/buffer/distillation_buffer.py": {
        "DistillationBuffer.__init__": {
            "name": "__init__",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "batch_size": [
                    "str",
                    "typing.Any",
                    "None",
                    "bytes",
                    "bool",
                    "typing.Mapping"
                ],
                "dataset_path": [
                    "str"
                ]
            }
        },
        "DistillationBuffer.reset_dataloader": {
            "name": "reset_dataloader",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DistillationBuffer.sample_for_diltillation": {
            "name": "sample_for_diltillation",
            "location": 61,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DistillationDataset.__init__": {
            "name": "__init__",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dataset_path": []
            }
        },
        "DistillationDataset.__len__": {
            "name": "__len__",
            "location": 108,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "DistillationDataset.__getitem__": {
            "name": "__getitem__",
            "location": 112,
            "return": [],
            "arguments": {
                "self": [],
                "index": [
                    "list[str]",
                    "bytearray",
                    "int",
                    "list[]",
                    "dict[, ]",
                    "dict[str, str]"
                ]
            }
        }
    },
    "rl_algorithms-master/rl_algorithms/common/buffer/gail_buffer.py": {
        "GAILBuffer.__init__": {
            "name": "__init__",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dataset_path": [
                    "str"
                ]
            }
        },
        "GAILBuffer.load_demo": {
            "name": "load_demo",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dataset_path": [
                    "str"
                ]
            }
        },
        "GAILBuffer.add": {
            "name": "add",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GAILBuffer.sample": {
            "name": "sample",
            "location": 46,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "self": [],
                "batch_size": [
                    "int",
                    "list[]",
                    "typing.Iterator"
                ],
                "indices": [
                    "None",
                    "int"
                ]
            }
        },
        "GAILBuffer.__len__": {
            "name": "__len__",
            "location": 58,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "rl_algorithms-master/rl_algorithms/common/buffer/replay_buffer.py": {
        "ReplayBuffer.__init__": {
            "name": "__init__",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "max_len": [
                    "int",
                    "tuple[typing.Union[int,int]]"
                ],
                "batch_size": [
                    "int",
                    "tuple[typing.Union[int,int]]",
                    "str"
                ],
                "gamma": [
                    "float"
                ],
                "n_step": [
                    "int"
                ],
                "demo": []
            }
        },
        "ReplayBuffer.add": {
            "name": "add",
            "location": 92,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "self": [],
                "transition": [
                    "str",
                    "list[]"
                ]
            }
        },
        "ReplayBuffer.extend": {
            "name": "extend",
            "location": 129,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "transitions": [
                    "str"
                ]
            }
        },
        "ReplayBuffer.sample": {
            "name": "sample",
            "location": 136,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "self": [],
                "indices": [
                    "None",
                    "bool",
                    "set[str]",
                    "list[int]"
                ]
            }
        },
        "ReplayBuffer._initialize_buffers": {
            "name": "_initialize_buffers",
            "location": 151,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "state": [],
                "action": [
                    "int",
                    "str"
                ]
            }
        },
        "ReplayBuffer.__len__": {
            "name": "__len__",
            "location": 164,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RecurrentReplayBuffer.__init__": {
            "name": "__init__",
            "location": 189,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "max_len": [
                    "int",
                    "None"
                ],
                "batch_size": [
                    "int",
                    "tuple[typing.Union[int,int]]",
                    "None"
                ],
                "sequence_size": [
                    "int",
                    "str",
                    "tuple[typing.Union[int,int]]"
                ],
                "overlap_size": [
                    "int",
                    "str",
                    "tuple[typing.Union[int,int]]"
                ],
                "gamma": [
                    "float"
                ],
                "n_step": [
                    "int"
                ],
                "demo": []
            }
        },
        "RecurrentReplayBuffer.add": {
            "name": "add",
            "location": 243,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "self": [],
                "transition": []
            }
        },
        "RecurrentReplayBuffer.sample": {
            "name": "sample",
            "location": 296,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "self": [],
                "indices": [
                    "None",
                    "bool",
                    "set[str]",
                    "list[int]"
                ]
            }
        },
        "RecurrentReplayBuffer._initialize_local_buffers": {
            "name": "_initialize_local_buffers",
            "location": 311,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RecurrentReplayBuffer._overlap_local_buffers": {
            "name": "_overlap_local_buffers",
            "location": 329,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RecurrentReplayBuffer._initialize_buffers": {
            "name": "_initialize_buffers",
            "location": 344,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "list[int]",
                    "list[]",
                    "typing.Sequence[typing.Sequence[str]]",
                    "typing.Sequence[tuple[typing.Union[str,int]]]"
                ],
                "action": [
                    "int",
                    "collections.abc.Awaitable[None]",
                    "None",
                    "dict[, ]",
                    "str"
                ],
                "hidden": [
                    "list[int]",
                    "bytes"
                ]
            }
        },
        "RecurrentReplayBuffer.__len__": {
            "name": "__len__",
            "location": 371,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "rl_algorithms-master/rl_algorithms/common/buffer/segment_tree.py": {
        "SegmentTree.__init__": {
            "name": "__init__",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "capacity": [
                    "float",
                    "int"
                ],
                "operation": [
                    "bool",
                    "list[str]"
                ],
                "init_value": [
                    "int",
                    "float",
                    "set[]",
                    "typing.Callable[list[], bool]"
                ]
            }
        },
        "SegmentTree._operate_helper": {
            "name": "_operate_helper",
            "location": 37,
            "return": [],
            "arguments": {
                "self": [],
                "start": [
                    "int"
                ],
                "end": [
                    "int",
                    "float"
                ],
                "node": [
                    "int"
                ],
                "node_start": [
                    "int"
                ],
                "node_end": [
                    "int"
                ]
            }
        },
        "SegmentTree.operate": {
            "name": "operate",
            "location": 55,
            "return": [],
            "arguments": {
                "self": [],
                "start": [
                    "int"
                ],
                "end": [
                    "int"
                ]
            }
        },
        "SegmentTree.__setitem__": {
            "name": "__setitem__",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "idx": [
                    "str",
                    "typing.Callable[, ]"
                ],
                "val": [
                    "int",
                    "str",
                    "dict[, ]",
                    "set[]",
                    "typing.IO"
                ]
            }
        },
        "SegmentTree.__getitem__": {
            "name": "__getitem__",
            "location": 73,
            "return": [],
            "arguments": {
                "self": [],
                "idx": [
                    "int",
                    "dict[str, typing.Any]",
                    "str"
                ]
            }
        },
        "SumSegmentTree.__init__": {
            "name": "__init__",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "capacity": [
                    "typing.IO",
                    "list['Node']"
                ]
            }
        },
        "SumSegmentTree.sum": {
            "name": "sum",
            "location": 99,
            "return": [],
            "arguments": {
                "self": [],
                "start": [
                    "int"
                ],
                "end": [
                    "int"
                ]
            }
        },
        "SumSegmentTree.retrieve": {
            "name": "retrieve",
            "location": 103,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "upperbound": [
                    "str",
                    "tuple['cirq.Qid']"
                ]
            }
        },
        "MinSegmentTree.__init__": {
            "name": "__init__",
            "location": 129,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "capacity": [
                    "int",
                    "float",
                    "dict[, ]"
                ]
            }
        },
        "MinSegmentTree.min": {
            "name": "min",
            "location": 140,
            "return": [],
            "arguments": {
                "self": [],
                "start": [
                    "int"
                ],
                "end": [
                    "int"
                ]
            }
        }
    },
    "rl_algorithms-master/rl_algorithms/common/buffer/wrapper.py": {
        "PrioritizedBufferWrapper.__init__": {
            "name": "__init__",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "base_buffer": [
                    "int",
                    "list[bytes]",
                    "str",
                    "None"
                ],
                "alpha": [
                    "float"
                ],
                "epsilon_d": [
                    "float"
                ]
            }
        },
        "PrioritizedBufferWrapper.add": {
            "name": "add",
            "location": 77,
            "return": [
                "int",
                "str",
                "set[str]",
                "list[str]"
            ],
            "arguments": {
                "self": [],
                "transition": [
                    "int",
                    "str"
                ]
            }
        },
        "PrioritizedBufferWrapper._sample_proportional": {
            "name": "_sample_proportional",
            "location": 92,
            "return": [],
            "arguments": {
                "self": [],
                "batch_size": [
                    "int"
                ]
            }
        },
        "PrioritizedBufferWrapper.sample": {
            "name": "sample",
            "location": 113,
            "return": [],
            "arguments": {
                "self": [],
                "beta": [
                    "float"
                ]
            }
        },
        "PrioritizedBufferWrapper.update_priorities": {
            "name": "update_priorities",
            "location": 138,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "indices": [
                    "list[]",
                    "str",
                    "bytes"
                ],
                "priorities": [
                    "list[]",
                    "str",
                    "bytes"
                ]
            }
        },
        "ApeXBufferWrapper.__init__": {
            "name": "__init__",
            "location": 163,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "per_buffer": [
                    "str"
                ],
                "hyper_params": [
                    "int",
                    "float"
                ],
                "comm_cfg": [
                    "int",
                    "float"
                ]
            }
        },
        "ApeXBufferWrapper.init_communication": {
            "name": "init_communication",
            "location": 176,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ApeXBufferWrapper.recv_worker_data": {
            "name": "recv_worker_data",
            "location": 185,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ApeXBufferWrapper.send_batch_to_learner": {
            "name": "send_batch_to_learner",
            "location": 208,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ApeXBufferWrapper.update_priority_beta": {
            "name": "update_priority_beta",
            "location": 221,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ApeXBufferWrapper.run": {
            "name": "run",
            "location": 226,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "rl_algorithms-master/rl_algorithms/common/buffer/__init__.py": {},
    "rl_algorithms-master/rl_algorithms/common/env/atari_wrappers.py": {
        "make_atari": {
            "name": "make_atari",
            "location": 307,
            "return": [
                "MaxAndSkipEnv",
                "TimeLimit"
            ],
            "arguments": {
                "env_id": [
                    "str",
                    "int",
                    "typing.Pattern",
                    "bytes"
                ],
                "max_episode_steps": [
                    "None",
                    "int",
                    "dict[str, typing.Any]",
                    "str"
                ]
            }
        },
        "wrap_deepmind": {
            "name": "wrap_deepmind",
            "location": 317,
            "return": [
                "WarpFrame",
                "ScaledFloatFrame",
                "ClipRewardEnv",
                "FrameStack"
            ],
            "arguments": {
                "env": [
                    "typing.IO",
                    "list[str]"
                ],
                "episode_life": [
                    "bool"
                ],
                "clip_rewards": [
                    "bool"
                ],
                "frame_stack": [
                    "bool"
                ],
                "scale": [
                    "bool"
                ]
            }
        },
        "wrap_pytorch": {
            "name": "wrap_pytorch",
            "location": 335,
            "return": [
                "ImageToPyTorch"
            ],
            "arguments": {
                "env": [
                    "str",
                    "typing.Type"
                ]
            }
        },
        "atari_env_generator": {
            "name": "atari_env_generator",
            "location": 339,
            "return": [
                "int",
                "dict[str, tuple[typing.Union[typing.Any,typing.Any]]]",
                "list[dict[str, str]]",
                "list[str]",
                "str"
            ],
            "arguments": {
                "env_id": [
                    "int",
                    "str"
                ],
                "max_episode_steps": [
                    "None",
                    "int",
                    "str"
                ],
                "frame_stack": [
                    "bool"
                ],
                "scale": [
                    "bool"
                ]
            }
        },
        "TimeLimit.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "env": [
                    "str",
                    "dict[str, str]",
                    "None"
                ],
                "max_episode_steps": [
                    "None",
                    "int"
                ]
            }
        },
        "TimeLimit.step": {
            "name": "step",
            "location": 26,
            "return": [
                "tuple[typing.Union[int,str,list[],dict[, ],None,dict[str, object]]]"
            ],
            "arguments": {
                "self": [],
                "ac": [
                    "str",
                    "dict[, ]"
                ]
            }
        },
        "TimeLimit.reset": {
            "name": "reset",
            "location": 35,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NoopResetEnv.__init__": {
            "name": "__init__",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "env": [
                    "str"
                ],
                "noop_max": [
                    "int"
                ]
            }
        },
        "NoopResetEnv.reset": {
            "name": "reset",
            "location": 52,
            "return": [
                "float",
                "int",
                "None",
                "set[]",
                "tuple[]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "NoopResetEnv.step": {
            "name": "step",
            "location": 70,
            "return": [],
            "arguments": {
                "self": [],
                "ac": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ]
            }
        },
        "FireResetEnv.__init__": {
            "name": "__init__",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "env": [
                    "str",
                    "dict[str, str]"
                ]
            }
        },
        "FireResetEnv.reset": {
            "name": "reset",
            "location": 82,
            "return": [
                "int",
                "float",
                "list[tuple[typing.Union[int,int,int,int,int,int]]]",
                "typing.Pattern",
                "list[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "FireResetEnv.step": {
            "name": "step",
            "location": 93,
            "return": [],
            "arguments": {
                "self": [],
                "ac": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ]
            }
        },
        "EpisodicLifeEnv.__init__": {
            "name": "__init__",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "env": [
                    "str"
                ]
            }
        },
        "EpisodicLifeEnv.step": {
            "name": "step",
            "location": 107,
            "return": [
                "tuple[typing.Union[int,dict[, ],list[],dict[str, typing.Any],list[dict[, ]]]]"
            ],
            "arguments": {
                "self": [],
                "action": [
                    "str",
                    "dict[, ]"
                ]
            }
        },
        "EpisodicLifeEnv.reset": {
            "name": "reset",
            "location": 122,
            "return": [
                "int",
                "list[str]",
                "float",
                "dict[str, typing.Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MaxAndSkipEnv.__init__": {
            "name": "__init__",
            "location": 137,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "env": [
                    "dict[, ]",
                    "bool",
                    "str",
                    "dict[str, typing.Any]"
                ],
                "skip": [
                    "int"
                ]
            }
        },
        "MaxAndSkipEnv.step": {
            "name": "step",
            "location": 145,
            "return": [
                "tuple[typing.Union[int,list[float],float,None,tuple[],dict[str, str]]]"
            ],
            "arguments": {
                "self": [],
                "action": [
                    "str",
                    "dict[, ]"
                ]
            }
        },
        "MaxAndSkipEnv.reset": {
            "name": "reset",
            "location": 165,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ClipRewardEnv.__init__": {
            "name": "__init__",
            "location": 170,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "env": [
                    "str",
                    "int"
                ]
            }
        },
        "ClipRewardEnv.reward": {
            "name": "reward",
            "location": 173,
            "return": [],
            "arguments": {
                "self": [],
                "reward": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ]
            }
        },
        "WarpFrame.__init__": {
            "name": "__init__",
            "location": 179,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "env": [
                    "str",
                    "bool",
                    "dict[, ]",
                    "None"
                ],
                "width": [
                    "int"
                ],
                "height": [
                    "int"
                ],
                "grayscale": [
                    "bool"
                ]
            }
        },
        "WarpFrame.observation": {
            "name": "observation",
            "location": 194,
            "return": [],
            "arguments": {
                "self": [],
                "frame": [
                    "int",
                    "None",
                    "float",
                    "dict[, ]"
                ]
            }
        },
        "FrameStack.__init__": {
            "name": "__init__",
            "location": 206,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "env": [
                    "str",
                    "bool",
                    "float"
                ],
                "k": [
                    "int",
                    "str"
                ]
            }
        },
        "FrameStack.reset": {
            "name": "reset",
            "location": 227,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FrameStack.step": {
            "name": "step",
            "location": 234,
            "return": [
                "tuple[typing.Union[bool,str,None,list[list[str]],typing.Sequence[str],dict[, ],dict[str, typing.Any]]]"
            ],
            "arguments": {
                "self": [],
                "action": [
                    "str",
                    "dict[, ]"
                ]
            }
        },
        "FrameStack._get_ob": {
            "name": "_get_ob",
            "location": 239,
            "return": [
                "LazyFrames"
            ],
            "arguments": {
                "self": []
            }
        },
        "ScaledFloatFrame.__init__": {
            "name": "__init__",
            "location": 245,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "env": [
                    "str",
                    "int",
                    "typing.Type"
                ]
            }
        },
        "ScaledFloatFrame.observation": {
            "name": "observation",
            "location": 251,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "observation": [
                    "float",
                    "int",
                    "str"
                ]
            }
        },
        "LazyFrames.__init__": {
            "name": "__init__",
            "location": 258,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "frames": [
                    "int",
                    "float"
                ]
            }
        },
        "LazyFrames._force": {
            "name": "_force",
            "location": 269,
            "return": [
                "tuple[]",
                "typing.Callable[, ]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "LazyFrames.__array__": {
            "name": "__array__",
            "location": 275,
            "return": [],
            "arguments": {
                "self": [],
                "dtype": [
                    "None",
                    "float",
                    "int",
                    "str"
                ]
            }
        },
        "LazyFrames.__len__": {
            "name": "__len__",
            "location": 281,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "LazyFrames.__getitem__": {
            "name": "__getitem__",
            "location": 284,
            "return": [],
            "arguments": {
                "self": [],
                "i": [
                    "int",
                    "typing.Iterator"
                ]
            }
        },
        "ImageToPyTorch.__init__": {
            "name": "__init__",
            "location": 293,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "env": [
                    "list[str]",
                    "list[dict[, ]]",
                    "dict[str, typing.Any]",
                    "list[tuple[typing.Union[str,str]]]",
                    "typing.MutableMapping"
                ]
            }
        },
        "ImageToPyTorch.observation": {
            "name": "observation",
            "location": 303,
            "return": [],
            "arguments": {
                "self": [],
                "observation": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ]
            }
        }
    },
    "rl_algorithms-master/rl_algorithms/common/env/multiprocessing_env.py": {
        "tile_images": {
            "name": "tile_images",
            "location": 13,
            "return": [],
            "arguments": {
                "img_nhwc": [
                    "dict[str, typing.Any]",
                    "list[list[typing.Any]]"
                ]
            }
        },
        "worker": {
            "name": "worker",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "remote": [],
                "parent_remote": [],
                "env_fn_wrapper": [
                    "bool",
                    "str",
                    "None",
                    "typing.Callable[, ]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "VecEnv.__init__": {
            "name": "__init__",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "num_envs": [
                    "int",
                    "None"
                ],
                "observation_space": [
                    "int",
                    "str",
                    "float"
                ],
                "action_space": [
                    "int",
                    "str",
                    "float"
                ]
            }
        },
        "VecEnv.reset": {
            "name": "reset",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "VecEnv.step_async": {
            "name": "step_async",
            "location": 95,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "actions": [
                    "int",
                    "str",
                    "typing.Iterable[C]"
                ]
            }
        },
        "VecEnv.step_wait": {
            "name": "step_wait",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "VecEnv.close_extras": {
            "name": "close_extras",
            "location": 118,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "VecEnv.close": {
            "name": "close",
            "location": 125,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "VecEnv.step": {
            "name": "step",
            "location": 133,
            "return": [],
            "arguments": {
                "self": [],
                "actions": [
                    "str",
                    "typing.OrderedDict",
                    "typing.DefaultDict"
                ]
            }
        },
        "VecEnv.render": {
            "name": "render",
            "location": 141,
            "return": [
                "tuple[typing.Union[typing.Literal,typing.Literal,typing.Literal]]"
            ],
            "arguments": {
                "self": [],
                "mode": [
                    "typing.Text"
                ]
            }
        },
        "VecEnv.get_images": {
            "name": "get_images",
            "location": 153,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "VecEnv.unwrapped": {
            "name": "unwrapped",
            "location": 160,
            "return": [
                "VecEnv"
            ],
            "arguments": {
                "self": []
            }
        },
        "VecEnv.get_viewer": {
            "name": "get_viewer",
            "location": 167,
            "return": [
                "typing.Final"
            ],
            "arguments": {
                "self": []
            }
        },
        "VecEnvWrapper.__init__": {
            "name": "__init__",
            "location": 181,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "venv": [
                    "int"
                ],
                "observation_space": [
                    "None",
                    "int"
                ],
                "action_space": [
                    "None",
                    "int"
                ]
            }
        },
        "VecEnvWrapper.step_async": {
            "name": "step_async",
            "location": 190,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "actions": [
                    "str",
                    "typing.OrderedDict",
                    "typing.DefaultDict"
                ]
            }
        },
        "VecEnvWrapper.reset": {
            "name": "reset",
            "location": 194,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "VecEnvWrapper.step_wait": {
            "name": "step_wait",
            "location": 198,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "VecEnvWrapper.close": {
            "name": "close",
            "location": 201,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "VecEnvWrapper.render": {
            "name": "render",
            "location": 204,
            "return": [],
            "arguments": {
                "self": [],
                "mode": [
                    "typing.Text"
                ]
            }
        },
        "VecEnvWrapper.get_images": {
            "name": "get_images",
            "location": 207,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CloudpickleWrapper.__init__": {
            "name": "__init__",
            "location": 217,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "float",
                    "int"
                ]
            }
        },
        "CloudpickleWrapper.__getstate__": {
            "name": "__getstate__",
            "location": 220,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CloudpickleWrapper.__setstate__": {
            "name": "__setstate__",
            "location": 223,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ob": [
                    "dict[str, typing.Any]",
                    "str"
                ]
            }
        },
        "SubprocVecEnv.__init__": {
            "name": "__init__",
            "location": 233,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "env_fns": []
            }
        },
        "SubprocVecEnv.step_async": {
            "name": "step_async",
            "location": 264,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "actions": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ]
            }
        },
        "SubprocVecEnv.step_wait": {
            "name": "step_wait",
            "location": 270,
            "return": [
                "tuple[typing.Union[dict[str, typing.Union[typing.Any,typing.Any,typing.Any]],dict[, ],tuple[],int]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SubprocVecEnv.reset": {
            "name": "reset",
            "location": 277,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SubprocVecEnv.sample": {
            "name": "sample",
            "location": 283,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SubprocVecEnv.close_extras": {
            "name": "close_extras",
            "location": 289,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SubprocVecEnv.get_images": {
            "name": "get_images",
            "location": 299,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SubprocVecEnv._assert_not_closed": {
            "name": "_assert_not_closed",
            "location": 306,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "rl_algorithms-master/rl_algorithms/common/env/normalizers.py": {
        "ActionNormalizer.action": {
            "name": "action",
            "location": 15,
            "return": [],
            "arguments": {
                "self": [],
                "action": []
            }
        },
        "ActionNormalizer.reverse_action": {
            "name": "reverse_action",
            "location": 28,
            "return": [],
            "arguments": {
                "self": [],
                "action": []
            }
        }
    },
    "rl_algorithms-master/rl_algorithms/common/env/utils.py": {
        "set_env": {
            "name": "set_env",
            "location": 17,
            "return": [
                "tuple[typing.Union[int,str,typing.Type,tuple[str],ActionNormalizer]]"
            ],
            "arguments": {
                "env": [
                    "int",
                    "str",
                    "typing.Type",
                    "tuple[str]"
                ],
                "max_episode_steps": [
                    "int"
                ],
                "env_wrappers": [
                    "dict[str, str]",
                    "list[tuple[typing.Union[str,str]]]"
                ]
            }
        },
        "env_generator": {
            "name": "env_generator",
            "location": 36,
            "return": [],
            "arguments": {
                "env_name": [
                    "bool"
                ],
                "max_episode_steps": [
                    "bool"
                ],
                "env_wrappers": [
                    "None",
                    "bool"
                ]
            }
        },
        "make_envs": {
            "name": "make_envs",
            "location": 50,
            "return": [
                "SubprocVecEnv"
            ],
            "arguments": {
                "env_gen": [
                    "int"
                ],
                "n_envs": [
                    "int"
                ]
            }
        },
        "env_generator._thunk": {
            "name": "_thunk",
            "location": 41,
            "return": [],
            "arguments": {
                "rank": []
            }
        }
    },
    "rl_algorithms-master/rl_algorithms/common/env/__init__.py": {},
    "rl_algorithms-master/rl_algorithms/common/networks/brain.py": {
        "Brain.__init__": {
            "name": "__init__",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "backbone_cfg": [
                    "list[str]",
                    "str",
                    "int",
                    "typing.Callable[, ]"
                ],
                "head_cfg": [
                    "int",
                    "str"
                ],
                "shared_backbone": [
                    "None",
                    "bool",
                    "float",
                    "str"
                ]
            }
        },
        "Brain.forward": {
            "name": "forward",
            "location": 49,
            "return": [
                "int",
                "str",
                "list[int]",
                "dict[int, dict[str, int]]",
                "list[str]"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "float"
                ]
            }
        },
        "Brain.forward_": {
            "name": "forward_",
            "location": 56,
            "return": [
                "int",
                "list[list[int]]",
                "float",
                "list[list[str]]"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "float",
                    "bool"
                ],
                "n_tau_samples": [
                    "None",
                    "int"
                ]
            }
        },
        "Brain.calculate_fc_input_size": {
            "name": "calculate_fc_input_size",
            "location": 65,
            "return": [],
            "arguments": {
                "self": [],
                "state_dim": [
                    "tuple[]",
                    "dict[, ]",
                    "int",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "GRUBrain.__init__": {
            "name": "__init__",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "backbone_cfg": [
                    "bool",
                    "dict[str, typing.Any]",
                    "typing.Callable[Any,Any, bool]"
                ],
                "head_cfg": [
                    "int",
                    "bytes",
                    "tuple[]",
                    "dict[, ]"
                ],
                "gru_cfg": [
                    "int",
                    "str"
                ]
            }
        },
        "GRUBrain.forward": {
            "name": "forward",
            "location": 99,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "self": [],
                "x": [],
                "hidden": [
                    "bool"
                ],
                "prev_action": [
                    "int"
                ],
                "prev_reward": [
                    "int"
                ]
            }
        },
        "GRUBrain.forward_": {
            "name": "forward_",
            "location": 157,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "self": [],
                "x": [],
                "hidden": [
                    "list[float]"
                ],
                "prev_action": [
                    "int",
                    "typing.Any",
                    "None",
                    "typing.Mapping",
                    "str"
                ],
                "prev_reward": [
                    "int",
                    "typing.Any",
                    "None",
                    "typing.Mapping",
                    "str"
                ],
                "n_tau_samples": [
                    "None",
                    "int",
                    "float",
                    "str"
                ]
            }
        },
        "GRUBrain.calculate_fc_input_size": {
            "name": "calculate_fc_input_size",
            "location": 218,
            "return": [],
            "arguments": {
                "self": [],
                "state_dim": [
                    "tuple[]",
                    "dict[, ]",
                    "int",
                    "dict[str, typing.Any]"
                ]
            }
        }
    },
    "rl_algorithms-master/rl_algorithms/common/networks/heads.py": {
        "init_layer_uniform": {
            "name": "init_layer_uniform",
            "location": 23,
            "return": [
                "str",
                "tuple[typing.Union[int,int]]",
                "bool"
            ],
            "arguments": {
                "layer": [
                    "str",
                    "tuple[typing.Union[int,int]]",
                    "bool"
                ],
                "init_w": [
                    "float"
                ]
            }
        },
        "MLP.__init__": {
            "name": "__init__",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "configs": [],
                "hidden_activation": [],
                "linear_layer": [],
                "use_output_layer": [
                    "bool"
                ],
                "n_category": [
                    "int"
                ],
                "init_fn": []
            }
        },
        "MLP.forward": {
            "name": "forward",
            "location": 91,
            "return": [
                "int",
                "float",
                "tuple[typing.Union[typing.Any,typing.Any]]"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "int",
                    "float"
                ]
            }
        },
        "GaussianDist.__init__": {
            "name": "__init__",
            "location": 114,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "configs": [
                    "str",
                    "typing.Type",
                    "int",
                    "float",
                    "None"
                ],
                "hidden_activation": [],
                "mu_activation": [],
                "log_std_min": [
                    "int"
                ],
                "log_std_max": [
                    "int"
                ],
                "init_fn": []
            }
        },
        "GaussianDist.get_dist_params": {
            "name": "get_dist_params",
            "location": 148,
            "return": [
                "tuple[typing.Union[int,dict[str, int],float,list[],str]]"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "typing.Iterable[str]",
                    "float",
                    "None",
                    "str",
                    "typing.Type",
                    "int"
                ]
            }
        },
        "GaussianDist.forward": {
            "name": "forward",
            "location": 167,
            "return": [
                "tuple[typing.Union[str,int,list[],list[str],dict[, ],Normal]]"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "str",
                    "bool"
                ]
            }
        },
        "TanhGaussianDistParams.__init__": {
            "name": "__init__",
            "location": 184,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TanhGaussianDistParams.forward": {
            "name": "forward",
            "location": 188,
            "return": [
                "tuple[typing.Union[str,dict[str, list[typing.Any]],set[str]]]"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "str",
                    "list[tuple[typing.Union[str,str]]]",
                    "dict[, ]"
                ],
                "epsilon": [
                    "float"
                ]
            }
        },
        "CategoricalDist.__init__": {
            "name": "__init__",
            "location": 213,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "configs": [
                    "float",
                    "int"
                ],
                "hidden_activation": []
            }
        },
        "CategoricalDist.forward": {
            "name": "forward",
            "location": 225,
            "return": [
                "tuple[typing.Union[str,int,list[],list[str],dict[, ],Categorical]]"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "int"
                ]
            }
        }
    },
    "rl_algorithms-master/rl_algorithms/common/networks/__init__.py": {},
    "rl_algorithms-master/rl_algorithms/common/networks/backbones/cnn.py": {
        "CNNLayer.__init__": {
            "name": "__init__",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "input_size": [
                    "int",
                    "list[int]"
                ],
                "output_size": [
                    "int",
                    "list[int]"
                ],
                "kernel_size": [
                    "int",
                    "list[int]"
                ],
                "stride": [
                    "int"
                ],
                "padding": [
                    "int"
                ],
                "pre_activation_fn": [],
                "activation_fn": [],
                "post_activation_fn": []
            }
        },
        "CNNLayer.forward": {
            "name": "forward",
            "location": 50,
            "return": [
                "int",
                "list[list[int]]",
                "float",
                "list[list[str]]"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "float",
                    "int"
                ]
            }
        },
        "CNN.__init__": {
            "name": "__init__",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "configs": []
            }
        },
        "CNN.forward": {
            "name": "forward",
            "location": 73,
            "return": [],
            "arguments": {
                "self": [],
                "x": []
            }
        }
    },
    "rl_algorithms-master/rl_algorithms/common/networks/backbones/resnet.py": {
        "BasicBlock.__init__": {
            "name": "__init__",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "in_planes": [
                    "int",
                    "float",
                    "list[int]"
                ],
                "planes": [
                    "int",
                    "float",
                    "list[int]"
                ],
                "stride": [
                    "int"
                ],
                "expansion": [
                    "int"
                ]
            }
        },
        "BasicBlock.forward": {
            "name": "forward",
            "location": 63,
            "return": [],
            "arguments": {
                "self": [],
                "x": [
                    "int",
                    "float"
                ]
            }
        },
        "Bottleneck.__init__": {
            "name": "__init__",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "in_planes": [
                    "bool",
                    "typing.Iterable[typing.Union[int,str]]"
                ],
                "planes": [
                    "int",
                    "typing.Hashable"
                ],
                "stride": [
                    "int"
                ],
                "expansion": [
                    "int"
                ]
            }
        },
        "Bottleneck.forward": {
            "name": "forward",
            "location": 119,
            "return": [],
            "arguments": {
                "self": [],
                "x": [
                    "int",
                    "float"
                ]
            }
        },
        "ResNet.__init__": {
            "name": "__init__",
            "location": 134,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "configs": [
                    "int"
                ]
            }
        },
        "ResNet._make_layer": {
            "name": "_make_layer",
            "location": 175,
            "return": [],
            "arguments": {
                "self": [],
                "block": [
                    "int",
                    "dict[, ]",
                    "str",
                    "float",
                    "list[]"
                ],
                "planes": [
                    "int",
                    "dict[, ]",
                    "str",
                    "float",
                    "list[]"
                ],
                "num_blocks": [
                    "int"
                ],
                "stride": [
                    "int"
                ]
            }
        },
        "ResNet.forward": {
            "name": "forward",
            "location": 183,
            "return": [],
            "arguments": {
                "self": [],
                "x": []
            }
        }
    },
    "rl_algorithms-master/rl_algorithms/common/networks/backbones/__init__.py": {},
    "rl_algorithms-master/rl_algorithms/ddpg/agent.py": {
        "DDPGAgent.__init__": {
            "name": "__init__",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "env": [
                    "bool",
                    "typing.Callable[, ]"
                ],
                "env_info": [
                    "bool",
                    "typing.Callable[, ]"
                ],
                "hyper_params": [
                    "bool",
                    "list[]",
                    "str"
                ],
                "learner_cfg": [
                    "bool",
                    "list[]",
                    "str"
                ],
                "noise_cfg": [
                    "str",
                    "bool",
                    "list[str]",
                    "dict[, ]"
                ],
                "log_cfg": [
                    "bool",
                    "typing.Callable[, ]"
                ],
                "is_test": [
                    "bool",
                    "typing.Callable[, ]"
                ],
                "load_from": [
                    "bool",
                    "typing.Callable[, ]"
                ],
                "is_render": [
                    "bool",
                    "typing.Callable[, ]"
                ],
                "render_after": [
                    "bool",
                    "typing.Callable[, ]"
                ],
                "is_log": [
                    "bool",
                    "typing.Callable[, ]"
                ],
                "save_period": [
                    "bool",
                    "typing.Callable[, ]"
                ],
                "episode_num": [
                    "bool",
                    "typing.Callable[, ]"
                ],
                "max_episode_steps": [
                    "bool",
                    "typing.Callable[, ]"
                ],
                "interim_test_num": [
                    "bool",
                    "typing.Callable[, ]"
                ]
            }
        },
        "DDPGAgent._initialize": {
            "name": "_initialize",
            "location": 101,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DDPGAgent.select_action": {
            "name": "select_action",
            "location": 121,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "list[]"
                ]
            }
        },
        "DDPGAgent._preprocess_state": {
            "name": "_preprocess_state",
            "location": 143,
            "return": [],
            "arguments": {
                "self": [],
                "state": [
                    "str",
                    "float",
                    "dict[, ]"
                ]
            }
        },
        "DDPGAgent.step": {
            "name": "step",
            "location": 148,
            "return": [
                "tuple[typing.Union[str,int,list[str],dict[, ],list[],list[tuple[typing.Union[int,int]]],tuple[typing.Union[typing.Any,typing.Any,typing.Any,typing.Any,typing.Any,typing.Any]]]]"
            ],
            "arguments": {
                "self": [],
                "action": [
                    "dict[str, collections.abc.AsyncGenerator]",
                    "int"
                ]
            }
        },
        "DDPGAgent._add_transition_to_memory": {
            "name": "_add_transition_to_memory",
            "location": 160,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "transition": [
                    "str",
                    "int"
                ]
            }
        },
        "DDPGAgent.write_log": {
            "name": "write_log",
            "location": 164,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "log_value": [
                    "tuple[]",
                    "bytes",
                    "bool",
                    "str",
                    "float"
                ]
            }
        },
        "DDPGAgent.pretrain": {
            "name": "pretrain",
            "location": 196,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DDPGAgent.train": {
            "name": "train",
            "location": 200,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "rl_algorithms-master/rl_algorithms/ddpg/learner.py": {
        "DDPGLearner.__init__": {
            "name": "__init__",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "hyper_params": [
                    "bool",
                    "str"
                ],
                "log_cfg": [
                    "bool",
                    "str"
                ],
                "backbone": [
                    "bool",
                    "tuple[typing.Union[int,int]]",
                    "typing.Callable[str, bool]",
                    "list[int]"
                ],
                "head": [
                    "bool",
                    "tuple[typing.Union[int,int]]",
                    "typing.Callable[str, bool]",
                    "list[int]"
                ],
                "optim_cfg": [
                    "bool",
                    "tuple[typing.Union[int,int]]",
                    "typing.Callable[str, bool]",
                    "list[int]"
                ],
                "noise_cfg": [
                    "bool",
                    "tuple[typing.Union[int,int]]",
                    "typing.Callable[str, bool]",
                    "list[int]"
                ],
                "env_name": [
                    "bool",
                    "str"
                ],
                "state_size": [
                    "list[str]",
                    "tuple[typing.Union[int,int]]"
                ],
                "output_size": [
                    "int",
                    "float"
                ],
                "is_test": [
                    "bool",
                    "str"
                ],
                "load_from": [
                    "bool",
                    "tuple[typing.Union[int,int]]",
                    "typing.Callable[str, bool]",
                    "list[int]"
                ]
            }
        },
        "DDPGLearner._init_network": {
            "name": "_init_network",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DDPGLearner.update_model": {
            "name": "update_model",
            "location": 96,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "self": [],
                "experience": [
                    "tuple[torch.Tensor]",
                    "tuple[rl_algorithms.common.abstraclearner.TensorTuple]",
                    "list[]"
                ]
            }
        },
        "DDPGLearner.save_params": {
            "name": "save_params",
            "location": 135,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "n_episode": [
                    "int",
                    "bytes",
                    "str"
                ]
            }
        },
        "DDPGLearner.load_params": {
            "name": "load_params",
            "location": 147,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "typing.Sequence[str]"
                ]
            }
        },
        "DDPGLearner.get_state_dict": {
            "name": "get_state_dict",
            "location": 160,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "DDPGLearner.get_policy": {
            "name": "get_policy",
            "location": 164,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "rl_algorithms-master/rl_algorithms/ddpg/__init__.py": {},
    "rl_algorithms-master/rl_algorithms/distillation/dqn_agent.py": {
        "DistillationDQNAgent._initialize": {
            "name": "_initialize",
            "location": 37,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DistillationDQNAgent.make_distillation_dir": {
            "name": "make_distillation_dir",
            "location": 69,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DistillationDQNAgent.get_action_and_q": {
            "name": "get_action_and_q",
            "location": 78,
            "return": [],
            "arguments": {
                "self": [],
                "state": []
            }
        },
        "DistillationDQNAgent.step": {
            "name": "step",
            "location": 89,
            "return": [],
            "arguments": {
                "self": [],
                "action": [],
                "q_values": []
            }
        },
        "DistillationDQNAgent._test": {
            "name": "_test",
            "location": 123,
            "return": [],
            "arguments": {
                "self": [],
                "interim_test": []
            }
        },
        "DistillationDQNAgent.update_distillation": {
            "name": "update_distillation",
            "location": 194,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DistillationDQNAgent.add_expert_q": {
            "name": "add_expert_q",
            "location": 216,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DistillationDQNAgent.train": {
            "name": "train",
            "location": 238,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "rl_algorithms-master/rl_algorithms/distillation/__init__.py": {},
    "rl_algorithms-master/rl_algorithms/dqn/agent.py": {
        "DQNAgent.__init__": {
            "name": "__init__",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "env": [
                    "bool",
                    "typing.Callable[, ]"
                ],
                "env_info": [
                    "bool",
                    "typing.Callable[, ]"
                ],
                "hyper_params": [
                    "bool",
                    "float",
                    "dict[str, typing.Any]"
                ],
                "learner_cfg": [
                    "dict[str, typing.Any]",
                    "float",
                    "None",
                    "bool"
                ],
                "log_cfg": [
                    "bool",
                    "typing.Callable[, ]"
                ],
                "is_test": [
                    "bool",
                    "typing.Callable[, ]"
                ],
                "load_from": [
                    "bool",
                    "typing.Callable[, ]"
                ],
                "is_render": [
                    "bool",
                    "typing.Callable[, ]"
                ],
                "render_after": [
                    "bool",
                    "typing.Callable[, ]"
                ],
                "is_log": [
                    "bool",
                    "typing.Callable[, ]"
                ],
                "save_period": [
                    "bool",
                    "typing.Callable[, ]"
                ],
                "episode_num": [
                    "bool",
                    "typing.Callable[, ]"
                ],
                "max_episode_steps": [
                    "bool",
                    "typing.Callable[, ]"
                ],
                "interim_test_num": [
                    "bool",
                    "typing.Callable[, ]"
                ]
            }
        },
        "DQNAgent._initialize": {
            "name": "_initialize",
            "location": 112,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DQNAgent.select_action": {
            "name": "select_action",
            "location": 144,
            "return": [
                "int",
                "float"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "list[]"
                ]
            }
        },
        "DQNAgent._preprocess_state": {
            "name": "_preprocess_state",
            "location": 159,
            "return": [],
            "arguments": {
                "self": [],
                "state": [
                    "str",
                    "float",
                    "dict[, ]"
                ]
            }
        },
        "DQNAgent.step": {
            "name": "step",
            "location": 164,
            "return": [
                "tuple[typing.Union[str,int,list[str],dict[, ],list[],list[tuple[typing.Union[int,int]]],tuple[typing.Union[typing.Any,typing.Any,typing.Any,typing.Any,typing.Any,typing.Any]]]]"
            ],
            "arguments": {
                "self": [],
                "action": [
                    "dict[str, collections.abc.AsyncGenerator]",
                    "int"
                ]
            }
        },
        "DQNAgent._add_transition_to_memory": {
            "name": "_add_transition_to_memory",
            "location": 177,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "transition": [
                    "str",
                    "dict[str, typing.Any]",
                    "int"
                ]
            }
        },
        "DQNAgent.write_log": {
            "name": "write_log",
            "location": 188,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "log_value": [
                    "tuple[]",
                    "bytes",
                    "bool",
                    "str",
                    "float"
                ]
            }
        },
        "DQNAgent.pretrain": {
            "name": "pretrain",
            "location": 219,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DQNAgent.sample_experience": {
            "name": "sample_experience",
            "location": 223,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "DQNAgent.train": {
            "name": "train",
            "location": 241,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "rl_algorithms-master/rl_algorithms/dqn/distributed_logger.py": {
        "DQNLogger.load_params": {
            "name": "load_params",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "list[str]",
                    "tuple[typing.Union[str,str]]"
                ]
            }
        },
        "DQNLogger.select_action": {
            "name": "select_action",
            "location": 28,
            "return": [
                "dict[str, str]",
                "list[tuple[typing.Union[str,str,typing.Any]]]",
                "str",
                "dict[str, typing.Union[dict[, ],typing.Any]]",
                "int",
                "list[str]"
            ],
            "arguments": {
                "self": [],
                "state": []
            }
        },
        "DQNLogger.write_log": {
            "name": "write_log",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "log_value": [
                    "str",
                    "tuple[]"
                ]
            }
        }
    },
    "rl_algorithms-master/rl_algorithms/dqn/distributed_worker.py": {
        "DQNWorker.__init__": {
            "name": "__init__",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "rank": [
                    "int",
                    "None",
                    "str",
                    "float"
                ],
                "device": [
                    "int",
                    "None",
                    "str",
                    "float"
                ],
                "hyper_params": [
                    "int",
                    "float",
                    "None",
                    "str"
                ],
                "env_name": [
                    "int",
                    "None",
                    "str",
                    "float"
                ],
                "is_atari": [
                    "int",
                    "None",
                    "str",
                    "float"
                ],
                "max_episode_steps": [
                    "int",
                    "None",
                    "str",
                    "float"
                ],
                "loss_type": [
                    "bool",
                    "str"
                ],
                "state_dict": [
                    "bool",
                    "float",
                    "tuple[typing.Union[float,float]]",
                    "list[float]"
                ],
                "backbone": [
                    "bool",
                    "float",
                    "tuple[typing.Union[float,float]]",
                    "list[float]"
                ],
                "head": [
                    "bool",
                    "float",
                    "tuple[typing.Union[float,float]]",
                    "list[float]"
                ],
                "state_size": [
                    "int",
                    "float"
                ],
                "output_size": [
                    "int",
                    "list[int]",
                    "list[str]"
                ]
            }
        },
        "DQNWorker._init_networks": {
            "name": "_init_networks",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "state_dict": [
                    "int",
                    "typing.OrderedDict",
                    "typing.Mapping",
                    "None",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "DQNWorker.load_params": {
            "name": "load_params",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "typing.Literal"
                ]
            }
        },
        "DQNWorker.select_action": {
            "name": "select_action",
            "location": 80,
            "return": [
                "int",
                "float"
            ],
            "arguments": {
                "self": [],
                "state": []
            }
        },
        "DQNWorker.step": {
            "name": "step",
            "location": 101,
            "return": [
                "tuple[typing.Union[list[],str,list[dict[, ]],bytes,int,list[tuple[]],float,list[int],dict[, ],list[tuple[typing.Union[int,int]]],tuple[typing.Union[typing.Any,typing.Any,typing.Any,typing.Any,typing.Any,typing.Any]]]]"
            ],
            "arguments": {
                "self": [],
                "action": [
                    "dict[, ]",
                    "str"
                ]
            }
        },
        "DQNWorker.compute_priorities": {
            "name": "compute_priorities",
            "location": 106,
            "return": [],
            "arguments": {
                "self": [],
                "memory": [
                    "str"
                ]
            }
        },
        "DQNWorker.synchronize": {
            "name": "synchronize",
            "location": 127,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "new_state_dict": [
                    "float",
                    "dict[str, numpy.ndarray]",
                    "str",
                    "tuple[typing.Union[int,int]]"
                ]
            }
        }
    },
    "rl_algorithms-master/rl_algorithms/dqn/learner.py": {
        "DQNLearner.__init__": {
            "name": "__init__",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "loss_type": [
                    "int",
                    "str"
                ],
                "backbone": [
                    "bool",
                    "tuple[str]",
                    "dict[, ]",
                    "None"
                ],
                "head": [
                    "bool",
                    "tuple[str]",
                    "dict[, ]",
                    "None"
                ],
                "optim_cfg": [
                    "bool",
                    "tuple[str]",
                    "dict[, ]",
                    "None"
                ],
                "hyper_params": [
                    "bool",
                    "str",
                    "typing.Callable[, ]",
                    "None",
                    "typing.Type"
                ],
                "log_cfg": [
                    "str",
                    "None",
                    "bool",
                    "typing.Type"
                ],
                "env_name": [
                    "str",
                    "None",
                    "bool",
                    "typing.Type"
                ],
                "state_size": [
                    "int",
                    "float",
                    "dict[str, str]"
                ],
                "output_size": [
                    "int",
                    "list[str]",
                    "bytes"
                ],
                "is_test": [
                    "str",
                    "None",
                    "bool",
                    "typing.Type"
                ],
                "load_from": [
                    "bool",
                    "tuple[str]",
                    "dict[, ]",
                    "None"
                ]
            }
        },
        "DQNLearner._init_network": {
            "name": "_init_network",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DQNLearner.update_model": {
            "name": "update_model",
            "location": 85,
            "return": [
                "tuple[typing.Union[int,str,tuple[typing.Union[str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str]],set[],range]]"
            ],
            "arguments": {
                "self": [],
                "experience": [
                    "tuple[rl_algorithms.common.abstraclearner.TensorTuple]",
                    "str"
                ]
            }
        },
        "DQNLearner.save_params": {
            "name": "save_params",
            "location": 147,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "n_episode": [
                    "int",
                    "bytes",
                    "str"
                ]
            }
        },
        "DQNLearner.load_params": {
            "name": "load_params",
            "location": 158,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "typing.Sequence[str]"
                ]
            }
        },
        "DQNLearner.get_state_dict": {
            "name": "get_state_dict",
            "location": 168,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DQNLearner.get_policy": {
            "name": "get_policy",
            "location": 173,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "rl_algorithms-master/rl_algorithms/dqn/linear.py": {
        "NoisyLinear.__init__": {
            "name": "__init__",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "in_features": [
                    "bool",
                    "str"
                ],
                "out_features": [
                    "bool",
                    "str"
                ],
                "std_init": [
                    "float"
                ]
            }
        },
        "NoisyLinear.reset_parameters": {
            "name": "reset_parameters",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "NoisyLinear.scale_noise": {
            "name": "scale_noise",
            "location": 67,
            "return": [],
            "arguments": {
                "size": [
                    "int",
                    "str"
                ]
            }
        },
        "NoisyLinear.reset_noise": {
            "name": "reset_noise",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "NoisyLinear.forward": {
            "name": "forward",
            "location": 82,
            "return": [],
            "arguments": {
                "self": [],
                "x": [
                    "float",
                    "int",
                    "bytes"
                ]
            }
        },
        "NoisyLinearConstructor.__init__": {
            "name": "__init__",
            "location": 103,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "std_init": [
                    "float"
                ]
            }
        },
        "NoisyLinearConstructor.__call__": {
            "name": "__call__",
            "location": 107,
            "return": [
                "NoisyLinear"
            ],
            "arguments": {
                "self": [],
                "in_features": [
                    "str",
                    "bool"
                ],
                "out_features": [
                    "str",
                    "bool"
                ]
            }
        },
        "NoisyMLPHandler.reset_noise": {
            "name": "reset_noise",
            "location": 115,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "rl_algorithms-master/rl_algorithms/dqn/losses.py": {
        "IQNLoss.__call__": {
            "name": "__call__",
            "location": 24,
            "return": [],
            "arguments": {
                "self": [],
                "model": [],
                "target_model": [],
                "experiences": [],
                "gamma": [],
                "head_cfg": []
            }
        },
        "C51Loss.__call__": {
            "name": "__call__",
            "location": 151,
            "return": [],
            "arguments": {
                "self": [],
                "model": [],
                "target_model": [],
                "experiences": [],
                "gamma": [],
                "head_cfg": []
            }
        },
        "DQNLoss.__call__": {
            "name": "__call__",
            "location": 215,
            "return": [],
            "arguments": {
                "self": [],
                "model": [],
                "target_model": [],
                "experiences": [],
                "gamma": [],
                "head_cfg": []
            }
        }
    },
    "rl_algorithms-master/rl_algorithms/dqn/networks.py": {
        "DuelingMLP.__init__": {
            "name": "__init__",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "configs": [
                    "dict[, ]",
                    "int"
                ],
                "hidden_activation": []
            }
        },
        "DuelingMLP.forward_": {
            "name": "forward_",
            "location": 61,
            "return": [],
            "arguments": {
                "self": [],
                "x": [
                    "float",
                    "int"
                ]
            }
        },
        "DuelingMLP.forward": {
            "name": "forward",
            "location": 73,
            "return": [
                "float",
                "int",
                "list[]"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "int"
                ]
            }
        },
        "C51DuelingMLP.__init__": {
            "name": "__init__",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "configs": [
                    "bool",
                    "str",
                    "tuple[typing.Union[int,...]]",
                    "None"
                ],
                "hidden_activation": []
            }
        },
        "C51DuelingMLP.forward_": {
            "name": "forward_",
            "location": 121,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "int"
                ]
            }
        },
        "C51DuelingMLP.forward": {
            "name": "forward",
            "location": 141,
            "return": [
                "str",
                "typing.Final",
                "dict[str, typing.Union[typing.Any,typing.Any,typing.Any]]",
                "set[str]"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "list[numpy.ndarray]"
                ]
            }
        },
        "IQNMLP.__init__": {
            "name": "__init__",
            "location": 157,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "configs": [
                    "dict[, ]",
                    "int"
                ],
                "hidden_activation": []
            }
        },
        "IQNMLP.forward_": {
            "name": "forward_",
            "location": 187,
            "return": [
                "tuple[typing.Union[dict[, ],list[],float]]"
            ],
            "arguments": {
                "self": [],
                "state": [],
                "n_tau_samples": [
                    "int",
                    "str",
                    "float"
                ]
            }
        },
        "IQNMLP.forward": {
            "name": "forward",
            "location": 216,
            "return": [],
            "arguments": {
                "self": [],
                "state": [
                    "None"
                ]
            }
        }
    },
    "rl_algorithms-master/rl_algorithms/dqn/__init__.py": {},
    "rl_algorithms-master/rl_algorithms/fd/ddpg_agent.py": {
        "DDPGfDAgent._initialize": {
            "name": "_initialize",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DDPGfDAgent._add_transition_to_memory": {
            "name": "_add_transition_to_memory",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "transition": [
                    "str",
                    "dict[str, typing.Any]",
                    "int"
                ]
            }
        },
        "DDPGfDAgent.sample_experience": {
            "name": "sample_experience",
            "location": 96,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "DDPGfDAgent.pretrain": {
            "name": "pretrain",
            "location": 112,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DDPGfDAgent.train": {
            "name": "train",
            "location": 133,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "rl_algorithms-master/rl_algorithms/fd/ddpg_learner.py": {
        "DDPGfDLearner._get_critic_loss": {
            "name": "_get_critic_loss",
            "location": 29,
            "return": [
                "dict[, ]",
                "str",
                "frozenset",
                "dict[str, tuple[typing.Union[str,str,str,str]]]",
                "dict[int, list[typing.Any]]"
            ],
            "arguments": {
                "self": [],
                "experiences": [
                    "tuple[torch.Tensor]",
                    "tuple[rl_algorithms.common.abstraclearner.TensorTuple]",
                    "str"
                ],
                "gamma": [
                    "float",
                    "str",
                    "bool",
                    "None",
                    "typing.Type"
                ]
            }
        },
        "DDPGfDLearner.update_model": {
            "name": "update_model",
            "location": 50,
            "return": [
                "tuple[typing.Union[list[typing.Optional[str]],str,int,float,list[]]]"
            ],
            "arguments": {
                "self": [],
                "experience": [
                    "tuple[rl_algorithms.common.abstraclearner.TensorTuple]",
                    "str"
                ]
            }
        }
    },
    "rl_algorithms-master/rl_algorithms/fd/dqn_agent.py": {
        "DQfDAgent._initialize": {
            "name": "_initialize",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DQfDAgent._load_demos": {
            "name": "_load_demos",
            "location": 76,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DQfDAgent.write_log": {
            "name": "write_log",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "log_value": [
                    "str",
                    "int"
                ]
            }
        },
        "DQfDAgent.pretrain": {
            "name": "pretrain",
            "location": 120,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DQfDAgent.train": {
            "name": "train",
            "location": 141,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "rl_algorithms-master/rl_algorithms/fd/dqn_learner.py": {
        "DQfDLearner.update_model": {
            "name": "update_model",
            "location": 23,
            "return": [
                "tuple[typing.Union[str,int]]"
            ],
            "arguments": {
                "self": [],
                "experience": [
                    "tuple[rl_algorithms.common.abstraclearner.TensorTuple]",
                    "str"
                ]
            }
        }
    },
    "rl_algorithms-master/rl_algorithms/fd/sac_agent.py": {
        "SACfDAgent._initialize": {
            "name": "_initialize",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SACfDAgent._add_transition_to_memory": {
            "name": "_add_transition_to_memory",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "transition": [
                    "str",
                    "dict[str, typing.Any]",
                    "int"
                ]
            }
        },
        "SACfDAgent.sample_experience": {
            "name": "sample_experience",
            "location": 94,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SACfDAgent.pretrain": {
            "name": "pretrain",
            "location": 110,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SACfDAgent.train": {
            "name": "train",
            "location": 137,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "rl_algorithms-master/rl_algorithms/fd/sac_learner.py": {
        "SACfDLearner.update_model": {
            "name": "update_model",
            "location": 16,
            "return": [],
            "arguments": {
                "self": [],
                "experience": [
                    "tuple[rl_algorithms.common.abstraclearner.TensorTuple]",
                    "str"
                ]
            }
        }
    },
    "rl_algorithms-master/rl_algorithms/fd/__init__.py": {},
    "rl_algorithms-master/rl_algorithms/gail/agent.py": {
        "GAILPPOAgent.__init__": {
            "name": "__init__",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "env": [
                    "bool",
                    "None",
                    "typing.Callable[, ]"
                ],
                "env_info": [
                    "bool",
                    "None",
                    "typing.Callable[, ]"
                ],
                "hyper_params": [
                    "bool",
                    "None",
                    "typing.Callable[, ]"
                ],
                "learner_cfg": [
                    "bool",
                    "None",
                    "typing.Callable[, ]"
                ],
                "log_cfg": [
                    "bool",
                    "None",
                    "typing.Callable[, ]"
                ],
                "is_test": [
                    "bool",
                    "None",
                    "typing.Callable[, ]"
                ],
                "load_from": [
                    "bool",
                    "None",
                    "typing.Callable[, ]"
                ],
                "is_render": [
                    "bool",
                    "None",
                    "typing.Callable[, ]"
                ],
                "render_after": [
                    "bool",
                    "None",
                    "typing.Callable[, ]"
                ],
                "is_log": [
                    "bool",
                    "None",
                    "typing.Callable[, ]"
                ],
                "save_period": [
                    "bool",
                    "None",
                    "typing.Callable[, ]"
                ],
                "episode_num": [
                    "bool",
                    "None",
                    "typing.Callable[, ]"
                ],
                "max_episode_steps": [
                    "bool",
                    "None",
                    "typing.Callable[, ]"
                ],
                "interim_test_num": [
                    "bool",
                    "None",
                    "typing.Callable[, ]"
                ]
            }
        },
        "GAILPPOAgent.step": {
            "name": "step",
            "location": 90,
            "return": [
                "tuple[typing.Union[list[],str,list[dict[, ]],bytes,int,list[tuple[]],float,list[int],dict[, ],list[tuple[typing.Union[int,int]]],tuple[typing.Union[typing.Any,typing.Any,typing.Any,typing.Any,typing.Any,typing.Any]]]]"
            ],
            "arguments": {
                "self": [],
                "action": [
                    "str",
                    "float",
                    "int"
                ]
            }
        },
        "GAILPPOAgent.write_log": {
            "name": "write_log",
            "location": 99,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "log_value": [
                    "str",
                    "list[float]",
                    "int",
                    "None",
                    "list[dict[, ]]"
                ]
            }
        },
        "GAILPPOAgent.train": {
            "name": "train",
            "location": 147,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "rl_algorithms-master/rl_algorithms/gail/learner.py": {
        "GAILPPOLearner.__init__": {
            "name": "__init__",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "hyper_params": [
                    "bool"
                ],
                "log_cfg": [
                    "bool"
                ],
                "backbone": [
                    "bool"
                ],
                "head": [
                    "float",
                    "None",
                    "int",
                    "typing.Sequence[int]"
                ],
                "optim_cfg": [
                    "bool"
                ],
                "env_name": [
                    "bool"
                ],
                "state_size": [
                    "str",
                    "int",
                    "None",
                    "float",
                    "typing.Callable[[], None]"
                ],
                "output_size": [
                    "int",
                    "str",
                    "dict[, ]"
                ],
                "is_test": [
                    "bool"
                ],
                "load_from": [
                    "bool"
                ]
            }
        },
        "GAILPPOLearner._init_network": {
            "name": "_init_network",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GAILPPOLearner.update_model": {
            "name": "update_model",
            "location": 119,
            "return": [],
            "arguments": {
                "self": [],
                "experience": [
                    "int",
                    "typing.Pattern"
                ],
                "epsilon": [
                    "int"
                ]
            }
        },
        "GAILPPOLearner.save_params": {
            "name": "save_params",
            "location": 247,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "n_episode": [
                    "int",
                    "list[str]",
                    "str"
                ]
            }
        },
        "GAILPPOLearner.load_params": {
            "name": "load_params",
            "location": 259,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "typing.Literal"
                ]
            }
        },
        "GAILPPOLearner.get_state_dict": {
            "name": "get_state_dict",
            "location": 270,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "GAILPPOLearner.set_demo_memory": {
            "name": "set_demo_memory",
            "location": 278,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "demo_memory": [
                    "bool",
                    "float"
                ]
            }
        }
    },
    "rl_algorithms-master/rl_algorithms/gail/networks.py": {
        "Discriminator.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "backbone_cfg": [
                    "list[str]",
                    "str",
                    "int",
                    "typing.Callable[, ]"
                ],
                "head_cfg": [
                    "int",
                    "str"
                ],
                "action_embedder_cfg": [
                    "int",
                    "str"
                ],
                "shared_backbone": [
                    "None",
                    "bool",
                    "float",
                    "str"
                ]
            }
        },
        "Discriminator.forward": {
            "name": "forward",
            "location": 50,
            "return": [],
            "arguments": {
                "self": [],
                "state_action": []
            }
        },
        "Discriminator.forward_action_embedder": {
            "name": "forward_action_embedder",
            "location": 60,
            "return": [],
            "arguments": {
                "self": [],
                "x": [
                    "int",
                    "float",
                    "str"
                ]
            }
        },
        "Discriminator.calculate_fc_input_size": {
            "name": "calculate_fc_input_size",
            "location": 66,
            "return": [],
            "arguments": {
                "self": [],
                "state_dim": [
                    "tuple[]",
                    "dict[, ]",
                    "int",
                    "dict[str, typing.Any]"
                ]
            }
        }
    },
    "rl_algorithms-master/rl_algorithms/gail/utils.py": {
        "compute_gail_reward": {
            "name": "compute_gail_reward",
            "location": 4,
            "return": [],
            "arguments": {
                "discriminator_score": [
                    "int",
                    "float",
                    "dict[str, list[str]]",
                    "None",
                    "str"
                ]
            }
        }
    },
    "rl_algorithms-master/rl_algorithms/gail/__init__.py": {},
    "rl_algorithms-master/rl_algorithms/ppo/agent.py": {
        "PPOAgent.__init__": {
            "name": "__init__",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "env": [
                    "bool",
                    "typing.Callable[, ]"
                ],
                "env_info": [
                    "bool",
                    "typing.Callable[, ]"
                ],
                "hyper_params": [
                    "bool",
                    "float"
                ],
                "learner_cfg": [
                    "bool",
                    "list[]",
                    "typing.Mapping"
                ],
                "log_cfg": [
                    "bool",
                    "typing.Callable[, ]"
                ],
                "is_test": [
                    "bool",
                    "typing.Callable[, ]"
                ],
                "load_from": [
                    "bool",
                    "typing.Callable[, ]"
                ],
                "is_render": [
                    "bool",
                    "typing.Callable[, ]"
                ],
                "render_after": [
                    "bool",
                    "typing.Callable[, ]"
                ],
                "is_log": [
                    "bool",
                    "typing.Callable[, ]"
                ],
                "save_period": [
                    "bool",
                    "typing.Callable[, ]"
                ],
                "episode_num": [
                    "bool",
                    "typing.Callable[, ]"
                ],
                "max_episode_steps": [
                    "bool",
                    "typing.Callable[, ]"
                ],
                "interim_test_num": [
                    "bool",
                    "typing.Callable[, ]"
                ]
            }
        },
        "PPOAgent.make_parallel_env": {
            "name": "make_parallel_env",
            "location": 125,
            "return": [],
            "arguments": {
                "self": [],
                "max_episode_steps": [
                    "int",
                    "set[int]",
                    "None"
                ],
                "n_workers": [
                    "int",
                    "typing.Iterable[list[str]]",
                    "float"
                ]
            }
        },
        "PPOAgent.select_action": {
            "name": "select_action",
            "location": 133,
            "return": [],
            "arguments": {
                "self": [],
                "state": []
            }
        },
        "PPOAgent.step": {
            "name": "step",
            "location": 161,
            "return": [
                "tuple[typing.Union[list[],str,list[dict[, ]],bytes,bool,typing.Type,tuple[],dict[, ],list[tuple[typing.Union[int,int]]]]]"
            ],
            "arguments": {
                "self": [],
                "action": [
                    "str",
                    "float",
                    "int"
                ]
            }
        },
        "PPOAgent.decay_epsilon": {
            "name": "decay_epsilon",
            "location": 182,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "t": [
                    "int"
                ]
            }
        },
        "PPOAgent.write_log": {
            "name": "write_log",
            "location": 192,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "log_value": [
                    "tuple[]",
                    "str",
                    "bytearray",
                    "int"
                ]
            }
        },
        "PPOAgent.train": {
            "name": "train",
            "location": 213,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "rl_algorithms-master/rl_algorithms/ppo/learner.py": {
        "PPOLearner.__init__": {
            "name": "__init__",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "hyper_params": [
                    "bool",
                    "str",
                    "None",
                    "float",
                    "list[str]"
                ],
                "log_cfg": [
                    "bool",
                    "str",
                    "None",
                    "float",
                    "list[str]"
                ],
                "backbone": [
                    "bool",
                    "str",
                    "float"
                ],
                "head": [
                    "bool",
                    "str",
                    "float"
                ],
                "optim_cfg": [
                    "bool",
                    "str",
                    "float"
                ],
                "env_name": [
                    "bool",
                    "str",
                    "None",
                    "float",
                    "list[str]"
                ],
                "state_size": [
                    "int",
                    "str",
                    "None"
                ],
                "output_size": [
                    "int",
                    "None",
                    "tuple[typing.Union[int,int]]"
                ],
                "is_test": [
                    "bool",
                    "str",
                    "None",
                    "float",
                    "list[str]"
                ],
                "load_from": [
                    "bool",
                    "str",
                    "float"
                ]
            }
        },
        "PPOLearner._init_network": {
            "name": "_init_network",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PPOLearner.update_model": {
            "name": "update_model",
            "location": 99,
            "return": [
                "tuple[float]"
            ],
            "arguments": {
                "self": [],
                "experience": [
                    "int",
                    "typing.Pattern"
                ],
                "epsilon": [
                    "int"
                ]
            }
        },
        "PPOLearner.save_params": {
            "name": "save_params",
            "location": 202,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "n_episode": [
                    "int",
                    "bytes",
                    "str"
                ]
            }
        },
        "PPOLearner.load_params": {
            "name": "load_params",
            "location": 212,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "typing.Sequence[str]"
                ]
            }
        },
        "PPOLearner.get_state_dict": {
            "name": "get_state_dict",
            "location": 223,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "PPOLearner.get_policy": {
            "name": "get_policy",
            "location": 227,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "rl_algorithms-master/rl_algorithms/ppo/utils.py": {
        "compute_gae": {
            "name": "compute_gae",
            "location": 18,
            "return": [
                "list[str]"
            ],
            "arguments": {
                "next_value": [
                    "bool",
                    "None",
                    "str",
                    "list[str]"
                ],
                "rewards": [],
                "masks": [
                    "int",
                    "list[]",
                    "float",
                    "None",
                    "dict[str, typing.Any]",
                    "str"
                ],
                "values": [],
                "gamma": [
                    "float"
                ],
                "tau": [
                    "float"
                ]
            }
        },
        "ppo_iter": {
            "name": "ppo_iter",
            "location": 39,
            "return": [
                "typing.Generator[tuple[]]"
            ],
            "arguments": {
                "epoch": [
                    "int",
                    "list[str]",
                    "float",
                    "str",
                    "None"
                ],
                "mini_batch_size": [
                    "int",
                    "str",
                    "tuple[typing.Union[int,int]]"
                ],
                "states": [],
                "actions": [],
                "values": [],
                "log_probs": [],
                "returns": [],
                "advantages": []
            }
        }
    },
    "rl_algorithms-master/rl_algorithms/ppo/__init__.py": {},
    "rl_algorithms-master/rl_algorithms/recurrent/dqn_agent.py": {
        "R2D1Agent._initialize": {
            "name": "_initialize",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "R2D1Agent.select_action": {
            "name": "select_action",
            "location": 73,
            "return": [
                "tuple[typing.Union[dict[, ],int,tuple[typing.Union[int,int,int]],tuple[typing.Union[str,str]],dict[str, typing.Any]]]"
            ],
            "arguments": {
                "self": [],
                "state": [],
                "hidden_state": [
                    "float",
                    "typing.Sequence[]",
                    "int",
                    "list[]",
                    "dict[str, float]"
                ],
                "prev_action": [
                    "float",
                    "typing.Sequence[]",
                    "int",
                    "list[]",
                    "dict[str, float]"
                ],
                "prev_reward": [
                    "float",
                    "typing.Sequence[]",
                    "int",
                    "list[]",
                    "dict[str, float]"
                ]
            }
        },
        "R2D1Agent._add_transition_to_memory": {
            "name": "_add_transition_to_memory",
            "location": 95,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "transition": [
                    "str",
                    "dict[str, typing.Any]",
                    "int"
                ]
            }
        },
        "R2D1Agent.step": {
            "name": "step",
            "location": 106,
            "return": [
                "tuple[typing.Union[int,typing.Deque,str,list[dict[, ]],dict[str, typing.Any],list[],tuple[],dict[typing.Any, int],list[str],dict[, ],list[tuple[typing.Union[int,int]]]]]"
            ],
            "arguments": {
                "self": [],
                "action": [],
                "hidden_state": []
            }
        },
        "R2D1Agent.sample_experience": {
            "name": "sample_experience",
            "location": 127,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "R2D1Agent.train": {
            "name": "train",
            "location": 147,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "R2D1Agent._test": {
            "name": "_test",
            "location": 235,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "interim_test": [
                    "bool"
                ]
            }
        },
        "R2D1Agent.test_with_saliency_map": {
            "name": "test_with_saliency_map",
            "location": 287,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "rl_algorithms-master/rl_algorithms/recurrent/learner.py": {
        "R2D1Learner.__init__": {
            "name": "__init__",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "loss_type": [
                    "int",
                    "str"
                ],
                "backbone": [
                    "bool",
                    "dict[, ]",
                    "None",
                    "typing.Callable[, ]",
                    "dict[str, list[typing.Any]]",
                    "tuple[str]"
                ],
                "head": [
                    "bool",
                    "dict[, ]",
                    "None",
                    "typing.Callable[, ]",
                    "dict[str, list[typing.Any]]",
                    "tuple[str]"
                ],
                "gru": [
                    "bool",
                    "dict[, ]",
                    "None",
                    "typing.Callable[, ]",
                    "dict[str, list[typing.Any]]",
                    "tuple[str]"
                ],
                "optim_cfg": [
                    "bool",
                    "dict[, ]",
                    "None",
                    "typing.Callable[, ]",
                    "dict[str, list[typing.Any]]",
                    "tuple[str]"
                ],
                "hyper_params": [
                    "bool",
                    "str",
                    "None",
                    "typing.Callable[, ]",
                    "typing.Type"
                ],
                "log_cfg": [
                    "str",
                    "None",
                    "int",
                    "typing.Type"
                ],
                "env_name": [
                    "str",
                    "None",
                    "int",
                    "typing.Type"
                ],
                "state_size": [
                    "int",
                    "float",
                    "dict[str, str]"
                ],
                "output_size": [
                    "int",
                    "list[str]"
                ],
                "is_test": [
                    "str",
                    "None",
                    "int",
                    "typing.Type"
                ],
                "load_from": [
                    "bool",
                    "dict[, ]",
                    "None",
                    "typing.Callable[, ]",
                    "dict[str, list[typing.Any]]",
                    "tuple[str]"
                ]
            }
        },
        "R2D1Learner._init_network": {
            "name": "_init_network",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "R2D1Learner.update_model": {
            "name": "update_model",
            "location": 84,
            "return": [
                "tuple[typing.Union[int,str,tuple[typing.Union[str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str]],set[],range]]"
            ],
            "arguments": {
                "self": [],
                "experience": [
                    "tuple[rl_algorithms.common.abstraclearner.TensorTuple]",
                    "str"
                ]
            }
        },
        "R2D1Learner.save_params": {
            "name": "save_params",
            "location": 150,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "n_episode": [
                    "int",
                    "bytes",
                    "str"
                ]
            }
        },
        "R2D1Learner.load_params": {
            "name": "load_params",
            "location": 160,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "typing.Sequence[str]"
                ]
            }
        },
        "R2D1Learner.get_state_dict": {
            "name": "get_state_dict",
            "location": 170,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "R2D1Learner.get_policy": {
            "name": "get_policy",
            "location": 174,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "rl_algorithms-master/rl_algorithms/recurrent/losses.py": {
        "R2D1DQNLoss.__call__": {
            "name": "__call__",
            "location": 25,
            "return": [],
            "arguments": {
                "self": [],
                "model": [],
                "target_model": [],
                "experiences": [],
                "gamma": [],
                "head_cfg": [],
                "burn_in_step": []
            }
        },
        "R2D1C51Loss.__call__": {
            "name": "__call__",
            "location": 110,
            "return": [],
            "arguments": {
                "self": [],
                "model": [],
                "target_model": [],
                "experiences": [],
                "gamma": [],
                "head_cfg": [],
                "burn_in_step": []
            }
        },
        "R2D1IQNLoss.__call__": {
            "name": "__call__",
            "location": 236,
            "return": [],
            "arguments": {
                "self": [],
                "model": [],
                "target_model": [],
                "experiences": [],
                "gamma": [],
                "head_cfg": [],
                "burn_in_step": []
            }
        }
    },
    "rl_algorithms-master/rl_algorithms/recurrent/utils.py": {
        "infer_leading_dims": {
            "name": "infer_leading_dims",
            "location": 8,
            "return": [
                "tuple[int]"
            ],
            "arguments": {
                "tensor": [],
                "dim": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ]
            }
        },
        "restore_leading_dims": {
            "name": "restore_leading_dims",
            "location": 39,
            "return": [
                "int",
                "tuple[int]"
            ],
            "arguments": {
                "tensors": [
                    "int"
                ],
                "lead_dim": [
                    "int",
                    "str",
                    "typing.Iterable['Context']"
                ],
                "first_dim": [
                    "int"
                ],
                "second_dim": [
                    "int"
                ]
            }
        },
        "valid_from_done": {
            "name": "valid_from_done",
            "location": 63,
            "return": [
                "bool"
            ],
            "arguments": {
                "done": [
                    "float",
                    "list[]",
                    "list[float]"
                ]
            }
        },
        "slice_r2d1_arguments": {
            "name": "slice_r2d1_arguments",
            "location": 78,
            "return": [
                "tuple[typing.Union[tuple[list[tuple[typing.Union[str,str]]]],int,tuple[typing.Union[str,str,str,str,str,str,str,str,str,str]],list[],str,tuple[dict[int, typing.Any]],tuple[typing.Union[list[str],str]],tuple[typing.Union[int,dict[, ],list[int],list[list[int]],str]],dict[, ]]]"
            ],
            "arguments": {
                "experiences": [
                    "tuple[]",
                    "list[str]"
                ],
                "burn_in_step": [
                    "int"
                ],
                "output_size": [
                    "tuple[typing.Union[int,int]]",
                    "int",
                    "list[int]",
                    "str"
                ]
            }
        }
    },
    "rl_algorithms-master/rl_algorithms/recurrent/__init__.py": {},
    "rl_algorithms-master/rl_algorithms/sac/agent.py": {
        "SACAgent.__init__": {
            "name": "__init__",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "env": [
                    "bool",
                    "typing.Callable[, ]"
                ],
                "env_info": [
                    "bool",
                    "typing.Callable[, ]"
                ],
                "hyper_params": [
                    "bool",
                    "list[]",
                    "str",
                    "None"
                ],
                "learner_cfg": [
                    "bool",
                    "list[]",
                    "str",
                    "None"
                ],
                "log_cfg": [
                    "bool",
                    "typing.Callable[, ]"
                ],
                "is_test": [
                    "bool",
                    "typing.Callable[, ]"
                ],
                "load_from": [
                    "bool",
                    "typing.Callable[, ]"
                ],
                "is_render": [
                    "bool",
                    "typing.Callable[, ]"
                ],
                "render_after": [
                    "bool",
                    "typing.Callable[, ]"
                ],
                "is_log": [
                    "bool",
                    "typing.Callable[, ]"
                ],
                "save_period": [
                    "bool",
                    "typing.Callable[, ]"
                ],
                "episode_num": [
                    "bool",
                    "typing.Callable[, ]"
                ],
                "max_episode_steps": [
                    "bool",
                    "typing.Callable[, ]"
                ],
                "interim_test_num": [
                    "bool",
                    "typing.Callable[, ]"
                ]
            }
        },
        "SACAgent._initialize": {
            "name": "_initialize",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SACAgent.select_action": {
            "name": "select_action",
            "location": 109,
            "return": [],
            "arguments": {
                "self": [],
                "state": [
                    "list[]"
                ]
            }
        },
        "SACAgent._preprocess_state": {
            "name": "_preprocess_state",
            "location": 130,
            "return": [],
            "arguments": {
                "self": [],
                "state": [
                    "str",
                    "float",
                    "dict[, ]"
                ]
            }
        },
        "SACAgent.step": {
            "name": "step",
            "location": 135,
            "return": [
                "tuple[typing.Union[str,int,list[str],dict[, ],list[],list[tuple[typing.Union[int,int]]],tuple[typing.Union[typing.Any,typing.Any,typing.Any,typing.Any,typing.Any,typing.Any]]]]"
            ],
            "arguments": {
                "self": [],
                "action": [
                    "dict[str, collections.abc.AsyncGenerator]",
                    "int"
                ]
            }
        },
        "SACAgent._add_transition_to_memory": {
            "name": "_add_transition_to_memory",
            "location": 147,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "transition": [
                    "str",
                    "int"
                ]
            }
        },
        "SACAgent.write_log": {
            "name": "write_log",
            "location": 151,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "log_value": [
                    "tuple[]",
                    "dict[str, typing.Any]",
                    "dict[, ]",
                    "str"
                ]
            }
        },
        "SACAgent.pretrain": {
            "name": "pretrain",
            "location": 190,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SACAgent.train": {
            "name": "train",
            "location": 194,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "rl_algorithms-master/rl_algorithms/sac/learner.py": {
        "SACLearner.__init__": {
            "name": "__init__",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "hyper_params": [
                    "str",
                    "bool",
                    "None"
                ],
                "log_cfg": [
                    "bool",
                    "str",
                    "None",
                    "float",
                    "list[str]"
                ],
                "backbone": [
                    "bool",
                    "str",
                    "float"
                ],
                "head": [
                    "bool",
                    "str",
                    "float"
                ],
                "optim_cfg": [
                    "float",
                    "str"
                ],
                "env_name": [
                    "bool",
                    "str",
                    "None",
                    "float",
                    "list[str]"
                ],
                "state_size": [
                    "str",
                    "tuple[typing.Union[int,int]]"
                ],
                "output_size": [
                    "int",
                    "float",
                    "str"
                ],
                "is_test": [
                    "bool",
                    "str",
                    "None",
                    "float",
                    "list[str]"
                ],
                "load_from": [
                    "bool",
                    "str",
                    "float"
                ]
            }
        },
        "SACLearner._init_network": {
            "name": "_init_network",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SACLearner.update_model": {
            "name": "update_model",
            "location": 122,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "self": [],
                "experience": [
                    "tuple[torch.Tensor]",
                    "tuple[rl_algorithms.common.abstraclearner.TensorTuple]",
                    "list[]"
                ]
            }
        },
        "SACLearner.save_params": {
            "name": "save_params",
            "location": 211,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "n_episode": [
                    "int",
                    "bytes",
                    "str"
                ]
            }
        },
        "SACLearner.load_params": {
            "name": "load_params",
            "location": 230,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "typing.Sequence[str]"
                ]
            }
        },
        "SACLearner.get_state_dict": {
            "name": "get_state_dict",
            "location": 250,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SACLearner.get_policy": {
            "name": "get_policy",
            "location": 254,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "rl_algorithms-master/rl_algorithms/sac/__init__.py": {},
    "rl_algorithms-master/rl_algorithms/td3/agent.py": {
        "TD3Agent.__init__": {
            "name": "__init__",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "env": [
                    "bool",
                    "typing.Callable[, ]"
                ],
                "env_info": [
                    "bool",
                    "typing.Callable[, ]"
                ],
                "hyper_params": [
                    "int",
                    "float",
                    "tuple[typing.Union[int,int]]"
                ],
                "learner_cfg": [
                    "bool",
                    "list[]"
                ],
                "noise_cfg": [
                    "bool",
                    "str",
                    "float"
                ],
                "log_cfg": [
                    "bool",
                    "typing.Callable[, ]"
                ],
                "is_test": [
                    "bool",
                    "typing.Callable[, ]"
                ],
                "load_from": [
                    "bool",
                    "typing.Callable[, ]"
                ],
                "is_render": [
                    "bool",
                    "typing.Callable[, ]"
                ],
                "render_after": [
                    "bool",
                    "typing.Callable[, ]"
                ],
                "is_log": [
                    "bool",
                    "typing.Callable[, ]"
                ],
                "save_period": [
                    "bool",
                    "typing.Callable[, ]"
                ],
                "episode_num": [
                    "bool",
                    "typing.Callable[, ]"
                ],
                "max_episode_steps": [
                    "bool",
                    "typing.Callable[, ]"
                ],
                "interim_test_num": [
                    "bool",
                    "typing.Callable[, ]"
                ]
            }
        },
        "TD3Agent.select_action": {
            "name": "select_action",
            "location": 115,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "state": []
            }
        },
        "TD3Agent.step": {
            "name": "step",
            "location": 136,
            "return": [
                "tuple[typing.Union[str,tuple[typing.Union[str,str]],list[],int,dict[, ],list[list[str]],dict[typing.Any, str],list[tuple[typing.Union[int,int]]]]]"
            ],
            "arguments": {
                "self": [],
                "action": [
                    "str",
                    "int",
                    "dict[, ]"
                ]
            }
        },
        "TD3Agent.write_log": {
            "name": "write_log",
            "location": 147,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "log_value": [
                    "tuple[]",
                    "dict[str, typing.Any]",
                    "dict[, ]",
                    "str"
                ]
            }
        },
        "TD3Agent.train": {
            "name": "train",
            "location": 180,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "rl_algorithms-master/rl_algorithms/td3/learner.py": {
        "TD3Learner.__init__": {
            "name": "__init__",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "hyper_params": [
                    "bool",
                    "str"
                ],
                "log_cfg": [
                    "bool",
                    "str"
                ],
                "backbone": [
                    "bool",
                    "tuple[typing.Union[int,int]]",
                    "typing.Callable[str, bool]",
                    "list[int]"
                ],
                "head": [
                    "bool",
                    "tuple[typing.Union[int,int]]",
                    "typing.Callable[str, bool]",
                    "list[int]"
                ],
                "optim_cfg": [
                    "bool",
                    "tuple[typing.Union[int,int]]",
                    "typing.Callable[str, bool]",
                    "list[int]"
                ],
                "noise_cfg": [
                    "bool",
                    "dict[str, int]"
                ],
                "env_name": [
                    "bool",
                    "str"
                ],
                "state_size": [
                    "list[str]",
                    "tuple[typing.Union[int,int]]"
                ],
                "output_size": [
                    "int",
                    "float"
                ],
                "is_test": [
                    "bool",
                    "str"
                ],
                "load_from": [
                    "bool",
                    "tuple[typing.Union[int,int]]",
                    "typing.Callable[str, bool]",
                    "list[int]"
                ]
            }
        },
        "TD3Learner._init_network": {
            "name": "_init_network",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TD3Learner.update_model": {
            "name": "update_model",
            "location": 122,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "self": [],
                "experience": [
                    "tuple[torch.Tensor]",
                    "tuple[rl_algorithms.common.abstraclearner.TensorTuple]",
                    "list[]"
                ]
            }
        },
        "TD3Learner.save_params": {
            "name": "save_params",
            "location": 187,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "n_episode": [
                    "int",
                    "bytes",
                    "str"
                ]
            }
        },
        "TD3Learner.load_params": {
            "name": "load_params",
            "location": 202,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "typing.Sequence[str]"
                ]
            }
        },
        "TD3Learner.get_state_dict": {
            "name": "get_state_dict",
            "location": 217,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TD3Learner.get_policy": {
            "name": "get_policy",
            "location": 225,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "rl_algorithms-master/rl_algorithms/td3/__init__.py": {},
    "rl_algorithms-master/rl_algorithms/utils/config.py": {
        "add_args": {
            "name": "add_args",
            "location": 34,
            "return": [],
            "arguments": {
                "parser": [],
                "cfg": [
                    "dict[, ]",
                    "dict[str, typing.Any]"
                ],
                "prefix": []
            }
        },
        "ConfigDict.__missing__": {
            "name": "__missing__",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "int",
                    "None"
                ]
            }
        },
        "ConfigDict.__getattr__": {
            "name": "__getattr__",
            "location": 12,
            "return": [
                "dict[str, typing.Callable[[], typing.Any]]",
                "dict[str, bool]",
                "str",
                "float"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "ConfigDict.__setitem__": {
            "name": "__setitem__",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "int",
                    "list[]",
                    "list[str]"
                ],
                "value": [
                    "str",
                    "bool",
                    "dict[str, typing.Any]",
                    "dict[, ]",
                    "list[str]"
                ]
            }
        },
        "YamlConfig.__init__": {
            "name": "__init__",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config_paths": [
                    "dict[, ]",
                    "dict[str, typing.Any]",
                    "dict[str, str]"
                ]
            }
        },
        "YamlConfig._yaml_to_config_dict": {
            "name": "_yaml_to_config_dict",
            "location": 63,
            "return": [
                "ConfigDict"
            ],
            "arguments": {
                "path": [
                    "str"
                ]
            }
        },
        "YamlConfig.get_config_dict": {
            "name": "get_config_dict",
            "location": 73,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "rl_algorithms-master/rl_algorithms/utils/registry.py": {
        "build_from_cfg": {
            "name": "build_from_cfg",
            "location": 51,
            "return": [],
            "arguments": {
                "cfg": [
                    "dict[str, typing.Any]"
                ],
                "registry": [
                    "dict[, ]"
                ],
                "default_args": [
                    "None",
                    "dict[str, typing.Any]",
                    "dict[str, str]"
                ]
            }
        },
        "build_ray_obj_from_cfg": {
            "name": "build_ray_obj_from_cfg",
            "location": 83,
            "return": [],
            "arguments": {
                "cfg": [
                    "dict[str, typing.Any]"
                ],
                "registry": [
                    "dict[int, tuple[typing.Union[int,int]]]"
                ],
                "default_args": [
                    "None",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "Registry.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "dict[str, typing.Any]",
                    "list[str]",
                    "dict[, ]"
                ]
            }
        },
        "Registry.__repr__": {
            "name": "__repr__",
            "location": 13,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Registry.name": {
            "name": "name",
            "location": 20,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Registry.module_dict": {
            "name": "module_dict",
            "location": 24,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Registry.get": {
            "name": "get",
            "location": 27,
            "return": [],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "int",
                    "None"
                ]
            }
        },
        "Registry._register_module": {
            "name": "_register_module",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "module_class": [
                    "str",
                    "dict[str, typing.Any]",
                    "None"
                ]
            }
        },
        "Registry.register_module": {
            "name": "register_module",
            "location": 46,
            "return": [
                "str",
                "typing.IO",
                "set[str]"
            ],
            "arguments": {
                "self": [],
                "cls": [
                    "str",
                    "typing.IO",
                    "set[str]"
                ]
            }
        }
    },
    "rl_algorithms-master/rl_algorithms/utils/__init__.py": {},
    "rl_algorithms-master/tests/test_cnn_cfg.py": {
        "test_brain": {
            "name": "test_brain",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_cnn_with_config": {
            "name": "test_cnn_with_config",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_resnet_with_config": {
            "name": "test_resnet_with_config",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "rl_algorithms-master/tests/test_config_registry.py": {
        "parse_args": {
            "name": "parse_args",
            "location": 11,
            "return": [],
            "arguments": {
                "args": []
            }
        },
        "test_config_registry": {
            "name": "test_config_registry",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "rl_algorithms-master/tests/test_helper_funcion.py": {
        "generate_dummy_buffer": {
            "name": "generate_dummy_buffer",
            "location": 10,
            "return": [
                "list[typing.Union[int,tuple[bool]]]",
                "list[int]"
            ],
            "arguments": {
                "maxlen": [
                    "int",
                    "dict[str, tuple[typing.Union[int,int]]]"
                ],
                "index": [
                    "int",
                    "list[list[str]]",
                    "str"
                ]
            }
        },
        "check_case1": {
            "name": "check_case1",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "maxlen": [
                    "str",
                    "bytearray",
                    "tuple[numpy.ndarray]"
                ]
            }
        },
        "check_case2": {
            "name": "check_case2",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "maxlen": [
                    "int",
                    "bytes"
                ]
            }
        },
        "check_case3": {
            "name": "check_case3",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "maxlen": [
                    "int"
                ]
            }
        },
        "test_get_n_step_info": {
            "name": "test_get_n_step_info",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "maxlen": [
                    "int"
                ]
            }
        }
    },
    "rl_algorithms-master/tests/buffer/test_distillation_buffer.py": {
        "gen_test_data": {
            "name": "gen_test_data",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "num_files": [
                    "int",
                    "str"
                ]
            }
        },
        "check_multiple_data_load": {
            "name": "check_multiple_data_load",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "num_files": [
                    "str",
                    "list[str]",
                    "typing.IO",
                    "int",
                    "bytes"
                ]
            }
        },
        "check_mixture_data_assert": {
            "name": "check_mixture_data_assert",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "num_files": [
                    "bool",
                    "str",
                    "typing.IO",
                    "None"
                ]
            }
        },
        "delete_path": {
            "name": "delete_path",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "path": [
                    "str"
                ]
            }
        },
        "test_distillation_buffer": {
            "name": "test_distillation_buffer",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "rl_algorithms-master/tests/buffer/test_prioritized_buffer.py": {
        "generate_prioritized_buffer": {
            "name": "generate_prioritized_buffer",
            "location": 10,
            "return": [
                "tuple[typing.Union[PrioritizedBufferWrapper,list[float]]]"
            ],
            "arguments": {
                "buffer_length": [
                    "int",
                    "tuple[typing.Union[int,int]]",
                    "float"
                ],
                "batch_size": [
                    "int",
                    "tuple[typing.Union[int,int]]",
                    "float",
                    "None"
                ],
                "idx_lst": [
                    "None",
                    "int",
                    "float",
                    "tuple[]",
                    "str"
                ],
                "prior_lst": [
                    "None",
                    "int",
                    "float",
                    "tuple[]",
                    "str"
                ]
            }
        },
        "sample_dummy": {
            "name": "sample_dummy",
            "location": 30,
            "return": [],
            "arguments": {
                "prioritized_buffer": [
                    "int",
                    "bytes",
                    "None",
                    "str"
                ],
                "times": [
                    "int",
                    "float"
                ]
            }
        },
        "check_prioritized": {
            "name": "check_prioritized",
            "location": 44,
            "return": [
                "bool"
            ],
            "arguments": {
                "prop_lst": [
                    "bool",
                    "str",
                    "float",
                    "typing.Sequence[int]"
                ],
                "sampled_lst": [
                    "bool",
                    "str",
                    "float",
                    "typing.Sequence[int]"
                ]
            }
        },
        "test_prioritized": {
            "name": "test_prioritized",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "buffer_length": [
                    "int"
                ],
                "batch_size": [
                    "int"
                ]
            }
        }
    },
    "rl_algorithms-master/tests/buffer/test_uniform_buffer.py": {
        "generate_transition": {
            "name": "generate_transition",
            "location": 9,
            "return": [
                "tuple[typing.Union[str,tuple[int],list[T],list[str],int]]"
            ],
            "arguments": {
                "idx": [
                    "str",
                    "tuple[int]",
                    "list[T]",
                    "list[str]",
                    "int"
                ]
            }
        },
        "generate_sample_idx": {
            "name": "generate_sample_idx",
            "location": 19,
            "return": [],
            "arguments": {
                "buffer": []
            }
        },
        "check_uniform": {
            "name": "check_uniform",
            "location": 27,
            "return": [
                "bool"
            ],
            "arguments": {
                "lst": [
                    "bool",
                    "str",
                    "float",
                    "typing.Sequence[int]"
                ]
            }
        },
        "test_uniform_sample": {
            "name": "test_uniform_sample",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "buffer_length": [
                    "int"
                ],
                "batch_size": [
                    "int"
                ]
            }
        }
    },
    "rl_algorithms-master/tests/integration/test_run_agent.py": {
        "check_run_env": {
            "name": "check_run_env",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "config_root": [
                    "str"
                ],
                "run_file": [
                    "str",
                    "typing.Sequence[str]"
                ]
            }
        },
        "check_save_path": {
            "name": "check_save_path",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "save_path": [
                    "str",
                    "dict[, ]"
                ]
            }
        },
        "test_run_lunarlander_continuous": {
            "name": "test_run_lunarlander_continuous",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_run_lunarlander": {
            "name": "test_run_lunarlander",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_run_pong_no_frame_skip": {
            "name": "test_run_pong_no_frame_skip",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "rl_algorithms-master/tests/integration/test_run_apex.py": {
        "check_run_apex": {
            "name": "check_run_apex",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "config_root": [
                    "str",
                    "None"
                ],
                "run_file": [
                    "str",
                    "typing.Sequence[str]"
                ]
            }
        },
        "check_save_path": {
            "name": "check_save_path",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "save_path": [
                    "str",
                    "dict[, ]"
                ]
            }
        },
        "test_run_pong_no_frame_skip": {
            "name": "test_run_pong_no_frame_skip",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "rl_algorithms-master/tests/integration/test_run_distillation_agent.py": {
        "check_distillation_agent": {
            "name": "check_distillation_agent",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "config": [
                    "bool",
                    "str",
                    "None",
                    "dict[str, typing.Any]",
                    "set[str]"
                ],
                "run_file": [
                    "bool",
                    "str",
                    "None",
                    "dict[str, typing.Any]",
                    "set[str]"
                ]
            }
        },
        "delete_path": {
            "name": "delete_path",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "path": [
                    "str"
                ]
            }
        },
        "test_distillation": {
            "name": "test_distillation",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    }
}
{
    "rop-master/setup.py": {},
    "rop-master/docs/conf.py": {},
    "rop-master/src/rop/result.py": {
        "Result.is_success": {
            "name": "is_success",
            "location": 7,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Result.is_failure": {
            "name": "is_failure",
            "location": 13,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "Result.error_text": {
            "name": "error_text",
            "location": 17,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Result.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "is_success": [
                    "Exception"
                ],
                "error": [
                    "Exception",
                    "bool",
                    "typing.Type",
                    "BaseException"
                ]
            }
        },
        "Result.create": {
            "name": "create",
            "location": 30,
            "return": [
                "Result"
            ],
            "arguments": {
                "is_success": [
                    "int"
                ],
                "error": [
                    "typing.Text"
                ]
            }
        },
        "Result.fail": {
            "name": "fail",
            "location": 34,
            "return": [
                "Result"
            ],
            "arguments": {
                "error": [
                    "bool",
                    "str",
                    "dict[str, bool]",
                    "typing.Type"
                ]
            }
        },
        "Result.ok": {
            "name": "ok",
            "location": 38,
            "return": [
                "Result"
            ],
            "arguments": {}
        },
        "Result.on_success": {
            "name": "on_success",
            "location": 41,
            "return": [
                "Result"
            ],
            "arguments": {
                "self": [],
                "function": [
                    "typing.Callable[str, bool]"
                ]
            }
        },
        "Result.on_failure": {
            "name": "on_failure",
            "location": 44,
            "return": [
                "Result"
            ],
            "arguments": {
                "self": [],
                "function": [
                    "typing.Callable[str, bool]"
                ]
            }
        }
    },
    "rop-master/src/rop/__init__.py": {},
    "rop-master/tests/conftest.py": {},
    "rop-master/tests/test_result.py": {
        "ResultTest.setup_method": {
            "name": "setup_method",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "method": [
                    "str",
                    "dict[, ]",
                    "tuple[]"
                ]
            }
        },
        "ResultTest.test_on_success": {
            "name": "test_on_success",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ResultTest.test_on_failure": {
            "name": "test_on_failure",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ResultTest.test_on_success_chain_failure": {
            "name": "test_on_success_chain_failure",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ResultTest.test_on_success_chain_success": {
            "name": "test_on_success_chain_success",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ResultTest.test_on_failure_chain_failure": {
            "name": "test_on_failure_chain_failure",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ResultTest.test_on_failure_chain_success": {
            "name": "test_on_failure_chain_success",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ResultTest._func_increase_counter": {
            "name": "_func_increase_counter",
            "location": 65,
            "return": [
                "typing.Callable[, ]",
                "bool",
                "typing.Type",
                "dict[, ]",
                "str",
                "None"
            ],
            "arguments": {
                "self": [],
                "result": [
                    "typing.Callable[, ]",
                    "bool",
                    "typing.Type",
                    "dict[, ]",
                    "str",
                    "None"
                ]
            }
        },
        "ResultTest.success": {
            "name": "success",
            "location": 71,
            "return": [],
            "arguments": {}
        },
        "ResultTest.failure": {
            "name": "failure",
            "location": 75,
            "return": [],
            "arguments": {}
        }
    }
}
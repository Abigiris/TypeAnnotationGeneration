{
    "rororo-master/docs/conf.py": {},
    "rororo-master/examples/hobotnica/src/hobotnica/app.py": {
        "create_app": {
            "name": "create_app",
            "location": 16,
            "return": [],
            "arguments": {
                "argv": [
                    "None",
                    "list[str]",
                    "bool",
                    "str"
                ]
            }
        }
    },
    "rororo-master/examples/hobotnica/src/hobotnica/auth.py": {
        "authenticate": {
            "name": "authenticate",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "rororo-master/examples/hobotnica/src/hobotnica/data.py": {},
    "rororo-master/examples/hobotnica/src/hobotnica/decorators.py": {
        "login_required": {
            "name": "login_required",
            "location": 11,
            "return": [],
            "arguments": {
                "handler": [
                    "int",
                    "str",
                    "typing.Iterable['Context']"
                ]
            }
        }
    },
    "rororo-master/examples/hobotnica/src/hobotnica/views.py": {},
    "rororo-master/examples/hobotnica/src/hobotnica/__init__.py": {},
    "rororo-master/examples/petstore/src/petstore/app.py": {
        "create_app": {
            "name": "create_app",
            "location": 12,
            "return": [],
            "arguments": {
                "argv": [
                    "None",
                    "list[str]",
                    "bool",
                    "str"
                ]
            }
        }
    },
    "rororo-master/examples/petstore/src/petstore/data.py": {
        "NewPet.to_pet": {
            "name": "to_pet",
            "location": 13,
            "return": [
                "Pet"
            ],
            "arguments": {
                "self": [],
                "pet_id": [
                    "str",
                    "int"
                ]
            }
        },
        "Pet.to_dict": {
            "name": "to_dict",
            "location": 21,
            "return": [
                "dict[typing.Text, ]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "rororo-master/examples/petstore/src/petstore/settings.py": {},
    "rororo-master/examples/petstore/src/petstore/shortcuts.py": {
        "get_pet_or_404": {
            "name": "get_pet_or_404",
            "location": 8,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "pets": [
                    "str"
                ],
                "pet_id": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "rororo-master/examples/petstore/src/petstore/views.py": {},
    "rororo-master/examples/petstore/src/petstore/__init__.py": {},
    "rororo-master/examples/simulations/src/simulations/app.py": {
        "create_app": {
            "name": "create_app",
            "location": 19,
            "return": [],
            "arguments": {
                "argv": [
                    "None",
                    "list[str]",
                    "bool",
                    "str"
                ]
            }
        }
    },
    "rororo-master/examples/simulations/src/simulations/storage.py": {},
    "rororo-master/examples/simulations/src/simulations/__init__.py": {},
    "rororo-master/examples/todobackend/src/todobackend/app.py": {
        "create_app": {
            "name": "create_app",
            "location": 17,
            "return": [],
            "arguments": {
                "argv": [
                    "None",
                    "list[str]",
                    "bool",
                    "str"
                ]
            }
        }
    },
    "rororo-master/examples/todobackend/src/todobackend/constants.py": {},
    "rororo-master/examples/todobackend/src/todobackend/data.py": {
        "Todo.from_storage": {
            "name": "from_storage",
            "location": 28,
            "return": [],
            "arguments": {
                "cls": [
                    "dict[, ]",
                    "str",
                    "tuple[typing.Union[int,int]]",
                    "None",
                    "bytes",
                    "int"
                ],
                "data": [
                    "str",
                    "tuple[typing.Union[int,int]]",
                    "bytes"
                ]
            }
        },
        "Todo.get_absolute_url": {
            "name": "get_absolute_url",
            "location": 36,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Todo.to_api_dict": {
            "name": "to_api_dict",
            "location": 41,
            "return": [
                "dict[typing.Text, str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Todo.to_storage": {
            "name": "to_storage",
            "location": 50,
            "return": [
                "dict[typing.Text, str]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "rororo-master/examples/todobackend/src/todobackend/settings.py": {},
    "rororo-master/examples/todobackend/src/todobackend/storage.py": {
        "Storage.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Storage.build_item_key": {
            "name": "build_item_key",
            "location": 16,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "mixed": [
                    "str",
                    "int",
                    "dict[, ]"
                ]
            }
        }
    },
    "rororo-master/examples/todobackend/src/todobackend/validators.py": {},
    "rororo-master/examples/todobackend/src/todobackend/views.py": {},
    "rororo-master/examples/todobackend/src/todobackend/__init__.py": {},
    "rororo-master/src/rororo/aio.py": {
        "add_resource_context": {
            "name": "add_resource_context",
            "location": 40,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "router": [
                    "str",
                    "list[str]",
                    "bool"
                ],
                "url_prefix": [
                    "None",
                    "str",
                    "list[str]",
                    "bool"
                ],
                "name_prefix": [
                    "None",
                    "str",
                    "list[str]",
                    "bool"
                ]
            }
        },
        "is_xhr_request": {
            "name": "is_xhr_request",
            "location": 110,
            "return": [
                "bool"
            ],
            "arguments": {
                "request": [
                    "str",
                    "None"
                ]
            }
        },
        "parse_aioredis_url": {
            "name": "parse_aioredis_url",
            "location": 122,
            "return": [
                "dict[typing.Text, typing.Union[tuple[int],int]]"
            ],
            "arguments": {
                "url": [
                    "str",
                    "list[str]",
                    "int",
                    "float",
                    "bytes"
                ]
            }
        },
        "AddResourceFunc.__call__": {
            "name": "__call__",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str",
                    "list[]"
                ],
                "get": [
                    "None",
                    "str",
                    "list[]"
                ]
            }
        },
        "add_resource_context.add_resource": {
            "name": "add_resource",
            "location": 67,
            "return": [],
            "arguments": {
                "url": [],
                "get": [
                    "None"
                ]
            }
        }
    },
    "rororo-master/src/rororo/annotations.py": {},
    "rororo-master/src/rororo/logger.py": {
        "default_logging_dict": {
            "name": "default_logging_dict",
            "location": 25,
            "return": [
                "dict[typing.Text, typing.Union[int,dict[typing.Text, dict[typing.Text, IgnoreErrorsFilter]],dict[typing.Text, dict[typing.Text, typing.Union[typing.Text,list[typing.Text]]]]]]"
            ],
            "arguments": {}
        },
        "update_sentry_logging": {
            "name": "update_sentry_logging",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "logging_dict": [
                    "str"
                ],
                "sentry_dsn": [
                    "str",
                    "dict[str, str]",
                    "bool"
                ]
            }
        },
        "IgnoreErrorsFilter.filter": {
            "name": "filter",
            "location": 20,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "record": [
                    "float",
                    "typing.Callable[None, bool]",
                    "list[str]",
                    "int"
                ]
            }
        }
    },
    "rororo-master/src/rororo/settings.py": {
        "from_env": {
            "name": "from_env",
            "location": 141,
            "return": [],
            "arguments": {
                "key": [],
                "default": []
            }
        },
        "immutable_settings": {
            "name": "immutable_settings",
            "location": 155,
            "return": [],
            "arguments": {
                "defaults": []
            }
        },
        "inject_settings": {
            "name": "inject_settings",
            "location": 192,
            "return": [],
            "arguments": {
                "mixed": [],
                "context": [],
                "fail_silently": []
            }
        },
        "is_setting_key": {
            "name": "is_setting_key",
            "location": 221,
            "return": [],
            "arguments": {
                "key": []
            }
        },
        "iter_settings": {
            "name": "iter_settings",
            "location": 248,
            "return": [],
            "arguments": {
                "mixed": []
            }
        },
        "setup_locale": {
            "name": "setup_locale",
            "location": 262,
            "return": [],
            "arguments": {
                "lc_all": [],
                "first_weekday": []
            }
        },
        "setup_logging": {
            "name": "setup_logging",
            "location": 298,
            "return": [],
            "arguments": {
                "config": []
            }
        },
        "setup_settings": {
            "name": "setup_settings",
            "location": 323,
            "return": [],
            "arguments": {
                "app": [],
                "settings": []
            }
        },
        "setup_settings_from_environ": {
            "name": "setup_settings_from_environ",
            "location": 340,
            "return": [],
            "arguments": {
                "app": [],
                "settings_class": []
            }
        },
        "setup_timezone": {
            "name": "setup_timezone",
            "location": 365,
            "return": [],
            "arguments": {
                "timezone": []
            }
        },
        "BaseSettings.apply": {
            "name": "apply",
            "location": 99,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BaseSettings.is_dev": {
            "name": "is_dev",
            "location": 125,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BaseSettings.is_prod": {
            "name": "is_prod",
            "location": 129,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BaseSettings.is_staging": {
            "name": "is_staging",
            "location": 133,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BaseSettings.is_test": {
            "name": "is_test",
            "location": 137,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "rororo-master/src/rororo/timedelta.py": {
        "str_to_timedelta": {
            "name": "str_to_timedelta",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "value": [
                    "str"
                ],
                "fmt": [
                    "str",
                    "list[tuple[typing.Union[str,int]]]",
                    "list[str]",
                    "list[]"
                ]
            }
        },
        "timedelta_average": {
            "name": "timedelta_average",
            "location": 170,
            "return": [
                "int"
            ],
            "arguments": {}
        },
        "timedelta_div": {
            "name": "timedelta_div",
            "location": 180,
            "return": [
                "None",
                "float"
            ],
            "arguments": {
                "first": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ],
                "second": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ]
            }
        },
        "timedelta_seconds": {
            "name": "timedelta_seconds",
            "location": 197,
            "return": [],
            "arguments": {
                "value": [
                    "bool",
                    "float"
                ]
            }
        },
        "timedelta_to_str": {
            "name": "timedelta_to_str",
            "location": 207,
            "return": [],
            "arguments": {
                "value": [
                    "str",
                    "int",
                    "None",
                    "tuple[typing.Union[str,str]]",
                    "list[float]"
                ],
                "fmt": [
                    "None",
                    "str",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "str_to_timedelta.timedelta_kwargs": {
            "name": "timedelta_kwargs",
            "location": 99,
            "return": [
                "dict[typing.Text, ]"
            ],
            "arguments": {
                "data": []
            }
        }
    },
    "rororo-master/src/rororo/utils.py": {
        "ensure_collection": {
            "name": "ensure_collection",
            "location": 17,
            "return": [
                "tuple[str]",
                "typing.Collection",
                "int",
                "complex",
                "float",
                "str"
            ],
            "arguments": {
                "value": [
                    "typing.Collection",
                    "str",
                    "int",
                    "complex",
                    "float"
                ]
            }
        },
        "to_bool": {
            "name": "to_bool",
            "location": 30,
            "return": [
                "bool"
            ],
            "arguments": {
                "value": [
                    "int",
                    "float",
                    "None",
                    "typing.Hashable",
                    "typing.Sequence[]"
                ]
            }
        },
        "to_int": {
            "name": "to_int",
            "location": 48,
            "return": [
                "int",
                "None",
                "bool",
                "float",
                "list[]"
            ],
            "arguments": {
                "value": [],
                "default": [
                    "None",
                    "bool",
                    "float",
                    "list[]"
                ]
            }
        }
    },
    "rororo-master/src/rororo/__init__.py": {},
    "rororo-master/src/rororo/openapi/annotations.py": {},
    "rororo-master/src/rororo/openapi/constants.py": {},
    "rororo-master/src/rororo/openapi/contexts.py": {
        "openapi_context": {
            "name": "openapi_context",
            "location": 11,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "request": [
                    "str",
                    "int",
                    "list[list[int]]"
                ]
            }
        }
    },
    "rororo-master/src/rororo/openapi/core_data.py": {
        "find_core_operation": {
            "name": "find_core_operation",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "request": [],
                "handler": [
                    "dict[, ]"
                ]
            }
        },
        "get_core_operation": {
            "name": "get_core_operation",
            "location": 39,
            "return": [],
            "arguments": {
                "spec": [
                    "str",
                    "int",
                    "list[str]"
                ],
                "operation_id": [
                    "str",
                    "bytes",
                    "int"
                ]
            }
        },
        "get_full_url_pattern": {
            "name": "get_full_url_pattern",
            "location": 49,
            "return": [],
            "arguments": {
                "request": []
            }
        },
        "get_path_pattern": {
            "name": "get_path_pattern",
            "location": 55,
            "return": [],
            "arguments": {
                "request": []
            }
        },
        "to_core_openapi_response": {
            "name": "to_core_openapi_response",
            "location": 92,
            "return": [
                "OpenAPIResponse"
            ],
            "arguments": {
                "response": []
            }
        },
        "to_core_openapi_response_data": {
            "name": "to_core_openapi_response_data",
            "location": 101,
            "return": [
                "None",
                "dict[str, typing.Any]",
                "bytes",
                "dict[str, typing.Union[str,typing.Any]]",
                "IOBasePayload",
                "Payload"
            ],
            "arguments": {
                "response": []
            }
        },
        "to_core_request_parameters": {
            "name": "to_core_request_parameters",
            "location": 120,
            "return": [
                "RequestParameters"
            ],
            "arguments": {
                "request": []
            }
        }
    },
    "rororo-master/src/rororo/openapi/core_validators.py": {
        "get_custom_formatters": {
            "name": "get_custom_formatters",
            "location": 267,
            "return": [
                "dict[typing.Text, EmailFormatter]"
            ],
            "arguments": {}
        },
        "validate_core_request": {
            "name": "validate_core_request",
            "location": 273,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "spec": [
                    "int"
                ],
                "core_request": [
                    "int"
                ]
            }
        },
        "validate_core_response": {
            "name": "validate_core_response",
            "location": 304,
            "return": [],
            "arguments": {
                "spec": [
                    "dict[str, str]",
                    "None",
                    "str"
                ],
                "core_request": [
                    "int",
                    "dict[str, str]",
                    "None",
                    "list[P]"
                ],
                "core_response": [
                    "str",
                    "tuple[]",
                    "int",
                    "list[]"
                ]
            }
        },
        "ArrayUnmarshaller.__call__": {
            "name": "__call__",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "EmailFormatter.__init__": {
            "name": "__init__",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "kwargs": [
                    "None"
                ]
            }
        },
        "EmailFormatter.validate": {
            "name": "validate",
            "location": 92,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "bool",
                    "str",
                    "dict[, ]",
                    "list[str]"
                ]
            }
        },
        "ObjectUnmarshaller.__call__": {
            "name": "__call__",
            "location": 107,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "PathFinder.find": {
            "name": "find",
            "location": 121,
            "return": [],
            "arguments": {
                "self": [],
                "request": [
                    "dict[str, typing.Any]",
                    "dict[, ]"
                ]
            }
        },
        "SchemaUnmarshallersFactory.get_formatter": {
            "name": "get_formatter",
            "location": 166,
            "return": [],
            "arguments": {
                "self": [],
                "default_formatters": [
                    "str"
                ],
                "type_format": [
                    "None",
                    "str",
                    "list[str]"
                ]
            }
        },
        "BaseValidator._cast": {
            "name": "_cast",
            "location": 182,
            "return": [],
            "arguments": {
                "self": [],
                "param_or_media_type": [
                    "str"
                ],
                "value": [
                    "str"
                ]
            }
        },
        "BaseValidator._find_path": {
            "name": "_find_path",
            "location": 191,
            "return": [],
            "arguments": {
                "self": [],
                "request": [
                    "str",
                    "dict[str, str]",
                    "dict[, ]"
                ]
            }
        },
        "BaseValidator._unmarshal": {
            "name": "_unmarshal",
            "location": 194,
            "return": [
                "str",
                "bool",
                "dict[, ]"
            ],
            "arguments": {
                "self": [],
                "param_or_media_type": [
                    "bool",
                    "typing.Type",
                    "None"
                ],
                "value": [
                    "str",
                    "bool",
                    "dict[, ]"
                ],
                "context": [
                    "str",
                    "bool",
                    "None",
                    "float"
                ]
            }
        },
        "RequestValidator._get_parameters": {
            "name": "_get_parameters",
            "location": 224,
            "return": [
                "tuple[typing.Union[dict[str, dict[str, typing.Any]],dict[str, str],dict[str, int],typing.Pattern,str,list[str]]]"
            ],
            "arguments": {
                "self": [],
                "request": [],
                "params": []
            }
        },
        "RequestValidator._get_security": {
            "name": "_get_security",
            "location": 238,
            "return": [],
            "arguments": {
                "self": [],
                "request": [
                    "None"
                ],
                "operation": [
                    "None"
                ]
            }
        },
        "RequestValidator._unmarshal": {
            "name": "_unmarshal",
            "location": 250,
            "return": [],
            "arguments": {
                "self": [],
                "param_or_media_type": [
                    "typing.Type",
                    "tuple[str]"
                ],
                "value": [
                    "typing.Type",
                    "tuple[str]"
                ]
            }
        },
        "ResponseValidator._unmarshal": {
            "name": "_unmarshal",
            "location": 259,
            "return": [],
            "arguments": {
                "self": [],
                "param_or_media_type": [
                    "typing.Type",
                    "tuple[str]"
                ],
                "value": [
                    "typing.Type",
                    "tuple[str]"
                ]
            }
        }
    },
    "rororo-master/src/rororo/openapi/data.py": {
        "to_openapi_parameters": {
            "name": "to_openapi_parameters",
            "location": 94,
            "return": [
                "OpenAPIParameters"
            ],
            "arguments": {
                "core_parameters": [
                    "str",
                    "int",
                    "dict[, ]",
                    "typing.Type"
                ]
            }
        }
    },
    "rororo-master/src/rororo/openapi/exceptions.py": {
        "ensure_loc": {
            "name": "ensure_loc",
            "location": 327,
            "return": [
                "list[typing.Union[typing.Hashable,str]]"
            ],
            "arguments": {
                "loc": [
                    "dict[, ]",
                    "dict[typing.Hashable, typing.Any]",
                    "dict[str, O]",
                    "dict[str, float]"
                ]
            }
        },
        "get_common_error_details": {
            "name": "get_common_error_details",
            "location": 331,
            "return": [
                "dict[typing.Text, typing.Union[str,int]]"
            ],
            "arguments": {
                "loc": [
                    "str",
                    "int"
                ],
                "err": [
                    "str",
                    "int"
                ]
            }
        },
        "get_current_validation_error_loc": {
            "name": "get_current_validation_error_loc",
            "location": 337,
            "return": [],
            "arguments": {}
        },
        "get_json_schema_validation_error_details": {
            "name": "get_json_schema_validation_error_details",
            "location": 346,
            "return": [
                "dict[typing.Text, typing.Text]",
                "dict[typing.Text, ]"
            ],
            "arguments": {
                "loc": [],
                "err": [
                    "str",
                    "list[str]"
                ]
            }
        },
        "get_media_type_error_details": {
            "name": "get_media_type_error_details",
            "location": 367,
            "return": [
                "dict[typing.Text, typing.Union[str,dict[, ],Exception]]"
            ],
            "arguments": {
                "loc": [
                    "str",
                    "dict[, ]",
                    "Exception"
                ],
                "err": [
                    "typing.Mapping"
                ]
            }
        },
        "get_parameter_error_details": {
            "name": "get_parameter_error_details",
            "location": 381,
            "return": [
                "dict[typing.Text, typing.Union[list[typing.Union[int,Exception,str,None]],int,str,typing.Type]]"
            ],
            "arguments": {
                "loc": [
                    "int",
                    "Exception"
                ],
                "err": [
                    "str",
                    "None"
                ]
            }
        },
        "get_unmarshal_error_details": {
            "name": "get_unmarshal_error_details",
            "location": 399,
            "return": [
                "list[]"
            ],
            "arguments": {
                "loc": [
                    "dict[str, list[str]]"
                ],
                "err": [
                    "bool",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "is_only_security_error": {
            "name": "is_only_security_error",
            "location": 411,
            "return": [
                "bool"
            ],
            "arguments": {
                "errors": []
            }
        },
        "validation_error_context": {
            "name": "validation_error_context",
            "location": 416,
            "return": [
                "typing.Generator[tuple[typing.Union[str,dict[str, int],dict[, ]]]]"
            ],
            "arguments": {}
        },
        "OpenAPIError.__init__": {
            "name": "__init__",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "None",
                    "str",
                    "int"
                ]
            }
        },
        "ObjectDoesNotExist.__init__": {
            "name": "__init__",
            "location": 136,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "label": [
                    "typing.Text"
                ]
            }
        },
        "ValidationError.__init__": {
            "name": "__init__",
            "location": 188,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ValidationError.__add__": {
            "name": "__add__",
            "location": 218,
            "return": [
                "ValidationError"
            ],
            "arguments": {
                "self": [],
                "another": [
                    "str",
                    "Exception"
                ]
            }
        },
        "ValidationError.from_dict": {
            "name": "from_dict",
            "location": 234,
            "return": [],
            "arguments": {
                "cls": [
                    "tuple[typing.Union[int,int]]",
                    "dict[str, str]",
                    "None",
                    "dict[, ]",
                    "str",
                    "Exception"
                ],
                "data": [
                    "None",
                    "dict[, ]",
                    "list[list[typing.Any]]"
                ]
            }
        },
        "ValidationError.from_request_errors": {
            "name": "from_request_errors",
            "location": 258,
            "return": [],
            "arguments": {
                "cls": [
                    "list[openapi_core.exceptions.OpenAPIError]",
                    "list[]",
                    "list[Exception]",
                    "typing.IO"
                ],
                "errors": [
                    "list[openapi_core.exceptions.OpenAPIError]",
                    "list[]",
                    "list[Exception]"
                ]
            }
        },
        "ValidationError.from_response_errors": {
            "name": "from_response_errors",
            "location": 292,
            "return": [],
            "arguments": {
                "cls": [
                    "list[openapi_core.exceptions.OpenAPIError]",
                    "str",
                    "list[]",
                    "typing.IO"
                ],
                "errors": [
                    "list[openapi_core.exceptions.OpenAPIError]",
                    "str",
                    "list[]"
                ]
            }
        },
        "ValidationError.from_dict.dict_walker": {
            "name": "dict_walker",
            "location": 242,
            "return": [
                "None"
            ],
            "arguments": {
                "loc": [],
                "data": [],
                "errors": []
            }
        }
    },
    "rororo-master/src/rororo/openapi/middlewares.py": {
        "get_actual_handler": {
            "name": "get_actual_handler",
            "location": 13,
            "return": [
                "str",
                "list[str]",
                "dict[str, list[str]]"
            ],
            "arguments": {
                "handler": [
                    "str",
                    "list[str]",
                    "dict[str, list[str]]"
                ]
            }
        },
        "openapi_middleware": {
            "name": "openapi_middleware",
            "location": 36,
            "return": [],
            "arguments": {}
        }
    },
    "rororo-master/src/rororo/openapi/openapi.py": {
        "convert_operations_to_routes": {
            "name": "convert_operations_to_routes",
            "location": 257,
            "return": [],
            "arguments": {
                "operations": [
                    "dict[, ]",
                    "str",
                    "dict[str, typing.Any]",
                    "typing.Mapping",
                    "int"
                ],
                "spec": [
                    "dict[str, collections.abc.AsyncGenerator]",
                    "int",
                    "dict[int, dict[, ]]",
                    "bytes"
                ]
            }
        },
        "create_schema_and_spec": {
            "name": "create_schema_and_spec",
            "location": 305,
            "return": [
                "tuple[typing.Union[str,int]]"
            ],
            "arguments": {
                "path": [
                    "str"
                ]
            }
        },
        "create_schema_and_spec_with_cache": {
            "name": "create_schema_and_spec_with_cache",
            "location": 313,
            "return": [],
            "arguments": {
                "path": [
                    "str"
                ]
            }
        },
        "find_route_prefix": {
            "name": "find_route_prefix",
            "location": 319,
            "return": [],
            "arguments": {
                "oas": [
                    "str"
                ]
            }
        },
        "fix_spec_operations": {
            "name": "fix_spec_operations",
            "location": 353,
            "return": [
                "str",
                "None",
                "list[str]"
            ],
            "arguments": {
                "spec": [
                    "str",
                    "None",
                    "list[str]"
                ],
                "schema": [
                    "str"
                ]
            }
        },
        "get_default_yaml_loader": {
            "name": "get_default_yaml_loader",
            "location": 392,
            "return": [],
            "arguments": {}
        },
        "get_route_name": {
            "name": "get_route_name",
            "location": 396,
            "return": [
                "str"
            ],
            "arguments": {
                "operation_id": [
                    "str"
                ]
            }
        },
        "get_route_prefix": {
            "name": "get_route_prefix",
            "location": 400,
            "return": [],
            "arguments": {
                "mixed": [
                    "str",
                    "int",
                    "list[int]"
                ]
            }
        },
        "read_openapi_schema": {
            "name": "read_openapi_schema",
            "location": 404,
            "return": [],
            "arguments": {
                "path": []
            }
        },
        "setup_openapi": {
            "name": "setup_openapi",
            "location": 472,
            "return": [
                "None"
            ],
            "arguments": {
                "app": [
                    "bool",
                    "None",
                    "str"
                ],
                "schema_path": [
                    "set[int]",
                    "None",
                    "str"
                ]
            }
        },
        "CreateSchemaAndSpec.__call__": {
            "name": "__call__",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "int",
                    "None",
                    "str",
                    "list[int]"
                ]
            }
        },
        "OperationTableDef.__add__": {
            "name": "__add__",
            "location": 178,
            "return": [
                "OperationTableDef"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "bool",
                    "str"
                ]
            }
        },
        "OperationTableDef.__iadd__": {
            "name": "__iadd__",
            "location": 184,
            "return": [
                "OperationTableDef"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "typing.Callable[, ]"
                ]
            }
        },
        "OperationTableDef.register": {
            "name": "register",
            "location": 197,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mixed": []
            }
        },
        "OperationTableDef._is_view": {
            "name": "_is_view",
            "location": 215,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "handler": [
                    "bool",
                    "None",
                    "dict[str, typing.Any]",
                    "bytes"
                ]
            }
        },
        "OperationTableDef._register_handler": {
            "name": "_register_handler",
            "location": 219,
            "return": [
                "dict[, typing.Union[str,int,None,tuple[typing.Union[str,None,str]]]]"
            ],
            "arguments": {
                "self": [],
                "handler": [
                    "str",
                    "int"
                ],
                "operation_id": [
                    "str",
                    "int",
                    "None",
                    "tuple[typing.Union[str,None,str]]"
                ]
            }
        },
        "OperationTableDef._register_view": {
            "name": "_register_view",
            "location": 232,
            "return": [
                "dict[, typing.Text]"
            ],
            "arguments": {
                "self": [],
                "view": [
                    "dict[, ]",
                    "str"
                ],
                "prefix": [
                    "int"
                ]
            }
        },
        "OperationTableDef.register.decorator": {
            "name": "decorator",
            "location": 200,
            "return": [],
            "arguments": {
                "handler": []
            }
        }
    },
    "rororo-master/src/rororo/openapi/security.py": {
        "basic_auth_factory": {
            "name": "basic_auth_factory",
            "location": 23,
            "return": [
                "BasicAuth"
            ],
            "arguments": {
                "value": [
                    "str"
                ]
            }
        },
        "get_jwt_security_data": {
            "name": "get_jwt_security_data",
            "location": 32,
            "return": [
                "None",
                "str"
            ],
            "arguments": {
                "request": []
            }
        },
        "get_security_data": {
            "name": "get_security_data",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "validator": [],
                "request": [
                    "str",
                    "typing.Mapping",
                    "dict[str, typing.Any]",
                    "None",
                    "dict[str, str]"
                ],
                "scheme_name": [
                    "str"
                ]
            }
        },
        "get_security_list": {
            "name": "get_security_list",
            "location": 76,
            "return": [],
            "arguments": {
                "validator": [
                    "dict[, ]",
                    "str",
                    "dict[str, O]"
                ],
                "operation": [
                    "int",
                    "dict[str, str]",
                    "list[str]",
                    "None"
                ]
            }
        },
        "get_security_scheme": {
            "name": "get_security_scheme",
            "location": 84,
            "return": [],
            "arguments": {
                "validator": [
                    "str"
                ],
                "scheme_name": [
                    "str"
                ]
            }
        },
        "is_basic_auth_security_scheme": {
            "name": "is_basic_auth_security_scheme",
            "location": 90,
            "return": [
                "bool"
            ],
            "arguments": {
                "validator": [
                    "str",
                    "typing.Callable[, ]",
                    "dict[, ]"
                ],
                "scheme_name": [
                    "str",
                    "typing.Callable[, ]",
                    "dict[, ]"
                ]
            }
        },
        "is_jwt_bearer_security_scheme": {
            "name": "is_jwt_bearer_security_scheme",
            "location": 103,
            "return": [
                "bool"
            ],
            "arguments": {
                "validator": [
                    "str",
                    "typing.Callable[, ]",
                    "dict[, ]"
                ],
                "scheme_name": [
                    "str",
                    "typing.Callable[, ]",
                    "dict[, ]"
                ]
            }
        },
        "validate_security": {
            "name": "validate_security",
            "location": 116,
            "return": [],
            "arguments": {
                "validator": [
                    "list[str]"
                ],
                "request": [
                    "dict[str, typing.Any]",
                    "None",
                    "bytes",
                    "dict[, ]"
                ],
                "operation": [
                    "dict[str, typing.Any]",
                    "list[str]"
                ]
            }
        }
    },
    "rororo-master/src/rororo/openapi/utils.py": {
        "add_prefix": {
            "name": "add_prefix",
            "location": 21,
            "return": [
                "typing.Text",
                "str",
                "list[str]"
            ],
            "arguments": {
                "path": [
                    "str",
                    "list[str]"
                ],
                "prefix": [
                    "str"
                ]
            }
        },
        "get_base_url": {
            "name": "get_base_url",
            "location": 29,
            "return": [
                "str"
            ],
            "arguments": {
                "core_request": [
                    "dict[, ]"
                ]
            }
        },
        "get_openapi_context": {
            "name": "get_openapi_context",
            "location": 33,
            "return": [],
            "arguments": {
                "request": []
            }
        },
        "get_openapi_schema": {
            "name": "get_openapi_schema",
            "location": 52,
            "return": [],
            "arguments": {
                "mixed": [
                    "str",
                    "bool"
                ]
            }
        },
        "get_openapi_spec": {
            "name": "get_openapi_spec",
            "location": 70,
            "return": [
                "str",
                "dict[, ]"
            ],
            "arguments": {
                "mixed": [
                    "str",
                    "bool",
                    "list[dict[, ]]"
                ]
            }
        },
        "get_validate_email_kwargs": {
            "name": "get_validate_email_kwargs",
            "location": 86,
            "return": [],
            "arguments": {
                "mixed": [
                    "str",
                    "dict[str, str]",
                    "None",
                    "dict[, ]"
                ]
            }
        },
        "get_validated_data": {
            "name": "get_validated_data",
            "location": 100,
            "return": [],
            "arguments": {
                "request": [
                    "dict[, ]"
                ]
            }
        },
        "get_validated_parameters": {
            "name": "get_validated_parameters",
            "location": 109,
            "return": [],
            "arguments": {
                "request": []
            }
        }
    },
    "rororo-master/src/rororo/openapi/validators.py": {
        "validate_response": {
            "name": "validate_response",
            "location": 33,
            "return": [],
            "arguments": {
                "request": [
                    "dict[, ]",
                    "str"
                ],
                "response": []
            }
        }
    },
    "rororo-master/src/rororo/openapi/views.py": {},
    "rororo-master/src/rororo/openapi/__init__.py": {},
    "rororo-master/tests/__init__.py": {},
    "rororo-master/tests/examples/__init__.py": {},
    "rororo-master/tests/examples/hobotnica/test_hobotnica.py": {},
    "rororo-master/tests/examples/hobotnica/__init__.py": {},
    "rororo-master/tests/examples/petstore/test_petstore.py": {},
    "rororo-master/tests/examples/petstore/__init__.py": {},
    "rororo-master/tests/examples/simulations/test_simulations.py": {},
    "rororo-master/tests/examples/simulations/__init__.py": {},
    "rororo-master/tests/examples/todobackend/conftest.py": {
        "todobackend_data": {
            "name": "todobackend_data",
            "location": 13,
            "return": [
                "dict[typing.Text, typing.Text]"
            ],
            "arguments": {}
        },
        "todobackend_redis": {
            "name": "todobackend_redis",
            "location": 18,
            "return": [],
            "arguments": {}
        },
        "todobackend_settings": {
            "name": "todobackend_settings",
            "location": 38,
            "return": [],
            "arguments": {}
        },
        "todobackend_settings.factory": {
            "name": "factory",
            "location": 39,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {}
        }
    },
    "rororo-master/tests/examples/todobackend/test_todobackend.py": {},
    "rororo-master/tests/examples/todobackend/test_todobackend_storage.py": {},
    "rororo-master/tests/examples/todobackend/__init__.py": {},
    "rororo-master/tests/rororo/settings.py": {},
    "rororo-master/tests/rororo/settings_error.py": {},
    "rororo-master/tests/rororo/test_aio.py": {
        "check_length": {
            "name": "check_length",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "iterable": [
                    "int",
                    "set[]",
                    "str"
                ],
                "expected": [
                    "int",
                    "set[]",
                    "str"
                ]
            }
        },
        "test_add_resource": {
            "name": "test_add_resource",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_add_resource_missed_handler": {
            "name": "test_add_resource_missed_handler",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_add_resource_name_prefix": {
            "name": "test_add_resource_name_prefix",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_add_resource_name_prefix_with_dot": {
            "name": "test_add_resource_name_prefix_with_dot",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_add_resource_real_world": {
            "name": "test_add_resource_real_world",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_add_resource_url_prefix": {
            "name": "test_add_resource_url_prefix",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_add_resource_url_prefix_with_slash": {
            "name": "test_add_resource_url_prefix_with_slash",
            "location": 102,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_add_resource_wildcard": {
            "name": "test_add_resource_wildcard",
            "location": 112,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_is_not_xhr_request": {
            "name": "test_is_not_xhr_request",
            "location": 122,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_is_xhr_request": {
            "name": "test_is_xhr_request",
            "location": 127,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_parse_aioredis_url": {
            "name": "test_parse_aioredis_url",
            "location": 153,
            "return": [
                "None"
            ],
            "arguments": {
                "url": [
                    "str",
                    "bool"
                ],
                "expected": [
                    "str",
                    "bool"
                ]
            }
        }
    },
    "rororo-master/tests/rororo/test_logger.py": {
        "test_default_logging_dict": {
            "name": "test_default_logging_dict",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_default_logging_dict_keyword_arguments": {
            "name": "test_default_logging_dict_keyword_arguments",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_default_logging_dict_multiple_loggers": {
            "name": "test_default_logging_dict_multiple_loggers",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_ignore_errors_filter": {
            "name": "test_ignore_errors_filter",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_update_sentry_logging": {
            "name": "test_update_sentry_logging",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_update_sentry_logging_empty_dsn": {
            "name": "test_update_sentry_logging_empty_dsn",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_update_sentry_logging_empty_loggers": {
            "name": "test_update_sentry_logging_empty_loggers",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_update_sentry_logging_ignore_sentry": {
            "name": "test_update_sentry_logging_ignore_sentry",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_update_sentry_logging_kwargs": {
            "name": "test_update_sentry_logging_kwargs",
            "location": 97,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_update_sentry_logging_missed_logger": {
            "name": "test_update_sentry_logging_missed_logger",
            "location": 103,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_update_sentry_logging_overwrite_level": {
            "name": "test_update_sentry_logging_overwrite_level",
            "location": 110,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "rororo-master/tests/rororo/test_openapi.py": {
        "custom_json_loader": {
            "name": "custom_json_loader",
            "location": 58,
            "return": [],
            "arguments": {
                "content": [
                    "bytes",
                    "str",
                    "list[int]",
                    "int"
                ]
            }
        },
        "custom_yaml_loader": {
            "name": "custom_yaml_loader",
            "location": 62,
            "return": [],
            "arguments": {
                "content": [
                    "bytes",
                    "bool",
                    "typing.Iterable[str]",
                    "str"
                ]
            }
        },
        "test_custom_schema_loader": {
            "name": "test_custom_schema_loader",
            "location": 324,
            "return": [
                "None"
            ],
            "arguments": {
                "schema_path": [
                    "dict[, ]",
                    "str"
                ],
                "schema_loader": [
                    "dict[, ]",
                    "str"
                ]
            }
        },
        "test_get_openapi_schema_no_schema": {
            "name": "test_get_openapi_schema_no_schema",
            "location": 387,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_get_openapi_spec_no_spec": {
            "name": "test_get_openapi_spec_no_spec",
            "location": 392,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_setup_openapi_invalid_operation": {
            "name": "test_setup_openapi_invalid_operation",
            "location": 596,
            "return": [
                "None"
            ],
            "arguments": {
                "schema_path": [
                    "dict[str, P]"
                ]
            }
        },
        "test_setup_openapi_invalid_path": {
            "name": "test_setup_openapi_invalid_path",
            "location": 606,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_setup_openapi_invalid_file": {
            "name": "test_setup_openapi_invalid_file",
            "location": 613,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_setup_openapi_invalid_spec": {
            "name": "test_setup_openapi_invalid_spec",
            "location": 621,
            "return": [
                "None"
            ],
            "arguments": {
                "schema_path": [
                    "dict[str, P]"
                ]
            }
        },
        "test_setup_openapi_server_url_invalid_level": {
            "name": "test_setup_openapi_server_url_invalid_level",
            "location": 656,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": [],
                "schema_path": [
                    "bool"
                ]
            }
        },
        "test_setup_openapi_server_url_does_not_set": {
            "name": "test_setup_openapi_server_url_does_not_set",
            "location": 668,
            "return": [
                "None"
            ],
            "arguments": {
                "schema_path": [
                    "dict[str, P]"
                ]
            }
        }
    },
    "rororo-master/tests/rororo/test_openapi_core_data.py": {
        "test_find_core_operation_missing_operation_id": {
            "name": "test_find_core_operation_missing_operation_id",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "path": [
                    "dict[str, P]",
                    "bool",
                    "str",
                    "list[pathlib.Path]"
                ]
            }
        },
        "test_find_core_operation_wrong_operation_id": {
            "name": "test_find_core_operation_wrong_operation_id",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "path": [
                    "dict[str, P]",
                    "bool",
                    "str",
                    "list[pathlib.Path]"
                ]
            }
        }
    },
    "rororo-master/tests/rororo/test_openapi_core_validators.py": {
        "test_invalid_value": {
            "name": "test_invalid_value",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "invalid_value": [
                    "str",
                    "typing.Callable[, ]",
                    "bool",
                    "float"
                ]
            }
        },
        "test_valid_email": {
            "name": "test_valid_email",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "value": [
                    "bool",
                    "typing.Sequence[str]"
                ]
            }
        },
        "test_valid_email_without_check_deliverability": {
            "name": "test_valid_email_without_check_deliverability",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "rororo-master/tests/rororo/test_openapi_exceptions.py": {
        "test_bad_request": {
            "name": "test_bad_request",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_object_does_not_exist": {
            "name": "test_object_does_not_exist",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "label": [
                    "list[typing.Optional[str]]",
                    "str",
                    "int"
                ],
                "message": [
                    "list[typing.Optional[str]]",
                    "str",
                    "int"
                ],
                "expected": [
                    "list[str]",
                    "str",
                    "typing.Sequence[str]"
                ]
            }
        },
        "test_openapi_error_headers": {
            "name": "test_openapi_error_headers",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "headers": [
                    "str"
                ],
                "expected": [
                    "str"
                ]
            }
        },
        "test_validation_error_from_dict_data": {
            "name": "test_validation_error_from_dict_data",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "data": [
                    "typing.Callable[typing.Any, None]",
                    "dict[, ]",
                    "typing.Mapping",
                    "bytes",
                    "dict[str, typing.Any]"
                ],
                "expected": [
                    "str",
                    "typing.Any",
                    "None",
                    "dict[, ]",
                    "bytes",
                    "bool",
                    "typing.MutableMapping"
                ]
            }
        },
        "test_validation_error_from_dict_kwargs": {
            "name": "test_validation_error_from_dict_kwargs",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "kwargs": [],
                "expected": []
            }
        },
        "test_validation_error_from_dict_value_error": {
            "name": "test_validation_error_from_dict_value_error",
            "location": 95,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_validation_error_from_dummy_error": {
            "name": "test_validation_error_from_dummy_error",
            "location": 133,
            "return": [
                "None"
            ],
            "arguments": {
                "method": [
                    "str",
                    "typing.Callable[, ]",
                    "dict[str, typing.Any]",
                    "list[str]"
                ],
                "error": [
                    "str",
                    "typing.Callable[, ]",
                    "dict[str, typing.Any]",
                    "list[str]"
                ],
                "expected_loc": [
                    "bool",
                    "str"
                ]
            }
        },
        "test_validation_error_message_no_errors": {
            "name": "test_validation_error_message_no_errors",
            "location": 139,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_validation_error_message_with_context": {
            "name": "test_validation_error_message_with_context",
            "location": 144,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_validation_error_erorrs_with_context": {
            "name": "test_validation_error_erorrs_with_context",
            "location": 151,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_validation_error_invalid_args": {
            "name": "test_validation_error_invalid_args",
            "location": 161,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_validation_error_from_dict": {
            "name": "test_validation_error_from_dict",
            "location": 170,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_validation_error_from_dict_with_context": {
            "name": "test_validation_error_from_dict_with_context",
            "location": 179,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_validation_error_empty_with_context": {
            "name": "test_validation_error_empty_with_context",
            "location": 186,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_validation_error_add": {
            "name": "test_validation_error_add",
            "location": 191,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_validation_error_add_value_error": {
            "name": "test_validation_error_add_value_error",
            "location": 202,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_get_current_validation_error_loc": {
            "name": "test_get_current_validation_error_loc",
            "location": 213,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "rororo-master/tests/rororo/test_openapi_middlewares.py": {
        "has_middleware": {
            "name": "has_middleware",
            "location": 29,
            "return": [
                "bool"
            ],
            "arguments": {
                "app": [],
                "middleware": []
            }
        },
        "test_use_cors_middleware": {
            "name": "test_use_cors_middleware",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "schema_path": [],
                "is_enabled": [],
                "kwargs": []
            }
        },
        "test_use_invalid_cors_middleware_kwargs": {
            "name": "test_use_invalid_cors_middleware_kwargs",
            "location": 115,
            "return": [
                "None"
            ],
            "arguments": {
                "schema_path": []
            }
        },
        "test_use_invalid_error_middleware_kwargs": {
            "name": "test_use_invalid_error_middleware_kwargs",
            "location": 128,
            "return": [
                "None"
            ],
            "arguments": {
                "schema_path": []
            }
        }
    },
    "rororo-master/tests/rororo/test_openapi_openapi.py": {
        "test_add_operations": {
            "name": "test_add_operations",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_cache_create_schema_and_spec": {
            "name": "test_cache_create_schema_and_spec",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "schema_path": [
                    "dict[str, P]",
                    "bool"
                ]
            }
        },
        "test_handle_all_create_schema_and_spec_errors": {
            "name": "test_handle_all_create_schema_and_spec_errors",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "tmp_path": []
            }
        },
        "test_ignore_non_http_view_methods": {
            "name": "test_ignore_non_http_view_methods",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_missed_schema_path_or_schema_and_spec": {
            "name": "test_missed_schema_path_or_schema_and_spec",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_ignore_non_http_view_methods.UserView.log_user": {
            "name": "log_user",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "user": []
            }
        }
    },
    "rororo-master/tests/rororo/test_openapi_utils.py": {
        "test_add_prefix": {
            "name": "test_add_prefix",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "path": [
                    "str",
                    "bool"
                ],
                "prefix": [
                    "str",
                    "bool"
                ],
                "expected": [
                    "str",
                    "bool"
                ]
            }
        }
    },
    "rororo-master/tests/rororo/test_settings.py": {
        "check_immutability": {
            "name": "check_immutability",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "settings": []
            }
        },
        "test_base_settings": {
            "name": "test_base_settings",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_base_settings_apply": {
            "name": "test_base_settings_apply",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_base_settings_apply_with_loggers": {
            "name": "test_base_settings_apply_with_loggers",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_base_settings_from_env": {
            "name": "test_base_settings_from_env",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": []
            }
        },
        "test_base_settings_from_env_kwargs": {
            "name": "test_base_settings_from_env_kwargs",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_base_settings_from_kwargs": {
            "name": "test_base_settings_from_kwargs",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_base_settings_inheritance": {
            "name": "test_base_settings_inheritance",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": []
            }
        },
        "test_base_settings_is_properties": {
            "name": "test_base_settings_is_properties",
            "location": 103,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": [],
                "level": [
                    "str",
                    "bool",
                    "tuple[]",
                    "list[str]",
                    "float",
                    "dict[str, tuple[typing.Union[str,str]]]"
                ],
                "expected_is_test": [
                    "str",
                    "bool"
                ],
                "expected_is_dev": [
                    "bool",
                    "typing.Type",
                    "tuple[tuple[typing.Union[int,int]]]"
                ],
                "expected_is_staging": [
                    "bool",
                    "typing.Type",
                    "tuple[tuple[typing.Union[int,int]]]"
                ],
                "expected_is_prod": [
                    "bool",
                    "typing.Type",
                    "tuple[tuple[typing.Union[int,int]]]"
                ]
            }
        },
        "test_from_env": {
            "name": "test_from_env",
            "location": 119,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_immutable_settings_from_dict": {
            "name": "test_immutable_settings_from_dict",
            "location": 125,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_immutable_settings_from_globals": {
            "name": "test_immutable_settings_from_globals",
            "location": 143,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_immutable_settings_from_locals": {
            "name": "test_immutable_settings_from_locals",
            "location": 154,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_immutable_settings_from_module": {
            "name": "test_immutable_settings_from_module",
            "location": 173,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_immutable_settings_with_optionals": {
            "name": "test_immutable_settings_with_optionals",
            "location": 183,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_inject_settings_fail_silently": {
            "name": "test_inject_settings_fail_silently",
            "location": 189,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_inject_settings_failed": {
            "name": "test_inject_settings_failed",
            "location": 195,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_inject_settings_from_dict": {
            "name": "test_inject_settings_from_dict",
            "location": 202,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_inject_settings_from_module": {
            "name": "test_inject_settings_from_module",
            "location": 210,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_inject_settings_from_str": {
            "name": "test_inject_settings_from_str",
            "location": 217,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_is_settings_key": {
            "name": "test_is_settings_key",
            "location": 234,
            "return": [
                "None"
            ],
            "arguments": {
                "key": [
                    "bytes",
                    "str",
                    "int"
                ],
                "expected": [
                    "bytes",
                    "str",
                    "int"
                ]
            }
        },
        "test_setup_locale": {
            "name": "test_setup_locale",
            "location": 238,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_setup_locale_with_first_weekday": {
            "name": "test_setup_locale_with_first_weekday",
            "location": 247,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_setup_logging": {
            "name": "test_setup_logging",
            "location": 256,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_setup_logging_remove_root_handlers": {
            "name": "test_setup_logging_remove_root_handlers",
            "location": 261,
            "return": [
                "None"
            ],
            "arguments": {
                "remove": [
                    "str",
                    "tuple[typing.Union[str,str]]"
                ],
                "expected": [
                    "str",
                    "typing.TextIO"
                ]
            }
        },
        "test_setup_settings": {
            "name": "test_setup_settings",
            "location": 269,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_setup_timezone": {
            "name": "test_setup_timezone",
            "location": 277,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_setup_timezone_empty": {
            "name": "test_setup_timezone_empty",
            "location": 287,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_setup_timezone_unknown": {
            "name": "test_setup_timezone_unknown",
            "location": 293,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "rororo-master/tests/rororo/test_timedelta.py": {
        "test_str_to_timedelta_default": {
            "name": "test_str_to_timedelta_default",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_str_to_timedelta_multiple_formats": {
            "name": "test_str_to_timedelta_multiple_formats",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_str_to_timedelta_user_format": {
            "name": "test_str_to_timedelta_user_format",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_str_to_timedelta_wrong_format": {
            "name": "test_str_to_timedelta_wrong_format",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_str_to_timedelta_wrong_value": {
            "name": "test_str_to_timedelta_wrong_value",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "wrong_value": [
                    "str",
                    "int"
                ]
            }
        },
        "test_str_to_timedelta_wrong_value_for_default_format": {
            "name": "test_str_to_timedelta_wrong_value_for_default_format",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_str_to_timedelta_wrong_value_for_user_format": {
            "name": "test_str_to_timedelta_wrong_value_for_user_format",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_timedelta_average": {
            "name": "test_timedelta_average",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_timedelta_average_as_list_or_tuple": {
            "name": "test_timedelta_average_as_list_or_tuple",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "value": [
                    "str",
                    "typing.Callable[str, bool]"
                ]
            }
        },
        "test_timedelta_div": {
            "name": "test_timedelta_div",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_timedelta_div_empty": {
            "name": "test_timedelta_div_empty",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "first": [
                    "int",
                    "str",
                    "list[int]",
                    "float"
                ],
                "second": [
                    "int",
                    "str",
                    "list[int]",
                    "float"
                ],
                "expected": [
                    "int",
                    "str",
                    "list[int]",
                    "float"
                ]
            }
        },
        "test_timedelta_seconds": {
            "name": "test_timedelta_seconds",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_timedelta_seconds_empty": {
            "name": "test_timedelta_seconds_empty",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_timedelta_seconds_multiple_days": {
            "name": "test_timedelta_seconds_multiple_days",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_timedelta_to_str": {
            "name": "test_timedelta_to_str",
            "location": 107,
            "return": [
                "None"
            ],
            "arguments": {
                "fmt": [
                    "str",
                    "None"
                ],
                "expected": [
                    "str",
                    "None"
                ]
            }
        },
        "test_timedelta_to_str_full_days": {
            "name": "test_timedelta_to_str_full_days",
            "location": 121,
            "return": [
                "None"
            ],
            "arguments": {
                "fmt": [
                    "str",
                    "None",
                    "bool",
                    "list[str]"
                ],
                "expected": [
                    "str",
                    "None",
                    "bool",
                    "list[str]"
                ]
            }
        },
        "test_timedelta_to_str_full_no_seconds": {
            "name": "test_timedelta_to_str_full_no_seconds",
            "location": 135,
            "return": [
                "None"
            ],
            "arguments": {
                "fmt": [
                    "str",
                    "None"
                ],
                "expected": [
                    "str",
                    "None"
                ]
            }
        },
        "test_timedelta_to_str_full_weeks": {
            "name": "test_timedelta_to_str_full_weeks",
            "location": 149,
            "return": [
                "None"
            ],
            "arguments": {
                "fmt": [
                    "str",
                    "None"
                ],
                "expected": [
                    "str",
                    "None"
                ]
            }
        },
        "test_timedelta_to_str_default": {
            "name": "test_timedelta_to_str_default",
            "location": 154,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_timedelta_to_str_wrong_value": {
            "name": "test_timedelta_to_str_wrong_value",
            "location": 161,
            "return": [
                "None"
            ],
            "arguments": {
                "wrong_value": [
                    "str",
                    "list[]"
                ]
            }
        }
    },
    "rororo-master/tests/rororo/test_utils.py": {
        "test_ensure_collection": {
            "name": "test_ensure_collection",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "value": [
                    "int",
                    "typing.Iterable[]",
                    "str"
                ],
                "expected": [
                    "int",
                    "typing.Iterable[]",
                    "str"
                ]
            }
        },
        "test_to_bool": {
            "name": "test_to_bool",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "value": [
                    "str",
                    "int",
                    "None"
                ],
                "expected": [
                    "str",
                    "int",
                    "None"
                ]
            }
        },
        "test_to_int": {
            "name": "test_to_int",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "value": [
                    "str",
                    "int",
                    "float",
                    "dict[, ]"
                ],
                "expected": [
                    "str",
                    "int",
                    "float",
                    "dict[, ]"
                ]
            }
        },
        "test_to_int_default_value": {
            "name": "test_to_int_default_value",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "value": [
                    "int",
                    "float",
                    "list[]",
                    "str"
                ]
            }
        }
    },
    "rororo-master/tests/rororo/__init__.py": {}
}
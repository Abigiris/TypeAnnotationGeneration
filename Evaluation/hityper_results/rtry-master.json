{
    "rtry-master/setup.py": {
        "find_required": {
            "name": "find_required",
            "location": 4,
            "return": [],
            "arguments": {}
        },
        "find_dev_required": {
            "name": "find_dev_required",
            "location": 9,
            "return": [],
            "arguments": {}
        }
    },
    "rtry-master/rtry/_errors.py": {},
    "rtry-master/rtry/_retry.py": {
        "Retry.__init__": {
            "name": "__init__",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "timeout_factory": [
                    "float",
                    "tuple[]",
                    "str",
                    "int"
                ]
            }
        },
        "Retry._sync_wrapped": {
            "name": "_sync_wrapped",
            "location": 47,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Retry.__call__": {
            "name": "__call__",
            "location": 111,
            "return": [],
            "arguments": {
                "self": [],
                "fn": [
                    "dict[, ]"
                ]
            }
        },
        "Retry.__repr__": {
            "name": "__repr__",
            "location": 129,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Retry.__call__.sync_wrapped": {
            "name": "sync_wrapped",
            "location": 121,
            "return": [],
            "arguments": {}
        }
    },
    "rtry-master/rtry/_scheduler.py": {
        "AbstractScheduler.get_remaining": {
            "name": "get_remaining",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "dict[, ]"
                ]
            }
        },
        "AbstractScheduler.new": {
            "name": "new",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "seconds": [
                    "int",
                    "typing.Callable[[], None]",
                    "str",
                    "bytes"
                ],
                "handler": [
                    "int",
                    "typing.Callable[[], None]",
                    "str",
                    "bytes"
                ]
            }
        },
        "AbstractScheduler.cancel": {
            "name": "cancel",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "None",
                    "str"
                ]
            }
        },
        "Scheduler.__init__": {
            "name": "__init__",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "timefunc": [],
                "delayfunc": [],
                "itimer": [
                    "int"
                ]
            }
        },
        "Scheduler.get_remaining": {
            "name": "get_remaining",
            "location": 43,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "str",
                    "typing.Mapping",
                    "list[dict[, ]]",
                    "int"
                ]
            }
        },
        "Scheduler._next_event": {
            "name": "_next_event",
            "location": 46,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Scheduler.new": {
            "name": "new",
            "location": 49,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "seconds": [
                    "str",
                    "tuple[typing.Union[int,int]]",
                    "list[str]",
                    "None"
                ],
                "handler": [
                    "str",
                    "tuple[typing.Union[int,int]]",
                    "list[str]",
                    "None"
                ]
            }
        },
        "Scheduler.cancel": {
            "name": "cancel",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "dict[str, typing.Any]",
                    "typing.Callable[, ]",
                    "int",
                    "str",
                    "dict[, ]"
                ]
            }
        },
        "Scheduler.__call__": {
            "name": "__call__",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "signum": [
                    "dict[, ]"
                ],
                "frame": [
                    "dict[, ]"
                ]
            }
        },
        "AsyncScheduler._loop": {
            "name": "_loop",
            "location": 86,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AsyncScheduler.get_remaining": {
            "name": "get_remaining",
            "location": 89,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "str",
                    "typing.Mapping",
                    "list[dict[, ]]",
                    "int"
                ]
            }
        },
        "AsyncScheduler.new": {
            "name": "new",
            "location": 92,
            "return": [
                "AsyncEvent"
            ],
            "arguments": {
                "self": [],
                "seconds": [
                    "str",
                    "bool",
                    "dict[, ]"
                ],
                "handler": [
                    "float",
                    "bool",
                    "list['cirq.Qid']"
                ]
            }
        },
        "AsyncScheduler.cancel": {
            "name": "cancel",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "None"
                ]
            }
        }
    },
    "rtry-master/rtry/_timeout.py": {
        "TimeoutProxy.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [],
            "arguments": {
                "self": [],
                "timeout": []
            }
        },
        "TimeoutProxy.exception": {
            "name": "exception",
            "location": 19,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TimeoutProxy.remaining": {
            "name": "remaining",
            "location": 23,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TimeoutProxy.__repr__": {
            "name": "__repr__",
            "location": 26,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AsyncTimeoutProxy.__repr__": {
            "name": "__repr__",
            "location": 33,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Timeout.__init__": {
            "name": "__init__",
            "location": 40,
            "return": [],
            "arguments": {
                "self": [],
                "scheduler": [],
                "async_scheduler": [],
                "seconds": [],
                "exception": []
            }
        },
        "Timeout.seconds": {
            "name": "seconds",
            "location": 56,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Timeout.exception": {
            "name": "exception",
            "location": 60,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Timeout.remaining": {
            "name": "remaining",
            "location": 64,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Timeout.__enter__": {
            "name": "__enter__",
            "location": 72,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Timeout.__exit__": {
            "name": "__exit__",
            "location": 82,
            "return": [],
            "arguments": {
                "self": [],
                "exc_type": [],
                "exc_val": [],
                "exc_tb": []
            }
        },
        "Timeout.__call__": {
            "name": "__call__",
            "location": 121,
            "return": [],
            "arguments": {
                "self": [],
                "fn": []
            }
        },
        "Timeout.__repr__": {
            "name": "__repr__",
            "location": 136,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Timeout.__enter__.sync_handler": {
            "name": "sync_handler",
            "location": 73,
            "return": [],
            "arguments": {}
        },
        "Timeout.__aenter__.async_handler": {
            "name": "async_handler",
            "location": 97,
            "return": [],
            "arguments": {
                "task": []
            }
        },
        "Timeout.__call__.sync_wrapped": {
            "name": "sync_wrapped",
            "location": 130,
            "return": [],
            "arguments": {}
        }
    },
    "rtry-master/rtry/_types.py": {},
    "rtry-master/rtry/__init__.py": {},
    "rtry-master/rtry/types/__init__.py": {},
    "rtry-master/tests/test_async_retry.py": {},
    "rtry-master/tests/test_async_timeout.py": {
        "TestAsyncTimeout.test_restores_prev_signal_handler_with_expected_delay.handler": {
            "name": "handler",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "rtry-master/tests/test_async_timeout_context.py": {
        "TestAsyncTimeoutContext.test_restores_prev_signal_handler_with_expected_delay.handler": {
            "name": "handler",
            "location": 105,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "TestAsyncTimeoutContext.test_restores_prev_signal_handler_with_unexpected_delay.handler": {
            "name": "handler",
            "location": 116,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "rtry-master/tests/test_retry.py": {
        "TestRetry.test_no_args": {
            "name": "test_no_args",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRetry.test_wraps": {
            "name": "test_wraps",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRetry.test_forwards_args_and_result": {
            "name": "test_forwards_args_and_result",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRetry.test_zero_attempts": {
            "name": "test_zero_attempts",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRetry.test_single_attempt": {
            "name": "test_single_attempt",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRetry.test_multiple_attempts_without_errors": {
            "name": "test_multiple_attempts_without_errors",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRetry.test_multiple_attempts_with_error_after_start": {
            "name": "test_multiple_attempts_with_error_after_start",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRetry.test_multiple_attempts_with_error_before_end": {
            "name": "test_multiple_attempts_with_error_before_end",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRetry.test_multiple_attempts_with_errors": {
            "name": "test_multiple_attempts_with_errors",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRetry.test_default_delay": {
            "name": "test_default_delay",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRetry.test_no_delay_without_errors": {
            "name": "test_no_delay_without_errors",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRetry.test_delay_with_error_after_start": {
            "name": "test_delay_with_error_after_start",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRetry.test_delay_with_error_before_end": {
            "name": "test_delay_with_error_before_end",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRetry.test_delay_with_errors": {
            "name": "test_delay_with_errors",
            "location": 99,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRetry.test_delay_with_custom_backoff": {
            "name": "test_delay_with_custom_backoff",
            "location": 112,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRetry.test_swallow_no_exceptions": {
            "name": "test_swallow_no_exceptions",
            "location": 129,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRetry.test_swallow_builtin_exception": {
            "name": "test_swallow_builtin_exception",
            "location": 135,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRetry.test_swallow_custom_exception": {
            "name": "test_swallow_custom_exception",
            "location": 140,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRetry.test_swallow_single_exception": {
            "name": "test_swallow_single_exception",
            "location": 148,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRetry.test_swallow_multiple_exceptions": {
            "name": "test_swallow_multiple_exceptions",
            "location": 158,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRetry.test_swallow_list_exceptions": {
            "name": "test_swallow_list_exceptions",
            "location": 168,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRetry.test_until_without_errors": {
            "name": "test_until_without_errors",
            "location": 175,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRetry.test_until_with_error_after_start": {
            "name": "test_until_with_error_after_start",
            "location": 186,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRetry.test_until_with_error_before_end": {
            "name": "test_until_with_error_before_end",
            "location": 201,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRetry.test_until_with_errors": {
            "name": "test_until_with_errors",
            "location": 217,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRetry.test_custom_logger_without_errors": {
            "name": "test_custom_logger_without_errors",
            "location": 233,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRetry.test_logger_with_error_after_start": {
            "name": "test_logger_with_error_after_start",
            "location": 241,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRetry.test_logger_with_error_before_end": {
            "name": "test_logger_with_error_before_end",
            "location": 250,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRetry.test_logger_with_errors": {
            "name": "test_logger_with_errors",
            "location": 263,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRetry.test_logger_with_until_true_after_start": {
            "name": "test_logger_with_until_true_after_start",
            "location": 280,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRetry.test_logger_with_until_true_before_end": {
            "name": "test_logger_with_until_true_before_end",
            "location": 291,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRetry.test_logger_with_until_true": {
            "name": "test_logger_with_until_true",
            "location": 306,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRetry.test_negative_timeout": {
            "name": "test_negative_timeout",
            "location": 324,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRetry.test_timeout_without_delay": {
            "name": "test_timeout_without_delay",
            "location": 328,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRetry.test_timeout_with_expected_delay": {
            "name": "test_timeout_with_expected_delay",
            "location": 333,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRetry.test_timeout_with_unexpected_delay": {
            "name": "test_timeout_with_unexpected_delay",
            "location": 340,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRetry.test_timeout_with_errors": {
            "name": "test_timeout_with_errors",
            "location": 348,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRetry.test_timeout_with_error_after_start": {
            "name": "test_timeout_with_error_after_start",
            "location": 356,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRetry.test_timeout_with_error_before_end": {
            "name": "test_timeout_with_error_before_end",
            "location": 364,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRetry.test_do_not_swallow_timeout_error": {
            "name": "test_do_not_swallow_timeout_error",
            "location": 372,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRetry.test_timeout_with_exceeded_attempts": {
            "name": "test_timeout_with_exceeded_attempts",
            "location": 380,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRetry.test_attempts_with_exceeded_timeout": {
            "name": "test_attempts_with_exceeded_timeout",
            "location": 388,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRetry.test_repr_with_attempts": {
            "name": "test_repr_with_attempts",
            "location": 401,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRetry.test_repr_with_until": {
            "name": "test_repr_with_until",
            "location": 406,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRetry.test_repr_with_timeout": {
            "name": "test_repr_with_timeout",
            "location": 411,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRetry.test_repr_with_delay": {
            "name": "test_repr_with_delay",
            "location": 416,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRetry.test_repr_with_delay_func": {
            "name": "test_repr_with_delay_func",
            "location": 421,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRetry.test_repr_with_no_swallow": {
            "name": "test_repr_with_no_swallow",
            "location": 427,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRetry.test_repr_with_custom_swallow": {
            "name": "test_repr_with_custom_swallow",
            "location": 432,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRetry.test_repr_with_custom_swallows": {
            "name": "test_repr_with_custom_swallows",
            "location": 438,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRetry.test_repr_with_logger": {
            "name": "test_repr_with_logger",
            "location": 444,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRetry.test_wraps.fn": {
            "name": "fn",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "TestRetry.test_attempts_with_exceeded_timeout.side_effect": {
            "name": "side_effect",
            "location": 389,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "rtry-master/tests/test_timeout.py": {
        "TestTimeout.test_wraps": {
            "name": "test_wraps",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTimeout.test_no_timeout": {
            "name": "test_no_timeout",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTimeout.test_timeout_without_delay": {
            "name": "test_timeout_without_delay",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTimeout.test_timeout_with_expected_delay": {
            "name": "test_timeout_with_expected_delay",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTimeout.test_timeout_with_unexpected_delay": {
            "name": "test_timeout_with_unexpected_delay",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTimeout.test_silent_timeout_with_unexpected_delay": {
            "name": "test_silent_timeout_with_unexpected_delay",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTimeout.test_nested_silent_timeout_with_exception": {
            "name": "test_nested_silent_timeout_with_exception",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTimeout.test_forwards_args_and_result": {
            "name": "test_forwards_args_and_result",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTimeout.test_timeout_seconds_property": {
            "name": "test_timeout_seconds_property",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTimeout.test_timeout_exception_property": {
            "name": "test_timeout_exception_property",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTimeout.test_timeout_exception_property_custom": {
            "name": "test_timeout_exception_property_custom",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTimeout.test_silent_timeout_exception_property": {
            "name": "test_silent_timeout_exception_property",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTimeout.test_restores_prev_signal_handler_with_expected_delay": {
            "name": "test_restores_prev_signal_handler_with_expected_delay",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTimeout.test_restores_prev_signal_handler_with_unexpected_delay": {
            "name": "test_restores_prev_signal_handler_with_unexpected_delay",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTimeout.test_custom_exception": {
            "name": "test_custom_exception",
            "location": 114,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTimeout.test_nested_timeout_result": {
            "name": "test_nested_timeout_result",
            "location": 125,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTimeout.test_nested_timeout_inner_propagation": {
            "name": "test_nested_timeout_inner_propagation",
            "location": 135,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTimeout.test_nested_timeout_outer_propagation": {
            "name": "test_nested_timeout_outer_propagation",
            "location": 155,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTimeout.test_nested_timeout_outer_raises": {
            "name": "test_nested_timeout_outer_raises",
            "location": 175,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTimeout.test_nested_timeout_outer_raises_inner_silent": {
            "name": "test_nested_timeout_outer_raises_inner_silent",
            "location": 197,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTimeout.test_nested_timeout_raises_with_same_timeout": {
            "name": "test_nested_timeout_raises_with_same_timeout",
            "location": 219,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTimeout.test_multiple_calls_with_expected_delay": {
            "name": "test_multiple_calls_with_expected_delay",
            "location": 239,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTimeout.test_multiple_calls_with_unexpected_delay": {
            "name": "test_multiple_calls_with_unexpected_delay",
            "location": 247,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTimeout.test_timeout_with_exception": {
            "name": "test_timeout_with_exception",
            "location": 256,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTimeout.test_silent_timeout_with_exception": {
            "name": "test_silent_timeout_with_exception",
            "location": 263,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTimeout.test_timeout_remaining_property": {
            "name": "test_timeout_remaining_property",
            "location": 270,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTimeout.test_nested_timeout_with_exception": {
            "name": "test_nested_timeout_with_exception",
            "location": 274,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTimeout.test_timeout_repr_with_default_exception": {
            "name": "test_timeout_repr_with_default_exception",
            "location": 284,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTimeout.test_silent_timeout_repr": {
            "name": "test_silent_timeout_repr",
            "location": 289,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTimeout.test_timeout_repr_with_custom_exception": {
            "name": "test_timeout_repr_with_custom_exception",
            "location": 294,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTimeout.test_wraps.fn": {
            "name": "fn",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "TestTimeout.test_no_timeout.fn": {
            "name": "fn",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "TestTimeout.test_timeout_without_delay.fn": {
            "name": "fn",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "TestTimeout.test_timeout_with_expected_delay.fn": {
            "name": "fn",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "TestTimeout.test_timeout_with_unexpected_delay.fn": {
            "name": "fn",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "TestTimeout.test_silent_timeout_with_unexpected_delay.fn": {
            "name": "fn",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "TestTimeout.test_nested_silent_timeout_with_exception.outer": {
            "name": "outer",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "TestTimeout.test_restores_prev_signal_handler_with_expected_delay.handler": {
            "name": "handler",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "TestTimeout.test_restores_prev_signal_handler_with_expected_delay.fn": {
            "name": "fn",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "TestTimeout.test_restores_prev_signal_handler_with_unexpected_delay.handler": {
            "name": "handler",
            "location": 101,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "TestTimeout.test_restores_prev_signal_handler_with_unexpected_delay.fn": {
            "name": "fn",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "TestTimeout.test_custom_exception.fn": {
            "name": "fn",
            "location": 119,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "TestTimeout.test_nested_timeout_result.outer": {
            "name": "outer",
            "location": 127,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "TestTimeout.test_nested_timeout_inner_propagation.outer": {
            "name": "outer",
            "location": 139,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "TestTimeout.test_nested_timeout_outer_propagation.outer": {
            "name": "outer",
            "location": 159,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "TestTimeout.test_nested_timeout_outer_raises.outer": {
            "name": "outer",
            "location": 179,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "TestTimeout.test_nested_timeout_outer_raises_inner_silent.outer": {
            "name": "outer",
            "location": 201,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "TestTimeout.test_nested_timeout_raises_with_same_timeout.outer": {
            "name": "outer",
            "location": 223,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "TestTimeout.test_multiple_calls_with_expected_delay.fn": {
            "name": "fn",
            "location": 241,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "TestTimeout.test_multiple_calls_with_unexpected_delay.fn": {
            "name": "fn",
            "location": 249,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "TestTimeout.test_timeout_with_exception.fn": {
            "name": "fn",
            "location": 258,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "TestTimeout.test_silent_timeout_with_exception.fn": {
            "name": "fn",
            "location": 265,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "TestTimeout.test_nested_timeout_with_exception.outer": {
            "name": "outer",
            "location": 276,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "TestTimeout.test_nested_silent_timeout_with_exception.outer.inner": {
            "name": "inner",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "TestTimeout.test_nested_timeout_result.outer.inner": {
            "name": "inner",
            "location": 129,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "TestTimeout.test_nested_timeout_inner_propagation.outer.inner": {
            "name": "inner",
            "location": 143,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "TestTimeout.test_nested_timeout_outer_propagation.outer.inner": {
            "name": "inner",
            "location": 163,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "TestTimeout.test_nested_timeout_outer_raises.outer.inner": {
            "name": "inner",
            "location": 183,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "TestTimeout.test_nested_timeout_outer_raises_inner_silent.outer.inner": {
            "name": "inner",
            "location": 205,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "TestTimeout.test_nested_timeout_raises_with_same_timeout.outer.inner": {
            "name": "inner",
            "location": 227,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "TestTimeout.test_nested_timeout_with_exception.outer.inner": {
            "name": "inner",
            "location": 278,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "rtry-master/tests/test_timeout_context.py": {
        "TestTimeoutContext.test_no_timeout": {
            "name": "test_no_timeout",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTimeoutContext.test_timeout_without_delay": {
            "name": "test_timeout_without_delay",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTimeoutContext.test_timeout_with_expected_delay": {
            "name": "test_timeout_with_expected_delay",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTimeoutContext.test_timeout_with_unexpected_delay": {
            "name": "test_timeout_with_unexpected_delay",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTimeoutContext.test_timeout_with_ignored_inner_exception": {
            "name": "test_timeout_with_ignored_inner_exception",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTimeoutContext.test_timeout_context": {
            "name": "test_timeout_context",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTimeoutContext.test_timeout_proxy_exception_property": {
            "name": "test_timeout_proxy_exception_property",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTimeoutContext.test_silent_timeout_proxy_exception_property": {
            "name": "test_silent_timeout_proxy_exception_property",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTimeoutContext.test_timeout_remaining_property": {
            "name": "test_timeout_remaining_property",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTimeoutContext.test_timeout_remaining_property_berfore": {
            "name": "test_timeout_remaining_property_berfore",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTimeoutContext.test_timeout_remaining_property_after": {
            "name": "test_timeout_remaining_property_after",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTimeoutContext.test_silent_timeout_with_unexpected_delay": {
            "name": "test_silent_timeout_with_unexpected_delay",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTimeoutContext.test_nested_silent_timeout_with_exception": {
            "name": "test_nested_silent_timeout_with_exception",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTimeoutContext.test_restores_prev_signal_handler_with_expected_delay": {
            "name": "test_restores_prev_signal_handler_with_expected_delay",
            "location": 99,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTimeoutContext.test_restores_prev_signal_handler_with_unexpected_delay": {
            "name": "test_restores_prev_signal_handler_with_unexpected_delay",
            "location": 110,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTimeoutContext.test_timeout_custom_exception_with_unexpected_delay": {
            "name": "test_timeout_custom_exception_with_unexpected_delay",
            "location": 122,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTimeoutContext.test_timeout_custom_exception_with_manual_raise": {
            "name": "test_timeout_custom_exception_with_manual_raise",
            "location": 130,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTimeoutContext.test_nested_timeout_inner_propagation": {
            "name": "test_nested_timeout_inner_propagation",
            "location": 138,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTimeoutContext.test_nested_timeout_outer_propagation": {
            "name": "test_nested_timeout_outer_propagation",
            "location": 153,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTimeoutContext.test_nested_timeout_outer_raises": {
            "name": "test_nested_timeout_outer_raises",
            "location": 168,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTimeoutContext.test_nested_timeout_outer_raises_inner_silent": {
            "name": "test_nested_timeout_outer_raises_inner_silent",
            "location": 185,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTimeoutContext.test_nested_timeout_raises_with_same_timeout": {
            "name": "test_nested_timeout_raises_with_same_timeout",
            "location": 202,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTimeoutContext.test_multiple_nested_timeout_inner_propagation": {
            "name": "test_multiple_nested_timeout_inner_propagation",
            "location": 217,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTimeoutContext.test_multiple_nested_silent_timeout_inner_propagation": {
            "name": "test_multiple_nested_silent_timeout_inner_propagation",
            "location": 235,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTimeoutContext.test_multiple_nested_timeout_propagation": {
            "name": "test_multiple_nested_timeout_propagation",
            "location": 252,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTimeoutContext.test_multiple_nested_silent_timeout_propagation": {
            "name": "test_multiple_nested_silent_timeout_propagation",
            "location": 270,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTimeoutContext.test_multiple_nested_timeout_outer_propagation": {
            "name": "test_multiple_nested_timeout_outer_propagation",
            "location": 287,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTimeoutContext.test_multiple_nested_silent_timeout_outer_propagation": {
            "name": "test_multiple_nested_silent_timeout_outer_propagation",
            "location": 305,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTimeoutContext.test_timeout_with_exception": {
            "name": "test_timeout_with_exception",
            "location": 322,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTimeoutContext.test_silent_timeout_with_exception": {
            "name": "test_silent_timeout_with_exception",
            "location": 327,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTimeoutContext.test_nested_timeout_with_exception": {
            "name": "test_nested_timeout_with_exception",
            "location": 332,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTimeoutContext.test_timeout_proxy_repr": {
            "name": "test_timeout_proxy_repr",
            "location": 338,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTimeoutContext.test_restores_prev_signal_handler_with_expected_delay.handler": {
            "name": "handler",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "TestTimeoutContext.test_restores_prev_signal_handler_with_unexpected_delay.handler": {
            "name": "handler",
            "location": 111,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "rtry-master/tests/_ignore_exception.py": {
        "ignore_exception.__init__": {
            "name": "__init__",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "exception": [
                    "str",
                    "int"
                ],
                "delay": [
                    "str",
                    "int"
                ]
            }
        },
        "ignore_exception.__enter__": {
            "name": "__enter__",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ignore_exception.__exit__": {
            "name": "__exit__",
            "location": 16,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "exc_type": [
                    "typing.Type",
                    "None",
                    "str",
                    "BaseException",
                    "Exception"
                ],
                "exc_val": [
                    "str",
                    "typing.Type",
                    "typing.Callable[None, None]",
                    "typing.IO",
                    "list[str]"
                ],
                "exc_tb": [
                    "typing.Type",
                    "None",
                    "str",
                    "BaseException",
                    "Exception"
                ]
            }
        }
    },
    "rtry-master/tests/__init__.py": {}
}
{
    "sanascan_backend-master/setup.py": {},
    "sanascan_backend-master/deplicated/__init__.py": {},
    "sanascan_backend-master/deplicated/step_count/step_count.py": {
        "_yomi2pos": {
            "name": "_yomi2pos",
            "location": 48,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "words": []
            }
        },
        "words2step": {
            "name": "words2step",
            "location": 62,
            "return": [],
            "arguments": {
                "words": [],
                "method": [
                    "None"
                ]
            }
        },
        "Step.__add__": {
            "name": "__add__",
            "location": 9,
            "return": [
                "Step"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "_yomi2pos._mozi2pos": {
            "name": "_mozi2pos",
            "location": 52,
            "return": [
                "Position"
            ],
            "arguments": {
                "mozi": []
            }
        },
        "words2step._pos2step": {
            "name": "_pos2step",
            "location": 68,
            "return": [
                "Step"
            ],
            "arguments": {
                "position": [],
                "table": []
            }
        },
        "words2step._total_steps": {
            "name": "_total_steps",
            "location": 77,
            "return": [
                "bool"
            ],
            "arguments": {
                "positions": [],
                "table": []
            }
        }
    },
    "sanascan_backend-master/deplicated/step_count/__init__.py": {},
    "sanascan_backend-master/deplicated/util/dp_matching.py": {
        "DPMatching.__init__": {
            "name": "__init__",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ref_words": [],
                "est_words": []
            }
        },
        "DPMatching.get_node": {
            "name": "get_node",
            "location": 17,
            "return": [
                "Node"
            ],
            "arguments": {
                "self": [],
                "x": [],
                "y": []
            }
        },
        "DPMatching.nodes": {
            "name": "nodes",
            "location": 37,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Node.__init__": {
            "name": "__init__",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "x": [],
                "y": [],
                "ref": [],
                "est": [],
                "dpm": [],
                "root": [
                    "bool"
                ]
            }
        },
        "Node.__repr__": {
            "name": "__repr__",
            "location": 63,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "Node.position": {
            "name": "position",
            "location": 66,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Node.__eq__": {
            "name": "__eq__",
            "location": 69,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Node.__hash__": {
            "name": "__hash__",
            "location": 78,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Node.__tuple__": {
            "name": "__tuple__",
            "location": 81,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Node._is_match": {
            "name": "_is_match",
            "location": 90,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Node._parent_candidates": {
            "name": "_parent_candidates",
            "location": 96,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Node._prev_path": {
            "name": "_prev_path",
            "location": 105,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Node._calc_matching_score": {
            "name": "_calc_matching_score",
            "location": 114,
            "return": [
                "Score"
            ],
            "arguments": {
                "self": [],
                "ref": [],
                "est": []
            }
        },
        "Node._calc_score": {
            "name": "_calc_score",
            "location": 122,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Node._set_parent": {
            "name": "_set_parent",
            "location": 134,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Score.__init__": {
            "name": "__init__",
            "location": 149,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "perfect": [
                    "int"
                ],
                "yomi": [
                    "int"
                ],
                "miss": [
                    "int"
                ],
                "ignore": [
                    "bool"
                ]
            }
        },
        "Score.__repr__": {
            "name": "__repr__",
            "location": 155,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "Score.__eq__": {
            "name": "__eq__",
            "location": 158,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Score.__hash__": {
            "name": "__hash__",
            "location": 169,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Score.__lt__": {
            "name": "__lt__",
            "location": 172,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Score.__add__": {
            "name": "__add__",
            "location": 192,
            "return": [
                "Score"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        }
    },
    "sanascan_backend-master/sanascan_backend/estimator.py": {
        "Estimator.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "lm": []
            }
        },
        "Estimator.add": {
            "name": "add",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "Estimator.finish": {
            "name": "finish",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "sanascan_backend-master/sanascan_backend/http.py": {
        "RootResource.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RootResource.on_post": {
            "name": "on_post",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "req": [],
                "resp": []
            }
        },
        "RootResource.__getitem__": {
            "name": "__getitem__",
            "location": 39,
            "return": [],
            "arguments": {
                "self": [],
                "arg": []
            }
        },
        "EIDResouce.__init__": {
            "name": "__init__",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "root_resource": []
            }
        },
        "EIDResouce.on_post": {
            "name": "on_post",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "req": [],
                "resp": []
            }
        },
        "EIDResouce.on_get": {
            "name": "on_get",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "req": [],
                "resp": []
            }
        }
    },
    "sanascan_backend-master/sanascan_backend/key.py": {
        "Key.from_words": {
            "name": "from_words",
            "location": 25,
            "return": [
                "Key"
            ],
            "arguments": {
                "klass": [],
                "words": []
            }
        },
        "Key._process_words": {
            "name": "_process_words",
            "location": 29,
            "return": [
                "typing.Generator[TagWord]",
                "typing.Generator[]"
            ],
            "arguments": {
                "words": []
            }
        },
        "Key.__init__": {
            "name": "__init__",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "args": []
            }
        },
        "Key.__eq__": {
            "name": "__eq__",
            "location": 41,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Key.__hash__": {
            "name": "__hash__",
            "location": 46,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Key.__repr__": {
            "name": "__repr__",
            "location": 49,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Key.__str__": {
            "name": "__str__",
            "location": 52,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Key.__iter__": {
            "name": "__iter__",
            "location": 57,
            "return": [
                "typing.Generator[Key]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Key.__add__": {
            "name": "__add__",
            "location": 61,
            "return": [
                "Key"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Key.subsequence_with_end": {
            "name": "subsequence_with_end",
            "location": 64,
            "return": [
                "typing.Generator[Key]"
            ],
            "arguments": {
                "self": [],
                "end": []
            }
        },
        "Key.all_of_subsequence": {
            "name": "all_of_subsequence",
            "location": 73,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Key.__len__": {
            "name": "__len__",
            "location": 76,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "sanascan_backend-master/sanascan_backend/lang_model.py": {
        "LangModel.__init__": {
            "name": "__init__",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "arpa_text": []
            }
        },
        "LangModel.score": {
            "name": "score",
            "location": 57,
            "return": [],
            "arguments": {
                "self": [],
                "words": []
            }
        },
        "LangModel._get_word_set": {
            "name": "_get_word_set",
            "location": 78,
            "return": [
                "set[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "LangModel.create_vocabrary": {
            "name": "create_vocabrary",
            "location": 81,
            "return": [
                "Vocabulary"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "sanascan_backend-master/sanascan_backend/node.py": {
        "Node.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "word": [
                    "bool",
                    "typing.Callable[, ]",
                    "str",
                    "list[str]",
                    "dict[str, typing.Any]",
                    "None"
                ],
                "candidates": [
                    "str"
                ],
                "lang_model": [
                    "bool",
                    "float",
                    "list[str]",
                    "bytes"
                ]
            }
        },
        "Node._calc_score": {
            "name": "_calc_score",
            "location": 30,
            "return": [],
            "arguments": {
                "self": [],
                "other": [],
                "lm": []
            }
        },
        "RootNode.__init__": {
            "name": "__init__",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EOSNode.__init__": {
            "name": "__init__",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "candidates": [
                    "int",
                    "list[typing.AnyStr]"
                ],
                "lang_model": [
                    "int",
                    "list[typing.AnyStr]"
                ]
            }
        }
    },
    "sanascan_backend-master/sanascan_backend/vocabulary.py": {
        "Vocabulary.__init__": {
            "name": "__init__",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "words": [
                    "dict[str, typing.Any]",
                    "str"
                ]
            }
        },
        "Vocabulary._add_data": {
            "name": "_add_data",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [],
                "word": [
                    "str",
                    "list[str]"
                ]
            }
        },
        "Vocabulary.get_by_key": {
            "name": "get_by_key",
            "location": 46,
            "return": [
                "typing.Generator[ResultOfGetByKey]"
            ],
            "arguments": {
                "self": [],
                "key": []
            }
        }
    },
    "sanascan_backend-master/sanascan_backend/word.py": {
        "Word.from_wakachigaki": {
            "name": "from_wakachigaki",
            "location": 30,
            "return": [
                "list[]"
            ],
            "arguments": {
                "wakachigaki": []
            }
        },
        "Word.from_sentence": {
            "name": "from_sentence",
            "location": 34,
            "return": [
                "typing.Generator[TagWord]",
                "typing.Generator[Word]"
            ],
            "arguments": {
                "klass": [],
                "sentence": [],
                "mecab": []
            }
        },
        "Word.from_str_of_singleword": {
            "name": "from_str_of_singleword",
            "location": 50,
            "return": [
                "TagWord",
                "Word"
            ],
            "arguments": {
                "arg": []
            }
        },
        "Word.to_str": {
            "name": "to_str",
            "location": 62,
            "return": [
                "str"
            ],
            "arguments": {
                "words": []
            }
        },
        "Word.__init__": {
            "name": "__init__",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "surface": [],
                "yomi": []
            }
        },
        "Word.__eq__": {
            "name": "__eq__",
            "location": 69,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Word.__hash__": {
            "name": "__hash__",
            "location": 78,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Word.__tuple__": {
            "name": "__tuple__",
            "location": 81,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Word.__str__": {
            "name": "__str__",
            "location": 84,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "Word.__repr__": {
            "name": "__repr__",
            "location": 87,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "TagWord.is_include": {
            "name": "is_include",
            "location": 95,
            "return": [
                "bool"
            ],
            "arguments": {
                "klass": [],
                "arg": []
            }
        },
        "TagWord.__init__": {
            "name": "__init__",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "arg": []
            }
        },
        "TagWord.__str__": {
            "name": "__str__",
            "location": 103,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AnalyzeMorp.__init__": {
            "name": "__init__",
            "location": 125,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mecab_node": []
            }
        },
        "AnalyzeMorp.is_symbol": {
            "name": "is_symbol",
            "location": 135,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "AnalyzeMorp.surface": {
            "name": "surface",
            "location": 144,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AnalyzeMorp.yomi": {
            "name": "yomi",
            "location": 162,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AnalyzeMorp._conv_kata": {
            "name": "_conv_kata",
            "location": 189,
            "return": [],
            "arguments": {
                "self": [],
                "str_": []
            }
        }
    },
    "sanascan_backend-master/sanascan_backend/__init__.py": {},
    "sanascan_backend-master/tests/test_estimator.py": {
        "TestEstimator.setUp": {
            "name": "setUp",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEstimator.test_estimate": {
            "name": "test_estimate",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEstimator.test_add_side_effect": {
            "name": "test_add_side_effect",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "msg": [
                    "typing.Text"
                ]
            }
        }
    },
    "sanascan_backend-master/tests/test_http.py": {
        "TestHTTP.setUp": {
            "name": "setUp",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestHTTP.test_http_estimate": {
            "name": "test_http_estimate",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "sanascan_backend-master/tests/test_key.py": {
        "TestKey.setUp": {
            "name": "setUp",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestKey.test_from_words": {
            "name": "test_from_words",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestKey.test_str": {
            "name": "test_str",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestKey.test_add": {
            "name": "test_add",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestKey.test_subsequence": {
            "name": "test_subsequence",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "sanascan_backend-master/tests/test_lang_model.py": {
        "TestLangModel.setUp": {
            "name": "setUp",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLangModel.test_score": {
            "name": "test_score",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "msg": [
                    "typing.Text"
                ]
            }
        },
        "TestLangModel.test_vocab": {
            "name": "test_vocab",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "msg": [
                    "typing.Text"
                ]
            }
        }
    },
    "sanascan_backend-master/tests/test_node.py": {
        "TestNode.setUp": {
            "name": "setUp",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestNode.test_init": {
            "name": "test_init",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "sanascan_backend-master/tests/test_vocablary.py": {
        "TestVocabulary.setUp": {
            "name": "setUp",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestVocabulary.test_have_num_tagword": {
            "name": "test_have_num_tagword",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestVocabulary.test_get_by_key": {
            "name": "test_get_by_key",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "sanascan_backend-master/tests/test_word.py": {
        "TestWord.test_from_str_of_singleword": {
            "name": "test_from_str_of_singleword",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "msg": [
                    "typing.Text"
                ]
            }
        },
        "TestWord.test_str": {
            "name": "test_str",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "msg": [
                    "typing.Text"
                ]
            }
        },
        "TestWord.test_static_to_str": {
            "name": "test_static_to_str",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "msg": [
                    "typing.Text"
                ]
            }
        },
        "TestWord.test_eq": {
            "name": "test_eq",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestWord.test_from_sentence": {
            "name": "test_from_sentence",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestWord.test_tag_word": {
            "name": "test_tag_word",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "sanascan_backend-master/tests/use_lang_model.py": {
        "UseLangModel.setUpClass": {
            "name": "setUpClass",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "klass": [
                    "typing.Type",
                    "float",
                    "list[int]",
                    "int"
                ]
            }
        }
    },
    "sanascan_backend-master/tests/__init__.py": {},
    "sanascan_backend-master/tmp/srilm.py": {
        "srilm": {
            "name": "srilm",
            "location": 5,
            "return": [
                "int",
                "typing.Counter",
                "str",
                "list[]"
            ],
            "arguments": {
                "wakati": [
                    "str"
                ],
                "order": [
                    "str",
                    "float",
                    "int",
                    "typing.Callable[, ]"
                ]
            }
        }
    }
}
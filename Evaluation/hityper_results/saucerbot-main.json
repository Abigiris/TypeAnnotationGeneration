{
    "saucerbot-main/gunicorn.conf.py": {
        "GunicornLogger.setup": {
            "name": "setup",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cfg": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ]
            }
        }
    },
    "saucerbot-main/locustfile.py": {
        "get_sample_message": {
            "name": "get_sample_message",
            "location": 20,
            "return": [
                "dict[typing.Text, typing.Union[list[],typing.Text,int]]"
            ],
            "arguments": {}
        },
        "SaucerbotTaskSet.groupme_message": {
            "name": "groupme_message",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "saucerbot-main/manage.py": {
        "main": {
            "name": "main",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "saucerbot-main/saucerbot/asgi.py": {},
    "saucerbot-main/saucerbot/logging.py": {
        "HighlightingFormatter.formatTime": {
            "name": "formatTime",
            "location": 13,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": [],
                "record": [
                    "float",
                    "int",
                    "str"
                ],
                "datefmt": [
                    "None",
                    "str",
                    "list[str]",
                    "int"
                ]
            }
        }
    },
    "saucerbot-main/saucerbot/urls.py": {},
    "saucerbot-main/saucerbot/wsgi.py": {},
    "saucerbot-main/saucerbot/__init__.py": {},
    "saucerbot-main/saucerbot/core/apps.py": {
        "CoreConfig.ready": {
            "name": "ready",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "saucerbot-main/saucerbot/core/authentication.py": {
        "SaucerbotUserAuthentication.get_user": {
            "name": "get_user",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "dict[str, typing.Any]",
                    "dict[str, str]"
                ]
            }
        },
        "SaucerbotUserAuthentication.authenticate": {
            "name": "authenticate",
            "location": 18,
            "return": [
                "None",
                "tuple[None]"
            ],
            "arguments": {
                "self": [],
                "request": []
            }
        }
    },
    "saucerbot-main/saucerbot/core/models.py": {
        "get_user_builder": {
            "name": "get_user_builder",
            "location": 57,
            "return": [],
            "arguments": {
                "model_class": [
                    "None",
                    "bool",
                    "typing.Callable[, ]",
                    "list[typing.Any]",
                    "typing.Sequence[str]"
                ],
                "session_key": [
                    "None",
                    "bool",
                    "typing.Callable[, ]",
                    "list[typing.Any]",
                    "typing.Sequence[str]"
                ]
            }
        },
        "BaseUser.username": {
            "name": "username",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseUser.get_username": {
            "name": "get_username",
            "location": 33,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BaseUser.groups": {
            "name": "groups",
            "location": 37,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BaseUser.user_permissions": {
            "name": "user_permissions",
            "location": 41,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BaseUser.is_anonymous": {
            "name": "is_anonymous",
            "location": 45,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseUser.is_authenticated": {
            "name": "is_authenticated",
            "location": 49,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "get_user_builder.get_user": {
            "name": "get_user",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "request": []
            }
        }
    },
    "saucerbot-main/saucerbot/core/routers.py": {
        "SaucerbotAPIRootView.get": {
            "name": "get",
            "location": 18,
            "return": [
                "Response"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "dict[str, str]",
                    "dict[, ]"
                ]
            }
        },
        "PathRouter.__init__": {
            "name": "__init__",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PathRouter.get_lookup_path": {
            "name": "get_lookup_path",
            "location": 96,
            "return": [
                "str"
            ],
            "arguments": {
                "viewset": [
                    "str",
                    "dict[str, typing.Any]",
                    "bool"
                ],
                "lookup_prefix": [
                    "typing.Text"
                ]
            }
        },
        "PathRouter.get_urls": {
            "name": "get_urls",
            "location": 119,
            "return": [
                "list[]",
                "str",
                "list[str]",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PathRouter.get_api_root_view": {
            "name": "get_api_root_view",
            "location": 170,
            "return": [],
            "arguments": {
                "self": [],
                "api_urls": [
                    "None",
                    "list[str]",
                    "str",
                    "bool"
                ]
            }
        },
        "SaucerbotAPIRootView.get.try_add": {
            "name": "try_add",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "_key": [],
                "_url_name": []
            }
        }
    },
    "saucerbot-main/saucerbot/core/serializers.py": {
        "HandlerSerializer.create": {
            "name": "create",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "validated_data": [
                    "bool",
                    "dict[, ]",
                    "str",
                    "dict[str, typing.Any]",
                    "list[str]",
                    "None",
                    "list[dict[, ]]"
                ]
            }
        },
        "HandlerSerializer.update": {
            "name": "update",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "instance": [
                    "bool",
                    "dict[, ]",
                    "str",
                    "typing.Any",
                    "None"
                ],
                "validated_data": [
                    "bool",
                    "dict[, ]",
                    "str",
                    "typing.Any",
                    "None"
                ]
            }
        },
        "HandlerRelatedField.__init__": {
            "name": "__init__",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "platform": [
                    "int",
                    "float"
                ]
            }
        },
        "HandlerRelatedField.get_queryset": {
            "name": "get_queryset",
            "location": 42,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HandlerRelatedField.to_internal_value": {
            "name": "to_internal_value",
            "location": 45,
            "return": [
                "dict[, ]",
                "dict[str, typing.Any]",
                "dict[typing.Any, tuple[typing.Union[str,str]]]"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict[, ]",
                    "bytes",
                    "str",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "HandlerRelatedField.to_representation": {
            "name": "to_representation",
            "location": 56,
            "return": [],
            "arguments": {
                "self": [],
                "value": [
                    "bool",
                    "list[str]",
                    "list[]",
                    "dict[, ]"
                ]
            }
        }
    },
    "saucerbot-main/saucerbot/core/urls.py": {},
    "saucerbot-main/saucerbot/core/views.py": {
        "HomeView.get_context_data": {
            "name": "get_context_data",
            "location": 22,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "saucerbot-main/saucerbot/core/__init__.py": {},
    "saucerbot-main/saucerbot/core/templatetags/saucerbot.py": {
        "_get_namespace": {
            "name": "_get_namespace",
            "location": 14,
            "return": [
                "typing.Text",
                "None"
            ],
            "arguments": {
                "request": [
                    "str",
                    "int"
                ]
            }
        },
        "optional_login": {
            "name": "optional_login",
            "location": 24,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "request": []
            }
        },
        "optional_logout": {
            "name": "optional_logout",
            "location": 45,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "request": [],
                "user": [
                    "dict[str, typing.Any]"
                ]
            }
        }
    },
    "saucerbot-main/saucerbot/core/templatetags/__init__.py": {},
    "saucerbot-main/saucerbot/discord/admin.py": {},
    "saucerbot-main/saucerbot/discord/apps.py": {},
    "saucerbot-main/saucerbot/discord/authentication.py": {
        "DiscordUserAuthentication.get_user": {
            "name": "get_user",
            "location": 10,
            "return": [],
            "arguments": {
                "self": [],
                "request": []
            }
        }
    },
    "saucerbot-main/saucerbot/discord/client.py": {
        "make_async": {
            "name": "make_async",
            "location": 23,
            "return": [],
            "arguments": {
                "func": []
            }
        },
        "make_async.wrapper": {
            "name": "wrapper",
            "location": 30,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SaucerbotClient.__init__": {
            "name": "__init__",
            "location": 39,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SaucerbotClient.lookup_guild": {
            "name": "lookup_guild",
            "location": 47,
            "return": [],
            "arguments": {
                "self": [],
                "guild": []
            }
        },
        "SaucerbotClient.lookup_channel": {
            "name": "lookup_channel",
            "location": 57,
            "return": [],
            "arguments": {
                "self": [],
                "guild": [],
                "channel": []
            }
        },
        "SaucerbotClient.get_whoami_responses": {
            "name": "get_whoami_responses",
            "location": 90,
            "return": [],
            "arguments": {
                "self": [],
                "guild_id": [],
                "user_id": []
            }
        },
        "SaucerbotClient.store_display_name": {
            "name": "store_display_name",
            "location": 157,
            "return": [],
            "arguments": {
                "self": [],
                "member": []
            }
        }
    },
    "saucerbot-main/saucerbot/discord/main.py": {
        "main": {
            "name": "main",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "run": {
            "name": "run",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "create_commands": {
            "name": "create_commands",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "guild_id": [
                    "str"
                ]
            }
        }
    },
    "saucerbot-main/saucerbot/discord/models.py": {
        "_sending_done_callback": {
            "name": "_sending_done_callback",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "fut": []
            }
        },
        "new_user": {
            "name": "new_user",
            "location": 137,
            "return": [
                "None"
            ],
            "arguments": {
                "request": [
                    "int",
                    "set[int]",
                    "str"
                ],
                "access_token": [
                    "bool",
                    "None",
                    "str",
                    "dict[str, typing.Any]",
                    "dict[str, int]"
                ],
                "token_type": [
                    "bool",
                    "None",
                    "str",
                    "dict[str, typing.Any]",
                    "dict[str, int]"
                ],
                "refresh_token": [
                    "dict[str, list[str]]",
                    "tuple[]",
                    "bool",
                    "str"
                ],
                "expires_in": [
                    "dict[str, list[str]]",
                    "tuple[]",
                    "bool",
                    "str"
                ]
            }
        },
        "DiscordBotContext.__init__": {
            "name": "__init__",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "loop": [
                    "int",
                    "float"
                ],
                "messageable": [
                    "int",
                    "float"
                ]
            }
        },
        "DiscordBotContext.post": {
            "name": "post",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "str",
                    "bytes",
                    "typing.Callable[, ]",
                    "bool"
                ]
            }
        },
        "DiscordMessage.__init__": {
            "name": "__init__",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "discord_message": [
                    "int",
                    "float"
                ]
            }
        },
        "DiscordMessage.author": {
            "name": "author",
            "location": 52,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DiscordMessage.user_id": {
            "name": "user_id",
            "location": 56,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "DiscordMessage.user_name": {
            "name": "user_name",
            "location": 60,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DiscordMessage.content": {
            "name": "content",
            "location": 64,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DiscordMessage.created_at": {
            "name": "created_at",
            "location": 68,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "User.__init__": {
            "name": "__init__",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "User.__str__": {
            "name": "__str__",
            "location": 83,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "User._check_expired": {
            "name": "_check_expired",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "User.user_info": {
            "name": "user_info",
            "location": 107,
            "return": [
                "str",
                "list[None]",
                "set[str]",
                "dict[str, typing.Any]",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "User.username": {
            "name": "username",
            "location": 114,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Channel.add_defaults": {
            "name": "add_defaults",
            "location": 182,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Handler.__str__": {
            "name": "__str__",
            "location": 195,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "Handler.__repr__": {
            "name": "__repr__",
            "location": 198,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "HistoricalDisplayName.__str__": {
            "name": "__str__",
            "location": 213,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "HistoricalDisplayName.__repr__": {
            "name": "__repr__",
            "location": 216,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "saucerbot-main/saucerbot/discord/overrides.py": {
        "ConnectionStateWithInteractions.parse_interaction_create": {
            "name": "parse_interaction_create",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict[, ]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "Interaction.__init__": {
            "name": "__init__",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HTTPClientWithInteractions.respond_interaction": {
            "name": "respond_interaction",
            "location": 49,
            "return": [],
            "arguments": {
                "self": [],
                "interaction_id": [
                    "str",
                    "dict[, ]",
                    "bytes"
                ],
                "interaction_token": [
                    "str",
                    "dict[, ]",
                    "bytes"
                ],
                "content": [
                    "str",
                    "bytes",
                    "typing.Callable[, ]"
                ]
            }
        },
        "HTTPClientWithInteractions.follow_up_interaction": {
            "name": "follow_up_interaction",
            "location": 70,
            "return": [],
            "arguments": {
                "self": [],
                "interaction_token": [],
                "content": [
                    "str",
                    "bytes",
                    "float",
                    "None",
                    "typing.Callable[dict[, ], None]"
                ]
            }
        },
        "ClientWithInteractions.__init__": {
            "name": "__init__",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ClientWithInteractions._get_state": {
            "name": "_get_state",
            "location": 103,
            "return": [
                "ConnectionStateWithInteractions"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "saucerbot-main/saucerbot/discord/permissions.py": {
        "HasDiscordUser.has_permission": {
            "name": "has_permission",
            "location": 15,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "request": [],
                "view": [
                    "None"
                ]
            }
        }
    },
    "saucerbot-main/saucerbot/discord/serializers.py": {
        "ChannelHyperlinkedIdentityField.get_url": {
            "name": "get_url",
            "location": 18,
            "return": [],
            "arguments": {
                "self": [],
                "obj": [
                    "str",
                    "int",
                    "typing.Callable[typing.Any, bool]"
                ],
                "view_name": [
                    "str",
                    "dict[str, str]",
                    "None"
                ],
                "request": [
                    "str",
                    "dict[str, str]",
                    "None"
                ],
                "format": [
                    "str",
                    "dict[str, str]",
                    "None"
                ]
            }
        },
        "ChannelHyperlinkedIdentityField.get_object": {
            "name": "get_object",
            "location": 29,
            "return": [],
            "arguments": {
                "self": [],
                "view_name": [
                    "bool",
                    "None",
                    "list[str]",
                    "str"
                ],
                "view_args": [
                    "bool",
                    "None",
                    "list[str]",
                    "str"
                ],
                "view_kwargs": [
                    "str"
                ]
            }
        },
        "ChannelSerializer.update": {
            "name": "update",
            "location": 67,
            "return": [
                "dict[str, typing.Union[int,str]]"
            ],
            "arguments": {
                "self": [],
                "instance": [
                    "dict[str, typing.Union[int,str]]",
                    "dict[, ]",
                    "str"
                ],
                "validated_data": [
                    "dict[str, typing.Any]",
                    "dict[, ]",
                    "dict[str, typing.Union[int,str]]"
                ]
            }
        }
    },
    "saucerbot-main/saucerbot/discord/urls.py": {},
    "saucerbot-main/saucerbot/discord/utils.py": {
        "get_redirect_uri": {
            "name": "get_redirect_uri",
            "location": 12,
            "return": [
                "typing.Text"
            ],
            "arguments": {}
        },
        "_token_request": {
            "name": "_token_request",
            "location": 16,
            "return": [],
            "arguments": {}
        },
        "exchange_code": {
            "name": "exchange_code",
            "location": 27,
            "return": [],
            "arguments": {
                "code": [
                    "str",
                    "dict[, ]",
                    "None",
                    "bytes"
                ]
            }
        },
        "get_new_token": {
            "name": "get_new_token",
            "location": 35,
            "return": [],
            "arguments": {
                "refresh_token": [
                    "str",
                    "tuple[]"
                ]
            }
        }
    },
    "saucerbot-main/saucerbot/discord/views.py": {
        "LoginRedirectView.get_redirect_url": {
            "name": "get_redirect_url",
            "location": 28,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "OAuthView.get": {
            "name": "get",
            "location": 49,
            "return": [],
            "arguments": {
                "self": [],
                "request": []
            }
        },
        "GuildViewSet.get_queryset": {
            "name": "get_queryset",
            "location": 83,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ChannelViewSet.get_queryset": {
            "name": "get_queryset",
            "location": 96,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "saucerbot-main/saucerbot/discord/__init__.py": {},
    "saucerbot-main/saucerbot/discord/__main__.py": {},
    "saucerbot-main/saucerbot/discord/migrations/0001_initial_tables.py": {},
    "saucerbot-main/saucerbot/discord/migrations/0002_rename_nickname.py": {},
    "saucerbot-main/saucerbot/discord/migrations/0003_add_slugs.py": {
        "set_slugs": {
            "name": "set_slugs",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "apps": [],
                "schema_editor": [
                    "str",
                    "typing.Protocol"
                ]
            }
        }
    },
    "saucerbot-main/saucerbot/discord/migrations/0004_remove_slugs.py": {},
    "saucerbot-main/saucerbot/discord/migrations/0005_big_auto_field.py": {},
    "saucerbot-main/saucerbot/discord/migrations/__init__.py": {},
    "saucerbot-main/saucerbot/groupme/admin.py": {},
    "saucerbot-main/saucerbot/groupme/apps.py": {},
    "saucerbot-main/saucerbot/groupme/authentication.py": {
        "GroupMeUserAuthentication.get_user": {
            "name": "get_user",
            "location": 10,
            "return": [],
            "arguments": {
                "self": [],
                "request": []
            }
        }
    },
    "saucerbot-main/saucerbot/groupme/handlers.py": {
        "nickname_entry": {
            "name": "nickname_entry",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "bot": [
                    "int"
                ],
                "nickname": [
                    "str",
                    "float",
                    "None",
                    "int"
                ],
                "timestamp": [
                    "int"
                ]
            }
        },
        "system_messages": {
            "name": "system_messages",
            "location": 68,
            "return": [
                "bool"
            ],
            "arguments": {
                "context": [],
                "gmessage": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ]
            }
        },
        "whoami": {
            "name": "whoami",
            "location": 113,
            "return": [
                "None"
            ],
            "arguments": {
                "context": [],
                "message": [
                    "float",
                    "str",
                    "None",
                    "int"
                ]
            }
        },
        "mars": {
            "name": "mars",
            "location": 141,
            "return": [
                "bool"
            ],
            "arguments": {
                "context": [
                    "str"
                ],
                "gmessage": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ],
                "chances": [
                    "float"
                ]
            }
        },
        "save_saucer_id": {
            "name": "save_saucer_id",
            "location": 164,
            "return": [
                "None"
            ],
            "arguments": {
                "context": [],
                "message": [
                    "str",
                    "int"
                ],
                "match": []
            }
        }
    },
    "saucerbot-main/saucerbot/groupme/models.py": {
        "get_gmi": {
            "name": "get_gmi",
            "location": 32,
            "return": [
                "GMI"
            ],
            "arguments": {
                "access_token": [
                    "str",
                    "list[dict[, ]]",
                    "dict[, ]",
                    "int"
                ]
            }
        },
        "new_user": {
            "name": "new_user",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {
                "request": [
                    "str",
                    "None",
                    "dict[, ]"
                ],
                "access_token": [
                    "bool",
                    "set[str]"
                ]
            }
        },
        "_callback_url": {
            "name": "_callback_url",
            "location": 111,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "slug": [
                    "list[str]",
                    "int"
                ]
            }
        },
        "GroupMeBotContext.__init__": {
            "name": "__init__",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "bot": [
                    "int",
                    "float"
                ]
            }
        },
        "GroupMeBotContext.post": {
            "name": "post",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "typing.Type"
                ]
            }
        },
        "GroupMeMessage.__init__": {
            "name": "__init__",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "groupme_message": [
                    "int",
                    "float"
                ]
            }
        },
        "GroupMeMessage.user_id": {
            "name": "user_id",
            "location": 52,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GroupMeMessage.user_name": {
            "name": "user_name",
            "location": 56,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GroupMeMessage.content": {
            "name": "content",
            "location": 60,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GroupMeMessage.created_at": {
            "name": "created_at",
            "location": 64,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "User.__str__": {
            "name": "__str__",
            "location": 72,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "User.groupme_user": {
            "name": "groupme_user",
            "location": 76,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "User.username": {
            "name": "username",
            "location": 80,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "User.gmi": {
            "name": "gmi",
            "location": 84,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BotManager.create": {
            "name": "create",
            "location": 117,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Bot.__str__": {
            "name": "__str__",
            "location": 147,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "Bot.__repr__": {
            "name": "__repr__",
            "location": 150,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "Bot.bot": {
            "name": "bot",
            "location": 154,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Bot.group": {
            "name": "group",
            "location": 158,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Bot.post_message": {
            "name": "post_message",
            "location": 163,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "str",
                    "None",
                    "list[]",
                    "int"
                ]
            }
        },
        "Bot.handle_message": {
            "name": "handle_message",
            "location": 166,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "bool",
                    "dict[, ]"
                ]
            }
        },
        "Bot.update_bot": {
            "name": "update_bot",
            "location": 187,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "avatar_url": [
                    "str",
                    "list[str]"
                ]
            }
        },
        "Handler.__str__": {
            "name": "__str__",
            "location": 198,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "Handler.__repr__": {
            "name": "__repr__",
            "location": 201,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "SaucerUser.__str__": {
            "name": "__str__",
            "location": 209,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "SaucerUser.__repr__": {
            "name": "__repr__",
            "location": 212,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "SaucerUser.get_brews": {
            "name": "get_brews",
            "location": 215,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HistoricalNickname.__str__": {
            "name": "__str__",
            "location": 230,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "HistoricalNickname.__repr__": {
            "name": "__repr__",
            "location": 233,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "saucerbot-main/saucerbot/groupme/permissions.py": {
        "HasGroupMeUser.has_permission": {
            "name": "has_permission",
            "location": 15,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "request": [],
                "view": [
                    "None"
                ]
            }
        }
    },
    "saucerbot-main/saucerbot/groupme/serializers.py": {
        "GroupRelatedField.get_queryset": {
            "name": "get_queryset",
            "location": 17,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GroupRelatedField.to_internal_value": {
            "name": "to_internal_value",
            "location": 21,
            "return": [],
            "arguments": {
                "self": [],
                "data": [
                    "dict[, ]",
                    "dict[str, typing.Any]",
                    "str"
                ]
            }
        },
        "GroupRelatedField.to_representation": {
            "name": "to_representation",
            "location": 29,
            "return": [],
            "arguments": {
                "self": [],
                "value": [
                    "typing.Sequence[T]",
                    "None",
                    "int",
                    "str"
                ]
            }
        },
        "BotSerializer.create": {
            "name": "create",
            "location": 53,
            "return": [
                "str",
                "list[]",
                "tuple[typing.Union[typing.Literal,typing.Literal]]",
                "dict[, ]"
            ],
            "arguments": {
                "self": [],
                "validated_data": [
                    "dict[str, typing.Any]",
                    "dict[, ]"
                ]
            }
        },
        "BotSerializer.validate_group": {
            "name": "validate_group",
            "location": 67,
            "return": [
                "str",
                "int",
                "float"
            ],
            "arguments": {
                "self": [],
                "group": [
                    "str",
                    "int",
                    "float"
                ]
            }
        },
        "BotSerializer.update": {
            "name": "update",
            "location": 77,
            "return": [],
            "arguments": {
                "self": [],
                "instance": [
                    "dict[str, typing.Union[int,str]]",
                    "dict[, ]",
                    "str"
                ],
                "validated_data": [
                    "dict[, ]",
                    "dict[str, typing.Any]"
                ]
            }
        }
    },
    "saucerbot-main/saucerbot/groupme/urls.py": {},
    "saucerbot-main/saucerbot/groupme/views.py": {
        "LoginRedirectView.get_redirect_url": {
            "name": "get_redirect_url",
            "location": 30,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "OAuthView.get": {
            "name": "get",
            "location": 43,
            "return": [],
            "arguments": {
                "self": [],
                "request": []
            }
        },
        "BotViewSet.get_queryset": {
            "name": "get_queryset",
            "location": 60,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BotViewSet.perform_create": {
            "name": "perform_create",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "serializer": [
                    "str",
                    "dict[, ]"
                ]
            }
        },
        "BotViewSet.perform_destroy": {
            "name": "perform_destroy",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "instance": []
            }
        },
        "BotActionsViewSet.parse_as_message": {
            "name": "parse_as_message",
            "location": 84,
            "return": [],
            "arguments": {
                "self": [],
                "bot": [
                    "bytes",
                    "str"
                ]
            }
        },
        "BotActionsViewSet.callback": {
            "name": "callback",
            "location": 96,
            "return": [
                "Response"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "bool"
                ]
            }
        },
        "BotActionsViewSet.dores_win": {
            "name": "dores_win",
            "location": 110,
            "return": [
                "Response"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "str"
                ]
            }
        }
    },
    "saucerbot-main/saucerbot/groupme/__init__.py": {},
    "saucerbot-main/saucerbot/groupme/management/__init__.py": {},
    "saucerbot-main/saucerbot/groupme/management/commands/loadbrews.py": {
        "Command.handle": {
            "name": "handle",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "saucerbot-main/saucerbot/groupme/management/commands/loadnicknames.py": {
        "Command.handle": {
            "name": "handle",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "saucerbot-main/saucerbot/groupme/management/commands/messagestats.py": {
        "Command.add_arguments": {
            "name": "add_arguments",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parser": []
            }
        },
        "Command.handle": {
            "name": "handle",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "saucerbot-main/saucerbot/groupme/management/commands/remind.py": {
        "Command.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Command.add_arguments": {
            "name": "add_arguments",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parser": []
            }
        },
        "Command.bot": {
            "name": "bot",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Command.handle": {
            "name": "handle",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Command.like_if": {
            "name": "like_if",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Command.whos_coming": {
            "name": "whos_coming",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Command.whos_coming_message": {
            "name": "whos_coming_message",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "num_likes": []
            }
        },
        "Command.save_seats_message": {
            "name": "save_seats_message",
            "location": 103,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": []
            }
        }
    },
    "saucerbot-main/saucerbot/groupme/management/commands/__init__.py": {},
    "saucerbot-main/saucerbot/groupme/migrations/0001_initial_tables.py": {},
    "saucerbot-main/saucerbot/groupme/migrations/0002_optimize_indices.py": {},
    "saucerbot-main/saucerbot/groupme/migrations/0003_nickname_fix.py": {},
    "saucerbot-main/saucerbot/groupme/migrations/0004_big_auto_field.py": {},
    "saucerbot-main/saucerbot/groupme/migrations/__init__.py": {},
    "saucerbot-main/saucerbot/groupme/utils/barely.py": {
        "get_er_words": {
            "name": "get_er_words",
            "location": 41,
            "return": [
                "set[]"
            ],
            "arguments": {}
        },
        "i_barely_know_her": {
            "name": "i_barely_know_her",
            "location": 50,
            "return": [
                "bool"
            ],
            "arguments": {
                "context": [],
                "message": []
            }
        },
        "get_quip": {
            "name": "get_quip",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "message": []
            }
        }
    },
    "saucerbot-main/saucerbot/groupme/utils/janet.py": {
        "unwrap_flickr_response": {
            "name": "unwrap_flickr_response",
            "location": 28,
            "return": [
                "str"
            ],
            "arguments": {
                "text": [
                    "str"
                ]
            }
        },
        "search_flickr": {
            "name": "search_flickr",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "terms": [
                    "str",
                    "None"
                ]
            }
        },
        "select_url": {
            "name": "select_url",
            "location": 53,
            "return": [],
            "arguments": {
                "photos": [
                    "str"
                ]
            }
        },
        "get_stop_words": {
            "name": "get_stop_words",
            "location": 58,
            "return": [
                "list[]"
            ],
            "arguments": {}
        },
        "select_terms_from_message": {
            "name": "select_terms_from_message",
            "location": 67,
            "return": [
                "list[]"
            ],
            "arguments": {
                "message": [
                    "str"
                ]
            }
        },
        "add_to_groupme_img_service": {
            "name": "add_to_groupme_img_service",
            "location": 77,
            "return": [],
            "arguments": {
                "bot": [
                    "memoryview",
                    "typing.Sequence[int]"
                ],
                "image_url": [
                    "str",
                    "dict[, ]",
                    "None",
                    "bytes",
                    "typing.MutableMapping"
                ]
            }
        },
        "create_message": {
            "name": "create_message",
            "location": 82,
            "return": [],
            "arguments": {
                "url": [
                    "str",
                    "bool",
                    "None"
                ]
            }
        }
    },
    "saucerbot-main/saucerbot/groupme/utils/__init__.py": {},
    "saucerbot-main/saucerbot/handlers/general.py": {
        "you_suck_too_coach": {
            "name": "you_suck_too_coach",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "context": []
            }
        },
        "catfacts": {
            "name": "catfacts",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "context": []
            }
        },
        "lit": {
            "name": "lit",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "context": []
            }
        },
        "dont_at_me": {
            "name": "dont_at_me",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "context": []
            }
        },
        "sneaky": {
            "name": "sneaky",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "context": []
            }
        },
        "ask_janet": {
            "name": "ask_janet",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "context": [],
                "message": []
            }
        },
        "handle_barely_know_her": {
            "name": "handle_barely_know_her",
            "location": 83,
            "return": [],
            "arguments": {
                "context": [],
                "message": []
            }
        },
        "teenage_saucerbot": {
            "name": "teenage_saucerbot",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {
                "context": []
            }
        },
        "too_early_for_thai": {
            "name": "too_early_for_thai",
            "location": 99,
            "return": [
                "bool"
            ],
            "arguments": {
                "context": [],
                "message": []
            }
        }
    },
    "saucerbot-main/saucerbot/handlers/saucer.py": {
        "user_named_saucerbot": {
            "name": "user_named_saucerbot",
            "location": 30,
            "return": [
                "bool"
            ],
            "arguments": {
                "context": [],
                "message": [
                    "str",
                    "typing.Mapping",
                    "int"
                ],
                "force_random": [
                    "bool"
                ]
            }
        },
        "search_brews": {
            "name": "search_brews",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "context": [
                    "bool",
                    "list[str]",
                    "str",
                    "dict[str, int]"
                ],
                "match": [
                    "str",
                    "int"
                ]
            }
        },
        "new_arrivals": {
            "name": "new_arrivals",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "context": [
                    "str",
                    "list[str]",
                    "None",
                    "typing.Sequence[str]"
                ],
                "match": []
            }
        },
        "pizza": {
            "name": "pizza",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "context": []
            }
        },
        "like_if": {
            "name": "like_if",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {
                "context": []
            }
        },
        "zo_is_dead": {
            "name": "zo_is_dead",
            "location": 99,
            "return": [
                "None"
            ],
            "arguments": {
                "context": []
            }
        },
        "troll": {
            "name": "troll",
            "location": 107,
            "return": [
                "None"
            ],
            "arguments": {
                "context": []
            }
        },
        "get_member": {
            "name": "get_member",
            "location": 122,
            "return": [
                "RefAttach",
                "None"
            ],
            "arguments": {
                "bot": [
                    "str"
                ],
                "member_id": [
                    "str",
                    "int"
                ]
            }
        },
        "plate_party": {
            "name": "plate_party",
            "location": 139,
            "return": [
                "None"
            ],
            "arguments": {
                "context": [
                    "int",
                    "dict[, ]"
                ]
            }
        }
    },
    "saucerbot-main/saucerbot/handlers/vandy.py": {
        "go_dores": {
            "name": "go_dores",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "context": []
            }
        },
        "anchor_down": {
            "name": "anchor_down",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "context": []
            }
        },
        "black": {
            "name": "black",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "context": []
            }
        },
        "gold": {
            "name": "gold",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "context": []
            }
        },
        "dores_win": {
            "name": "dores_win",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "context": []
            }
        }
    },
    "saucerbot-main/saucerbot/handlers/__init__.py": {
        "BotContext.post": {
            "name": "post",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "dict[, ]",
                    "bool"
                ]
            }
        },
        "Message.user_id": {
            "name": "user_id",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Message.user_name": {
            "name": "user_name",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Message.content": {
            "name": "content",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Message.created_at": {
            "name": "created_at",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Handler.description": {
            "name": "description",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Handler.__str__": {
            "name": "__str__",
            "location": 63,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Handler.handle_regexes": {
            "name": "handle_regexes",
            "location": 69,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "typing.Iterable[typing.Any]"
                ],
                "message": [
                    "str",
                    "dict[str, typing.Any]",
                    "bytes",
                    "float",
                    "None",
                    "typing.Mapping"
                ],
                "regexes": [
                    "str"
                ]
            }
        },
        "Handler.run": {
            "name": "run",
            "location": 94,
            "return": [],
            "arguments": {
                "self": [],
                "context": [],
                "message": []
            }
        },
        "HandlerRegistry.__init__": {
            "name": "__init__",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "handlers": [
                    "None",
                    "int",
                    "typing.Iterable[typing.Any]"
                ],
                "loaded_modules": [
                    "None",
                    "set[str]",
                    "str",
                    "bool",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "HandlerRegistry.__getitem__": {
            "name": "__getitem__",
            "location": 111,
            "return": [],
            "arguments": {
                "self": [],
                "item": [
                    "list[str]"
                ]
            }
        },
        "HandlerRegistry.__len__": {
            "name": "__len__",
            "location": 114,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "HandlerRegistry.__contains__": {
            "name": "__contains__",
            "location": 117,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "str",
                    "list[float]",
                    "bool"
                ]
            }
        },
        "HandlerRegistry.__iter__": {
            "name": "__iter__",
            "location": 120,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HandlerRegistry.__reversed__": {
            "name": "__reversed__",
            "location": 123,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HandlerRegistry.initialize": {
            "name": "initialize",
            "location": 128,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "handler_modules": [
                    "str"
                ]
            }
        },
        "HandlerRegistry.filter": {
            "name": "filter",
            "location": 154,
            "return": [
                "HandlerRegistry"
            ],
            "arguments": {
                "self": [],
                "platform": [
                    "str",
                    "int"
                ]
            }
        },
        "HandlerRegistry.get": {
            "name": "get",
            "location": 159,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HandlerRegistry.handler": {
            "name": "handler",
            "location": 172,
            "return": [],
            "arguments": {
                "self": [],
                "regex": [
                    "None",
                    "bool",
                    "str",
                    "list[str]"
                ]
            }
        },
        "HandlerRegistry.handle_message": {
            "name": "handle_message",
            "location": 217,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": [],
                "platform": [
                    "str"
                ],
                "handler_names": [
                    "str"
                ],
                "context": [
                    "str",
                    "bool",
                    "None"
                ],
                "message": [
                    "str",
                    "bool",
                    "None"
                ]
            }
        },
        "HandlerRegistry.handler.wrapper": {
            "name": "wrapper",
            "location": 197,
            "return": [],
            "arguments": {
                "func": []
            }
        }
    },
    "saucerbot-main/saucerbot/settings/base.py": {},
    "saucerbot-main/saucerbot/settings/email.py": {},
    "saucerbot-main/saucerbot/settings/logging.py": {},
    "saucerbot-main/saucerbot/settings/__init__.py": {},
    "saucerbot-main/saucerbot/settings/environments/build.py": {},
    "saucerbot-main/saucerbot/settings/environments/development.py": {},
    "saucerbot-main/saucerbot/settings/environments/production.py": {},
    "saucerbot-main/saucerbot/settings/environments/staging.py": {},
    "saucerbot-main/saucerbot/settings/environments/test.py": {},
    "saucerbot-main/saucerbot/settings/environments/__init__.py": {},
    "saucerbot-main/saucerbot/utils/base.py": {
        "get_tasted_brews": {
            "name": "get_tasted_brews",
            "location": 279,
            "return": [],
            "arguments": {
                "saucer_id": [
                    "str"
                ]
            }
        },
        "get_insult": {
            "name": "get_insult",
            "location": 284,
            "return": [],
            "arguments": {}
        },
        "get_new_arrivals": {
            "name": "get_new_arrivals",
            "location": 290,
            "return": [
                "str",
                "typing.Text"
            ],
            "arguments": {
                "location": [
                    "str",
                    "None",
                    "int",
                    "typing.Callable[..., T]",
                    "list[]"
                ]
            }
        },
        "Brew.__post_init__": {
            "name": "__post_init__",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FixingJsonSerializer.loads": {
            "name": "loads",
            "location": 86,
            "return": [
                "list[dict[, ]]",
                "dict[, ]",
                "int",
                "dict[str, dict[str, typing.Any]]",
                "dict[typing.Any, typing.Union[dict[, ],typing.Any]]"
            ],
            "arguments": {
                "self": [],
                "s": [
                    "str"
                ]
            }
        },
        "BrewsLoaderUtil.__init__": {
            "name": "__init__",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BrewsLoaderUtil.expand_brew": {
            "name": "expand_brew",
            "location": 106,
            "return": [
                "tuple[typing.Union[dict[typing.Text, dict[typing.Text, ]],str,tuple[str],dict[str, str],dict[str, list[str]]]]"
            ],
            "arguments": {
                "self": [],
                "brew": [
                    "dict[, ]",
                    "dict[str, typing.Any]",
                    "dict[str, str]",
                    "str"
                ]
            }
        },
        "BrewsLoaderUtil.update_templates": {
            "name": "update_templates",
            "location": 115,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BrewsLoaderUtil.load_all_brews": {
            "name": "load_all_brews",
            "location": 132,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BrewsLoaderUtil.get_all_brews": {
            "name": "get_all_brews",
            "location": 145,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BrewsLoaderUtil.get_brews": {
            "name": "get_brews",
            "location": 151,
            "return": [
                "typing.Generator[Brew]"
            ],
            "arguments": {
                "session": [
                    "str",
                    "int",
                    "dict[, ]"
                ],
                "location": [
                    "str",
                    "int",
                    "None",
                    "Exception"
                ],
                "store_id": [
                    "str",
                    "int"
                ]
            }
        },
        "BrewsLoaderUtil.update_alias": {
            "name": "update_alias",
            "location": 167,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BrewsLoaderUtil.cleanup_old_indices": {
            "name": "cleanup_old_indices",
            "location": 199,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BrewsSearchUtil.__init__": {
            "name": "__init__",
            "location": 218,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BrewsSearchUtil.brew_info": {
            "name": "brew_info",
            "location": 224,
            "return": [],
            "arguments": {
                "self": [],
                "search_term": [
                    "str"
                ]
            }
        }
    },
    "saucerbot-main/saucerbot/utils/bridgestone.py": {
        "get_todays_events": {
            "name": "get_todays_events",
            "location": 43,
            "return": [],
            "arguments": {}
        },
        "get_events_for_date": {
            "name": "get_events_for_date",
            "location": 49,
            "return": [
                "list[typing.Union[dict[str, typing.Any],typing.Text]]"
            ],
            "arguments": {
                "events": [
                    "list[dict[str, typing.Any]]",
                    "str"
                ],
                "date": [
                    "str",
                    "int"
                ]
            }
        },
        "get_year": {
            "name": "get_year",
            "location": 58,
            "return": [],
            "arguments": {
                "month": [
                    "dict[, ]",
                    "str",
                    "float"
                ]
            }
        },
        "get_all_events": {
            "name": "get_all_events",
            "location": 68,
            "return": [
                "list[]"
            ],
            "arguments": {
                "provider": [
                    "typing.Callable[, ]",
                    "bool",
                    "str"
                ]
            }
        },
        "create_message": {
            "name": "create_message",
            "location": 87,
            "return": [],
            "arguments": {
                "event": []
            }
        },
        "get_event_time": {
            "name": "get_event_time",
            "location": 103,
            "return": [],
            "arguments": {
                "event": []
            }
        },
        "get_event_time_helper": {
            "name": "get_event_time_helper",
            "location": 108,
            "return": [
                "None"
            ],
            "arguments": {
                "provider": [
                    "str"
                ],
                "event_name": [
                    "str"
                ]
            }
        }
    },
    "saucerbot-main/saucerbot/utils/parsers.py": {
        "HtmlContentProvider.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str",
                    "list[str]"
                ]
            }
        },
        "HtmlContentProvider.get_content": {
            "name": "get_content",
            "location": 23,
            "return": [
                "str",
                "typing.Pattern",
                "BeautifulSoup"
            ],
            "arguments": {
                "self": []
            }
        },
        "Parser.__init__": {
            "name": "__init__",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "provider": [
                    "int",
                    "float"
                ]
            }
        },
        "Parser.parse": {
            "name": "parse",
            "location": 43,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Parser._handle_missing_field": {
            "name": "_handle_missing_field",
            "location": 52,
            "return": [
                "dict[typing.Text, typing.Text]",
                "typing.Text",
                "None"
            ],
            "arguments": {
                "self": [],
                "field": [
                    "str",
                    "typing.Type"
                ],
                "selector": [
                    "str"
                ]
            }
        },
        "Parser._process_row": {
            "name": "_process_row",
            "location": 66,
            "return": [
                "dict[typing.Text, ]"
            ],
            "arguments": {
                "self": [],
                "row": [],
                "field": [
                    "bool",
                    "str",
                    "typing.Callable[, ]"
                ],
                "selector": [
                    "str",
                    "int"
                ],
                "attribute": [
                    "None",
                    "dict[str, typing.Any]",
                    "dict[, ]",
                    "dict[str, dict[str, str]]",
                    "dict[str, str]",
                    "str"
                ]
            }
        },
        "Parser._do_initial_parse": {
            "name": "_do_initial_parse",
            "location": 92,
            "return": [
                "typing.Generator[dict[, ]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Parser.post_process": {
            "name": "post_process",
            "location": 106,
            "return": [
                "dict[str, typing.Any]",
                "list[str]",
                "list[]",
                "int"
            ],
            "arguments": {
                "self": [],
                "row": [
                    "dict[str, typing.Any]",
                    "list[str]",
                    "list[]",
                    "int"
                ]
            }
        },
        "NewArrivalsParser.post_process": {
            "name": "post_process",
            "location": 126,
            "return": [],
            "arguments": {
                "self": [],
                "row": []
            }
        },
        "NewArrivalsParser.create_new_arrivals_provider": {
            "name": "create_new_arrivals_provider",
            "location": 133,
            "return": [
                "HtmlContentProvider"
            ],
            "arguments": {}
        },
        "BridgestoneEventsParser.post_process": {
            "name": "post_process",
            "location": 144,
            "return": [
                "dict[typing.Text, None]"
            ],
            "arguments": {
                "self": [],
                "row": []
            }
        },
        "BridgestoneEventTimeParser.post_process": {
            "name": "post_process",
            "location": 168,
            "return": [],
            "arguments": {
                "self": [],
                "row": [
                    "list[int]",
                    "list[]"
                ]
            }
        },
        "BridgestoneEventTimeParser.create_event_time_provider": {
            "name": "create_event_time_provider",
            "location": 173,
            "return": [
                "HtmlContentProvider"
            ],
            "arguments": {
                "event": [
                    "str"
                ]
            }
        }
    },
    "saucerbot-main/saucerbot/utils/the_dores.py": {
        "get_football_results": {
            "name": "get_football_results",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "desired_date": []
            }
        },
        "__get_the_dores_game": {
            "name": "__get_the_dores_game",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "scores": []
            }
        },
        "__get_teams": {
            "name": "__get_teams",
            "location": 82,
            "return": [
                "tuple[typing.Union[int,dict[, ],list[int],list[list[int]],str]]"
            ],
            "arguments": {
                "game": [
                    "tuple[typing.Union[int,int]]"
                ]
            }
        },
        "__get_week": {
            "name": "__get_week",
            "location": 96,
            "return": [
                "int"
            ],
            "arguments": {
                "desired_date": [
                    "str"
                ]
            }
        },
        "did_the_dores_win": {
            "name": "did_the_dores_win",
            "location": 113,
            "return": [
                "None"
            ],
            "arguments": {
                "print_in_progress": [
                    "bool"
                ],
                "print_loss": [
                    "bool"
                ],
                "desired_date": [
                    "None",
                    "str"
                ]
            }
        }
    },
    "saucerbot-main/saucerbot/utils/__init__.py": {},
    "saucerbot-main/tests/conftest.py": {
        "gmi": {
            "name": "gmi",
            "location": 11,
            "return": [
                "GMI"
            ],
            "arguments": {
                "monkeypatch": []
            }
        },
        "setup_bot": {
            "name": "setup_bot",
            "location": 148,
            "return": [
                "list[]",
                "dict[, ]",
                "list[magic.models.deck.Deck]"
            ],
            "arguments": {
                "db": [
                    "bool"
                ],
                "gmi": [
                    "str"
                ],
                "monkeypatch": []
            }
        },
        "setup_discord_client": {
            "name": "setup_discord_client",
            "location": 171,
            "return": [
                "SaucerbotClient"
            ],
            "arguments": {
                "db": [
                    "typing.Callable[, ]",
                    "set[]",
                    "bool",
                    "None",
                    "list[str]",
                    "list[aw_core.models.Event]"
                ],
                "event_loop": []
            }
        },
        "gmi.TestUser.save": {
            "name": "save",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "gmi.TestUser.refresh": {
            "name": "refresh",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "gmi.TestGroup.__init__": {
            "name": "__init__",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "gmi.TestGroup.save": {
            "name": "save",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "gmi.TestGroup.delete": {
            "name": "delete",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "gmi.TestGroup.refresh": {
            "name": "refresh",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "gmi.TestGroup.add_member": {
            "name": "add_member",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "member": []
            }
        },
        "gmi.TestGroup.get_all": {
            "name": "get_all",
            "location": 51,
            "return": [],
            "arguments": {
                "gmi": []
            }
        },
        "gmi.TestGroup.get": {
            "name": "get",
            "location": 55,
            "return": [],
            "arguments": {
                "gmi": [],
                "group_id": []
            }
        },
        "gmi.TestGroupMessageManager.count": {
            "name": "count",
            "location": 60,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "gmi.TestGroupMessageManager.all": {
            "name": "all",
            "location": 63,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "gmi.TestGroupMessageManager.recent": {
            "name": "recent",
            "location": 66,
            "return": [],
            "arguments": {
                "self": [],
                "count": [
                    "int"
                ]
            }
        },
        "gmi.TestGroupMessageManager.before": {
            "name": "before",
            "location": 69,
            "return": [],
            "arguments": {
                "self": [],
                "message": [],
                "count": [
                    "int"
                ]
            }
        },
        "gmi.TestGroupMessageManager.since": {
            "name": "since",
            "location": 74,
            "return": [],
            "arguments": {
                "self": [],
                "message": [],
                "count": [
                    "int"
                ]
            }
        },
        "gmi.TestMessage.save": {
            "name": "save",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "gmi.TestMessage.refresh": {
            "name": "refresh",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "gmi.TestMessage.like": {
            "name": "like",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "gmi.TestMessage.like_as": {
            "name": "like_as",
            "location": 99,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "user_id": []
            }
        },
        "gmi.TestMessage.from_json": {
            "name": "from_json",
            "location": 105,
            "return": [],
            "arguments": {
                "cls": [],
                "gmi": [],
                "json_dict": []
            }
        },
        "gmi.TestBot.save": {
            "name": "save",
            "location": 109,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "gmi.TestBot.delete": {
            "name": "delete",
            "location": 115,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "gmi.TestBot.post": {
            "name": "post",
            "location": 119,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "text": []
            }
        },
        "gmi.TestBot.get_all": {
            "name": "get_all",
            "location": 131,
            "return": [],
            "arguments": {
                "gmi": []
            }
        }
    },
    "saucerbot-main/tests/test_brews.py": {
        "es_assertions": {
            "name": "es_assertions",
            "location": 17,
            "return": [],
            "arguments": {
                "es": [
                    "dict[, ]"
                ]
            }
        },
        "test_loadbrews": {
            "name": "test_loadbrews",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_cleanup_old": {
            "name": "test_cleanup_old",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_load_command": {
            "name": "test_load_command",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_searchbrews": {
            "name": "test_searchbrews",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "saucerbot-main/tests/test_commands.py": {
        "test_like_if": {
            "name": "test_like_if",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "bot": [
                    "int",
                    "str",
                    "dict[str, typing.Any]",
                    "typing.Sequence[int]"
                ]
            }
        },
        "test_whos_coming": {
            "name": "test_whos_coming",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "bot": [
                    "str"
                ],
                "gmi": [
                    "str"
                ]
            }
        },
        "test_whos_coming_no_users": {
            "name": "test_whos_coming_no_users",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "bot": [
                    "str"
                ]
            }
        },
        "test_whos_coming_single_user": {
            "name": "test_whos_coming_single_user",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "bot": [
                    "int"
                ],
                "gmi": [
                    "str"
                ]
            }
        },
        "test_whos_coming_missing_users": {
            "name": "test_whos_coming_missing_users",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {
                "bot": [
                    "str",
                    "list[]"
                ]
            }
        }
    },
    "saucerbot-main/tests/test_discord_client.py": {
        "test_whoami.create_data": {
            "name": "create_data",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_whoami.delete_data": {
            "name": "delete_data",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_whoami_long.create_data": {
            "name": "create_data",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_whoami_long.delete_data": {
            "name": "delete_data",
            "location": 109,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "saucerbot-main/tests/test_handlers.py": {
        "get_sample_message": {
            "name": "get_sample_message",
            "location": 16,
            "return": [
                "dict[typing.Text, typing.Union[None,list[],typing.Text,int]]"
            ],
            "arguments": {
                "bot": [],
                "text": [],
                "attachments": [
                    "None"
                ],
                "system": [
                    "bool"
                ],
                "name": [
                    "typing.Text"
                ],
                "timestamp": [
                    "None"
                ]
            }
        },
        "test_mars": {
            "name": "test_mars",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "bot": [],
                "gmi": []
            }
        },
        "test_mars_no_message": {
            "name": "test_mars_no_message",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "bot": [],
                "gmi": []
            }
        },
        "test_zo_unregistered": {
            "name": "test_zo_unregistered",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "bot": [],
                "client": []
            }
        },
        "test_zo_zo": {
            "name": "test_zo_zo",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "bot": [],
                "client": []
            }
        },
        "test_zo_bot": {
            "name": "test_zo_bot",
            "location": 107,
            "return": [
                "None"
            ],
            "arguments": {
                "bot": [],
                "client": []
            }
        },
        "test_zo_bot_bad": {
            "name": "test_zo_bot_bad",
            "location": 124,
            "return": [
                "None"
            ],
            "arguments": {
                "bot": [],
                "client": []
            }
        },
        "test_system_messages_unregistered": {
            "name": "test_system_messages_unregistered",
            "location": 140,
            "return": [
                "None"
            ],
            "arguments": {
                "bot": [],
                "client": []
            }
        },
        "test_name_change": {
            "name": "test_name_change",
            "location": 155,
            "return": [
                "None"
            ],
            "arguments": {
                "bot": [],
                "client": []
            }
        },
        "test_user_add": {
            "name": "test_user_add",
            "location": 172,
            "return": [
                "None"
            ],
            "arguments": {
                "bot": [],
                "client": []
            }
        },
        "test_user_remove": {
            "name": "test_user_remove",
            "location": 191,
            "return": [
                "None"
            ],
            "arguments": {
                "bot": [],
                "client": []
            }
        },
        "test_bogus_system": {
            "name": "test_bogus_system",
            "location": 210,
            "return": [
                "None"
            ],
            "arguments": {
                "bot": [],
                "client": []
            }
        },
        "test_non_system": {
            "name": "test_non_system",
            "location": 226,
            "return": [
                "None"
            ],
            "arguments": {
                "bot": [],
                "client": []
            }
        },
        "test_saucerbot_user_not": {
            "name": "test_saucerbot_user_not",
            "location": 244,
            "return": [
                "None"
            ],
            "arguments": {
                "bot": [],
                "gmi": []
            }
        },
        "test_saucerbot_user": {
            "name": "test_saucerbot_user",
            "location": 260,
            "return": [
                "None"
            ],
            "arguments": {
                "bot": [],
                "gmi": []
            }
        },
        "test_saucerbot_user_random": {
            "name": "test_saucerbot_user_random",
            "location": 276,
            "return": [
                "None"
            ],
            "arguments": {
                "bot": [],
                "gmi": []
            }
        },
        "test_save_id_unregistered": {
            "name": "test_save_id_unregistered",
            "location": 292,
            "return": [
                "None"
            ],
            "arguments": {
                "bot": [],
                "client": [],
                "monkeypatch": []
            }
        },
        "test_save_id_invalid": {
            "name": "test_save_id_invalid",
            "location": 311,
            "return": [
                "None"
            ],
            "arguments": {
                "bot": [],
                "client": [],
                "monkeypatch": []
            }
        },
        "test_save_id_valid": {
            "name": "test_save_id_valid",
            "location": 335,
            "return": [
                "None"
            ],
            "arguments": {
                "bot": [],
                "client": [],
                "monkeypatch": []
            }
        },
        "test_save_id_69": {
            "name": "test_save_id_69",
            "location": 359,
            "return": [
                "None"
            ],
            "arguments": {
                "bot": [],
                "client": [],
                "monkeypatch": []
            }
        },
        "test_troll_missing": {
            "name": "test_troll_missing",
            "location": 386,
            "return": [
                "None"
            ],
            "arguments": {
                "bot": [],
                "client": []
            }
        },
        "test_troll_present": {
            "name": "test_troll_present",
            "location": 407,
            "return": [
                "None"
            ],
            "arguments": {
                "bot": [],
                "gmi": [],
                "client": []
            }
        },
        "test_whoami": {
            "name": "test_whoami",
            "location": 438,
            "return": [
                "None"
            ],
            "arguments": {
                "bot": [],
                "gmi": []
            }
        },
        "test_whoami_long": {
            "name": "test_whoami_long",
            "location": 472,
            "return": [
                "None"
            ],
            "arguments": {
                "bot": [],
                "gmi": []
            }
        },
        "test_plate_party": {
            "name": "test_plate_party",
            "location": 531,
            "return": [
                "None"
            ],
            "arguments": {
                "bot": [],
                "gmi": [],
                "client": []
            }
        },
        "test_too_early_for_thai_no_send": {
            "name": "test_too_early_for_thai_no_send",
            "location": 560,
            "return": [
                "None"
            ],
            "arguments": {
                "bot": [],
                "gmi": [],
                "client": []
            }
        },
        "test_too_early_for_thai_send": {
            "name": "test_too_early_for_thai_send",
            "location": 592,
            "return": [
                "None"
            ],
            "arguments": {
                "bot": [],
                "gmi": [],
                "client": []
            }
        },
        "test_save_id_invalid.get_tasted_brews": {
            "name": "get_tasted_brews",
            "location": 312,
            "return": [
                "list[]"
            ],
            "arguments": {
                "_": []
            }
        },
        "test_save_id_valid.get_tasted_brews": {
            "name": "get_tasted_brews",
            "location": 336,
            "return": [
                "list[]"
            ],
            "arguments": {
                "_": []
            }
        },
        "test_save_id_69.get_tasted_brews": {
            "name": "get_tasted_brews",
            "location": 360,
            "return": [
                "list[]"
            ],
            "arguments": {
                "_": []
            }
        }
    },
    "saucerbot-main/tests/test_models.py": {
        "test_get_user_no_session": {
            "name": "test_get_user_no_session",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_get_user_invalid_id": {
            "name": "test_get_user_invalid_id",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_get_user_valid": {
            "name": "test_get_user_valid",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_new_user_valid": {
            "name": "test_new_user_valid",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "gmi": []
            }
        },
        "test_new_user_invalid": {
            "name": "test_new_user_invalid",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": [
                    "str",
                    "dict[str, typing.Any]",
                    "None"
                ]
            }
        },
        "test_new_user_invalid.fake_get": {
            "name": "fake_get",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "saucerbot-main/tests/test_parsers.py": {
        "create_event": {
            "name": "create_event",
            "location": 29,
            "return": [
                "dict[typing.Text, typing.Union[str,int,typing.Any,None]]"
            ],
            "arguments": {
                "name": [
                    "str",
                    "int",
                    "typing.Any",
                    "None"
                ],
                "month": [
                    "str",
                    "int",
                    "typing.Any",
                    "None"
                ],
                "day": [
                    "str",
                    "int",
                    "typing.Any",
                    "None"
                ]
            }
        },
        "event_equals": {
            "name": "event_equals",
            "location": 33,
            "return": [
                "bool"
            ],
            "arguments": {
                "expected": [],
                "actual": []
            }
        },
        "test_event_list_parsing": {
            "name": "test_event_list_parsing",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_event_time_parsing": {
            "name": "test_event_time_parsing",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_bridgestone_site_structure": {
            "name": "test_bridgestone_site_structure",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_new_arrival_parser": {
            "name": "test_new_arrival_parser",
            "location": 111,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_saucer_site_structure": {
            "name": "test_saucer_site_structure",
            "location": 118,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "LocalFileContentProvider.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "file_path": [
                    "str"
                ]
            }
        },
        "LocalFileContentProvider.get_content": {
            "name": "get_content",
            "location": 23,
            "return": [
                "BeautifulSoup"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "saucerbot-main/tests/test_serializers.py": {
        "handler_test1": {
            "name": "handler_test1",
            "location": 12,
            "return": [
                "bool"
            ],
            "arguments": {
                "bot": [
                    "bool",
                    "typing.Callable[[], bytes]",
                    "BaseException"
                ]
            }
        },
        "handler_test2": {
            "name": "handler_test2",
            "location": 17,
            "return": [
                "bool"
            ],
            "arguments": {
                "bot": [
                    "bool",
                    "typing.Callable[[], bytes]",
                    "BaseException"
                ]
            }
        },
        "handler_test3": {
            "name": "handler_test3",
            "location": 22,
            "return": [
                "bool"
            ],
            "arguments": {
                "bot": [
                    "bool",
                    "typing.Callable[[], bytes]",
                    "BaseException"
                ]
            }
        },
        "handler_test4": {
            "name": "handler_test4",
            "location": 27,
            "return": [
                "bool"
            ],
            "arguments": {
                "bot": [
                    "bool",
                    "typing.Callable[[], bytes]",
                    "BaseException"
                ]
            }
        },
        "ensure_post": {
            "name": "ensure_post",
            "location": 31,
            "return": [],
            "arguments": {
                "data": [
                    "dict[, ]",
                    "dict[str, typing.Any]",
                    "dict[str, str]",
                    "str",
                    "list[dict[str, typing.Any]]",
                    "tuple[str]",
                    "bool"
                ],
                "ret": [
                    "dict[, ]",
                    "dict[str, typing.Any]",
                    "dict[str, str]",
                    "str",
                    "list[dict[str, typing.Any]]",
                    "tuple[str]",
                    "bool"
                ]
            }
        },
        "test_bot_create_invalid": {
            "name": "test_bot_create_invalid",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "bot": [
                    "str"
                ],
                "gmi": [
                    "dict[str, typing.Any]"
                ]
            }
        },
        "test_invalid_group": {
            "name": "test_invalid_group",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {
                "bot": [
                    "str"
                ]
            }
        },
        "test_bot_create_empty": {
            "name": "test_bot_create_empty",
            "location": 108,
            "return": [
                "None"
            ],
            "arguments": {
                "bot": [
                    "str"
                ],
                "gmi": []
            }
        },
        "test_bot_create": {
            "name": "test_bot_create",
            "location": 139,
            "return": [
                "None"
            ],
            "arguments": {
                "bot": [
                    "str"
                ],
                "gmi": []
            }
        },
        "test_bot_update": {
            "name": "test_bot_update",
            "location": 212,
            "return": [
                "None"
            ],
            "arguments": {
                "bot": [
                    "str"
                ],
                "gmi": []
            }
        },
        "test_bot_failed_update": {
            "name": "test_bot_failed_update",
            "location": 281,
            "return": [
                "None"
            ],
            "arguments": {
                "bot": [
                    "str"
                ],
                "gmi": []
            }
        },
        "ensure_post.callback": {
            "name": "callback",
            "location": 32,
            "return": [],
            "arguments": {
                "request": [],
                "context": []
            }
        }
    },
    "saucerbot-main/tests/test_views.py": {
        "test_discord_login_redirect_no_session": {
            "name": "test_discord_login_redirect_no_session",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_discord_login_redirect_with_session": {
            "name": "test_discord_login_redirect_with_session",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_discord_oauth_missing_state": {
            "name": "test_discord_oauth_missing_state",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_discord_oauth_missing_token": {
            "name": "test_discord_oauth_missing_token",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_discord_oauth_with_token": {
            "name": "test_discord_oauth_with_token",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_groupme_login_redirect_no_session": {
            "name": "test_groupme_login_redirect_no_session",
            "location": 99,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_groupme_login_redirect_with_session": {
            "name": "test_groupme_login_redirect_with_session",
            "location": 115,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_groupme_oauth_missing_token": {
            "name": "test_groupme_oauth_missing_token",
            "location": 133,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_groupme_oauth_with_token": {
            "name": "test_groupme_oauth_with_token",
            "location": 148,
            "return": [
                "None"
            ],
            "arguments": {
                "gmi": []
            }
        },
        "test_bot_view_create": {
            "name": "test_bot_view_create",
            "location": 172,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": [],
                "gmi": [],
                "client": []
            }
        },
        "test_bot_view_update": {
            "name": "test_bot_view_update",
            "location": 213,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": [],
                "gmi": [],
                "client": []
            }
        },
        "test_bot_view_delete": {
            "name": "test_bot_view_delete",
            "location": 280,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": [],
                "gmi": [],
                "client": []
            }
        }
    }
}
{
    "sc2-bot-master/generate_id_constants.py": {
        "clike_enum_parse": {
            "name": "clike_enum_parse",
            "location": 8,
            "return": [],
            "arguments": {
                "code": []
            }
        },
        "generate_python_code": {
            "name": "generate_python_code",
            "location": 26,
            "return": [],
            "arguments": {
                "enums": []
            }
        }
    },
    "sc2-bot-master/generate_id_constants_from_stableid.py": {
        "make_key": {
            "name": "make_key",
            "location": 32,
            "return": [],
            "arguments": {
                "key": []
            }
        },
        "parse_data": {
            "name": "parse_data",
            "location": 37,
            "return": [],
            "arguments": {
                "data": []
            }
        },
        "parse_simple": {
            "name": "parse_simple",
            "location": 88,
            "return": [],
            "arguments": {
                "d": [],
                "data": []
            }
        },
        "generate_python_code": {
            "name": "generate_python_code",
            "location": 108,
            "return": [],
            "arguments": {
                "enums": []
            }
        }
    },
    "sc2-bot-master/setup.py": {},
    "sc2-bot-master/valverde_bot_convolution_network.py": {
        "ValverdeBotConvolutionNetwork.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ValverdeBotConvolutionNetwork.find_target": {
            "name": "find_target",
            "location": 100,
            "return": [],
            "arguments": {
                "self": [],
                "state": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "sc2-bot-master/valverde_bot_rules_based.py": {
        "ValverdeBotRulesBased.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ValverdeBotRulesBased.find_target": {
            "name": "find_target",
            "location": 83,
            "return": [],
            "arguments": {
                "self": [],
                "state": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "sc2-bot-master/examples/arcade_bot.py": {
        "main": {
            "name": "main",
            "location": 115,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "MarineSplitChallenge.position_around_unit": {
            "name": "position_around_unit",
            "location": 103,
            "return": [
                "set[]"
            ],
            "arguments": {
                "self": [],
                "pos": [
                    "int"
                ],
                "distance": [
                    "int"
                ],
                "step_size": [
                    "int"
                ],
                "exclude_out_of_bounds": [
                    "bool"
                ]
            }
        }
    },
    "sc2-bot-master/examples/bot_vs_bot.py": {
        "main": {
            "name": "main",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "sc2-bot-master/examples/distributed_workers.py": {},
    "sc2-bot-master/examples/fastreload.py": {
        "main": {
            "name": "main",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "sc2-bot-master/examples/host_external_norestart.py": {
        "main": {
            "name": "main",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "sc2-bot-master/examples/observer_easy_vs_easy.py": {
        "main": {
            "name": "main",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "sc2-bot-master/examples/play_tvz.py": {
        "main": {
            "name": "main",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "sc2-bot-master/examples/run_external.py": {
        "main": {
            "name": "main",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "is_host": [
                    "str",
                    "None",
                    "bool"
                ],
                "pc": [
                    "bool",
                    "list[]",
                    "tuple[typing.Union[str,str,str]]"
                ]
            }
        }
    },
    "sc2-bot-master/examples/too_slow_bot.py": {
        "main": {
            "name": "main",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "sc2-bot-master/examples/worker_rush.py": {
        "main": {
            "name": "main",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "sc2-bot-master/examples/__init__.py": {},
    "sc2-bot-master/examples/protoss/cannon_rush.py": {
        "main": {
            "name": "main",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "sc2-bot-master/examples/protoss/threebase_voidray.py": {
        "main": {
            "name": "main",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "ThreebaseVoidrayBot.select_target": {
            "name": "select_target",
            "location": 10,
            "return": [],
            "arguments": {
                "self": [],
                "state": [
                    "str"
                ]
            }
        }
    },
    "sc2-bot-master/examples/protoss/warpgate_push.py": {
        "main": {
            "name": "main",
            "location": 113,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "WarpGateBot.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "WarpGateBot.select_target": {
            "name": "select_target",
            "location": 14,
            "return": [],
            "arguments": {
                "self": [],
                "state": [
                    "str"
                ]
            }
        }
    },
    "sc2-bot-master/examples/protoss/__init__.py": {},
    "sc2-bot-master/examples/terran/cyclone_push.py": {
        "main": {
            "name": "main",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "ProxyRaxBot.select_target": {
            "name": "select_target",
            "location": 10,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "sc2-bot-master/examples/terran/mass_reaper.py": {
        "main": {
            "name": "main",
            "location": 346,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "MassReaperBot.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MassReaperBot.inPathingGrid": {
            "name": "inPathingGrid",
            "location": 196,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "pos": [
                    "int"
                ]
            }
        },
        "MassReaperBot.neighbors4": {
            "name": "neighbors4",
            "location": 203,
            "return": [
                "set[Point2]"
            ],
            "arguments": {
                "self": [],
                "position": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ],
                "distance": [
                    "int"
                ]
            }
        },
        "MassReaperBot.neighbors8": {
            "name": "neighbors8",
            "location": 214,
            "return": [],
            "arguments": {
                "self": [],
                "position": [],
                "distance": [
                    "int"
                ]
            }
        },
        "MassReaperBot.already_pending": {
            "name": "already_pending",
            "location": 228,
            "return": [
                "bool",
                "int"
            ],
            "arguments": {
                "self": [],
                "unit_type": [
                    "dict[str, typing.Any]"
                ]
            }
        }
    },
    "sc2-bot-master/examples/terran/onebase_battlecruiser.py": {
        "main": {
            "name": "main",
            "location": 104,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "ProxyRaxBot.select_target": {
            "name": "select_target",
            "location": 10,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "sc2-bot-master/examples/terran/proxy_rax.py": {
        "main": {
            "name": "main",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "ProxyRaxBot.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "sc2-bot-master/examples/terran/ramp_wall.py": {
        "main": {
            "name": "main",
            "location": 74,
            "return": [],
            "arguments": {}
        }
    },
    "sc2-bot-master/examples/terran/__init__.py": {},
    "sc2-bot-master/examples/zerg/hydralisk_push.py": {
        "main": {
            "name": "main",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "Hydralisk.select_target": {
            "name": "select_target",
            "location": 14,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "sc2-bot-master/examples/zerg/onebase_broodlord.py": {
        "main": {
            "name": "main",
            "location": 111,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "BroodlordBot.select_target": {
            "name": "select_target",
            "location": 14,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "sc2-bot-master/examples/zerg/zerg_rush.py": {
        "main": {
            "name": "main",
            "location": 103,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "ZergRushBot.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "sc2-bot-master/examples/zerg/__init__.py": {},
    "sc2-bot-master/sc2/action.py": {
        "combine_actions": {
            "name": "combine_actions",
            "location": 7,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "action_iter": [
                    "dict[, ]",
                    "dict[str, typing.Any]"
                ],
                "game_data": [
                    "typing.Callable[, ]",
                    "list[]",
                    "str",
                    "Exception",
                    "None",
                    "dict[, ]"
                ]
            }
        }
    },
    "sc2-bot-master/sc2/bot_ai.py": {
        "BotAI.__init__": {
            "name": "__init__",
            "location": 31,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BotAI.enemy_race": {
            "name": "enemy_race",
            "location": 37,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BotAI.time": {
            "name": "time",
            "location": 42,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BotAI.game_info": {
            "name": "game_info",
            "location": 47,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BotAI.start_location": {
            "name": "start_location",
            "location": 51,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BotAI.enemy_start_locations": {
            "name": "enemy_start_locations",
            "location": 55,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BotAI.known_enemy_units": {
            "name": "known_enemy_units",
            "location": 60,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BotAI.known_enemy_structures": {
            "name": "known_enemy_structures",
            "location": 65,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BotAI.main_base_ramp": {
            "name": "main_base_ramp",
            "location": 70,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BotAI.expansion_locations": {
            "name": "expansion_locations",
            "location": 81,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BotAI.owned_expansions": {
            "name": "owned_expansions",
            "location": 234,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BotAI.can_feed": {
            "name": "can_feed",
            "location": 248,
            "return": [],
            "arguments": {
                "self": [],
                "unit_type": []
            }
        },
        "BotAI.can_afford": {
            "name": "can_afford",
            "location": 253,
            "return": [],
            "arguments": {
                "self": [],
                "item_id": [],
                "check_supply_cost": []
            }
        },
        "BotAI.select_build_worker": {
            "name": "select_build_worker",
            "location": 296,
            "return": [],
            "arguments": {
                "self": [],
                "pos": [],
                "force": []
            }
        },
        "BotAI.already_pending_upgrade": {
            "name": "already_pending_upgrade",
            "location": 356,
            "return": [],
            "arguments": {
                "self": [],
                "upgrade_type": []
            }
        },
        "BotAI.already_pending": {
            "name": "already_pending",
            "location": 373,
            "return": [],
            "arguments": {
                "self": [],
                "unit_type": [],
                "all_units": []
            }
        },
        "BotAI.get_terrain_height": {
            "name": "get_terrain_height",
            "location": 451,
            "return": [],
            "arguments": {
                "self": [],
                "pos": []
            }
        },
        "BotAI.in_placement_grid": {
            "name": "in_placement_grid",
            "location": 457,
            "return": [],
            "arguments": {
                "self": [],
                "pos": []
            }
        },
        "BotAI.in_pathing_grid": {
            "name": "in_pathing_grid",
            "location": 465,
            "return": [],
            "arguments": {
                "self": [],
                "pos": []
            }
        },
        "BotAI.is_visible": {
            "name": "is_visible",
            "location": 471,
            "return": [],
            "arguments": {
                "self": [],
                "pos": []
            }
        },
        "BotAI.has_creep": {
            "name": "has_creep",
            "location": 478,
            "return": [],
            "arguments": {
                "self": [],
                "pos": []
            }
        },
        "BotAI._prepare_start": {
            "name": "_prepare_start",
            "location": 484,
            "return": [],
            "arguments": {
                "self": [],
                "client": [],
                "player_id": [],
                "game_info": [],
                "game_data": []
            }
        },
        "BotAI._prepare_first_step": {
            "name": "_prepare_first_step",
            "location": 495,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BotAI._prepare_step": {
            "name": "_prepare_step",
            "location": 500,
            "return": [],
            "arguments": {
                "self": [],
                "state": []
            }
        },
        "BotAI.on_start": {
            "name": "on_start",
            "location": 562,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BotAI.on_end": {
            "name": "on_end",
            "location": 570,
            "return": [],
            "arguments": {
                "self": [],
                "game_result": []
            }
        },
        "CanAffordWrapper.__init__": {
            "name": "__init__",
            "location": 575,
            "return": [],
            "arguments": {
                "self": [],
                "can_afford_minerals": [],
                "can_afford_vespene": [],
                "have_enough_supply": []
            }
        },
        "CanAffordWrapper.__bool__": {
            "name": "__bool__",
            "location": 580,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CanAffordWrapper.action_result": {
            "name": "action_result",
            "location": 584,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BotAI.get_next_expansion.is_near_to_expansion": {
            "name": "is_near_to_expansion",
            "location": 147,
            "return": [],
            "arguments": {
                "t": []
            }
        },
        "BotAI.owned_expansions.is_near_to_expansion": {
            "name": "is_near_to_expansion",
            "location": 239,
            "return": [],
            "arguments": {
                "t": []
            }
        }
    },
    "sc2-bot-master/sc2/cache.py": {
        "cache_forever": {
            "name": "cache_forever",
            "location": 3,
            "return": [],
            "arguments": {
                "f": [
                    "typing.Iterable[str]",
                    "typing.Callable[, ]"
                ]
            }
        },
        "method_cache_forever": {
            "name": "method_cache_forever",
            "location": 12,
            "return": [],
            "arguments": {
                "f": [
                    "str",
                    "typing.Callable[, ]"
                ]
            }
        },
        "property_cache_forever": {
            "name": "property_cache_forever",
            "location": 21,
            "return": [],
            "arguments": {
                "f": [
                    "typing.Type",
                    "typing.Callable[, ]"
                ]
            }
        },
        "cache_forever.inner": {
            "name": "inner",
            "location": 6,
            "return": [],
            "arguments": {}
        },
        "method_cache_forever.inner": {
            "name": "inner",
            "location": 15,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "property_cache_forever.inner": {
            "name": "inner",
            "location": 24,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "sc2-bot-master/sc2/client.py": {
        "Client.__init__": {
            "name": "__init__",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ws": [
                    "bool",
                    "dict[str, typing.Any]",
                    "typing.Callable[A, bool]"
                ]
            }
        },
        "Client.in_game": {
            "name": "in_game",
            "location": 41,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Client.debug_text_simple": {
            "name": "debug_text_simple",
            "location": 312,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str",
                    "int",
                    "list[str]"
                ]
            }
        },
        "Client.debug_text_screen": {
            "name": "debug_text_screen",
            "location": 316,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "int",
                    "set[str]",
                    "str",
                    "typing.Callable[str, int]"
                ],
                "pos": [
                    "str"
                ],
                "color": [
                    "None",
                    "int",
                    "set[str]",
                    "str",
                    "typing.Callable[str, int]"
                ],
                "size": [
                    "int"
                ]
            }
        },
        "Client.debug_text_2d": {
            "name": "debug_text_2d",
            "location": 324,
            "return": [],
            "arguments": {
                "self": [],
                "text": [
                    "str",
                    "dict[, ]",
                    "int",
                    "None"
                ],
                "pos": [
                    "str",
                    "dict[, ]",
                    "int",
                    "None"
                ],
                "color": [
                    "None",
                    "str",
                    "dict[, ]",
                    "int"
                ],
                "size": [
                    "int"
                ]
            }
        },
        "Client.debug_text_world": {
            "name": "debug_text_world",
            "location": 327,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "int",
                    "set[str]",
                    "str",
                    "typing.Callable[str, int]"
                ],
                "pos": [
                    "int",
                    "float",
                    "list[list[str]]"
                ],
                "color": [
                    "None",
                    "int",
                    "set[str]",
                    "str",
                    "typing.Callable[str, int]"
                ],
                "size": [
                    "int"
                ]
            }
        },
        "Client.debug_text_3d": {
            "name": "debug_text_3d",
            "location": 336,
            "return": [],
            "arguments": {
                "self": [],
                "text": [
                    "str",
                    "dict[, ]",
                    "int",
                    "None"
                ],
                "pos": [
                    "str",
                    "dict[, ]",
                    "int",
                    "None"
                ],
                "color": [
                    "None",
                    "str",
                    "dict[, ]",
                    "int"
                ],
                "size": [
                    "int"
                ]
            }
        },
        "Client.debug_line_out": {
            "name": "debug_line_out",
            "location": 339,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "p0": [
                    "str",
                    "float",
                    "int"
                ],
                "p1": [
                    "str",
                    "float",
                    "int"
                ],
                "color": [
                    "None",
                    "str",
                    "float",
                    "int"
                ]
            }
        },
        "Client.debug_box_out": {
            "name": "debug_box_out",
            "location": 345,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "p_min": [
                    "list[str]",
                    "float",
                    "list[]"
                ],
                "p_max": [
                    "list[str]",
                    "float",
                    "list[]"
                ],
                "color": [
                    "None",
                    "list[str]",
                    "float",
                    "list[]"
                ]
            }
        },
        "Client.debug_sphere_out": {
            "name": "debug_sphere_out",
            "location": 353,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "p": [
                    "int",
                    "list[T]",
                    "list[]"
                ],
                "r": [
                    "int",
                    "list[T]",
                    "list[]"
                ],
                "color": [
                    "None",
                    "int",
                    "list[T]",
                    "list[]"
                ]
            }
        },
        "Client.to_debug_color": {
            "name": "to_debug_color",
            "location": 375,
            "return": [],
            "arguments": {
                "self": [],
                "color": [
                    "list[str]",
                    "bool",
                    "str",
                    "None"
                ]
            }
        },
        "Client.to_debug_point": {
            "name": "to_debug_point",
            "location": 390,
            "return": [],
            "arguments": {
                "self": [],
                "point": [
                    "int",
                    "dict[, ]"
                ]
            }
        },
        "Client.to_debug_message": {
            "name": "to_debug_message",
            "location": 396,
            "return": [],
            "arguments": {
                "self": [],
                "text": [
                    "str",
                    "int"
                ],
                "color": [
                    "None",
                    "int",
                    "str",
                    "typing.Sequence[str]"
                ],
                "pos": [
                    "None",
                    "str",
                    "bool",
                    "typing.Type",
                    "float",
                    "typing.Callable[, ]"
                ],
                "size": [
                    "int"
                ]
            }
        }
    },
    "sc2-bot-master/sc2/constants.py": {},
    "sc2-bot-master/sc2/controller.py": {
        "Controller.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ws": [
                    "bool",
                    "dict[str, typing.Any]",
                    "typing.Callable[Any,Any, bool]"
                ],
                "process": [
                    "int",
                    "float"
                ]
            }
        },
        "Controller.running": {
            "name": "running",
            "location": 14,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "sc2-bot-master/sc2/data.py": {},
    "sc2-bot-master/sc2/game_data.py": {
        "split_camel_case": {
            "name": "split_camel_case",
            "location": 17,
            "return": [
                "list[]"
            ],
            "arguments": {
                "text": [
                    "str",
                    "int"
                ]
            }
        },
        "GameData.__init__": {
            "name": "__init__",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "int",
                    "bytes",
                    "dict[, ]",
                    "bytearray"
                ]
            }
        },
        "GameData.calculate_ability_cost": {
            "name": "calculate_ability_cost",
            "location": 33,
            "return": [
                "Cost"
            ],
            "arguments": {
                "self": [],
                "ability": [
                    "bool",
                    "str",
                    "dict[, ]"
                ]
            }
        },
        "AbilityData.id_exists": {
            "name": "id_exists",
            "location": 74,
            "return": [
                "bool"
            ],
            "arguments": {
                "ability_id": [
                    "int",
                    "str"
                ]
            }
        },
        "AbilityData.__init__": {
            "name": "__init__",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "game_data": [
                    "dict[str, typing.Any]",
                    "str",
                    "dict[, ]",
                    "list[str]"
                ],
                "proto": [
                    "int",
                    "str",
                    "list[str]",
                    "tuple[typing.Union[dict[str, typing.Any],dict[str, typing.Any]]]",
                    "typing.Mapping"
                ]
            }
        },
        "AbilityData.__repr__": {
            "name": "__repr__",
            "location": 84,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbilityData.id": {
            "name": "id",
            "location": 88,
            "return": [
                "AbilityId"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbilityData.link_name": {
            "name": "link_name",
            "location": 94,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AbilityData.button_name": {
            "name": "button_name",
            "location": 100,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AbilityData.friendly_name": {
            "name": "friendly_name",
            "location": 105,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AbilityData.is_free_morph": {
            "name": "is_free_morph",
            "location": 110,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbilityData.cost": {
            "name": "cost",
            "location": 118,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UnitTypeData.__init__": {
            "name": "__init__",
            "location": 122,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "game_data": [
                    "dict[str, typing.Any]",
                    "str",
                    "dict[, ]",
                    "list[str]"
                ],
                "proto": [
                    "int",
                    "str",
                    "list[str]",
                    "tuple[typing.Union[dict[str, typing.Any],dict[str, typing.Any]]]",
                    "typing.Mapping"
                ]
            }
        },
        "UnitTypeData.__repr__": {
            "name": "__repr__",
            "location": 126,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "UnitTypeData.id": {
            "name": "id",
            "location": 130,
            "return": [
                "UnitTypeId"
            ],
            "arguments": {
                "self": []
            }
        },
        "UnitTypeData.name": {
            "name": "name",
            "location": 134,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UnitTypeData.creation_ability": {
            "name": "creation_ability",
            "location": 138,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UnitTypeData.attributes": {
            "name": "attributes",
            "location": 146,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UnitTypeData.has_attribute": {
            "name": "has_attribute",
            "location": 149,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "attr": [
                    "str",
                    "typing.Sequence[object]",
                    "bytes"
                ]
            }
        },
        "UnitTypeData.has_minerals": {
            "name": "has_minerals",
            "location": 154,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UnitTypeData.has_vespene": {
            "name": "has_vespene",
            "location": 158,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UnitTypeData.cargo_size": {
            "name": "cargo_size",
            "location": 162,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UnitTypeData.tech_requirement": {
            "name": "tech_requirement",
            "location": 167,
            "return": [
                "None",
                "UnitTypeId"
            ],
            "arguments": {
                "self": []
            }
        },
        "UnitTypeData.tech_alias": {
            "name": "tech_alias",
            "location": 176,
            "return": [
                "list[UnitTypeId]",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UnitTypeData.unit_alias": {
            "name": "unit_alias",
            "location": 190,
            "return": [
                "None",
                "UnitTypeId"
            ],
            "arguments": {
                "self": []
            }
        },
        "UnitTypeData.race": {
            "name": "race",
            "location": 200,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UnitTypeData.cost": {
            "name": "cost",
            "location": 204,
            "return": [
                "Cost"
            ],
            "arguments": {
                "self": []
            }
        },
        "UnitTypeData.cost_zerg_corrected": {
            "name": "cost_zerg_corrected",
            "location": 212,
            "return": [
                "Cost"
            ],
            "arguments": {
                "self": []
            }
        },
        "UnitTypeData.morph_cost": {
            "name": "morph_cost",
            "location": 227,
            "return": [
                "None",
                "Cost"
            ],
            "arguments": {
                "self": []
            }
        },
        "UpgradeData.__init__": {
            "name": "__init__",
            "location": 243,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "game_data": [
                    "dict[str, typing.Any]",
                    "str",
                    "dict[, ]",
                    "list[str]"
                ],
                "proto": [
                    "int",
                    "str",
                    "list[str]",
                    "tuple[typing.Union[dict[str, typing.Any],dict[str, typing.Any]]]",
                    "typing.Mapping"
                ]
            }
        },
        "UpgradeData.__repr__": {
            "name": "__repr__",
            "location": 247,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "UpgradeData.name": {
            "name": "name",
            "location": 251,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UpgradeData.research_ability": {
            "name": "research_ability",
            "location": 255,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UpgradeData.cost": {
            "name": "cost",
            "location": 263,
            "return": [
                "Cost"
            ],
            "arguments": {
                "self": []
            }
        },
        "Cost.__init__": {
            "name": "__init__",
            "location": 271,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "minerals": [
                    "int",
                    "float",
                    "str"
                ],
                "vespene": [
                    "int",
                    "float",
                    "str"
                ],
                "time": [
                    "None",
                    "int",
                    "float",
                    "str"
                ]
            }
        },
        "Cost.__repr__": {
            "name": "__repr__",
            "location": 276,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "Cost.__eq__": {
            "name": "__eq__",
            "location": 279,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "int"
                ]
            }
        },
        "Cost.__ne__": {
            "name": "__ne__",
            "location": 282,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "int"
                ]
            }
        }
    },
    "sc2-bot-master/sc2/game_info.py": {
        "Ramp.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "points": [
                    "set[P]",
                    "set[]",
                    "float"
                ],
                "game_info": [
                    "bool"
                ]
            }
        },
        "Ramp._height_map": {
            "name": "_height_map",
            "location": 23,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Ramp._placement_grid": {
            "name": "_placement_grid",
            "location": 27,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Ramp.size": {
            "name": "size",
            "location": 31,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Ramp.height_at": {
            "name": "height_at",
            "location": 34,
            "return": [],
            "arguments": {
                "self": [],
                "p": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ]
            }
        },
        "Ramp.points": {
            "name": "points",
            "location": 38,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Ramp.upper": {
            "name": "upper",
            "location": 42,
            "return": [
                "set[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Ramp.upper2_for_ramp_wall": {
            "name": "upper2_for_ramp_wall",
            "location": 52,
            "return": [
                "set[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Ramp.top_center": {
            "name": "top_center",
            "location": 65,
            "return": [
                "Point2"
            ],
            "arguments": {
                "self": []
            }
        },
        "Ramp.lower": {
            "name": "lower",
            "location": 71,
            "return": [
                "set[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Ramp.bottom_center": {
            "name": "bottom_center",
            "location": 80,
            "return": [
                "Point2"
            ],
            "arguments": {
                "self": []
            }
        },
        "Ramp.barracks_in_middle": {
            "name": "barracks_in_middle",
            "location": 87,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Ramp.depot_in_middle": {
            "name": "depot_in_middle",
            "location": 100,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Ramp.corner_depots": {
            "name": "corner_depots",
            "location": 113,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Ramp.barracks_can_fit_addon": {
            "name": "barracks_can_fit_addon",
            "location": 127,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Ramp.barracks_correct_placement": {
            "name": "barracks_correct_placement",
            "location": 135,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GameInfo.__init__": {
            "name": "__init__",
            "location": 146,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "proto": [
                    "list[str]"
                ]
            }
        },
        "GameInfo.map_center": {
            "name": "map_center",
            "location": 161,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GameInfo._find_ramps": {
            "name": "_find_ramps",
            "location": 164,
            "return": [
                "list[Ramp]"
            ],
            "arguments": {
                "self": []
            }
        },
        "GameInfo._find_groups": {
            "name": "_find_groups",
            "location": 177,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": [],
                "points": [
                    "list[]",
                    "list[typing.Union[int,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str]]",
                    "str",
                    "set[]"
                ],
                "minimum_points_per_group": [
                    "int"
                ],
                "max_distance_between_points": [
                    "int"
                ]
            }
        }
    },
    "sc2-bot-master/sc2/game_state.py": {
        "Blip.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "proto": [
                    "int",
                    "float"
                ]
            }
        },
        "Blip.is_blip": {
            "name": "is_blip",
            "location": 16,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Blip.is_snapshot": {
            "name": "is_snapshot",
            "location": 21,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Blip.is_visible": {
            "name": "is_visible",
            "location": 25,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Blip.alliance": {
            "name": "alliance",
            "location": 29,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Blip.is_mine": {
            "name": "is_mine",
            "location": 33,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Blip.is_enemy": {
            "name": "is_enemy",
            "location": 37,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Blip.position": {
            "name": "position",
            "location": 41,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Blip.position3d": {
            "name": "position3d",
            "location": 46,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Common.__init__": {
            "name": "__init__",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "proto": [
                    "int",
                    "float"
                ]
            }
        },
        "Common.__getattr__": {
            "name": "__getattr__",
            "location": 64,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "attr": [
                    "str",
                    "typing.Type",
                    "int"
                ]
            }
        },
        "EffectData.__init__": {
            "name": "__init__",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "proto": [
                    "int",
                    "float"
                ]
            }
        },
        "EffectData.id": {
            "name": "id",
            "location": 74,
            "return": [
                "EffectId"
            ],
            "arguments": {
                "self": []
            }
        },
        "EffectData.positions": {
            "name": "positions",
            "location": 78,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "GameState.__init__": {
            "name": "__init__",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "response_observation": [
                    "Exception",
                    "None",
                    "dict[, ]",
                    "list[dict[str, typing.Any]]",
                    "dict[str, typing.Any]"
                ],
                "game_data": [
                    "dict[, ]",
                    "str",
                    "bytes"
                ]
            }
        },
        "GameState.mineral_field": {
            "name": "mineral_field",
            "location": 125,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GameState.vespene_geyser": {
            "name": "vespene_geyser",
            "location": 129,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "sc2-bot-master/sc2/main.py": {
        "_host_game_iter": {
            "name": "_host_game_iter",
            "location": 157,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "run_game": {
            "name": "run_game",
            "location": 182,
            "return": [
                "typing.Generator[typing.Union[typing.Any,None,None]]"
            ],
            "arguments": {
                "map_settings": [
                    "typing.Callable[, ]",
                    "int"
                ],
                "players": [
                    "str"
                ]
            }
        }
    },
    "sc2-bot-master/sc2/maps.py": {
        "get": {
            "name": "get",
            "location": 6,
            "return": [
                "list[Map]",
                "Map"
            ],
            "arguments": {
                "name": [
                    "None",
                    "str"
                ]
            }
        },
        "Map.__init__": {
            "name": "__init__",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ]
            }
        },
        "Map.name": {
            "name": "name",
            "location": 40,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Map.data": {
            "name": "data",
            "location": 44,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Map.matches": {
            "name": "matches",
            "location": 48,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "typing.Sequence[str]"
                ]
            }
        },
        "Map.__repr__": {
            "name": "__repr__",
            "location": 51,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "sc2-bot-master/sc2/paths.py": {
        "get_env": {
            "name": "get_env",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "latest_executeble": {
            "name": "latest_executeble",
            "location": 38,
            "return": [],
            "arguments": {
                "versions_dir": []
            }
        },
        "_MetaPaths.__setup": {
            "name": "__setup",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "_MetaPaths.__getattr__": {
            "name": "__getattr__",
            "location": 82,
            "return": [],
            "arguments": {
                "self": [],
                "attr": [
                    "str",
                    "list[]"
                ]
            }
        }
    },
    "sc2-bot-master/sc2/pixel_map.py": {
        "PixelMap.__init__": {
            "name": "__init__",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "proto": [
                    "int",
                    "float"
                ]
            }
        },
        "PixelMap.width": {
            "name": "width",
            "location": 13,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PixelMap.height": {
            "name": "height",
            "location": 17,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PixelMap.bits_per_pixel": {
            "name": "bits_per_pixel",
            "location": 21,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PixelMap.bytes_per_pixel": {
            "name": "bytes_per_pixel",
            "location": 25,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "PixelMap.__getitem__": {
            "name": "__getitem__",
            "location": 28,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "pos": [
                    "int",
                    "list[]",
                    "str"
                ]
            }
        },
        "PixelMap.__setitem__": {
            "name": "__setitem__",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pos": [
                    "int",
                    "list[]",
                    "str"
                ],
                "val": [
                    "int",
                    "float",
                    "None"
                ]
            }
        },
        "PixelMap.is_set": {
            "name": "is_set",
            "location": 50,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "p": [
                    "int",
                    "str",
                    "list[str]"
                ]
            }
        },
        "PixelMap.is_empty": {
            "name": "is_empty",
            "location": 53,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "p": [
                    "str",
                    "int"
                ]
            }
        },
        "PixelMap.invert": {
            "name": "invert",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PixelMap.flood_fill": {
            "name": "flood_fill",
            "location": 59,
            "return": [
                "set[Point2]"
            ],
            "arguments": {
                "self": [],
                "start_point": [
                    "bool",
                    "None"
                ],
                "pred": [
                    "typing.Callable[int, bool]",
                    "int"
                ]
            }
        },
        "PixelMap.flood_fill_all": {
            "name": "flood_fill_all",
            "location": 82,
            "return": [
                "set[set[]]"
            ],
            "arguments": {
                "self": [],
                "pred": [
                    "typing.Match"
                ]
            }
        },
        "PixelMap.print": {
            "name": "print",
            "location": 95,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "wide": [
                    "bool"
                ]
            }
        },
        "PixelMap.save_image": {
            "name": "save_image",
            "location": 101,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "str"
                ]
            }
        }
    },
    "sc2-bot-master/sc2/player.py": {
        "AbstractPlayer.__init__": {
            "name": "__init__",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "type": [
                    "typing.Type"
                ],
                "race": [
                    "None",
                    "int",
                    "str",
                    "typing.Any"
                ],
                "difficulty": [
                    "None",
                    "str",
                    "dict[str, typing.Any]",
                    "list[str]",
                    "bool"
                ]
            }
        },
        "Human.__init__": {
            "name": "__init__",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "race": [
                    "str"
                ]
            }
        },
        "Human.__str__": {
            "name": "__str__",
            "location": 29,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "Bot.__init__": {
            "name": "__init__",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "race": [
                    "str"
                ],
                "ai": [
                    "str",
                    "None",
                    "tuple[int]",
                    "list[int]"
                ]
            }
        },
        "Bot.__str__": {
            "name": "__str__",
            "location": 42,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "Computer.__init__": {
            "name": "__init__",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "race": [
                    "str"
                ],
                "difficulty": []
            }
        },
        "Computer.__str__": {
            "name": "__str__",
            "location": 49,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "Observer.__init__": {
            "name": "__init__",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Observer.__str__": {
            "name": "__str__",
            "location": 56,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "Player.from_proto": {
            "name": "from_proto",
            "location": 61,
            "return": [],
            "arguments": {
                "cls": [
                    "dict[, ]",
                    "typing.Callable[, ]",
                    "None",
                    "str",
                    "list[dict[str, typing.Any]]"
                ],
                "proto": []
            }
        },
        "Player.__init__": {
            "name": "__init__",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "player_id": [
                    "int",
                    "str",
                    "dict[str, str]",
                    "None"
                ],
                "type": [
                    "str",
                    "int",
                    "None",
                    "dict[str, typing.Any]",
                    "list[list[typing.Callable[, ]]]",
                    "typing.Callable[..., typing.Any]"
                ],
                "requested_race": [
                    "str",
                    "int",
                    "None",
                    "dict[str, typing.Any]",
                    "list[list[typing.Callable[, ]]]",
                    "typing.Callable[..., typing.Any]"
                ],
                "difficulty": [
                    "None",
                    "str",
                    "int",
                    "dict[str, typing.Any]",
                    "list[list[typing.Callable[, ]]]",
                    "typing.Callable[..., typing.Any]"
                ],
                "actual_race": [
                    "None",
                    "str",
                    "int"
                ]
            }
        }
    },
    "sc2-bot-master/sc2/portconfig.py": {
        "Portconfig.__init__": {
            "name": "__init__",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Portconfig.__str__": {
            "name": "__str__",
            "location": 10,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "Portconfig.as_json": {
            "name": "as_json",
            "location": 14,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Portconfig.from_json": {
            "name": "from_json",
            "location": 22,
            "return": [
                "Portconfig"
            ],
            "arguments": {
                "cls": [],
                "json_data": [
                    "str",
                    "dict[, ]",
                    "bool",
                    "None",
                    "typing.Sequence[]"
                ]
            }
        }
    },
    "sc2-bot-master/sc2/position.py": {
        "_sign": {
            "name": "_sign",
            "location": 10,
            "return": [
                "int"
            ],
            "arguments": {
                "num": []
            }
        },
        "Pointlike.rounded": {
            "name": "rounded",
            "location": 17,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Pointlike.position": {
            "name": "position",
            "location": 21,
            "return": [
                "Pointlike"
            ],
            "arguments": {
                "self": []
            }
        },
        "Pointlike.distance_to": {
            "name": "distance_to",
            "location": 24,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "p": []
            }
        },
        "Pointlike.distance_to_point2": {
            "name": "distance_to_point2",
            "location": 31,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "p2": []
            }
        },
        "Pointlike._distance_squared": {
            "name": "_distance_squared",
            "location": 35,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "p2": []
            }
        },
        "Pointlike.sort_by_distance": {
            "name": "sort_by_distance",
            "location": 39,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": [],
                "ps": []
            }
        },
        "Pointlike.closest": {
            "name": "closest",
            "location": 46,
            "return": [],
            "arguments": {
                "self": [],
                "ps": []
            }
        },
        "Pointlike.distance_to_closest": {
            "name": "distance_to_closest",
            "location": 60,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "ps": []
            }
        },
        "Pointlike.furthest": {
            "name": "furthest",
            "location": 72,
            "return": [],
            "arguments": {
                "self": [],
                "ps": []
            }
        },
        "Pointlike.distance_to_furthest": {
            "name": "distance_to_furthest",
            "location": 86,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "ps": []
            }
        },
        "Pointlike.offset": {
            "name": "offset",
            "location": 98,
            "return": [],
            "arguments": {
                "self": [],
                "p": []
            }
        },
        "Pointlike.unit_axes_towards": {
            "name": "unit_axes_towards",
            "location": 101,
            "return": [],
            "arguments": {
                "self": [],
                "p": []
            }
        },
        "Pointlike.towards": {
            "name": "towards",
            "location": 104,
            "return": [],
            "arguments": {
                "self": [],
                "p": [],
                "distance": [
                    "int"
                ],
                "limit": [
                    "bool"
                ]
            }
        },
        "Pointlike.__eq__": {
            "name": "__eq__",
            "location": 112,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Pointlike.__hash__": {
            "name": "__hash__",
            "location": 117,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Point2.from_proto": {
            "name": "from_proto",
            "location": 123,
            "return": [],
            "arguments": {
                "cls": [],
                "data": []
            }
        },
        "Point2.x": {
            "name": "x",
            "location": 127,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Point2.y": {
            "name": "y",
            "location": 131,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Point2.to2": {
            "name": "to2",
            "location": 135,
            "return": [
                "Point2"
            ],
            "arguments": {
                "self": []
            }
        },
        "Point2.to3": {
            "name": "to3",
            "location": 139,
            "return": [
                "Point3"
            ],
            "arguments": {
                "self": []
            }
        },
        "Point2.distance2_to": {
            "name": "distance2_to",
            "location": 142,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Point2.random_on_distance": {
            "name": "random_on_distance",
            "location": 147,
            "return": [
                "Point2"
            ],
            "arguments": {
                "self": [],
                "distance": []
            }
        },
        "Point2.towards_with_random_angle": {
            "name": "towards_with_random_angle",
            "location": 157,
            "return": [
                "Point2"
            ],
            "arguments": {
                "self": [],
                "p": [],
                "distance": [
                    "int"
                ],
                "max_difference": [
                    "int"
                ]
            }
        },
        "Point2.circle_intersection": {
            "name": "circle_intersection",
            "location": 163,
            "return": [
                "set[]"
            ],
            "arguments": {
                "self": [],
                "p": [],
                "r": []
            }
        },
        "Point2.neighbors4": {
            "name": "neighbors4",
            "location": 188,
            "return": [
                "set[Point2]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Point2.neighbors8": {
            "name": "neighbors8",
            "location": 197,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Point2.negative_offset": {
            "name": "negative_offset",
            "location": 205,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Point2.__add__": {
            "name": "__add__",
            "location": 208,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Point2.__sub__": {
            "name": "__sub__",
            "location": 211,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Point2.__neg__": {
            "name": "__neg__",
            "location": 214,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Point2.__abs__": {
            "name": "__abs__",
            "location": 217,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Point2.__bool__": {
            "name": "__bool__",
            "location": 220,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Point2.__mul__": {
            "name": "__mul__",
            "location": 223,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Point2.__rmul__": {
            "name": "__rmul__",
            "location": 228,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Point2.__truediv__": {
            "name": "__truediv__",
            "location": 231,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Point2.is_same_as": {
            "name": "is_same_as",
            "location": 236,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [],
                "dist": [
                    "float"
                ]
            }
        },
        "Point2.direction_vector": {
            "name": "direction_vector",
            "location": 239,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Point2.manhattan_distance": {
            "name": "manhattan_distance",
            "location": 243,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Point2.center": {
            "name": "center",
            "location": 247,
            "return": [
                "int"
            ],
            "arguments": {
                "a": []
            }
        },
        "Point3.from_proto": {
            "name": "from_proto",
            "location": 257,
            "return": [],
            "arguments": {
                "cls": [],
                "data": []
            }
        },
        "Point3.z": {
            "name": "z",
            "location": 261,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Point3.to3": {
            "name": "to3",
            "location": 265,
            "return": [
                "Point3"
            ],
            "arguments": {
                "self": []
            }
        },
        "Size.width": {
            "name": "width",
            "location": 270,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Size.height": {
            "name": "height",
            "location": 274,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Rect.from_proto": {
            "name": "from_proto",
            "location": 279,
            "return": [],
            "arguments": {
                "cls": [],
                "data": []
            }
        },
        "Rect.x": {
            "name": "x",
            "location": 284,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Rect.y": {
            "name": "y",
            "location": 288,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Rect.width": {
            "name": "width",
            "location": 292,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Rect.height": {
            "name": "height",
            "location": 296,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Rect.size": {
            "name": "size",
            "location": 300,
            "return": [
                "Size"
            ],
            "arguments": {
                "self": []
            }
        },
        "Rect.center": {
            "name": "center",
            "location": 304,
            "return": [
                "Point2"
            ],
            "arguments": {
                "self": []
            }
        },
        "Rect.offset": {
            "name": "offset",
            "location": 307,
            "return": [],
            "arguments": {
                "self": [],
                "p": []
            }
        }
    },
    "sc2-bot-master/sc2/power_source.py": {
        "PowerSource.from_proto": {
            "name": "from_proto",
            "location": 5,
            "return": [],
            "arguments": {
                "cls": [
                    "dict[, ]"
                ],
                "proto": [
                    "dict[, ]"
                ]
            }
        },
        "PowerSource.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "position": [
                    "int",
                    "typing.Callable[, ]",
                    "float"
                ],
                "radius": [
                    "int",
                    "typing.Callable[, ]",
                    "float"
                ],
                "unit_tag": [
                    "bool",
                    "list[str]",
                    "str",
                    "set[str]"
                ]
            }
        },
        "PowerSource.covers": {
            "name": "covers",
            "location": 19,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "position": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ]
            }
        },
        "PowerSource.__repr__": {
            "name": "__repr__",
            "location": 22,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "PsionicMatrix.from_proto": {
            "name": "from_proto",
            "location": 27,
            "return": [],
            "arguments": {
                "cls": [
                    "typing.Type",
                    "bool",
                    "dict[, ]",
                    "dict[str, typing.Any]",
                    "tuple[typing.Union[dict[str, typing.Any],dict[str, typing.Any]]]"
                ],
                "proto": [
                    "dict[, ]",
                    "dict[str, typing.Any]",
                    "tuple[typing.Union[dict[str, typing.Any],dict[str, typing.Any]]]"
                ]
            }
        },
        "PsionicMatrix.__init__": {
            "name": "__init__",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sources": [
                    "str",
                    "None",
                    "bool"
                ]
            }
        },
        "PsionicMatrix.covers": {
            "name": "covers",
            "location": 33,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "position": [
                    "str",
                    "tuple[float]"
                ]
            }
        }
    },
    "sc2-bot-master/sc2/protocol.py": {
        "Protocol.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ws": [
                    "int",
                    "float"
                ]
            }
        }
    },
    "sc2-bot-master/sc2/sc2process.py": {
        "kill_switch.add": {
            "name": "add",
            "location": 24,
            "return": [],
            "arguments": {
                "cls": [],
                "value": []
            }
        },
        "kill_switch.kill_all": {
            "name": "kill_all",
            "location": 29,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "SC2Process.__init__": {
            "name": "__init__",
            "location": 35,
            "return": [],
            "arguments": {
                "self": [],
                "host": [],
                "port": [],
                "fullscreen": []
            }
        },
        "SC2Process.ws_url": {
            "name": "ws_url",
            "location": 73,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SC2Process._launch": {
            "name": "_launch",
            "location": 76,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SC2Process._clean": {
            "name": "_clean",
            "location": 124,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SC2Process.__aenter__.signal_handler": {
            "name": "signal_handler",
            "location": 53,
            "return": [],
            "arguments": {
                "signal": [],
                "frame": []
            }
        }
    },
    "sc2-bot-master/sc2/score.py": {
        "ScoreDetails.__init__": {
            "name": "__init__",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "proto": [
                    "str",
                    "bytes"
                ]
            }
        },
        "ScoreDetails.score_type": {
            "name": "score_type",
            "location": 10,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ScoreDetails.score": {
            "name": "score",
            "location": 14,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ScoreDetails.idle_production_time": {
            "name": "idle_production_time",
            "location": 18,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ScoreDetails.idle_worker_time": {
            "name": "idle_worker_time",
            "location": 22,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ScoreDetails.total_value_units": {
            "name": "total_value_units",
            "location": 26,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ScoreDetails.total_value_structures": {
            "name": "total_value_structures",
            "location": 30,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ScoreDetails.killed_value_units": {
            "name": "killed_value_units",
            "location": 34,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ScoreDetails.killed_value_structures": {
            "name": "killed_value_structures",
            "location": 38,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ScoreDetails.collected_minerals": {
            "name": "collected_minerals",
            "location": 42,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ScoreDetails.collected_vespene": {
            "name": "collected_vespene",
            "location": 46,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ScoreDetails.collection_rate_minerals": {
            "name": "collection_rate_minerals",
            "location": 50,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ScoreDetails.collection_rate_vespene": {
            "name": "collection_rate_vespene",
            "location": 54,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ScoreDetails.spent_minerals": {
            "name": "spent_minerals",
            "location": 58,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ScoreDetails.spent_vespene": {
            "name": "spent_vespene",
            "location": 62,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ScoreDetails.food_used_none": {
            "name": "food_used_none",
            "location": 66,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ScoreDetails.food_used_army": {
            "name": "food_used_army",
            "location": 70,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ScoreDetails.food_used_economy": {
            "name": "food_used_economy",
            "location": 74,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ScoreDetails.food_used_technology": {
            "name": "food_used_technology",
            "location": 78,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ScoreDetails.food_used_upgrade": {
            "name": "food_used_upgrade",
            "location": 82,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ScoreDetails.killed_minerals_none": {
            "name": "killed_minerals_none",
            "location": 86,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ScoreDetails.killed_minerals_army": {
            "name": "killed_minerals_army",
            "location": 90,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ScoreDetails.killed_minerals_economy": {
            "name": "killed_minerals_economy",
            "location": 94,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ScoreDetails.killed_minerals_technology": {
            "name": "killed_minerals_technology",
            "location": 98,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ScoreDetails.killed_minerals_upgrade": {
            "name": "killed_minerals_upgrade",
            "location": 102,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ScoreDetails.killed_vespene_none": {
            "name": "killed_vespene_none",
            "location": 106,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ScoreDetails.killed_vespene_army": {
            "name": "killed_vespene_army",
            "location": 110,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ScoreDetails.killed_vespene_economy": {
            "name": "killed_vespene_economy",
            "location": 114,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ScoreDetails.killed_vespene_technology": {
            "name": "killed_vespene_technology",
            "location": 118,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ScoreDetails.killed_vespene_upgrade": {
            "name": "killed_vespene_upgrade",
            "location": 122,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ScoreDetails.lost_minerals_none": {
            "name": "lost_minerals_none",
            "location": 126,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ScoreDetails.lost_minerals_army": {
            "name": "lost_minerals_army",
            "location": 130,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ScoreDetails.lost_minerals_economy": {
            "name": "lost_minerals_economy",
            "location": 134,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ScoreDetails.lost_minerals_technology": {
            "name": "lost_minerals_technology",
            "location": 138,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ScoreDetails.lost_minerals_upgrade": {
            "name": "lost_minerals_upgrade",
            "location": 142,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ScoreDetails.lost_vespene_none": {
            "name": "lost_vespene_none",
            "location": 146,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ScoreDetails.lost_vespene_army": {
            "name": "lost_vespene_army",
            "location": 150,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ScoreDetails.lost_vespene_economy": {
            "name": "lost_vespene_economy",
            "location": 154,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ScoreDetails.lost_vespene_technology": {
            "name": "lost_vespene_technology",
            "location": 158,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ScoreDetails.lost_vespene_upgrade": {
            "name": "lost_vespene_upgrade",
            "location": 162,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ScoreDetails.friendly_fire_minerals_none": {
            "name": "friendly_fire_minerals_none",
            "location": 166,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ScoreDetails.friendly_fire_minerals_army": {
            "name": "friendly_fire_minerals_army",
            "location": 170,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ScoreDetails.friendly_fire_minerals_economy": {
            "name": "friendly_fire_minerals_economy",
            "location": 174,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ScoreDetails.friendly_fire_minerals_technology": {
            "name": "friendly_fire_minerals_technology",
            "location": 178,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ScoreDetails.friendly_fire_minerals_upgrade": {
            "name": "friendly_fire_minerals_upgrade",
            "location": 182,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ScoreDetails.friendly_fire_vespene_none": {
            "name": "friendly_fire_vespene_none",
            "location": 186,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ScoreDetails.friendly_fire_vespene_army": {
            "name": "friendly_fire_vespene_army",
            "location": 190,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ScoreDetails.friendly_fire_vespene_economy": {
            "name": "friendly_fire_vespene_economy",
            "location": 194,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ScoreDetails.friendly_fire_vespene_technology": {
            "name": "friendly_fire_vespene_technology",
            "location": 198,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ScoreDetails.friendly_fire_vespene_upgrade": {
            "name": "friendly_fire_vespene_upgrade",
            "location": 202,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ScoreDetails.used_minerals_none": {
            "name": "used_minerals_none",
            "location": 206,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ScoreDetails.used_minerals_army": {
            "name": "used_minerals_army",
            "location": 210,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ScoreDetails.used_minerals_economy": {
            "name": "used_minerals_economy",
            "location": 214,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ScoreDetails.used_minerals_technology": {
            "name": "used_minerals_technology",
            "location": 218,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ScoreDetails.used_minerals_upgrade": {
            "name": "used_minerals_upgrade",
            "location": 222,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ScoreDetails.used_vespene_none": {
            "name": "used_vespene_none",
            "location": 226,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ScoreDetails.used_vespene_army": {
            "name": "used_vespene_army",
            "location": 230,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ScoreDetails.used_vespene_economy": {
            "name": "used_vespene_economy",
            "location": 234,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ScoreDetails.used_vespene_technology": {
            "name": "used_vespene_technology",
            "location": 238,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ScoreDetails.used_vespene_upgrade": {
            "name": "used_vespene_upgrade",
            "location": 242,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ScoreDetails.total_used_minerals_none": {
            "name": "total_used_minerals_none",
            "location": 246,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ScoreDetails.total_used_minerals_army": {
            "name": "total_used_minerals_army",
            "location": 250,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ScoreDetails.total_used_minerals_economy": {
            "name": "total_used_minerals_economy",
            "location": 254,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ScoreDetails.total_used_minerals_technology": {
            "name": "total_used_minerals_technology",
            "location": 258,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ScoreDetails.total_used_minerals_upgrade": {
            "name": "total_used_minerals_upgrade",
            "location": 262,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ScoreDetails.total_used_vespene_none": {
            "name": "total_used_vespene_none",
            "location": 266,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ScoreDetails.total_used_vespene_army": {
            "name": "total_used_vespene_army",
            "location": 270,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ScoreDetails.total_used_vespene_economy": {
            "name": "total_used_vespene_economy",
            "location": 274,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ScoreDetails.total_used_vespene_technology": {
            "name": "total_used_vespene_technology",
            "location": 278,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ScoreDetails.total_used_vespene_upgrade": {
            "name": "total_used_vespene_upgrade",
            "location": 282,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ScoreDetails.total_damage_dealt_life": {
            "name": "total_damage_dealt_life",
            "location": 286,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ScoreDetails.total_damage_dealt_shields": {
            "name": "total_damage_dealt_shields",
            "location": 290,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ScoreDetails.total_damage_dealt_energy": {
            "name": "total_damage_dealt_energy",
            "location": 294,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ScoreDetails.total_damage_taken_life": {
            "name": "total_damage_taken_life",
            "location": 298,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ScoreDetails.total_damage_taken_shields": {
            "name": "total_damage_taken_shields",
            "location": 302,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ScoreDetails.total_damage_taken_energy": {
            "name": "total_damage_taken_energy",
            "location": 306,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ScoreDetails.total_healed_life": {
            "name": "total_healed_life",
            "location": 310,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ScoreDetails.total_healed_shields": {
            "name": "total_healed_shields",
            "location": 314,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ScoreDetails.total_healed_energy": {
            "name": "total_healed_energy",
            "location": 318,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "sc2-bot-master/sc2/tmpfix.py": {},
    "sc2-bot-master/sc2/unit.py": {
        "Unit.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "proto_data": [
                    "dict[, ]",
                    "dict[str, dict[str, typing.Any]]",
                    "dict[str, typing.Union[str,bool]]"
                ],
                "game_data": [
                    "str",
                    "dict[str, str]",
                    "dict[, ]"
                ]
            }
        },
        "Unit.type_id": {
            "name": "type_id",
            "location": 20,
            "return": [
                "UnitTypeId"
            ],
            "arguments": {
                "self": []
            }
        },
        "Unit._type_data": {
            "name": "_type_data",
            "location": 24,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Unit.is_snapshot": {
            "name": "is_snapshot",
            "location": 28,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Unit.is_visible": {
            "name": "is_visible",
            "location": 32,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Unit.alliance": {
            "name": "alliance",
            "location": 36,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Unit.is_mine": {
            "name": "is_mine",
            "location": 40,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Unit.is_enemy": {
            "name": "is_enemy",
            "location": 44,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Unit.tag": {
            "name": "tag",
            "location": 48,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Unit.owner_id": {
            "name": "owner_id",
            "location": 52,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Unit.position": {
            "name": "position",
            "location": 56,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Unit.position3d": {
            "name": "position3d",
            "location": 61,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Unit.distance_to": {
            "name": "distance_to",
            "location": 65,
            "return": [],
            "arguments": {
                "self": [],
                "p": [
                    "bytes",
                    "int",
                    "typing.IO",
                    "list[str]",
                    "str"
                ]
            }
        },
        "Unit.facing": {
            "name": "facing",
            "location": 70,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Unit.radius": {
            "name": "radius",
            "location": 74,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Unit.detect_range": {
            "name": "detect_range",
            "location": 78,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Unit.radar_range": {
            "name": "radar_range",
            "location": 82,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Unit.build_progress": {
            "name": "build_progress",
            "location": 86,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Unit.is_ready": {
            "name": "is_ready",
            "location": 90,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Unit.cloak": {
            "name": "cloak",
            "location": 94,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Unit.is_blip": {
            "name": "is_blip",
            "location": 98,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Unit.is_powered": {
            "name": "is_powered",
            "location": 103,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Unit.is_burrowed": {
            "name": "is_burrowed",
            "location": 108,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Unit.is_flying": {
            "name": "is_flying",
            "location": 112,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Unit.is_structure": {
            "name": "is_structure",
            "location": 116,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Unit.is_light": {
            "name": "is_light",
            "location": 120,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Unit.is_armored": {
            "name": "is_armored",
            "location": 124,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Unit.is_biological": {
            "name": "is_biological",
            "location": 128,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Unit.is_mechanical": {
            "name": "is_mechanical",
            "location": 132,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Unit.is_robotic": {
            "name": "is_robotic",
            "location": 136,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Unit.is_massive": {
            "name": "is_massive",
            "location": 140,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Unit.is_psionic": {
            "name": "is_psionic",
            "location": 144,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Unit.is_mineral_field": {
            "name": "is_mineral_field",
            "location": 148,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Unit.is_vespene_geyser": {
            "name": "is_vespene_geyser",
            "location": 152,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Unit.tech_alias": {
            "name": "tech_alias",
            "location": 156,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Unit.unit_alias": {
            "name": "unit_alias",
            "location": 163,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Unit.race": {
            "name": "race",
            "location": 170,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Unit.health": {
            "name": "health",
            "location": 174,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Unit.health_max": {
            "name": "health_max",
            "location": 178,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Unit.health_percentage": {
            "name": "health_percentage",
            "location": 182,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Unit.shield": {
            "name": "shield",
            "location": 188,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Unit.shield_max": {
            "name": "shield_max",
            "location": 192,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Unit.shield_percentage": {
            "name": "shield_percentage",
            "location": 196,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Unit.energy": {
            "name": "energy",
            "location": 202,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Unit.energy_max": {
            "name": "energy_max",
            "location": 206,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Unit.energy_percentage": {
            "name": "energy_percentage",
            "location": 210,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Unit.mineral_contents": {
            "name": "mineral_contents",
            "location": 216,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Unit.vespene_contents": {
            "name": "vespene_contents",
            "location": 221,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Unit.has_vespene": {
            "name": "has_vespene",
            "location": 226,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Unit.weapon_cooldown": {
            "name": "weapon_cooldown",
            "location": 231,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Unit.cargo_size": {
            "name": "cargo_size",
            "location": 246,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Unit.has_cargo": {
            "name": "has_cargo",
            "location": 251,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Unit.cargo_used": {
            "name": "cargo_used",
            "location": 256,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Unit.cargo_max": {
            "name": "cargo_max",
            "location": 261,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Unit.passengers": {
            "name": "passengers",
            "location": 266,
            "return": [
                "set[PassengerUnit]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Unit.passengers_tags": {
            "name": "passengers_tags",
            "location": 271,
            "return": [
                "set[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Unit.can_attack_ground": {
            "name": "can_attack_ground",
            "location": 275,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Unit.ground_dps": {
            "name": "ground_dps",
            "location": 283,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Unit.ground_range": {
            "name": "ground_range",
            "location": 293,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Unit.can_attack_air": {
            "name": "can_attack_air",
            "location": 303,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Unit.air_dps": {
            "name": "air_dps",
            "location": 312,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Unit.air_range": {
            "name": "air_range",
            "location": 322,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Unit.target_in_range": {
            "name": "target_in_range",
            "location": 331,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "target": [
                    "int",
                    "list[list[]]",
                    "float"
                ],
                "bonus_distance": [
                    "int"
                ]
            }
        },
        "Unit.armor": {
            "name": "armor",
            "location": 342,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Unit.sight_range": {
            "name": "sight_range",
            "location": 347,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Unit.movement_speed": {
            "name": "movement_speed",
            "location": 351,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Unit.is_carrying_minerals": {
            "name": "is_carrying_minerals",
            "location": 355,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Unit.is_carrying_vespene": {
            "name": "is_carrying_vespene",
            "location": 360,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Unit.is_selected": {
            "name": "is_selected",
            "location": 365,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Unit.orders": {
            "name": "orders",
            "location": 369,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Unit.noqueue": {
            "name": "noqueue",
            "location": 373,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Unit.is_moving": {
            "name": "is_moving",
            "location": 377,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Unit.is_attacking": {
            "name": "is_attacking",
            "location": 381,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Unit.is_gathering": {
            "name": "is_gathering",
            "location": 385,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Unit.is_returning": {
            "name": "is_returning",
            "location": 390,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Unit.is_collecting": {
            "name": "is_collecting",
            "location": 395,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Unit.is_constructing_scv": {
            "name": "is_constructing_scv",
            "location": 400,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Unit.is_repairing": {
            "name": "is_repairing",
            "location": 419,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Unit.order_target": {
            "name": "order_target",
            "location": 427,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Unit.is_idle": {
            "name": "is_idle",
            "location": 437,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Unit.add_on_tag": {
            "name": "add_on_tag",
            "location": 441,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Unit.add_on_land_position": {
            "name": "add_on_land_position",
            "location": 445,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Unit.has_add_on": {
            "name": "has_add_on",
            "location": 450,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Unit.assigned_harvesters": {
            "name": "assigned_harvesters",
            "location": 454,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Unit.ideal_harvesters": {
            "name": "ideal_harvesters",
            "location": 458,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Unit.surplus_harvesters": {
            "name": "surplus_harvesters",
            "location": 462,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Unit.name": {
            "name": "name",
            "location": 467,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Unit.train": {
            "name": "train",
            "location": 470,
            "return": [],
            "arguments": {
                "self": [],
                "unit": [
                    "tuple[]",
                    "list[str]",
                    "bool",
                    "str",
                    "typing.Callable[, ]"
                ]
            }
        },
        "Unit.build": {
            "name": "build",
            "location": 473,
            "return": [],
            "arguments": {
                "self": [],
                "unit": [
                    "tuple[]",
                    "list[str]",
                    "str",
                    "typing.Callable[, ]",
                    "typing.Sequence[str]",
                    "bool"
                ]
            }
        },
        "Unit.research": {
            "name": "research",
            "location": 476,
            "return": [],
            "arguments": {
                "self": [],
                "upgrade": [
                    "tuple[]",
                    "list[str]",
                    "bool",
                    "str",
                    "typing.Callable[, ]"
                ]
            }
        },
        "Unit.has_buff": {
            "name": "has_buff",
            "location": 480,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "buff": [
                    "str",
                    "list[list[int]]",
                    "dict[str, typing.Any]",
                    "bool"
                ]
            }
        },
        "Unit.warp_in": {
            "name": "warp_in",
            "location": 484,
            "return": [],
            "arguments": {
                "self": [],
                "unit": [
                    "int"
                ],
                "placement": [
                    "int",
                    "None",
                    "list[str]",
                    "str"
                ]
            }
        },
        "Unit.attack": {
            "name": "attack",
            "location": 488,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Unit.gather": {
            "name": "gather",
            "location": 491,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Unit.return_resource": {
            "name": "return_resource",
            "location": 494,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Unit.move": {
            "name": "move",
            "location": 497,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Unit.hold_position": {
            "name": "hold_position",
            "location": 500,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Unit.stop": {
            "name": "stop",
            "location": 503,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Unit.repair": {
            "name": "repair",
            "location": 506,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Unit.__hash__": {
            "name": "__hash__",
            "location": 509,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Unit.__call__": {
            "name": "__call__",
            "location": 512,
            "return": [
                "UnitCommand"
            ],
            "arguments": {
                "self": [],
                "ability": [
                    "str"
                ]
            }
        },
        "Unit.__repr__": {
            "name": "__repr__",
            "location": 515,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "UnitOrder.from_proto": {
            "name": "from_proto",
            "location": 521,
            "return": [],
            "arguments": {
                "cls": [
                    "dict[, ]",
                    "str"
                ],
                "proto": [],
                "game_data": [
                    "dict[, ]",
                    "str"
                ]
            }
        },
        "UnitOrder.__init__": {
            "name": "__init__",
            "location": 530,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ability": [
                    "int",
                    "float"
                ],
                "target": [
                    "int",
                    "float"
                ],
                "progress": [
                    "None",
                    "int",
                    "float"
                ]
            }
        },
        "UnitOrder.__repr__": {
            "name": "__repr__",
            "location": 535,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "PassengerUnit.__init__": {
            "name": "__init__",
            "location": 540,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "proto_data": [
                    "dict[, ]",
                    "typing.Sequence[str]",
                    "str"
                ],
                "game_data": [
                    "str",
                    "dict[str, str]",
                    "dict[, ]"
                ]
            }
        },
        "PassengerUnit.__repr__": {
            "name": "__repr__",
            "location": 545,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "PassengerUnit.type_id": {
            "name": "type_id",
            "location": 549,
            "return": [
                "UnitTypeId"
            ],
            "arguments": {
                "self": []
            }
        },
        "PassengerUnit._type_data": {
            "name": "_type_data",
            "location": 553,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PassengerUnit.name": {
            "name": "name",
            "location": 557,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PassengerUnit.race": {
            "name": "race",
            "location": 561,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PassengerUnit.tag": {
            "name": "tag",
            "location": 565,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PassengerUnit.is_structure": {
            "name": "is_structure",
            "location": 569,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "PassengerUnit.is_light": {
            "name": "is_light",
            "location": 573,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "PassengerUnit.is_armored": {
            "name": "is_armored",
            "location": 577,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "PassengerUnit.is_biological": {
            "name": "is_biological",
            "location": 581,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "PassengerUnit.is_mechanical": {
            "name": "is_mechanical",
            "location": 585,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "PassengerUnit.is_robotic": {
            "name": "is_robotic",
            "location": 589,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "PassengerUnit.is_massive": {
            "name": "is_massive",
            "location": 593,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "PassengerUnit.cargo_size": {
            "name": "cargo_size",
            "location": 597,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PassengerUnit.can_attack_ground": {
            "name": "can_attack_ground",
            "location": 602,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "PassengerUnit.ground_dps": {
            "name": "ground_dps",
            "location": 610,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "PassengerUnit.ground_range": {
            "name": "ground_range",
            "location": 620,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "PassengerUnit.can_attack_air": {
            "name": "can_attack_air",
            "location": 630,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "PassengerUnit.air_dps": {
            "name": "air_dps",
            "location": 639,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "PassengerUnit.air_range": {
            "name": "air_range",
            "location": 649,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "PassengerUnit.armor": {
            "name": "armor",
            "location": 659,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PassengerUnit.sight_range": {
            "name": "sight_range",
            "location": 664,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PassengerUnit.movement_speed": {
            "name": "movement_speed",
            "location": 668,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PassengerUnit.health": {
            "name": "health",
            "location": 672,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PassengerUnit.health_max": {
            "name": "health_max",
            "location": 676,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PassengerUnit.health_percentage": {
            "name": "health_percentage",
            "location": 680,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "PassengerUnit.shield": {
            "name": "shield",
            "location": 686,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PassengerUnit.shield_max": {
            "name": "shield_max",
            "location": 690,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PassengerUnit.shield_percentage": {
            "name": "shield_percentage",
            "location": 694,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "PassengerUnit.energy": {
            "name": "energy",
            "location": 700,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PassengerUnit.energy_max": {
            "name": "energy_max",
            "location": 704,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PassengerUnit.energy_percentage": {
            "name": "energy_percentage",
            "location": 708,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "sc2-bot-master/sc2/units.py": {
        "Units.from_proto": {
            "name": "from_proto",
            "location": 11,
            "return": [],
            "arguments": {
                "cls": [
                    "str",
                    "int",
                    "typing.TextIO"
                ],
                "units": [
                    "str"
                ],
                "game_data": [
                    "str",
                    "int",
                    "typing.TextIO"
                ]
            }
        },
        "Units.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "units": [
                    "set[str]",
                    "int"
                ],
                "game_data": [
                    "dict[str, typing.Any]",
                    "str",
                    "list[str]",
                    "None"
                ]
            }
        },
        "Units.__call__": {
            "name": "__call__",
            "location": 21,
            "return": [
                "UnitSelection"
            ],
            "arguments": {
                "self": []
            }
        },
        "Units.select": {
            "name": "select",
            "location": 24,
            "return": [
                "UnitSelection"
            ],
            "arguments": {
                "self": []
            }
        },
        "Units.__or__": {
            "name": "__or__",
            "location": 27,
            "return": [
                "Units"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "str"
                ]
            }
        },
        "Units.__and__": {
            "name": "__and__",
            "location": 32,
            "return": [
                "Units"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "str"
                ]
            }
        },
        "Units.__sub__": {
            "name": "__sub__",
            "location": 37,
            "return": [
                "Units"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "set[T]",
                    "set[]",
                    "str"
                ]
            }
        },
        "Units.amount": {
            "name": "amount",
            "location": 43,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Units.empty": {
            "name": "empty",
            "location": 47,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Units.exists": {
            "name": "exists",
            "location": 51,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Units.find_by_tag": {
            "name": "find_by_tag",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tag": [
                    "str",
                    "list[str]",
                    "dict[, ]"
                ]
            }
        },
        "Units.by_tag": {
            "name": "by_tag",
            "location": 60,
            "return": [
                "typing.Callable[[], typing.Any]",
                "tuple[]",
                "None"
            ],
            "arguments": {
                "self": [],
                "tag": [
                    "str",
                    "bool",
                    "list[str]"
                ]
            }
        },
        "Units.first": {
            "name": "first",
            "location": 67,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Units.take": {
            "name": "take",
            "location": 71,
            "return": [],
            "arguments": {
                "self": [],
                "n": [
                    "int",
                    "str",
                    "None",
                    "typing.Sequence[T]"
                ],
                "require_all": [
                    "bool"
                ]
            }
        },
        "Units.random": {
            "name": "random",
            "location": 76,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Units.random_or": {
            "name": "random_or",
            "location": 80,
            "return": [
                "list[str]",
                "int",
                "float",
                "typing.AbstractSet"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "list[str]",
                    "int",
                    "float",
                    "typing.AbstractSet"
                ]
            }
        },
        "Units.random_group_of": {
            "name": "random_group_of",
            "location": 86,
            "return": [
                "Units"
            ],
            "arguments": {
                "self": [],
                "n": [
                    "int",
                    "str",
                    "collections.abc.Awaitable[]"
                ]
            }
        },
        "Units.in_attack_range_of": {
            "name": "in_attack_range_of",
            "location": 95,
            "return": [],
            "arguments": {
                "self": [],
                "unit": [
                    "float",
                    "tuple[typing.Union[float,float]]",
                    "tuple[]"
                ],
                "bonus_distance": [
                    "int"
                ]
            }
        },
        "Units.closest_distance_to": {
            "name": "closest_distance_to",
            "location": 99,
            "return": [],
            "arguments": {
                "self": [],
                "position": [
                    "float",
                    "int",
                    "None",
                    "str"
                ]
            }
        },
        "Units.furthest_distance_to": {
            "name": "furthest_distance_to",
            "location": 106,
            "return": [],
            "arguments": {
                "self": [],
                "position": [
                    "float",
                    "int",
                    "None",
                    "str"
                ]
            }
        },
        "Units.closest_to": {
            "name": "closest_to",
            "location": 113,
            "return": [],
            "arguments": {
                "self": [],
                "position": [
                    "bytes",
                    "int",
                    "typing.IO",
                    "list[str]",
                    "str"
                ]
            }
        },
        "Units.furthest_to": {
            "name": "furthest_to",
            "location": 119,
            "return": [],
            "arguments": {
                "self": [],
                "position": [
                    "bytes",
                    "int",
                    "typing.IO",
                    "list[str]",
                    "str"
                ]
            }
        },
        "Units.closer_than": {
            "name": "closer_than",
            "location": 125,
            "return": [],
            "arguments": {
                "self": [],
                "distance": [
                    "bool",
                    "None",
                    "list[int]"
                ],
                "position": [
                    "str"
                ]
            }
        },
        "Units.further_than": {
            "name": "further_than",
            "location": 130,
            "return": [],
            "arguments": {
                "self": [],
                "distance": [
                    "bool",
                    "None",
                    "list[int]"
                ],
                "position": [
                    "str"
                ]
            }
        },
        "Units.subgroup": {
            "name": "subgroup",
            "location": 135,
            "return": [
                "Units"
            ],
            "arguments": {
                "self": [],
                "units": []
            }
        },
        "Units.filter": {
            "name": "filter",
            "location": 138,
            "return": [],
            "arguments": {
                "self": [],
                "pred": [
                    "float",
                    "int"
                ]
            }
        },
        "Units.sorted": {
            "name": "sorted",
            "location": 141,
            "return": [],
            "arguments": {
                "self": [],
                "keyfn": [
                    "list[tuple[typing.Union[typing.Any,typing.Any]]]",
                    "list[]",
                    "list[tuple[typing.Union[int,typing.Any]]]"
                ],
                "reverse": [
                    "bool"
                ]
            }
        },
        "Units.sorted_by_distance_to": {
            "name": "sorted_by_distance_to",
            "location": 144,
            "return": [],
            "arguments": {
                "self": [],
                "position": [
                    "bool",
                    "dict[str, str]",
                    "None",
                    "set[str]",
                    "tuple[typing.Union[str,...]]"
                ],
                "reverse": [
                    "bool"
                ]
            }
        },
        "Units.tags_in": {
            "name": "tags_in",
            "location": 149,
            "return": [],
            "arguments": {
                "self": [],
                "other": [
                    "set[int]",
                    "list[int]",
                    "dict[int, typing.Any]",
                    "list[typing.Type]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "Units.tags_not_in": {
            "name": "tags_not_in",
            "location": 156,
            "return": [],
            "arguments": {
                "self": [],
                "other": [
                    "set[int]",
                    "list[int]",
                    "dict[int, typing.Any]",
                    "list[P]",
                    "list[typing.Type]"
                ]
            }
        },
        "Units.of_type": {
            "name": "of_type",
            "location": 163,
            "return": [],
            "arguments": {
                "self": [],
                "other": [
                    "set[U]",
                    "list[U]",
                    "dict[U, typing.Any]",
                    "str",
                    "None"
                ]
            }
        },
        "Units.exclude_type": {
            "name": "exclude_type",
            "location": 172,
            "return": [],
            "arguments": {
                "self": [],
                "other": [
                    "set[U]",
                    "list[U]",
                    "dict[U, typing.Any]"
                ]
            }
        },
        "Units.same_tech": {
            "name": "same_tech",
            "location": 181,
            "return": [],
            "arguments": {
                "self": [],
                "other": [
                    "bool",
                    "typing.Type"
                ]
            }
        },
        "Units.same_unit": {
            "name": "same_unit",
            "location": 201,
            "return": [],
            "arguments": {
                "self": [],
                "other": [
                    "bool",
                    "typing.Type"
                ]
            }
        },
        "Units.center": {
            "name": "center",
            "location": 223,
            "return": [
                "Point2"
            ],
            "arguments": {
                "self": []
            }
        },
        "Units.selected": {
            "name": "selected",
            "location": 231,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Units.tags": {
            "name": "tags",
            "location": 235,
            "return": [
                "set[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Units.ready": {
            "name": "ready",
            "location": 239,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Units.not_ready": {
            "name": "not_ready",
            "location": 243,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Units.noqueue": {
            "name": "noqueue",
            "location": 247,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Units.idle": {
            "name": "idle",
            "location": 251,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Units.owned": {
            "name": "owned",
            "location": 255,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Units.enemy": {
            "name": "enemy",
            "location": 259,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Units.flying": {
            "name": "flying",
            "location": 263,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Units.not_flying": {
            "name": "not_flying",
            "location": 267,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Units.structure": {
            "name": "structure",
            "location": 271,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Units.not_structure": {
            "name": "not_structure",
            "location": 275,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Units.gathering": {
            "name": "gathering",
            "location": 279,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Units.returning": {
            "name": "returning",
            "location": 283,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Units.collecting": {
            "name": "collecting",
            "location": 287,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Units.mineral_field": {
            "name": "mineral_field",
            "location": 291,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Units.vespene_geyser": {
            "name": "vespene_geyser",
            "location": 295,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Units.prefer_idle": {
            "name": "prefer_idle",
            "location": 299,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Units.prefer_close_to": {
            "name": "prefer_close_to",
            "location": 302,
            "return": [],
            "arguments": {
                "self": [],
                "p": [
                    "float",
                    "int",
                    "None",
                    "str"
                ]
            }
        },
        "UnitSelection.__init__": {
            "name": "__init__",
            "location": 307,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parent": [
                    "str"
                ],
                "unit_type_id": [
                    "None",
                    "int",
                    "str",
                    "list[float]"
                ]
            }
        },
        "UnitSelection.matches": {
            "name": "matches",
            "location": 315,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "unit": [
                    "bool",
                    "str"
                ]
            }
        }
    },
    "sc2-bot-master/sc2/unit_command.py": {
        "UnitCommand.__init__": {
            "name": "__init__",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ability": [
                    "typing.Iterable[str]",
                    "str",
                    "int"
                ],
                "unit": [
                    "str",
                    "bool",
                    "dict[, ]"
                ],
                "target": [
                    "None",
                    "list[str]",
                    "str",
                    "int",
                    "typing.Callable[, ]",
                    "typing.Hashable",
                    "float"
                ],
                "queue": [
                    "bool"
                ]
            }
        },
        "UnitCommand.combining_tuple": {
            "name": "combining_tuple",
            "location": 17,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "UnitCommand.__repr__": {
            "name": "__repr__",
            "location": 20,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "sc2-bot-master/sc2/__init__.py": {
        "is_submodule": {
            "name": "is_submodule",
            "location": 3,
            "return": [
                "bool"
            ],
            "arguments": {
                "path": []
            }
        }
    },
    "sc2-bot-master/sc2/helpers/control_group.py": {
        "ControlGroup.__init__": {
            "name": "__init__",
            "location": 2,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "units": [
                    "list[int]",
                    "str"
                ]
            }
        },
        "ControlGroup.__hash__": {
            "name": "__hash__",
            "location": 5,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "ControlGroup.select_units": {
            "name": "select_units",
            "location": 8,
            "return": [],
            "arguments": {
                "self": [],
                "units": []
            }
        },
        "ControlGroup.missing_unit_tags": {
            "name": "missing_unit_tags",
            "location": 11,
            "return": [
                "set[]"
            ],
            "arguments": {
                "self": [],
                "units": []
            }
        },
        "ControlGroup.empty": {
            "name": "empty",
            "location": 15,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "ControlGroup.add_unit": {
            "name": "add_unit",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "unit": [
                    "str",
                    "bool"
                ]
            }
        },
        "ControlGroup.add_units": {
            "name": "add_units",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "units": [
                    "str",
                    "bytes",
                    "list[str]"
                ]
            }
        },
        "ControlGroup.remove_unit": {
            "name": "remove_unit",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "unit": [
                    "str",
                    "bool",
                    "list[str]"
                ]
            }
        },
        "ControlGroup.remove_units": {
            "name": "remove_units",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "units": [
                    "str"
                ]
            }
        }
    },
    "sc2-bot-master/sc2/helpers/__init__.py": {
        "is_submodule": {
            "name": "is_submodule",
            "location": 3,
            "return": [
                "bool"
            ],
            "arguments": {
                "path": []
            }
        }
    },
    "sc2-bot-master/sc2/ids/ability_id.py": {},
    "sc2-bot-master/sc2/ids/buff_id.py": {},
    "sc2-bot-master/sc2/ids/effect_id.py": {},
    "sc2-bot-master/sc2/ids/unit_typeid.py": {},
    "sc2-bot-master/sc2/ids/upgrade_id.py": {},
    "sc2-bot-master/sc2/ids/__init__.py": {},
    "sc2-bot-master/test/autotest_bot.py": {
        "main": {
            "name": "main",
            "location": 323,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "TestBot.__init__": {
            "name": "__init__",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "sc2-bot-master/test/conftest.py": {
        "pytest_addoption": {
            "name": "pytest_addoption",
            "location": 2,
            "return": [
                "None"
            ],
            "arguments": {
                "parser": []
            }
        },
        "pytest_collection_modifyitems": {
            "name": "pytest_collection_modifyitems",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {
                "config": [],
                "items": [
                    "list[]",
                    "dict[, ]",
                    "str"
                ]
            }
        }
    },
    "sc2-bot-master/test/test_directions.py": {
        "rad_diff": {
            "name": "rad_diff",
            "location": 10,
            "return": [
                "int",
                "float"
            ],
            "arguments": {
                "a": [
                    "float",
                    "int"
                ],
                "b": [
                    "float",
                    "int"
                ]
            }
        },
        "test_test_rad_diff": {
            "name": "test_test_rad_diff",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_distance": {
            "name": "test_distance",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_towards": {
            "name": "test_towards",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_random_on_distance": {
            "name": "test_random_on_distance",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_towards_random_angle": {
            "name": "test_towards_random_angle",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_random_on_distance.get_points": {
            "name": "get_points",
            "location": 38,
            "return": [
                "set[]"
            ],
            "arguments": {
                "source": [],
                "distance": [],
                "n": [
                    "int"
                ]
            }
        },
        "test_random_on_distance.verify_distances": {
            "name": "verify_distances",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "source": [],
                "distance": [],
                "n": [
                    "int"
                ]
            }
        },
        "test_random_on_distance.verify_angles": {
            "name": "verify_angles",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "source": [],
                "distance": [],
                "n": [
                    "int"
                ]
            }
        },
        "test_towards_random_angle.random_points": {
            "name": "random_points",
            "location": 66,
            "return": [
                "set[Point2]"
            ],
            "arguments": {
                "n": [
                    "int"
                ]
            }
        },
        "test_towards_random_angle.verify": {
            "name": "verify",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "source": [],
                "target": [],
                "max_difference": [
                    "int"
                ],
                "n": [
                    "int"
                ]
            }
        }
    },
    "sc2-bot-master/test/test_examples.py": {
        "run_example": {
            "name": "run_example",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "caplog": [
                    "str",
                    "int",
                    "list[]"
                ],
                "race": [
                    "typing.Callable[..., None]"
                ],
                "bot": [
                    "typing.Callable[..., None]"
                ]
            }
        },
        "test_proxy_rax_example": {
            "name": "test_proxy_rax_example",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "caplog": [
                    "str",
                    "float"
                ]
            }
        },
        "test_ramp_wall_example": {
            "name": "test_ramp_wall_example",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "caplog": [
                    "str",
                    "float"
                ]
            }
        },
        "test_cannon_rush_example": {
            "name": "test_cannon_rush_example",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "caplog": [
                    "str",
                    "float"
                ]
            }
        },
        "test_warpgate_example": {
            "name": "test_warpgate_example",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "caplog": [
                    "str",
                    "float"
                ]
            }
        },
        "test_zerg_rush_example": {
            "name": "test_zerg_rush_example",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "caplog": [
                    "str",
                    "float"
                ]
            }
        },
        "test_broodlord_example": {
            "name": "test_broodlord_example",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "caplog": [
                    "str",
                    "float"
                ]
            }
        }
    },
    "sc2-bot-master/test/travis_test_script.py": {}
}
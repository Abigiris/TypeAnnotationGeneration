{
    "scalpl-master/setup.py": {},
    "scalpl-master/benchmarks/perfomance_comparison.py": {
        "TestDictPerformance.setUp": {
            "name": "setUp",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDictPerformance.execute": {
            "name": "execute",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "statement": [
                    "str",
                    "dict[, ]",
                    "typing.Type"
                ],
                "method": [
                    "str",
                    "int",
                    "list[str]"
                ]
            }
        },
        "TestDictPerformance.test_init": {
            "name": "test_init",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDictPerformance.test_getitem": {
            "name": "test_getitem",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDictPerformance.test_getitem_through_list": {
            "name": "test_getitem_through_list",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDictPerformance.test_setitem": {
            "name": "test_setitem",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDictPerformance.test_setitem_through_list": {
            "name": "test_setitem_through_list",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCutPerformance.test_getitem": {
            "name": "test_getitem",
            "location": 108,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCutPerformance.test_getitem_through_list": {
            "name": "test_getitem_through_list",
            "location": 111,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCutPerformance.test_setitem": {
            "name": "test_setitem",
            "location": 117,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCutPerformance.test_setitem_through_list": {
            "name": "test_setitem_through_list",
            "location": 121,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBoxPerformance.test_getitem": {
            "name": "test_getitem",
            "location": 135,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBoxPerformance.test_getitem_through_list": {
            "name": "test_getitem_through_list",
            "location": 139,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBoxPerformance.test_setitem": {
            "name": "test_setitem",
            "location": 146,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBoxPerformance.test_setitem_through_list": {
            "name": "test_setitem_through_list",
            "location": 151,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "scalpl-master/scalpl/scalpl.py": {
        "key_error": {
            "name": "key_error",
            "location": 22,
            "return": [],
            "arguments": {
                "failing_key": [],
                "original_path": [],
                "raised_error": []
            }
        },
        "index_error": {
            "name": "index_error",
            "location": 29,
            "return": [],
            "arguments": {
                "failing_key": [],
                "original_path": [],
                "raised_error": []
            }
        },
        "type_error": {
            "name": "type_error",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "failing_key": [],
                "original_path": [],
                "item": []
            }
        },
        "split_path": {
            "name": "split_path",
            "location": 43,
            "return": [
                "list[int]"
            ],
            "arguments": {
                "path": [],
                "key_separator": []
            }
        },
        "traverse": {
            "name": "traverse",
            "location": 69,
            "return": [],
            "arguments": {
                "data": [],
                "keys": [],
                "original_path": []
            }
        },
        "Cut.__init__": {
            "name": "__init__",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "None"
                ],
                "sep": [
                    "typing.Text"
                ]
            }
        },
        "Cut.__bool__": {
            "name": "__bool__",
            "location": 107,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Cut.__contains__": {
            "name": "__contains__",
            "location": 110,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "path": []
            }
        },
        "Cut.__delitem__": {
            "name": "__delitem__",
            "location": 124,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": []
            }
        },
        "Cut.__eq__": {
            "name": "__eq__",
            "location": 137,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Cut.__getitem__": {
            "name": "__getitem__",
            "location": 140,
            "return": [],
            "arguments": {
                "self": [],
                "path": []
            }
        },
        "Cut.__iter__": {
            "name": "__iter__",
            "location": 153,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Cut.__len__": {
            "name": "__len__",
            "location": 156,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Cut.__ne__": {
            "name": "__ne__",
            "location": 159,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Cut.__setitem__": {
            "name": "__setitem__",
            "location": 162,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [],
                "value": []
            }
        },
        "Cut.__str__": {
            "name": "__str__",
            "location": 173,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Cut.__repr__": {
            "name": "__repr__",
            "location": 176,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "Cut.all": {
            "name": "all",
            "location": 179,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "self": [],
                "path": []
            }
        },
        "Cut.clear": {
            "name": "clear",
            "location": 185,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Cut.copy": {
            "name": "copy",
            "location": 188,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Cut.fromkeys": {
            "name": "fromkeys",
            "location": 192,
            "return": [],
            "arguments": {
                "cls": [],
                "seq": [],
                "value": [
                    "None"
                ]
            }
        },
        "Cut.get": {
            "name": "get",
            "location": 197,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [],
                "default": [
                    "None"
                ]
            }
        },
        "Cut.keys": {
            "name": "keys",
            "location": 203,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Cut.items": {
            "name": "items",
            "location": 206,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Cut.pop": {
            "name": "pop",
            "location": 209,
            "return": [],
            "arguments": {
                "self": [],
                "path": []
            }
        },
        "Cut.popitem": {
            "name": "popitem",
            "location": 235,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Cut.setdefault": {
            "name": "setdefault",
            "location": 238,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [],
                "default": [
                    "None"
                ]
            }
        },
        "Cut.update": {
            "name": "update",
            "location": 261,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "None"
                ]
            }
        },
        "Cut.values": {
            "name": "values",
            "location": 272,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "scalpl-master/scalpl/__init__.py": {},
    "scalpl-master/tests/tests.py": {
        "dict_type": {
            "name": "dict_type",
            "location": 10,
            "return": [],
            "arguments": {
                "request": [
                    "str"
                ]
            }
        },
        "test_bool": {
            "name": "test_bool",
            "location": 138,
            "return": [
                "None"
            ],
            "arguments": {
                "dict_type": [
                    "typing.Mapping",
                    "typing.Type",
                    "list[str]",
                    "dict[str, typing.Any]",
                    "dict[str, typing.Iterable[typing.Any]]"
                ],
                "data": [
                    "typing.Mapping",
                    "typing.Type",
                    "list[str]",
                    "dict[str, typing.Any]",
                    "dict[str, typing.Iterable[typing.Any]]"
                ],
                "result": [
                    "str",
                    "int",
                    "dict[str, tuple[typing.Union[str,str]]]",
                    "typing.Sequence[str]",
                    "list[]",
                    "None"
                ]
            }
        },
        "test_clear": {
            "name": "test_clear",
            "location": 143,
            "return": [
                "None"
            ],
            "arguments": {
                "dict_type": [
                    "str",
                    "None",
                    "bool",
                    "bytes"
                ]
            }
        },
        "test_copy": {
            "name": "test_copy",
            "location": 149,
            "return": [
                "None"
            ],
            "arguments": {
                "dict_type": [
                    "str"
                ]
            }
        },
        "test_items": {
            "name": "test_items",
            "location": 189,
            "return": [
                "None"
            ],
            "arguments": {
                "dict_type": [
                    "str",
                    "bytes"
                ]
            }
        },
        "test_iter": {
            "name": "test_iter",
            "location": 194,
            "return": [
                "None"
            ],
            "arguments": {
                "dict_type": [
                    "str",
                    "typing.Type",
                    "set[str]"
                ]
            }
        },
        "test_keys": {
            "name": "test_keys",
            "location": 199,
            "return": [
                "None"
            ],
            "arguments": {
                "dict_type": [
                    "str",
                    "bool"
                ]
            }
        },
        "test_len": {
            "name": "test_len",
            "location": 204,
            "return": [
                "None"
            ],
            "arguments": {
                "dict_type": [
                    "str",
                    "None",
                    "bool",
                    "bytes"
                ]
            }
        },
        "test_popitem": {
            "name": "test_popitem",
            "location": 209,
            "return": [
                "None"
            ],
            "arguments": {
                "dict_type": [
                    "str",
                    "None",
                    "bool",
                    "bytes"
                ]
            }
        },
        "TestSplitPath.setup": {
            "name": "setup",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSplitPath.test_split_path": {
            "name": "test_split_path",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "int",
                    "tuple[str]",
                    "typing.Sequence[str]"
                ],
                "result": [
                    "str",
                    "int",
                    "tuple[str]",
                    "typing.Sequence[str]"
                ]
            }
        },
        "TestSplitPath.test_error_when_index_is_not_an_integer": {
            "name": "test_error_when_index_is_not_an_integer",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ],
                "failing_index": [
                    "str",
                    "typing.Callable[typing.Any, None]",
                    "None"
                ]
            }
        },
        "TestSplitPath.test_error_when_missing_brackets": {
            "name": "test_error_when_missing_brackets",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ]
            }
        },
        "TestTraverse.test_traverse": {
            "name": "test_traverse",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "str",
                    "list[str]",
                    "int"
                ],
                "keys": [
                    "str",
                    "list[str]",
                    "int"
                ],
                "original_path": [
                    "str",
                    "list[str]",
                    "int"
                ],
                "result": [
                    "str",
                    "list[str]",
                    "int"
                ]
            }
        },
        "TestTraverse.test_type_error": {
            "name": "test_type_error",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "str"
                ],
                "keys": [
                    "str"
                ],
                "original_path": [
                    "str",
                    "list[str]"
                ],
                "failing_key": [
                    "str",
                    "None",
                    "list[str]"
                ],
                "failing_item_type": [
                    "str",
                    "None",
                    "list[str]"
                ]
            }
        },
        "TestTraverse.test_key_error": {
            "name": "test_key_error",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTraverse.test_index_error": {
            "name": "test_index_error",
            "location": 115,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestInit.test_without_data": {
            "name": "test_without_data",
            "location": 127,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestInit.test_with_an_empty_dict": {
            "name": "test_with_an_empty_dict",
            "location": 131,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dict_type": [
                    "str",
                    "tuple[str]",
                    "list[str]",
                    "int"
                ]
            }
        },
        "TestEquals.test_against_another_scalpl_class": {
            "name": "test_against_another_scalpl_class",
            "location": 156,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dict_type": [
                    "str"
                ]
            }
        },
        "TestEquals.test_against_another_dict": {
            "name": "test_against_another_dict",
            "location": 161,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dict_type": [
                    "typing.Type",
                    "dict[, ]",
                    "str",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "TestEquals.test_against_another_ordered_dict": {
            "name": "test_against_another_ordered_dict",
            "location": 166,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dict_type": [
                    "str",
                    "typing.Type",
                    "dict[str, typing.Any]",
                    "dict[, ]"
                ]
            }
        },
        "TestEquals.test_against_another_default_dict": {
            "name": "test_against_another_default_dict",
            "location": 171,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dict_type": [
                    "str",
                    "typing.Type",
                    "dict[, ]"
                ]
            }
        },
        "TestFromkeys.test_fromkeys": {
            "name": "test_fromkeys",
            "location": 178,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFromkeys.test_fromkeys_with_default_value": {
            "name": "test_fromkeys_with_default_value",
            "location": 183,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAll.test_return_generator": {
            "name": "test_return_generator",
            "location": 216,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dict_type": [
                    "str",
                    "typing.Type"
                ]
            }
        },
        "TestAll.test_all": {
            "name": "test_all",
            "location": 221,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dict_type": [
                    "str",
                    "bytes"
                ]
            }
        },
        "TestAll.test_keep_the_same_operator": {
            "name": "test_keep_the_same_operator",
            "location": 226,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dict_type": [
                    "str",
                    "None",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "TestGetitem.test_getitem": {
            "name": "test_getitem",
            "location": 244,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dict_type": [
                    "str",
                    "list[str]"
                ],
                "data": [
                    "str",
                    "list[str]"
                ],
                "key": [
                    "bool",
                    "str",
                    "typing.TextIO",
                    "typing.Callable[..., T]",
                    "dict[, ]"
                ],
                "result": [
                    "bool",
                    "str",
                    "typing.TextIO",
                    "typing.Callable[..., T]",
                    "dict[, ]"
                ]
            }
        },
        "TestGetitem.test_key_error": {
            "name": "test_key_error",
            "location": 248,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dict_type": [
                    "str",
                    "bool",
                    "None",
                    "bytes"
                ]
            }
        },
        "TestGetitem.test_index_error": {
            "name": "test_index_error",
            "location": 258,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dict_type": [
                    "str",
                    "typing.Type",
                    "bool"
                ]
            }
        },
        "TestGetitem.test_type_error": {
            "name": "test_type_error",
            "location": 269,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dict_type": [
                    "str",
                    "None",
                    "bool",
                    "set[str]"
                ]
            }
        },
        "TestSetitem.test_setitem": {
            "name": "test_setitem",
            "location": 293,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dict_type": [
                    "str",
                    "list[str]"
                ],
                "data": [
                    "str",
                    "list[str]"
                ],
                "key": [
                    "str",
                    "dict[, ]",
                    "dict[str, typing.Any]"
                ],
                "result": [
                    "str",
                    "dict[, ]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "TestSetitem.test_index_error": {
            "name": "test_index_error",
            "location": 298,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dict_type": [
                    "str",
                    "typing.Type",
                    "bool"
                ]
            }
        },
        "TestSetitem.test_type_error": {
            "name": "test_type_error",
            "location": 309,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dict_type": [
                    "str",
                    "None",
                    "bool",
                    "set[str]"
                ]
            }
        },
        "TestGet.test_get": {
            "name": "test_get",
            "location": 337,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dict_type": [
                    "str",
                    "list[str]",
                    "int",
                    "None",
                    "typing.Callable[str, str]",
                    "dict[str, str]"
                ],
                "data": [
                    "str",
                    "list[str]",
                    "int",
                    "None",
                    "typing.Callable[str, str]",
                    "dict[str, str]"
                ],
                "key": [
                    "str",
                    "None",
                    "dict[, ]",
                    "dict[str, int]",
                    "bool"
                ],
                "result": [
                    "str",
                    "None",
                    "dict[, ]",
                    "dict[str, int]",
                    "bool"
                ]
            }
        },
        "TestGet.test_with_default": {
            "name": "test_with_default",
            "location": 352,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dict_type": [
                    "str"
                ],
                "data": [
                    "str"
                ],
                "key": [
                    "str"
                ],
                "default": [
                    "str"
                ]
            }
        },
        "TestDelitem.test_delitem": {
            "name": "test_delitem",
            "location": 368,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dict_type": [
                    "str",
                    "list[str]"
                ],
                "data": [
                    "str",
                    "list[str]"
                ],
                "key": [
                    "str",
                    "typing.Callable[, ]",
                    "None",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "TestDelitem.test_key_error": {
            "name": "test_key_error",
            "location": 373,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dict_type": [
                    "str",
                    "bool",
                    "None",
                    "bytes"
                ]
            }
        },
        "TestDelitem.test_index_error": {
            "name": "test_index_error",
            "location": 383,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dict_type": [
                    "str",
                    "typing.Type",
                    "bool"
                ]
            }
        },
        "TestDelitem.test_type_error": {
            "name": "test_type_error",
            "location": 394,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dict_type": [
                    "str",
                    "None",
                    "bool",
                    "set[str]"
                ]
            }
        },
        "TestContains.test_contains": {
            "name": "test_contains",
            "location": 424,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dict_type": [
                    "str",
                    "list[str]"
                ],
                "data": [
                    "str",
                    "list[str]"
                ],
                "key": [
                    "bytes",
                    "str",
                    "int"
                ],
                "result": [
                    "bytes",
                    "str",
                    "int"
                ]
            }
        },
        "TestPop.test_pop": {
            "name": "test_pop",
            "location": 440,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dict_type": [
                    "str"
                ],
                "data": [
                    "str"
                ],
                "key": [
                    "str",
                    "bool",
                    "dict[, ]",
                    "tuple[typing.Union[int,str]]",
                    "bytes",
                    "dict[str, typing.Any]",
                    "list[typing.Any]"
                ],
                "result": [
                    "str",
                    "typing.Hashable",
                    "dict[typing.Any, list[]]",
                    "bytes"
                ]
            }
        },
        "TestPop.test_with_default": {
            "name": "test_with_default",
            "location": 460,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dict_type": [
                    "str"
                ],
                "data": [
                    "str"
                ],
                "key": [
                    "str"
                ],
                "default": [
                    "str"
                ]
            }
        },
        "TestPop.test_key_error_when_no_default_provided": {
            "name": "test_key_error_when_no_default_provided",
            "location": 474,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dict_type": [
                    "str",
                    "list[str]"
                ],
                "data": [
                    "str",
                    "list[str]"
                ],
                "path": [
                    "str",
                    "None"
                ],
                "failing_key": [
                    "str",
                    "int",
                    "bytes"
                ]
            }
        },
        "TestPop.test_list_index_error_when_no_default_provided": {
            "name": "test_list_index_error_when_no_default_provided",
            "location": 494,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dict_type": [
                    "str",
                    "None"
                ],
                "data": [
                    "str",
                    "None"
                ],
                "path": [
                    "str",
                    "bytes"
                ],
                "failing_index": [
                    "str"
                ]
            }
        },
        "TestPop.test_pop_index_error_when_no_default_provided": {
            "name": "test_pop_index_error_when_no_default_provided",
            "location": 507,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dict_type": [
                    "str",
                    "None",
                    "tuple[str]",
                    "list[str]"
                ]
            }
        },
        "TestPop.test_attribute_error": {
            "name": "test_attribute_error",
            "location": 518,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dict_type": [
                    "str",
                    "typing.Type",
                    "bool"
                ]
            }
        },
        "TestUpdate.test_from_dict": {
            "name": "test_from_dict",
            "location": 531,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dict_type": [
                    "str",
                    "bytes",
                    "list[str]"
                ]
            }
        },
        "TestUpdate.test_from_dict_and_keyword_args": {
            "name": "test_from_dict_and_keyword_args",
            "location": 536,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dict_type": [
                    "str",
                    "None",
                    "typing.Callable[, ]",
                    "bool"
                ]
            }
        },
        "TestUpdate.test_from_list": {
            "name": "test_from_list",
            "location": 543,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dict_type": [
                    "str",
                    "bytes",
                    "None",
                    "list[str]"
                ]
            }
        },
        "TestUpdate.test_from_list_and_keyword_args": {
            "name": "test_from_list_and_keyword_args",
            "location": 549,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dict_type": [
                    "str",
                    "None",
                    "list[str]",
                    "set[str]"
                ]
            }
        },
        "TestSetdefault.test_setdefault": {
            "name": "test_setdefault",
            "location": 573,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dict_type": [
                    "str"
                ],
                "data": [
                    "str"
                ],
                "key": [
                    "dict[str, typing.Any]",
                    "bool",
                    "bytes",
                    "str",
                    "list[typing.Any]",
                    "dict[, ]",
                    "set[str]",
                    "tuple[typing.Union[int,str]]"
                ],
                "result": [
                    "dict[str, typing.Any]",
                    "bool",
                    "bytes",
                    "str",
                    "list[typing.Any]",
                    "dict[, ]",
                    "set[str]",
                    "tuple[typing.Union[int,str]]"
                ]
            }
        },
        "TestSetdefault.test_with_default": {
            "name": "test_with_default",
            "location": 589,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dict_type": [
                    "str"
                ],
                "data": [
                    "str"
                ],
                "key": [
                    "str",
                    "list[str]"
                ],
                "default": [
                    "str",
                    "list[str]"
                ]
            }
        },
        "TestSetdefault.test_type_error": {
            "name": "test_type_error",
            "location": 594,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dict_type": [
                    "str",
                    "None",
                    "bool",
                    "set[str]"
                ]
            }
        },
        "TestSetdefault.test_nested_index_error": {
            "name": "test_nested_index_error",
            "location": 620,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dict_type": [
                    "typing.Type",
                    "str",
                    "dict[, ]",
                    "tuple[typing.Union[typing.Type,...]]"
                ],
                "data": [
                    "typing.Type",
                    "str",
                    "dict[, ]",
                    "tuple[typing.Union[typing.Type,...]]"
                ],
                "key": [
                    "typing.Mapping",
                    "set[str]"
                ],
                "error_message": [
                    "list[str]",
                    "str",
                    "list[]"
                ]
            }
        }
    },
    "scalpl-master/tests/__init__.py": {}
}
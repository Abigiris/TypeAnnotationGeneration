{
    "schema_salad-main/gittaggers.py": {
        "EggInfoFromGit.git_timestamp_tag": {
            "name": "git_timestamp_tag",
            "location": 22,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "EggInfoFromGit.tags": {
            "name": "tags",
            "location": 28,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "schema_salad-main/setup.py": {},
    "schema_salad-main/docs/conf.py": {},
    "schema_salad-main/schema_salad/codegen.py": {
        "codegen": {
            "name": "codegen",
            "location": 31,
            "return": [],
            "arguments": {
                "lang": [],
                "i": [],
                "schema_metadata": [],
                "loader": [],
                "target": [],
                "examples": [],
                "package": [],
                "copyright": [],
                "parser_info": []
            }
        }
    },
    "schema_salad-main/schema_salad/codegen_base.py": {
        "TypeDef.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "typing.Sequence[typing.Any]",
                    "None",
                    "bool",
                    "list[]",
                    "dict[, ]"
                ],
                "init": [
                    "str",
                    "None",
                    "bool",
                    "list[typing.Any]",
                    "list[str]"
                ],
                "is_uri": [
                    "bool"
                ],
                "scoped_id": [
                    "bool"
                ],
                "ref_scope": [
                    "int"
                ],
                "loader_type": [
                    "None",
                    "int",
                    "typing.Sequence[str]",
                    "str",
                    "float"
                ],
                "instance_type": [
                    "None",
                    "int",
                    "typing.Sequence[str]",
                    "str",
                    "float"
                ],
                "abstract": [
                    "bool"
                ]
            }
        },
        "CodeGenBase.__init__": {
            "name": "__init__",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CodeGenBase.declare_type": {
            "name": "declare_type",
            "location": 51,
            "return": [
                "typing.Type",
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "declared_type": [
                    "typing.Type",
                    "str",
                    "bool"
                ]
            }
        },
        "CodeGenBase.add_vocab": {
            "name": "add_vocab",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "list[str]",
                    "None"
                ],
                "uri": [
                    "str",
                    "list[str]",
                    "None"
                ]
            }
        },
        "CodeGenBase.prologue": {
            "name": "prologue",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CodeGenBase.safe_name": {
            "name": "safe_name",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "name": [
                    "str",
                    "None"
                ]
            }
        },
        "CodeGenBase.begin_class": {
            "name": "begin_class",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "classname": [
                    "bool",
                    "str",
                    "None"
                ],
                "extends": [
                    "bool",
                    "str",
                    "None"
                ],
                "doc": [
                    "bool",
                    "str",
                    "None"
                ],
                "abstract": [
                    "bool",
                    "str",
                    "None"
                ],
                "field_names": [
                    "bool",
                    "str",
                    "None"
                ],
                "idfield": [
                    "bool",
                    "str",
                    "None"
                ],
                "optional_fields": [
                    "bool",
                    "str",
                    "None"
                ]
            }
        },
        "CodeGenBase.end_class": {
            "name": "end_class",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "classname": [
                    "str",
                    "typing.Type"
                ],
                "field_names": [
                    "str",
                    "typing.Type"
                ]
            }
        },
        "CodeGenBase.type_loader": {
            "name": "type_loader",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "type_declaration": [
                    "str"
                ]
            }
        },
        "CodeGenBase.declare_field": {
            "name": "declare_field",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "bool",
                    "None"
                ],
                "fieldtype": [
                    "str",
                    "bool",
                    "None"
                ],
                "doc": [
                    "str",
                    "bool",
                    "None"
                ],
                "optional": [
                    "str",
                    "bool",
                    "None"
                ]
            }
        },
        "CodeGenBase.declare_id_field": {
            "name": "declare_id_field",
            "location": 103,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "bool",
                    "set[str]",
                    "dict[, ]"
                ],
                "fieldtype": [
                    "str",
                    "bool",
                    "set[str]",
                    "dict[, ]"
                ],
                "doc": [
                    "str",
                    "bool",
                    "set[str]",
                    "dict[, ]"
                ],
                "optional": [
                    "str",
                    "bool",
                    "set[str]",
                    "dict[, ]"
                ],
                "subscope": [
                    "str",
                    "bool",
                    "set[str]",
                    "dict[, ]"
                ]
            }
        },
        "CodeGenBase.uri_loader": {
            "name": "uri_loader",
            "location": 114,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "inner": [
                    "str",
                    "int"
                ],
                "scoped_id": [
                    "str",
                    "int"
                ],
                "vocab_term": [
                    "str",
                    "int"
                ],
                "ref_scope": [
                    "str",
                    "int"
                ]
            }
        },
        "CodeGenBase.idmap_loader": {
            "name": "idmap_loader",
            "location": 124,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "field": [
                    "bool",
                    "str",
                    "typing.Iterable[tuple[typing.Union[str,typing.Any]]]"
                ],
                "inner": [
                    "bool",
                    "str",
                    "typing.Iterable[tuple[typing.Union[str,typing.Any]]]"
                ],
                "map_subject": [
                    "bool",
                    "str",
                    "typing.Iterable[tuple[typing.Union[str,typing.Any]]]"
                ],
                "map_predicate": [
                    "bool",
                    "str",
                    "typing.Iterable[tuple[typing.Union[str,typing.Any]]]"
                ]
            }
        },
        "CodeGenBase.typedsl_loader": {
            "name": "typedsl_loader",
            "location": 130,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "inner": [
                    "str",
                    "list[tuple[typing.Union[str,typing.Any]]]",
                    "bool",
                    "None"
                ],
                "ref_scope": [
                    "str",
                    "list[tuple[typing.Union[str,typing.Any]]]",
                    "bool",
                    "None"
                ]
            }
        },
        "CodeGenBase.epilogue": {
            "name": "epilogue",
            "location": 134,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "root_loader": [
                    "typing.Sequence[str]",
                    "dict[, ]",
                    "int"
                ]
            }
        },
        "CodeGenBase.secondaryfilesdsl_loader": {
            "name": "secondaryfilesdsl_loader",
            "location": 138,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "inner": [
                    "int",
                    "str",
                    "typing.Iterable[C]"
                ]
            }
        }
    },
    "schema_salad-main/schema_salad/dotnet_codegen.py": {
        "doc_to_doc_string": {
            "name": "doc_to_doc_string",
            "location": 28,
            "return": [],
            "arguments": {
                "doc": [],
                "indent_level": []
            }
        },
        "DotNetCodeGen.__init__": {
            "name": "__init__",
            "location": 110,
            "return": [],
            "arguments": {
                "self": [],
                "base": [],
                "examples": [],
                "target": [],
                "package": []
            }
        },
        "DotNetCodeGen.prologue": {
            "name": "prologue",
            "location": 123,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DotNetCodeGen.safe_name": {
            "name": "safe_name",
            "location": 132,
            "return": [],
            "arguments": {
                "name": []
            }
        },
        "DotNetCodeGen.begin_class": {
            "name": "begin_class",
            "location": 152,
            "return": [],
            "arguments": {
                "self": [],
                "classname": [],
                "extends": [],
                "doc": [],
                "abstract": [],
                "field_names": [],
                "idfield": [],
                "optional_fields": []
            }
        },
        "DotNetCodeGen.end_class": {
            "name": "end_class",
            "location": 289,
            "return": [],
            "arguments": {
                "self": [],
                "classname": [],
                "field_names": []
            }
        },
        "DotNetCodeGen.type_loader": {
            "name": "type_loader",
            "location": 401,
            "return": [],
            "arguments": {
                "self": [],
                "type_declaration": []
            }
        },
        "DotNetCodeGen.type_loader_enum": {
            "name": "type_loader_enum",
            "location": 469,
            "return": [],
            "arguments": {
                "self": [],
                "type_declaration": []
            }
        },
        "DotNetCodeGen.declare_field": {
            "name": "declare_field",
            "location": 566,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "fieldtype": [],
                "doc": [],
                "optional": []
            }
        },
        "DotNetCodeGen.declare_id_field": {
            "name": "declare_id_field",
            "location": 750,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "fieldtype": [],
                "doc": [],
                "optional": [],
                "subscope": []
            }
        },
        "DotNetCodeGen.to_dotnet": {
            "name": "to_dotnet",
            "location": 797,
            "return": [],
            "arguments": {
                "self": [],
                "val": []
            }
        },
        "DotNetCodeGen.uri_loader": {
            "name": "uri_loader",
            "location": 807,
            "return": [],
            "arguments": {
                "self": [],
                "inner": [],
                "scoped_id": [],
                "vocab_term": [],
                "ref_scope": []
            }
        },
        "DotNetCodeGen.idmap_loader": {
            "name": "idmap_loader",
            "location": 833,
            "return": [],
            "arguments": {
                "self": [],
                "field": [],
                "inner": [],
                "map_subject": [],
                "map_predicate": []
            }
        },
        "DotNetCodeGen.typedsl_loader": {
            "name": "typedsl_loader",
            "location": 849,
            "return": [],
            "arguments": {
                "self": [],
                "inner": [],
                "ref_scope": []
            }
        },
        "DotNetCodeGen.epilogue": {
            "name": "epilogue",
            "location": 863,
            "return": [],
            "arguments": {
                "self": [],
                "root_loader": []
            }
        },
        "DotNetCodeGen.secondaryfilesdsl_loader": {
            "name": "secondaryfilesdsl_loader",
            "location": 982,
            "return": [],
            "arguments": {
                "self": [],
                "inner": []
            }
        },
        "DotNetCodeGen.epilogue.template_from_resource": {
            "name": "template_from_resource",
            "location": 878,
            "return": [],
            "arguments": {
                "resource": []
            }
        },
        "DotNetCodeGen.epilogue.expand_resource_template_to": {
            "name": "expand_resource_template_to",
            "location": 885,
            "return": [],
            "arguments": {
                "resource": [],
                "path": []
            }
        },
        "DotNetCodeGen.epilogue.copy_utils_recursive": {
            "name": "copy_utils_recursive",
            "location": 966,
            "return": [],
            "arguments": {
                "util_src": [],
                "util_target": []
            }
        }
    },
    "schema_salad-main/schema_salad/exceptions.py": {
        "to_one_line_messages": {
            "name": "to_one_line_messages",
            "location": 129,
            "return": [
                "str"
            ],
            "arguments": {
                "exc": []
            }
        },
        "SchemaSaladException.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "msg": [
                    "str",
                    "bool",
                    "dict[str, int]"
                ],
                "sl": [
                    "None",
                    "int",
                    "typing.Mapping",
                    "list[int]"
                ],
                "children": [
                    "None",
                    "list[int]",
                    "typing.Sequence[typing.Any]",
                    "list[list[typing.Callable[, ]]]",
                    "list[str]"
                ],
                "bullet_for_children": [
                    "typing.Text"
                ]
            }
        },
        "SchemaSaladException.propagate_sourceline": {
            "name": "propagate_sourceline",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SchemaSaladException.as_warning": {
            "name": "as_warning",
            "location": 59,
            "return": [
                "SchemaSaladException"
            ],
            "arguments": {
                "self": []
            }
        },
        "SchemaSaladException.with_sourceline": {
            "name": "with_sourceline",
            "location": 65,
            "return": [
                "SchemaSaladException"
            ],
            "arguments": {
                "self": [],
                "sl": []
            }
        },
        "SchemaSaladException.leaves": {
            "name": "leaves",
            "location": 76,
            "return": [
                "bool",
                "list[SchemaSaladException]",
                "list[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SchemaSaladException.prefix": {
            "name": "prefix",
            "location": 83,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "SchemaSaladException.summary": {
            "name": "summary",
            "location": 94,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": [],
                "level": [
                    "int"
                ],
                "with_bullet": [
                    "bool"
                ]
            }
        },
        "SchemaSaladException.__str__": {
            "name": "__str__",
            "location": 100,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "SchemaSaladException.pretty_str": {
            "name": "pretty_str",
            "location": 103,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "level": [
                    "int"
                ]
            }
        },
        "SchemaSaladException.__init__.simplify": {
            "name": "simplify",
            "location": 27,
            "return": [
                "list[]"
            ],
            "arguments": {
                "exc": []
            }
        },
        "SchemaSaladException.__init__.with_bullet": {
            "name": "with_bullet",
            "location": 30,
            "return": [],
            "arguments": {
                "exc": [],
                "bullet": []
            }
        }
    },
    "schema_salad-main/schema_salad/fetcher.py": {
        "Fetcher.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cache": [
                    "None",
                    "bool",
                    "str"
                ],
                "session": [
                    "None",
                    "bool",
                    "str"
                ]
            }
        },
        "Fetcher.fetch_text": {
            "name": "fetch_text",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "bool",
                    "str"
                ],
                "content_types": [
                    "None",
                    "bool",
                    "str"
                ]
            }
        },
        "Fetcher.check_exists": {
            "name": "check_exists",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "dict[str, typing.Union[str,int]]",
                    "str",
                    "None"
                ]
            }
        },
        "Fetcher.urljoin": {
            "name": "urljoin",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "base_url": [
                    "str",
                    "bool",
                    "list[str]",
                    "float",
                    "None"
                ],
                "url": [
                    "str",
                    "bool",
                    "list[str]",
                    "float",
                    "None"
                ]
            }
        },
        "Fetcher.supported_schemes": {
            "name": "supported_schemes",
            "location": 37,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DefaultFetcher.__init__": {
            "name": "__init__",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cache": [
                    "typing.Sequence[str]",
                    "str",
                    "dict[str, typing.Any]"
                ],
                "session": [
                    "str",
                    "bool",
                    "bytes"
                ]
            }
        },
        "DefaultFetcher.fetch_text": {
            "name": "fetch_text",
            "location": 50,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str",
                    "dict[, ]",
                    "dict[str, typing.Any]"
                ],
                "content_types": [
                    "str",
                    "dict[, ]"
                ]
            }
        },
        "DefaultFetcher.check_exists": {
            "name": "check_exists",
            "location": 97,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str",
                    "typing.Callable[str, str]"
                ]
            }
        },
        "DefaultFetcher.urljoin": {
            "name": "urljoin",
            "location": 120,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "base_url": [
                    "str"
                ],
                "url": [
                    "str"
                ]
            }
        }
    },
    "schema_salad-main/schema_salad/java_codegen.py": {
        "_ensure_directory_and_write": {
            "name": "_ensure_directory_and_write",
            "location": 32,
            "return": [],
            "arguments": {
                "path": [],
                "contents": []
            }
        },
        "doc_to_doc_string": {
            "name": "doc_to_doc_string",
            "location": 39,
            "return": [],
            "arguments": {
                "doc": [],
                "indent_level": []
            }
        },
        "_safe_makedirs": {
            "name": "_safe_makedirs",
            "location": 50,
            "return": [],
            "arguments": {
                "path": []
            }
        },
        "JavaCodeGen.__init__": {
            "name": "__init__",
            "location": 126,
            "return": [],
            "arguments": {
                "self": [],
                "base": [],
                "target": [],
                "examples": [],
                "package": [],
                "copyright": []
            }
        },
        "JavaCodeGen.prologue": {
            "name": "prologue",
            "location": 149,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "JavaCodeGen.property_name": {
            "name": "property_name",
            "location": 157,
            "return": [],
            "arguments": {
                "name": []
            }
        },
        "JavaCodeGen.safe_name": {
            "name": "safe_name",
            "location": 162,
            "return": [],
            "arguments": {
                "name": []
            }
        },
        "JavaCodeGen.interface_name": {
            "name": "interface_name",
            "location": 171,
            "return": [],
            "arguments": {
                "self": [],
                "n": []
            }
        },
        "JavaCodeGen.begin_class": {
            "name": "begin_class",
            "location": 174,
            "return": [],
            "arguments": {
                "self": [],
                "classname": [],
                "extends": [],
                "doc": [],
                "abstract": [],
                "field_names": [],
                "idfield": [],
                "optional_fields": []
            }
        },
        "JavaCodeGen.end_class": {
            "name": "end_class",
            "location": 339,
            "return": [],
            "arguments": {
                "self": [],
                "classname": [],
                "field_names": []
            }
        },
        "JavaCodeGen.type_loader": {
            "name": "type_loader",
            "location": 381,
            "return": [],
            "arguments": {
                "self": [],
                "type_declaration": []
            }
        },
        "JavaCodeGen.type_loader_enum": {
            "name": "type_loader_enum",
            "location": 501,
            "return": [],
            "arguments": {
                "self": [],
                "type_declaration": []
            }
        },
        "JavaCodeGen.declare_field": {
            "name": "declare_field",
            "location": 585,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "fieldtype": [],
                "doc": [],
                "optional": []
            }
        },
        "JavaCodeGen.declare_id_field": {
            "name": "declare_id_field",
            "location": 686,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "fieldtype": [],
                "doc": [],
                "optional": [],
                "subscope": []
            }
        },
        "JavaCodeGen.uri_loader": {
            "name": "uri_loader",
            "location": 732,
            "return": [],
            "arguments": {
                "self": [],
                "inner": [],
                "scoped_id": [],
                "vocab_term": [],
                "ref_scope": []
            }
        },
        "JavaCodeGen.idmap_loader": {
            "name": "idmap_loader",
            "location": 759,
            "return": [],
            "arguments": {
                "self": [],
                "field": [],
                "inner": [],
                "map_subject": [],
                "map_predicate": []
            }
        },
        "JavaCodeGen.typedsl_loader": {
            "name": "typedsl_loader",
            "location": 774,
            "return": [],
            "arguments": {
                "self": [],
                "inner": [],
                "ref_scope": []
            }
        },
        "JavaCodeGen.to_java": {
            "name": "to_java",
            "location": 785,
            "return": [],
            "arguments": {
                "self": [],
                "val": []
            }
        },
        "JavaCodeGen.epilogue": {
            "name": "epilogue",
            "location": 794,
            "return": [],
            "arguments": {
                "self": [],
                "root_loader": []
            }
        },
        "JavaCodeGen.secondaryfilesdsl_loader": {
            "name": "secondaryfilesdsl_loader",
            "location": 910,
            "return": [],
            "arguments": {
                "self": [],
                "inner": []
            }
        },
        "JavaCodeGen.epilogue.template_from_resource": {
            "name": "template_from_resource",
            "location": 813,
            "return": [],
            "arguments": {
                "resource": []
            }
        },
        "JavaCodeGen.epilogue.expand_resource_template_to": {
            "name": "expand_resource_template_to",
            "location": 820,
            "return": [],
            "arguments": {
                "resource": [],
                "path": []
            }
        }
    },
    "schema_salad-main/schema_salad/jsonld_context.py": {
        "pred": {
            "name": "pred",
            "location": 29,
            "return": [],
            "arguments": {
                "datatype": [],
                "field": [],
                "name": [],
                "context": [],
                "defaultBase": [],
                "namespaces": []
            }
        },
        "process_type": {
            "name": "process_type",
            "location": 92,
            "return": [],
            "arguments": {
                "t": [],
                "g": [],
                "context": [],
                "defaultBase": [],
                "namespaces": [],
                "defaultPrefix": []
            }
        },
        "salad_to_jsonld_context": {
            "name": "salad_to_jsonld_context",
            "location": 198,
            "return": [],
            "arguments": {
                "j": [],
                "schema_ctx": []
            }
        },
        "fix_jsonld_ids": {
            "name": "fix_jsonld_ids",
            "location": 225,
            "return": [],
            "arguments": {
                "obj": [],
                "ids": []
            }
        },
        "makerdf": {
            "name": "makerdf",
            "location": 239,
            "return": [],
            "arguments": {
                "workflow": [],
                "wf": [],
                "ctx": [],
                "graph": []
            }
        }
    },
    "schema_salad-main/schema_salad/main.py": {
        "printrdf": {
            "name": "printrdf",
            "location": 28,
            "return": [],
            "arguments": {
                "workflow": [],
                "wf": [],
                "ctx": [],
                "sr": []
            }
        },
        "arg_parser": {
            "name": "arg_parser",
            "location": 38,
            "return": [],
            "arguments": {}
        },
        "main": {
            "name": "main",
            "location": 219,
            "return": [],
            "arguments": {
                "argsl": []
            }
        }
    },
    "schema_salad-main/schema_salad/makedoc.py": {
        "vocab_type_name": {
            "name": "vocab_type_name",
            "location": 32,
            "return": [],
            "arguments": {
                "url": []
            }
        },
        "has_types": {
            "name": "has_types",
            "location": 37,
            "return": [],
            "arguments": {
                "items": []
            }
        },
        "linkto": {
            "name": "linkto",
            "location": 55,
            "return": [],
            "arguments": {
                "item": []
            }
        },
        "to_id": {
            "name": "to_id",
            "location": 79,
            "return": [],
            "arguments": {
                "text": []
            }
        },
        "number_headings": {
            "name": "number_headings",
            "location": 151,
            "return": [],
            "arguments": {
                "toc": [],
                "maindoc": []
            }
        },
        "fix_doc": {
            "name": "fix_doc",
            "location": 179,
            "return": [],
            "arguments": {
                "doc": []
            }
        },
        "avrold_doc": {
            "name": "avrold_doc",
            "location": 503,
            "return": [],
            "arguments": {
                "j": [],
                "outdoc": [],
                "renderlist": [],
                "redirects": [],
                "brand": [],
                "brandlink": [],
                "primtype": [],
                "brandstyle": [],
                "brandinverse": []
            }
        },
        "arg_parser": {
            "name": "arg_parser",
            "location": 715,
            "return": [],
            "arguments": {}
        },
        "main": {
            "name": "main",
            "location": 730,
            "return": [],
            "arguments": {}
        },
        "makedoc": {
            "name": "makedoc",
            "location": 748,
            "return": [],
            "arguments": {
                "stdout": [],
                "schema": [],
                "redirects": [],
                "only": [],
                "brand": [],
                "brandlink": [],
                "primtype": [],
                "brandstyle": [],
                "brandinverse": []
            }
        },
        "MyRenderer.__init__": {
            "name": "__init__",
            "location": 61,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MyRenderer.header": {
            "name": "header",
            "location": 65,
            "return": [],
            "arguments": {
                "self": [],
                "text": [],
                "level": [],
                "raw": []
            }
        },
        "MyRenderer.table": {
            "name": "table",
            "location": 72,
            "return": [],
            "arguments": {
                "self": [],
                "header": [],
                "body": []
            }
        },
        "ToC.__init__": {
            "name": "__init__",
            "location": 90,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ToC.add_entry": {
            "name": "add_entry",
            "location": 96,
            "return": [],
            "arguments": {
                "self": [],
                "thisdepth": [],
                "title": []
            }
        },
        "ToC.contents": {
            "name": "contents",
            "location": 125,
            "return": [],
            "arguments": {
                "self": [],
                "idn": []
            }
        },
        "RenderType.__init__": {
            "name": "__init__",
            "location": 190,
            "return": [],
            "arguments": {
                "self": [],
                "toc": [],
                "j": [],
                "renderlist": [],
                "redirects": [],
                "primitiveType": []
            }
        },
        "RenderType.typefmt": {
            "name": "typefmt",
            "location": 269,
            "return": [],
            "arguments": {
                "self": [],
                "tp": [],
                "redirects": [],
                "nbsp": [],
                "jsonldPredicate": []
            }
        },
        "RenderType.render_type": {
            "name": "render_type",
            "location": 353,
            "return": [],
            "arguments": {
                "self": [],
                "f": [],
                "depth": []
            }
        },
        "RenderType.render_type.extendsfrom": {
            "name": "extendsfrom",
            "location": 371,
            "return": [],
            "arguments": {
                "item": [],
                "ex": []
            }
        }
    },
    "schema_salad-main/schema_salad/metaschema.py": {
        "load_field": {
            "name": "load_field",
            "location": 114,
            "return": [],
            "arguments": {
                "val": [],
                "fieldtype": [],
                "baseuri": [],
                "loadingOptions": []
            }
        },
        "save": {
            "name": "save",
            "location": 137,
            "return": [],
            "arguments": {
                "val": [],
                "top": [],
                "base_url": [],
                "relative_uris": []
            }
        },
        "expand_url": {
            "name": "expand_url",
            "location": 161,
            "return": [],
            "arguments": {
                "url": [],
                "base_url": [],
                "loadingOptions": [],
                "scoped_id": [],
                "vocab_term": [],
                "scoped_ref": []
            }
        },
        "_document_load": {
            "name": "_document_load",
            "location": 558,
            "return": [],
            "arguments": {
                "loader": [],
                "doc": [],
                "baseuri": [],
                "loadingOptions": []
            }
        },
        "_document_load_by_url": {
            "name": "_document_load_by_url",
            "location": 588,
            "return": [],
            "arguments": {
                "loader": [],
                "url": [],
                "loadingOptions": []
            }
        },
        "file_uri": {
            "name": "file_uri",
            "location": 610,
            "return": [],
            "arguments": {
                "path": [],
                "split_frag": []
            }
        },
        "prefix_url": {
            "name": "prefix_url",
            "location": 626,
            "return": [],
            "arguments": {
                "url": [],
                "namespaces": []
            }
        },
        "save_relative_uri": {
            "name": "save_relative_uri",
            "location": 634,
            "return": [],
            "arguments": {
                "uri": [],
                "base_url": [],
                "scoped_id": [],
                "ref_scope": [],
                "relative_uris": []
            }
        },
        "shortname": {
            "name": "shortname",
            "location": 677,
            "return": [],
            "arguments": {
                "inputid": []
            }
        },
        "parser_info": {
            "name": "parser_info",
            "location": 689,
            "return": [],
            "arguments": {}
        },
        "load_document": {
            "name": "load_document",
            "location": 3255,
            "return": [],
            "arguments": {
                "doc": [],
                "baseuri": [],
                "loadingOptions": []
            }
        },
        "load_document_by_string": {
            "name": "load_document_by_string",
            "location": 3272,
            "return": [],
            "arguments": {
                "string": [],
                "uri": [],
                "loadingOptions": []
            }
        },
        "load_document_by_yaml": {
            "name": "load_document_by_yaml",
            "location": 3293,
            "return": [],
            "arguments": {
                "yaml": [],
                "uri": [],
                "loadingOptions": []
            }
        },
        "LoadingOptions.__init__": {
            "name": "__init__",
            "location": 40,
            "return": [],
            "arguments": {
                "self": [],
                "fetcher": [],
                "namespaces": [],
                "schemas": [],
                "fileuri": [],
                "copyfrom": [],
                "original_doc": []
            }
        },
        "Savable.fromDoc": {
            "name": "fromDoc",
            "location": 96,
            "return": [],
            "arguments": {
                "cls": [],
                "_doc": [],
                "baseuri": [],
                "loadingOptions": [],
                "docRoot": []
            }
        },
        "Savable.save": {
            "name": "save",
            "location": 107,
            "return": [],
            "arguments": {
                "self": [],
                "top": [],
                "base_url": [],
                "relative_uris": []
            }
        },
        "_Loader.load": {
            "name": "load",
            "location": 230,
            "return": [],
            "arguments": {
                "self": [],
                "doc": [],
                "baseuri": [],
                "loadingOptions": [],
                "docRoot": []
            }
        },
        "_AnyLoader.load": {
            "name": "load",
            "location": 236,
            "return": [],
            "arguments": {
                "self": [],
                "doc": [],
                "baseuri": [],
                "loadingOptions": [],
                "docRoot": []
            }
        },
        "_PrimitiveLoader.__init__": {
            "name": "__init__",
            "location": 244,
            "return": [],
            "arguments": {
                "self": [],
                "tp": []
            }
        },
        "_PrimitiveLoader.load": {
            "name": "load",
            "location": 248,
            "return": [],
            "arguments": {
                "self": [],
                "doc": [],
                "baseuri": [],
                "loadingOptions": [],
                "docRoot": []
            }
        },
        "_PrimitiveLoader.__repr__": {
            "name": "__repr__",
            "location": 258,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_ArrayLoader.__init__": {
            "name": "__init__",
            "location": 263,
            "return": [],
            "arguments": {
                "self": [],
                "items": []
            }
        },
        "_ArrayLoader.load": {
            "name": "load",
            "location": 267,
            "return": [],
            "arguments": {
                "self": [],
                "doc": [],
                "baseuri": [],
                "loadingOptions": [],
                "docRoot": []
            }
        },
        "_ArrayLoader.__repr__": {
            "name": "__repr__",
            "location": 288,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_EnumLoader.__init__": {
            "name": "__init__",
            "location": 293,
            "return": [],
            "arguments": {
                "self": [],
                "symbols": []
            }
        },
        "_EnumLoader.load": {
            "name": "load",
            "location": 297,
            "return": [],
            "arguments": {
                "self": [],
                "doc": [],
                "baseuri": [],
                "loadingOptions": [],
                "docRoot": []
            }
        },
        "_SecondaryDSLLoader.__init__": {
            "name": "__init__",
            "location": 306,
            "return": [],
            "arguments": {
                "self": [],
                "inner": []
            }
        },
        "_SecondaryDSLLoader.load": {
            "name": "load",
            "location": 310,
            "return": [],
            "arguments": {
                "self": [],
                "doc": [],
                "baseuri": [],
                "loadingOptions": [],
                "docRoot": []
            }
        },
        "_RecordLoader.__init__": {
            "name": "__init__",
            "location": 377,
            "return": [],
            "arguments": {
                "self": [],
                "classtype": []
            }
        },
        "_RecordLoader.load": {
            "name": "load",
            "location": 381,
            "return": [],
            "arguments": {
                "self": [],
                "doc": [],
                "baseuri": [],
                "loadingOptions": [],
                "docRoot": []
            }
        },
        "_RecordLoader.__repr__": {
            "name": "__repr__",
            "location": 387,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_ExpressionLoader.__init__": {
            "name": "__init__",
            "location": 392,
            "return": [],
            "arguments": {
                "self": [],
                "items": []
            }
        },
        "_ExpressionLoader.load": {
            "name": "load",
            "location": 395,
            "return": [],
            "arguments": {
                "self": [],
                "doc": [],
                "baseuri": [],
                "loadingOptions": [],
                "docRoot": []
            }
        },
        "_UnionLoader.__init__": {
            "name": "__init__",
            "location": 403,
            "return": [],
            "arguments": {
                "self": [],
                "alternates": []
            }
        },
        "_UnionLoader.load": {
            "name": "load",
            "location": 407,
            "return": [],
            "arguments": {
                "self": [],
                "doc": [],
                "baseuri": [],
                "loadingOptions": [],
                "docRoot": []
            }
        },
        "_UnionLoader.__repr__": {
            "name": "__repr__",
            "location": 419,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_URILoader.__init__": {
            "name": "__init__",
            "location": 424,
            "return": [],
            "arguments": {
                "self": [],
                "inner": [],
                "scoped_id": [],
                "vocab_term": [],
                "scoped_ref": []
            }
        },
        "_URILoader.load": {
            "name": "load",
            "location": 431,
            "return": [],
            "arguments": {
                "self": [],
                "doc": [],
                "baseuri": [],
                "loadingOptions": [],
                "docRoot": []
            }
        },
        "_TypeDSLLoader.__init__": {
            "name": "__init__",
            "location": 465,
            "return": [],
            "arguments": {
                "self": [],
                "inner": [],
                "refScope": []
            }
        },
        "_TypeDSLLoader.resolve": {
            "name": "resolve",
            "location": 470,
            "return": [],
            "arguments": {
                "self": [],
                "doc": [],
                "baseuri": [],
                "loadingOptions": []
            }
        },
        "_TypeDSLLoader.load": {
            "name": "load",
            "location": 501,
            "return": [],
            "arguments": {
                "self": [],
                "doc": [],
                "baseuri": [],
                "loadingOptions": [],
                "docRoot": []
            }
        },
        "_IdMapLoader.__init__": {
            "name": "__init__",
            "location": 525,
            "return": [],
            "arguments": {
                "self": [],
                "inner": [],
                "mapSubject": [],
                "mapPredicate": []
            }
        },
        "_IdMapLoader.load": {
            "name": "load",
            "location": 531,
            "return": [],
            "arguments": {
                "self": [],
                "doc": [],
                "baseuri": [],
                "loadingOptions": [],
                "docRoot": []
            }
        },
        "RecordField.__init__": {
            "name": "__init__",
            "location": 702,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "type": [],
                "doc": [],
                "extension_fields": [],
                "loadingOptions": []
            }
        },
        "RecordField.fromDoc": {
            "name": "fromDoc",
            "location": 724,
            "return": [],
            "arguments": {
                "cls": [],
                "doc": [],
                "baseuri": [],
                "loadingOptions": [],
                "docRoot": []
            }
        },
        "RecordField.save": {
            "name": "save",
            "location": 825,
            "return": [],
            "arguments": {
                "self": [],
                "top": [],
                "base_url": [],
                "relative_uris": []
            }
        },
        "RecordSchema.__init__": {
            "name": "__init__",
            "location": 856,
            "return": [],
            "arguments": {
                "self": [],
                "type": [],
                "fields": [],
                "extension_fields": [],
                "loadingOptions": []
            }
        },
        "RecordSchema.fromDoc": {
            "name": "fromDoc",
            "location": 876,
            "return": [],
            "arguments": {
                "cls": [],
                "doc": [],
                "baseuri": [],
                "loadingOptions": [],
                "docRoot": []
            }
        },
        "RecordSchema.save": {
            "name": "save",
            "location": 949,
            "return": [],
            "arguments": {
                "self": [],
                "top": [],
                "base_url": [],
                "relative_uris": []
            }
        },
        "EnumSchema.__init__": {
            "name": "__init__",
            "location": 981,
            "return": [],
            "arguments": {
                "self": [],
                "symbols": [],
                "type": [],
                "extension_fields": [],
                "loadingOptions": []
            }
        },
        "EnumSchema.fromDoc": {
            "name": "fromDoc",
            "location": 1001,
            "return": [],
            "arguments": {
                "cls": [],
                "doc": [],
                "baseuri": [],
                "loadingOptions": [],
                "docRoot": []
            }
        },
        "EnumSchema.save": {
            "name": "save",
            "location": 1071,
            "return": [],
            "arguments": {
                "self": [],
                "top": [],
                "base_url": [],
                "relative_uris": []
            }
        },
        "ArraySchema.__init__": {
            "name": "__init__",
            "location": 1098,
            "return": [],
            "arguments": {
                "self": [],
                "items": [],
                "type": [],
                "extension_fields": [],
                "loadingOptions": []
            }
        },
        "ArraySchema.fromDoc": {
            "name": "fromDoc",
            "location": 1118,
            "return": [],
            "arguments": {
                "cls": [],
                "doc": [],
                "baseuri": [],
                "loadingOptions": [],
                "docRoot": []
            }
        },
        "ArraySchema.save": {
            "name": "save",
            "location": 1188,
            "return": [],
            "arguments": {
                "self": [],
                "top": [],
                "base_url": [],
                "relative_uris": []
            }
        },
        "JsonldPredicate.__init__": {
            "name": "__init__",
            "location": 1221,
            "return": [],
            "arguments": {
                "self": [],
                "_id": [],
                "_type": [],
                "_container": [],
                "identity": [],
                "noLinkCheck": [],
                "mapSubject": [],
                "mapPredicate": [],
                "refScope": [],
                "typeDSL": [],
                "secondaryFilesDSL": [],
                "subscope": [],
                "extension_fields": [],
                "loadingOptions": []
            }
        },
        "JsonldPredicate.fromDoc": {
            "name": "fromDoc",
            "location": 1259,
            "return": [],
            "arguments": {
                "cls": [],
                "doc": [],
                "baseuri": [],
                "loadingOptions": [],
                "docRoot": []
            }
        },
        "JsonldPredicate.save": {
            "name": "save",
            "location": 1506,
            "return": [],
            "arguments": {
                "self": [],
                "top": [],
                "base_url": [],
                "relative_uris": []
            }
        },
        "SpecializeDef.__init__": {
            "name": "__init__",
            "location": 1598,
            "return": [],
            "arguments": {
                "self": [],
                "specializeFrom": [],
                "specializeTo": [],
                "extension_fields": [],
                "loadingOptions": []
            }
        },
        "SpecializeDef.fromDoc": {
            "name": "fromDoc",
            "location": 1618,
            "return": [],
            "arguments": {
                "cls": [],
                "doc": [],
                "baseuri": [],
                "loadingOptions": [],
                "docRoot": []
            }
        },
        "SpecializeDef.save": {
            "name": "save",
            "location": 1688,
            "return": [],
            "arguments": {
                "self": [],
                "top": [],
                "base_url": [],
                "relative_uris": []
            }
        },
        "SaladRecordField.__init__": {
            "name": "__init__",
            "location": 1738,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "type": [],
                "doc": [],
                "jsonldPredicate": [],
                "default": [],
                "extension_fields": [],
                "loadingOptions": []
            }
        },
        "SaladRecordField.fromDoc": {
            "name": "fromDoc",
            "location": 1764,
            "return": [],
            "arguments": {
                "cls": [],
                "doc": [],
                "baseuri": [],
                "loadingOptions": [],
                "docRoot": []
            }
        },
        "SaladRecordField.save": {
            "name": "save",
            "location": 1903,
            "return": [],
            "arguments": {
                "self": [],
                "top": [],
                "base_url": [],
                "relative_uris": []
            }
        },
        "SaladRecordSchema.__init__": {
            "name": "__init__",
            "location": 1945,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "type": [],
                "inVocab": [],
                "fields": [],
                "doc": [],
                "docParent": [],
                "docChild": [],
                "docAfter": [],
                "jsonldPredicate": [],
                "documentRoot": [],
                "abstract": [],
                "extends": [],
                "specialize": [],
                "extension_fields": [],
                "loadingOptions": []
            }
        },
        "SaladRecordSchema.fromDoc": {
            "name": "fromDoc",
            "location": 1987,
            "return": [],
            "arguments": {
                "cls": [],
                "doc": [],
                "baseuri": [],
                "loadingOptions": [],
                "docRoot": []
            }
        },
        "SaladRecordSchema.save": {
            "name": "save",
            "location": 2278,
            "return": [],
            "arguments": {
                "self": [],
                "top": [],
                "base_url": [],
                "relative_uris": []
            }
        },
        "SaladEnumSchema.__init__": {
            "name": "__init__",
            "location": 2382,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "symbols": [],
                "type": [],
                "inVocab": [],
                "doc": [],
                "docParent": [],
                "docChild": [],
                "docAfter": [],
                "jsonldPredicate": [],
                "documentRoot": [],
                "extends": [],
                "extension_fields": [],
                "loadingOptions": []
            }
        },
        "SaladEnumSchema.fromDoc": {
            "name": "fromDoc",
            "location": 2420,
            "return": [],
            "arguments": {
                "cls": [],
                "doc": [],
                "baseuri": [],
                "loadingOptions": [],
                "docRoot": []
            }
        },
        "SaladEnumSchema.save": {
            "name": "save",
            "location": 2670,
            "return": [],
            "arguments": {
                "self": [],
                "top": [],
                "base_url": [],
                "relative_uris": []
            }
        },
        "Documentation.__init__": {
            "name": "__init__",
            "location": 2759,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "type": [],
                "inVocab": [],
                "doc": [],
                "docParent": [],
                "docChild": [],
                "docAfter": [],
                "extension_fields": [],
                "loadingOptions": []
            }
        },
        "Documentation.fromDoc": {
            "name": "fromDoc",
            "location": 2789,
            "return": [],
            "arguments": {
                "cls": [],
                "doc": [],
                "baseuri": [],
                "loadingOptions": [],
                "docRoot": []
            }
        },
        "Documentation.save": {
            "name": "save",
            "location": 2966,
            "return": [],
            "arguments": {
                "self": [],
                "top": [],
                "base_url": [],
                "relative_uris": []
            }
        }
    },
    "schema_salad-main/schema_salad/python_codegen.py": {
        "fmt": {
            "name": "fmt",
            "location": 55,
            "return": [],
            "arguments": {
                "text": [],
                "indent": []
            }
        },
        "PythonCodeGen.__init__": {
            "name": "__init__",
            "location": 80,
            "return": [],
            "arguments": {
                "self": [],
                "out": [],
                "copyright": [],
                "parser_info": []
            }
        },
        "PythonCodeGen.safe_name": {
            "name": "safe_name",
            "location": 95,
            "return": [],
            "arguments": {
                "name": []
            }
        },
        "PythonCodeGen.prologue": {
            "name": "prologue",
            "location": 105,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PythonCodeGen.begin_class": {
            "name": "begin_class",
            "location": 141,
            "return": [],
            "arguments": {
                "self": [],
                "classname": [],
                "extends": [],
                "doc": [],
                "abstract": [],
                "field_names": [],
                "idfield": [],
                "optional_fields": []
            }
        },
        "PythonCodeGen.end_class": {
            "name": "end_class",
            "location": 269,
            "return": [],
            "arguments": {
                "self": [],
                "classname": [],
                "field_names": []
            }
        },
        "PythonCodeGen.type_loader": {
            "name": "type_loader",
            "location": 343,
            "return": [],
            "arguments": {
                "self": [],
                "type_declaration": []
            }
        },
        "PythonCodeGen.declare_id_field": {
            "name": "declare_id_field",
            "location": 409,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "fieldtype": [],
                "doc": [],
                "optional": [],
                "subscope": []
            }
        },
        "PythonCodeGen.declare_field": {
            "name": "declare_field",
            "location": 449,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "fieldtype": [],
                "doc": [],
                "optional": []
            }
        },
        "PythonCodeGen.uri_loader": {
            "name": "uri_loader",
            "location": 536,
            "return": [],
            "arguments": {
                "self": [],
                "inner": [],
                "scoped_id": [],
                "vocab_term": [],
                "ref_scope": []
            }
        },
        "PythonCodeGen.idmap_loader": {
            "name": "idmap_loader",
            "location": 556,
            "return": [],
            "arguments": {
                "self": [],
                "field": [],
                "inner": [],
                "map_subject": [],
                "map_predicate": []
            }
        },
        "PythonCodeGen.typedsl_loader": {
            "name": "typedsl_loader",
            "location": 569,
            "return": [],
            "arguments": {
                "self": [],
                "inner": [],
                "ref_scope": []
            }
        },
        "PythonCodeGen.secondaryfilesdsl_loader": {
            "name": "secondaryfilesdsl_loader",
            "location": 578,
            "return": [],
            "arguments": {
                "self": [],
                "inner": []
            }
        },
        "PythonCodeGen.epilogue": {
            "name": "epilogue",
            "location": 587,
            "return": [],
            "arguments": {
                "self": [],
                "root_loader": []
            }
        }
    },
    "schema_salad-main/schema_salad/python_codegen_support.py": {
        "load_field": {
            "name": "load_field",
            "location": 111,
            "return": [],
            "arguments": {
                "val": [],
                "fieldtype": [],
                "baseuri": [],
                "loadingOptions": []
            }
        },
        "save": {
            "name": "save",
            "location": 134,
            "return": [],
            "arguments": {
                "val": [],
                "top": [],
                "base_url": [],
                "relative_uris": []
            }
        },
        "expand_url": {
            "name": "expand_url",
            "location": 158,
            "return": [],
            "arguments": {
                "url": [],
                "base_url": [],
                "loadingOptions": [],
                "scoped_id": [],
                "vocab_term": [],
                "scoped_ref": []
            }
        },
        "_document_load": {
            "name": "_document_load",
            "location": 555,
            "return": [],
            "arguments": {
                "loader": [],
                "doc": [],
                "baseuri": [],
                "loadingOptions": []
            }
        },
        "_document_load_by_url": {
            "name": "_document_load_by_url",
            "location": 585,
            "return": [],
            "arguments": {
                "loader": [],
                "url": [],
                "loadingOptions": []
            }
        },
        "file_uri": {
            "name": "file_uri",
            "location": 607,
            "return": [],
            "arguments": {
                "path": [],
                "split_frag": []
            }
        },
        "prefix_url": {
            "name": "prefix_url",
            "location": 623,
            "return": [],
            "arguments": {
                "url": [],
                "namespaces": []
            }
        },
        "save_relative_uri": {
            "name": "save_relative_uri",
            "location": 631,
            "return": [],
            "arguments": {
                "uri": [],
                "base_url": [],
                "scoped_id": [],
                "ref_scope": [],
                "relative_uris": []
            }
        },
        "shortname": {
            "name": "shortname",
            "location": 674,
            "return": [],
            "arguments": {
                "inputid": []
            }
        },
        "LoadingOptions.__init__": {
            "name": "__init__",
            "location": 37,
            "return": [],
            "arguments": {
                "self": [],
                "fetcher": [],
                "namespaces": [],
                "schemas": [],
                "fileuri": [],
                "copyfrom": [],
                "original_doc": []
            }
        },
        "Savable.fromDoc": {
            "name": "fromDoc",
            "location": 93,
            "return": [],
            "arguments": {
                "cls": [],
                "_doc": [],
                "baseuri": [],
                "loadingOptions": [],
                "docRoot": []
            }
        },
        "Savable.save": {
            "name": "save",
            "location": 104,
            "return": [],
            "arguments": {
                "self": [],
                "top": [],
                "base_url": [],
                "relative_uris": []
            }
        },
        "_Loader.load": {
            "name": "load",
            "location": 227,
            "return": [],
            "arguments": {
                "self": [],
                "doc": [],
                "baseuri": [],
                "loadingOptions": [],
                "docRoot": []
            }
        },
        "_AnyLoader.load": {
            "name": "load",
            "location": 233,
            "return": [],
            "arguments": {
                "self": [],
                "doc": [],
                "baseuri": [],
                "loadingOptions": [],
                "docRoot": []
            }
        },
        "_PrimitiveLoader.__init__": {
            "name": "__init__",
            "location": 241,
            "return": [],
            "arguments": {
                "self": [],
                "tp": []
            }
        },
        "_PrimitiveLoader.load": {
            "name": "load",
            "location": 245,
            "return": [],
            "arguments": {
                "self": [],
                "doc": [],
                "baseuri": [],
                "loadingOptions": [],
                "docRoot": []
            }
        },
        "_PrimitiveLoader.__repr__": {
            "name": "__repr__",
            "location": 255,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_ArrayLoader.__init__": {
            "name": "__init__",
            "location": 260,
            "return": [],
            "arguments": {
                "self": [],
                "items": []
            }
        },
        "_ArrayLoader.load": {
            "name": "load",
            "location": 264,
            "return": [],
            "arguments": {
                "self": [],
                "doc": [],
                "baseuri": [],
                "loadingOptions": [],
                "docRoot": []
            }
        },
        "_ArrayLoader.__repr__": {
            "name": "__repr__",
            "location": 285,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_EnumLoader.__init__": {
            "name": "__init__",
            "location": 290,
            "return": [],
            "arguments": {
                "self": [],
                "symbols": []
            }
        },
        "_EnumLoader.load": {
            "name": "load",
            "location": 294,
            "return": [],
            "arguments": {
                "self": [],
                "doc": [],
                "baseuri": [],
                "loadingOptions": [],
                "docRoot": []
            }
        },
        "_SecondaryDSLLoader.__init__": {
            "name": "__init__",
            "location": 303,
            "return": [],
            "arguments": {
                "self": [],
                "inner": []
            }
        },
        "_SecondaryDSLLoader.load": {
            "name": "load",
            "location": 307,
            "return": [],
            "arguments": {
                "self": [],
                "doc": [],
                "baseuri": [],
                "loadingOptions": [],
                "docRoot": []
            }
        },
        "_RecordLoader.__init__": {
            "name": "__init__",
            "location": 374,
            "return": [],
            "arguments": {
                "self": [],
                "classtype": []
            }
        },
        "_RecordLoader.load": {
            "name": "load",
            "location": 378,
            "return": [],
            "arguments": {
                "self": [],
                "doc": [],
                "baseuri": [],
                "loadingOptions": [],
                "docRoot": []
            }
        },
        "_RecordLoader.__repr__": {
            "name": "__repr__",
            "location": 384,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_ExpressionLoader.__init__": {
            "name": "__init__",
            "location": 389,
            "return": [],
            "arguments": {
                "self": [],
                "items": []
            }
        },
        "_ExpressionLoader.load": {
            "name": "load",
            "location": 392,
            "return": [],
            "arguments": {
                "self": [],
                "doc": [],
                "baseuri": [],
                "loadingOptions": [],
                "docRoot": []
            }
        },
        "_UnionLoader.__init__": {
            "name": "__init__",
            "location": 400,
            "return": [],
            "arguments": {
                "self": [],
                "alternates": []
            }
        },
        "_UnionLoader.load": {
            "name": "load",
            "location": 404,
            "return": [],
            "arguments": {
                "self": [],
                "doc": [],
                "baseuri": [],
                "loadingOptions": [],
                "docRoot": []
            }
        },
        "_UnionLoader.__repr__": {
            "name": "__repr__",
            "location": 416,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_URILoader.__init__": {
            "name": "__init__",
            "location": 421,
            "return": [],
            "arguments": {
                "self": [],
                "inner": [],
                "scoped_id": [],
                "vocab_term": [],
                "scoped_ref": []
            }
        },
        "_URILoader.load": {
            "name": "load",
            "location": 428,
            "return": [],
            "arguments": {
                "self": [],
                "doc": [],
                "baseuri": [],
                "loadingOptions": [],
                "docRoot": []
            }
        },
        "_TypeDSLLoader.__init__": {
            "name": "__init__",
            "location": 462,
            "return": [],
            "arguments": {
                "self": [],
                "inner": [],
                "refScope": []
            }
        },
        "_TypeDSLLoader.resolve": {
            "name": "resolve",
            "location": 467,
            "return": [],
            "arguments": {
                "self": [],
                "doc": [],
                "baseuri": [],
                "loadingOptions": []
            }
        },
        "_TypeDSLLoader.load": {
            "name": "load",
            "location": 498,
            "return": [],
            "arguments": {
                "self": [],
                "doc": [],
                "baseuri": [],
                "loadingOptions": [],
                "docRoot": []
            }
        },
        "_IdMapLoader.__init__": {
            "name": "__init__",
            "location": 522,
            "return": [],
            "arguments": {
                "self": [],
                "inner": [],
                "mapSubject": [],
                "mapPredicate": []
            }
        },
        "_IdMapLoader.load": {
            "name": "load",
            "location": 528,
            "return": [],
            "arguments": {
                "self": [],
                "doc": [],
                "baseuri": [],
                "loadingOptions": [],
                "docRoot": []
            }
        }
    },
    "schema_salad-main/schema_salad/ref_resolver.py": {
        "file_uri": {
            "name": "file_uri",
            "location": 53,
            "return": [],
            "arguments": {
                "path": [],
                "split_frag": []
            }
        },
        "uri_file_path": {
            "name": "uri_file_path",
            "location": 71,
            "return": [],
            "arguments": {
                "url": []
            }
        },
        "to_validation_exception": {
            "name": "to_validation_exception",
            "location": 82,
            "return": [],
            "arguments": {
                "e": []
            }
        },
        "SubLoader": {
            "name": "SubLoader",
            "location": 127,
            "return": [],
            "arguments": {
                "loader": []
            }
        },
        "_copy_dict_without_key": {
            "name": "_copy_dict_without_key",
            "location": 1199,
            "return": [],
            "arguments": {
                "from_dict": [],
                "filtered_key": []
            }
        },
        "NormDict.__init__": {
            "name": "__init__",
            "location": 107,
            "return": [],
            "arguments": {
                "self": [],
                "normalize": []
            }
        },
        "NormDict.__eq__": {
            "name": "__eq__",
            "location": 111,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "NormDict.__getitem__": {
            "name": "__getitem__",
            "location": 114,
            "return": [],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "NormDict.__setitem__": {
            "name": "__setitem__",
            "location": 117,
            "return": [],
            "arguments": {
                "self": [],
                "key": [],
                "value": []
            }
        },
        "NormDict.__delitem__": {
            "name": "__delitem__",
            "location": 120,
            "return": [],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "NormDict.__contains__": {
            "name": "__contains__",
            "location": 123,
            "return": [],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "Loader.__init__": {
            "name": "__init__",
            "location": 143,
            "return": [],
            "arguments": {
                "self": [],
                "ctx": [],
                "schemagraph": [],
                "foreign_properties": [],
                "idx": [],
                "cache": [],
                "session": [],
                "fetcher_constructor": [],
                "skip_schemas": [],
                "url_fields": [],
                "allow_attachments": [],
                "doc_cache": []
            }
        },
        "Loader.expand_url": {
            "name": "expand_url",
            "location": 214,
            "return": [],
            "arguments": {
                "self": [],
                "url": [],
                "base_url": [],
                "scoped_id": [],
                "vocab_term": [],
                "scoped_ref": []
            }
        },
        "Loader._add_properties": {
            "name": "_add_properties",
            "location": 271,
            "return": [],
            "arguments": {
                "self": [],
                "s": []
            }
        },
        "Loader.add_namespaces": {
            "name": "add_namespaces",
            "location": 281,
            "return": [],
            "arguments": {
                "self": [],
                "ns": []
            }
        },
        "Loader.add_schemas": {
            "name": "add_schemas",
            "location": 284,
            "return": [],
            "arguments": {
                "self": [],
                "ns": [],
                "base_url": []
            }
        },
        "Loader.add_context": {
            "name": "add_context",
            "location": 321,
            "return": [],
            "arguments": {
                "self": [],
                "newcontext": []
            }
        },
        "Loader.resolve_ref": {
            "name": "resolve_ref",
            "location": 396,
            "return": [],
            "arguments": {
                "self": [],
                "ref": [],
                "base_url": [],
                "checklinks": [],
                "strict_foreign_properties": [],
                "content_types": []
            }
        },
        "Loader._resolve_idmap": {
            "name": "_resolve_idmap",
            "location": 565,
            "return": [],
            "arguments": {
                "self": [],
                "document": [],
                "loader": []
            }
        },
        "Loader._type_dsl": {
            "name": "_type_dsl",
            "location": 615,
            "return": [],
            "arguments": {
                "self": [],
                "t": [],
                "lc": [],
                "filename": []
            }
        },
        "Loader._secondaryFile_dsl": {
            "name": "_secondaryFile_dsl",
            "location": 643,
            "return": [],
            "arguments": {
                "self": [],
                "t": [],
                "lc": [],
                "filename": []
            }
        },
        "Loader._apply_dsl": {
            "name": "_apply_dsl",
            "location": 661,
            "return": [],
            "arguments": {
                "self": [],
                "datum": [],
                "d": [],
                "loader": [],
                "lc": [],
                "filename": []
            }
        },
        "Loader._resolve_dsl": {
            "name": "_resolve_dsl",
            "location": 676,
            "return": [],
            "arguments": {
                "self": [],
                "document": [],
                "loader": []
            }
        },
        "Loader._resolve_identifier": {
            "name": "_resolve_identifier",
            "location": 731,
            "return": [],
            "arguments": {
                "self": [],
                "document": [],
                "loader": [],
                "base_url": []
            }
        },
        "Loader._resolve_identity": {
            "name": "_resolve_identity",
            "location": 754,
            "return": [],
            "arguments": {
                "self": [],
                "document": [],
                "loader": [],
                "base_url": []
            }
        },
        "Loader._normalize_fields": {
            "name": "_normalize_fields",
            "location": 774,
            "return": [],
            "arguments": {
                "self": [],
                "document": [],
                "loader": []
            }
        },
        "Loader._resolve_uris": {
            "name": "_resolve_uris",
            "location": 784,
            "return": [],
            "arguments": {
                "self": [],
                "document": [],
                "loader": [],
                "base_url": []
            }
        },
        "Loader.resolve_all": {
            "name": "resolve_all",
            "location": 813,
            "return": [],
            "arguments": {
                "self": [],
                "document": [],
                "base_url": [],
                "file_base": [],
                "checklinks": [],
                "strict_foreign_properties": []
            }
        },
        "Loader.fetch": {
            "name": "fetch",
            "location": 972,
            "return": [],
            "arguments": {
                "self": [],
                "url": [],
                "inject_ids": [],
                "content_types": []
            }
        },
        "Loader.validate_scoped": {
            "name": "validate_scoped",
            "location": 1013,
            "return": [],
            "arguments": {
                "self": [],
                "field": [],
                "link": [],
                "docid": []
            }
        },
        "Loader.validate_link": {
            "name": "validate_link",
            "location": 1041,
            "return": [],
            "arguments": {
                "self": [],
                "field": [],
                "link": [],
                "docid": [],
                "all_doc_ids": []
            }
        },
        "Loader.getid": {
            "name": "getid",
            "location": 1095,
            "return": [],
            "arguments": {
                "self": [],
                "d": []
            }
        },
        "Loader.validate_links": {
            "name": "validate_links",
            "location": 1104,
            "return": [],
            "arguments": {
                "self": [],
                "document": [],
                "base_url": [],
                "all_doc_ids": [],
                "strict_foreign_properties": []
            }
        }
    },
    "schema_salad-main/schema_salad/schema.py": {
        "get_metaschema": {
            "name": "get_metaschema",
            "location": 85,
            "return": [],
            "arguments": {}
        },
        "add_namespaces": {
            "name": "add_namespaces",
            "location": 205,
            "return": [],
            "arguments": {
                "metadata": [],
                "namespaces": []
            }
        },
        "collect_namespaces": {
            "name": "collect_namespaces",
            "location": 219,
            "return": [],
            "arguments": {
                "metadata": []
            }
        },
        "load_schema": {
            "name": "load_schema",
            "location": 233,
            "return": [],
            "arguments": {
                "schema_ref": [],
                "cache": []
            }
        },
        "load_and_validate": {
            "name": "load_and_validate",
            "location": 266,
            "return": [],
            "arguments": {
                "document_loader": [],
                "avsc_names": [],
                "document": [],
                "strict": [],
                "strict_foreign_properties": []
            }
        },
        "validate_doc": {
            "name": "validate_doc",
            "location": 304,
            "return": [],
            "arguments": {
                "schema_names": [],
                "doc": [],
                "loader": [],
                "strict": [],
                "strict_foreign_properties": []
            }
        },
        "get_anon_name": {
            "name": "get_anon_name",
            "location": 404,
            "return": [],
            "arguments": {
                "rec": []
            }
        },
        "replace_type": {
            "name": "replace_type",
            "location": 436,
            "return": [],
            "arguments": {
                "items": [],
                "spec": [],
                "loader": [],
                "found": [],
                "find_embeds": [],
                "deepen": []
            }
        },
        "avro_field_name": {
            "name": "avro_field_name",
            "location": 498,
            "return": [],
            "arguments": {
                "url": []
            }
        },
        "make_valid_avro": {
            "name": "make_valid_avro",
            "location": 516,
            "return": [],
            "arguments": {
                "items": [],
                "alltypes": [],
                "found": [],
                "union": [],
                "fielddef": [],
                "vocab": []
            }
        },
        "deepcopy_strip": {
            "name": "deepcopy_strip",
            "location": 587,
            "return": [],
            "arguments": {
                "item": []
            }
        },
        "extend_and_specialize": {
            "name": "extend_and_specialize",
            "location": 602,
            "return": [],
            "arguments": {
                "items": [],
                "loader": []
            }
        },
        "make_avro": {
            "name": "make_avro",
            "location": 735,
            "return": [],
            "arguments": {
                "i": [],
                "loader": [],
                "metaschema_vocab": []
            }
        },
        "make_avro_schema": {
            "name": "make_avro_schema",
            "location": 758,
            "return": [],
            "arguments": {
                "i": [],
                "loader": [],
                "metaschema_vocab": []
            }
        },
        "make_avro_schema_from_avro": {
            "name": "make_avro_schema_from_avro",
            "location": 773,
            "return": [],
            "arguments": {
                "avro": []
            }
        },
        "shortname": {
            "name": "shortname",
            "location": 779,
            "return": [],
            "arguments": {
                "inputid": []
            }
        },
        "print_inheritance": {
            "name": "print_inheritance",
            "location": 787,
            "return": [],
            "arguments": {
                "doc": [],
                "stream": []
            }
        },
        "print_fieldrefs": {
            "name": "print_fieldrefs",
            "location": 806,
            "return": [],
            "arguments": {
                "doc": [],
                "loader": [],
                "stream": []
            }
        }
    },
    "schema_salad-main/schema_salad/sourceline.py": {
        "_add_lc_filename": {
            "name": "_add_lc_filename",
            "location": 22,
            "return": [],
            "arguments": {
                "r": [],
                "source": []
            }
        },
        "relname": {
            "name": "relname",
            "location": 33,
            "return": [],
            "arguments": {
                "source": []
            }
        },
        "add_lc_filename": {
            "name": "add_lc_filename",
            "location": 40,
            "return": [],
            "arguments": {
                "r": [],
                "source": []
            }
        },
        "reflow_all": {
            "name": "reflow_all",
            "location": 44,
            "return": [],
            "arguments": {
                "text": [],
                "maxline": []
            }
        },
        "reflow": {
            "name": "reflow",
            "location": 71,
            "return": [],
            "arguments": {
                "text": [],
                "maxline": [],
                "shift": []
            }
        },
        "indent": {
            "name": "indent",
            "location": 87,
            "return": [],
            "arguments": {
                "v": [],
                "nolead": [],
                "shift": [],
                "bullet": []
            }
        },
        "bullets": {
            "name": "bullets",
            "location": 108,
            "return": [],
            "arguments": {
                "textlist": [],
                "bul": []
            }
        },
        "strip_duplicated_lineno": {
            "name": "strip_duplicated_lineno",
            "location": 115,
            "return": [],
            "arguments": {
                "text": []
            }
        },
        "strip_dup_lineno": {
            "name": "strip_dup_lineno",
            "location": 136,
            "return": [],
            "arguments": {
                "text": [],
                "maxline": []
            }
        },
        "cmap": {
            "name": "cmap",
            "location": 175,
            "return": [],
            "arguments": {
                "d": [],
                "lc": [],
                "fn": []
            }
        },
        "SourceLine.__init__": {
            "name": "__init__",
            "location": 233,
            "return": [],
            "arguments": {
                "self": [],
                "item": [],
                "key": [],
                "raise_type": [],
                "include_traceback": []
            }
        },
        "SourceLine.__enter__": {
            "name": "__enter__",
            "location": 245,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SourceLine.__exit__": {
            "name": "__exit__",
            "location": 248,
            "return": [],
            "arguments": {
                "self": [],
                "exc_type": [],
                "exc_value": [],
                "tb": []
            }
        },
        "SourceLine.file": {
            "name": "file",
            "location": 258,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SourceLine.start": {
            "name": "start",
            "location": 264,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SourceLine.end": {
            "name": "end",
            "location": 279,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SourceLine.makeLead": {
            "name": "makeLead",
            "location": 282,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SourceLine.makeError": {
            "name": "makeError",
            "location": 290,
            "return": [],
            "arguments": {
                "self": [],
                "msg": []
            }
        },
        "indent.lineno": {
            "name": "lineno",
            "location": 94,
            "return": [],
            "arguments": {
                "i": [],
                "line": []
            }
        }
    },
    "schema_salad-main/schema_salad/typescript_codegen.py": {
        "doc_to_doc_string": {
            "name": "doc_to_doc_string",
            "location": 27,
            "return": [],
            "arguments": {
                "doc": [],
                "indent_level": []
            }
        },
        "TypeScriptCodeGen.__init__": {
            "name": "__init__",
            "location": 89,
            "return": [],
            "arguments": {
                "self": [],
                "base": [],
                "examples": [],
                "target": [],
                "package": []
            }
        },
        "TypeScriptCodeGen.prologue": {
            "name": "prologue",
            "location": 104,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TypeScriptCodeGen.safe_name": {
            "name": "safe_name",
            "location": 113,
            "return": [],
            "arguments": {
                "name": []
            }
        },
        "TypeScriptCodeGen.begin_class": {
            "name": "begin_class",
            "location": 132,
            "return": [],
            "arguments": {
                "self": [],
                "classname": [],
                "extends": [],
                "doc": [],
                "abstract": [],
                "field_names": [],
                "idfield": [],
                "optional_fields": []
            }
        },
        "TypeScriptCodeGen.end_class": {
            "name": "end_class",
            "location": 282,
            "return": [],
            "arguments": {
                "self": [],
                "classname": [],
                "field_names": []
            }
        },
        "TypeScriptCodeGen.type_loader": {
            "name": "type_loader",
            "location": 369,
            "return": [],
            "arguments": {
                "self": [],
                "type_declaration": []
            }
        },
        "TypeScriptCodeGen.type_loader_enum": {
            "name": "type_loader_enum",
            "location": 434,
            "return": [],
            "arguments": {
                "self": [],
                "type_declaration": []
            }
        },
        "TypeScriptCodeGen.declare_field": {
            "name": "declare_field",
            "location": 468,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "fieldtype": [],
                "doc": [],
                "optional": []
            }
        },
        "TypeScriptCodeGen.declare_id_field": {
            "name": "declare_id_field",
            "location": 639,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "fieldtype": [],
                "doc": [],
                "optional": [],
                "subscope": []
            }
        },
        "TypeScriptCodeGen.to_typescript": {
            "name": "to_typescript",
            "location": 678,
            "return": [],
            "arguments": {
                "self": [],
                "val": []
            }
        },
        "TypeScriptCodeGen.uri_loader": {
            "name": "uri_loader",
            "location": 688,
            "return": [],
            "arguments": {
                "self": [],
                "inner": [],
                "scoped_id": [],
                "vocab_term": [],
                "ref_scope": []
            }
        },
        "TypeScriptCodeGen.idmap_loader": {
            "name": "idmap_loader",
            "location": 713,
            "return": [],
            "arguments": {
                "self": [],
                "field": [],
                "inner": [],
                "map_subject": [],
                "map_predicate": []
            }
        },
        "TypeScriptCodeGen.typedsl_loader": {
            "name": "typedsl_loader",
            "location": 728,
            "return": [],
            "arguments": {
                "self": [],
                "inner": [],
                "ref_scope": []
            }
        },
        "TypeScriptCodeGen.epilogue": {
            "name": "epilogue",
            "location": 739,
            "return": [],
            "arguments": {
                "self": [],
                "root_loader": []
            }
        },
        "TypeScriptCodeGen.secondaryfilesdsl_loader": {
            "name": "secondaryfilesdsl_loader",
            "location": 854,
            "return": [],
            "arguments": {
                "self": [],
                "inner": []
            }
        },
        "TypeScriptCodeGen.epilogue.template_from_resource": {
            "name": "template_from_resource",
            "location": 758,
            "return": [],
            "arguments": {
                "resource": []
            }
        },
        "TypeScriptCodeGen.epilogue.expand_resource_template_to": {
            "name": "expand_resource_template_to",
            "location": 765,
            "return": [],
            "arguments": {
                "resource": [],
                "path": []
            }
        },
        "TypeScriptCodeGen.epilogue.copy_utils_recursive": {
            "name": "copy_utils_recursive",
            "location": 834,
            "return": [],
            "arguments": {
                "util_src": [],
                "util_target": []
            }
        }
    },
    "schema_salad-main/schema_salad/utils.py": {
        "add_dictlist": {
            "name": "add_dictlist",
            "location": 41,
            "return": [],
            "arguments": {
                "di": [],
                "key": [],
                "val": []
            }
        },
        "aslist": {
            "name": "aslist",
            "location": 47,
            "return": [],
            "arguments": {
                "thing": []
            }
        },
        "flatten": {
            "name": "flatten",
            "location": 63,
            "return": [],
            "arguments": {
                "thing": [],
                "ltypes": []
            }
        },
        "onWindows": {
            "name": "onWindows",
            "location": 86,
            "return": [],
            "arguments": {}
        },
        "convert_to_dict": {
            "name": "convert_to_dict",
            "location": 91,
            "return": [],
            "arguments": {
                "j4": []
            }
        },
        "json_dump": {
            "name": "json_dump",
            "location": 100,
            "return": [],
            "arguments": {
                "obj": [],
                "fp": []
            }
        },
        "json_dumps": {
            "name": "json_dumps",
            "location": 109,
            "return": [],
            "arguments": {
                "obj": []
            }
        },
        "stdout": {
            "name": "stdout",
            "location": 117,
            "return": [],
            "arguments": {}
        },
        "yaml_no_ts": {
            "name": "yaml_no_ts",
            "location": 133,
            "return": [],
            "arguments": {}
        },
        "_RoundTripNoTimeStampConstructor.construct_yaml_timestamp": {
            "name": "construct_yaml_timestamp",
            "location": 123,
            "return": [],
            "arguments": {
                "self": [],
                "node": [],
                "values": []
            }
        }
    },
    "schema_salad-main/schema_salad/validate.py": {
        "validate": {
            "name": "validate",
            "location": 18,
            "return": [],
            "arguments": {
                "expected_schema": [],
                "datum": [],
                "identifiers": [],
                "strict": [],
                "foreign_properties": [],
                "vocab": []
            }
        },
        "avro_shortname": {
            "name": "avro_shortname",
            "location": 47,
            "return": [],
            "arguments": {
                "name": []
            }
        },
        "avro_type_name": {
            "name": "avro_type_name",
            "location": 67,
            "return": [],
            "arguments": {
                "url": []
            }
        },
        "friendly": {
            "name": "friendly",
            "location": 89,
            "return": [],
            "arguments": {
                "v": []
            }
        },
        "vpformat": {
            "name": "vpformat",
            "location": 102,
            "return": [],
            "arguments": {
                "datum": []
            }
        },
        "validate_ex": {
            "name": "validate_ex",
            "location": 109,
            "return": [],
            "arguments": {
                "expected_schema": [],
                "datum": [],
                "identifiers": [],
                "strict": [],
                "foreign_properties": [],
                "raise_ex": [],
                "strict_foreign_properties": [],
                "logger": [],
                "skip_foreign_properties": [],
                "vocab": []
            }
        }
    },
    "schema_salad-main/schema_salad/__init__.py": {},
    "schema_salad-main/schema_salad/__main__.py": {},
    "schema_salad-main/schema_salad/avro/schema.py": {
        "get_other_props": {
            "name": "get_other_props",
            "location": 554,
            "return": [
                "dict[, ]",
                "None"
            ],
            "arguments": {
                "all_props": [],
                "reserved_props": [
                    "dict[str, typing.Any]",
                    "dict[, ]",
                    "bool",
                    "list[str]",
                    "dict[str, object]"
                ]
            }
        },
        "make_avsc_object": {
            "name": "make_avsc_object",
            "location": 566,
            "return": [
                "PrimitiveSchema"
            ],
            "arguments": {
                "json_data": [
                    "dict[str, typing.Any]",
                    "dict[str, str]",
                    "dict[, ]"
                ],
                "names": [
                    "None",
                    "str",
                    "bool"
                ]
            }
        },
        "is_subtype": {
            "name": "is_subtype",
            "location": 653,
            "return": [
                "bool"
            ],
            "arguments": {
                "existing": [
                    "tuple[str]"
                ],
                "new": [
                    "list[str]",
                    "list[]"
                ]
            }
        },
        "Schema.__init__": {
            "name": "__init__",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "atype": [
                    "str",
                    "bytes"
                ],
                "other_props": [
                    "None",
                    "dict[str, typing.Any]",
                    "dict[str, dict[str, str]]",
                    "int",
                    "dict[, ]",
                    "bytes",
                    "dict[str, typing.Union[str,int]]"
                ]
            }
        },
        "Schema.props": {
            "name": "props",
            "location": 114,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Schema.get_prop": {
            "name": "get_prop",
            "location": 118,
            "return": [],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "int",
                    "None"
                ]
            }
        },
        "Schema.set_prop": {
            "name": "set_prop",
            "location": 121,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str"
                ],
                "value": [
                    "str"
                ]
            }
        },
        "Name.__init__": {
            "name": "__init__",
            "location": 128,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name_attr": [
                    "str"
                ],
                "space_attr": [
                    "None",
                    "str",
                    "typing.Sequence[str]",
                    "dict[, ]",
                    "list[str]",
                    "bool"
                ],
                "default_space": [
                    "None",
                    "bool"
                ]
            }
        },
        "Name.fullname": {
            "name": "fullname",
            "location": 167,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Name.get_space": {
            "name": "get_space",
            "location": 170,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Names.__init__": {
            "name": "__init__",
            "location": 184,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "default_namespace": [
                    "None",
                    "int",
                    "tuple[]",
                    "float"
                ]
            }
        },
        "Names.has_name": {
            "name": "has_name",
            "location": 188,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "name_attr": [
                    "str",
                    "list[str]",
                    "None",
                    "bool"
                ],
                "space_attr": [
                    "str",
                    "list[str]",
                    "None",
                    "bool"
                ]
            }
        },
        "Names.get_name": {
            "name": "get_name",
            "location": 192,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name_attr": [
                    "str",
                    "list[str]",
                    "None",
                    "bool"
                ],
                "space_attr": [
                    "str",
                    "list[str]",
                    "None",
                    "bool"
                ]
            }
        },
        "Names.add_name": {
            "name": "add_name",
            "location": 200,
            "return": [
                "Name"
            ],
            "arguments": {
                "self": [],
                "name_attr": [
                    "str",
                    "None",
                    "list[str]",
                    "list[dict[str, str]]"
                ],
                "space_attr": [
                    "str",
                    "None",
                    "list[str]",
                    "list[dict[str, str]]"
                ],
                "new_schema": [
                    "typing.Iterable[str]"
                ]
            }
        },
        "NamedSchema.__init__": {
            "name": "__init__",
            "location": 230,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "atype": [
                    "typing.Sequence[int]",
                    "bool",
                    "float"
                ],
                "name": [
                    "str",
                    "list[str]",
                    "dict[str, typing.Any]",
                    "None"
                ],
                "namespace": [
                    "None",
                    "str",
                    "dict[str, typing.Any]"
                ],
                "names": [
                    "str",
                    "int",
                    "dict[str, typing.Any]"
                ],
                "other_props": [
                    "None",
                    "typing.Sequence[int]",
                    "bool",
                    "float"
                ]
            }
        },
        "NamedSchema.name": {
            "name": "name",
            "location": 267,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Field.__init__": {
            "name": "__init__",
            "location": 272,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "atype": [
                    "str",
                    "None",
                    "list[str]",
                    "bool"
                ],
                "name": [
                    "str",
                    "None",
                    "list[str]",
                    "dict[str, typing.Any]",
                    "typing.Sequence[typing.Sequence[typing.Any]]",
                    "bool"
                ],
                "has_default": [
                    "str",
                    "None",
                    "bool",
                    "typing.Iterable[str]"
                ],
                "default": [
                    "None",
                    "str",
                    "bool",
                    "typing.Iterable[str]"
                ],
                "order": [
                    "None",
                    "bool",
                    "str"
                ],
                "names": [],
                "doc": [
                    "None",
                    "int",
                    "str",
                    "typing.Callable[, ]"
                ],
                "other_props": [
                    "None",
                    "int",
                    "dict[, ]",
                    "dict[str, typing.Any]",
                    "list[str]",
                    "bytes",
                    "str"
                ]
            }
        },
        "Field.default": {
            "name": "default",
            "location": 322,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Field.get_prop": {
            "name": "get_prop",
            "location": 326,
            "return": [],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "int",
                    "None"
                ]
            }
        },
        "Field.set_prop": {
            "name": "set_prop",
            "location": 329,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str"
                ],
                "value": [
                    "str"
                ]
            }
        },
        "PrimitiveSchema.__init__": {
            "name": "__init__",
            "location": 339,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "atype": [
                    "list[typing.Any]",
                    "None",
                    "typing.Sequence[str]",
                    "list[str]",
                    "str",
                    "int"
                ],
                "other_props": [
                    "None",
                    "int",
                    "typing.Sequence[typing.Any]",
                    "tuple[typing.Union[float,float]]"
                ]
            }
        },
        "EnumSchema.__init__": {
            "name": "__init__",
            "location": 356,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "None",
                    "list[]",
                    "dict[, ]"
                ],
                "namespace": [
                    "str",
                    "None",
                    "list[]",
                    "dict[, ]"
                ],
                "symbols": [],
                "names": [
                    "None",
                    "str",
                    "list[]",
                    "dict[, ]"
                ],
                "doc": [
                    "None",
                    "int",
                    "str",
                    "list[typing.Any]",
                    "typing.Callable[, ]"
                ],
                "other_props": [
                    "None",
                    "str",
                    "list[]",
                    "dict[, ]"
                ]
            }
        },
        "EnumSchema.symbols": {
            "name": "symbols",
            "location": 386,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ArraySchema.__init__": {
            "name": "__init__",
            "location": 396,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "items": [
                    "str",
                    "dict[str, typing.Any]",
                    "None",
                    "tuple[typing.Union[list[str],typing.Any,None,typing.Any,None]]",
                    "dict[, ]",
                    "bool"
                ],
                "names": [
                    "str",
                    "typing.Sequence[typing.Any]",
                    "typing.Mapping",
                    "list[str]",
                    "dict[str, typing.Any]",
                    "list[]"
                ],
                "other_props": [
                    "None",
                    "bool",
                    "str"
                ]
            }
        },
        "ArraySchema.items": {
            "name": "items",
            "location": 420,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UnionSchema.__init__": {
            "name": "__init__",
            "location": 429,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "schemas": [
                    "str"
                ],
                "names": [
                    "list[str]",
                    "str",
                    "dict[, ]",
                    "dict[str, typing.Any]",
                    "list[]"
                ]
            }
        },
        "UnionSchema.schemas": {
            "name": "schemas",
            "location": 471,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RecordSchema.make_field_objects": {
            "name": "make_field_objects",
            "location": 477,
            "return": [
                "list[Field]"
            ],
            "arguments": {
                "field_data": [
                    "dict[str, typing.Any]"
                ],
                "names": [
                    "str",
                    "bool"
                ]
            }
        },
        "RecordSchema.__init__": {
            "name": "__init__",
            "location": 512,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "bool",
                    "typing.Sequence[typing.Any]",
                    "None",
                    "typing.Mapping"
                ],
                "namespace": [
                    "str",
                    "bool",
                    "typing.Sequence[typing.Any]",
                    "None",
                    "typing.Mapping"
                ],
                "fields": [
                    "str",
                    "list[str]",
                    "typing.Sequence[typing.Any]",
                    "typing.Mapping",
                    "typing.Sequence[str]"
                ],
                "names": [
                    "str",
                    "list[str]",
                    "int"
                ],
                "schema_type": [
                    "typing.Text"
                ],
                "doc": [
                    "None",
                    "int",
                    "typing.Any",
                    "list[typing.Any]",
                    "typing.Callable[, ]"
                ],
                "other_props": [
                    "None",
                    "str",
                    "bool"
                ]
            }
        },
        "RecordSchema.fields": {
            "name": "fields",
            "location": 547,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Name.__init__.validate": {
            "name": "validate",
            "location": 143,
            "return": [
                "None"
            ],
            "arguments": {
                "val": [],
                "name": []
            }
        }
    },
    "schema_salad-main/schema_salad/avro/__init__.py": {},
    "schema_salad-main/schema_salad/tests/matcher.py": {
        "StripYAMLComments": {
            "name": "StripYAMLComments",
            "location": 40,
            "return": [],
            "arguments": {
                "yml": [
                    "bool",
                    "str",
                    "float",
                    "typing.Sequence[int]"
                ]
            }
        },
        "JsonDiffMatcher.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "expected": [
                    "str",
                    "bool",
                    "None"
                ]
            }
        },
        "JsonDiffMatcher.__eq__": {
            "name": "__eq__",
            "location": 23,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "actual": [
                    "str",
                    "float",
                    "bytes",
                    "typing.Callable[, ]"
                ]
            }
        }
    },
    "schema_salad-main/schema_salad/tests/test_avro_names.py": {
        "test_avro_loading": {
            "name": "test_avro_loading",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "schema_salad-main/schema_salad/tests/test_cg.py": {
        "test_load": {
            "name": "test_load",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_err": {
            "name": "test_err",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_include": {
            "name": "test_include",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_import": {
            "name": "test_import",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_import2": {
            "name": "test_import2",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_err2": {
            "name": "test_err2",
            "location": 115,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_idmap": {
            "name": "test_idmap",
            "location": 124,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_idmap2": {
            "name": "test_idmap2",
            "location": 148,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_load_pt": {
            "name": "test_load_pt",
            "location": 163,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_shortname": {
            "name": "test_shortname",
            "location": 180,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "metaschema_pre": {
            "name": "metaschema_pre",
            "location": 191,
            "return": [],
            "arguments": {}
        },
        "test_load_metaschema": {
            "name": "test_load_metaschema",
            "location": 200,
            "return": [
                "None"
            ],
            "arguments": {
                "metaschema_pre": [
                    "int",
                    "tuple[typing.Union[float,float,float,float,float]]",
                    "float"
                ]
            }
        },
        "test_load_by_yaml_metaschema": {
            "name": "test_load_by_yaml_metaschema",
            "location": 212,
            "return": [
                "None"
            ],
            "arguments": {
                "metaschema_pre": [
                    "int",
                    "tuple[typing.Union[float,float,float,float,float]]",
                    "float"
                ]
            }
        },
        "test_load_cwlschema": {
            "name": "test_load_cwlschema",
            "location": 227,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "schema_salad-main/schema_salad/tests/test_cli_args.py": {
        "captured_output": {
            "name": "captured_output",
            "location": 12,
            "return": [
                "typing.Generator[tuple[typing.Union[StringIO,StringIO]]]"
            ],
            "arguments": {}
        },
        "test_version": {
            "name": "test_version",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_empty_input": {
            "name": "test_empty_input",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "schema_salad-main/schema_salad/tests/test_cwl11.py": {
        "cwl_v1_2_schema": {
            "name": "cwl_v1_2_schema",
            "location": 29,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "tmp_path_factory": []
            }
        },
        "load_cwl": {
            "name": "load_cwl",
            "location": 44,
            "return": [
                "str",
                "tuple[typing.Union[str,str]]",
                "list[str]"
            ],
            "arguments": {
                "cwl_v1_2_schema": [
                    "str",
                    "None"
                ],
                "src": [
                    "str"
                ]
            }
        },
        "test_secondaryFiles": {
            "name": "test_secondaryFiles",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "cwl_v1_2_schema": [
                    "typing.Callable[, ]",
                    "str",
                    "None"
                ]
            }
        },
        "test_outputBinding": {
            "name": "test_outputBinding",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "cwl_v1_2_schema": [
                    "typing.Callable[, ]"
                ]
            }
        },
        "test_yaml_tab_error": {
            "name": "test_yaml_tab_error",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "cwl_v1_2_schema": [
                    "typing.Callable[, ]"
                ]
            }
        }
    },
    "schema_salad-main/schema_salad/tests/test_dotnet_codegen.py": {
        "test_cwl_gen": {
            "name": "test_cwl_gen",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "tmp_path": [
                    "bool"
                ]
            }
        },
        "test_meta_schema_gen": {
            "name": "test_meta_schema_gen",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "tmp_path": []
            }
        },
        "test_class_field": {
            "name": "test_class_field",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "tmp_path": []
            }
        },
        "get_data_uri": {
            "name": "get_data_uri",
            "location": 76,
            "return": [],
            "arguments": {
                "resource_path": [
                    "str",
                    "typing.Deque"
                ]
            }
        },
        "dotnet_codegen": {
            "name": "dotnet_codegen",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "file_uri": [
                    "str"
                ],
                "target": [
                    "str",
                    "dict[str, typing.Any]"
                ],
                "examples": [
                    "None",
                    "str",
                    "dict[str, typing.Any]"
                ]
            }
        }
    },
    "schema_salad-main/schema_salad/tests/test_errors.py": {
        "test_errors": {
            "name": "test_errors",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_error_message1": {
            "name": "test_error_message1",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_error_message2": {
            "name": "test_error_message2",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_error_message3": {
            "name": "test_error_message3",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_error_message4": {
            "name": "test_error_message4",
            "location": 105,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_error_message5": {
            "name": "test_error_message5",
            "location": 124,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_error_message7": {
            "name": "test_error_message7",
            "location": 146,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_error_message8": {
            "name": "test_error_message8",
            "location": 170,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_error_message9": {
            "name": "test_error_message9",
            "location": 190,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_error_message10": {
            "name": "test_error_message10",
            "location": 209,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_error_message11": {
            "name": "test_error_message11",
            "location": 233,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_error_message15": {
            "name": "test_error_message15",
            "location": 253,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_errors_previously_defined_dict_key": {
            "name": "test_errors_previously_defined_dict_key",
            "location": 283,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_bad_schema": {
            "name": "test_bad_schema",
            "location": 307,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_bad_schema2": {
            "name": "test_bad_schema2",
            "location": 316,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "schema_salad-main/schema_salad/tests/test_examples.py": {
        "test_schemas": {
            "name": "test_schemas",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_self_validate": {
            "name": "test_self_validate",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_print_rdf": {
            "name": "test_print_rdf",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "capfdbinary": []
            }
        },
        "test_print_pre_schema": {
            "name": "test_print_pre_schema",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "capfdbinary": []
            }
        },
        "test_print_pre": {
            "name": "test_print_pre",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "capfdbinary": []
            }
        },
        "test_print_schema_index": {
            "name": "test_print_schema_index",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "capfdbinary": []
            }
        },
        "test_print_index": {
            "name": "test_print_index",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {
                "capfdbinary": []
            }
        },
        "test_print_schema_metadata": {
            "name": "test_print_schema_metadata",
            "location": 104,
            "return": [
                "None"
            ],
            "arguments": {
                "capfdbinary": []
            }
        },
        "test_print_metadata": {
            "name": "test_print_metadata",
            "location": 113,
            "return": [
                "None"
            ],
            "arguments": {
                "capfdbinary": []
            }
        },
        "test_schema_salad_doc_oneline_doc": {
            "name": "test_schema_salad_doc_oneline_doc",
            "location": 125,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_avro_regression": {
            "name": "test_avro_regression",
            "location": 134,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_jsonld_ctx": {
            "name": "test_jsonld_ctx",
            "location": 140,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_idmap": {
            "name": "test_idmap",
            "location": 159,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_scoped_ref": {
            "name": "test_scoped_ref",
            "location": 196,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_examples": {
            "name": "test_examples",
            "location": 283,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_yaml_float_test": {
            "name": "test_yaml_float_test",
            "location": 300,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_typedsl_ref": {
            "name": "test_typedsl_ref",
            "location": 304,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_secondaryFile_dsl_ref": {
            "name": "test_secondaryFile_dsl_ref",
            "location": 328,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_scoped_id": {
            "name": "test_scoped_id",
            "location": 345,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_rdf_datetime": {
            "name": "test_rdf_datetime",
            "location": 406,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_yaml_datetime": {
            "name": "test_yaml_datetime",
            "location": 437,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_subscoped_id": {
            "name": "test_subscoped_id",
            "location": 452,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_mixin": {
            "name": "test_mixin",
            "location": 469,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_fragment": {
            "name": "test_fragment",
            "location": 488,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_file_uri": {
            "name": "test_file_uri",
            "location": 497,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_sourceline": {
            "name": "test_sourceline",
            "location": 515,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_cmap": {
            "name": "test_cmap",
            "location": 533,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_blank_node_id": {
            "name": "test_blank_node_id",
            "location": 539,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_can_use_Any": {
            "name": "test_can_use_Any",
            "location": 554,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_nullable_links": {
            "name": "test_nullable_links",
            "location": 566,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "schema_salad-main/schema_salad/tests/test_fetch.py": {
        "test_fetcher": {
            "name": "test_fetcher",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_cache": {
            "name": "test_cache",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "testFetcher.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cache": [
                    "None",
                    "bool",
                    "str"
                ],
                "session": [
                    "None",
                    "bool",
                    "str"
                ]
            }
        },
        "testFetcher.fetch_text": {
            "name": "fetch_text",
            "location": 21,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str"
                ],
                "content_types": [
                    "None",
                    "bool",
                    "str"
                ]
            }
        },
        "testFetcher.check_exists": {
            "name": "check_exists",
            "location": 29,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str"
                ]
            }
        },
        "testFetcher.urljoin": {
            "name": "urljoin",
            "location": 35,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "base": [
                    "str",
                    "list[]",
                    "list[str]"
                ],
                "url": [
                    "str"
                ]
            }
        },
        "CWLTestFetcher.__init__": {
            "name": "__init__",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cache": [
                    "None",
                    "bool",
                    "str"
                ],
                "session": [
                    "None",
                    "bool",
                    "str"
                ]
            }
        },
        "CWLTestFetcher.fetch_text": {
            "name": "fetch_text",
            "location": 54,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str"
                ],
                "content_types": [
                    "None",
                    "bool",
                    "str"
                ]
            }
        },
        "CWLTestFetcher.check_exists": {
            "name": "check_exists",
            "location": 65,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "dict[str, typing.Union[str,int]]",
                    "str",
                    "None"
                ]
            }
        },
        "CWLTestFetcher.urljoin": {
            "name": "urljoin",
            "location": 68,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "base": [
                    "str",
                    "list[]",
                    "list[str]"
                ],
                "url": [
                    "str"
                ]
            }
        }
    },
    "schema_salad-main/schema_salad/tests/test_fp.py": {
        "test_fp": {
            "name": "test_fp",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "schema_salad-main/schema_salad/tests/test_java_codegen.py": {
        "test_cwl_gen": {
            "name": "test_cwl_gen",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "tmp_path": [
                    "bool"
                ]
            }
        },
        "test_meta_schema_gen": {
            "name": "test_meta_schema_gen",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "tmp_path": []
            }
        },
        "java_codegen": {
            "name": "java_codegen",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "file_uri": [
                    "str"
                ],
                "target": [
                    "str"
                ],
                "examples": [
                    "None",
                    "str"
                ]
            }
        }
    },
    "schema_salad-main/schema_salad/tests/test_makedoc.py": {
        "test_schema_salad_inherit_docs": {
            "name": "test_schema_salad_inherit_docs",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "schema_salad-main/schema_salad/tests/test_misc.py": {
        "test_misc": {
            "name": "test_misc",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "schema_salad-main/schema_salad/tests/test_print_oneline.py": {
        "test_print_oneline": {
            "name": "test_print_oneline",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_print_oneline_for_invalid_yaml": {
            "name": "test_print_oneline_for_invalid_yaml",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_print_oneline_for_errors_in_the_same_line": {
            "name": "test_print_oneline_for_errors_in_the_same_line",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_print_oneline_for_errors_in_resolve_ref": {
            "name": "test_print_oneline_for_errors_in_resolve_ref",
            "location": 104,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_for_invalid_yaml1": {
            "name": "test_for_invalid_yaml1",
            "location": 131,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_for_invalid_yaml2": {
            "name": "test_for_invalid_yaml2",
            "location": 159,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "schema_salad-main/schema_salad/tests/test_python_codegen.py": {
        "test_cwl_gen": {
            "name": "test_cwl_gen",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "tmp_path": []
            }
        },
        "test_meta_schema_gen": {
            "name": "test_meta_schema_gen",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "tmp_path": []
            }
        },
        "test_meta_schema_gen_up_to_date": {
            "name": "test_meta_schema_gen_up_to_date",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "tmp_path": []
            }
        },
        "test_meta_schema_gen_no_base": {
            "name": "test_meta_schema_gen_no_base",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "tmp_path": []
            }
        },
        "python_codegen": {
            "name": "python_codegen",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "file_uri": [
                    "str",
                    "list[str]"
                ],
                "target": [
                    "str",
                    "dict[, ]",
                    "dict[str, typing.Any]",
                    "list[str]",
                    "int"
                ],
                "parser_info": [
                    "None",
                    "str",
                    "dict[, ]",
                    "dict[str, typing.Any]",
                    "list[str]",
                    "int"
                ],
                "package": [
                    "None",
                    "str",
                    "dict[, ]",
                    "dict[str, typing.Any]",
                    "list[str]",
                    "int"
                ]
            }
        },
        "test_default_parser_info": {
            "name": "test_default_parser_info",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "tmp_path": []
            }
        },
        "test_parser_info": {
            "name": "test_parser_info",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {
                "tmp_path": []
            }
        },
        "test_use_of_package_for_parser_info": {
            "name": "test_use_of_package_for_parser_info",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {
                "tmp_path": []
            }
        }
    },
    "schema_salad-main/schema_salad/tests/test_real_cwl.py": {
        "TestRealWorldCWL.setup_class": {
            "name": "setup_class",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "typing.Mapping",
                    "typing.Type"
                ]
            }
        },
        "TestRealWorldCWL.load_cwl": {
            "name": "load_cwl",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "src": [
                    "str"
                ]
            }
        },
        "TestRealWorldCWL.test_topmed_single_doc": {
            "name": "test_topmed_single_doc",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRealWorldCWL.test_h3agatk_WES": {
            "name": "test_h3agatk_WES",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRealWorldCWL.test_h3agatk_SNP": {
            "name": "test_h3agatk_SNP",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRealWorldCWL.test_icgc_pancan": {
            "name": "test_icgc_pancan",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "schema_salad-main/schema_salad/tests/test_ref_resolver.py": {
        "is_fs_case_sensitive": {
            "name": "is_fs_case_sensitive",
            "location": 21,
            "return": [
                "bool"
            ],
            "arguments": {
                "path": [
                    "str",
                    "list[str]"
                ]
            }
        },
        "tmp_dir_fixture": {
            "name": "tmp_dir_fixture",
            "location": 29,
            "return": [],
            "arguments": {
                "request": [
                    "dict[, ]"
                ]
            }
        },
        "test_Loader_initialisation_for_HOME_env_var": {
            "name": "test_Loader_initialisation_for_HOME_env_var",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "tmp_dir_fixture": [
                    "str"
                ]
            }
        },
        "test_Loader_initialisation_for_TMP_env_var": {
            "name": "test_Loader_initialisation_for_TMP_env_var",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "tmp_dir_fixture": [
                    "str"
                ]
            }
        },
        "test_Loader_initialisation_with_neither_TMP_HOME_set": {
            "name": "test_Loader_initialisation_with_neither_TMP_HOME_set",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "tmp_dir_fixture": [
                    "str",
                    "typing.Callable[typing.Any, None]",
                    "None"
                ]
            }
        },
        "test_Loader_initialisation_disable_doc_cache": {
            "name": "test_Loader_initialisation_disable_doc_cache",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "tmp_dir_fixture": [
                    "str",
                    "typing.Callable[typing.Any, None]",
                    "None",
                    "list[str]"
                ]
            }
        },
        "test_DefaultFetcher_urljoin_win32": {
            "name": "test_DefaultFetcher_urljoin_win32",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "tmp_dir_fixture": [
                    "str"
                ]
            }
        },
        "test_DefaultFetcher_urljoin_linux": {
            "name": "test_DefaultFetcher_urljoin_linux",
            "location": 128,
            "return": [
                "None"
            ],
            "arguments": {
                "tmp_dir_fixture": [
                    "str"
                ]
            }
        },
        "test_import_list": {
            "name": "test_import_list",
            "location": 171,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_fetch_inject_id": {
            "name": "test_fetch_inject_id",
            "location": 182,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_attachments": {
            "name": "test_attachments",
            "location": 222,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_check_exists_follows_redirects": {
            "name": "test_check_exists_follows_redirects",
            "location": 254,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "tmp_dir_fixture.teardown": {
            "name": "teardown",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_attachments.aa1": {
            "name": "aa1",
            "location": 233,
            "return": [
                "bool"
            ],
            "arguments": {
                "item": []
            }
        },
        "test_attachments.aa2": {
            "name": "aa2",
            "location": 244,
            "return": [
                "bool"
            ],
            "arguments": {
                "item": []
            }
        },
        "test_fetch_inject_id.lower": {
            "name": "lower",
            "location": 192,
            "return": [],
            "arguments": {
                "item": []
            }
        }
    },
    "schema_salad-main/schema_salad/tests/test_schema.py": {
        "test_extend_and_specialize_enums": {
            "name": "test_extend_and_specialize_enums",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "tmp_path": [
                    "dict[str, P]",
                    "list[str]"
                ]
            }
        }
    },
    "schema_salad-main/schema_salad/tests/test_schemas_directive.py": {
        "TestSchemasDirective.setup_class": {
            "name": "setup_class",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "typing.Mapping",
                    "typing.Type"
                ]
            }
        },
        "TestSchemasDirective.load_cwl": {
            "name": "load_cwl",
            "location": 38,
            "return": [],
            "arguments": {
                "self": [],
                "src": [
                    "str"
                ]
            }
        },
        "TestSchemasDirective.test_dollarsign_schema": {
            "name": "test_dollarsign_schema",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "schema_salad-main/schema_salad/tests/test_subtypes.py": {
        "test_subtypes": {
            "name": "test_subtypes",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "old": [
                    "str"
                ],
                "new": [
                    "str"
                ],
                "result": [
                    "str"
                ]
            }
        },
        "test_avro_loading_subtype": {
            "name": "test_avro_loading_subtype",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_avro_loading_subtype_bad": {
            "name": "test_avro_loading_subtype_bad",
            "location": 99,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "schema_salad-main/schema_salad/tests/test_typescript_codegen.py": {
        "test_cwl_gen": {
            "name": "test_cwl_gen",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "tmp_path": [
                    "bool"
                ]
            }
        },
        "test_meta_schema_gen": {
            "name": "test_meta_schema_gen",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "tmp_path": []
            }
        },
        "test_class_field": {
            "name": "test_class_field",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "tmp_path": []
            }
        },
        "get_data_uri": {
            "name": "get_data_uri",
            "location": 78,
            "return": [],
            "arguments": {
                "resource_path": [
                    "str",
                    "typing.Deque"
                ]
            }
        },
        "typescript_codegen": {
            "name": "typescript_codegen",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "file_uri": [
                    "str"
                ],
                "target": [
                    "str"
                ],
                "examples": [
                    "None",
                    "str"
                ]
            }
        }
    },
    "schema_salad-main/schema_salad/tests/util.py": {
        "get_data": {
            "name": "get_data",
            "location": 9,
            "return": [
                "str",
                "dict[str, float]",
                "list[list[typing.Any]]",
                "float"
            ],
            "arguments": {
                "filename": [
                    "str"
                ]
            }
        },
        "get_data_uri": {
            "name": "get_data_uri",
            "location": 33,
            "return": [],
            "arguments": {
                "resource_path": [
                    "str",
                    "typing.Deque"
                ]
            }
        }
    },
    "schema_salad-main/schema_salad/tests/__init__.py": {},
    "schema_salad-main/typeshed/mistune.py": {
        "escape": {
            "name": "escape",
            "location": 21,
            "return": [],
            "arguments": {
                "text": [],
                "quote": [],
                "smart_amp": []
            }
        },
        "markdown": {
            "name": "markdown",
            "location": 196,
            "return": [],
            "arguments": {
                "text": [],
                "escape": []
            }
        },
        "BlockLexer.__init__": {
            "name": "__init__",
            "location": 51,
            "return": [],
            "arguments": {
                "self": [],
                "rules": []
            }
        },
        "BlockLexer.__call__": {
            "name": "__call__",
            "location": 52,
            "return": [],
            "arguments": {
                "self": [],
                "text": [],
                "rules": []
            }
        },
        "BlockLexer.parse": {
            "name": "parse",
            "location": 53,
            "return": [],
            "arguments": {
                "self": [],
                "text": [],
                "rules": []
            }
        },
        "BlockLexer.parse_newline": {
            "name": "parse_newline",
            "location": 54,
            "return": [],
            "arguments": {
                "self": [],
                "m": []
            }
        },
        "BlockLexer.parse_block_code": {
            "name": "parse_block_code",
            "location": 55,
            "return": [],
            "arguments": {
                "self": [],
                "m": []
            }
        },
        "BlockLexer.parse_fences": {
            "name": "parse_fences",
            "location": 56,
            "return": [],
            "arguments": {
                "self": [],
                "m": []
            }
        },
        "BlockLexer.parse_heading": {
            "name": "parse_heading",
            "location": 57,
            "return": [],
            "arguments": {
                "self": [],
                "m": []
            }
        },
        "BlockLexer.parse_lheading": {
            "name": "parse_lheading",
            "location": 58,
            "return": [],
            "arguments": {
                "self": [],
                "m": []
            }
        },
        "BlockLexer.parse_hrule": {
            "name": "parse_hrule",
            "location": 59,
            "return": [],
            "arguments": {
                "self": [],
                "m": []
            }
        },
        "BlockLexer.parse_list_block": {
            "name": "parse_list_block",
            "location": 60,
            "return": [],
            "arguments": {
                "self": [],
                "m": []
            }
        },
        "BlockLexer.parse_block_quote": {
            "name": "parse_block_quote",
            "location": 61,
            "return": [],
            "arguments": {
                "self": [],
                "m": []
            }
        },
        "BlockLexer.parse_def_links": {
            "name": "parse_def_links",
            "location": 62,
            "return": [],
            "arguments": {
                "self": [],
                "m": []
            }
        },
        "BlockLexer.parse_def_footnotes": {
            "name": "parse_def_footnotes",
            "location": 63,
            "return": [],
            "arguments": {
                "self": [],
                "m": []
            }
        },
        "BlockLexer.parse_table": {
            "name": "parse_table",
            "location": 64,
            "return": [],
            "arguments": {
                "self": [],
                "m": []
            }
        },
        "BlockLexer.parse_nptable": {
            "name": "parse_nptable",
            "location": 65,
            "return": [],
            "arguments": {
                "self": [],
                "m": []
            }
        },
        "BlockLexer.parse_block_html": {
            "name": "parse_block_html",
            "location": 66,
            "return": [],
            "arguments": {
                "self": [],
                "m": []
            }
        },
        "BlockLexer.parse_paragraph": {
            "name": "parse_paragraph",
            "location": 67,
            "return": [],
            "arguments": {
                "self": [],
                "m": []
            }
        },
        "BlockLexer.parse_text": {
            "name": "parse_text",
            "location": 68,
            "return": [],
            "arguments": {
                "self": [],
                "m": []
            }
        },
        "InlineGrammar.hard_wrap": {
            "name": "hard_wrap",
            "location": 85,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "InlineLexer.__init__": {
            "name": "__init__",
            "location": 99,
            "return": [],
            "arguments": {
                "self": [],
                "renderer": [],
                "rules": []
            }
        },
        "InlineLexer.__call__": {
            "name": "__call__",
            "location": 102,
            "return": [],
            "arguments": {
                "self": [],
                "text": [],
                "rules": []
            }
        },
        "InlineLexer.setup": {
            "name": "setup",
            "location": 103,
            "return": [],
            "arguments": {
                "self": [],
                "links": [],
                "footnotes": []
            }
        },
        "InlineLexer.output": {
            "name": "output",
            "location": 108,
            "return": [],
            "arguments": {
                "self": [],
                "text": [],
                "rules": []
            }
        },
        "InlineLexer.output_escape": {
            "name": "output_escape",
            "location": 109,
            "return": [],
            "arguments": {
                "self": [],
                "m": []
            }
        },
        "InlineLexer.output_autolink": {
            "name": "output_autolink",
            "location": 110,
            "return": [],
            "arguments": {
                "self": [],
                "m": []
            }
        },
        "InlineLexer.output_url": {
            "name": "output_url",
            "location": 111,
            "return": [],
            "arguments": {
                "self": [],
                "m": []
            }
        },
        "InlineLexer.output_inline_html": {
            "name": "output_inline_html",
            "location": 112,
            "return": [],
            "arguments": {
                "self": [],
                "m": []
            }
        },
        "InlineLexer.output_footnote": {
            "name": "output_footnote",
            "location": 113,
            "return": [],
            "arguments": {
                "self": [],
                "m": []
            }
        },
        "InlineLexer.output_link": {
            "name": "output_link",
            "location": 114,
            "return": [],
            "arguments": {
                "self": [],
                "m": []
            }
        },
        "InlineLexer.output_reflink": {
            "name": "output_reflink",
            "location": 115,
            "return": [],
            "arguments": {
                "self": [],
                "m": []
            }
        },
        "InlineLexer.output_nolink": {
            "name": "output_nolink",
            "location": 116,
            "return": [],
            "arguments": {
                "self": [],
                "m": []
            }
        },
        "InlineLexer.output_double_emphasis": {
            "name": "output_double_emphasis",
            "location": 117,
            "return": [],
            "arguments": {
                "self": [],
                "m": []
            }
        },
        "InlineLexer.output_emphasis": {
            "name": "output_emphasis",
            "location": 118,
            "return": [],
            "arguments": {
                "self": [],
                "m": []
            }
        },
        "InlineLexer.output_code": {
            "name": "output_code",
            "location": 119,
            "return": [],
            "arguments": {
                "self": [],
                "m": []
            }
        },
        "InlineLexer.output_linebreak": {
            "name": "output_linebreak",
            "location": 120,
            "return": [],
            "arguments": {
                "self": [],
                "m": []
            }
        },
        "InlineLexer.output_strikethrough": {
            "name": "output_strikethrough",
            "location": 121,
            "return": [],
            "arguments": {
                "self": [],
                "m": []
            }
        },
        "InlineLexer.output_text": {
            "name": "output_text",
            "location": 122,
            "return": [],
            "arguments": {
                "self": [],
                "m": []
            }
        },
        "Renderer.__init__": {
            "name": "__init__",
            "location": 126,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Renderer.placeholder": {
            "name": "placeholder",
            "location": 127,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Renderer.block_code": {
            "name": "block_code",
            "location": 128,
            "return": [],
            "arguments": {
                "self": [],
                "code": [],
                "lang": []
            }
        },
        "Renderer.block_quote": {
            "name": "block_quote",
            "location": 131,
            "return": [],
            "arguments": {
                "self": [],
                "text": []
            }
        },
        "Renderer.block_html": {
            "name": "block_html",
            "location": 132,
            "return": [],
            "arguments": {
                "self": [],
                "html": []
            }
        },
        "Renderer.header": {
            "name": "header",
            "location": 133,
            "return": [],
            "arguments": {
                "self": [],
                "text": [],
                "level": [],
                "raw": []
            }
        },
        "Renderer.hrule": {
            "name": "hrule",
            "location": 134,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Renderer.list": {
            "name": "list",
            "location": 135,
            "return": [],
            "arguments": {
                "self": [],
                "body": [],
                "ordered": []
            }
        },
        "Renderer.list_item": {
            "name": "list_item",
            "location": 138,
            "return": [],
            "arguments": {
                "self": [],
                "text": []
            }
        },
        "Renderer.paragraph": {
            "name": "paragraph",
            "location": 139,
            "return": [],
            "arguments": {
                "self": [],
                "text": []
            }
        },
        "Renderer.table": {
            "name": "table",
            "location": 140,
            "return": [],
            "arguments": {
                "self": [],
                "header": [],
                "body": []
            }
        },
        "Renderer.table_row": {
            "name": "table_row",
            "location": 141,
            "return": [],
            "arguments": {
                "self": [],
                "content": []
            }
        },
        "Renderer.table_cell": {
            "name": "table_cell",
            "location": 142,
            "return": [],
            "arguments": {
                "self": [],
                "content": []
            }
        },
        "Renderer.double_emphasis": {
            "name": "double_emphasis",
            "location": 143,
            "return": [],
            "arguments": {
                "self": [],
                "text": []
            }
        },
        "Renderer.emphasis": {
            "name": "emphasis",
            "location": 144,
            "return": [],
            "arguments": {
                "self": [],
                "text": []
            }
        },
        "Renderer.codespan": {
            "name": "codespan",
            "location": 145,
            "return": [],
            "arguments": {
                "self": [],
                "text": []
            }
        },
        "Renderer.linebreak": {
            "name": "linebreak",
            "location": 146,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Renderer.strikethrough": {
            "name": "strikethrough",
            "location": 147,
            "return": [],
            "arguments": {
                "self": [],
                "text": []
            }
        },
        "Renderer.text": {
            "name": "text",
            "location": 148,
            "return": [],
            "arguments": {
                "self": [],
                "text": []
            }
        },
        "Renderer.escape": {
            "name": "escape",
            "location": 149,
            "return": [],
            "arguments": {
                "self": [],
                "text": []
            }
        },
        "Renderer.autolink": {
            "name": "autolink",
            "location": 150,
            "return": [],
            "arguments": {
                "self": [],
                "link": [],
                "is_email": []
            }
        },
        "Renderer.link": {
            "name": "link",
            "location": 151,
            "return": [],
            "arguments": {
                "self": [],
                "link": [],
                "title": [],
                "text": []
            }
        },
        "Renderer.image": {
            "name": "image",
            "location": 152,
            "return": [],
            "arguments": {
                "self": [],
                "src": [],
                "title": [],
                "text": []
            }
        },
        "Renderer.inline_html": {
            "name": "inline_html",
            "location": 153,
            "return": [],
            "arguments": {
                "self": [],
                "html": []
            }
        },
        "Renderer.newline": {
            "name": "newline",
            "location": 154,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Renderer.footnote_ref": {
            "name": "footnote_ref",
            "location": 155,
            "return": [],
            "arguments": {
                "self": [],
                "key": [],
                "index": []
            }
        },
        "Renderer.footnote_item": {
            "name": "footnote_item",
            "location": 156,
            "return": [],
            "arguments": {
                "self": [],
                "key": [],
                "text": []
            }
        },
        "Renderer.footnotes": {
            "name": "footnotes",
            "location": 157,
            "return": [],
            "arguments": {
                "self": [],
                "text": []
            }
        },
        "Markdown.__init__": {
            "name": "__init__",
            "location": 165,
            "return": [],
            "arguments": {
                "self": [],
                "renderer": [],
                "inline": [],
                "block": []
            }
        },
        "Markdown.__call__": {
            "name": "__call__",
            "location": 172,
            "return": [],
            "arguments": {
                "self": [],
                "text": []
            }
        },
        "Markdown.render": {
            "name": "render",
            "location": 173,
            "return": [],
            "arguments": {
                "self": [],
                "text": []
            }
        },
        "Markdown.parse": {
            "name": "parse",
            "location": 174,
            "return": [],
            "arguments": {
                "self": [],
                "text": []
            }
        },
        "Markdown.pop": {
            "name": "pop",
            "location": 176,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Markdown.peek": {
            "name": "peek",
            "location": 177,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Markdown.output": {
            "name": "output",
            "location": 178,
            "return": [],
            "arguments": {
                "self": [],
                "text": [],
                "rules": []
            }
        },
        "Markdown.tok": {
            "name": "tok",
            "location": 179,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Markdown.tok_text": {
            "name": "tok_text",
            "location": 180,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Markdown.output_newline": {
            "name": "output_newline",
            "location": 181,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Markdown.output_hrule": {
            "name": "output_hrule",
            "location": 182,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Markdown.output_heading": {
            "name": "output_heading",
            "location": 183,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Markdown.output_code": {
            "name": "output_code",
            "location": 184,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Markdown.output_table": {
            "name": "output_table",
            "location": 185,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Markdown.output_block_quote": {
            "name": "output_block_quote",
            "location": 186,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Markdown.output_list": {
            "name": "output_list",
            "location": 187,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Markdown.output_list_item": {
            "name": "output_list_item",
            "location": 188,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Markdown.output_loose_item": {
            "name": "output_loose_item",
            "location": 189,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Markdown.output_footnote": {
            "name": "output_footnote",
            "location": 190,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Markdown.output_close_html": {
            "name": "output_close_html",
            "location": 191,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Markdown.output_open_html": {
            "name": "output_open_html",
            "location": 192,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Markdown.output_paragraph": {
            "name": "output_paragraph",
            "location": 193,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Markdown.output_text": {
            "name": "output_text",
            "location": 194,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "schema_salad-main/typeshed/typing.py": {
        "no_type_check_decorator": {
            "name": "no_type_check_decorator",
            "location": 79,
            "return": [],
            "arguments": {
                "decorator": []
            }
        },
        "runtime_checkable": {
            "name": "runtime_checkable",
            "location": 107,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "cast": {
            "name": "cast",
            "location": 677,
            "return": [],
            "arguments": {
                "typ": [],
                "val": []
            }
        },
        "NewType": {
            "name": "NewType",
            "location": 713,
            "return": [],
            "arguments": {
                "name": [],
                "tp": []
            }
        },
        "type_check_only": {
            "name": "type_check_only",
            "location": 716,
            "return": [],
            "arguments": {
                "func_or_cls": []
            }
        },
        "TypeVar.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "_SpecialForm.__getitem__": {
            "name": "__getitem__",
            "location": 30,
            "return": [],
            "arguments": {
                "self": [],
                "typeargs": []
            }
        },
        "final": {
            "name": "final",
            "location": 44,
            "return": [],
            "arguments": {
                "f": []
            }
        },
        "_Alias.__getitem__": {
            "name": "__getitem__",
            "location": 85,
            "return": [],
            "arguments": {
                "self": [],
                "typeargs": []
            }
        },
        "SupportsInt.__int__": {
            "name": "__int__",
            "location": 111,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SupportsFloat.__float__": {
            "name": "__float__",
            "location": 116,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SupportsComplex.__complex__": {
            "name": "__complex__",
            "location": 121,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SupportsBytes.__bytes__": {
            "name": "__bytes__",
            "location": 126,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SupportsAbs.__abs__": {
            "name": "__abs__",
            "location": 137,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SupportsRound.__round__": {
            "name": "__round__",
            "location": 146,
            "return": [],
            "arguments": {
                "self": [],
                "ndigits": []
            }
        },
        "Reversible.__reversed__": {
            "name": "__reversed__",
            "location": 151,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Sized.__len__": {
            "name": "__len__",
            "location": 156,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Hashable.__hash__": {
            "name": "__hash__",
            "location": 164,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Iterable.__iter__": {
            "name": "__iter__",
            "location": 169,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Iterator.__next__": {
            "name": "__next__",
            "location": 174,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Iterator.__iter__": {
            "name": "__iter__",
            "location": 175,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Generator.__next__": {
            "name": "__next__",
            "location": 178,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Generator.send": {
            "name": "send",
            "location": 180,
            "return": [],
            "arguments": {
                "self": [],
                "__value": []
            }
        },
        "Generator.throw": {
            "name": "throw",
            "location": 191,
            "return": [],
            "arguments": {
                "self": [],
                "__typ": [],
                "__val": [],
                "__tb": []
            }
        },
        "Generator.close": {
            "name": "close",
            "location": 197,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Generator.__iter__": {
            "name": "__iter__",
            "location": 198,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Generator.gi_code": {
            "name": "gi_code",
            "location": 200,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Generator.gi_frame": {
            "name": "gi_frame",
            "location": 202,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Generator.gi_running": {
            "name": "gi_running",
            "location": 204,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Generator.gi_yieldfrom": {
            "name": "gi_yieldfrom",
            "location": 206,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Awaitable.__await__": {
            "name": "__await__",
            "location": 211,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Coroutine.cr_await": {
            "name": "cr_await",
            "location": 217,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Coroutine.cr_code": {
            "name": "cr_code",
            "location": 219,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Coroutine.cr_frame": {
            "name": "cr_frame",
            "location": 221,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Coroutine.cr_running": {
            "name": "cr_running",
            "location": 223,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Coroutine.send": {
            "name": "send",
            "location": 225,
            "return": [],
            "arguments": {
                "self": [],
                "__value": []
            }
        },
        "Coroutine.throw": {
            "name": "throw",
            "location": 236,
            "return": [],
            "arguments": {
                "self": [],
                "__typ": [],
                "__val": [],
                "__tb": []
            }
        },
        "Coroutine.close": {
            "name": "close",
            "location": 243,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AsyncIterable.__aiter__": {
            "name": "__aiter__",
            "location": 257,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AsyncIterator.__anext__": {
            "name": "__anext__",
            "location": 262,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AsyncIterator.__aiter__": {
            "name": "__aiter__",
            "location": 263,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Container.__contains__": {
            "name": "__contains__",
            "location": 303,
            "return": [],
            "arguments": {
                "self": [],
                "__x": []
            }
        },
        "Sequence.__getitem__": {
            "name": "__getitem__",
            "location": 325,
            "return": [],
            "arguments": {
                "self": [],
                "s": []
            }
        },
        "Sequence.index": {
            "name": "index",
            "location": 327,
            "return": [],
            "arguments": {
                "self": [],
                "value": [],
                "start": [],
                "stop": []
            }
        },
        "Sequence.count": {
            "name": "count",
            "location": 328,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "Sequence.__contains__": {
            "name": "__contains__",
            "location": 329,
            "return": [],
            "arguments": {
                "self": [],
                "x": []
            }
        },
        "Sequence.__iter__": {
            "name": "__iter__",
            "location": 330,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Sequence.__reversed__": {
            "name": "__reversed__",
            "location": 331,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MutableSequence.insert": {
            "name": "insert",
            "location": 335,
            "return": [],
            "arguments": {
                "self": [],
                "index": [],
                "value": []
            }
        },
        "MutableSequence.__getitem__": {
            "name": "__getitem__",
            "location": 341,
            "return": [],
            "arguments": {
                "self": [],
                "s": []
            }
        },
        "MutableSequence.__setitem__": {
            "name": "__setitem__",
            "location": 347,
            "return": [],
            "arguments": {
                "self": [],
                "s": [],
                "o": []
            }
        },
        "MutableSequence.__delitem__": {
            "name": "__delitem__",
            "location": 353,
            "return": [],
            "arguments": {
                "self": [],
                "i": []
            }
        },
        "MutableSequence.append": {
            "name": "append",
            "location": 355,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "MutableSequence.clear": {
            "name": "clear",
            "location": 356,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MutableSequence.extend": {
            "name": "extend",
            "location": 357,
            "return": [],
            "arguments": {
                "self": [],
                "values": []
            }
        },
        "MutableSequence.reverse": {
            "name": "reverse",
            "location": 358,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MutableSequence.pop": {
            "name": "pop",
            "location": 359,
            "return": [],
            "arguments": {
                "self": [],
                "index": []
            }
        },
        "MutableSequence.remove": {
            "name": "remove",
            "location": 360,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "MutableSequence.__iadd__": {
            "name": "__iadd__",
            "location": 361,
            "return": [],
            "arguments": {
                "self": [],
                "x": []
            }
        },
        "AbstractSet.__contains__": {
            "name": "__contains__",
            "location": 365,
            "return": [],
            "arguments": {
                "self": [],
                "x": []
            }
        },
        "AbstractSet.__le__": {
            "name": "__le__",
            "location": 367,
            "return": [],
            "arguments": {
                "self": [],
                "s": []
            }
        },
        "AbstractSet.__lt__": {
            "name": "__lt__",
            "location": 368,
            "return": [],
            "arguments": {
                "self": [],
                "s": []
            }
        },
        "AbstractSet.__gt__": {
            "name": "__gt__",
            "location": 369,
            "return": [],
            "arguments": {
                "self": [],
                "s": []
            }
        },
        "AbstractSet.__ge__": {
            "name": "__ge__",
            "location": 370,
            "return": [],
            "arguments": {
                "self": [],
                "s": []
            }
        },
        "AbstractSet.__and__": {
            "name": "__and__",
            "location": 371,
            "return": [],
            "arguments": {
                "self": [],
                "s": []
            }
        },
        "AbstractSet.__or__": {
            "name": "__or__",
            "location": 372,
            "return": [],
            "arguments": {
                "self": [],
                "s": []
            }
        },
        "AbstractSet.__sub__": {
            "name": "__sub__",
            "location": 373,
            "return": [],
            "arguments": {
                "self": [],
                "s": []
            }
        },
        "AbstractSet.__xor__": {
            "name": "__xor__",
            "location": 374,
            "return": [],
            "arguments": {
                "self": [],
                "s": []
            }
        },
        "AbstractSet.isdisjoint": {
            "name": "isdisjoint",
            "location": 375,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "MutableSet.add": {
            "name": "add",
            "location": 379,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "MutableSet.discard": {
            "name": "discard",
            "location": 381,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "MutableSet.clear": {
            "name": "clear",
            "location": 383,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MutableSet.pop": {
            "name": "pop",
            "location": 384,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MutableSet.remove": {
            "name": "remove",
            "location": 385,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "MutableSet.__ior__": {
            "name": "__ior__",
            "location": 386,
            "return": [],
            "arguments": {
                "self": [],
                "s": []
            }
        },
        "MutableSet.__iand__": {
            "name": "__iand__",
            "location": 387,
            "return": [],
            "arguments": {
                "self": [],
                "s": []
            }
        },
        "MutableSet.__ixor__": {
            "name": "__ixor__",
            "location": 388,
            "return": [],
            "arguments": {
                "self": [],
                "s": []
            }
        },
        "MutableSet.__isub__": {
            "name": "__isub__",
            "location": 389,
            "return": [],
            "arguments": {
                "self": [],
                "s": []
            }
        },
        "MappingView.__init__": {
            "name": "__init__",
            "location": 392,
            "return": [],
            "arguments": {
                "self": [],
                "mapping": []
            }
        },
        "MappingView.__len__": {
            "name": "__len__",
            "location": 393,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ItemsView.__init__": {
            "name": "__init__",
            "location": 398,
            "return": [],
            "arguments": {
                "self": [],
                "mapping": []
            }
        },
        "ItemsView.__and__": {
            "name": "__and__",
            "location": 399,
            "return": [],
            "arguments": {
                "self": [],
                "o": []
            }
        },
        "ItemsView.__rand__": {
            "name": "__rand__",
            "location": 400,
            "return": [],
            "arguments": {
                "self": [],
                "o": []
            }
        },
        "ItemsView.__contains__": {
            "name": "__contains__",
            "location": 401,
            "return": [],
            "arguments": {
                "self": [],
                "o": []
            }
        },
        "ItemsView.__iter__": {
            "name": "__iter__",
            "location": 402,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ItemsView.__or__": {
            "name": "__or__",
            "location": 406,
            "return": [],
            "arguments": {
                "self": [],
                "o": []
            }
        },
        "ItemsView.__ror__": {
            "name": "__ror__",
            "location": 407,
            "return": [],
            "arguments": {
                "self": [],
                "o": []
            }
        },
        "ItemsView.__sub__": {
            "name": "__sub__",
            "location": 408,
            "return": [],
            "arguments": {
                "self": [],
                "o": []
            }
        },
        "ItemsView.__rsub__": {
            "name": "__rsub__",
            "location": 409,
            "return": [],
            "arguments": {
                "self": [],
                "o": []
            }
        },
        "ItemsView.__xor__": {
            "name": "__xor__",
            "location": 410,
            "return": [],
            "arguments": {
                "self": [],
                "o": []
            }
        },
        "ItemsView.__rxor__": {
            "name": "__rxor__",
            "location": 411,
            "return": [],
            "arguments": {
                "self": [],
                "o": []
            }
        },
        "KeysView.__init__": {
            "name": "__init__",
            "location": 414,
            "return": [],
            "arguments": {
                "self": [],
                "mapping": []
            }
        },
        "KeysView.__and__": {
            "name": "__and__",
            "location": 415,
            "return": [],
            "arguments": {
                "self": [],
                "o": []
            }
        },
        "KeysView.__rand__": {
            "name": "__rand__",
            "location": 416,
            "return": [],
            "arguments": {
                "self": [],
                "o": []
            }
        },
        "KeysView.__contains__": {
            "name": "__contains__",
            "location": 417,
            "return": [],
            "arguments": {
                "self": [],
                "o": []
            }
        },
        "KeysView.__iter__": {
            "name": "__iter__",
            "location": 418,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "KeysView.__or__": {
            "name": "__or__",
            "location": 422,
            "return": [],
            "arguments": {
                "self": [],
                "o": []
            }
        },
        "KeysView.__ror__": {
            "name": "__ror__",
            "location": 423,
            "return": [],
            "arguments": {
                "self": [],
                "o": []
            }
        },
        "KeysView.__sub__": {
            "name": "__sub__",
            "location": 424,
            "return": [],
            "arguments": {
                "self": [],
                "o": []
            }
        },
        "KeysView.__rsub__": {
            "name": "__rsub__",
            "location": 425,
            "return": [],
            "arguments": {
                "self": [],
                "o": []
            }
        },
        "KeysView.__xor__": {
            "name": "__xor__",
            "location": 426,
            "return": [],
            "arguments": {
                "self": [],
                "o": []
            }
        },
        "KeysView.__rxor__": {
            "name": "__rxor__",
            "location": 427,
            "return": [],
            "arguments": {
                "self": [],
                "o": []
            }
        },
        "ValuesView.__init__": {
            "name": "__init__",
            "location": 430,
            "return": [],
            "arguments": {
                "self": [],
                "mapping": []
            }
        },
        "ValuesView.__contains__": {
            "name": "__contains__",
            "location": 431,
            "return": [],
            "arguments": {
                "self": [],
                "o": []
            }
        },
        "ValuesView.__iter__": {
            "name": "__iter__",
            "location": 432,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ContextManager.__enter__": {
            "name": "__enter__",
            "location": 438,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ContextManager.__exit__": {
            "name": "__exit__",
            "location": 439,
            "return": [],
            "arguments": {
                "self": [],
                "__exc_type": [],
                "__exc_value": [],
                "__traceback": []
            }
        },
        "AsyncContextManager.__aenter__": {
            "name": "__aenter__",
            "location": 448,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AsyncContextManager.__aexit__": {
            "name": "__aexit__",
            "location": 449,
            "return": [],
            "arguments": {
                "self": [],
                "exc_type": [],
                "exc_value": [],
                "traceback": []
            }
        },
        "Mapping.__getitem__": {
            "name": "__getitem__",
            "location": 460,
            "return": [],
            "arguments": {
                "self": [],
                "k": []
            }
        },
        "Mapping.get": {
            "name": "get",
            "location": 465,
            "return": [],
            "arguments": {
                "self": [],
                "key": [],
                "default": []
            }
        },
        "Mapping.items": {
            "name": "items",
            "location": 466,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Mapping.keys": {
            "name": "keys",
            "location": 467,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Mapping.values": {
            "name": "values",
            "location": 468,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Mapping.__contains__": {
            "name": "__contains__",
            "location": 469,
            "return": [],
            "arguments": {
                "self": [],
                "o": []
            }
        },
        "MutableMapping.__setitem__": {
            "name": "__setitem__",
            "location": 473,
            "return": [],
            "arguments": {
                "self": [],
                "k": [],
                "v": []
            }
        },
        "MutableMapping.__delitem__": {
            "name": "__delitem__",
            "location": 475,
            "return": [],
            "arguments": {
                "self": [],
                "v": []
            }
        },
        "MutableMapping.clear": {
            "name": "clear",
            "location": 476,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MutableMapping.pop": {
            "name": "pop",
            "location": 480,
            "return": [],
            "arguments": {
                "self": [],
                "key": [],
                "default": []
            }
        },
        "MutableMapping.popitem": {
            "name": "popitem",
            "location": 481,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MutableMapping.setdefault": {
            "name": "setdefault",
            "location": 482,
            "return": [],
            "arguments": {
                "self": [],
                "key": [],
                "default": []
            }
        },
        "MutableMapping.update": {
            "name": "update",
            "location": 498,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "IO.mode": {
            "name": "mode",
            "location": 508,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "IO.name": {
            "name": "name",
            "location": 510,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "IO.close": {
            "name": "close",
            "location": 512,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "IO.closed": {
            "name": "closed",
            "location": 514,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "IO.fileno": {
            "name": "fileno",
            "location": 516,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "IO.flush": {
            "name": "flush",
            "location": 518,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "IO.isatty": {
            "name": "isatty",
            "location": 520,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "IO.read": {
            "name": "read",
            "location": 523,
            "return": [],
            "arguments": {
                "self": [],
                "n": []
            }
        },
        "IO.readable": {
            "name": "readable",
            "location": 525,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "IO.readline": {
            "name": "readline",
            "location": 527,
            "return": [],
            "arguments": {
                "self": [],
                "limit": []
            }
        },
        "IO.readlines": {
            "name": "readlines",
            "location": 529,
            "return": [],
            "arguments": {
                "self": [],
                "hint": []
            }
        },
        "IO.seek": {
            "name": "seek",
            "location": 531,
            "return": [],
            "arguments": {
                "self": [],
                "offset": [],
                "whence": []
            }
        },
        "IO.seekable": {
            "name": "seekable",
            "location": 533,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "IO.tell": {
            "name": "tell",
            "location": 535,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "IO.truncate": {
            "name": "truncate",
            "location": 537,
            "return": [],
            "arguments": {
                "self": [],
                "size": []
            }
        },
        "IO.writable": {
            "name": "writable",
            "location": 539,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "IO.write": {
            "name": "write",
            "location": 542,
            "return": [],
            "arguments": {
                "self": [],
                "s": []
            }
        },
        "IO.writelines": {
            "name": "writelines",
            "location": 544,
            "return": [],
            "arguments": {
                "self": [],
                "lines": []
            }
        },
        "IO.__next__": {
            "name": "__next__",
            "location": 546,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "IO.__iter__": {
            "name": "__iter__",
            "location": 548,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "IO.__enter__": {
            "name": "__enter__",
            "location": 550,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "IO.__exit__": {
            "name": "__exit__",
            "location": 552,
            "return": [],
            "arguments": {
                "self": [],
                "t": [],
                "value": [],
                "traceback": []
            }
        },
        "BinaryIO.__enter__": {
            "name": "__enter__",
            "location": 564,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TextIO.buffer": {
            "name": "buffer",
            "location": 569,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TextIO.encoding": {
            "name": "encoding",
            "location": 571,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TextIO.errors": {
            "name": "errors",
            "location": 573,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TextIO.line_buffering": {
            "name": "line_buffering",
            "location": 575,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TextIO.newlines": {
            "name": "newlines",
            "location": 577,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TextIO.__enter__": {
            "name": "__enter__",
            "location": 579,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Match.expand": {
            "name": "expand",
            "location": 593,
            "return": [],
            "arguments": {
                "self": [],
                "template": []
            }
        },
        "Match.group": {
            "name": "group",
            "location": 598,
            "return": [],
            "arguments": {
                "self": [],
                "__group1": [],
                "__group2": []
            }
        },
        "Match.groups": {
            "name": "groups",
            "location": 604,
            "return": [],
            "arguments": {
                "self": [],
                "default": []
            }
        },
        "Match.groupdict": {
            "name": "groupdict",
            "location": 605,
            "return": [],
            "arguments": {
                "self": [],
                "default": []
            }
        },
        "Match.start": {
            "name": "start",
            "location": 608,
            "return": [],
            "arguments": {
                "self": [],
                "__group": []
            }
        },
        "Match.end": {
            "name": "end",
            "location": 609,
            "return": [],
            "arguments": {
                "self": [],
                "__group": []
            }
        },
        "Match.span": {
            "name": "span",
            "location": 610,
            "return": [],
            "arguments": {
                "self": [],
                "__group": []
            }
        },
        "Match.regs": {
            "name": "regs",
            "location": 612,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Pattern.search": {
            "name": "search",
            "location": 621,
            "return": [],
            "arguments": {
                "self": [],
                "string": [],
                "pos": [],
                "endpos": []
            }
        },
        "Pattern.match": {
            "name": "match",
            "location": 624,
            "return": [],
            "arguments": {
                "self": [],
                "string": [],
                "pos": [],
                "endpos": []
            }
        },
        "Pattern.fullmatch": {
            "name": "fullmatch",
            "location": 628,
            "return": [],
            "arguments": {
                "self": [],
                "string": [],
                "pos": [],
                "endpos": []
            }
        },
        "Pattern.split": {
            "name": "split",
            "location": 631,
            "return": [],
            "arguments": {
                "self": [],
                "string": [],
                "maxsplit": []
            }
        },
        "Pattern.findall": {
            "name": "findall",
            "location": 632,
            "return": [],
            "arguments": {
                "self": [],
                "string": [],
                "pos": [],
                "endpos": []
            }
        },
        "Pattern.finditer": {
            "name": "finditer",
            "location": 635,
            "return": [],
            "arguments": {
                "self": [],
                "string": [],
                "pos": [],
                "endpos": []
            }
        },
        "Pattern.sub": {
            "name": "sub",
            "location": 641,
            "return": [],
            "arguments": {
                "self": [],
                "repl": [],
                "string": [],
                "count": []
            }
        },
        "Pattern.subn": {
            "name": "subn",
            "location": 649,
            "return": [],
            "arguments": {
                "self": [],
                "repl": [],
                "string": [],
                "count": []
            }
        },
        "get_type_hints": {
            "name": "get_type_hints",
            "location": 664,
            "return": [],
            "arguments": {
                "obj": [],
                "globalns": [],
                "localns": []
            }
        },
        "get_origin": {
            "name": "get_origin",
            "location": 671,
            "return": [],
            "arguments": {
                "tp": []
            }
        },
        "get_args": {
            "name": "get_args",
            "location": 672,
            "return": [],
            "arguments": {
                "tp": []
            }
        },
        "NamedTuple.__init__": {
            "name": "__init__",
            "location": 687,
            "return": [],
            "arguments": {
                "self": [],
                "typename": [],
                "fields": []
            }
        },
        "NamedTuple._make": {
            "name": "_make",
            "location": 691,
            "return": [],
            "arguments": {
                "cls": [],
                "iterable": []
            }
        },
        "NamedTuple._replace": {
            "name": "_replace",
            "location": 697,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_TypedDict.copy": {
            "name": "copy",
            "location": 701,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_TypedDict.setdefault": {
            "name": "setdefault",
            "location": 704,
            "return": [],
            "arguments": {
                "self": [],
                "k": [],
                "default": []
            }
        },
        "_TypedDict.pop": {
            "name": "pop",
            "location": 706,
            "return": [],
            "arguments": {
                "self": [],
                "k": [],
                "default": []
            }
        },
        "_TypedDict.update": {
            "name": "update",
            "location": 707,
            "return": [],
            "arguments": {
                "self": [],
                "__m": []
            }
        },
        "_TypedDict.__delitem__": {
            "name": "__delitem__",
            "location": 708,
            "return": [],
            "arguments": {
                "self": [],
                "k": []
            }
        },
        "_TypedDict.items": {
            "name": "items",
            "location": 709,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_TypedDict.keys": {
            "name": "keys",
            "location": 710,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_TypedDict.values": {
            "name": "values",
            "location": 711,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ParamSpec.__init__": {
            "name": "__init__",
            "location": 55,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "SupportsIndex.__index__": {
            "name": "__index__",
            "location": 132,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AsyncGenerator.__anext__": {
            "name": "__anext__",
            "location": 268,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AsyncGenerator.asend": {
            "name": "asend",
            "location": 270,
            "return": [],
            "arguments": {
                "self": [],
                "__value": []
            }
        },
        "AsyncGenerator.athrow": {
            "name": "athrow",
            "location": 281,
            "return": [],
            "arguments": {
                "self": [],
                "__typ": [],
                "__val": [],
                "__tb": []
            }
        },
        "AsyncGenerator.aclose": {
            "name": "aclose",
            "location": 288,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AsyncGenerator.__aiter__": {
            "name": "__aiter__",
            "location": 290,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AsyncGenerator.ag_await": {
            "name": "ag_await",
            "location": 292,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AsyncGenerator.ag_code": {
            "name": "ag_code",
            "location": 294,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AsyncGenerator.ag_frame": {
            "name": "ag_frame",
            "location": 296,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AsyncGenerator.ag_running": {
            "name": "ag_running",
            "location": 298,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Collection.__len__": {
            "name": "__len__",
            "location": 310,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_Collection.__len__": {
            "name": "__len__",
            "location": 317,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ItemsView.__reversed__": {
            "name": "__reversed__",
            "location": 404,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "KeysView.__reversed__": {
            "name": "__reversed__",
            "location": 420,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ValuesView.__reversed__": {
            "name": "__reversed__",
            "location": 434,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Match.__getitem__": {
            "name": "__getitem__",
            "location": 614,
            "return": [],
            "arguments": {
                "self": [],
                "g": []
            }
        },
        "NamedTuple._asdict": {
            "name": "_asdict",
            "location": 695,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ForwardRef.__init__": {
            "name": "__init__",
            "location": 727,
            "return": [],
            "arguments": {
                "self": [],
                "arg": [],
                "is_argument": []
            }
        },
        "ForwardRef._evaluate": {
            "name": "_evaluate",
            "location": 728,
            "return": [],
            "arguments": {
                "self": [],
                "globalns": [],
                "localns": []
            }
        },
        "ForwardRef.__eq__": {
            "name": "__eq__",
            "location": 731,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "ForwardRef.__hash__": {
            "name": "__hash__",
            "location": 732,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ForwardRef.__repr__": {
            "name": "__repr__",
            "location": 733,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "schema_salad-main/typeshed/cachecontrol/adapter.py": {
        "CacheControlAdapter.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [],
            "arguments": {
                "self": [],
                "cache": [],
                "cache_etags": [],
                "controller_class": [],
                "serializer": [],
                "heuristic": []
            }
        },
        "CacheControlAdapter.send": {
            "name": "send",
            "location": 28,
            "return": [],
            "arguments": {
                "self": [],
                "request": []
            }
        },
        "CacheControlAdapter.build_response": {
            "name": "build_response",
            "location": 29,
            "return": [],
            "arguments": {
                "self": [],
                "request": [],
                "response": [],
                "from_cache": []
            }
        },
        "CacheControlAdapter.close": {
            "name": "close",
            "location": 30,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "schema_salad-main/typeshed/cachecontrol/cache.py": {
        "BaseCache.get": {
            "name": "get",
            "location": 8,
            "return": [],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "BaseCache.set": {
            "name": "set",
            "location": 9,
            "return": [],
            "arguments": {
                "self": [],
                "key": [],
                "value": []
            }
        },
        "BaseCache.delete": {
            "name": "delete",
            "location": 10,
            "return": [],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "BaseCache.close": {
            "name": "close",
            "location": 11,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DictCache.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [],
            "arguments": {
                "self": [],
                "init_dict": []
            }
        },
        "DictCache.get": {
            "name": "get",
            "location": 17,
            "return": [],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "DictCache.set": {
            "name": "set",
            "location": 18,
            "return": [],
            "arguments": {
                "self": [],
                "key": [],
                "value": []
            }
        },
        "DictCache.delete": {
            "name": "delete",
            "location": 19,
            "return": [],
            "arguments": {
                "self": [],
                "key": []
            }
        }
    },
    "schema_salad-main/typeshed/cachecontrol/compat.py": {},
    "schema_salad-main/typeshed/cachecontrol/controller.py": {
        "parse_uri": {
            "name": "parse_uri",
            "location": 13,
            "return": [],
            "arguments": {
                "uri": []
            }
        },
        "CacheController.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [],
            "arguments": {
                "self": [],
                "cache": [],
                "cache_etags": [],
                "serializer": []
            }
        },
        "CacheController.cache_url": {
            "name": "cache_url",
            "location": 21,
            "return": [],
            "arguments": {
                "cls": [],
                "uri": []
            }
        },
        "CacheController.parse_cache_control": {
            "name": "parse_cache_control",
            "location": 22,
            "return": [],
            "arguments": {
                "self": [],
                "headers": []
            }
        },
        "CacheController.cached_request": {
            "name": "cached_request",
            "location": 23,
            "return": [],
            "arguments": {
                "self": [],
                "request": []
            }
        },
        "CacheController.conditional_headers": {
            "name": "conditional_headers",
            "location": 24,
            "return": [],
            "arguments": {
                "self": [],
                "request": []
            }
        },
        "CacheController.cache_response": {
            "name": "cache_response",
            "location": 25,
            "return": [],
            "arguments": {
                "self": [],
                "request": [],
                "response": [],
                "body": []
            }
        },
        "CacheController.update_cached_response": {
            "name": "update_cached_response",
            "location": 26,
            "return": [],
            "arguments": {
                "self": [],
                "request": [],
                "response": []
            }
        }
    },
    "schema_salad-main/typeshed/cachecontrol/filewrapper.py": {
        "CallbackFileWrapper.__init__": {
            "name": "__init__",
            "location": 6,
            "return": [],
            "arguments": {
                "self": [],
                "fp": [],
                "callback": []
            }
        },
        "CallbackFileWrapper.__getattr__": {
            "name": "__getattr__",
            "location": 7,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "CallbackFileWrapper.read": {
            "name": "read",
            "location": 8,
            "return": [],
            "arguments": {
                "self": [],
                "amt": []
            }
        }
    },
    "schema_salad-main/typeshed/cachecontrol/serialize.py": {
        "Serializer.dumps": {
            "name": "dumps",
            "location": 10,
            "return": [],
            "arguments": {
                "self": [],
                "request": [],
                "response": [],
                "body": []
            }
        },
        "Serializer.loads": {
            "name": "loads",
            "location": 11,
            "return": [],
            "arguments": {
                "self": [],
                "request": [],
                "data": []
            }
        },
        "Serializer.prepare_response": {
            "name": "prepare_response",
            "location": 12,
            "return": [],
            "arguments": {
                "self": [],
                "request": [],
                "cached": []
            }
        }
    },
    "schema_salad-main/typeshed/cachecontrol/wrapper.py": {
        "CacheControl": {
            "name": "CacheControl",
            "location": 10,
            "return": [],
            "arguments": {
                "sess": [],
                "cache": [],
                "cache_etags": [],
                "serializer": [],
                "heuristic": []
            }
        }
    },
    "schema_salad-main/typeshed/cachecontrol/__init__.py": {},
    "schema_salad-main/typeshed/cachecontrol/caches/file_cache.py": {
        "url_to_file_path": {
            "name": "url_to_file_path",
            "location": 30,
            "return": [],
            "arguments": {
                "url": [],
                "filecache": []
            }
        },
        "FileCache.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [],
            "arguments": {
                "self": [],
                "directory": [],
                "forever": [],
                "filemode": [],
                "dirmode": [],
                "use_dir_lock": [],
                "lock_class": []
            }
        },
        "FileCache.encode": {
            "name": "encode",
            "location": 25,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "FileCache.get": {
            "name": "get",
            "location": 26,
            "return": [],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "FileCache.set": {
            "name": "set",
            "location": 27,
            "return": [],
            "arguments": {
                "self": [],
                "key": [],
                "value": []
            }
        },
        "FileCache.delete": {
            "name": "delete",
            "location": 28,
            "return": [],
            "arguments": {
                "self": [],
                "key": []
            }
        }
    },
    "schema_salad-main/typeshed/cachecontrol/caches/__init__.py": {},
    "schema_salad-main/typeshed/rdflib/container.py": {
        "Container.__init__": {
            "name": "__init__",
            "location": 6,
            "return": [],
            "arguments": {
                "self": [],
                "graph": [],
                "uri": [],
                "seq": [],
                "rtype": []
            }
        },
        "Container.n3": {
            "name": "n3",
            "location": 7,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Container.__len__": {
            "name": "__len__",
            "location": 8,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Container.type_of_conatiner": {
            "name": "type_of_conatiner",
            "location": 9,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Container.index": {
            "name": "index",
            "location": 10,
            "return": [],
            "arguments": {
                "self": [],
                "item": []
            }
        },
        "Container.__getitem__": {
            "name": "__getitem__",
            "location": 11,
            "return": [],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "Container.__setitem__": {
            "name": "__setitem__",
            "location": 12,
            "return": [],
            "arguments": {
                "self": [],
                "key": [],
                "value": []
            }
        },
        "Container.__delitem__": {
            "name": "__delitem__",
            "location": 13,
            "return": [],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "Container.items": {
            "name": "items",
            "location": 14,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Container.end": {
            "name": "end",
            "location": 15,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Container.append": {
            "name": "append",
            "location": 16,
            "return": [],
            "arguments": {
                "self": [],
                "item": []
            }
        },
        "Container.append_multiple": {
            "name": "append_multiple",
            "location": 17,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Container.clear": {
            "name": "clear",
            "location": 18,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Bag.__init__": {
            "name": "__init__",
            "location": 21,
            "return": [],
            "arguments": {
                "self": [],
                "graph": [],
                "uri": [],
                "seq": []
            }
        },
        "Alt.__init__": {
            "name": "__init__",
            "location": 24,
            "return": [],
            "arguments": {
                "self": [],
                "graph": [],
                "uri": [],
                "seq": []
            }
        },
        "Alt.anyone": {
            "name": "anyone",
            "location": 25,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Seq.__init__": {
            "name": "__init__",
            "location": 28,
            "return": [],
            "arguments": {
                "self": [],
                "graph": [],
                "uri": [],
                "seq": []
            }
        },
        "Seq.add_at_position": {
            "name": "add_at_position",
            "location": 29,
            "return": [],
            "arguments": {
                "self": [],
                "pos": [],
                "item": []
            }
        },
        "NoElementException.__init__": {
            "name": "__init__",
            "location": 33,
            "return": [],
            "arguments": {
                "self": [],
                "message": []
            }
        }
    },
    "schema_salad-main/typeshed/rdflib/events.py": {
        "Event.__init__": {
            "name": "__init__",
            "location": 2,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Dispatcher.set_map": {
            "name": "set_map",
            "location": 5,
            "return": [],
            "arguments": {
                "self": [],
                "amap": []
            }
        },
        "Dispatcher.get_map": {
            "name": "get_map",
            "location": 6,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Dispatcher.subscribe": {
            "name": "subscribe",
            "location": 7,
            "return": [],
            "arguments": {
                "self": [],
                "event_type": [],
                "handler": []
            }
        },
        "Dispatcher.dispatch": {
            "name": "dispatch",
            "location": 8,
            "return": [],
            "arguments": {
                "self": [],
                "event": []
            }
        }
    },
    "schema_salad-main/typeshed/rdflib/exceptions.py": {
        "Error.__init__": {
            "name": "__init__",
            "location": 5,
            "return": [],
            "arguments": {
                "self": [],
                "msg": []
            }
        },
        "TypeCheckError.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "SubjectTypeError.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "PredicateTypeError.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "ObjectTypeError.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "ContextTypeError.__init__": {
            "name": "__init__",
            "location": 26,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "ParserError.__init__": {
            "name": "__init__",
            "location": 30,
            "return": [],
            "arguments": {
                "self": [],
                "msg": []
            }
        },
        "UniquenessError.__init__": {
            "name": "__init__",
            "location": 33,
            "return": [],
            "arguments": {
                "self": [],
                "values": []
            }
        }
    },
    "schema_salad-main/typeshed/rdflib/graph.py": {
        "Graph.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [],
            "arguments": {
                "self": [],
                "store": [],
                "identifier": [],
                "namespace_manager": [],
                "base": []
            }
        },
        "Graph.toPython": {
            "name": "toPython",
            "location": 20,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Graph.destroy": {
            "name": "destroy",
            "location": 21,
            "return": [],
            "arguments": {
                "self": [],
                "configuration": []
            }
        },
        "Graph.commit": {
            "name": "commit",
            "location": 22,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Graph.rollback": {
            "name": "rollback",
            "location": 23,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Graph.open": {
            "name": "open",
            "location": 24,
            "return": [],
            "arguments": {
                "self": [],
                "configuration": [],
                "create": []
            }
        },
        "Graph.close": {
            "name": "close",
            "location": 25,
            "return": [],
            "arguments": {
                "self": [],
                "commit_pending_transaction": []
            }
        },
        "Graph.add": {
            "name": "add",
            "location": 26,
            "return": [],
            "arguments": {
                "self": [],
                "triple": []
            }
        },
        "Graph.addN": {
            "name": "addN",
            "location": 27,
            "return": [],
            "arguments": {
                "self": [],
                "quads": []
            }
        },
        "Graph.remove": {
            "name": "remove",
            "location": 28,
            "return": [],
            "arguments": {
                "self": [],
                "triple": []
            }
        },
        "Graph.triples": {
            "name": "triples",
            "location": 29,
            "return": [],
            "arguments": {
                "self": [],
                "triple": []
            }
        },
        "Graph.__getitem__": {
            "name": "__getitem__",
            "location": 37,
            "return": [],
            "arguments": {
                "self": [],
                "item": []
            }
        },
        "Graph.__len__": {
            "name": "__len__",
            "location": 38,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Graph.__iter__": {
            "name": "__iter__",
            "location": 39,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Graph.__contains__": {
            "name": "__contains__",
            "location": 40,
            "return": [],
            "arguments": {
                "self": [],
                "triple": []
            }
        },
        "Graph.__hash__": {
            "name": "__hash__",
            "location": 41,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Graph.__cmp__": {
            "name": "__cmp__",
            "location": 42,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Graph.__eq__": {
            "name": "__eq__",
            "location": 43,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Graph.__lt__": {
            "name": "__lt__",
            "location": 44,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Graph.__le__": {
            "name": "__le__",
            "location": 45,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Graph.__gt__": {
            "name": "__gt__",
            "location": 46,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Graph.__ge__": {
            "name": "__ge__",
            "location": 47,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Graph.__iadd__": {
            "name": "__iadd__",
            "location": 48,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Graph.__isub__": {
            "name": "__isub__",
            "location": 49,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Graph.__add__": {
            "name": "__add__",
            "location": 50,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Graph.__mul__": {
            "name": "__mul__",
            "location": 51,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Graph.__sub__": {
            "name": "__sub__",
            "location": 52,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Graph.__xor__": {
            "name": "__xor__",
            "location": 53,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Graph.set": {
            "name": "set",
            "location": 56,
            "return": [],
            "arguments": {
                "self": [],
                "triple": []
            }
        },
        "Graph.subjects": {
            "name": "subjects",
            "location": 57,
            "return": [],
            "arguments": {
                "self": [],
                "predicate": [],
                "object": []
            }
        },
        "Graph.predicates": {
            "name": "predicates",
            "location": 60,
            "return": [],
            "arguments": {
                "self": [],
                "subject": [],
                "object": []
            }
        },
        "Graph.objects": {
            "name": "objects",
            "location": 63,
            "return": [],
            "arguments": {
                "self": [],
                "subject": [],
                "predicate": []
            }
        },
        "Graph.subject_predicates": {
            "name": "subject_predicates",
            "location": 66,
            "return": [],
            "arguments": {
                "self": [],
                "object": []
            }
        },
        "Graph.subject_objects": {
            "name": "subject_objects",
            "location": 67,
            "return": [],
            "arguments": {
                "self": [],
                "predicate": []
            }
        },
        "Graph.predicate_objects": {
            "name": "predicate_objects",
            "location": 68,
            "return": [],
            "arguments": {
                "self": [],
                "subject": []
            }
        },
        "Graph.triples_choices": {
            "name": "triples_choices",
            "location": 69,
            "return": [],
            "arguments": {
                "self": [],
                "triple": [],
                "context": []
            }
        },
        "Graph.value": {
            "name": "value",
            "location": 70,
            "return": [],
            "arguments": {
                "self": [],
                "subject": [],
                "predicate": [],
                "object": [],
                "default": [],
                "any": []
            }
        },
        "Graph.label": {
            "name": "label",
            "location": 78,
            "return": [],
            "arguments": {
                "self": [],
                "subject": [],
                "default": []
            }
        },
        "Graph.preferredLabel": {
            "name": "preferredLabel",
            "location": 79,
            "return": [],
            "arguments": {
                "self": [],
                "subject": [],
                "lang": [],
                "default": [],
                "labelProperties": []
            }
        },
        "Graph.comment": {
            "name": "comment",
            "location": 86,
            "return": [],
            "arguments": {
                "self": [],
                "subject": [],
                "default": []
            }
        },
        "Graph.items": {
            "name": "items",
            "location": 87,
            "return": [],
            "arguments": {
                "self": [],
                "list": []
            }
        },
        "Graph.transitiveClosure": {
            "name": "transitiveClosure",
            "location": 88,
            "return": [],
            "arguments": {
                "self": [],
                "func": [],
                "arg": [],
                "seen": []
            }
        },
        "Graph.transitive_objects": {
            "name": "transitive_objects",
            "location": 91,
            "return": [],
            "arguments": {
                "self": [],
                "subject": [],
                "property": [],
                "remember": []
            }
        },
        "Graph.transitive_subjects": {
            "name": "transitive_subjects",
            "location": 94,
            "return": [],
            "arguments": {
                "self": [],
                "predicate": [],
                "object": [],
                "remember": []
            }
        },
        "Graph.seq": {
            "name": "seq",
            "location": 97,
            "return": [],
            "arguments": {
                "self": [],
                "subject": []
            }
        },
        "Graph.qname": {
            "name": "qname",
            "location": 98,
            "return": [],
            "arguments": {
                "self": [],
                "uri": []
            }
        },
        "Graph.compute_qname": {
            "name": "compute_qname",
            "location": 99,
            "return": [],
            "arguments": {
                "self": [],
                "uri": [],
                "generate": []
            }
        },
        "Graph.bind": {
            "name": "bind",
            "location": 100,
            "return": [],
            "arguments": {
                "self": [],
                "prefix": [],
                "namespace": [],
                "override": [],
                "replace": []
            }
        },
        "Graph.namespaces": {
            "name": "namespaces",
            "location": 103,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Graph.absolutize": {
            "name": "absolutize",
            "location": 104,
            "return": [],
            "arguments": {
                "self": [],
                "uri": [],
                "defrag": []
            }
        },
        "Graph.serialize": {
            "name": "serialize",
            "location": 105,
            "return": [],
            "arguments": {
                "self": [],
                "destination": [],
                "format": [],
                "base": [],
                "encoding": []
            }
        },
        "Graph.parse": {
            "name": "parse",
            "location": 113,
            "return": [],
            "arguments": {
                "self": [],
                "source": [],
                "publicID": [],
                "format": [],
                "location": [],
                "file": [],
                "data": []
            }
        },
        "Graph.load": {
            "name": "load",
            "location": 123,
            "return": [],
            "arguments": {
                "self": [],
                "source": [],
                "publicID": [],
                "format": []
            }
        },
        "Graph.query": {
            "name": "query",
            "location": 126,
            "return": [],
            "arguments": {
                "self": [],
                "query_object": [],
                "processor": [],
                "result": [],
                "initNs": [],
                "initBindings": [],
                "use_store_provided": []
            }
        },
        "Graph.update": {
            "name": "update",
            "location": 136,
            "return": [],
            "arguments": {
                "self": [],
                "update_object": [],
                "processor": [],
                "initNs": [],
                "initBindings": [],
                "use_store_provided": []
            }
        },
        "Graph.n3": {
            "name": "n3",
            "location": 145,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Graph.__reduce__": {
            "name": "__reduce__",
            "location": 146,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Graph.isomorphic": {
            "name": "isomorphic",
            "location": 147,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Graph.connected": {
            "name": "connected",
            "location": 148,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Graph.all_nodes": {
            "name": "all_nodes",
            "location": 149,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Graph.collection": {
            "name": "collection",
            "location": 150,
            "return": [],
            "arguments": {
                "self": [],
                "identifier": []
            }
        },
        "Graph.resource": {
            "name": "resource",
            "location": 151,
            "return": [],
            "arguments": {
                "self": [],
                "identifier": []
            }
        },
        "Graph.skolemize": {
            "name": "skolemize",
            "location": 152,
            "return": [],
            "arguments": {
                "self": [],
                "new_graph": [],
                "bnode": [],
                "authority": [],
                "basepath": []
            }
        },
        "Graph.de_skolemize": {
            "name": "de_skolemize",
            "location": 159,
            "return": [],
            "arguments": {
                "self": [],
                "new_graph": [],
                "uriref": []
            }
        },
        "ConjunctiveGraph.__init__": {
            "name": "__init__",
            "location": 167,
            "return": [],
            "arguments": {
                "self": [],
                "store": [],
                "identifier": [],
                "default_graph_base": []
            }
        },
        "ConjunctiveGraph.__contains__": {
            "name": "__contains__",
            "location": 173,
            "return": [],
            "arguments": {
                "self": [],
                "triple_or_quad": []
            }
        },
        "ConjunctiveGraph.add": {
            "name": "add",
            "location": 174,
            "return": [],
            "arguments": {
                "self": [],
                "triple_or_quad": []
            }
        },
        "ConjunctiveGraph.addN": {
            "name": "addN",
            "location": 175,
            "return": [],
            "arguments": {
                "self": [],
                "quads": []
            }
        },
        "ConjunctiveGraph.remove": {
            "name": "remove",
            "location": 176,
            "return": [],
            "arguments": {
                "self": [],
                "triple_or_quad": []
            }
        },
        "ConjunctiveGraph.quads": {
            "name": "quads",
            "location": 178,
            "return": [],
            "arguments": {
                "self": [],
                "triple_or_quad": []
            }
        },
        "ConjunctiveGraph.triples_choices": {
            "name": "triples_choices",
            "location": 179,
            "return": [],
            "arguments": {
                "self": [],
                "triple": [],
                "context": []
            }
        },
        "ConjunctiveGraph.__len__": {
            "name": "__len__",
            "location": 180,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ConjunctiveGraph.contexts": {
            "name": "contexts",
            "location": 181,
            "return": [],
            "arguments": {
                "self": [],
                "triple": []
            }
        },
        "ConjunctiveGraph.get_context": {
            "name": "get_context",
            "location": 182,
            "return": [],
            "arguments": {
                "self": [],
                "identifier": [],
                "quoted": [],
                "base": []
            }
        },
        "ConjunctiveGraph.remove_context": {
            "name": "remove_context",
            "location": 185,
            "return": [],
            "arguments": {
                "self": [],
                "context": []
            }
        },
        "ConjunctiveGraph.context_id": {
            "name": "context_id",
            "location": 186,
            "return": [],
            "arguments": {
                "self": [],
                "uri": [],
                "context_id": []
            }
        },
        "ConjunctiveGraph.parse": {
            "name": "parse",
            "location": 187,
            "return": [],
            "arguments": {
                "self": [],
                "source": [],
                "publicID": [],
                "format": [],
                "location": [],
                "file": [],
                "data": []
            }
        },
        "ConjunctiveGraph.__reduce__": {
            "name": "__reduce__",
            "location": 197,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Dataset.__init__": {
            "name": "__init__",
            "location": 203,
            "return": [],
            "arguments": {
                "self": [],
                "store": [],
                "default_union": [],
                "default_graph_base": []
            }
        },
        "Dataset.graph": {
            "name": "graph",
            "location": 209,
            "return": [],
            "arguments": {
                "self": [],
                "identifier": [],
                "base": []
            }
        },
        "Dataset.parse": {
            "name": "parse",
            "location": 210,
            "return": [],
            "arguments": {
                "self": [],
                "source": [],
                "publicID": [],
                "format": [],
                "location": [],
                "file": [],
                "data": []
            }
        },
        "Dataset.add_graph": {
            "name": "add_graph",
            "location": 220,
            "return": [],
            "arguments": {
                "self": [],
                "g": []
            }
        },
        "Dataset.remove_graph": {
            "name": "remove_graph",
            "location": 221,
            "return": [],
            "arguments": {
                "self": [],
                "g": []
            }
        },
        "Dataset.contexts": {
            "name": "contexts",
            "location": 222,
            "return": [],
            "arguments": {
                "self": [],
                "triple": []
            }
        },
        "QuotedGraph.__init__": {
            "name": "__init__",
            "location": 226,
            "return": [],
            "arguments": {
                "self": [],
                "store": [],
                "identifier": []
            }
        },
        "QuotedGraph.add": {
            "name": "add",
            "location": 227,
            "return": [],
            "arguments": {
                "self": [],
                "triple": []
            }
        },
        "QuotedGraph.addN": {
            "name": "addN",
            "location": 228,
            "return": [],
            "arguments": {
                "self": [],
                "quads": []
            }
        },
        "QuotedGraph.n3": {
            "name": "n3",
            "location": 229,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "QuotedGraph.__reduce__": {
            "name": "__reduce__",
            "location": 230,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Seq.__init__": {
            "name": "__init__",
            "location": 233,
            "return": [],
            "arguments": {
                "self": [],
                "graph": [],
                "subject": []
            }
        },
        "Seq.toPython": {
            "name": "toPython",
            "location": 234,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Seq.__iter__": {
            "name": "__iter__",
            "location": 235,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Seq.__len__": {
            "name": "__len__",
            "location": 236,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Seq.__getitem__": {
            "name": "__getitem__",
            "location": 237,
            "return": [],
            "arguments": {
                "self": [],
                "index": []
            }
        },
        "ModificationException.__init__": {
            "name": "__init__",
            "location": 240,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UnSupportedAggregateOperation.__init__": {
            "name": "__init__",
            "location": 243,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ReadOnlyGraphAggregate.__init__": {
            "name": "__init__",
            "location": 247,
            "return": [],
            "arguments": {
                "self": [],
                "graphs": [],
                "store": []
            }
        },
        "ReadOnlyGraphAggregate.destroy": {
            "name": "destroy",
            "location": 248,
            "return": [],
            "arguments": {
                "self": [],
                "configuration": []
            }
        },
        "ReadOnlyGraphAggregate.commit": {
            "name": "commit",
            "location": 249,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ReadOnlyGraphAggregate.rollback": {
            "name": "rollback",
            "location": 250,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ReadOnlyGraphAggregate.open": {
            "name": "open",
            "location": 251,
            "return": [],
            "arguments": {
                "self": [],
                "configuration": [],
                "create": []
            }
        },
        "ReadOnlyGraphAggregate.add": {
            "name": "add",
            "location": 252,
            "return": [],
            "arguments": {
                "self": [],
                "triple": []
            }
        },
        "ReadOnlyGraphAggregate.addN": {
            "name": "addN",
            "location": 253,
            "return": [],
            "arguments": {
                "self": [],
                "quads": []
            }
        },
        "ReadOnlyGraphAggregate.remove": {
            "name": "remove",
            "location": 254,
            "return": [],
            "arguments": {
                "self": [],
                "triple": []
            }
        },
        "ReadOnlyGraphAggregate.triples": {
            "name": "triples",
            "location": 255,
            "return": [],
            "arguments": {
                "self": [],
                "triple": []
            }
        },
        "ReadOnlyGraphAggregate.__contains__": {
            "name": "__contains__",
            "location": 263,
            "return": [],
            "arguments": {
                "self": [],
                "triple_or_quad": []
            }
        },
        "ReadOnlyGraphAggregate.__len__": {
            "name": "__len__",
            "location": 264,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ReadOnlyGraphAggregate.__hash__": {
            "name": "__hash__",
            "location": 265,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ReadOnlyGraphAggregate.__cmp__": {
            "name": "__cmp__",
            "location": 266,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "ReadOnlyGraphAggregate.__iadd__": {
            "name": "__iadd__",
            "location": 267,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "ReadOnlyGraphAggregate.__isub__": {
            "name": "__isub__",
            "location": 268,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "ReadOnlyGraphAggregate.triples_choices": {
            "name": "triples_choices",
            "location": 269,
            "return": [],
            "arguments": {
                "self": [],
                "triple": [],
                "context": []
            }
        },
        "ReadOnlyGraphAggregate.qname": {
            "name": "qname",
            "location": 270,
            "return": [],
            "arguments": {
                "self": [],
                "uri": []
            }
        },
        "ReadOnlyGraphAggregate.compute_qname": {
            "name": "compute_qname",
            "location": 271,
            "return": [],
            "arguments": {
                "self": [],
                "uri": [],
                "generate": []
            }
        },
        "ReadOnlyGraphAggregate.namespaces": {
            "name": "namespaces",
            "location": 272,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ReadOnlyGraphAggregate.absolutize": {
            "name": "absolutize",
            "location": 273,
            "return": [],
            "arguments": {
                "self": [],
                "uri": [],
                "defrag": []
            }
        },
        "ReadOnlyGraphAggregate.n3": {
            "name": "n3",
            "location": 274,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "schema_salad-main/typeshed/rdflib/parser.py": {
        "Parser.__init__": {
            "name": "__init__",
            "location": 5,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Parser.parse": {
            "name": "parse",
            "location": 6,
            "return": [],
            "arguments": {
                "self": [],
                "source": [],
                "sink": []
            }
        },
        "InputSource.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [],
            "arguments": {
                "self": [],
                "system_id": []
            }
        },
        "InputSource.close": {
            "name": "close",
            "location": 12,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "StringInputSource.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [],
            "arguments": {
                "self": [],
                "value": [],
                "system_id": []
            }
        },
        "URLInputSource.__init__": {
            "name": "__init__",
            "location": 21,
            "return": [],
            "arguments": {
                "self": [],
                "system_id": [],
                "format": []
            }
        },
        "FileInputSource.__init__": {
            "name": "__init__",
            "location": 27,
            "return": [],
            "arguments": {
                "self": [],
                "file": []
            }
        }
    },
    "schema_salad-main/typeshed/rdflib/paths.py": {
        "path_alternative": {
            "name": "path_alternative",
            "location": 62,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "path_sequence": {
            "name": "path_sequence",
            "location": 63,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "evalPath": {
            "name": "evalPath",
            "location": 64,
            "return": [],
            "arguments": {
                "graph": [],
                "t": []
            }
        },
        "mul_path": {
            "name": "mul_path",
            "location": 65,
            "return": [],
            "arguments": {
                "p": [],
                "mul": []
            }
        },
        "inv_path": {
            "name": "inv_path",
            "location": 66,
            "return": [],
            "arguments": {
                "p": []
            }
        },
        "neg_path": {
            "name": "neg_path",
            "location": 67,
            "return": [],
            "arguments": {
                "p": []
            }
        },
        "Path.eval": {
            "name": "eval",
            "location": 16,
            "return": [],
            "arguments": {
                "self": [],
                "graph": [],
                "subj": [],
                "obj": []
            }
        },
        "Path.__hash__": {
            "name": "__hash__",
            "location": 17,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Path.__eq__": {
            "name": "__eq__",
            "location": 18,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Path.__lt__": {
            "name": "__lt__",
            "location": 19,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Path.__le__": {
            "name": "__le__",
            "location": 20,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Path.__ne__": {
            "name": "__ne__",
            "location": 21,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Path.__gt__": {
            "name": "__gt__",
            "location": 22,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Path.__ge__": {
            "name": "__ge__",
            "location": 23,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "InvPath.__init__": {
            "name": "__init__",
            "location": 27,
            "return": [],
            "arguments": {
                "self": [],
                "arg": []
            }
        },
        "InvPath.eval": {
            "name": "eval",
            "location": 28,
            "return": [],
            "arguments": {
                "self": [],
                "graph": [],
                "subj": [],
                "obj": []
            }
        },
        "InvPath.n3": {
            "name": "n3",
            "location": 29,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SequencePath.__init__": {
            "name": "__init__",
            "location": 33,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SequencePath.eval": {
            "name": "eval",
            "location": 34,
            "return": [],
            "arguments": {
                "self": [],
                "graph": [],
                "subj": [],
                "obj": []
            }
        },
        "SequencePath.n3": {
            "name": "n3",
            "location": 35,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AlternativePath.__init__": {
            "name": "__init__",
            "location": 39,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AlternativePath.eval": {
            "name": "eval",
            "location": 40,
            "return": [],
            "arguments": {
                "self": [],
                "graph": [],
                "subj": [],
                "obj": []
            }
        },
        "AlternativePath.n3": {
            "name": "n3",
            "location": 41,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MulPath.__init__": {
            "name": "__init__",
            "location": 48,
            "return": [],
            "arguments": {
                "self": [],
                "path": [],
                "mod": []
            }
        },
        "MulPath.eval": {
            "name": "eval",
            "location": 49,
            "return": [],
            "arguments": {
                "self": [],
                "graph": [],
                "subj": [],
                "obj": [],
                "first": []
            }
        },
        "MulPath.n3": {
            "name": "n3",
            "location": 52,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NegatedPath.__init__": {
            "name": "__init__",
            "location": 56,
            "return": [],
            "arguments": {
                "self": [],
                "arg": []
            }
        },
        "NegatedPath.eval": {
            "name": "eval",
            "location": 57,
            "return": [],
            "arguments": {
                "self": [],
                "graph": [],
                "subj": [],
                "obj": []
            }
        },
        "NegatedPath.n3": {
            "name": "n3",
            "location": 58,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "schema_salad-main/typeshed/rdflib/plugin.py": {
        "register": {
            "name": "register",
            "location": 22,
            "return": [],
            "arguments": {
                "name": [],
                "kind": [],
                "module_path": [],
                "class_name": []
            }
        },
        "get": {
            "name": "get",
            "location": 26,
            "return": [],
            "arguments": {
                "name": [],
                "kind": []
            }
        },
        "plugins": {
            "name": "plugins",
            "location": 27,
            "return": [],
            "arguments": {
                "name": [],
                "kind": []
            }
        },
        "Plugin.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "kind": [],
                "module_path": [],
                "class_name": []
            }
        },
        "Plugin.getClass": {
            "name": "getClass",
            "location": 13,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PKGPlugin.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "kind": [],
                "ep": []
            }
        },
        "PKGPlugin.getClass": {
            "name": "getClass",
            "location": 20,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "schema_salad-main/typeshed/rdflib/query.py": {
        "Processor.__init__": {
            "name": "__init__",
            "location": 5,
            "return": [],
            "arguments": {
                "self": [],
                "graph": []
            }
        },
        "Processor.query": {
            "name": "query",
            "location": 6,
            "return": [],
            "arguments": {
                "self": [],
                "strOrQuery": [],
                "initBindings": [],
                "initNs": [],
                "DEBUG": []
            }
        },
        "UpdateProcessor.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [],
            "arguments": {
                "self": [],
                "graph": []
            }
        },
        "UpdateProcessor.update": {
            "name": "update",
            "location": 12,
            "return": [],
            "arguments": {
                "self": [],
                "strOrQuery": [],
                "initBindings": [],
                "initNs": []
            }
        },
        "EncodeOnlyUnicode.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [],
            "arguments": {
                "self": [],
                "stream": []
            }
        },
        "EncodeOnlyUnicode.write": {
            "name": "write",
            "location": 18,
            "return": [],
            "arguments": {
                "self": [],
                "arg": []
            }
        },
        "EncodeOnlyUnicode.__getattr__": {
            "name": "__getattr__",
            "location": 19,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "ResultRow.__new__": {
            "name": "__new__",
            "location": 22,
            "return": [],
            "arguments": {
                "cls": [],
                "values": [],
                "labels": []
            }
        },
        "ResultRow.__getattr__": {
            "name": "__getattr__",
            "location": 23,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "ResultRow.__getitem__": {
            "name": "__getitem__",
            "location": 24,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "ResultRow.get": {
            "name": "get",
            "location": 25,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "default": []
            }
        },
        "ResultRow.asdict": {
            "name": "asdict",
            "location": 26,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Result.__init__": {
            "name": "__init__",
            "location": 33,
            "return": [],
            "arguments": {
                "self": [],
                "type_": []
            }
        },
        "Result.parse": {
            "name": "parse",
            "location": 36,
            "return": [],
            "arguments": {
                "source": [],
                "format": [],
                "content_type": []
            }
        },
        "Result.serialize": {
            "name": "serialize",
            "location": 42,
            "return": [],
            "arguments": {
                "self": [],
                "destination": [],
                "encoding": [],
                "format": []
            }
        },
        "Result.__len__": {
            "name": "__len__",
            "location": 49,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Result.__bool__": {
            "name": "__bool__",
            "location": 50,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Result.__iter__": {
            "name": "__iter__",
            "location": 51,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Result.__getattr__": {
            "name": "__getattr__",
            "location": 52,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "Result.__eq__": {
            "name": "__eq__",
            "location": 53,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "ResultParser.__init__": {
            "name": "__init__",
            "location": 56,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ResultParser.parse": {
            "name": "parse",
            "location": 57,
            "return": [],
            "arguments": {
                "self": [],
                "source": []
            }
        },
        "ResultSerializer.__init__": {
            "name": "__init__",
            "location": 61,
            "return": [],
            "arguments": {
                "self": [],
                "result": []
            }
        },
        "ResultSerializer.serialize": {
            "name": "serialize",
            "location": 62,
            "return": [],
            "arguments": {
                "self": [],
                "stream": [],
                "encoding": []
            }
        }
    },
    "schema_salad-main/typeshed/rdflib/serializer.py": {
        "Serializer.__init__": {
            "name": "__init__",
            "location": 7,
            "return": [],
            "arguments": {
                "self": [],
                "store": []
            }
        },
        "Serializer.serialize": {
            "name": "serialize",
            "location": 8,
            "return": [],
            "arguments": {
                "self": [],
                "stream": [],
                "base": [],
                "encoding": []
            }
        },
        "Serializer.relativize": {
            "name": "relativize",
            "location": 11,
            "return": [],
            "arguments": {
                "self": [],
                "uri": []
            }
        }
    },
    "schema_salad-main/typeshed/rdflib/store.py": {
        "NodePickler.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NodePickler.register": {
            "name": "register",
            "location": 16,
            "return": [],
            "arguments": {
                "self": [],
                "object": [],
                "id": []
            }
        },
        "NodePickler.loads": {
            "name": "loads",
            "location": 17,
            "return": [],
            "arguments": {
                "self": [],
                "s": []
            }
        },
        "NodePickler.dumps": {
            "name": "dumps",
            "location": 18,
            "return": [],
            "arguments": {
                "self": [],
                "obj": [],
                "protocol": [],
                "bin": []
            }
        },
        "Store.__init__": {
            "name": "__init__",
            "location": 26,
            "return": [],
            "arguments": {
                "self": [],
                "configuration": [],
                "identifier": []
            }
        },
        "Store.create": {
            "name": "create",
            "location": 30,
            "return": [],
            "arguments": {
                "self": [],
                "configuration": []
            }
        },
        "Store.open": {
            "name": "open",
            "location": 31,
            "return": [],
            "arguments": {
                "self": [],
                "configuration": [],
                "create": []
            }
        },
        "Store.close": {
            "name": "close",
            "location": 32,
            "return": [],
            "arguments": {
                "self": [],
                "commit_pending_transaction": []
            }
        },
        "Store.destroy": {
            "name": "destroy",
            "location": 33,
            "return": [],
            "arguments": {
                "self": [],
                "configuration": []
            }
        },
        "Store.gc": {
            "name": "gc",
            "location": 34,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Store.add": {
            "name": "add",
            "location": 35,
            "return": [],
            "arguments": {
                "self": [],
                "triple": [],
                "context": [],
                "quoted": []
            }
        },
        "Store.addN": {
            "name": "addN",
            "location": 36,
            "return": [],
            "arguments": {
                "self": [],
                "quads": []
            }
        },
        "Store.remove": {
            "name": "remove",
            "location": 37,
            "return": [],
            "arguments": {
                "self": [],
                "triple": [],
                "context": []
            }
        },
        "Store.triples_choices": {
            "name": "triples_choices",
            "location": 38,
            "return": [],
            "arguments": {
                "self": [],
                "triple": [],
                "context": []
            }
        },
        "Store.triples": {
            "name": "triples",
            "location": 39,
            "return": [],
            "arguments": {
                "self": [],
                "triple_pattern": [],
                "context": []
            }
        },
        "Store.__len__": {
            "name": "__len__",
            "location": 40,
            "return": [],
            "arguments": {
                "self": [],
                "context": []
            }
        },
        "Store.contexts": {
            "name": "contexts",
            "location": 41,
            "return": [],
            "arguments": {
                "self": [],
                "triple": []
            }
        },
        "Store.query": {
            "name": "query",
            "location": 42,
            "return": [],
            "arguments": {
                "self": [],
                "query": [],
                "initNs": [],
                "initBindings": [],
                "queryGraph": []
            }
        },
        "Store.update": {
            "name": "update",
            "location": 43,
            "return": [],
            "arguments": {
                "self": [],
                "update": [],
                "initNs": [],
                "initBindings": [],
                "queryGraph": []
            }
        },
        "Store.bind": {
            "name": "bind",
            "location": 44,
            "return": [],
            "arguments": {
                "self": [],
                "prefix": [],
                "namespace": []
            }
        },
        "Store.prefix": {
            "name": "prefix",
            "location": 45,
            "return": [],
            "arguments": {
                "self": [],
                "namespace": []
            }
        },
        "Store.namespace": {
            "name": "namespace",
            "location": 46,
            "return": [],
            "arguments": {
                "self": [],
                "prefix": []
            }
        },
        "Store.namespaces": {
            "name": "namespaces",
            "location": 47,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Store.commit": {
            "name": "commit",
            "location": 48,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Store.rollback": {
            "name": "rollback",
            "location": 49,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Store.add_graph": {
            "name": "add_graph",
            "location": 50,
            "return": [],
            "arguments": {
                "self": [],
                "graph": []
            }
        },
        "Store.remove_graph": {
            "name": "remove_graph",
            "location": 51,
            "return": [],
            "arguments": {
                "self": [],
                "graph": []
            }
        }
    },
    "schema_salad-main/typeshed/rdflib/term.py": {
        "bind": {
            "name": "bind",
            "location": 81,
            "return": [],
            "arguments": {
                "datatype": [],
                "pythontype": [],
                "constructor": [],
                "lexicalizer": [],
                "datatype_specific": []
            }
        },
        "Identifier.__new__": {
            "name": "__new__",
            "location": 8,
            "return": [],
            "arguments": {
                "cls": [],
                "value": []
            }
        },
        "Identifier.eq": {
            "name": "eq",
            "location": 9,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Identifier.neq": {
            "name": "neq",
            "location": 10,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Identifier.__ne__": {
            "name": "__ne__",
            "location": 11,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Identifier.__eq__": {
            "name": "__eq__",
            "location": 12,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Identifier.__gt__": {
            "name": "__gt__",
            "location": 13,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Identifier.__lt__": {
            "name": "__lt__",
            "location": 14,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Identifier.__le__": {
            "name": "__le__",
            "location": 15,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Identifier.__ge__": {
            "name": "__ge__",
            "location": 16,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Identifier.startswith": {
            "name": "startswith",
            "location": 17,
            "return": [],
            "arguments": {
                "self": [],
                "prefix": [],
                "start": [],
                "end": []
            }
        },
        "URIRef.__new__": {
            "name": "__new__",
            "location": 25,
            "return": [],
            "arguments": {
                "cls": [],
                "value": [],
                "base": []
            }
        },
        "URIRef.toPython": {
            "name": "toPython",
            "location": 26,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "URIRef.n3": {
            "name": "n3",
            "location": 27,
            "return": [],
            "arguments": {
                "self": [],
                "namespace_manager": []
            }
        },
        "URIRef.defrag": {
            "name": "defrag",
            "location": 28,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "URIRef.__reduce__": {
            "name": "__reduce__",
            "location": 29,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "URIRef.__getnewargs__": {
            "name": "__getnewargs__",
            "location": 30,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "URIRef.__add__": {
            "name": "__add__",
            "location": 31,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "URIRef.__radd__": {
            "name": "__radd__",
            "location": 32,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "URIRef.__mod__": {
            "name": "__mod__",
            "location": 33,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "URIRef.de_skolemize": {
            "name": "de_skolemize",
            "location": 34,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BNode.__new__": {
            "name": "__new__",
            "location": 40,
            "return": [],
            "arguments": {
                "cls": [],
                "value": [],
                "_sn_gen": [],
                "_prefix": []
            }
        },
        "BNode.toPython": {
            "name": "toPython",
            "location": 41,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BNode.n3": {
            "name": "n3",
            "location": 42,
            "return": [],
            "arguments": {
                "self": [],
                "namespace_manager": []
            }
        },
        "BNode.__getnewargs__": {
            "name": "__getnewargs__",
            "location": 43,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BNode.__reduce__": {
            "name": "__reduce__",
            "location": 44,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BNode.skolemize": {
            "name": "skolemize",
            "location": 45,
            "return": [],
            "arguments": {
                "self": [],
                "authority": [],
                "basepath": []
            }
        },
        "Literal.__new__": {
            "name": "__new__",
            "location": 49,
            "return": [],
            "arguments": {
                "cls": [],
                "lexical_or_value": [],
                "lang": [],
                "datatype": [],
                "normalize": []
            }
        },
        "Literal.normalize": {
            "name": "normalize",
            "location": 56,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Literal.value": {
            "name": "value",
            "location": 58,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Literal.language": {
            "name": "language",
            "location": 60,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Literal.datatype": {
            "name": "datatype",
            "location": 62,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Literal.__reduce__": {
            "name": "__reduce__",
            "location": 63,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Literal.__add__": {
            "name": "__add__",
            "location": 64,
            "return": [],
            "arguments": {
                "self": [],
                "val": []
            }
        },
        "Literal.__bool__": {
            "name": "__bool__",
            "location": 65,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Literal.__neg__": {
            "name": "__neg__",
            "location": 66,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Literal.__pos__": {
            "name": "__pos__",
            "location": 67,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Literal.__abs__": {
            "name": "__abs__",
            "location": 68,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Literal.__invert__": {
            "name": "__invert__",
            "location": 69,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Literal.__gt__": {
            "name": "__gt__",
            "location": 70,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Literal.__lt__": {
            "name": "__lt__",
            "location": 71,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Literal.__le__": {
            "name": "__le__",
            "location": 72,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Literal.__ge__": {
            "name": "__ge__",
            "location": 73,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Literal.__hash__": {
            "name": "__hash__",
            "location": 74,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Literal.__eq__": {
            "name": "__eq__",
            "location": 75,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Literal.eq": {
            "name": "eq",
            "location": 76,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Literal.neq": {
            "name": "neq",
            "location": 77,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Literal.n3": {
            "name": "n3",
            "location": 78,
            "return": [],
            "arguments": {
                "self": [],
                "namespace_manager": []
            }
        },
        "Literal.toPython": {
            "name": "toPython",
            "location": 79,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Variable.__new__": {
            "name": "__new__",
            "location": 90,
            "return": [],
            "arguments": {
                "cls": [],
                "value": []
            }
        },
        "Variable.toPython": {
            "name": "toPython",
            "location": 91,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Variable.n3": {
            "name": "n3",
            "location": 92,
            "return": [],
            "arguments": {
                "self": [],
                "namespace_manager": []
            }
        },
        "Variable.__reduce__": {
            "name": "__reduce__",
            "location": 93,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Statement.__new__": {
            "name": "__new__",
            "location": 96,
            "return": [],
            "arguments": {
                "cls": [],
                "triple": [],
                "context": []
            }
        },
        "Statement.__reduce__": {
            "name": "__reduce__",
            "location": 97,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Statement.toPython": {
            "name": "toPython",
            "location": 98,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "schema_salad-main/typeshed/rdflib/util.py": {
        "list2set": {
            "name": "list2set",
            "location": 3,
            "return": [],
            "arguments": {
                "seq": []
            }
        },
        "first": {
            "name": "first",
            "location": 4,
            "return": [],
            "arguments": {
                "seq": []
            }
        },
        "uniq": {
            "name": "uniq",
            "location": 5,
            "return": [],
            "arguments": {
                "sequence": [],
                "strip": []
            }
        },
        "more_than": {
            "name": "more_than",
            "location": 6,
            "return": [],
            "arguments": {
                "sequence": [],
                "number": []
            }
        },
        "to_term": {
            "name": "to_term",
            "location": 7,
            "return": [],
            "arguments": {
                "s": [],
                "default": []
            }
        },
        "from_n3": {
            "name": "from_n3",
            "location": 8,
            "return": [],
            "arguments": {
                "s": [],
                "default": [],
                "backend": [],
                "nsm": []
            }
        },
        "check_context": {
            "name": "check_context",
            "location": 11,
            "return": [],
            "arguments": {
                "c": []
            }
        },
        "check_subject": {
            "name": "check_subject",
            "location": 12,
            "return": [],
            "arguments": {
                "s": []
            }
        },
        "check_predicate": {
            "name": "check_predicate",
            "location": 13,
            "return": [],
            "arguments": {
                "p": []
            }
        },
        "check_object": {
            "name": "check_object",
            "location": 14,
            "return": [],
            "arguments": {
                "o": []
            }
        },
        "check_statement": {
            "name": "check_statement",
            "location": 15,
            "return": [],
            "arguments": {
                "triple": []
            }
        },
        "check_pattern": {
            "name": "check_pattern",
            "location": 16,
            "return": [],
            "arguments": {
                "triple": []
            }
        },
        "date_time": {
            "name": "date_time",
            "location": 17,
            "return": [],
            "arguments": {
                "t": [],
                "local_time_zone": []
            }
        },
        "parse_date_time": {
            "name": "parse_date_time",
            "location": 18,
            "return": [],
            "arguments": {
                "val": []
            }
        },
        "guess_format": {
            "name": "guess_format",
            "location": 19,
            "return": [],
            "arguments": {
                "fpath": [],
                "fmap": []
            }
        },
        "find_roots": {
            "name": "find_roots",
            "location": 20,
            "return": [],
            "arguments": {
                "graph": [],
                "prop": [],
                "roots": []
            }
        },
        "get_tree": {
            "name": "get_tree",
            "location": 21,
            "return": [],
            "arguments": {
                "graph": [],
                "root": [],
                "prop": [],
                "mapper": [],
                "sortkey": [],
                "done": [],
                "dir": []
            }
        }
    },
    "schema_salad-main/typeshed/rdflib/__init__.py": {},
    "schema_salad-main/typeshed/rdflib/namespace/_CSVW.py": {},
    "schema_salad-main/typeshed/rdflib/namespace/_DC.py": {},
    "schema_salad-main/typeshed/rdflib/namespace/_DCAT.py": {},
    "schema_salad-main/typeshed/rdflib/namespace/_DCTERMS.py": {},
    "schema_salad-main/typeshed/rdflib/namespace/_DOAP.py": {},
    "schema_salad-main/typeshed/rdflib/namespace/_FOAF.py": {},
    "schema_salad-main/typeshed/rdflib/namespace/_ODRL2.py": {},
    "schema_salad-main/typeshed/rdflib/namespace/_ORG.py": {},
    "schema_salad-main/typeshed/rdflib/namespace/_OWL.py": {},
    "schema_salad-main/typeshed/rdflib/namespace/_PROF.py": {},
    "schema_salad-main/typeshed/rdflib/namespace/_PROV.py": {},
    "schema_salad-main/typeshed/rdflib/namespace/_QB.py": {},
    "schema_salad-main/typeshed/rdflib/namespace/_RDF.py": {},
    "schema_salad-main/typeshed/rdflib/namespace/_RDFS.py": {},
    "schema_salad-main/typeshed/rdflib/namespace/_SDO.py": {},
    "schema_salad-main/typeshed/rdflib/namespace/_SH.py": {},
    "schema_salad-main/typeshed/rdflib/namespace/_SKOS.py": {},
    "schema_salad-main/typeshed/rdflib/namespace/_SOSA.py": {},
    "schema_salad-main/typeshed/rdflib/namespace/_SSN.py": {},
    "schema_salad-main/typeshed/rdflib/namespace/_TIME.py": {},
    "schema_salad-main/typeshed/rdflib/namespace/_VOID.py": {},
    "schema_salad-main/typeshed/rdflib/namespace/_XSD.py": {},
    "schema_salad-main/typeshed/rdflib/namespace/__init__.py": {
        "is_ncname": {
            "name": "is_ncname",
            "location": 90,
            "return": [],
            "arguments": {
                "name": []
            }
        },
        "split_uri": {
            "name": "split_uri",
            "location": 94,
            "return": [],
            "arguments": {
                "uri": [],
                "split_start": []
            }
        },
        "Namespace.__new__": {
            "name": "__new__",
            "location": 37,
            "return": [],
            "arguments": {
                "cls": [],
                "value": []
            }
        },
        "Namespace.title": {
            "name": "title",
            "location": 39,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Namespace.term": {
            "name": "term",
            "location": 40,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "Namespace.__getitem__": {
            "name": "__getitem__",
            "location": 41,
            "return": [],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "Namespace.__getattr__": {
            "name": "__getattr__",
            "location": 42,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "Namespace.__contains__": {
            "name": "__contains__",
            "location": 43,
            "return": [],
            "arguments": {
                "self": [],
                "ref": []
            }
        },
        "URIPattern.__new__": {
            "name": "__new__",
            "location": 46,
            "return": [],
            "arguments": {
                "cls": [],
                "value": []
            }
        },
        "URIPattern.__mod__": {
            "name": "__mod__",
            "location": 47,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "URIPattern.format": {
            "name": "format",
            "location": 48,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DefinedNamespaceMeta.__getitem__": {
            "name": "__getitem__",
            "location": 51,
            "return": [],
            "arguments": {
                "cls": [],
                "name": [],
                "default": []
            }
        },
        "DefinedNamespaceMeta.__getattr__": {
            "name": "__getattr__",
            "location": 52,
            "return": [],
            "arguments": {
                "cls": [],
                "name": []
            }
        },
        "DefinedNamespaceMeta.__add__": {
            "name": "__add__",
            "location": 53,
            "return": [],
            "arguments": {
                "cls": [],
                "other": []
            }
        },
        "DefinedNamespaceMeta.__contains__": {
            "name": "__contains__",
            "location": 54,
            "return": [],
            "arguments": {
                "cls": [],
                "item": []
            }
        },
        "DefinedNamespace.__init__": {
            "name": "__init__",
            "location": 57,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ClosedNamespace.__new__": {
            "name": "__new__",
            "location": 60,
            "return": [],
            "arguments": {
                "cls": [],
                "uri": [],
                "terms": []
            }
        },
        "ClosedNamespace.uri": {
            "name": "uri",
            "location": 62,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ClosedNamespace.term": {
            "name": "term",
            "location": 63,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "ClosedNamespace.__getitem__": {
            "name": "__getitem__",
            "location": 64,
            "return": [],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "ClosedNamespace.__getattr__": {
            "name": "__getattr__",
            "location": 65,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "ClosedNamespace.__dir__": {
            "name": "__dir__",
            "location": 66,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ClosedNamespace.__contains__": {
            "name": "__contains__",
            "location": 67,
            "return": [],
            "arguments": {
                "self": [],
                "ref": []
            }
        },
        "NamespaceManager.__init__": {
            "name": "__init__",
            "location": 74,
            "return": [],
            "arguments": {
                "self": [],
                "graph": []
            }
        },
        "NamespaceManager.__contains__": {
            "name": "__contains__",
            "location": 75,
            "return": [],
            "arguments": {
                "self": [],
                "ref": []
            }
        },
        "NamespaceManager.reset": {
            "name": "reset",
            "location": 76,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NamespaceManager.store": {
            "name": "store",
            "location": 78,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NamespaceManager.qname": {
            "name": "qname",
            "location": 79,
            "return": [],
            "arguments": {
                "self": [],
                "uri": []
            }
        },
        "NamespaceManager.qname_strict": {
            "name": "qname_strict",
            "location": 80,
            "return": [],
            "arguments": {
                "self": [],
                "uri": []
            }
        },
        "NamespaceManager.normalizeUri": {
            "name": "normalizeUri",
            "location": 81,
            "return": [],
            "arguments": {
                "self": [],
                "rdfTerm": []
            }
        },
        "NamespaceManager.compute_qname": {
            "name": "compute_qname",
            "location": 82,
            "return": [],
            "arguments": {
                "self": [],
                "uri": [],
                "generate": []
            }
        },
        "NamespaceManager.compute_qname_strict": {
            "name": "compute_qname_strict",
            "location": 83,
            "return": [],
            "arguments": {
                "self": [],
                "uri": [],
                "generate": []
            }
        },
        "NamespaceManager.bind": {
            "name": "bind",
            "location": 84,
            "return": [],
            "arguments": {
                "self": [],
                "prefix": [],
                "namespace": [],
                "override": [],
                "replace": []
            }
        },
        "NamespaceManager.namespaces": {
            "name": "namespaces",
            "location": 87,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NamespaceManager.absolutize": {
            "name": "absolutize",
            "location": 88,
            "return": [],
            "arguments": {
                "self": [],
                "uri": [],
                "defrag": []
            }
        }
    },
    "schema_salad-main/typeshed/rdflib/plugins/__init__.py": {},
    "schema_salad-main/typeshed/rdflib/plugins/parsers/notation3.py": {
        "BadSyntax.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [],
            "arguments": {
                "self": [],
                "uri": [],
                "lines": [],
                "argstr": [],
                "i": [],
                "why": []
            }
        },
        "BadSyntax.message": {
            "name": "message",
            "location": 13,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "schema_salad-main/typeshed/rdflib/plugins/parsers/__init__.py": {},
    "schema_salad-main/typeshed/urllib/parse.py": {
        "parse_qs": {
            "name": "parse_qs",
            "location": 112,
            "return": [],
            "arguments": {
                "qs": [],
                "keep_blank_values": [],
                "strict_parsing": [],
                "encoding": [],
                "errors": []
            }
        },
        "parse_qsl": {
            "name": "parse_qsl",
            "location": 119,
            "return": [],
            "arguments": {
                "qs": [],
                "keep_blank_values": [],
                "strict_parsing": [],
                "encoding": [],
                "errors": []
            }
        },
        "quote": {
            "name": "quote",
            "location": 131,
            "return": [],
            "arguments": {
                "string": [],
                "safe": []
            }
        },
        "quote_from_bytes": {
            "name": "quote_from_bytes",
            "location": 132,
            "return": [],
            "arguments": {
                "bs": [],
                "safe": []
            }
        },
        "quote_plus": {
            "name": "quote_plus",
            "location": 138,
            "return": [],
            "arguments": {
                "string": [],
                "safe": []
            }
        },
        "unquote": {
            "name": "unquote",
            "location": 139,
            "return": [],
            "arguments": {
                "string": [],
                "encoding": [],
                "errors": []
            }
        },
        "unquote_to_bytes": {
            "name": "unquote_to_bytes",
            "location": 140,
            "return": [],
            "arguments": {
                "string": []
            }
        },
        "unquote_plus": {
            "name": "unquote_plus",
            "location": 141,
            "return": [],
            "arguments": {
                "string": [],
                "encoding": [],
                "errors": []
            }
        },
        "urldefrag": {
            "name": "urldefrag",
            "location": 145,
            "return": [],
            "arguments": {
                "url": []
            }
        },
        "urljoin": {
            "name": "urljoin",
            "location": 176,
            "return": [],
            "arguments": {
                "base": [],
                "url": [],
                "allow_fragments": []
            }
        },
        "urlparse": {
            "name": "urlparse",
            "location": 184,
            "return": [],
            "arguments": {
                "url": [],
                "scheme": [],
                "allow_fragments": []
            }
        },
        "urlsplit": {
            "name": "urlsplit",
            "location": 192,
            "return": [],
            "arguments": {
                "url": [],
                "scheme": [],
                "allow_fragments": []
            }
        },
        "urlunparse": {
            "name": "urlunparse",
            "location": 200,
            "return": [],
            "arguments": {
                "components": []
            }
        },
        "urlunsplit": {
            "name": "urlunsplit",
            "location": 204,
            "return": [],
            "arguments": {
                "components": []
            }
        },
        "_ResultMixinBase.geturl": {
            "name": "geturl",
            "location": 32,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_ResultMixinStr.encode": {
            "name": "encode",
            "location": 35,
            "return": [],
            "arguments": {
                "self": [],
                "encoding": [],
                "errors": []
            }
        },
        "_ResultMixinBytes.decode": {
            "name": "decode",
            "location": 38,
            "return": [],
            "arguments": {
                "self": [],
                "encoding": [],
                "errors": []
            }
        },
        "_DefragResultBase.__getitem__": {
            "name": "__getitem__",
            "location": 55,
            "return": [],
            "arguments": {
                "self": [],
                "x": []
            }
        },
        "_DefragResultBase.__iter__": {
            "name": "__iter__",
            "location": 56,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "urlencode": {
            "name": "urlencode",
            "location": 163,
            "return": [],
            "arguments": {
                "query": [],
                "doseq": [],
                "safe": [],
                "encoding": [],
                "errors": []
            }
        }
    },
    "schema_salad-main/typeshed/urllib/__init__.py": {}
}
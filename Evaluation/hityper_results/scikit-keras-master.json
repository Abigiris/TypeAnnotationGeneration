{
    "scikit-keras-master/setup.py": {},
    "scikit-keras-master/scikit_keras/__init__.py": {},
    "scikit-keras-master/scikit_keras/keras/batches.py": {
        "ArrayBatchGenerator.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "list[dict[str, typing.Any]]",
                    "bool",
                    "list[str]"
                ],
                "y": [
                    "int",
                    "float",
                    "dict[str, int]",
                    "dict[int, str]",
                    "str"
                ],
                "batch_size": [
                    "int"
                ]
            }
        },
        "ArrayBatchGenerator.__len__": {
            "name": "__len__",
            "location": 19,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ArrayBatchGenerator.__getitem__": {
            "name": "__getitem__",
            "location": 24,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "self": [],
                "item": []
            }
        }
    },
    "scikit-keras-master/scikit_keras/keras/timing.py": {
        "_n": {
            "name": "_n",
            "location": 10,
            "return": [
                "str"
            ],
            "arguments": {
                "num_or_tuple": [
                    "str"
                ]
            }
        },
        "total_latency": {
            "name": "total_latency",
            "location": 19,
            "return": [],
            "arguments": {
                "relative_latencies": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ]
            }
        },
        "absolute_latencies": {
            "name": "absolute_latencies",
            "location": 37,
            "return": [
                "list[tuple[]]"
            ],
            "arguments": {
                "relative_latencies": []
            }
        },
        "layer_latency": {
            "name": "layer_latency",
            "location": 61,
            "return": [
                "tuple[typing.Union[int,float]]"
            ],
            "arguments": {
                "layer": [
                    "int",
                    "float"
                ]
            }
        },
        "model_latency": {
            "name": "model_latency",
            "location": 98,
            "return": [
                "tuple[typing.Union[int,dict[, ],list[int],list[list[int]],str]]"
            ],
            "arguments": {
                "model": []
            }
        },
        "model_output_length": {
            "name": "model_output_length",
            "location": 118,
            "return": [],
            "arguments": {
                "model": [
                    "int"
                ],
                "input_shape": []
            }
        }
    },
    "scikit-keras-master/scikit_keras/keras/utils.py": {
        "iterlayers": {
            "name": "iterlayers",
            "location": 8,
            "return": [
                "typing.Generator[]",
                "typing.Generator[typing.Union[int,float]]"
            ],
            "arguments": {
                "model": [
                    "int",
                    "float"
                ]
            }
        },
        "fix_model_duplicate_layers_by_name": {
            "name": "fix_model_duplicate_layers_by_name",
            "location": 22,
            "return": [
                "tuple[typing.Union[bool,None,str,typing.Callable[..., collections.abc.Coroutine],list[str],dict[, ]]]",
                "bool"
            ],
            "arguments": {
                "model": [
                    "bool"
                ],
                "substitutions": [
                    "None",
                    "str",
                    "typing.Callable[..., collections.abc.Coroutine]",
                    "list[str]"
                ],
                "return_substitutions": [
                    "bool"
                ]
            }
        },
        "fix_multimodel_duplicate_layers_by_name": {
            "name": "fix_multimodel_duplicate_layers_by_name",
            "location": 43,
            "return": [
                "tuple[typing.Union[dict[, ],None,str,bool]]",
                "dict[, ]"
            ],
            "arguments": {
                "multimodel": [
                    "dict[, ]"
                ],
                "substitutions": [
                    "None",
                    "str",
                    "bool"
                ],
                "return_substitutions": [
                    "bool"
                ]
            }
        },
        "serialize_model": {
            "name": "serialize_model",
            "location": 63,
            "return": [
                "dict[, ]"
            ],
            "arguments": {
                "model": [
                    "dict[, ]"
                ]
            }
        },
        "deserialize_model": {
            "name": "deserialize_model",
            "location": 73,
            "return": [
                "None",
                "bytes",
                "str"
            ],
            "arguments": {
                "model_str": [
                    "None",
                    "bytes",
                    "str"
                ],
                "fix_duplicates": [
                    "bool"
                ]
            }
        }
    },
    "scikit-keras-master/scikit_keras/keras/wrapper.py": {
        "BaseWrapper.__init__": {
            "name": "__init__",
            "location": 61,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BaseWrapper.__model__": {
            "name": "__model__",
            "location": 67,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BaseWrapper.__callbacks__": {
            "name": "__callbacks__",
            "location": 71,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BaseWrapper._init_model": {
            "name": "_init_model",
            "location": 75,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BaseWrapper.model": {
            "name": "model",
            "location": 79,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BaseWrapper.callbacks": {
            "name": "callbacks",
            "location": 85,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BaseWrapper.check_params": {
            "name": "check_params",
            "location": 88,
            "return": [],
            "arguments": {
                "self": [],
                "params": []
            }
        },
        "BaseWrapper.get_params": {
            "name": "get_params",
            "location": 110,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BaseWrapper.set_params": {
            "name": "set_params",
            "location": 122,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BaseWrapper.fit": {
            "name": "fit",
            "location": 135,
            "return": [],
            "arguments": {
                "self": [],
                "x": [],
                "y": [],
                "init": []
            }
        },
        "BaseWrapper.fit_generator": {
            "name": "fit_generator",
            "location": 163,
            "return": [],
            "arguments": {
                "self": [],
                "generator": [],
                "init": []
            }
        },
        "BaseWrapper.predict": {
            "name": "predict",
            "location": 191,
            "return": [],
            "arguments": {
                "self": [],
                "x": []
            }
        },
        "BaseWrapper.score": {
            "name": "score",
            "location": 208,
            "return": [],
            "arguments": {
                "self": [],
                "x": [],
                "y": []
            }
        },
        "BaseWrapper.filter_sk_params": {
            "name": "filter_sk_params",
            "location": 230,
            "return": [],
            "arguments": {
                "self": [],
                "fn": [],
                "override": []
            }
        },
        "BaseWrapper.__getstate__": {
            "name": "__getstate__",
            "location": 249,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BaseWrapper.__setstate__": {
            "name": "__setstate__",
            "location": 256,
            "return": [],
            "arguments": {
                "self": [],
                "state": []
            }
        },
        "KerasClassifier.fit": {
            "name": "fit",
            "location": 266,
            "return": [],
            "arguments": {
                "self": [],
                "x": [],
                "y": [],
                "sample_weight": []
            }
        },
        "KerasClassifier.predict": {
            "name": "predict",
            "location": 305,
            "return": [],
            "arguments": {
                "self": [],
                "x": []
            }
        },
        "KerasClassifier.predict_proba": {
            "name": "predict_proba",
            "location": 331,
            "return": [],
            "arguments": {
                "self": [],
                "x": []
            }
        },
        "KerasClassifier.score": {
            "name": "score",
            "location": 358,
            "return": [],
            "arguments": {
                "self": [],
                "x": [],
                "y": []
            }
        },
        "KerasRegressor.predict": {
            "name": "predict",
            "location": 407,
            "return": [],
            "arguments": {
                "self": [],
                "x": []
            }
        }
    },
    "scikit-keras-master/scikit_keras/keras/__init__.py": {},
    "scikit-keras-master/scikit_keras/utils/functools.py": {
        "get_default_args": {
            "name": "get_default_args",
            "location": 4,
            "return": [
                "dict[, ]"
            ],
            "arguments": {
                "func": [
                    "bytes",
                    "typing.Callable[, ]",
                    "str",
                    "dict[str, typing.Union[str,None]]",
                    "bool"
                ]
            }
        }
    },
    "scikit-keras-master/scikit_keras/utils/pickle.py": {
        "dumpf": {
            "name": "dumpf",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "obj": [
                    "str",
                    "list[str]",
                    "None",
                    "bytes",
                    "typing.BinaryIO"
                ],
                "filename": [
                    "str"
                ]
            }
        },
        "loadf": {
            "name": "loadf",
            "location": 13,
            "return": [
                "dict[, ]",
                "dict[str, str]",
                "str"
            ],
            "arguments": {
                "filename": [
                    "str"
                ]
            }
        }
    },
    "scikit-keras-master/scikit_keras/utils/__init__.py": {},
    "scikit-keras-master/tests/conftest.py": {
        "random": {
            "name": "random",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "scikit-keras-master/tests/__init__.py": {},
    "scikit-keras-master/tests/test_keras/test_keras_wrapper.py": {
        "test_base_class_illegal_param": {
            "name": "test_base_class_illegal_param",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_base_class_not_implemented_model": {
            "name": "test_base_class_not_implemented_model",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_base_class_get_set_params": {
            "name": "test_base_class_get_set_params",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "data_for_classification": {
            "name": "data_for_classification",
            "location": 51,
            "return": [
                "tuple[tuple[typing.Union[int,float,str,complex]]]"
            ],
            "arguments": {
                "num_classes": [
                    "int"
                ],
                "one_hot": [
                    "bool"
                ]
            }
        },
        "data_for_regression": {
            "name": "data_for_regression",
            "location": 67,
            "return": [
                "tuple[tuple[typing.Union[int,float,str,complex,list[typing.Union[typing.Any,typing.Any]],typing.Type,list[int]]]]"
            ],
            "arguments": {}
        },
        "assert_classification_works": {
            "name": "assert_classification_works",
            "location": 132,
            "return": [
                "None"
            ],
            "arguments": {
                "clf": [],
                "data": [
                    "int",
                    "None"
                ],
                "generator": [
                    "bool"
                ]
            }
        },
        "assert_string_classification_works": {
            "name": "assert_string_classification_works",
            "location": 163,
            "return": [
                "None"
            ],
            "arguments": {
                "clf": [],
                "data": [
                    "str",
                    "int"
                ]
            }
        },
        "assert_regression_works": {
            "name": "assert_regression_works",
            "location": 188,
            "return": [
                "None"
            ],
            "arguments": {
                "reg": [],
                "data": [
                    "int",
                    "None"
                ],
                "generator": [
                    "bool"
                ]
            }
        },
        "assert_models_equal": {
            "name": "assert_models_equal",
            "location": 209,
            "return": [
                "None"
            ],
            "arguments": {
                "first": [],
                "second": []
            }
        },
        "assert_wrappers_equal": {
            "name": "assert_wrappers_equal",
            "location": 221,
            "return": [
                "None"
            ],
            "arguments": {
                "first": [
                    "bool",
                    "list[D]"
                ],
                "second": [
                    "bool",
                    "list[D]"
                ]
            }
        },
        "assert_predictions_equal": {
            "name": "assert_predictions_equal",
            "location": 231,
            "return": [
                "None"
            ],
            "arguments": {
                "first": [],
                "second": [],
                "x": [
                    "int",
                    "tuple[typing.Union[int,int]]",
                    "str"
                ]
            }
        },
        "assert_pickling_works": {
            "name": "assert_pickling_works",
            "location": 238,
            "return": [
                "None"
            ],
            "arguments": {
                "wrpr": [
                    "bytes",
                    "dict[, ]",
                    "int",
                    "dict[str, typing.Any]"
                ],
                "data": [
                    "bytes",
                    "str"
                ]
            }
        },
        "test_classifiers_generator": {
            "name": "test_classifiers_generator",
            "location": 256,
            "return": [
                "None"
            ],
            "arguments": {
                "clf_cls": [
                    "int",
                    "typing.Callable[, ]",
                    "float"
                ],
                "num_classes": [
                    "typing.Callable[, ]",
                    "bool"
                ],
                "one_hot": [
                    "int",
                    "typing.Callable[, ]",
                    "list[str]",
                    "set[str]"
                ],
                "generator": []
            }
        },
        "test_classifiers": {
            "name": "test_classifiers",
            "location": 290,
            "return": [
                "None"
            ],
            "arguments": {
                "clf_cls": [],
                "num_classes": [
                    "str",
                    "int"
                ],
                "one_hot": [
                    "int",
                    "typing.Callable[, ]"
                ],
                "generator": []
            }
        },
        "test_classifier_losses": {
            "name": "test_classifier_losses",
            "location": 326,
            "return": [
                "None"
            ],
            "arguments": {
                "loss": [
                    "int"
                ],
                "generator": []
            }
        },
        "test_regression_subclass": {
            "name": "test_regression_subclass",
            "location": 346,
            "return": [
                "None"
            ],
            "arguments": {
                "metrics": [
                    "int"
                ],
                "generator": []
            }
        },
        "test_classifier_no_compiled_accuracy": {
            "name": "test_classifier_no_compiled_accuracy",
            "location": 373,
            "return": [
                "None"
            ],
            "arguments": {
                "clf_cls": [
                    "int",
                    "typing.Callable[, ]"
                ],
                "num_classes": [
                    "int",
                    "typing.Callable[, ]"
                ]
            }
        },
        "test_invalid_y_shape": {
            "name": "test_invalid_y_shape",
            "location": 387,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "BinaryClassifierSubClass.__model__": {
            "name": "__model__",
            "location": 79,
            "return": [],
            "arguments": {
                "self": [],
                "hidden_dims": [
                    "int"
                ],
                "num_classes": [
                    "int"
                ],
                "loss": [
                    "typing.Text"
                ],
                "metrics": [
                    "None",
                    "str",
                    "typing.Callable[, ]"
                ]
            }
        },
        "SoftmaxClassifierSubClass.__model__": {
            "name": "__model__",
            "location": 99,
            "return": [],
            "arguments": {
                "self": [],
                "hidden_dims": [
                    "int"
                ],
                "num_classes": [
                    "int"
                ],
                "loss": [
                    "typing.Text"
                ],
                "metrics": [
                    "None",
                    "str",
                    "typing.Callable[, ]"
                ]
            }
        },
        "RegressionSubClass.__model__": {
            "name": "__model__",
            "location": 118,
            "return": [],
            "arguments": {
                "self": [],
                "hidden_dims": [
                    "int"
                ],
                "metrics": [
                    "None",
                    "str",
                    "list[str]",
                    "dict[, ]",
                    "float"
                ]
            }
        }
    },
    "scikit-keras-master/tests/test_keras/test_keras_wrapper_temporal.py": {
        "test_sequence_binary_classifier_predict_shape": {
            "name": "test_sequence_binary_classifier_predict_shape",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "n_timesteps": [
                    "int",
                    "None",
                    "list[]",
                    "float"
                ],
                "kernel_size": [
                    "int",
                    "list[]",
                    "float",
                    "None"
                ],
                "stride": [
                    "int",
                    "list[]",
                    "float",
                    "None"
                ],
                "padding": [
                    "int",
                    "list[]",
                    "float",
                    "None"
                ],
                "n_labels_expected": [
                    "float",
                    "str"
                ],
                "n_channels": [
                    "int",
                    "list[float]"
                ]
            }
        },
        "SequenceBinaryClassifier.__model__": {
            "name": "__model__",
            "location": 14,
            "return": [
                "Model"
            ],
            "arguments": {
                "self": [],
                "n_channels": [
                    "int"
                ],
                "kernel_size": [
                    "int"
                ],
                "strides": [
                    "int"
                ],
                "padding": [
                    "typing.Text"
                ]
            }
        }
    },
    "scikit-keras-master/tests/test_keras/test_utils.py": {
        "model_single_layer": {
            "name": "model_single_layer",
            "location": 11,
            "return": [
                "Dense"
            ],
            "arguments": {}
        },
        "model_sequential": {
            "name": "model_sequential",
            "location": 16,
            "return": [],
            "arguments": {}
        },
        "model_compiled": {
            "name": "model_compiled",
            "location": 23,
            "return": [],
            "arguments": {}
        },
        "model_with_shared_layer": {
            "name": "model_with_shared_layer",
            "location": 31,
            "return": [
                "Model"
            ],
            "arguments": {}
        },
        "model_with_submodel": {
            "name": "model_with_submodel",
            "location": 40,
            "return": [],
            "arguments": {}
        },
        "model_with_shared_in_submodel": {
            "name": "model_with_shared_in_submodel",
            "location": 50,
            "return": [
                "Model"
            ],
            "arguments": {}
        },
        "TestIterLayers.test_model": {
            "name": "test_model",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "model": [
                    "str"
                ],
                "n_layers": [
                    "float"
                ]
            }
        },
        "TestSerializeModel.test_none": {
            "name": "test_none",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSerializeModel.test_model": {
            "name": "test_model",
            "location": 95,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "model_func": []
            }
        },
        "TestSerializeModel.test_model_gradients": {
            "name": "test_model_gradients",
            "location": 115,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "model_func": []
            }
        }
    },
    "scikit-keras-master/tests/test_keras/__init__.py": {},
    "scikit-keras-master/tests/test_utils/test_functools.py": {
        "func1": {
            "name": "func1",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {
                "a": [
                    "str",
                    "int"
                ],
                "b": [
                    "str",
                    "int"
                ]
            }
        },
        "func2": {
            "name": "func2",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "a": [
                    "str",
                    "int"
                ]
            }
        },
        "func3": {
            "name": "func3",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "a": [
                    "str",
                    "int"
                ],
                "b": [
                    "int"
                ]
            }
        },
        "func4": {
            "name": "func4",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "a": [
                    "typing.Text"
                ],
                "b": [
                    "int"
                ]
            }
        },
        "test_get_default_args": {
            "name": "test_get_default_args",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "func": [
                    "str",
                    "list[str]",
                    "bool",
                    "typing.Callable[..., collections.abc.Coroutine]",
                    "float"
                ],
                "args": []
            }
        }
    },
    "scikit-keras-master/tests/test_utils/test_pickle.py": {
        "assert_is": {
            "name": "assert_is",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "a": [
                    "int",
                    "float"
                ],
                "b": [
                    "int",
                    "float"
                ]
            }
        },
        "assert_eq": {
            "name": "assert_eq",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "a": [
                    "int",
                    "float",
                    "list[int]"
                ],
                "b": [
                    "int",
                    "float",
                    "list[int]"
                ]
            }
        },
        "assert_lambda_eq": {
            "name": "assert_lambda_eq",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "a": [
                    "int",
                    "typing.Sequence[T]",
                    "float"
                ],
                "b": [
                    "int",
                    "typing.Sequence[T]",
                    "float"
                ]
            }
        },
        "test_pickle": {
            "name": "test_pickle",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "obj": [
                    "int"
                ],
                "compare": [
                    "str",
                    "float"
                ]
            }
        }
    }
}